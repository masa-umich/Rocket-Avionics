
limestone-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b66c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030fc  0801b93c  0801b93c  0001c93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ea38  0801ea38  0001fa38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ea40  0801ea40  0001fa40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ea44  0801ea44  0001fa44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000f8  24000000  0801ea48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000cd6c  240000f8  0801eb40  000200f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400ce64  0801eb40  00020e64  2**0
                  ALLOC
  9 .lwip_sec     00000160  30000000  30000000  00021000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 11 .debug_info   00040a7d  00000000  00000000  00020126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00008a06  00000000  00000000  00060ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002d88  00000000  00000000  000695b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000240f  00000000  00000000  0006c338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000141eb  00000000  00000000  0006e747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004674a  00000000  00000000  00082932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001831cc  00000000  00000000  000c907c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0024c248  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000cfe8  00000000  00000000  0024c28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006d  00000000  00000000  00259274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000f8 	.word	0x240000f8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801b924 	.word	0x0801b924

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000fc 	.word	0x240000fc
 800030c:	0801b924 	.word	0x0801b924

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_ldivmod>:
 8000758:	b97b      	cbnz	r3, 800077a <__aeabi_ldivmod+0x22>
 800075a:	b972      	cbnz	r2, 800077a <__aeabi_ldivmod+0x22>
 800075c:	2900      	cmp	r1, #0
 800075e:	bfbe      	ittt	lt
 8000760:	2000      	movlt	r0, #0
 8000762:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000766:	e006      	blt.n	8000776 <__aeabi_ldivmod+0x1e>
 8000768:	bf08      	it	eq
 800076a:	2800      	cmpeq	r0, #0
 800076c:	bf1c      	itt	ne
 800076e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000772:	f04f 30ff 	movne.w	r0, #4294967295
 8000776:	f000 b9f3 	b.w	8000b60 <__aeabi_idiv0>
 800077a:	f1ad 0c08 	sub.w	ip, sp, #8
 800077e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000782:	2900      	cmp	r1, #0
 8000784:	db09      	blt.n	800079a <__aeabi_ldivmod+0x42>
 8000786:	2b00      	cmp	r3, #0
 8000788:	db1a      	blt.n	80007c0 <__aeabi_ldivmod+0x68>
 800078a:	f000 f86d 	bl	8000868 <__udivmoddi4>
 800078e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000792:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000796:	b004      	add	sp, #16
 8000798:	4770      	bx	lr
 800079a:	4240      	negs	r0, r0
 800079c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	db1b      	blt.n	80007dc <__aeabi_ldivmod+0x84>
 80007a4:	f000 f860 	bl	8000868 <__udivmoddi4>
 80007a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007b0:	b004      	add	sp, #16
 80007b2:	4240      	negs	r0, r0
 80007b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b8:	4252      	negs	r2, r2
 80007ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007be:	4770      	bx	lr
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	f000 f84f 	bl	8000868 <__udivmoddi4>
 80007ca:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d2:	b004      	add	sp, #16
 80007d4:	4240      	negs	r0, r0
 80007d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007da:	4770      	bx	lr
 80007dc:	4252      	negs	r2, r2
 80007de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007e2:	f000 f841 	bl	8000868 <__udivmoddi4>
 80007e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ee:	b004      	add	sp, #16
 80007f0:	4252      	negs	r2, r2
 80007f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_uldivmod>:
 80007f8:	b953      	cbnz	r3, 8000810 <__aeabi_uldivmod+0x18>
 80007fa:	b94a      	cbnz	r2, 8000810 <__aeabi_uldivmod+0x18>
 80007fc:	2900      	cmp	r1, #0
 80007fe:	bf08      	it	eq
 8000800:	2800      	cmpeq	r0, #0
 8000802:	bf1c      	itt	ne
 8000804:	f04f 31ff 	movne.w	r1, #4294967295
 8000808:	f04f 30ff 	movne.w	r0, #4294967295
 800080c:	f000 b9a8 	b.w	8000b60 <__aeabi_idiv0>
 8000810:	f1ad 0c08 	sub.w	ip, sp, #8
 8000814:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000818:	f000 f826 	bl	8000868 <__udivmoddi4>
 800081c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000824:	b004      	add	sp, #16
 8000826:	4770      	bx	lr

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	468e      	mov	lr, r1
 8000870:	4604      	mov	r4, r0
 8000872:	4688      	mov	r8, r1
 8000874:	2b00      	cmp	r3, #0
 8000876:	d14a      	bne.n	800090e <__udivmoddi4+0xa6>
 8000878:	428a      	cmp	r2, r1
 800087a:	4617      	mov	r7, r2
 800087c:	d962      	bls.n	8000944 <__udivmoddi4+0xdc>
 800087e:	fab2 f682 	clz	r6, r2
 8000882:	b14e      	cbz	r6, 8000898 <__udivmoddi4+0x30>
 8000884:	f1c6 0320 	rsb	r3, r6, #32
 8000888:	fa01 f806 	lsl.w	r8, r1, r6
 800088c:	fa20 f303 	lsr.w	r3, r0, r3
 8000890:	40b7      	lsls	r7, r6
 8000892:	ea43 0808 	orr.w	r8, r3, r8
 8000896:	40b4      	lsls	r4, r6
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	fa1f fc87 	uxth.w	ip, r7
 80008a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80008a4:	0c23      	lsrs	r3, r4, #16
 80008a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80008aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008ae:	fb01 f20c 	mul.w	r2, r1, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d909      	bls.n	80008ca <__udivmoddi4+0x62>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80008bc:	f080 80ea 	bcs.w	8000a94 <__udivmoddi4+0x22c>
 80008c0:	429a      	cmp	r2, r3
 80008c2:	f240 80e7 	bls.w	8000a94 <__udivmoddi4+0x22c>
 80008c6:	3902      	subs	r1, #2
 80008c8:	443b      	add	r3, r7
 80008ca:	1a9a      	subs	r2, r3, r2
 80008cc:	b2a3      	uxth	r3, r4
 80008ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80008d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80008d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008da:	fb00 fc0c 	mul.w	ip, r0, ip
 80008de:	459c      	cmp	ip, r3
 80008e0:	d909      	bls.n	80008f6 <__udivmoddi4+0x8e>
 80008e2:	18fb      	adds	r3, r7, r3
 80008e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80008e8:	f080 80d6 	bcs.w	8000a98 <__udivmoddi4+0x230>
 80008ec:	459c      	cmp	ip, r3
 80008ee:	f240 80d3 	bls.w	8000a98 <__udivmoddi4+0x230>
 80008f2:	443b      	add	r3, r7
 80008f4:	3802      	subs	r0, #2
 80008f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008fa:	eba3 030c 	sub.w	r3, r3, ip
 80008fe:	2100      	movs	r1, #0
 8000900:	b11d      	cbz	r5, 800090a <__udivmoddi4+0xa2>
 8000902:	40f3      	lsrs	r3, r6
 8000904:	2200      	movs	r2, #0
 8000906:	e9c5 3200 	strd	r3, r2, [r5]
 800090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090e:	428b      	cmp	r3, r1
 8000910:	d905      	bls.n	800091e <__udivmoddi4+0xb6>
 8000912:	b10d      	cbz	r5, 8000918 <__udivmoddi4+0xb0>
 8000914:	e9c5 0100 	strd	r0, r1, [r5]
 8000918:	2100      	movs	r1, #0
 800091a:	4608      	mov	r0, r1
 800091c:	e7f5      	b.n	800090a <__udivmoddi4+0xa2>
 800091e:	fab3 f183 	clz	r1, r3
 8000922:	2900      	cmp	r1, #0
 8000924:	d146      	bne.n	80009b4 <__udivmoddi4+0x14c>
 8000926:	4573      	cmp	r3, lr
 8000928:	d302      	bcc.n	8000930 <__udivmoddi4+0xc8>
 800092a:	4282      	cmp	r2, r0
 800092c:	f200 8105 	bhi.w	8000b3a <__udivmoddi4+0x2d2>
 8000930:	1a84      	subs	r4, r0, r2
 8000932:	eb6e 0203 	sbc.w	r2, lr, r3
 8000936:	2001      	movs	r0, #1
 8000938:	4690      	mov	r8, r2
 800093a:	2d00      	cmp	r5, #0
 800093c:	d0e5      	beq.n	800090a <__udivmoddi4+0xa2>
 800093e:	e9c5 4800 	strd	r4, r8, [r5]
 8000942:	e7e2      	b.n	800090a <__udivmoddi4+0xa2>
 8000944:	2a00      	cmp	r2, #0
 8000946:	f000 8090 	beq.w	8000a6a <__udivmoddi4+0x202>
 800094a:	fab2 f682 	clz	r6, r2
 800094e:	2e00      	cmp	r6, #0
 8000950:	f040 80a4 	bne.w	8000a9c <__udivmoddi4+0x234>
 8000954:	1a8a      	subs	r2, r1, r2
 8000956:	0c03      	lsrs	r3, r0, #16
 8000958:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800095c:	b280      	uxth	r0, r0
 800095e:	b2bc      	uxth	r4, r7
 8000960:	2101      	movs	r1, #1
 8000962:	fbb2 fcfe 	udiv	ip, r2, lr
 8000966:	fb0e 221c 	mls	r2, lr, ip, r2
 800096a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800096e:	fb04 f20c 	mul.w	r2, r4, ip
 8000972:	429a      	cmp	r2, r3
 8000974:	d907      	bls.n	8000986 <__udivmoddi4+0x11e>
 8000976:	18fb      	adds	r3, r7, r3
 8000978:	f10c 38ff 	add.w	r8, ip, #4294967295
 800097c:	d202      	bcs.n	8000984 <__udivmoddi4+0x11c>
 800097e:	429a      	cmp	r2, r3
 8000980:	f200 80e0 	bhi.w	8000b44 <__udivmoddi4+0x2dc>
 8000984:	46c4      	mov	ip, r8
 8000986:	1a9b      	subs	r3, r3, r2
 8000988:	fbb3 f2fe 	udiv	r2, r3, lr
 800098c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000990:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000994:	fb02 f404 	mul.w	r4, r2, r4
 8000998:	429c      	cmp	r4, r3
 800099a:	d907      	bls.n	80009ac <__udivmoddi4+0x144>
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	f102 30ff 	add.w	r0, r2, #4294967295
 80009a2:	d202      	bcs.n	80009aa <__udivmoddi4+0x142>
 80009a4:	429c      	cmp	r4, r3
 80009a6:	f200 80ca 	bhi.w	8000b3e <__udivmoddi4+0x2d6>
 80009aa:	4602      	mov	r2, r0
 80009ac:	1b1b      	subs	r3, r3, r4
 80009ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009b2:	e7a5      	b.n	8000900 <__udivmoddi4+0x98>
 80009b4:	f1c1 0620 	rsb	r6, r1, #32
 80009b8:	408b      	lsls	r3, r1
 80009ba:	fa22 f706 	lsr.w	r7, r2, r6
 80009be:	431f      	orrs	r7, r3
 80009c0:	fa0e f401 	lsl.w	r4, lr, r1
 80009c4:	fa20 f306 	lsr.w	r3, r0, r6
 80009c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80009cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80009d0:	4323      	orrs	r3, r4
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	fa1f fc87 	uxth.w	ip, r7
 80009da:	fbbe f0f9 	udiv	r0, lr, r9
 80009de:	0c1c      	lsrs	r4, r3, #16
 80009e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80009e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80009ec:	45a6      	cmp	lr, r4
 80009ee:	fa02 f201 	lsl.w	r2, r2, r1
 80009f2:	d909      	bls.n	8000a08 <__udivmoddi4+0x1a0>
 80009f4:	193c      	adds	r4, r7, r4
 80009f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80009fa:	f080 809c 	bcs.w	8000b36 <__udivmoddi4+0x2ce>
 80009fe:	45a6      	cmp	lr, r4
 8000a00:	f240 8099 	bls.w	8000b36 <__udivmoddi4+0x2ce>
 8000a04:	3802      	subs	r0, #2
 8000a06:	443c      	add	r4, r7
 8000a08:	eba4 040e 	sub.w	r4, r4, lr
 8000a0c:	fa1f fe83 	uxth.w	lr, r3
 8000a10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a14:	fb09 4413 	mls	r4, r9, r3, r4
 8000a18:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a1c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a20:	45a4      	cmp	ip, r4
 8000a22:	d908      	bls.n	8000a36 <__udivmoddi4+0x1ce>
 8000a24:	193c      	adds	r4, r7, r4
 8000a26:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a2a:	f080 8082 	bcs.w	8000b32 <__udivmoddi4+0x2ca>
 8000a2e:	45a4      	cmp	ip, r4
 8000a30:	d97f      	bls.n	8000b32 <__udivmoddi4+0x2ca>
 8000a32:	3b02      	subs	r3, #2
 8000a34:	443c      	add	r4, r7
 8000a36:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a3a:	eba4 040c 	sub.w	r4, r4, ip
 8000a3e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a42:	4564      	cmp	r4, ip
 8000a44:	4673      	mov	r3, lr
 8000a46:	46e1      	mov	r9, ip
 8000a48:	d362      	bcc.n	8000b10 <__udivmoddi4+0x2a8>
 8000a4a:	d05f      	beq.n	8000b0c <__udivmoddi4+0x2a4>
 8000a4c:	b15d      	cbz	r5, 8000a66 <__udivmoddi4+0x1fe>
 8000a4e:	ebb8 0203 	subs.w	r2, r8, r3
 8000a52:	eb64 0409 	sbc.w	r4, r4, r9
 8000a56:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5a:	fa22 f301 	lsr.w	r3, r2, r1
 8000a5e:	431e      	orrs	r6, r3
 8000a60:	40cc      	lsrs	r4, r1
 8000a62:	e9c5 6400 	strd	r6, r4, [r5]
 8000a66:	2100      	movs	r1, #0
 8000a68:	e74f      	b.n	800090a <__udivmoddi4+0xa2>
 8000a6a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a6e:	0c01      	lsrs	r1, r0, #16
 8000a70:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a74:	b280      	uxth	r0, r0
 8000a76:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	4638      	mov	r0, r7
 8000a7e:	463c      	mov	r4, r7
 8000a80:	46b8      	mov	r8, r7
 8000a82:	46be      	mov	lr, r7
 8000a84:	2620      	movs	r6, #32
 8000a86:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a8a:	eba2 0208 	sub.w	r2, r2, r8
 8000a8e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a92:	e766      	b.n	8000962 <__udivmoddi4+0xfa>
 8000a94:	4601      	mov	r1, r0
 8000a96:	e718      	b.n	80008ca <__udivmoddi4+0x62>
 8000a98:	4610      	mov	r0, r2
 8000a9a:	e72c      	b.n	80008f6 <__udivmoddi4+0x8e>
 8000a9c:	f1c6 0220 	rsb	r2, r6, #32
 8000aa0:	fa2e f302 	lsr.w	r3, lr, r2
 8000aa4:	40b7      	lsls	r7, r6
 8000aa6:	40b1      	lsls	r1, r6
 8000aa8:	fa20 f202 	lsr.w	r2, r0, r2
 8000aac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ab6:	b2bc      	uxth	r4, r7
 8000ab8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000abc:	0c11      	lsrs	r1, r2, #16
 8000abe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac2:	fb08 f904 	mul.w	r9, r8, r4
 8000ac6:	40b0      	lsls	r0, r6
 8000ac8:	4589      	cmp	r9, r1
 8000aca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ace:	b280      	uxth	r0, r0
 8000ad0:	d93e      	bls.n	8000b50 <__udivmoddi4+0x2e8>
 8000ad2:	1879      	adds	r1, r7, r1
 8000ad4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ad8:	d201      	bcs.n	8000ade <__udivmoddi4+0x276>
 8000ada:	4589      	cmp	r9, r1
 8000adc:	d81f      	bhi.n	8000b1e <__udivmoddi4+0x2b6>
 8000ade:	eba1 0109 	sub.w	r1, r1, r9
 8000ae2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ae6:	fb09 f804 	mul.w	r8, r9, r4
 8000aea:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aee:	b292      	uxth	r2, r2
 8000af0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000af4:	4542      	cmp	r2, r8
 8000af6:	d229      	bcs.n	8000b4c <__udivmoddi4+0x2e4>
 8000af8:	18ba      	adds	r2, r7, r2
 8000afa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000afe:	d2c4      	bcs.n	8000a8a <__udivmoddi4+0x222>
 8000b00:	4542      	cmp	r2, r8
 8000b02:	d2c2      	bcs.n	8000a8a <__udivmoddi4+0x222>
 8000b04:	f1a9 0102 	sub.w	r1, r9, #2
 8000b08:	443a      	add	r2, r7
 8000b0a:	e7be      	b.n	8000a8a <__udivmoddi4+0x222>
 8000b0c:	45f0      	cmp	r8, lr
 8000b0e:	d29d      	bcs.n	8000a4c <__udivmoddi4+0x1e4>
 8000b10:	ebbe 0302 	subs.w	r3, lr, r2
 8000b14:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b18:	3801      	subs	r0, #1
 8000b1a:	46e1      	mov	r9, ip
 8000b1c:	e796      	b.n	8000a4c <__udivmoddi4+0x1e4>
 8000b1e:	eba7 0909 	sub.w	r9, r7, r9
 8000b22:	4449      	add	r1, r9
 8000b24:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b28:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b2c:	fb09 f804 	mul.w	r8, r9, r4
 8000b30:	e7db      	b.n	8000aea <__udivmoddi4+0x282>
 8000b32:	4673      	mov	r3, lr
 8000b34:	e77f      	b.n	8000a36 <__udivmoddi4+0x1ce>
 8000b36:	4650      	mov	r0, sl
 8000b38:	e766      	b.n	8000a08 <__udivmoddi4+0x1a0>
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e6fd      	b.n	800093a <__udivmoddi4+0xd2>
 8000b3e:	443b      	add	r3, r7
 8000b40:	3a02      	subs	r2, #2
 8000b42:	e733      	b.n	80009ac <__udivmoddi4+0x144>
 8000b44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b48:	443b      	add	r3, r7
 8000b4a:	e71c      	b.n	8000986 <__udivmoddi4+0x11e>
 8000b4c:	4649      	mov	r1, r9
 8000b4e:	e79c      	b.n	8000a8a <__udivmoddi4+0x222>
 8000b50:	eba1 0109 	sub.w	r1, r1, r9
 8000b54:	46c4      	mov	ip, r8
 8000b56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b5a:	fb09 f804 	mul.w	r8, r9, r4
 8000b5e:	e7c4      	b.n	8000aea <__udivmoddi4+0x282>

08000b60 <__aeabi_idiv0>:
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	0000      	movs	r0, r0
	...

08000b68 <set_system_time>:
uint64_t getTimestamp() {
	return HAL_GetTick();
}

// Callback for LWIP SNTP
void set_system_time(uint32_t sec, uint32_t us) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	@ 0x30
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	struct tm *tm_time;

	time_t epoch = sec;
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	2000      	movs	r0, #0
 8000b76:	460a      	mov	r2, r1
 8000b78:	4603      	mov	r3, r0
 8000b7a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tm_time = gmtime(&epoch);
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	4618      	mov	r0, r3
 8000b84:	f018 fe40 	bl	8019808 <gmtime>
 8000b88:	62f8      	str	r0, [r7, #44]	@ 0x2c

	sTime.Hours = tm_time->tm_hour;
 8000b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	763b      	strb	r3, [r7, #24]
	sTime.Minutes = tm_time->tm_min;
 8000b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	767b      	strb	r3, [r7, #25]
	sTime.Seconds = tm_time->tm_sec;
 8000b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	76bb      	strb	r3, [r7, #26]
	sTime.SubSeconds = 6249 - ((us / 1000000.0) * 6250);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	ee07 3a90 	vmov	s15, r3
 8000ba8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000bac:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8000c30 <set_system_time+0xc8>
 8000bb0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bb4:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8000c38 <set_system_time+0xd0>
 8000bb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bbc:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8000c40 <set_system_time+0xd8>
 8000bc0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000bc4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bc8:	ee17 3a90 	vmov	r3, s15
 8000bcc:	61fb      	str	r3, [r7, #28]

	sDate.Year = tm_time->tm_year - 100;
 8000bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	3b64      	subs	r3, #100	@ 0x64
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	75fb      	strb	r3, [r7, #23]
	sDate.Month = tm_time->tm_mon + 1;
 8000bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bdc:	691b      	ldr	r3, [r3, #16]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	3301      	adds	r3, #1
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	757b      	strb	r3, [r7, #21]
	sDate.Date = tm_time->tm_mday;
 8000be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	75bb      	strb	r3, [r7, #22]
	sDate.WeekDay = (tm_time->tm_wday == 0) ? 7 : tm_time->tm_wday;
 8000bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <set_system_time+0x96>
 8000bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	e000      	b.n	8000c00 <set_system_time+0x98>
 8000bfe:	2307      	movs	r3, #7
 8000c00:	753b      	strb	r3, [r7, #20]

	taskENTER_CRITICAL();
 8000c02:	f00d f869 	bl	800dcd8 <vPortEnterCritical>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480e      	ldr	r0, [pc, #56]	@ (8000c48 <set_system_time+0xe0>)
 8000c10:	f006 ff18 	bl	8007a44 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	2200      	movs	r2, #0
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480a      	ldr	r0, [pc, #40]	@ (8000c48 <set_system_time+0xe0>)
 8000c1e:	f006 fe17 	bl	8007850 <HAL_RTC_SetTime>
	taskEXIT_CRITICAL();
 8000c22:	f00d f88b 	bl	800dd3c <vPortExitCritical>
}
 8000c26:	bf00      	nop
 8000c28:	3730      	adds	r7, #48	@ 0x30
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	00000000 	.word	0x00000000
 8000c34:	412e8480 	.word	0x412e8480
 8000c38:	00000000 	.word	0x00000000
 8000c3c:	40b86a00 	.word	0x40b86a00
 8000c40:	00000000 	.word	0x00000000
 8000c44:	40b86900 	.word	0x40b86900
 8000c48:	240001bc 	.word	0x240001bc
 8000c4c:	00000000 	.word	0x00000000

08000c50 <get_rtc_time>:

/**
 * Get Unix timestamp in nanoseconds
 */
uint64_t get_rtc_time() {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b092      	sub	sp, #72	@ 0x48
 8000c54:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	taskENTER_CRITICAL();
 8000c56:	f00d f83f 	bl	800dcd8 <vPortEnterCritical>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000c5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c5e:	2200      	movs	r2, #0
 8000c60:	4619      	mov	r1, r3
 8000c62:	4837      	ldr	r0, [pc, #220]	@ (8000d40 <get_rtc_time+0xf0>)
 8000c64:	f006 fe92 	bl	800798c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4833      	ldr	r0, [pc, #204]	@ (8000d40 <get_rtc_time+0xf0>)
 8000c72:	f006 ff6f 	bl	8007b54 <HAL_RTC_GetDate>
	taskEXIT_CRITICAL();
 8000c76:	f00d f861 	bl	800dd3c <vPortExitCritical>

	struct tm time;
	time.tm_year = sDate.Year + 100;
 8000c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c7e:	3364      	adds	r3, #100	@ 0x64
 8000c80:	617b      	str	r3, [r7, #20]
	time.tm_mon  = sDate.Month - 1;
 8000c82:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000c86:	3b01      	subs	r3, #1
 8000c88:	613b      	str	r3, [r7, #16]
	time.tm_mday = sDate.Date;
 8000c8a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000c8e:	60fb      	str	r3, [r7, #12]
	time.tm_hour = sTime.Hours;
 8000c90:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c94:	60bb      	str	r3, [r7, #8]
	time.tm_min  = sTime.Minutes;
 8000c96:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000c9a:	607b      	str	r3, [r7, #4]
	time.tm_sec  = sTime.Seconds;
 8000c9c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000ca0:	603b      	str	r3, [r7, #0]
	time.tm_isdst = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]

	time_t sec = mktime(&time);
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f018 ff45 	bl	8019b38 <mktime>
 8000cae:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
	uint32_t us = ((6249 - sTime.SubSeconds) / 6250.0) * 1e6;
 8000cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cb4:	f641 0369 	movw	r3, #6249	@ 0x1869
 8000cb8:	1a9b      	subs	r3, r3, r2
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000cc2:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 8000d20 <get_rtc_time+0xd0>
 8000cc6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cca:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8000d28 <get_rtc_time+0xd8>
 8000cce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cd6:	ee17 3a90 	vmov	r3, s15
 8000cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
	return (sec * 1e9) + (us * 1e3);
 8000cdc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8000ce0:	f7ff fd0c 	bl	80006fc <__aeabi_l2d>
 8000ce4:	ec41 0b16 	vmov	d6, r0, r1
 8000ce8:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 8000d30 <get_rtc_time+0xe0>
 8000cec:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cf2:	ee07 3a90 	vmov	s15, r3
 8000cf6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000cfa:	ed9f 5b0f 	vldr	d5, [pc, #60]	@ 8000d38 <get_rtc_time+0xe8>
 8000cfe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000d02:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d06:	ec51 0b17 	vmov	r0, r1, d7
 8000d0a:	f7ff fd8d 	bl	8000828 <__aeabi_d2ulz>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	460b      	mov	r3, r1

}
 8000d12:	4610      	mov	r0, r2
 8000d14:	4619      	mov	r1, r3
 8000d16:	3748      	adds	r7, #72	@ 0x48
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	f3af 8000 	nop.w
 8000d20:	00000000 	.word	0x00000000
 8000d24:	40b86a00 	.word	0x40b86a00
 8000d28:	00000000 	.word	0x00000000
 8000d2c:	412e8480 	.word	0x412e8480
 8000d30:	00000000 	.word	0x00000000
 8000d34:	41cdcd65 	.word	0x41cdcd65
 8000d38:	00000000 	.word	0x00000000
 8000d3c:	408f4000 	.word	0x408f4000
 8000d40:	240001bc 	.word	0x240001bc

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000d4a:	f000 fdbb 	bl	80018c4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000d4e:	4b44      	ldr	r3, [pc, #272]	@ (8000e60 <main+0x11c>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d11b      	bne.n	8000d92 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d5a:	f3bf 8f4f 	dsb	sy
}
 8000d5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d60:	f3bf 8f6f 	isb	sy
}
 8000d64:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d66:	4b3e      	ldr	r3, [pc, #248]	@ (8000e60 <main+0x11c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d6e:	f3bf 8f4f 	dsb	sy
}
 8000d72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d74:	f3bf 8f6f 	isb	sy
}
 8000d78:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d7a:	4b39      	ldr	r3, [pc, #228]	@ (8000e60 <main+0x11c>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	4a38      	ldr	r2, [pc, #224]	@ (8000e60 <main+0x11c>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d84:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d86:	f3bf 8f4f 	dsb	sy
}
 8000d8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d8c:	f3bf 8f6f 	isb	sy
}
 8000d90:	e000      	b.n	8000d94 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000d92:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d94:	4b32      	ldr	r3, [pc, #200]	@ (8000e60 <main+0x11c>)
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d138      	bne.n	8000e12 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000da0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e60 <main+0x11c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000da8:	f3bf 8f4f 	dsb	sy
}
 8000dac:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000dae:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <main+0x11c>)
 8000db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000db4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	0b5b      	lsrs	r3, r3, #13
 8000dba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000dbe:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	08db      	lsrs	r3, r3, #3
 8000dc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000dc8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	015a      	lsls	r2, r3, #5
 8000dce:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000dd2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dd8:	4921      	ldr	r1, [pc, #132]	@ (8000e60 <main+0x11c>)
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	1e5a      	subs	r2, r3, #1
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1ef      	bne.n	8000dca <main+0x86>
    } while(sets-- != 0U);
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	1e5a      	subs	r2, r3, #1
 8000dee:	60ba      	str	r2, [r7, #8]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1e5      	bne.n	8000dc0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000df4:	f3bf 8f4f 	dsb	sy
}
 8000df8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000dfa:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <main+0x11c>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	4a18      	ldr	r2, [pc, #96]	@ (8000e60 <main+0x11c>)
 8000e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e04:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e06:	f3bf 8f4f 	dsb	sy
}
 8000e0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e0c:	f3bf 8f6f 	isb	sy
}
 8000e10:	e000      	b.n	8000e14 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000e12:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e14:	f001 fc9a 	bl	800274c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e18:	f000 f82a 	bl	8000e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1c:	f000 fb72 	bl	8001504 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e20:	f000 f894 	bl	8000f4c <MX_I2C1_Init>
  MX_I2C5_Init();
 8000e24:	f000 f8d2 	bl	8000fcc <MX_I2C5_Init>
  MX_SPI4_Init();
 8000e28:	f000 fa1c 	bl	8001264 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000e2c:	f000 fa72 	bl	8001314 <MX_SPI5_Init>
  MX_USART10_UART_Init();
 8000e30:	f000 fb1c 	bl	800146c <MX_USART10_UART_Init>
  MX_RTC_Init();
 8000e34:	f000 f90a 	bl	800104c <MX_RTC_Init>
  MX_SPI1_Init();
 8000e38:	f000 f966 	bl	8001108 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000e3c:	f000 f9ba 	bl	80011b4 <MX_SPI2_Init>
  MX_SPI6_Init();
 8000e40:	f000 fabe 	bl	80013c0 <MX_SPI6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e44:	f009 fc28 	bl	800a698 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e48:	4a06      	ldr	r2, [pc, #24]	@ (8000e64 <main+0x120>)
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4806      	ldr	r0, [pc, #24]	@ (8000e68 <main+0x124>)
 8000e4e:	f009 fc82 	bl	800a756 <osThreadNew>
 8000e52:	4603      	mov	r3, r0
 8000e54:	4a05      	ldr	r2, [pc, #20]	@ (8000e6c <main+0x128>)
 8000e56:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e58:	f009 fc42 	bl	800a6e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <main+0x118>
 8000e60:	e000ed00 	.word	0xe000ed00
 8000e64:	0801e54c 	.word	0x0801e54c
 8000e68:	08001895 	.word	0x08001895
 8000e6c:	2400051c 	.word	0x2400051c

08000e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b09c      	sub	sp, #112	@ 0x70
 8000e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7a:	224c      	movs	r2, #76	@ 0x4c
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f018 fca8 	bl	80197d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2220      	movs	r2, #32
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f018 fca2 	bl	80197d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e90:	2002      	movs	r0, #2
 8000e92:	f003 fe97 	bl	8004bc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e96:	2300      	movs	r3, #0
 8000e98:	603b      	str	r3, [r7, #0]
 8000e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f48 <SystemClock_Config+0xd8>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8000f48 <SystemClock_Config+0xd8>)
 8000ea0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ea4:	6193      	str	r3, [r2, #24]
 8000ea6:	4b28      	ldr	r3, [pc, #160]	@ (8000f48 <SystemClock_Config+0xd8>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000eb2:	bf00      	nop
 8000eb4:	4b24      	ldr	r3, [pc, #144]	@ (8000f48 <SystemClock_Config+0xd8>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ec0:	d1f8      	bne.n	8000eb4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000ed8:	230c      	movs	r3, #12
 8000eda:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000edc:	2301      	movs	r3, #1
 8000ede:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ee8:	230c      	movs	r3, #12
 8000eea:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 febd 	bl	8004c78 <HAL_RCC_OscConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f04:	f000 fd42 	bl	800198c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f08:	233f      	movs	r3, #63	@ 0x3f
 8000f0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f18:	2340      	movs	r3, #64	@ 0x40
 8000f1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f1c:	2340      	movs	r3, #64	@ 0x40
 8000f1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f24:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f26:	2340      	movs	r3, #64	@ 0x40
 8000f28:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f004 fa7c 	bl	800542c <HAL_RCC_ClockConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000f3a:	f000 fd27 	bl	800198c <Error_Handler>
  }
}
 8000f3e:	bf00      	nop
 8000f40:	3770      	adds	r7, #112	@ 0x70
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	58024800 	.word	0x58024800

08000f4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc0 <MX_I2C1_Init+0x74>)
 8000f52:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc4 <MX_I2C1_Init+0x78>)
 8000f54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc0 <MX_I2C1_Init+0x74>)
 8000f58:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc8 <MX_I2C1_Init+0x7c>)
 8000f5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f5c:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <MX_I2C1_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f62:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <MX_I2C1_Init+0x74>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f68:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <MX_I2C1_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <MX_I2C1_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <MX_I2C1_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <MX_I2C1_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <MX_I2C1_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f86:	480e      	ldr	r0, [pc, #56]	@ (8000fc0 <MX_I2C1_Init+0x74>)
 8000f88:	f003 fce8 	bl	800495c <HAL_I2C_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f92:	f000 fcfb 	bl	800198c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f96:	2100      	movs	r1, #0
 8000f98:	4809      	ldr	r0, [pc, #36]	@ (8000fc0 <MX_I2C1_Init+0x74>)
 8000f9a:	f003 fd7b 	bl	8004a94 <HAL_I2CEx_ConfigAnalogFilter>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fa4:	f000 fcf2 	bl	800198c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <MX_I2C1_Init+0x74>)
 8000fac:	f003 fdbd 	bl	8004b2a <HAL_I2CEx_ConfigDigitalFilter>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fb6:	f000 fce9 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	24000114 	.word	0x24000114
 8000fc4:	40005400 	.word	0x40005400
 8000fc8:	10b0dcfb 	.word	0x10b0dcfb

08000fcc <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001040 <MX_I2C5_Init+0x74>)
 8000fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8001044 <MX_I2C5_Init+0x78>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x10B0DCFB;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <MX_I2C5_Init+0x74>)
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001048 <MX_I2C5_Init+0x7c>)
 8000fda:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <MX_I2C5_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <MX_I2C5_Init+0x74>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <MX_I2C5_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8000fee:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <MX_I2C5_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <MX_I2C5_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <MX_I2C5_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001000:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <MX_I2C5_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8001006:	480e      	ldr	r0, [pc, #56]	@ (8001040 <MX_I2C5_Init+0x74>)
 8001008:	f003 fca8 	bl	800495c <HAL_I2C_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8001012:	f000 fcbb 	bl	800198c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001016:	2100      	movs	r1, #0
 8001018:	4809      	ldr	r0, [pc, #36]	@ (8001040 <MX_I2C5_Init+0x74>)
 800101a:	f003 fd3b 	bl	8004a94 <HAL_I2CEx_ConfigAnalogFilter>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8001024:	f000 fcb2 	bl	800198c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8001028:	2100      	movs	r1, #0
 800102a:	4805      	ldr	r0, [pc, #20]	@ (8001040 <MX_I2C5_Init+0x74>)
 800102c:	f003 fd7d 	bl	8004b2a <HAL_I2CEx_ConfigDigitalFilter>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8001036:	f000 fca9 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	24000168 	.word	0x24000168
 8001044:	40006400 	.word	0x40006400
 8001048:	10b0dcfb 	.word	0x10b0dcfb

0800104c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001060:	2300      	movs	r3, #0
 8001062:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001064:	4b26      	ldr	r3, [pc, #152]	@ (8001100 <MX_RTC_Init+0xb4>)
 8001066:	4a27      	ldr	r2, [pc, #156]	@ (8001104 <MX_RTC_Init+0xb8>)
 8001068:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800106a:	4b25      	ldr	r3, [pc, #148]	@ (8001100 <MX_RTC_Init+0xb4>)
 800106c:	2200      	movs	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001070:	4b23      	ldr	r3, [pc, #140]	@ (8001100 <MX_RTC_Init+0xb4>)
 8001072:	227f      	movs	r2, #127	@ 0x7f
 8001074:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 6249;
 8001076:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <MX_RTC_Init+0xb4>)
 8001078:	f641 0269 	movw	r2, #6249	@ 0x1869
 800107c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800107e:	4b20      	ldr	r3, [pc, #128]	@ (8001100 <MX_RTC_Init+0xb4>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001084:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <MX_RTC_Init+0xb4>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800108a:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <MX_RTC_Init+0xb4>)
 800108c:	2200      	movs	r2, #0
 800108e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <MX_RTC_Init+0xb4>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001096:	481a      	ldr	r0, [pc, #104]	@ (8001100 <MX_RTC_Init+0xb4>)
 8001098:	f006 fb58 	bl	800774c <HAL_RTC_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80010a2:	f000 fc73 	bl	800198c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2200      	movs	r2, #0
 80010be:	4619      	mov	r1, r3
 80010c0:	480f      	ldr	r0, [pc, #60]	@ (8001100 <MX_RTC_Init+0xb4>)
 80010c2:	f006 fbc5 	bl	8007850 <HAL_RTC_SetTime>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80010cc:	f000 fc5e 	bl	800198c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010d0:	2301      	movs	r3, #1
 80010d2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80010d4:	2301      	movs	r3, #1
 80010d6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80010d8:	2301      	movs	r3, #1
 80010da:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	2200      	movs	r2, #0
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	@ (8001100 <MX_RTC_Init+0xb4>)
 80010e8:	f006 fcac 	bl	8007a44 <HAL_RTC_SetDate>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80010f2:	f000 fc4b 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	240001bc 	.word	0x240001bc
 8001104:	58004000 	.word	0x58004000

08001108 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800110c:	4b27      	ldr	r3, [pc, #156]	@ (80011ac <MX_SPI1_Init+0xa4>)
 800110e:	4a28      	ldr	r2, [pc, #160]	@ (80011b0 <MX_SPI1_Init+0xa8>)
 8001110:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001112:	4b26      	ldr	r3, [pc, #152]	@ (80011ac <MX_SPI1_Init+0xa4>)
 8001114:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001118:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800111a:	4b24      	ldr	r3, [pc, #144]	@ (80011ac <MX_SPI1_Init+0xa4>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001120:	4b22      	ldr	r3, [pc, #136]	@ (80011ac <MX_SPI1_Init+0xa4>)
 8001122:	2207      	movs	r2, #7
 8001124:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001126:	4b21      	ldr	r3, [pc, #132]	@ (80011ac <MX_SPI1_Init+0xa4>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800112c:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <MX_SPI1_Init+0xa4>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001132:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <MX_SPI1_Init+0xa4>)
 8001134:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001138:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800113a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ac <MX_SPI1_Init+0xa4>)
 800113c:	2200      	movs	r2, #0
 800113e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001140:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <MX_SPI1_Init+0xa4>)
 8001142:	2200      	movs	r2, #0
 8001144:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001146:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <MX_SPI1_Init+0xa4>)
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800114c:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <MX_SPI1_Init+0xa4>)
 800114e:	2200      	movs	r2, #0
 8001150:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001152:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <MX_SPI1_Init+0xa4>)
 8001154:	2200      	movs	r2, #0
 8001156:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001158:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <MX_SPI1_Init+0xa4>)
 800115a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800115e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <MX_SPI1_Init+0xa4>)
 8001162:	2200      	movs	r2, #0
 8001164:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <MX_SPI1_Init+0xa4>)
 8001168:	2200      	movs	r2, #0
 800116a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <MX_SPI1_Init+0xa4>)
 800116e:	2200      	movs	r2, #0
 8001170:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <MX_SPI1_Init+0xa4>)
 8001174:	2200      	movs	r2, #0
 8001176:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <MX_SPI1_Init+0xa4>)
 800117a:	2200      	movs	r2, #0
 800117c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <MX_SPI1_Init+0xa4>)
 8001180:	2200      	movs	r2, #0
 8001182:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001184:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <MX_SPI1_Init+0xa4>)
 8001186:	2200      	movs	r2, #0
 8001188:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <MX_SPI1_Init+0xa4>)
 800118c:	2200      	movs	r2, #0
 800118e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_SPI1_Init+0xa4>)
 8001192:	2200      	movs	r2, #0
 8001194:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	@ (80011ac <MX_SPI1_Init+0xa4>)
 8001198:	f006 fdfa 	bl	8007d90 <HAL_SPI_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80011a2:	f000 fbf3 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	240001e0 	.word	0x240001e0
 80011b0:	40013000 	.word	0x40013000

080011b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011b8:	4b28      	ldr	r3, [pc, #160]	@ (800125c <MX_SPI2_Init+0xa8>)
 80011ba:	4a29      	ldr	r2, [pc, #164]	@ (8001260 <MX_SPI2_Init+0xac>)
 80011bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011be:	4b27      	ldr	r3, [pc, #156]	@ (800125c <MX_SPI2_Init+0xa8>)
 80011c0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011c6:	4b25      	ldr	r3, [pc, #148]	@ (800125c <MX_SPI2_Init+0xa8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011cc:	4b23      	ldr	r3, [pc, #140]	@ (800125c <MX_SPI2_Init+0xa8>)
 80011ce:	2207      	movs	r2, #7
 80011d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d2:	4b22      	ldr	r3, [pc, #136]	@ (800125c <MX_SPI2_Init+0xa8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011d8:	4b20      	ldr	r3, [pc, #128]	@ (800125c <MX_SPI2_Init+0xa8>)
 80011da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011e0:	4b1e      	ldr	r3, [pc, #120]	@ (800125c <MX_SPI2_Init+0xa8>)
 80011e2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <MX_SPI2_Init+0xa8>)
 80011ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80011ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_SPI2_Init+0xa8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f6:	4b19      	ldr	r3, [pc, #100]	@ (800125c <MX_SPI2_Init+0xa8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011fc:	4b17      	ldr	r3, [pc, #92]	@ (800125c <MX_SPI2_Init+0xa8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <MX_SPI2_Init+0xa8>)
 8001204:	2200      	movs	r2, #0
 8001206:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_SPI2_Init+0xa8>)
 800120a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800120e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <MX_SPI2_Init+0xa8>)
 8001212:	2200      	movs	r2, #0
 8001214:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_SPI2_Init+0xa8>)
 8001218:	2200      	movs	r2, #0
 800121a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_SPI2_Init+0xa8>)
 800121e:	2200      	movs	r2, #0
 8001220:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <MX_SPI2_Init+0xa8>)
 8001224:	2200      	movs	r2, #0
 8001226:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <MX_SPI2_Init+0xa8>)
 800122a:	2200      	movs	r2, #0
 800122c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <MX_SPI2_Init+0xa8>)
 8001230:	2200      	movs	r2, #0
 8001232:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001234:	4b09      	ldr	r3, [pc, #36]	@ (800125c <MX_SPI2_Init+0xa8>)
 8001236:	2200      	movs	r2, #0
 8001238:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <MX_SPI2_Init+0xa8>)
 800123c:	2200      	movs	r2, #0
 800123e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <MX_SPI2_Init+0xa8>)
 8001242:	2200      	movs	r2, #0
 8001244:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	@ (800125c <MX_SPI2_Init+0xa8>)
 8001248:	f006 fda2 	bl	8007d90 <HAL_SPI_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001252:	f000 fb9b 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	24000268 	.word	0x24000268
 8001260:	40003800 	.word	0x40003800

08001264 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001268:	4b28      	ldr	r3, [pc, #160]	@ (800130c <MX_SPI4_Init+0xa8>)
 800126a:	4a29      	ldr	r2, [pc, #164]	@ (8001310 <MX_SPI4_Init+0xac>)
 800126c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800126e:	4b27      	ldr	r3, [pc, #156]	@ (800130c <MX_SPI4_Init+0xa8>)
 8001270:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001274:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001276:	4b25      	ldr	r3, [pc, #148]	@ (800130c <MX_SPI4_Init+0xa8>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800127c:	4b23      	ldr	r3, [pc, #140]	@ (800130c <MX_SPI4_Init+0xa8>)
 800127e:	2207      	movs	r2, #7
 8001280:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001282:	4b22      	ldr	r3, [pc, #136]	@ (800130c <MX_SPI4_Init+0xa8>)
 8001284:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001288:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800128a:	4b20      	ldr	r3, [pc, #128]	@ (800130c <MX_SPI4_Init+0xa8>)
 800128c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001290:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001292:	4b1e      	ldr	r3, [pc, #120]	@ (800130c <MX_SPI4_Init+0xa8>)
 8001294:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001298:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800129a:	4b1c      	ldr	r3, [pc, #112]	@ (800130c <MX_SPI4_Init+0xa8>)
 800129c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80012a0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <MX_SPI4_Init+0xa8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a8:	4b18      	ldr	r3, [pc, #96]	@ (800130c <MX_SPI4_Init+0xa8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ae:	4b17      	ldr	r3, [pc, #92]	@ (800130c <MX_SPI4_Init+0xa8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80012b4:	4b15      	ldr	r3, [pc, #84]	@ (800130c <MX_SPI4_Init+0xa8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012ba:	4b14      	ldr	r3, [pc, #80]	@ (800130c <MX_SPI4_Init+0xa8>)
 80012bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <MX_SPI4_Init+0xa8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012c8:	4b10      	ldr	r3, [pc, #64]	@ (800130c <MX_SPI4_Init+0xa8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <MX_SPI4_Init+0xa8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012d4:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <MX_SPI4_Init+0xa8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012da:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <MX_SPI4_Init+0xa8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <MX_SPI4_Init+0xa8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <MX_SPI4_Init+0xa8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012ec:	4b07      	ldr	r3, [pc, #28]	@ (800130c <MX_SPI4_Init+0xa8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <MX_SPI4_Init+0xa8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80012f8:	4804      	ldr	r0, [pc, #16]	@ (800130c <MX_SPI4_Init+0xa8>)
 80012fa:	f006 fd49 	bl	8007d90 <HAL_SPI_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 8001304:	f000 fb42 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	240002f0 	.word	0x240002f0
 8001310:	40013400 	.word	0x40013400

08001314 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001318:	4b27      	ldr	r3, [pc, #156]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 800131a:	4a28      	ldr	r2, [pc, #160]	@ (80013bc <MX_SPI5_Init+0xa8>)
 800131c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800131e:	4b26      	ldr	r3, [pc, #152]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 8001320:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001324:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001326:	4b24      	ldr	r3, [pc, #144]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800132c:	4b22      	ldr	r3, [pc, #136]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 800132e:	2207      	movs	r2, #7
 8001330:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001332:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001338:	4b1f      	ldr	r3, [pc, #124]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 800133a:	2200      	movs	r2, #0
 800133c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800133e:	4b1e      	ldr	r3, [pc, #120]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 8001340:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001344:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001346:	4b1c      	ldr	r3, [pc, #112]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 8001348:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800134c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800134e:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001354:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800135a:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 800135c:	2200      	movs	r2, #0
 800135e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001360:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 8001362:	2200      	movs	r2, #0
 8001364:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001366:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 8001368:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800136c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800136e:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 8001370:	2200      	movs	r2, #0
 8001372:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001374:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 8001376:	2200      	movs	r2, #0
 8001378:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800137a:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 800137c:	2200      	movs	r2, #0
 800137e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001380:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 8001382:	2200      	movs	r2, #0
 8001384:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001386:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 8001388:	2200      	movs	r2, #0
 800138a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800138c:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 800138e:	2200      	movs	r2, #0
 8001390:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 8001394:	2200      	movs	r2, #0
 8001396:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001398:	4b07      	ldr	r3, [pc, #28]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 800139a:	2200      	movs	r2, #0
 800139c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800139e:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	@ (80013b8 <MX_SPI5_Init+0xa4>)
 80013a6:	f006 fcf3 	bl	8007d90 <HAL_SPI_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 80013b0:	f000 faec 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	24000378 	.word	0x24000378
 80013bc:	40015000 	.word	0x40015000

080013c0 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 80013c4:	4b27      	ldr	r3, [pc, #156]	@ (8001464 <MX_SPI6_Init+0xa4>)
 80013c6:	4a28      	ldr	r2, [pc, #160]	@ (8001468 <MX_SPI6_Init+0xa8>)
 80013c8:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 80013ca:	4b26      	ldr	r3, [pc, #152]	@ (8001464 <MX_SPI6_Init+0xa4>)
 80013cc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80013d0:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 80013d2:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <MX_SPI6_Init+0xa4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 80013d8:	4b22      	ldr	r3, [pc, #136]	@ (8001464 <MX_SPI6_Init+0xa4>)
 80013da:	2207      	movs	r2, #7
 80013dc:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013de:	4b21      	ldr	r3, [pc, #132]	@ (8001464 <MX_SPI6_Init+0xa4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <MX_SPI6_Init+0xa4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 80013ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001464 <MX_SPI6_Init+0xa4>)
 80013ec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013f0:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <MX_SPI6_Init+0xa4>)
 80013f4:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80013f8:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <MX_SPI6_Init+0xa4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001400:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <MX_SPI6_Init+0xa4>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001406:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <MX_SPI6_Init+0xa4>)
 8001408:	2200      	movs	r2, #0
 800140a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 800140c:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <MX_SPI6_Init+0xa4>)
 800140e:	2200      	movs	r2, #0
 8001410:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001412:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <MX_SPI6_Init+0xa4>)
 8001414:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001418:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800141a:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <MX_SPI6_Init+0xa4>)
 800141c:	2200      	movs	r2, #0
 800141e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001420:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <MX_SPI6_Init+0xa4>)
 8001422:	2200      	movs	r2, #0
 8001424:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001426:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_SPI6_Init+0xa4>)
 8001428:	2200      	movs	r2, #0
 800142a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800142c:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <MX_SPI6_Init+0xa4>)
 800142e:	2200      	movs	r2, #0
 8001430:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001432:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_SPI6_Init+0xa4>)
 8001434:	2200      	movs	r2, #0
 8001436:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001438:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <MX_SPI6_Init+0xa4>)
 800143a:	2200      	movs	r2, #0
 800143c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_SPI6_Init+0xa4>)
 8001440:	2200      	movs	r2, #0
 8001442:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001444:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <MX_SPI6_Init+0xa4>)
 8001446:	2200      	movs	r2, #0
 8001448:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_SPI6_Init+0xa4>)
 800144c:	2200      	movs	r2, #0
 800144e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	@ (8001464 <MX_SPI6_Init+0xa4>)
 8001452:	f006 fc9d 	bl	8007d90 <HAL_SPI_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_SPI6_Init+0xa0>
  {
    Error_Handler();
 800145c:	f000 fa96 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	24000400 	.word	0x24000400
 8001468:	58001400 	.word	0x58001400

0800146c <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8001470:	4b22      	ldr	r3, [pc, #136]	@ (80014fc <MX_USART10_UART_Init+0x90>)
 8001472:	4a23      	ldr	r2, [pc, #140]	@ (8001500 <MX_USART10_UART_Init+0x94>)
 8001474:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 38400;
 8001476:	4b21      	ldr	r3, [pc, #132]	@ (80014fc <MX_USART10_UART_Init+0x90>)
 8001478:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800147c:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b1f      	ldr	r3, [pc, #124]	@ (80014fc <MX_USART10_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b1d      	ldr	r3, [pc, #116]	@ (80014fc <MX_USART10_UART_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 800148a:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <MX_USART10_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8001490:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <MX_USART10_UART_Init+0x90>)
 8001492:	220c      	movs	r2, #12
 8001494:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <MX_USART10_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <MX_USART10_UART_Init+0x90>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a2:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <MX_USART10_UART_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014a8:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <MX_USART10_UART_Init+0x90>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ae:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <MX_USART10_UART_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80014b4:	4811      	ldr	r0, [pc, #68]	@ (80014fc <MX_USART10_UART_Init+0x90>)
 80014b6:	f007 f88b 	bl	80085d0 <HAL_UART_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 80014c0:	f000 fa64 	bl	800198c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c4:	2100      	movs	r1, #0
 80014c6:	480d      	ldr	r0, [pc, #52]	@ (80014fc <MX_USART10_UART_Init+0x90>)
 80014c8:	f008 f997 	bl	80097fa <HAL_UARTEx_SetTxFifoThreshold>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 80014d2:	f000 fa5b 	bl	800198c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d6:	2100      	movs	r1, #0
 80014d8:	4808      	ldr	r0, [pc, #32]	@ (80014fc <MX_USART10_UART_Init+0x90>)
 80014da:	f008 f9cc 	bl	8009876 <HAL_UARTEx_SetRxFifoThreshold>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 80014e4:	f000 fa52 	bl	800198c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	@ (80014fc <MX_USART10_UART_Init+0x90>)
 80014ea:	f008 f94d 	bl	8009788 <HAL_UARTEx_DisableFifoMode>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 80014f4:	f000 fa4a 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	24000488 	.word	0x24000488
 8001500:	40011c00 	.word	0x40011c00

08001504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08e      	sub	sp, #56	@ 0x38
 8001508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800151a:	4bc3      	ldr	r3, [pc, #780]	@ (8001828 <MX_GPIO_Init+0x324>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001520:	4ac1      	ldr	r2, [pc, #772]	@ (8001828 <MX_GPIO_Init+0x324>)
 8001522:	f043 0310 	orr.w	r3, r3, #16
 8001526:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800152a:	4bbf      	ldr	r3, [pc, #764]	@ (8001828 <MX_GPIO_Init+0x324>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001530:	f003 0310 	and.w	r3, r3, #16
 8001534:	623b      	str	r3, [r7, #32]
 8001536:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001538:	4bbb      	ldr	r3, [pc, #748]	@ (8001828 <MX_GPIO_Init+0x324>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800153e:	4aba      	ldr	r2, [pc, #744]	@ (8001828 <MX_GPIO_Init+0x324>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001548:	4bb7      	ldr	r3, [pc, #732]	@ (8001828 <MX_GPIO_Init+0x324>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	61fb      	str	r3, [r7, #28]
 8001554:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001556:	4bb4      	ldr	r3, [pc, #720]	@ (8001828 <MX_GPIO_Init+0x324>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155c:	4ab2      	ldr	r2, [pc, #712]	@ (8001828 <MX_GPIO_Init+0x324>)
 800155e:	f043 0320 	orr.w	r3, r3, #32
 8001562:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001566:	4bb0      	ldr	r3, [pc, #704]	@ (8001828 <MX_GPIO_Init+0x324>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156c:	f003 0320 	and.w	r3, r3, #32
 8001570:	61bb      	str	r3, [r7, #24]
 8001572:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001574:	4bac      	ldr	r3, [pc, #688]	@ (8001828 <MX_GPIO_Init+0x324>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157a:	4aab      	ldr	r2, [pc, #684]	@ (8001828 <MX_GPIO_Init+0x324>)
 800157c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001580:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001584:	4ba8      	ldr	r3, [pc, #672]	@ (8001828 <MX_GPIO_Init+0x324>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4ba5      	ldr	r3, [pc, #660]	@ (8001828 <MX_GPIO_Init+0x324>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001598:	4aa3      	ldr	r2, [pc, #652]	@ (8001828 <MX_GPIO_Init+0x324>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015a2:	4ba1      	ldr	r3, [pc, #644]	@ (8001828 <MX_GPIO_Init+0x324>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b0:	4b9d      	ldr	r3, [pc, #628]	@ (8001828 <MX_GPIO_Init+0x324>)
 80015b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b6:	4a9c      	ldr	r2, [pc, #624]	@ (8001828 <MX_GPIO_Init+0x324>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015c0:	4b99      	ldr	r3, [pc, #612]	@ (8001828 <MX_GPIO_Init+0x324>)
 80015c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ce:	4b96      	ldr	r3, [pc, #600]	@ (8001828 <MX_GPIO_Init+0x324>)
 80015d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d4:	4a94      	ldr	r2, [pc, #592]	@ (8001828 <MX_GPIO_Init+0x324>)
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015de:	4b92      	ldr	r3, [pc, #584]	@ (8001828 <MX_GPIO_Init+0x324>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ec:	4b8e      	ldr	r3, [pc, #568]	@ (8001828 <MX_GPIO_Init+0x324>)
 80015ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f2:	4a8d      	ldr	r2, [pc, #564]	@ (8001828 <MX_GPIO_Init+0x324>)
 80015f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015fc:	4b8a      	ldr	r3, [pc, #552]	@ (8001828 <MX_GPIO_Init+0x324>)
 80015fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPS_NRST_Pin|ADC_CS_Pin, GPIO_PIN_SET);
 800160a:	2201      	movs	r2, #1
 800160c:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 8001610:	4886      	ldr	r0, [pc, #536]	@ (800182c <MX_GPIO_Init+0x328>)
 8001612:	f003 f989 	bl	8004928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_DIO3_Pin|RF_DIO2_Pin|RF_DIO1_Pin|VLV1_EN_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	f24e 0140 	movw	r1, #57408	@ 0xe040
 800161c:	4884      	ldr	r0, [pc, #528]	@ (8001830 <MX_GPIO_Init+0x32c>)
 800161e:	f003 f983 	bl	8004928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_CS_GPIO_Port, RADIO_CS_Pin, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	2140      	movs	r1, #64	@ 0x40
 8001626:	4883      	ldr	r0, [pc, #524]	@ (8001834 <MX_GPIO_Init+0x330>)
 8001628:	f003 f97e 	bl	8004928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NSRT_GPIO_Port, RF_NSRT_Pin, GPIO_PIN_SET);
 800162c:	2201      	movs	r2, #1
 800162e:	2104      	movs	r1, #4
 8001630:	487f      	ldr	r0, [pc, #508]	@ (8001830 <MX_GPIO_Init+0x32c>)
 8001632:	f003 f979 	bl	8004928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BAR2_CS_Pin|BAR1_CS_Pin, GPIO_PIN_SET);
 8001636:	2201      	movs	r2, #1
 8001638:	2118      	movs	r1, #24
 800163a:	487f      	ldr	r0, [pc, #508]	@ (8001838 <MX_GPIO_Init+0x334>)
 800163c:	f003 f974 	bl	8004928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_NRST_GPIO_Port, ETH_NRST_Pin, GPIO_PIN_SET);
 8001640:	2201      	movs	r2, #1
 8001642:	2101      	movs	r1, #1
 8001644:	487d      	ldr	r0, [pc, #500]	@ (800183c <MX_GPIO_Init+0x338>)
 8001646:	f003 f96f 	bl	8004928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PDB_DIO1_Pin|PDB_DIO2_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001650:	4878      	ldr	r0, [pc, #480]	@ (8001834 <MX_GPIO_Init+0x330>)
 8001652:	f003 f969 	bl	8004928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TC1_CS_Pin|TC2_CS_Pin, GPIO_PIN_SET);
 8001656:	2201      	movs	r2, #1
 8001658:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800165c:	4878      	ldr	r0, [pc, #480]	@ (8001840 <MX_GPIO_Init+0x33c>)
 800165e:	f003 f963 	bl	8004928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, VLV3_EN_Pin|EEPROM_WC_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 8001668:	4876      	ldr	r0, [pc, #472]	@ (8001844 <MX_GPIO_Init+0x340>)
 800166a:	f003 f95d 	bl	8004928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VLV2_EN_Pin|BUFF_CLR_Pin|BUFF_CLK_Pin|VLV_CTRL_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 4107 	mov.w	r1, #34560	@ 0x8700
 8001674:	4870      	ldr	r0, [pc, #448]	@ (8001838 <MX_GPIO_Init+0x334>)
 8001676:	f003 f957 	bl	8004928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 800167a:	2201      	movs	r2, #1
 800167c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001680:	4870      	ldr	r0, [pc, #448]	@ (8001844 <MX_GPIO_Init+0x340>)
 8001682:	f003 f951 	bl	8004928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZ_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800168c:	486b      	ldr	r0, [pc, #428]	@ (800183c <MX_GPIO_Init+0x338>)
 800168e:	f003 f94b 	bl	8004928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2103      	movs	r1, #3
 8001696:	4865      	ldr	r0, [pc, #404]	@ (800182c <MX_GPIO_Init+0x328>)
 8001698:	f003 f946 	bl	8004928 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPS_NRST_Pin ADC_CS_Pin LED_GREEN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = GPS_NRST_Pin|ADC_CS_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 800169c:	f640 0313 	movw	r3, #2067	@ 0x813
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b2:	4619      	mov	r1, r3
 80016b4:	485d      	ldr	r0, [pc, #372]	@ (800182c <MX_GPIO_Init+0x328>)
 80016b6:	f002 ff8f 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_DIO3_Pin RF_DIO2_Pin RF_DIO1_Pin RF_NSRT_Pin
                           VLV1_EN_Pin */
  GPIO_InitStruct.Pin = RF_DIO3_Pin|RF_DIO2_Pin|RF_DIO1_Pin|RF_NSRT_Pin
 80016ba:	f24e 0344 	movw	r3, #57412	@ 0xe044
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
                          |VLV1_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016d0:	4619      	mov	r1, r3
 80016d2:	4857      	ldr	r0, [pc, #348]	@ (8001830 <MX_GPIO_Init+0x32c>)
 80016d4:	f002 ff80 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RADIO_CS_Pin PDB_DIO1_Pin PDB_DIO2_Pin */
  GPIO_InitStruct.Pin = RADIO_CS_Pin|PDB_DIO1_Pin|PDB_DIO2_Pin;
 80016d8:	f24c 0340 	movw	r3, #49216	@ 0xc040
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ee:	4619      	mov	r1, r3
 80016f0:	4850      	ldr	r0, [pc, #320]	@ (8001834 <MX_GPIO_Init+0x330>)
 80016f2:	f002 ff71 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_BUSY_Pin */
  GPIO_InitStruct.Pin = RF_BUSY_Pin;
 80016f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RF_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001708:	4619      	mov	r1, r3
 800170a:	484a      	ldr	r0, [pc, #296]	@ (8001834 <MX_GPIO_Init+0x330>)
 800170c:	f002 ff64 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_MODE_SW_Pin VLV3_OLD_Pin VLV1_OLD_Pin */
  GPIO_InitStruct.Pin = RF_MODE_SW_Pin|VLV3_OLD_Pin|VLV1_OLD_Pin;
 8001710:	f240 1381 	movw	r3, #385	@ 0x181
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001716:	2300      	movs	r3, #0
 8001718:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001722:	4619      	mov	r1, r3
 8001724:	4842      	ldr	r0, [pc, #264]	@ (8001830 <MX_GPIO_Init+0x32c>)
 8001726:	f002 ff57 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BAR2_CS_Pin BAR1_CS_Pin VLV2_EN_Pin */
  GPIO_InitStruct.Pin = BAR2_CS_Pin|BAR1_CS_Pin|VLV2_EN_Pin;
 800172a:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001740:	4619      	mov	r1, r3
 8001742:	483d      	ldr	r0, [pc, #244]	@ (8001838 <MX_GPIO_Init+0x334>)
 8001744:	f002 ff48 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_NRST_Pin BUZZ_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = ETH_NRST_Pin|BUZZ_Pin|LED_RED_Pin;
 8001748:	f240 3301 	movw	r3, #769	@ 0x301
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800175e:	4619      	mov	r1, r3
 8001760:	4836      	ldr	r0, [pc, #216]	@ (800183c <MX_GPIO_Init+0x338>)
 8001762:	f002 ff39 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001766:	2304      	movs	r3, #4
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001776:	2307      	movs	r3, #7
 8001778:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800177e:	4619      	mov	r1, r3
 8001780:	482e      	ldr	r0, [pc, #184]	@ (800183c <MX_GPIO_Init+0x338>)
 8001782:	f002 ff29 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VLV2_OLD_Pin */
  GPIO_InitStruct.Pin = VLV2_OLD_Pin;
 8001786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178c:	2300      	movs	r3, #0
 800178e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VLV2_OLD_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001798:	4619      	mov	r1, r3
 800179a:	4824      	ldr	r0, [pc, #144]	@ (800182c <MX_GPIO_Init+0x328>)
 800179c:	f002 ff1c 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC1_CS_Pin TC2_CS_Pin */
  GPIO_InitStruct.Pin = TC1_CS_Pin|TC2_CS_Pin;
 80017a0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b6:	4619      	mov	r1, r3
 80017b8:	4821      	ldr	r0, [pc, #132]	@ (8001840 <MX_GPIO_Init+0x33c>)
 80017ba:	f002 ff0d 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VLV3_EN_Pin FLASH_CS_Pin EEPROM_WC_Pin */
  GPIO_InitStruct.Pin = VLV3_EN_Pin|FLASH_CS_Pin|EEPROM_WC_Pin;
 80017be:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d4:	4619      	mov	r1, r3
 80017d6:	481b      	ldr	r0, [pc, #108]	@ (8001844 <MX_GPIO_Init+0x340>)
 80017d8:	f002 fefe 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUFF_CLR_Pin BUFF_CLK_Pin VLV_CTRL_Pin */
  GPIO_InitStruct.Pin = BUFF_CLR_Pin|BUFF_CLK_Pin|VLV_CTRL_Pin;
 80017dc:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f2:	4619      	mov	r1, r3
 80017f4:	4810      	ldr	r0, [pc, #64]	@ (8001838 <MX_GPIO_Init+0x334>)
 80017f6:	f002 feef 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800180c:	2306      	movs	r3, #6
 800180e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001810:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001814:	4619      	mov	r1, r3
 8001816:	4806      	ldr	r0, [pc, #24]	@ (8001830 <MX_GPIO_Init+0x32c>)
 8001818:	f002 fede 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU1_INT1_Pin IMU1_INT2_Pin IMU2_INT1_Pin IMU2_INT2_Pin */
  GPIO_InitStruct.Pin = IMU1_INT1_Pin|IMU1_INT2_Pin|IMU2_INT1_Pin|IMU2_INT2_Pin;
 800181c:	2336      	movs	r3, #54	@ 0x36
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001820:	2300      	movs	r3, #0
 8001822:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001824:	e010      	b.n	8001848 <MX_GPIO_Init+0x344>
 8001826:	bf00      	nop
 8001828:	58024400 	.word	0x58024400
 800182c:	58021000 	.word	0x58021000
 8001830:	58020800 	.word	0x58020800
 8001834:	58021400 	.word	0x58021400
 8001838:	58020000 	.word	0x58020000
 800183c:	58020400 	.word	0x58020400
 8001840:	58020c00 	.word	0x58020c00
 8001844:	58021800 	.word	0x58021800
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800184c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001850:	4619      	mov	r1, r3
 8001852:	480e      	ldr	r0, [pc, #56]	@ (800188c <MX_GPIO_Init+0x388>)
 8001854:	f002 fec0 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001858:	2310      	movs	r3, #16
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001868:	2306      	movs	r3, #6
 800186a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001870:	4619      	mov	r1, r3
 8001872:	4807      	ldr	r0, [pc, #28]	@ (8001890 <MX_GPIO_Init+0x38c>)
 8001874:	f002 feb0 	bl	80045d8 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_CLOSE);
 8001878:	2100      	movs	r1, #0
 800187a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800187e:	f000 ffd5 	bl	800282c <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001882:	bf00      	nop
 8001884:	3738      	adds	r7, #56	@ 0x38
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	58020c00 	.word	0x58020c00
 8001890:	58020400 	.word	0x58020400

08001894 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b0e6      	sub	sp, #408	@ 0x198
 8001898:	af00      	add	r7, sp, #0
 800189a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800189e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80018a2:	6018      	str	r0, [r3, #0]
  /* init code for LWIP */
  MX_LWIP_Init();
 80018a4:	f008 f874 	bl	8009990 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  // Setup NTP listener
  sntp_setoperatingmode(SNTP_OPMODE_LISTENONLY);
 80018a8:	2001      	movs	r0, #1
 80018aa:	f00d f8c1 	bl	800ea30 <sntp_setoperatingmode>
  sntp_init();
 80018ae:	f00d f857 	bl	800e960 <sntp_init>


  for(;;) {
	  uint64_t ns = get_rtc_time();
 80018b2:	f7ff f9cd 	bl	8000c50 <get_rtc_time>
 80018b6:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190
	  osDelay(250);
 80018ba:	20fa      	movs	r0, #250	@ 0xfa
 80018bc:	f008 ffdd 	bl	800a87a <osDelay>
  for(;;) {
 80018c0:	bf00      	nop
 80018c2:	e7f6      	b.n	80018b2 <StartDefaultTask+0x1e>

080018c4 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80018ca:	463b      	mov	r3, r7
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80018d6:	f001 f89f 	bl	8002a18 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80018da:	2301      	movs	r3, #1
 80018dc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80018de:	2300      	movs	r3, #0
 80018e0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80018e6:	231f      	movs	r3, #31
 80018e8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80018ea:	2387      	movs	r3, #135	@ 0x87
 80018ec:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80018f2:	2300      	movs	r3, #0
 80018f4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80018f6:	2301      	movs	r3, #1
 80018f8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80018fa:	2301      	movs	r3, #1
 80018fc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001906:	463b      	mov	r3, r7
 8001908:	4618      	mov	r0, r3
 800190a:	f001 f8bd 	bl	8002a88 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800190e:	2301      	movs	r3, #1
 8001910:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000200;
 8001912:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <MPU_Config+0xa0>)
 8001914:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001916:	230e      	movs	r3, #14
 8001918:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800191a:	2300      	movs	r3, #0
 800191c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800191e:	2301      	movs	r3, #1
 8001920:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001922:	2303      	movs	r3, #3
 8001924:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800192a:	463b      	mov	r3, r7
 800192c:	4618      	mov	r0, r3
 800192e:	f001 f8ab 	bl	8002a88 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001932:	2302      	movs	r3, #2
 8001934:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001936:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800193a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 800193c:	2308      	movs	r3, #8
 800193e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001940:	2300      	movs	r3, #0
 8001942:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001944:	2301      	movs	r3, #1
 8001946:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800194c:	463b      	mov	r3, r7
 800194e:	4618      	mov	r0, r3
 8001950:	f001 f89a 	bl	8002a88 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001954:	2004      	movs	r0, #4
 8001956:	f001 f877 	bl	8002a48 <HAL_MPU_Enable>

}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	30000200 	.word	0x30000200

08001968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a04      	ldr	r2, [pc, #16]	@ (8001988 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d101      	bne.n	800197e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800197a:	f000 ff23 	bl	80027c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40001000 	.word	0x40001000

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <Error_Handler+0x4>

08001994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199a:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <HAL_MspInit+0x38>)
 800199c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019a0:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <HAL_MspInit+0x38>)
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80019aa:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <HAL_MspInit+0x38>)
 80019ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019b8:	2200      	movs	r2, #0
 80019ba:	210f      	movs	r1, #15
 80019bc:	f06f 0001 	mvn.w	r0, #1
 80019c0:	f001 f802 	bl	80029c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	58024400 	.word	0x58024400

080019d0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b0ba      	sub	sp, #232	@ 0xe8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e8:	f107 0318 	add.w	r3, r7, #24
 80019ec:	22b8      	movs	r2, #184	@ 0xb8
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f017 feef 	bl	80197d4 <memset>
  if(hi2c->Instance==I2C1)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a58      	ldr	r2, [pc, #352]	@ (8001b5c <HAL_I2C_MspInit+0x18c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d146      	bne.n	8001a8e <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a00:	f04f 0208 	mov.w	r2, #8
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a12:	f107 0318 	add.w	r3, r7, #24
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 f8d6 	bl	8005bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001a22:	f7ff ffb3 	bl	800198c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	4b4e      	ldr	r3, [pc, #312]	@ (8001b60 <HAL_I2C_MspInit+0x190>)
 8001a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a2c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b60 <HAL_I2C_MspInit+0x190>)
 8001a2e:	f043 0302 	orr.w	r3, r3, #2
 8001a32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a36:	4b4a      	ldr	r3, [pc, #296]	@ (8001b60 <HAL_I2C_MspInit+0x190>)
 8001a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a44:	23c0      	movs	r3, #192	@ 0xc0
 8001a46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a4a:	2312      	movs	r3, #18
 8001a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a62:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a66:	4619      	mov	r1, r3
 8001a68:	483e      	ldr	r0, [pc, #248]	@ (8001b64 <HAL_I2C_MspInit+0x194>)
 8001a6a:	f002 fdb5 	bl	80045d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b60 <HAL_I2C_MspInit+0x190>)
 8001a70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a74:	4a3a      	ldr	r2, [pc, #232]	@ (8001b60 <HAL_I2C_MspInit+0x190>)
 8001a76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a7a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a7e:	4b38      	ldr	r3, [pc, #224]	@ (8001b60 <HAL_I2C_MspInit+0x190>)
 8001a80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C5_MspInit 1 */

    /* USER CODE END I2C5_MspInit 1 */
  }

}
 8001a8c:	e061      	b.n	8001b52 <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C5)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a35      	ldr	r2, [pc, #212]	@ (8001b68 <HAL_I2C_MspInit+0x198>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d15c      	bne.n	8001b52 <HAL_I2C_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8001a98:	f04f 0208 	mov.w	r2, #8
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aaa:	f107 0318 	add.w	r3, r7, #24
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f004 f88a 	bl	8005bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001aba:	f7ff ff67 	bl	800198c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001abe:	4b28      	ldr	r3, [pc, #160]	@ (8001b60 <HAL_I2C_MspInit+0x190>)
 8001ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac4:	4a26      	ldr	r2, [pc, #152]	@ (8001b60 <HAL_I2C_MspInit+0x190>)
 8001ac6:	f043 0304 	orr.w	r3, r3, #4
 8001aca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ace:	4b24      	ldr	r3, [pc, #144]	@ (8001b60 <HAL_I2C_MspInit+0x190>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001adc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ae0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae4:	2312      	movs	r3, #18
 8001ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C5;
 8001af6:	2306      	movs	r3, #6
 8001af8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b00:	4619      	mov	r1, r3
 8001b02:	481a      	ldr	r0, [pc, #104]	@ (8001b6c <HAL_I2C_MspInit+0x19c>)
 8001b04:	f002 fd68 	bl	80045d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b10:	2312      	movs	r3, #18
 8001b12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8001b22:	2304      	movs	r3, #4
 8001b24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	480f      	ldr	r0, [pc, #60]	@ (8001b6c <HAL_I2C_MspInit+0x19c>)
 8001b30:	f002 fd52 	bl	80045d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C5_CLK_ENABLE();
 8001b34:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <HAL_I2C_MspInit+0x190>)
 8001b36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b3a:	4a09      	ldr	r2, [pc, #36]	@ (8001b60 <HAL_I2C_MspInit+0x190>)
 8001b3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b40:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_I2C_MspInit+0x190>)
 8001b46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
}
 8001b52:	bf00      	nop
 8001b54:	37e8      	adds	r7, #232	@ 0xe8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40005400 	.word	0x40005400
 8001b60:	58024400 	.word	0x58024400
 8001b64:	58020400 	.word	0x58020400
 8001b68:	40006400 	.word	0x40006400
 8001b6c:	58020800 	.word	0x58020800

08001b70 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b0b0      	sub	sp, #192	@ 0xc0
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	22b8      	movs	r2, #184	@ 0xb8
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f017 fe27 	bl	80197d4 <memset>
  if(hrtc->Instance==RTC)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a10      	ldr	r2, [pc, #64]	@ (8001bcc <HAL_RTC_MspInit+0x5c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d118      	bne.n	8001bc2 <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b90:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV60;
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <HAL_RTC_MspInit+0x60>)
 8001b9e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f004 f80e 	bl	8005bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8001bb2:	f7ff feeb 	bl	800198c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bb6:	4b07      	ldr	r3, [pc, #28]	@ (8001bd4 <HAL_RTC_MspInit+0x64>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bba:	4a06      	ldr	r2, [pc, #24]	@ (8001bd4 <HAL_RTC_MspInit+0x64>)
 8001bbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bc0:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001bc2:	bf00      	nop
 8001bc4:	37c0      	adds	r7, #192	@ 0xc0
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	58004000 	.word	0x58004000
 8001bd0:	0003c300 	.word	0x0003c300
 8001bd4:	58024400 	.word	0x58024400

08001bd8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b0c2      	sub	sp, #264	@ 0x108
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001be2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001be6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bf8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bfc:	22b8      	movs	r2, #184	@ 0xb8
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f017 fde7 	bl	80197d4 <memset>
  if(hspi->Instance==SPI1)
 8001c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4ab0      	ldr	r2, [pc, #704]	@ (8001ed4 <HAL_SPI_MspInit+0x2fc>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d16a      	bne.n	8001cee <HAL_SPI_MspInit+0x116>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001c18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c2a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 ffca 	bl	8005bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_SPI_MspInit+0x66>
    {
      Error_Handler();
 8001c3a:	f7ff fea7 	bl	800198c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c3e:	4ba6      	ldr	r3, [pc, #664]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001c40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c44:	4aa4      	ldr	r2, [pc, #656]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001c46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c4e:	4ba2      	ldr	r3, [pc, #648]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001c50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	4b9e      	ldr	r3, [pc, #632]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c62:	4a9d      	ldr	r2, [pc, #628]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c6c:	4b9a      	ldr	r3, [pc, #616]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	4b97      	ldr	r3, [pc, #604]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c80:	4a95      	ldr	r2, [pc, #596]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c8a:	4b93      	ldr	r3, [pc, #588]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c98:	2340      	movs	r3, #64	@ 0x40
 8001c9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cb0:	2305      	movs	r3, #5
 8001cb2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4887      	ldr	r0, [pc, #540]	@ (8001edc <HAL_SPI_MspInit+0x304>)
 8001cbe:	f002 fc8b 	bl	80045d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001cc2:	2328      	movs	r3, #40	@ 0x28
 8001cc4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cda:	2305      	movs	r3, #5
 8001cdc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	487e      	ldr	r0, [pc, #504]	@ (8001ee0 <HAL_SPI_MspInit+0x308>)
 8001ce8:	f002 fc76 	bl	80045d8 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI6_MspInit 1 */

    /* USER CODE END SPI6_MspInit 1 */
  }

}
 8001cec:	e180      	b.n	8001ff0 <HAL_SPI_MspInit+0x418>
  else if(hspi->Instance==SPI2)
 8001cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001cf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a7a      	ldr	r2, [pc, #488]	@ (8001ee4 <HAL_SPI_MspInit+0x30c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d147      	bne.n	8001d90 <HAL_SPI_MspInit+0x1b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001d00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d12:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d16:	4618      	mov	r0, r3
 8001d18:	f003 ff56 	bl	8005bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_SPI_MspInit+0x14e>
      Error_Handler();
 8001d22:	f7ff fe33 	bl	800198c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d26:	4b6c      	ldr	r3, [pc, #432]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001d2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d36:	4b68      	ldr	r3, [pc, #416]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d44:	4b64      	ldr	r3, [pc, #400]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d4a:	4a63      	ldr	r2, [pc, #396]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d54:	4b60      	ldr	r3, [pc, #384]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001d62:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001d66:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d7c:	2305      	movs	r3, #5
 8001d7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d82:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001d86:	4619      	mov	r1, r3
 8001d88:	4855      	ldr	r0, [pc, #340]	@ (8001ee0 <HAL_SPI_MspInit+0x308>)
 8001d8a:	f002 fc25 	bl	80045d8 <HAL_GPIO_Init>
}
 8001d8e:	e12f      	b.n	8001ff0 <HAL_SPI_MspInit+0x418>
  else if(hspi->Instance==SPI4)
 8001d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a52      	ldr	r2, [pc, #328]	@ (8001ee8 <HAL_SPI_MspInit+0x310>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d147      	bne.n	8001e32 <HAL_SPI_MspInit+0x25a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001da2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001db4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 ff05 	bl	8005bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_SPI_MspInit+0x1f0>
      Error_Handler();
 8001dc4:	f7ff fde2 	bl	800198c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001dc8:	4b43      	ldr	r3, [pc, #268]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001dca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dce:	4a42      	ldr	r2, [pc, #264]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001dd0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001dd4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001dd8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dec:	4a3a      	ldr	r2, [pc, #232]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001dee:	f043 0310 	orr.w	r3, r3, #16
 8001df2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001df6:	4b38      	ldr	r3, [pc, #224]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 8001e04:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 8001e08:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001e1e:	2305      	movs	r3, #5
 8001e20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e24:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4830      	ldr	r0, [pc, #192]	@ (8001eec <HAL_SPI_MspInit+0x314>)
 8001e2c:	f002 fbd4 	bl	80045d8 <HAL_GPIO_Init>
}
 8001e30:	e0de      	b.n	8001ff0 <HAL_SPI_MspInit+0x418>
  else if(hspi->Instance==SPI5)
 8001e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8001ef0 <HAL_SPI_MspInit+0x318>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d159      	bne.n	8001ef8 <HAL_SPI_MspInit+0x320>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8001e44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e56:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 feb4 	bl	8005bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_SPI_MspInit+0x292>
      Error_Handler();
 8001e66:	f7ff fd91 	bl	800198c <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e70:	4a19      	ldr	r2, [pc, #100]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001e72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e7a:	4b17      	ldr	r3, [pc, #92]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e88:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001e90:	f043 0320 	orr.w	r3, r3, #32
 8001e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <HAL_SPI_MspInit+0x300>)
 8001e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001ea6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001eaa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001ec0:	2305      	movs	r3, #5
 8001ec2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ec6:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4809      	ldr	r0, [pc, #36]	@ (8001ef4 <HAL_SPI_MspInit+0x31c>)
 8001ece:	f002 fb83 	bl	80045d8 <HAL_GPIO_Init>
}
 8001ed2:	e08d      	b.n	8001ff0 <HAL_SPI_MspInit+0x418>
 8001ed4:	40013000 	.word	0x40013000
 8001ed8:	58024400 	.word	0x58024400
 8001edc:	58020000 	.word	0x58020000
 8001ee0:	58020400 	.word	0x58020400
 8001ee4:	40003800 	.word	0x40003800
 8001ee8:	40013400 	.word	0x40013400
 8001eec:	58021000 	.word	0x58021000
 8001ef0:	40015000 	.word	0x40015000
 8001ef4:	58021400 	.word	0x58021400
  else if(hspi->Instance==SPI6)
 8001ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001efc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a3d      	ldr	r2, [pc, #244]	@ (8001ffc <HAL_SPI_MspInit+0x424>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d172      	bne.n	8001ff0 <HAL_SPI_MspInit+0x418>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8001f0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f1c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 fe51 	bl	8005bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_SPI_MspInit+0x358>
      Error_Handler();
 8001f2c:	f7ff fd2e 	bl	800198c <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001f30:	4b33      	ldr	r3, [pc, #204]	@ (8002000 <HAL_SPI_MspInit+0x428>)
 8001f32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f36:	4a32      	ldr	r2, [pc, #200]	@ (8002000 <HAL_SPI_MspInit+0x428>)
 8001f38:	f043 0320 	orr.w	r3, r3, #32
 8001f3c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f40:	4b2f      	ldr	r3, [pc, #188]	@ (8002000 <HAL_SPI_MspInit+0x428>)
 8001f42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f46:	f003 0320 	and.w	r3, r3, #32
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002000 <HAL_SPI_MspInit+0x428>)
 8001f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f54:	4a2a      	ldr	r2, [pc, #168]	@ (8002000 <HAL_SPI_MspInit+0x428>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f5e:	4b28      	ldr	r3, [pc, #160]	@ (8002000 <HAL_SPI_MspInit+0x428>)
 8001f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f6c:	4b24      	ldr	r3, [pc, #144]	@ (8002000 <HAL_SPI_MspInit+0x428>)
 8001f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f72:	4a23      	ldr	r2, [pc, #140]	@ (8002000 <HAL_SPI_MspInit+0x428>)
 8001f74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f7c:	4b20      	ldr	r3, [pc, #128]	@ (8002000 <HAL_SPI_MspInit+0x428>)
 8001f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f82:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f8a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f94:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f98:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8001fb2:	2308      	movs	r3, #8
 8001fb4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4811      	ldr	r0, [pc, #68]	@ (8002004 <HAL_SPI_MspInit+0x42c>)
 8001fc0:	f002 fb0a 	bl	80045d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001fc4:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001fc8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001fde:	2305      	movs	r3, #5
 8001fe0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fe4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4807      	ldr	r0, [pc, #28]	@ (8002008 <HAL_SPI_MspInit+0x430>)
 8001fec:	f002 faf4 	bl	80045d8 <HAL_GPIO_Init>
}
 8001ff0:	bf00      	nop
 8001ff2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	58001400 	.word	0x58001400
 8002000:	58024400 	.word	0x58024400
 8002004:	58020000 	.word	0x58020000
 8002008:	58021800 	.word	0x58021800

0800200c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b0b8      	sub	sp, #224	@ 0xe0
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	22b8      	movs	r2, #184	@ 0xb8
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f017 fbd1 	bl	80197d4 <memset>
  if(huart->Instance==USART10)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a31      	ldr	r2, [pc, #196]	@ (80020fc <HAL_UART_MspInit+0xf0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d15a      	bne.n	80020f2 <HAL_UART_MspInit+0xe6>

    /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 800203c:	f04f 0201 	mov.w	r2, #1
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002048:	2300      	movs	r3, #0
 800204a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800204e:	f107 0310 	add.w	r3, r7, #16
 8002052:	4618      	mov	r0, r3
 8002054:	f003 fdb8 	bl	8005bc8 <HAL_RCCEx_PeriphCLKConfig>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800205e:	f7ff fc95 	bl	800198c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 8002062:	4b27      	ldr	r3, [pc, #156]	@ (8002100 <HAL_UART_MspInit+0xf4>)
 8002064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002068:	4a25      	ldr	r2, [pc, #148]	@ (8002100 <HAL_UART_MspInit+0xf4>)
 800206a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800206e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002072:	4b23      	ldr	r3, [pc, #140]	@ (8002100 <HAL_UART_MspInit+0xf4>)
 8002074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002080:	4b1f      	ldr	r3, [pc, #124]	@ (8002100 <HAL_UART_MspInit+0xf4>)
 8002082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002086:	4a1e      	ldr	r2, [pc, #120]	@ (8002100 <HAL_UART_MspInit+0xf4>)
 8002088:	f043 0310 	orr.w	r3, r3, #16
 800208c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002090:	4b1b      	ldr	r3, [pc, #108]	@ (8002100 <HAL_UART_MspInit+0xf4>)
 8002092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800209e:	2304      	movs	r3, #4
 80020a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 80020b6:	2304      	movs	r3, #4
 80020b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020bc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80020c0:	4619      	mov	r1, r3
 80020c2:	4810      	ldr	r0, [pc, #64]	@ (8002104 <HAL_UART_MspInit+0xf8>)
 80020c4:	f002 fa88 	bl	80045d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020c8:	2308      	movs	r3, #8
 80020ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 80020e0:	230b      	movs	r3, #11
 80020e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80020ea:	4619      	mov	r1, r3
 80020ec:	4805      	ldr	r0, [pc, #20]	@ (8002104 <HAL_UART_MspInit+0xf8>)
 80020ee:	f002 fa73 	bl	80045d8 <HAL_GPIO_Init>

    /* USER CODE END USART10_MspInit 1 */

  }

}
 80020f2:	bf00      	nop
 80020f4:	37e0      	adds	r7, #224	@ 0xe0
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40011c00 	.word	0x40011c00
 8002100:	58024400 	.word	0x58024400
 8002104:	58021000 	.word	0x58021000

08002108 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b090      	sub	sp, #64	@ 0x40
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b0f      	cmp	r3, #15
 8002114:	d827      	bhi.n	8002166 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002116:	2200      	movs	r2, #0
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	2036      	movs	r0, #54	@ 0x36
 800211c:	f000 fc54 	bl	80029c8 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002120:	2036      	movs	r0, #54	@ 0x36
 8002122:	f000 fc6b 	bl	80029fc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8002126:	4a29      	ldr	r2, [pc, #164]	@ (80021cc <HAL_InitTick+0xc4>)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800212c:	4b28      	ldr	r3, [pc, #160]	@ (80021d0 <HAL_InitTick+0xc8>)
 800212e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002132:	4a27      	ldr	r2, [pc, #156]	@ (80021d0 <HAL_InitTick+0xc8>)
 8002134:	f043 0310 	orr.w	r3, r3, #16
 8002138:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800213c:	4b24      	ldr	r3, [pc, #144]	@ (80021d0 <HAL_InitTick+0xc8>)
 800213e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800214a:	f107 0210 	add.w	r2, r7, #16
 800214e:	f107 0314 	add.w	r3, r7, #20
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f003 fcf5 	bl	8005b44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800215a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800215e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002160:	2b00      	cmp	r3, #0
 8002162:	d106      	bne.n	8002172 <HAL_InitTick+0x6a>
 8002164:	e001      	b.n	800216a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e02b      	b.n	80021c2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800216a:	f003 fcbf 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 800216e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002170:	e004      	b.n	800217c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002172:	f003 fcbb 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 8002176:	4603      	mov	r3, r0
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800217c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800217e:	4a15      	ldr	r2, [pc, #84]	@ (80021d4 <HAL_InitTick+0xcc>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	0c9b      	lsrs	r3, r3, #18
 8002186:	3b01      	subs	r3, #1
 8002188:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800218a:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <HAL_InitTick+0xd0>)
 800218c:	4a13      	ldr	r2, [pc, #76]	@ (80021dc <HAL_InitTick+0xd4>)
 800218e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002190:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <HAL_InitTick+0xd0>)
 8002192:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002196:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002198:	4a0f      	ldr	r2, [pc, #60]	@ (80021d8 <HAL_InitTick+0xd0>)
 800219a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800219c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800219e:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <HAL_InitTick+0xd0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a4:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <HAL_InitTick+0xd0>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021aa:	480b      	ldr	r0, [pc, #44]	@ (80021d8 <HAL_InitTick+0xd0>)
 80021ac:	f005 ff2f 	bl	800800e <HAL_TIM_Base_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d104      	bne.n	80021c0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80021b6:	4808      	ldr	r0, [pc, #32]	@ (80021d8 <HAL_InitTick+0xd0>)
 80021b8:	f005 ff8a 	bl	80080d0 <HAL_TIM_Base_Start_IT>
 80021bc:	4603      	mov	r3, r0
 80021be:	e000      	b.n	80021c2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3740      	adds	r7, #64	@ 0x40
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2400000c 	.word	0x2400000c
 80021d0:	58024400 	.word	0x58024400
 80021d4:	431bde83 	.word	0x431bde83
 80021d8:	24000520 	.word	0x24000520
 80021dc:	40001000 	.word	0x40001000

080021e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <NMI_Handler+0x4>

080021e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <HardFault_Handler+0x4>

080021f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <MemManage_Handler+0x4>

080021f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <BusFault_Handler+0x4>

08002200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002204:	bf00      	nop
 8002206:	e7fd      	b.n	8002204 <UsageFault_Handler+0x4>

08002208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800221c:	4802      	ldr	r0, [pc, #8]	@ (8002228 <TIM6_DAC_IRQHandler+0x10>)
 800221e:	f005 ffdd 	bl	80081dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	24000520 	.word	0x24000520

0800222c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002230:	4802      	ldr	r0, [pc, #8]	@ (800223c <ETH_IRQHandler+0x10>)
 8002232:	f001 f83d 	bl	80032b0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	240005f8 	.word	0x240005f8

08002240 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return 1;
 8002244:	2301      	movs	r3, #1
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <_kill>:

int _kill(int pid, int sig)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800225a:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <_kill+0x20>)
 800225c:	2216      	movs	r2, #22
 800225e:	601a      	str	r2, [r3, #0]
  return -1;
 8002260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	240084d4 	.word	0x240084d4

08002274 <_exit>:

void _exit (int status)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800227c:	f04f 31ff 	mov.w	r1, #4294967295
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ffe5 	bl	8002250 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002286:	bf00      	nop
 8002288:	e7fd      	b.n	8002286 <_exit+0x12>

0800228a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	e00a      	b.n	80022b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800229c:	f3af 8000 	nop.w
 80022a0:	4601      	mov	r1, r0
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	60ba      	str	r2, [r7, #8]
 80022a8:	b2ca      	uxtb	r2, r1
 80022aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	3301      	adds	r3, #1
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	dbf0      	blt.n	800229c <_read+0x12>
  }

  return len;
 80022ba:	687b      	ldr	r3, [r7, #4]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	e009      	b.n	80022ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	60ba      	str	r2, [r7, #8]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	3301      	adds	r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	dbf1      	blt.n	80022d6 <_write+0x12>
  }
  return len;
 80022f2:	687b      	ldr	r3, [r7, #4]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <_close>:

int _close(int file)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002324:	605a      	str	r2, [r3, #4]
  return 0;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <_isatty>:

int _isatty(int file)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800233c:	2301      	movs	r3, #1
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800236c:	4a14      	ldr	r2, [pc, #80]	@ (80023c0 <_sbrk+0x5c>)
 800236e:	4b15      	ldr	r3, [pc, #84]	@ (80023c4 <_sbrk+0x60>)
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002378:	4b13      	ldr	r3, [pc, #76]	@ (80023c8 <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002380:	4b11      	ldr	r3, [pc, #68]	@ (80023c8 <_sbrk+0x64>)
 8002382:	4a12      	ldr	r2, [pc, #72]	@ (80023cc <_sbrk+0x68>)
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002386:	4b10      	ldr	r3, [pc, #64]	@ (80023c8 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	429a      	cmp	r2, r3
 8002392:	d205      	bcs.n	80023a0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002394:	4b0e      	ldr	r3, [pc, #56]	@ (80023d0 <_sbrk+0x6c>)
 8002396:	220c      	movs	r2, #12
 8002398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800239a:	f04f 33ff 	mov.w	r3, #4294967295
 800239e:	e009      	b.n	80023b4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a0:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <_sbrk+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023a6:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	4a06      	ldr	r2, [pc, #24]	@ (80023c8 <_sbrk+0x64>)
 80023b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	24050000 	.word	0x24050000
 80023c4:	00000400 	.word	0x00000400
 80023c8:	24000570 	.word	0x24000570
 80023cc:	2400ce68 	.word	0x2400ce68
 80023d0:	240084d4 	.word	0x240084d4

080023d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023da:	4b3c      	ldr	r3, [pc, #240]	@ (80024cc <SystemInit+0xf8>)
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e0:	4a3a      	ldr	r2, [pc, #232]	@ (80024cc <SystemInit+0xf8>)
 80023e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023e6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023ea:	4b39      	ldr	r3, [pc, #228]	@ (80024d0 <SystemInit+0xfc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d807      	bhi.n	8002406 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023f6:	4b36      	ldr	r3, [pc, #216]	@ (80024d0 <SystemInit+0xfc>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 030f 	bic.w	r3, r3, #15
 80023fe:	4a34      	ldr	r2, [pc, #208]	@ (80024d0 <SystemInit+0xfc>)
 8002400:	f043 0307 	orr.w	r3, r3, #7
 8002404:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002406:	4b33      	ldr	r3, [pc, #204]	@ (80024d4 <SystemInit+0x100>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a32      	ldr	r2, [pc, #200]	@ (80024d4 <SystemInit+0x100>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002412:	4b30      	ldr	r3, [pc, #192]	@ (80024d4 <SystemInit+0x100>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002418:	4b2e      	ldr	r3, [pc, #184]	@ (80024d4 <SystemInit+0x100>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	492d      	ldr	r1, [pc, #180]	@ (80024d4 <SystemInit+0x100>)
 800241e:	4b2e      	ldr	r3, [pc, #184]	@ (80024d8 <SystemInit+0x104>)
 8002420:	4013      	ands	r3, r2
 8002422:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002424:	4b2a      	ldr	r3, [pc, #168]	@ (80024d0 <SystemInit+0xfc>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d007      	beq.n	8002440 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002430:	4b27      	ldr	r3, [pc, #156]	@ (80024d0 <SystemInit+0xfc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 030f 	bic.w	r3, r3, #15
 8002438:	4a25      	ldr	r2, [pc, #148]	@ (80024d0 <SystemInit+0xfc>)
 800243a:	f043 0307 	orr.w	r3, r3, #7
 800243e:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002440:	4b24      	ldr	r3, [pc, #144]	@ (80024d4 <SystemInit+0x100>)
 8002442:	2200      	movs	r2, #0
 8002444:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002446:	4b23      	ldr	r3, [pc, #140]	@ (80024d4 <SystemInit+0x100>)
 8002448:	2200      	movs	r2, #0
 800244a:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800244c:	4b21      	ldr	r3, [pc, #132]	@ (80024d4 <SystemInit+0x100>)
 800244e:	2200      	movs	r2, #0
 8002450:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002452:	4b20      	ldr	r3, [pc, #128]	@ (80024d4 <SystemInit+0x100>)
 8002454:	4a21      	ldr	r2, [pc, #132]	@ (80024dc <SystemInit+0x108>)
 8002456:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002458:	4b1e      	ldr	r3, [pc, #120]	@ (80024d4 <SystemInit+0x100>)
 800245a:	4a21      	ldr	r2, [pc, #132]	@ (80024e0 <SystemInit+0x10c>)
 800245c:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800245e:	4b1d      	ldr	r3, [pc, #116]	@ (80024d4 <SystemInit+0x100>)
 8002460:	4a20      	ldr	r2, [pc, #128]	@ (80024e4 <SystemInit+0x110>)
 8002462:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002464:	4b1b      	ldr	r3, [pc, #108]	@ (80024d4 <SystemInit+0x100>)
 8002466:	2200      	movs	r2, #0
 8002468:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800246a:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <SystemInit+0x100>)
 800246c:	4a1d      	ldr	r2, [pc, #116]	@ (80024e4 <SystemInit+0x110>)
 800246e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002470:	4b18      	ldr	r3, [pc, #96]	@ (80024d4 <SystemInit+0x100>)
 8002472:	2200      	movs	r2, #0
 8002474:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002476:	4b17      	ldr	r3, [pc, #92]	@ (80024d4 <SystemInit+0x100>)
 8002478:	4a1a      	ldr	r2, [pc, #104]	@ (80024e4 <SystemInit+0x110>)
 800247a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800247c:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <SystemInit+0x100>)
 800247e:	2200      	movs	r2, #0
 8002480:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002482:	4b14      	ldr	r3, [pc, #80]	@ (80024d4 <SystemInit+0x100>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a13      	ldr	r2, [pc, #76]	@ (80024d4 <SystemInit+0x100>)
 8002488:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800248c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800248e:	4b11      	ldr	r3, [pc, #68]	@ (80024d4 <SystemInit+0x100>)
 8002490:	2200      	movs	r2, #0
 8002492:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8002494:	4b0f      	ldr	r3, [pc, #60]	@ (80024d4 <SystemInit+0x100>)
 8002496:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800249a:	4a0e      	ldr	r2, [pc, #56]	@ (80024d4 <SystemInit+0x100>)
 800249c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80024a0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 80024a4:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <SystemInit+0x100>)
 80024a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80024aa:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 80024ac:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80024ae:	4b0e      	ldr	r3, [pc, #56]	@ (80024e8 <SystemInit+0x114>)
 80024b0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80024b4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 80024b6:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <SystemInit+0xf8>)
 80024b8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024bc:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000ed00 	.word	0xe000ed00
 80024d0:	52002000 	.word	0x52002000
 80024d4:	58024400 	.word	0x58024400
 80024d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80024dc:	02020200 	.word	0x02020200
 80024e0:	01ff0000 	.word	0x01ff0000
 80024e4:	01010280 	.word	0x01010280
 80024e8:	52004000 	.word	0x52004000

080024ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80024ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002524 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024f0:	f7ff ff70 	bl	80023d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024f4:	480c      	ldr	r0, [pc, #48]	@ (8002528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024f6:	490d      	ldr	r1, [pc, #52]	@ (800252c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024fc:	e002      	b.n	8002504 <LoopCopyDataInit>

080024fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002502:	3304      	adds	r3, #4

08002504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002508:	d3f9      	bcc.n	80024fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800250a:	4a0a      	ldr	r2, [pc, #40]	@ (8002534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800250c:	4c0a      	ldr	r4, [pc, #40]	@ (8002538 <LoopFillZerobss+0x22>)
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002510:	e001      	b.n	8002516 <LoopFillZerobss>

08002512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002514:	3204      	adds	r2, #4

08002516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002518:	d3fb      	bcc.n	8002512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800251a:	f018 f867 	bl	801a5ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800251e:	f7fe fc11 	bl	8000d44 <main>
  bx  lr
 8002522:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002524:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002528:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800252c:	240000f8 	.word	0x240000f8
  ldr r2, =_sidata
 8002530:	0801ea48 	.word	0x0801ea48
  ldr r2, =_sbss
 8002534:	240000f8 	.word	0x240000f8
  ldr r4, =_ebss
 8002538:	2400ce64 	.word	0x2400ce64

0800253c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800253c:	e7fe      	b.n	800253c <ADC3_IRQHandler>

0800253e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00b      	beq.n	8002566 <LAN8742_RegisterBusIO+0x28>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <LAN8742_RegisterBusIO+0x28>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <LAN8742_RegisterBusIO+0x28>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002566:	f04f 33ff 	mov.w	r3, #4294967295
 800256a:	e014      	b.n	8002596 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b086      	sub	sp, #24
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d139      	bne.n	8002632 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2220      	movs	r2, #32
 80025d0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e01c      	b.n	8002612 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	f107 020c 	add.w	r2, r7, #12
 80025e0:	2112      	movs	r1, #18
 80025e2:	6978      	ldr	r0, [r7, #20]
 80025e4:	4798      	blx	r3
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	da03      	bge.n	80025f4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80025ec:	f06f 0304 	mvn.w	r3, #4
 80025f0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80025f2:	e00b      	b.n	800260c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d105      	bne.n	800260c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
         break;
 800260a:	e005      	b.n	8002618 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3301      	adds	r3, #1
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2b1f      	cmp	r3, #31
 8002616:	d9df      	bls.n	80025d8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b1f      	cmp	r3, #31
 800261e:	d902      	bls.n	8002626 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002620:	f06f 0302 	mvn.w	r3, #2
 8002624:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002632:	693b      	ldr	r3, [r7, #16]
 }
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6810      	ldr	r0, [r2, #0]
 8002650:	f107 020c 	add.w	r2, r7, #12
 8002654:	2101      	movs	r1, #1
 8002656:	4798      	blx	r3
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	da02      	bge.n	8002664 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800265e:	f06f 0304 	mvn.w	r3, #4
 8002662:	e06e      	b.n	8002742 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6810      	ldr	r0, [r2, #0]
 800266c:	f107 020c 	add.w	r2, r7, #12
 8002670:	2101      	movs	r1, #1
 8002672:	4798      	blx	r3
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	da02      	bge.n	8002680 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800267a:	f06f 0304 	mvn.w	r3, #4
 800267e:	e060      	b.n	8002742 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800268a:	2301      	movs	r3, #1
 800268c:	e059      	b.n	8002742 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6810      	ldr	r0, [r2, #0]
 8002696:	f107 020c 	add.w	r2, r7, #12
 800269a:	2100      	movs	r1, #0
 800269c:	4798      	blx	r3
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	da02      	bge.n	80026aa <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80026a4:	f06f 0304 	mvn.w	r3, #4
 80026a8:	e04b      	b.n	8002742 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d11b      	bne.n	80026ec <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d006      	beq.n	80026cc <LAN8742_GetLinkState+0x90>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80026c8:	2302      	movs	r3, #2
 80026ca:	e03a      	b.n	8002742 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e033      	b.n	8002742 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80026e4:	2304      	movs	r3, #4
 80026e6:	e02c      	b.n	8002742 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80026e8:	2305      	movs	r3, #5
 80026ea:	e02a      	b.n	8002742 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6810      	ldr	r0, [r2, #0]
 80026f4:	f107 020c 	add.w	r2, r7, #12
 80026f8:	211f      	movs	r1, #31
 80026fa:	4798      	blx	r3
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	da02      	bge.n	8002708 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002702:	f06f 0304 	mvn.w	r3, #4
 8002706:	e01c      	b.n	8002742 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002712:	2306      	movs	r3, #6
 8002714:	e015      	b.n	8002742 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f003 031c 	and.w	r3, r3, #28
 800271c:	2b18      	cmp	r3, #24
 800271e:	d101      	bne.n	8002724 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002720:	2302      	movs	r3, #2
 8002722:	e00e      	b.n	8002742 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 031c 	and.w	r3, r3, #28
 800272a:	2b08      	cmp	r3, #8
 800272c:	d101      	bne.n	8002732 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800272e:	2303      	movs	r3, #3
 8002730:	e007      	b.n	8002742 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f003 031c 	and.w	r3, r3, #28
 8002738:	2b14      	cmp	r3, #20
 800273a:	d101      	bne.n	8002740 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800273c:	2304      	movs	r3, #4
 800273e:	e000      	b.n	8002742 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002740:	2305      	movs	r3, #5
    }
  }
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002752:	2003      	movs	r0, #3
 8002754:	f000 f92d 	bl	80029b2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002758:	f003 f81e 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b15      	ldr	r3, [pc, #84]	@ (80027b4 <HAL_Init+0x68>)
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	4913      	ldr	r1, [pc, #76]	@ (80027b8 <HAL_Init+0x6c>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
 8002774:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002776:	4b0f      	ldr	r3, [pc, #60]	@ (80027b4 <HAL_Init+0x68>)
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	4a0e      	ldr	r2, [pc, #56]	@ (80027b8 <HAL_Init+0x6c>)
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
 800278c:	4a0b      	ldr	r2, [pc, #44]	@ (80027bc <HAL_Init+0x70>)
 800278e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002790:	4a0b      	ldr	r2, [pc, #44]	@ (80027c0 <HAL_Init+0x74>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002796:	200f      	movs	r0, #15
 8002798:	f7ff fcb6 	bl	8002108 <HAL_InitTick>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e002      	b.n	80027ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027a6:	f7ff f8f5 	bl	8001994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	58024400 	.word	0x58024400
 80027b8:	0801e570 	.word	0x0801e570
 80027bc:	24000008 	.word	0x24000008
 80027c0:	24000004 	.word	0x24000004

080027c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027c8:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <HAL_IncTick+0x20>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <HAL_IncTick+0x24>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	4a04      	ldr	r2, [pc, #16]	@ (80027e8 <HAL_IncTick+0x24>)
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	24000010 	.word	0x24000010
 80027e8:	24000574 	.word	0x24000574

080027ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return uwTick;
 80027f0:	4b03      	ldr	r3, [pc, #12]	@ (8002800 <HAL_GetTick+0x14>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	24000574 	.word	0x24000574

08002804 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800280c:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002814:	4904      	ldr	r1, [pc, #16]	@ (8002828 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	58000400 	.word	0x58000400

0800282c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002836:	4b07      	ldr	r3, [pc, #28]	@ (8002854 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	43db      	mvns	r3, r3
 800283e:	401a      	ands	r2, r3
 8002840:	4904      	ldr	r1, [pc, #16]	@ (8002854 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	58000400 	.word	0x58000400

08002858 <__NVIC_SetPriorityGrouping>:
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002868:	4b0b      	ldr	r3, [pc, #44]	@ (8002898 <__NVIC_SetPriorityGrouping+0x40>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002874:	4013      	ands	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002880:	4b06      	ldr	r3, [pc, #24]	@ (800289c <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	4313      	orrs	r3, r2
 8002884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002886:	4a04      	ldr	r2, [pc, #16]	@ (8002898 <__NVIC_SetPriorityGrouping+0x40>)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	60d3      	str	r3, [r2, #12]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000ed00 	.word	0xe000ed00
 800289c:	05fa0000 	.word	0x05fa0000

080028a0 <__NVIC_GetPriorityGrouping>:
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a4:	4b04      	ldr	r3, [pc, #16]	@ (80028b8 <__NVIC_GetPriorityGrouping+0x18>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	f003 0307 	and.w	r3, r3, #7
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <__NVIC_EnableIRQ>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	db0b      	blt.n	80028e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	f003 021f 	and.w	r2, r3, #31
 80028d4:	4907      	ldr	r1, [pc, #28]	@ (80028f4 <__NVIC_EnableIRQ+0x38>)
 80028d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2001      	movs	r0, #1
 80028de:	fa00 f202 	lsl.w	r2, r0, r2
 80028e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000e100 	.word	0xe000e100

080028f8 <__NVIC_SetPriority>:
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	6039      	str	r1, [r7, #0]
 8002902:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002904:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002908:	2b00      	cmp	r3, #0
 800290a:	db0a      	blt.n	8002922 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	b2da      	uxtb	r2, r3
 8002910:	490c      	ldr	r1, [pc, #48]	@ (8002944 <__NVIC_SetPriority+0x4c>)
 8002912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002916:	0112      	lsls	r2, r2, #4
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	440b      	add	r3, r1
 800291c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002920:	e00a      	b.n	8002938 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4908      	ldr	r1, [pc, #32]	@ (8002948 <__NVIC_SetPriority+0x50>)
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	3b04      	subs	r3, #4
 8002930:	0112      	lsls	r2, r2, #4
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	440b      	add	r3, r1
 8002936:	761a      	strb	r2, [r3, #24]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000e100 	.word	0xe000e100
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <NVIC_EncodePriority>:
{
 800294c:	b480      	push	{r7}
 800294e:	b089      	sub	sp, #36	@ 0x24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f1c3 0307 	rsb	r3, r3, #7
 8002966:	2b04      	cmp	r3, #4
 8002968:	bf28      	it	cs
 800296a:	2304      	movcs	r3, #4
 800296c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	3304      	adds	r3, #4
 8002972:	2b06      	cmp	r3, #6
 8002974:	d902      	bls.n	800297c <NVIC_EncodePriority+0x30>
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3b03      	subs	r3, #3
 800297a:	e000      	b.n	800297e <NVIC_EncodePriority+0x32>
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002980:	f04f 32ff 	mov.w	r2, #4294967295
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43da      	mvns	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	401a      	ands	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002994:	f04f 31ff 	mov.w	r1, #4294967295
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	43d9      	mvns	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a4:	4313      	orrs	r3, r2
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3724      	adds	r7, #36	@ 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ff4c 	bl	8002858 <__NVIC_SetPriorityGrouping>
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029d6:	f7ff ff63 	bl	80028a0 <__NVIC_GetPriorityGrouping>
 80029da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	6978      	ldr	r0, [r7, #20]
 80029e2:	f7ff ffb3 	bl	800294c <NVIC_EncodePriority>
 80029e6:	4602      	mov	r2, r0
 80029e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029ec:	4611      	mov	r1, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ff82 	bl	80028f8 <__NVIC_SetPriority>
}
 80029f4:	bf00      	nop
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ff56 	bl	80028bc <__NVIC_EnableIRQ>
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002a1c:	f3bf 8f5f 	dmb	sy
}
 8002a20:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002a22:	4b07      	ldr	r3, [pc, #28]	@ (8002a40 <HAL_MPU_Disable+0x28>)
 8002a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a26:	4a06      	ldr	r2, [pc, #24]	@ (8002a40 <HAL_MPU_Disable+0x28>)
 8002a28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a2c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002a2e:	4b05      	ldr	r3, [pc, #20]	@ (8002a44 <HAL_MPU_Disable+0x2c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	605a      	str	r2, [r3, #4]
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000ed00 	.word	0xe000ed00
 8002a44:	e000ed90 	.word	0xe000ed90

08002a48 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002a50:	4a0b      	ldr	r2, [pc, #44]	@ (8002a80 <HAL_MPU_Enable+0x38>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a84 <HAL_MPU_Enable+0x3c>)
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5e:	4a09      	ldr	r2, [pc, #36]	@ (8002a84 <HAL_MPU_Enable+0x3c>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a64:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002a66:	f3bf 8f4f 	dsb	sy
}
 8002a6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a6c:	f3bf 8f6f 	isb	sy
}
 8002a70:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000ed90 	.word	0xe000ed90
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	785a      	ldrb	r2, [r3, #1]
 8002a94:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <HAL_MPU_ConfigRegion+0x7c>)
 8002a96:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002a98:	4b1a      	ldr	r3, [pc, #104]	@ (8002b04 <HAL_MPU_ConfigRegion+0x7c>)
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	4a19      	ldr	r2, [pc, #100]	@ (8002b04 <HAL_MPU_ConfigRegion+0x7c>)
 8002a9e:	f023 0301 	bic.w	r3, r3, #1
 8002aa2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002aa4:	4a17      	ldr	r2, [pc, #92]	@ (8002b04 <HAL_MPU_ConfigRegion+0x7c>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	7b1b      	ldrb	r3, [r3, #12]
 8002ab0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	7adb      	ldrb	r3, [r3, #11]
 8002ab6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ab8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	7a9b      	ldrb	r3, [r3, #10]
 8002abe:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002ac0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	7b5b      	ldrb	r3, [r3, #13]
 8002ac6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002ac8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	7b9b      	ldrb	r3, [r3, #14]
 8002ace:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002ad0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	7bdb      	ldrb	r3, [r3, #15]
 8002ad6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002ad8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7a5b      	ldrb	r3, [r3, #9]
 8002ade:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002ae0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	7a1b      	ldrb	r3, [r3, #8]
 8002ae6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002ae8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	7812      	ldrb	r2, [r2, #0]
 8002aee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002af0:	4a04      	ldr	r2, [pc, #16]	@ (8002b04 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002af2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002af4:	6113      	str	r3, [r2, #16]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	e000ed90 	.word	0xe000ed90

08002b08 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e0e3      	b.n	8002ce2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d106      	bne.n	8002b32 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f007 fb3b 	bl	800a1a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b32:	4b6e      	ldr	r3, [pc, #440]	@ (8002cec <HAL_ETH_Init+0x1e4>)
 8002b34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b38:	4a6c      	ldr	r2, [pc, #432]	@ (8002cec <HAL_ETH_Init+0x1e4>)
 8002b3a:	f043 0302 	orr.w	r3, r3, #2
 8002b3e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002b42:	4b6a      	ldr	r3, [pc, #424]	@ (8002cec <HAL_ETH_Init+0x1e4>)
 8002b44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	7a1b      	ldrb	r3, [r3, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d103      	bne.n	8002b60 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f7ff fe53 	bl	8002804 <HAL_SYSCFG_ETHInterfaceSelect>
 8002b5e:	e003      	b.n	8002b68 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002b60:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002b64:	f7ff fe4e 	bl	8002804 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002b68:	4b61      	ldr	r3, [pc, #388]	@ (8002cf0 <HAL_ETH_Init+0x1e8>)
 8002b6a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b84:	f7ff fe32 	bl	80027ec <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002b8a:	e011      	b.n	8002bb0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002b8c:	f7ff fe2e 	bl	80027ec <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002b9a:	d909      	bls.n	8002bb0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	22e0      	movs	r2, #224	@ 0xe0
 8002ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e098      	b.n	8002ce2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1e4      	bne.n	8002b8c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 ff1c 	bl	8003a00 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002bc8:	f002 ff60 	bl	8005a8c <HAL_RCC_GetHCLKFreq>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	4a49      	ldr	r2, [pc, #292]	@ (8002cf4 <HAL_ETH_Init+0x1ec>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	0c9a      	lsrs	r2, r3, #18
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	3a01      	subs	r2, #1
 8002bdc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f001 f919 	bl	8003e18 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bee:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002bf2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6812      	ldr	r2, [r2, #0]
 8002bfa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002bfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c02:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	22e0      	movs	r2, #224	@ 0xe0
 8002c1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e05d      	b.n	8002ce2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c2e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002c32:	4b31      	ldr	r3, [pc, #196]	@ (8002cf8 <HAL_ETH_Init+0x1f0>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6952      	ldr	r2, [r2, #20]
 8002c3a:	0051      	lsls	r1, r2, #1
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	430b      	orrs	r3, r1
 8002c42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c46:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f001 f981 	bl	8003f52 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f001 f9c7 	bl	8003fe4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	3305      	adds	r3, #5
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	021a      	lsls	r2, r3, #8
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	3304      	adds	r3, #4
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	3303      	adds	r3, #3
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	061a      	lsls	r2, r3, #24
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	3302      	adds	r3, #2
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	041b      	lsls	r3, r3, #16
 8002c88:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c94:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002ca2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002ca4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b11      	ldr	r3, [pc, #68]	@ (8002cfc <HAL_ETH_Init+0x1f4>)
 8002cb6:	430b      	orrs	r3, r1
 8002cb8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <HAL_ETH_Init+0x1f8>)
 8002cca:	430b      	orrs	r3, r1
 8002ccc:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2210      	movs	r2, #16
 8002cdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	58024400 	.word	0x58024400
 8002cf0:	58000400 	.word	0x58000400
 8002cf4:	431bde83 	.word	0x431bde83
 8002cf8:	ffff8001 	.word	0xffff8001
 8002cfc:	0c020060 	.word	0x0c020060
 8002d00:	0c20c000 	.word	0x0c20c000

08002d04 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	d165      	bne.n	8002de2 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2204      	movs	r2, #4
 8002d28:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f9e4 	bl	80030f8 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d38:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d48:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d54:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d64:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d70:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8002d7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d80:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0202 	orr.w	r2, r2, #2
 8002da6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dc0:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dd2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2240      	movs	r2, #64	@ 0x40
 8002dda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e000      	b.n	8002de4 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
  }
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dfa:	2b40      	cmp	r3, #64	@ 0x40
 8002dfc:	d165      	bne.n	8002eca <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e0e:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4b30      	ldr	r3, [pc, #192]	@ (8002ed8 <HAL_ETH_Stop_IT+0xec>)
 8002e18:	400b      	ands	r3, r1
 8002e1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e1e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e2a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	f023 0301 	bic.w	r3, r3, #1
 8002e36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e3a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e46:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e56:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0202 	bic.w	r2, r2, #2
 8002e8c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	e00e      	b.n	8002eb2 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	3212      	adds	r2, #18
 8002e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e9e:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d9ed      	bls.n	8002e94 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e000      	b.n	8002ecc <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
  }
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	ffff2f3e 	.word	0xffff2f3e

08002edc <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef2:	f043 0201 	orr.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e03a      	b.n	8002f76 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f06:	2b40      	cmp	r3, #64	@ 0x40
 8002f08:	d134      	bne.n	8002f74 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002f12:	2201      	movs	r2, #1
 8002f14:	6839      	ldr	r1, [r7, #0]
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f001 f8c2 	bl	80040a0 <ETH_Prepare_Tx_Descriptors>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f28:	f043 0202 	orr.w	r2, r3, #2
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e01f      	b.n	8002f76 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8002f36:	f3bf 8f4f 	dsb	sy
}
 8002f3a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d904      	bls.n	8002f58 <HAL_ETH_Transmit_IT+0x7c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f52:	1f1a      	subs	r2, r3, #4
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3106      	adds	r1, #6
 8002f64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f6c:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e000      	b.n	8002f76 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
  }
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b088      	sub	sp, #32
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9c:	f043 0201 	orr.w	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e0a2      	b.n	80030f0 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fb0:	2b40      	cmp	r3, #64	@ 0x40
 8002fb2:	d001      	beq.n	8002fb8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e09b      	b.n	80030f0 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69fa      	ldr	r2, [r7, #28]
 8002fc2:	3212      	adds	r2, #18
 8002fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fce:	f1c3 0304 	rsb	r3, r3, #4
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002fd4:	e064      	b.n	80030a0 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d103      	bne.n	8003006 <HAL_ETH_ReadData+0x88>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003002:	2b00      	cmp	r3, #0
 8003004:	d03a      	beq.n	800307c <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003042:	2301      	movs	r3, #1
 8003044:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003056:	461a      	mov	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	b29b      	uxth	r3, r3
 800305c:	f007 fa64 	bl	800a528 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	441a      	add	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	2200      	movs	r2, #0
 800307a:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	3301      	adds	r3, #1
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d902      	bls.n	800308e <HAL_ETH_ReadData+0x110>
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	3b04      	subs	r3, #4
 800308c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69fa      	ldr	r2, [r7, #28]
 8003092:	3212      	adds	r2, #18
 8003094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003098:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	3301      	adds	r3, #1
 800309e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	db06      	blt.n	80030b6 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d202      	bcs.n	80030b6 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d08f      	beq.n	8002fd6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	441a      	add	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f814 	bl	80030f8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80030d6:	7cfb      	ldrb	r3, [r7, #19]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d108      	bne.n	80030ee <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	e000      	b.n	80030f0 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3720      	adds	r7, #32
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003100:	2300      	movs	r3, #0
 8003102:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003104:	2301      	movs	r3, #1
 8003106:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800310c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	3212      	adds	r2, #18
 8003114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003118:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800311e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003120:	e038      	b.n	8003194 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d112      	bne.n	8003150 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800312a:	f107 0308 	add.w	r3, r7, #8
 800312e:	4618      	mov	r0, r3
 8003130:	f007 f9ca 	bl	800a4c8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d102      	bne.n	8003140 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	74fb      	strb	r3, [r7, #19]
 800313e:	e007      	b.n	8003150 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	461a      	mov	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	461a      	mov	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8003150:	7cfb      	ldrb	r3, [r7, #19]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d01e      	beq.n	8003194 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315a:	2b00      	cmp	r3, #0
 800315c:	d004      	beq.n	8003168 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	e003      	b.n	8003170 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 800316e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	3301      	adds	r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d902      	bls.n	8003182 <ETH_UpdateDescriptor+0x8a>
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	3b04      	subs	r3, #4
 8003180:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	3212      	adds	r2, #18
 8003188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800318c:	617b      	str	r3, [r7, #20]
      desccount--;
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	3b01      	subs	r3, #1
 8003192:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <ETH_UpdateDescriptor+0xa8>
 800319a:	7cfb      	ldrb	r3, [r7, #19]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1c0      	bne.n	8003122 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d01b      	beq.n	80031e2 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3303      	adds	r3, #3
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80031b4:	f3bf 8f5f 	dmb	sy
}
 80031b8:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6919      	ldr	r1, [r3, #16]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4613      	mov	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	18ca      	adds	r2, r1, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031d2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80031e2:	bf00      	nop
 80031e4:	3720      	adds	r7, #32
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b086      	sub	sp, #24
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3318      	adds	r3, #24
 80031f6:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fc:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003202:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003208:	e047      	b.n	800329a <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800320a:	2301      	movs	r3, #1
 800320c:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	3b01      	subs	r3, #1
 8003212:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	3304      	adds	r3, #4
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10a      	bne.n	800323a <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	3301      	adds	r3, #1
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d902      	bls.n	8003236 <HAL_ETH_ReleaseTxPacket+0x4c>
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	3b04      	subs	r3, #4
 8003234:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800323a:	7bbb      	ldrb	r3, [r7, #14]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d02c      	beq.n	800329a <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68d9      	ldr	r1, [r3, #12]
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4613      	mov	r3, r2
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	4413      	add	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	440b      	add	r3, r1
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	db1f      	blt.n	8003296 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	3304      	adds	r3, #4
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4618      	mov	r0, r3
 8003264:	f007 f9c8 	bl	800a5f8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	3304      	adds	r3, #4
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	2200      	movs	r2, #0
 8003274:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	3301      	adds	r3, #1
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2b03      	cmp	r3, #3
 8003280:	d902      	bls.n	8003288 <HAL_ETH_ReleaseTxPacket+0x9e>
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	3b04      	subs	r3, #4
 8003286:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003294:	e001      	b.n	800329a <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <HAL_ETH_ReleaseTxPacket+0xbc>
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1b1      	bne.n	800320a <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80032c0:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ca:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80032ce:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032d8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80032dc:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 80032de:	4b6d      	ldr	r3, [pc, #436]	@ (8003494 <HAL_ETH_IRQHandler+0x1e4>)
 80032e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e2:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d010      	beq.n	8003310 <HAL_ETH_IRQHandler+0x60>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00b      	beq.n	8003310 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003300:	461a      	mov	r2, r3
 8003302:	f248 0340 	movw	r3, #32832	@ 0x8040
 8003306:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f006 fc8c 	bl	8009c28 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d010      	beq.n	800333c <HAL_ETH_IRQHandler+0x8c>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00b      	beq.n	800333c <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800332c:	461a      	mov	r2, r3
 800332e:	f248 0301 	movw	r3, #32769	@ 0x8001
 8003332:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f006 fc86 	bl	8009c48 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d047      	beq.n	80033d6 <HAL_ETH_IRQHandler+0x126>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d042      	beq.n	80033d6 <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003356:	f043 0208 	orr.w	r2, r3, #8
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01e      	beq.n	80033a8 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003372:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8003376:	f241 1302 	movw	r3, #4354	@ 0x1102
 800337a:	4013      	ands	r3, r2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800338a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003396:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800339a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	22e0      	movs	r2, #224	@ 0xe0
 80033a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80033a6:	e013      	b.n	80033d0 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033b0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80033b4:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033c6:	461a      	mov	r2, r3
 80033c8:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 80033cc:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f006 fc49 	bl	8009c68 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d104      	bne.n	80033ea <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d019      	beq.n	800341e <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f0:	f043 0210 	orr.w	r2, r3, #16
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	22e0      	movs	r2, #224	@ 0xe0
 800340c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f006 fc29 	bl	8009c68 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00f      	beq.n	8003448 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003430:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f82c 	bl	8003498 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00f      	beq.n	8003472 <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800345a:	f003 020f 	and.w	r2, r3, #15
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f821 	bl	80034ac <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d006      	beq.n	800348a <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800347c:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <HAL_ETH_IRQHandler+0x1e4>)
 800347e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003482:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f81b 	bl	80034c0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 800348a:	bf00      	nop
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	58000080 	.word	0x58000080

08003498 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e03e      	b.n	8003574 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80034fe:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	055b      	lsls	r3, r3, #21
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	041b      	lsls	r3, r3, #16
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f043 030c 	orr.w	r3, r3, #12
 8003522:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8003536:	f7ff f959 	bl	80027ec <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800353c:	e009      	b.n	8003552 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800353e:	f7ff f955 	bl	80027ec <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800354c:	d901      	bls.n	8003552 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e010      	b.n	8003574 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1ed      	bne.n	800353e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800356a:	b29b      	uxth	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e03c      	b.n	8003618 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80035a6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	055b      	lsls	r3, r3, #21
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	041b      	lsls	r3, r3, #16
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f023 030c 	bic.w	r3, r3, #12
 80035ca:	f043 0304 	orr.w	r3, r3, #4
 80035ce:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	b29a      	uxth	r2, r3
 80035dc:	4b10      	ldr	r3, [pc, #64]	@ (8003620 <HAL_ETH_WritePHYRegister+0xa4>)
 80035de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80035e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003620 <HAL_ETH_WritePHYRegister+0xa4>)
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80035ea:	f7ff f8ff 	bl	80027ec <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80035f0:	e009      	b.n	8003606 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80035f2:	f7ff f8fb 	bl	80027ec <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003600:	d901      	bls.n	8003606 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e008      	b.n	8003618 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1ed      	bne.n	80035f2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40028000 	.word	0x40028000

08003624 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e1c3      	b.n	80039c0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 020c 	and.w	r2, r3, #12
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b00      	cmp	r3, #0
 8003652:	bf14      	ite	ne
 8003654:	2301      	movne	r3, #1
 8003656:	2300      	moveq	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	bf0c      	ite	eq
 800367e:	2301      	moveq	r3, #1
 8003680:	2300      	movne	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8003696:	2b00      	cmp	r3, #0
 8003698:	bf14      	ite	ne
 800369a:	2301      	movne	r3, #1
 800369c:	2300      	moveq	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bf0c      	ite	eq
 80036b4:	2301      	moveq	r3, #1
 80036b6:	2300      	movne	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80036c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf14      	ite	ne
 80036ce:	2301      	movne	r3, #1
 80036d0:	2300      	moveq	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf14      	ite	ne
 800371e:	2301      	movne	r3, #1
 8003720:	2300      	moveq	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800374e:	2b00      	cmp	r3, #0
 8003750:	bf0c      	ite	eq
 8003752:	2301      	moveq	r3, #1
 8003754:	2300      	movne	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003768:	2b00      	cmp	r3, #0
 800376a:	bf14      	ite	ne
 800376c:	2301      	movne	r3, #1
 800376e:	2300      	moveq	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003782:	2b00      	cmp	r3, #0
 8003784:	bf14      	ite	ne
 8003786:	2301      	movne	r3, #1
 8003788:	2300      	moveq	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf14      	ite	ne
 80037a0:	2301      	movne	r3, #1
 80037a2:	2300      	moveq	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80037b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	bf14      	ite	ne
 80037ba:	2301      	movne	r3, #1
 80037bc:	2300      	moveq	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bf14      	ite	ne
 80037e2:	2301      	movne	r3, #1
 80037e4:	2300      	moveq	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	461a      	mov	r2, r3
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003814:	2b00      	cmp	r3, #0
 8003816:	bf0c      	ite	eq
 8003818:	2301      	moveq	r3, #1
 800381a:	2300      	movne	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003830:	2b00      	cmp	r3, #0
 8003832:	bf14      	ite	ne
 8003834:	2301      	movne	r3, #1
 8003836:	2300      	moveq	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8003848:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800384c:	2b00      	cmp	r3, #0
 800384e:	bf14      	ite	ne
 8003850:	2301      	movne	r3, #1
 8003852:	2300      	moveq	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8003868:	2b00      	cmp	r3, #0
 800386a:	bf14      	ite	ne
 800386c:	2301      	movne	r3, #1
 800386e:	2300      	moveq	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	0e5b      	lsrs	r3, r3, #25
 8003882:	f003 021f 	and.w	r2, r3, #31
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf14      	ite	ne
 8003898:	2301      	movne	r3, #1
 800389a:	2300      	moveq	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	461a      	mov	r2, r3
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 020f 	and.w	r2, r3, #15
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	bf14      	ite	ne
 80038c2:	2301      	movne	r3, #1
 80038c4:	2300      	moveq	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bf0c      	ite	eq
 80038de:	2301      	moveq	r3, #1
 80038e0:	2300      	movne	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003900:	0c1b      	lsrs	r3, r3, #16
 8003902:	b29a      	uxth	r2, r3
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	bf14      	ite	ne
 8003918:	2301      	movne	r3, #1
 800391a:	2300      	moveq	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8003932:	2b00      	cmp	r3, #0
 8003934:	bf14      	ite	ne
 8003936:	2301      	movne	r3, #1
 8003938:	2300      	moveq	r3, #0
 800393a:	b2db      	uxtb	r3, r3
 800393c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800394c:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800395c:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf14      	ite	ne
 8003974:	2301      	movne	r3, #1
 8003976:	2300      	moveq	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b00      	cmp	r3, #0
 8003990:	bf14      	ite	ne
 8003992:	2301      	movne	r3, #1
 8003994:	2300      	moveq	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80039a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf0c      	ite	eq
 80039b0:	2301      	moveq	r3, #1
 80039b2:	2300      	movne	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e00b      	b.n	80039f8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039e6:	2b10      	cmp	r3, #16
 80039e8:	d105      	bne.n	80039f6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80039ea:	6839      	ldr	r1, [r7, #0]
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f871 	bl	8003ad4 <ETH_SetMACConfig>

    return HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e000      	b.n	80039f8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
  }
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a18:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003a1a:	f002 f837 	bl	8005a8c <HAL_RCC_GetHCLKFreq>
 8003a1e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4a1a      	ldr	r2, [pc, #104]	@ (8003a8c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d804      	bhi.n	8003a32 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	e022      	b.n	8003a78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	4a16      	ldr	r2, [pc, #88]	@ (8003a90 <HAL_ETH_SetMDIOClockRange+0x90>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d204      	bcs.n	8003a44 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	e019      	b.n	8003a78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4a13      	ldr	r2, [pc, #76]	@ (8003a94 <HAL_ETH_SetMDIOClockRange+0x94>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d915      	bls.n	8003a78 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4a12      	ldr	r2, [pc, #72]	@ (8003a98 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d804      	bhi.n	8003a5e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	e00c      	b.n	8003a78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	4a0e      	ldr	r2, [pc, #56]	@ (8003a9c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d804      	bhi.n	8003a70 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	e003      	b.n	8003a78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8003a76:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8003a82:	bf00      	nop
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	02160ebf 	.word	0x02160ebf
 8003a90:	03938700 	.word	0x03938700
 8003a94:	05f5e0ff 	.word	0x05f5e0ff
 8003a98:	08f0d17f 	.word	0x08f0d17f
 8003a9c:	0ee6b27f 	.word	0x0ee6b27f

08003aa0 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003ae6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	791b      	ldrb	r3, [r3, #4]
 8003aec:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003aee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	7b1b      	ldrb	r3, [r3, #12]
 8003af4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003af6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	7b5b      	ldrb	r3, [r3, #13]
 8003afc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003afe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	7b9b      	ldrb	r3, [r3, #14]
 8003b04:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003b06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	7bdb      	ldrb	r3, [r3, #15]
 8003b0c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003b0e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	7c12      	ldrb	r2, [r2, #16]
 8003b14:	2a00      	cmp	r2, #0
 8003b16:	d102      	bne.n	8003b1e <ETH_SetMACConfig+0x4a>
 8003b18:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003b1c:	e000      	b.n	8003b20 <ETH_SetMACConfig+0x4c>
 8003b1e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003b20:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	7c52      	ldrb	r2, [r2, #17]
 8003b26:	2a00      	cmp	r2, #0
 8003b28:	d102      	bne.n	8003b30 <ETH_SetMACConfig+0x5c>
 8003b2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b2e:	e000      	b.n	8003b32 <ETH_SetMACConfig+0x5e>
 8003b30:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003b32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	7c9b      	ldrb	r3, [r3, #18]
 8003b38:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003b3a:	431a      	orrs	r2, r3
               macconf->Speed |
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003b40:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003b46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	7f1b      	ldrb	r3, [r3, #28]
 8003b4c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003b4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	7f5b      	ldrb	r3, [r3, #29]
 8003b54:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003b56:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	7f92      	ldrb	r2, [r2, #30]
 8003b5c:	2a00      	cmp	r2, #0
 8003b5e:	d102      	bne.n	8003b66 <ETH_SetMACConfig+0x92>
 8003b60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b64:	e000      	b.n	8003b68 <ETH_SetMACConfig+0x94>
 8003b66:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003b68:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	7fdb      	ldrb	r3, [r3, #31]
 8003b6e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003b70:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003b78:	2a00      	cmp	r2, #0
 8003b7a:	d102      	bne.n	8003b82 <ETH_SetMACConfig+0xae>
 8003b7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b80:	e000      	b.n	8003b84 <ETH_SetMACConfig+0xb0>
 8003b82:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003b84:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003b8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b92:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003b94:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4b56      	ldr	r3, [pc, #344]	@ (8003d00 <ETH_SetMACConfig+0x22c>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	68f9      	ldr	r1, [r7, #12]
 8003bae:	430b      	orrs	r3, r1
 8003bb0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003bbe:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003bc0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003bc8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003bca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003bd2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003bd4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8003bdc:	2a00      	cmp	r2, #0
 8003bde:	d102      	bne.n	8003be6 <ETH_SetMACConfig+0x112>
 8003be0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003be4:	e000      	b.n	8003be8 <ETH_SetMACConfig+0x114>
 8003be6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003be8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	4b42      	ldr	r3, [pc, #264]	@ (8003d04 <ETH_SetMACConfig+0x230>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	68f9      	ldr	r1, [r7, #12]
 8003c02:	430b      	orrs	r3, r1
 8003c04:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c0c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8003d08 <ETH_SetMACConfig+0x234>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6812      	ldr	r2, [r2, #0]
 8003c24:	68f9      	ldr	r1, [r7, #12]
 8003c26:	430b      	orrs	r3, r1
 8003c28:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c30:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003c36:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003c3e:	2a00      	cmp	r2, #0
 8003c40:	d101      	bne.n	8003c46 <ETH_SetMACConfig+0x172>
 8003c42:	2280      	movs	r2, #128	@ 0x80
 8003c44:	e000      	b.n	8003c48 <ETH_SetMACConfig+0x174>
 8003c46:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003c48:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c4e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c5a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8003c5e:	4013      	ands	r3, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	68f9      	ldr	r1, [r7, #12]
 8003c66:	430b      	orrs	r3, r1
 8003c68:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003c70:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003c78:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c86:	f023 0103 	bic.w	r1, r3, #3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003c9e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8003cba:	2a00      	cmp	r2, #0
 8003cbc:	d101      	bne.n	8003cc2 <ETH_SetMACConfig+0x1ee>
 8003cbe:	2240      	movs	r2, #64	@ 0x40
 8003cc0:	e000      	b.n	8003cc4 <ETH_SetMACConfig+0x1f0>
 8003cc2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003cc4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003ccc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003cce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8003cd6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003ce4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	00048083 	.word	0x00048083
 8003d04:	c0f88000 	.word	0xc0f88000
 8003d08:	fffffef0 	.word	0xfffffef0

08003d0c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4b38      	ldr	r3, [pc, #224]	@ (8003e04 <ETH_SetDMAConfig+0xf8>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	6811      	ldr	r1, [r2, #0]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d32:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	791b      	ldrb	r3, [r3, #4]
 8003d38:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003d3e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	7b1b      	ldrb	r3, [r3, #12]
 8003d44:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	4b2c      	ldr	r3, [pc, #176]	@ (8003e08 <ETH_SetDMAConfig+0xfc>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	68f9      	ldr	r1, [r7, #12]
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d64:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	7b5b      	ldrb	r3, [r3, #13]
 8003d6a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d7c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003d80:	4b22      	ldr	r3, [pc, #136]	@ (8003e0c <ETH_SetDMAConfig+0x100>)
 8003d82:	4013      	ands	r3, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	68f9      	ldr	r1, [r7, #12]
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d90:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	7d1b      	ldrb	r3, [r3, #20]
 8003d9c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003d9e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	7f5b      	ldrb	r3, [r3, #29]
 8003da4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003db2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003db6:	4b16      	ldr	r3, [pc, #88]	@ (8003e10 <ETH_SetDMAConfig+0x104>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	68f9      	ldr	r1, [r7, #12]
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dc6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	7f1b      	ldrb	r3, [r3, #28]
 8003dce:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003de0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003de4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e14 <ETH_SetDMAConfig+0x108>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	68f9      	ldr	r1, [r7, #12]
 8003dee:	430b      	orrs	r3, r1
 8003df0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003df4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	ffff87fd 	.word	0xffff87fd
 8003e08:	ffff2ffe 	.word	0xffff2ffe
 8003e0c:	fffec000 	.word	0xfffec000
 8003e10:	ffc0efef 	.word	0xffc0efef
 8003e14:	7fc0ffff 	.word	0x7fc0ffff

08003e18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b0a4      	sub	sp, #144	@ 0x90
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003e26:	2300      	movs	r3, #0
 8003e28:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003e54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e58:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003e64:	2300      	movs	r3, #0
 8003e66:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003e70:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003e74:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003e92:	2300      	movs	r3, #0
 8003e94:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003eb0:	2320      	movs	r3, #32
 8003eb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003ec2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8003ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003ec8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ecc:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003eec:	2301      	movs	r3, #1
 8003eee:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003efc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f00:	4619      	mov	r1, r3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff fde6 	bl	8003ad4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003f14:	2300      	movs	r3, #0
 8003f16:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003f22:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003f26:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003f2c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003f30:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003f38:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003f3c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003f3e:	f107 0308 	add.w	r3, r7, #8
 8003f42:	4619      	mov	r1, r3
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fee1 	bl	8003d0c <ETH_SetDMAConfig>
}
 8003f4a:	bf00      	nop
 8003f4c:	3790      	adds	r7, #144	@ 0x90
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	e01d      	b.n	8003f9c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68d9      	ldr	r1, [r3, #12]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4613      	mov	r3, r2
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	4413      	add	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	440b      	add	r3, r1
 8003f70:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2200      	movs	r2, #0
 8003f82:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2200      	movs	r2, #0
 8003f88:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	3206      	adds	r2, #6
 8003f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d9de      	bls.n	8003f60 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fc4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fd4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003fec:	2300      	movs	r3, #0
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	e023      	b.n	800403a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6919      	ldr	r1, [r3, #16]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4413      	add	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	440b      	add	r3, r1
 8004002:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2200      	movs	r2, #0
 800400e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2200      	movs	r2, #0
 8004014:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2200      	movs	r2, #0
 800401a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2200      	movs	r2, #0
 8004020:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2200      	movs	r2, #0
 8004026:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	3212      	adds	r2, #18
 8004030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3301      	adds	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b03      	cmp	r3, #3
 800403e:	d9d8      	bls.n	8003ff2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004066:	461a      	mov	r2, r3
 8004068:	2303      	movs	r3, #3
 800406a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691a      	ldr	r2, [r3, #16]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800407a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800408e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8004092:	bf00      	nop
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
	...

080040a0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b091      	sub	sp, #68	@ 0x44
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3318      	adds	r3, #24
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80040b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80040be:	2300      	movs	r3, #0
 80040c0:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ca:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80040d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040e2:	d007      	beq.n	80040f4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80040e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040e8:	3304      	adds	r3, #4
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80040f4:	2302      	movs	r3, #2
 80040f6:	e266      	b.n	80045c6 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d044      	beq.n	800418e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8004104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	4b75      	ldr	r3, [pc, #468]	@ (80042e0 <ETH_Prepare_Tx_Descriptors+0x240>)
 800410a:	4013      	ands	r3, r2
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004110:	431a      	orrs	r2, r3
 8004112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004114:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8004116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800411e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004120:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004130:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d027      	beq.n	800418e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800413e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	b29a      	uxth	r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	431a      	orrs	r2, r3
 800414c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8004150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800415c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004168:	431a      	orrs	r2, r3
 800416a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800417c:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800418c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00e      	beq.n	80041b8 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	4b51      	ldr	r3, [pc, #324]	@ (80042e4 <ETH_Prepare_Tx_Descriptors+0x244>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	6992      	ldr	r2, [r2, #24]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041aa:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80041ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80041b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b6:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d105      	bne.n	80041d0 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d036      	beq.n	800423e <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80041d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80041d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041da:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80041dc:	f3bf 8f5f 	dmb	sy
}
 80041e0:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80041e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80041ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ec:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80041ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041f0:	3301      	adds	r3, #1
 80041f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d902      	bls.n	8004200 <ETH_Prepare_Tx_Descriptors+0x160>
 80041fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041fc:	3b04      	subs	r3, #4
 80041fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004202:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004208:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 800420a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800420c:	3301      	adds	r3, #1
 800420e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004218:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800421c:	d10f      	bne.n	800423e <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800421e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004220:	6a3a      	ldr	r2, [r7, #32]
 8004222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004226:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8004228:	f3bf 8f5f 	dmb	sy
}
 800422c:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800422e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004238:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800423a:	2302      	movs	r3, #2
 800423c:	e1c3      	b.n	80045c6 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800423e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004240:	3301      	adds	r3, #1
 8004242:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800424e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	4b24      	ldr	r3, [pc, #144]	@ (80042e4 <ETH_Prepare_Tx_Descriptors+0x244>)
 8004254:	4013      	ands	r3, r2
 8004256:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004258:	6852      	ldr	r2, [r2, #4]
 800425a:	431a      	orrs	r2, r3
 800425c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425e:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8004260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d012      	beq.n	800428e <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8004268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800426e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004276:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	4b1a      	ldr	r3, [pc, #104]	@ (80042e8 <ETH_Prepare_Tx_Descriptors+0x248>)
 800427e:	4013      	ands	r3, r2
 8004280:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004282:	6852      	ldr	r2, [r2, #4]
 8004284:	0412      	lsls	r2, r2, #16
 8004286:	431a      	orrs	r2, r3
 8004288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428a:	609a      	str	r2, [r3, #8]
 800428c:	e008      	b.n	80042a0 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800428e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004290:	2200      	movs	r2, #0
 8004292:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	4b13      	ldr	r3, [pc, #76]	@ (80042e8 <ETH_Prepare_Tx_Descriptors+0x248>)
 800429a:	4013      	ands	r3, r2
 800429c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800429e:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0310 	and.w	r3, r3, #16
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d021      	beq.n	80042f0 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80042ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	04db      	lsls	r3, r3, #19
 80042ba:	431a      	orrs	r2, r3
 80042bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042be:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80042c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	4b09      	ldr	r3, [pc, #36]	@ (80042ec <ETH_Prepare_Tx_Descriptors+0x24c>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	69d2      	ldr	r2, [r2, #28]
 80042cc:	431a      	orrs	r2, r3
 80042ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d0:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80042d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80042da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042dc:	60da      	str	r2, [r3, #12]
 80042de:	e02e      	b.n	800433e <ETH_Prepare_Tx_Descriptors+0x29e>
 80042e0:	ffff0000 	.word	0xffff0000
 80042e4:	ffffc000 	.word	0xffffc000
 80042e8:	c000ffff 	.word	0xc000ffff
 80042ec:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80042f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	4b7b      	ldr	r3, [pc, #492]	@ (80044e4 <ETH_Prepare_Tx_Descriptors+0x444>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	6852      	ldr	r2, [r2, #4]
 80042fc:	431a      	orrs	r2, r3
 80042fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004300:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d008      	beq.n	8004320 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800430e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	431a      	orrs	r2, r3
 800431c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431e:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800432c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	431a      	orrs	r2, r3
 800433a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433c:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d008      	beq.n	800435c <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800434a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004356:	431a      	orrs	r2, r3
 8004358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800435c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004372:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004374:	f3bf 8f5f 	dmb	sy
}
 8004378:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800437a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004384:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 80da 	beq.w	8004548 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8004394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	431a      	orrs	r2, r3
 80043a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a4:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80043a6:	e0cf      	b.n	8004548 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80043a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80043b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80043b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043b6:	3301      	adds	r3, #1
 80043b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d902      	bls.n	80043c6 <ETH_Prepare_Tx_Descriptors+0x326>
 80043c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043c2:	3b04      	subs	r3, #4
 80043c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043ce:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80043d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80043d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043da:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80043dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043e8:	d007      	beq.n	80043fa <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80043ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ee:	3304      	adds	r3, #4
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d029      	beq.n	800444e <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80043fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004400:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004406:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004408:	2300      	movs	r3, #0
 800440a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800440c:	e019      	b.n	8004442 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800440e:	f3bf 8f5f 	dmb	sy
}
 8004412:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800441c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004422:	3301      	adds	r3, #1
 8004424:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004428:	2b03      	cmp	r3, #3
 800442a:	d902      	bls.n	8004432 <ETH_Prepare_Tx_Descriptors+0x392>
 800442c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800442e:	3b04      	subs	r3, #4
 8004430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004434:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800443a:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800443c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443e:	3301      	adds	r3, #1
 8004440:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004442:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004446:	429a      	cmp	r2, r3
 8004448:	d3e1      	bcc.n	800440e <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800444a:	2302      	movs	r3, #2
 800444c:	e0bb      	b.n	80045c6 <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 800444e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004450:	3301      	adds	r3, #1
 8004452:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800445a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	4b1f      	ldr	r3, [pc, #124]	@ (80044e8 <ETH_Prepare_Tx_Descriptors+0x448>)
 800446a:	4013      	ands	r3, r2
 800446c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800446e:	6852      	ldr	r2, [r2, #4]
 8004470:	431a      	orrs	r2, r3
 8004472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004474:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8004476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d012      	beq.n	80044a4 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800447e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800448e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	4b16      	ldr	r3, [pc, #88]	@ (80044ec <ETH_Prepare_Tx_Descriptors+0x44c>)
 8004494:	4013      	ands	r3, r2
 8004496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004498:	6852      	ldr	r2, [r2, #4]
 800449a:	0412      	lsls	r2, r2, #16
 800449c:	431a      	orrs	r2, r3
 800449e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a0:	609a      	str	r2, [r3, #8]
 80044a2:	e008      	b.n	80044b6 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80044a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a6:	2200      	movs	r2, #0
 80044a8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80044aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	4b0f      	ldr	r3, [pc, #60]	@ (80044ec <ETH_Prepare_Tx_Descriptors+0x44c>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044b4:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d018      	beq.n	80044f4 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80044c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	4b0a      	ldr	r3, [pc, #40]	@ (80044f0 <ETH_Prepare_Tx_Descriptors+0x450>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	69d2      	ldr	r2, [r2, #28]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80044d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80044dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044de:	60da      	str	r2, [r3, #12]
 80044e0:	e020      	b.n	8004524 <ETH_Prepare_Tx_Descriptors+0x484>
 80044e2:	bf00      	nop
 80044e4:	ffff8000 	.word	0xffff8000
 80044e8:	ffffc000 	.word	0xffffc000
 80044ec:	c000ffff 	.word	0xc000ffff
 80044f0:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80044f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	4b36      	ldr	r3, [pc, #216]	@ (80045d4 <ETH_Prepare_Tx_Descriptors+0x534>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	6852      	ldr	r2, [r2, #4]
 8004500:	431a      	orrs	r2, r3
 8004502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004504:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	431a      	orrs	r2, r3
 8004520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004522:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8004524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004526:	3301      	adds	r3, #1
 8004528:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800452a:	f3bf 8f5f 	dmb	sy
}
 800452e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800453c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004546:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8004548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	f47f af2b 	bne.w	80043a8 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d006      	beq.n	8004566 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004562:	609a      	str	r2, [r3, #8]
 8004564:	e005      	b.n	8004572 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800457a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457c:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800457e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004580:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004582:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004586:	3304      	adds	r3, #4
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	440b      	add	r3, r1
 800458c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004592:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004594:	f3ef 8310 	mrs	r3, PRIMASK
 8004598:	61bb      	str	r3, [r7, #24]
  return(result);
 800459a:	69bb      	ldr	r3, [r7, #24]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	2301      	movs	r3, #1
 80045a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f383 8810 	msr	PRIMASK, r3
}
 80045a8:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b0:	4413      	add	r3, r2
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f383 8810 	msr	PRIMASK, r3
}
 80045c2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3744      	adds	r7, #68	@ 0x44
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	ffff8000 	.word	0xffff8000

080045d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80045d8:	b480      	push	{r7}
 80045da:	b089      	sub	sp, #36	@ 0x24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80045e6:	4b86      	ldr	r3, [pc, #536]	@ (8004800 <HAL_GPIO_Init+0x228>)
 80045e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045ea:	e18c      	b.n	8004906 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	2101      	movs	r1, #1
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	fa01 f303 	lsl.w	r3, r1, r3
 80045f8:	4013      	ands	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 817e 	beq.w	8004900 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d005      	beq.n	800461c <HAL_GPIO_Init+0x44>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d130      	bne.n	800467e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	2203      	movs	r2, #3
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	43db      	mvns	r3, r3
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4013      	ands	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4313      	orrs	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004652:	2201      	movs	r2, #1
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4013      	ands	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	091b      	lsrs	r3, r3, #4
 8004668:	f003 0201 	and.w	r2, r3, #1
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4313      	orrs	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b03      	cmp	r3, #3
 8004688:	d017      	beq.n	80046ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	2203      	movs	r2, #3
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4013      	ands	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d123      	bne.n	800470e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	08da      	lsrs	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3208      	adds	r2, #8
 80046ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	220f      	movs	r2, #15
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43db      	mvns	r3, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4013      	ands	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	08da      	lsrs	r2, r3, #3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3208      	adds	r2, #8
 8004708:	69b9      	ldr	r1, [r7, #24]
 800470a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	2203      	movs	r2, #3
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4013      	ands	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f003 0203 	and.w	r2, r3, #3
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 80d8 	beq.w	8004900 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004750:	4b2c      	ldr	r3, [pc, #176]	@ (8004804 <HAL_GPIO_Init+0x22c>)
 8004752:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004756:	4a2b      	ldr	r2, [pc, #172]	@ (8004804 <HAL_GPIO_Init+0x22c>)
 8004758:	f043 0302 	orr.w	r3, r3, #2
 800475c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004760:	4b28      	ldr	r3, [pc, #160]	@ (8004804 <HAL_GPIO_Init+0x22c>)
 8004762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800476e:	4a26      	ldr	r2, [pc, #152]	@ (8004808 <HAL_GPIO_Init+0x230>)
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	089b      	lsrs	r3, r3, #2
 8004774:	3302      	adds	r3, #2
 8004776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	220f      	movs	r2, #15
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	43db      	mvns	r3, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4013      	ands	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a1d      	ldr	r2, [pc, #116]	@ (800480c <HAL_GPIO_Init+0x234>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d04a      	beq.n	8004830 <HAL_GPIO_Init+0x258>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a1c      	ldr	r2, [pc, #112]	@ (8004810 <HAL_GPIO_Init+0x238>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d02b      	beq.n	80047fa <HAL_GPIO_Init+0x222>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004814 <HAL_GPIO_Init+0x23c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d025      	beq.n	80047f6 <HAL_GPIO_Init+0x21e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004818 <HAL_GPIO_Init+0x240>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d01f      	beq.n	80047f2 <HAL_GPIO_Init+0x21a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a19      	ldr	r2, [pc, #100]	@ (800481c <HAL_GPIO_Init+0x244>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d019      	beq.n	80047ee <HAL_GPIO_Init+0x216>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a18      	ldr	r2, [pc, #96]	@ (8004820 <HAL_GPIO_Init+0x248>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d013      	beq.n	80047ea <HAL_GPIO_Init+0x212>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a17      	ldr	r2, [pc, #92]	@ (8004824 <HAL_GPIO_Init+0x24c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00d      	beq.n	80047e6 <HAL_GPIO_Init+0x20e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a16      	ldr	r2, [pc, #88]	@ (8004828 <HAL_GPIO_Init+0x250>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d007      	beq.n	80047e2 <HAL_GPIO_Init+0x20a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a15      	ldr	r2, [pc, #84]	@ (800482c <HAL_GPIO_Init+0x254>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d101      	bne.n	80047de <HAL_GPIO_Init+0x206>
 80047da:	2309      	movs	r3, #9
 80047dc:	e029      	b.n	8004832 <HAL_GPIO_Init+0x25a>
 80047de:	230a      	movs	r3, #10
 80047e0:	e027      	b.n	8004832 <HAL_GPIO_Init+0x25a>
 80047e2:	2307      	movs	r3, #7
 80047e4:	e025      	b.n	8004832 <HAL_GPIO_Init+0x25a>
 80047e6:	2306      	movs	r3, #6
 80047e8:	e023      	b.n	8004832 <HAL_GPIO_Init+0x25a>
 80047ea:	2305      	movs	r3, #5
 80047ec:	e021      	b.n	8004832 <HAL_GPIO_Init+0x25a>
 80047ee:	2304      	movs	r3, #4
 80047f0:	e01f      	b.n	8004832 <HAL_GPIO_Init+0x25a>
 80047f2:	2303      	movs	r3, #3
 80047f4:	e01d      	b.n	8004832 <HAL_GPIO_Init+0x25a>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e01b      	b.n	8004832 <HAL_GPIO_Init+0x25a>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e019      	b.n	8004832 <HAL_GPIO_Init+0x25a>
 80047fe:	bf00      	nop
 8004800:	58000080 	.word	0x58000080
 8004804:	58024400 	.word	0x58024400
 8004808:	58000400 	.word	0x58000400
 800480c:	58020000 	.word	0x58020000
 8004810:	58020400 	.word	0x58020400
 8004814:	58020800 	.word	0x58020800
 8004818:	58020c00 	.word	0x58020c00
 800481c:	58021000 	.word	0x58021000
 8004820:	58021400 	.word	0x58021400
 8004824:	58021800 	.word	0x58021800
 8004828:	58021c00 	.word	0x58021c00
 800482c:	58022400 	.word	0x58022400
 8004830:	2300      	movs	r3, #0
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	f002 0203 	and.w	r2, r2, #3
 8004838:	0092      	lsls	r2, r2, #2
 800483a:	4093      	lsls	r3, r2
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4313      	orrs	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004842:	4938      	ldr	r1, [pc, #224]	@ (8004924 <HAL_GPIO_Init+0x34c>)
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	089b      	lsrs	r3, r3, #2
 8004848:	3302      	adds	r3, #2
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	43db      	mvns	r3, r3
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	4013      	ands	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004876:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800487e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	43db      	mvns	r3, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4013      	ands	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80048a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4013      	ands	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	43db      	mvns	r3, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4013      	ands	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	3301      	adds	r3, #1
 8004904:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	fa22 f303 	lsr.w	r3, r2, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	f47f ae6b 	bne.w	80045ec <HAL_GPIO_Init+0x14>
  }
}
 8004916:	bf00      	nop
 8004918:	bf00      	nop
 800491a:	3724      	adds	r7, #36	@ 0x24
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	58000400 	.word	0x58000400

08004928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	807b      	strh	r3, [r7, #2]
 8004934:	4613      	mov	r3, r2
 8004936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004938:	787b      	ldrb	r3, [r7, #1]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800493e:	887a      	ldrh	r2, [r7, #2]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004944:	e003      	b.n	800494e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004946:	887b      	ldrh	r3, [r7, #2]
 8004948:	041a      	lsls	r2, r3, #16
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	619a      	str	r2, [r3, #24]
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e08b      	b.n	8004a86 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fd f824 	bl	80019d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2224      	movs	r2, #36	@ 0x24
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0201 	bic.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80049ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d107      	bne.n	80049d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	e006      	b.n	80049e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80049e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d108      	bne.n	80049fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049fa:	605a      	str	r2, [r3, #4]
 80049fc:	e007      	b.n	8004a0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6859      	ldr	r1, [r3, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	4b1d      	ldr	r3, [pc, #116]	@ (8004a90 <HAL_I2C_Init+0x134>)
 8004a1a:	430b      	orrs	r3, r1
 8004a1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691a      	ldr	r2, [r3, #16]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69d9      	ldr	r1, [r3, #28]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1a      	ldr	r2, [r3, #32]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	02008000 	.word	0x02008000

08004a94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b20      	cmp	r3, #32
 8004aa8:	d138      	bne.n	8004b1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e032      	b.n	8004b1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2224      	movs	r2, #36	@ 0x24
 8004ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ae6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6819      	ldr	r1, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	e000      	b.n	8004b1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b1c:	2302      	movs	r3, #2
  }
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d139      	bne.n	8004bb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e033      	b.n	8004bb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2224      	movs	r2, #36	@ 0x24
 8004b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0201 	bic.w	r2, r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e000      	b.n	8004bb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bb4:	2302      	movs	r3, #2
  }
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
	...

08004bc4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004bcc:	4b29      	ldr	r3, [pc, #164]	@ (8004c74 <HAL_PWREx_ConfigSupply+0xb0>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	2b06      	cmp	r3, #6
 8004bd6:	d00a      	beq.n	8004bee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004bd8:	4b26      	ldr	r3, [pc, #152]	@ (8004c74 <HAL_PWREx_ConfigSupply+0xb0>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d001      	beq.n	8004bea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e03f      	b.n	8004c6a <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	e03d      	b.n	8004c6a <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bee:	4b21      	ldr	r3, [pc, #132]	@ (8004c74 <HAL_PWREx_ConfigSupply+0xb0>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004bf6:	491f      	ldr	r1, [pc, #124]	@ (8004c74 <HAL_PWREx_ConfigSupply+0xb0>)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004bfe:	f7fd fdf5 	bl	80027ec <HAL_GetTick>
 8004c02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c04:	e009      	b.n	8004c1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c06:	f7fd fdf1 	bl	80027ec <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c14:	d901      	bls.n	8004c1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e027      	b.n	8004c6a <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c1a:	4b16      	ldr	r3, [pc, #88]	@ (8004c74 <HAL_PWREx_ConfigSupply+0xb0>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c26:	d1ee      	bne.n	8004c06 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b1e      	cmp	r3, #30
 8004c2c:	d008      	beq.n	8004c40 <HAL_PWREx_ConfigSupply+0x7c>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c32:	d005      	beq.n	8004c40 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b1d      	cmp	r3, #29
 8004c38:	d002      	beq.n	8004c40 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b2d      	cmp	r3, #45	@ 0x2d
 8004c3e:	d113      	bne.n	8004c68 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004c40:	f7fd fdd4 	bl	80027ec <HAL_GetTick>
 8004c44:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004c46:	e009      	b.n	8004c5c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c48:	f7fd fdd0 	bl	80027ec <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c56:	d901      	bls.n	8004c5c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e006      	b.n	8004c6a <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004c5c:	4b05      	ldr	r3, [pc, #20]	@ (8004c74 <HAL_PWREx_ConfigSupply+0xb0>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0311 	and.w	r3, r3, #17
 8004c64:	2b11      	cmp	r3, #17
 8004c66:	d1ef      	bne.n	8004c48 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	58024800 	.word	0x58024800

08004c78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08c      	sub	sp, #48	@ 0x30
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e3c8      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8087 	beq.w	8004da6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c98:	4b88      	ldr	r3, [pc, #544]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ca2:	4b86      	ldr	r3, [pc, #536]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004caa:	2b10      	cmp	r3, #16
 8004cac:	d007      	beq.n	8004cbe <HAL_RCC_OscConfig+0x46>
 8004cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb0:	2b18      	cmp	r3, #24
 8004cb2:	d110      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x5e>
 8004cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d10b      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cbe:	4b7f      	ldr	r3, [pc, #508]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d06c      	beq.n	8004da4 <HAL_RCC_OscConfig+0x12c>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d168      	bne.n	8004da4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e3a2      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cde:	d106      	bne.n	8004cee <HAL_RCC_OscConfig+0x76>
 8004ce0:	4b76      	ldr	r3, [pc, #472]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a75      	ldr	r2, [pc, #468]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	e02e      	b.n	8004d4c <HAL_RCC_OscConfig+0xd4>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10c      	bne.n	8004d10 <HAL_RCC_OscConfig+0x98>
 8004cf6:	4b71      	ldr	r3, [pc, #452]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a70      	ldr	r2, [pc, #448]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004cfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	4b6e      	ldr	r3, [pc, #440]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a6d      	ldr	r2, [pc, #436]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	e01d      	b.n	8004d4c <HAL_RCC_OscConfig+0xd4>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d18:	d10c      	bne.n	8004d34 <HAL_RCC_OscConfig+0xbc>
 8004d1a:	4b68      	ldr	r3, [pc, #416]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a67      	ldr	r2, [pc, #412]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	4b65      	ldr	r3, [pc, #404]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a64      	ldr	r2, [pc, #400]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	e00b      	b.n	8004d4c <HAL_RCC_OscConfig+0xd4>
 8004d34:	4b61      	ldr	r3, [pc, #388]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a60      	ldr	r2, [pc, #384]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	4b5e      	ldr	r3, [pc, #376]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a5d      	ldr	r2, [pc, #372]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d013      	beq.n	8004d7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fd fd4a 	bl	80027ec <HAL_GetTick>
 8004d58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d5c:	f7fd fd46 	bl	80027ec <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b64      	cmp	r3, #100	@ 0x64
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e356      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d6e:	4b53      	ldr	r3, [pc, #332]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f0      	beq.n	8004d5c <HAL_RCC_OscConfig+0xe4>
 8004d7a:	e014      	b.n	8004da6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7c:	f7fd fd36 	bl	80027ec <HAL_GetTick>
 8004d80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d84:	f7fd fd32 	bl	80027ec <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	@ 0x64
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e342      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d96:	4b49      	ldr	r3, [pc, #292]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0x10c>
 8004da2:	e000      	b.n	8004da6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 808c 	beq.w	8004ecc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004db4:	4b41      	ldr	r3, [pc, #260]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dbc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <HAL_RCC_OscConfig+0x162>
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	2b18      	cmp	r3, #24
 8004dce:	d137      	bne.n	8004e40 <HAL_RCC_OscConfig+0x1c8>
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d132      	bne.n	8004e40 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dda:	4b38      	ldr	r3, [pc, #224]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d005      	beq.n	8004df2 <HAL_RCC_OscConfig+0x17a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e314      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004df2:	4b32      	ldr	r3, [pc, #200]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f023 0219 	bic.w	r2, r3, #25
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	492f      	ldr	r1, [pc, #188]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e04:	f7fd fcf2 	bl	80027ec <HAL_GetTick>
 8004e08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e0c:	f7fd fcee 	bl	80027ec <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e2fe      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e1e:	4b27      	ldr	r3, [pc, #156]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0304 	and.w	r3, r3, #4
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e2a:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	061b      	lsls	r3, r3, #24
 8004e38:	4920      	ldr	r1, [pc, #128]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e3e:	e045      	b.n	8004ecc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d026      	beq.n	8004e96 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e48:	4b1c      	ldr	r3, [pc, #112]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f023 0219 	bic.w	r2, r3, #25
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	4919      	ldr	r1, [pc, #100]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5a:	f7fd fcc7 	bl	80027ec <HAL_GetTick>
 8004e5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e62:	f7fd fcc3 	bl	80027ec <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e2d3      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e74:	4b11      	ldr	r3, [pc, #68]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e80:	4b0e      	ldr	r3, [pc, #56]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	061b      	lsls	r3, r3, #24
 8004e8e:	490b      	ldr	r1, [pc, #44]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	604b      	str	r3, [r1, #4]
 8004e94:	e01a      	b.n	8004ecc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e96:	4b09      	ldr	r3, [pc, #36]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a08      	ldr	r2, [pc, #32]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea2:	f7fd fca3 	bl	80027ec <HAL_GetTick>
 8004ea6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ea8:	e00a      	b.n	8004ec0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eaa:	f7fd fc9f 	bl	80027ec <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d903      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e2af      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
 8004ebc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ec0:	4b96      	ldr	r3, [pc, #600]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1ee      	bne.n	8004eaa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d06a      	beq.n	8004fae <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed8:	4b90      	ldr	r3, [pc, #576]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ee0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ee2:	4b8e      	ldr	r3, [pc, #568]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d007      	beq.n	8004efe <HAL_RCC_OscConfig+0x286>
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b18      	cmp	r3, #24
 8004ef2:	d11b      	bne.n	8004f2c <HAL_RCC_OscConfig+0x2b4>
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d116      	bne.n	8004f2c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004efe:	4b87      	ldr	r3, [pc, #540]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <HAL_RCC_OscConfig+0x29e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	2b80      	cmp	r3, #128	@ 0x80
 8004f10:	d001      	beq.n	8004f16 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e282      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f16:	4b81      	ldr	r3, [pc, #516]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	061b      	lsls	r3, r3, #24
 8004f24:	497d      	ldr	r1, [pc, #500]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f2a:	e040      	b.n	8004fae <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d023      	beq.n	8004f7c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f34:	4b79      	ldr	r3, [pc, #484]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a78      	ldr	r2, [pc, #480]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fd fc54 	bl	80027ec <HAL_GetTick>
 8004f44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f48:	f7fd fc50 	bl	80027ec <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e260      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f5a:	4b70      	ldr	r3, [pc, #448]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f66:	4b6d      	ldr	r3, [pc, #436]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	061b      	lsls	r3, r3, #24
 8004f74:	4969      	ldr	r1, [pc, #420]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60cb      	str	r3, [r1, #12]
 8004f7a:	e018      	b.n	8004fae <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f7c:	4b67      	ldr	r3, [pc, #412]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a66      	ldr	r2, [pc, #408]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f88:	f7fd fc30 	bl	80027ec <HAL_GetTick>
 8004f8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f90:	f7fd fc2c 	bl	80027ec <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e23c      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fa2:	4b5e      	ldr	r3, [pc, #376]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d036      	beq.n	8005028 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d019      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fc2:	4b56      	ldr	r3, [pc, #344]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fc6:	4a55      	ldr	r2, [pc, #340]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fce:	f7fd fc0d 	bl	80027ec <HAL_GetTick>
 8004fd2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fd6:	f7fd fc09 	bl	80027ec <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e219      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fe8:	4b4c      	ldr	r3, [pc, #304]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004fea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0f0      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x35e>
 8004ff4:	e018      	b.n	8005028 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ff6:	4b49      	ldr	r3, [pc, #292]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ffa:	4a48      	ldr	r2, [pc, #288]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004ffc:	f023 0301 	bic.w	r3, r3, #1
 8005000:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005002:	f7fd fbf3 	bl	80027ec <HAL_GetTick>
 8005006:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800500a:	f7fd fbef 	bl	80027ec <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e1ff      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800501c:	4b3f      	ldr	r3, [pc, #252]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 800501e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1f0      	bne.n	800500a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d036      	beq.n	80050a2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d019      	beq.n	8005070 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800503c:	4b37      	ldr	r3, [pc, #220]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a36      	ldr	r2, [pc, #216]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8005042:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005046:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005048:	f7fd fbd0 	bl	80027ec <HAL_GetTick>
 800504c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005050:	f7fd fbcc 	bl	80027ec <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e1dc      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005062:	4b2e      	ldr	r3, [pc, #184]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0f0      	beq.n	8005050 <HAL_RCC_OscConfig+0x3d8>
 800506e:	e018      	b.n	80050a2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005070:	4b2a      	ldr	r3, [pc, #168]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a29      	ldr	r2, [pc, #164]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8005076:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800507a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800507c:	f7fd fbb6 	bl	80027ec <HAL_GetTick>
 8005080:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005084:	f7fd fbb2 	bl	80027ec <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e1c2      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005096:	4b21      	ldr	r3, [pc, #132]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f0      	bne.n	8005084 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0304 	and.w	r3, r3, #4
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 8086 	beq.w	80051bc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005120 <HAL_RCC_OscConfig+0x4a8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005120 <HAL_RCC_OscConfig+0x4a8>)
 80050b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050bc:	f7fd fb96 	bl	80027ec <HAL_GetTick>
 80050c0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c4:	f7fd fb92 	bl	80027ec <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b64      	cmp	r3, #100	@ 0x64
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e1a2      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050d6:	4b12      	ldr	r3, [pc, #72]	@ (8005120 <HAL_RCC_OscConfig+0x4a8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0f0      	beq.n	80050c4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d106      	bne.n	80050f8 <HAL_RCC_OscConfig+0x480>
 80050ea:	4b0c      	ldr	r3, [pc, #48]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 80050ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ee:	4a0b      	ldr	r2, [pc, #44]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 80050f0:	f043 0301 	orr.w	r3, r3, #1
 80050f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80050f6:	e032      	b.n	800515e <HAL_RCC_OscConfig+0x4e6>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d111      	bne.n	8005124 <HAL_RCC_OscConfig+0x4ac>
 8005100:	4b06      	ldr	r3, [pc, #24]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8005102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005104:	4a05      	ldr	r2, [pc, #20]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8005106:	f023 0301 	bic.w	r3, r3, #1
 800510a:	6713      	str	r3, [r2, #112]	@ 0x70
 800510c:	4b03      	ldr	r3, [pc, #12]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 800510e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005110:	4a02      	ldr	r2, [pc, #8]	@ (800511c <HAL_RCC_OscConfig+0x4a4>)
 8005112:	f023 0304 	bic.w	r3, r3, #4
 8005116:	6713      	str	r3, [r2, #112]	@ 0x70
 8005118:	e021      	b.n	800515e <HAL_RCC_OscConfig+0x4e6>
 800511a:	bf00      	nop
 800511c:	58024400 	.word	0x58024400
 8005120:	58024800 	.word	0x58024800
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b05      	cmp	r3, #5
 800512a:	d10c      	bne.n	8005146 <HAL_RCC_OscConfig+0x4ce>
 800512c:	4b83      	ldr	r3, [pc, #524]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 800512e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005130:	4a82      	ldr	r2, [pc, #520]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005132:	f043 0304 	orr.w	r3, r3, #4
 8005136:	6713      	str	r3, [r2, #112]	@ 0x70
 8005138:	4b80      	ldr	r3, [pc, #512]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 800513a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513c:	4a7f      	ldr	r2, [pc, #508]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	6713      	str	r3, [r2, #112]	@ 0x70
 8005144:	e00b      	b.n	800515e <HAL_RCC_OscConfig+0x4e6>
 8005146:	4b7d      	ldr	r3, [pc, #500]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800514a:	4a7c      	ldr	r2, [pc, #496]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 800514c:	f023 0301 	bic.w	r3, r3, #1
 8005150:	6713      	str	r3, [r2, #112]	@ 0x70
 8005152:	4b7a      	ldr	r3, [pc, #488]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005156:	4a79      	ldr	r2, [pc, #484]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005158:	f023 0304 	bic.w	r3, r3, #4
 800515c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d015      	beq.n	8005192 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005166:	f7fd fb41 	bl	80027ec <HAL_GetTick>
 800516a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800516c:	e00a      	b.n	8005184 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516e:	f7fd fb3d 	bl	80027ec <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800517c:	4293      	cmp	r3, r2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e14b      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005184:	4b6d      	ldr	r3, [pc, #436]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0ee      	beq.n	800516e <HAL_RCC_OscConfig+0x4f6>
 8005190:	e014      	b.n	80051bc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005192:	f7fd fb2b 	bl	80027ec <HAL_GetTick>
 8005196:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005198:	e00a      	b.n	80051b0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519a:	f7fd fb27 	bl	80027ec <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e135      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051b0:	4b62      	ldr	r3, [pc, #392]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 80051b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1ee      	bne.n	800519a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 812a 	beq.w	800541a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80051c6:	4b5d      	ldr	r3, [pc, #372]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051ce:	2b18      	cmp	r3, #24
 80051d0:	f000 80ba 	beq.w	8005348 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	2b02      	cmp	r3, #2
 80051da:	f040 8095 	bne.w	8005308 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051de:	4b57      	ldr	r3, [pc, #348]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a56      	ldr	r2, [pc, #344]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 80051e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ea:	f7fd faff 	bl	80027ec <HAL_GetTick>
 80051ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f2:	f7fd fafb 	bl	80027ec <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e10b      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005204:	4b4d      	ldr	r3, [pc, #308]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f0      	bne.n	80051f2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005210:	4b4a      	ldr	r3, [pc, #296]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005212:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005214:	4b4a      	ldr	r3, [pc, #296]	@ (8005340 <HAL_RCC_OscConfig+0x6c8>)
 8005216:	4013      	ands	r3, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005220:	0112      	lsls	r2, r2, #4
 8005222:	430a      	orrs	r2, r1
 8005224:	4945      	ldr	r1, [pc, #276]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005226:	4313      	orrs	r3, r2
 8005228:	628b      	str	r3, [r1, #40]	@ 0x28
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522e:	3b01      	subs	r3, #1
 8005230:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005238:	3b01      	subs	r3, #1
 800523a:	025b      	lsls	r3, r3, #9
 800523c:	b29b      	uxth	r3, r3
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005244:	3b01      	subs	r3, #1
 8005246:	041b      	lsls	r3, r3, #16
 8005248:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005252:	3b01      	subs	r3, #1
 8005254:	061b      	lsls	r3, r3, #24
 8005256:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800525a:	4938      	ldr	r1, [pc, #224]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 800525c:	4313      	orrs	r3, r2
 800525e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005260:	4b36      	ldr	r3, [pc, #216]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005264:	4a35      	ldr	r2, [pc, #212]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800526c:	4b33      	ldr	r3, [pc, #204]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 800526e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005270:	4b34      	ldr	r3, [pc, #208]	@ (8005344 <HAL_RCC_OscConfig+0x6cc>)
 8005272:	4013      	ands	r3, r2
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005278:	00d2      	lsls	r2, r2, #3
 800527a:	4930      	ldr	r1, [pc, #192]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 800527c:	4313      	orrs	r3, r2
 800527e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005280:	4b2e      	ldr	r3, [pc, #184]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005284:	f023 020c 	bic.w	r2, r3, #12
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528c:	492b      	ldr	r1, [pc, #172]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 800528e:	4313      	orrs	r3, r2
 8005290:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005292:	4b2a      	ldr	r3, [pc, #168]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005296:	f023 0202 	bic.w	r2, r3, #2
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529e:	4927      	ldr	r1, [pc, #156]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052a4:	4b25      	ldr	r3, [pc, #148]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a8:	4a24      	ldr	r2, [pc, #144]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052b0:	4b22      	ldr	r3, [pc, #136]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b4:	4a21      	ldr	r2, [pc, #132]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80052bc:	4b1f      	ldr	r3, [pc, #124]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c0:	4a1e      	ldr	r2, [pc, #120]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80052c8:	4b1c      	ldr	r3, [pc, #112]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052cc:	4a1b      	ldr	r2, [pc, #108]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052ce:	f043 0301 	orr.w	r3, r3, #1
 80052d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052d4:	4b19      	ldr	r3, [pc, #100]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a18      	ldr	r2, [pc, #96]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e0:	f7fd fa84 	bl	80027ec <HAL_GetTick>
 80052e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e8:	f7fd fa80 	bl	80027ec <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e090      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052fa:	4b10      	ldr	r3, [pc, #64]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0f0      	beq.n	80052e8 <HAL_RCC_OscConfig+0x670>
 8005306:	e088      	b.n	800541a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005308:	4b0c      	ldr	r3, [pc, #48]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a0b      	ldr	r2, [pc, #44]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 800530e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005314:	f7fd fa6a 	bl	80027ec <HAL_GetTick>
 8005318:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800531c:	f7fd fa66 	bl	80027ec <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e076      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800532e:	4b03      	ldr	r3, [pc, #12]	@ (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f0      	bne.n	800531c <HAL_RCC_OscConfig+0x6a4>
 800533a:	e06e      	b.n	800541a <HAL_RCC_OscConfig+0x7a2>
 800533c:	58024400 	.word	0x58024400
 8005340:	fffffc0c 	.word	0xfffffc0c
 8005344:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005348:	4b36      	ldr	r3, [pc, #216]	@ (8005424 <HAL_RCC_OscConfig+0x7ac>)
 800534a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800534e:	4b35      	ldr	r3, [pc, #212]	@ (8005424 <HAL_RCC_OscConfig+0x7ac>)
 8005350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005352:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	2b01      	cmp	r3, #1
 800535a:	d031      	beq.n	80053c0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f003 0203 	and.w	r2, r3, #3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005366:	429a      	cmp	r2, r3
 8005368:	d12a      	bne.n	80053c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	091b      	lsrs	r3, r3, #4
 800536e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005376:	429a      	cmp	r2, r3
 8005378:	d122      	bne.n	80053c0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005384:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005386:	429a      	cmp	r2, r3
 8005388:	d11a      	bne.n	80053c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	0a5b      	lsrs	r3, r3, #9
 800538e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005396:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005398:	429a      	cmp	r2, r3
 800539a:	d111      	bne.n	80053c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	0c1b      	lsrs	r3, r3, #16
 80053a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d108      	bne.n	80053c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	0e1b      	lsrs	r3, r3, #24
 80053b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053bc:	429a      	cmp	r2, r3
 80053be:	d001      	beq.n	80053c4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e02b      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80053c4:	4b17      	ldr	r3, [pc, #92]	@ (8005424 <HAL_RCC_OscConfig+0x7ac>)
 80053c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c8:	08db      	lsrs	r3, r3, #3
 80053ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d01f      	beq.n	800541a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80053da:	4b12      	ldr	r3, [pc, #72]	@ (8005424 <HAL_RCC_OscConfig+0x7ac>)
 80053dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053de:	4a11      	ldr	r2, [pc, #68]	@ (8005424 <HAL_RCC_OscConfig+0x7ac>)
 80053e0:	f023 0301 	bic.w	r3, r3, #1
 80053e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053e6:	f7fd fa01 	bl	80027ec <HAL_GetTick>
 80053ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80053ec:	bf00      	nop
 80053ee:	f7fd f9fd 	bl	80027ec <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d0f9      	beq.n	80053ee <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80053fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005424 <HAL_RCC_OscConfig+0x7ac>)
 80053fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005428 <HAL_RCC_OscConfig+0x7b0>)
 8005400:	4013      	ands	r3, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005406:	00d2      	lsls	r2, r2, #3
 8005408:	4906      	ldr	r1, [pc, #24]	@ (8005424 <HAL_RCC_OscConfig+0x7ac>)
 800540a:	4313      	orrs	r3, r2
 800540c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800540e:	4b05      	ldr	r3, [pc, #20]	@ (8005424 <HAL_RCC_OscConfig+0x7ac>)
 8005410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005412:	4a04      	ldr	r2, [pc, #16]	@ (8005424 <HAL_RCC_OscConfig+0x7ac>)
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3730      	adds	r7, #48	@ 0x30
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	58024400 	.word	0x58024400
 8005428:	ffff0007 	.word	0xffff0007

0800542c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e19c      	b.n	800577a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005440:	4b8a      	ldr	r3, [pc, #552]	@ (800566c <HAL_RCC_ClockConfig+0x240>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d910      	bls.n	8005470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544e:	4b87      	ldr	r3, [pc, #540]	@ (800566c <HAL_RCC_ClockConfig+0x240>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f023 020f 	bic.w	r2, r3, #15
 8005456:	4985      	ldr	r1, [pc, #532]	@ (800566c <HAL_RCC_ClockConfig+0x240>)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	4313      	orrs	r3, r2
 800545c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800545e:	4b83      	ldr	r3, [pc, #524]	@ (800566c <HAL_RCC_ClockConfig+0x240>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d001      	beq.n	8005470 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e184      	b.n	800577a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	d010      	beq.n	800549e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	4b7b      	ldr	r3, [pc, #492]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005488:	429a      	cmp	r2, r3
 800548a:	d908      	bls.n	800549e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800548c:	4b78      	ldr	r3, [pc, #480]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	4975      	ldr	r1, [pc, #468]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 800549a:	4313      	orrs	r3, r2
 800549c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d010      	beq.n	80054cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695a      	ldr	r2, [r3, #20]
 80054ae:	4b70      	ldr	r3, [pc, #448]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d908      	bls.n	80054cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	496a      	ldr	r1, [pc, #424]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d010      	beq.n	80054fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699a      	ldr	r2, [r3, #24]
 80054dc:	4b64      	ldr	r3, [pc, #400]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d908      	bls.n	80054fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054e8:	4b61      	ldr	r3, [pc, #388]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	495e      	ldr	r1, [pc, #376]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b00      	cmp	r3, #0
 8005504:	d010      	beq.n	8005528 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69da      	ldr	r2, [r3, #28]
 800550a:	4b59      	ldr	r3, [pc, #356]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005512:	429a      	cmp	r2, r3
 8005514:	d908      	bls.n	8005528 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005516:	4b56      	ldr	r3, [pc, #344]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	4953      	ldr	r1, [pc, #332]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005524:	4313      	orrs	r3, r2
 8005526:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d010      	beq.n	8005556 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	4b4d      	ldr	r3, [pc, #308]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f003 030f 	and.w	r3, r3, #15
 8005540:	429a      	cmp	r2, r3
 8005542:	d908      	bls.n	8005556 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005544:	4b4a      	ldr	r3, [pc, #296]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f023 020f 	bic.w	r2, r3, #15
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4947      	ldr	r1, [pc, #284]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005552:	4313      	orrs	r3, r2
 8005554:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d055      	beq.n	800560e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005562:	4b43      	ldr	r3, [pc, #268]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	4940      	ldr	r1, [pc, #256]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005570:	4313      	orrs	r3, r2
 8005572:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d107      	bne.n	800558c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800557c:	4b3c      	ldr	r3, [pc, #240]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d121      	bne.n	80055cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e0f6      	b.n	800577a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b03      	cmp	r3, #3
 8005592:	d107      	bne.n	80055a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005594:	4b36      	ldr	r3, [pc, #216]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d115      	bne.n	80055cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0ea      	b.n	800577a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d107      	bne.n	80055bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055ac:	4b30      	ldr	r3, [pc, #192]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d109      	bne.n	80055cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e0de      	b.n	800577a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055bc:	4b2c      	ldr	r3, [pc, #176]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e0d6      	b.n	800577a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055cc:	4b28      	ldr	r3, [pc, #160]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f023 0207 	bic.w	r2, r3, #7
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	4925      	ldr	r1, [pc, #148]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055de:	f7fd f905 	bl	80027ec <HAL_GetTick>
 80055e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e4:	e00a      	b.n	80055fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e6:	f7fd f901 	bl	80027ec <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e0be      	b.n	800577a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	429a      	cmp	r2, r3
 800560c:	d1eb      	bne.n	80055e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d010      	beq.n	800563c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	4b14      	ldr	r3, [pc, #80]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	429a      	cmp	r2, r3
 8005628:	d208      	bcs.n	800563c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800562a:	4b11      	ldr	r3, [pc, #68]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	f023 020f 	bic.w	r2, r3, #15
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	490e      	ldr	r1, [pc, #56]	@ (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005638:	4313      	orrs	r3, r2
 800563a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800563c:	4b0b      	ldr	r3, [pc, #44]	@ (800566c <HAL_RCC_ClockConfig+0x240>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d214      	bcs.n	8005674 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564a:	4b08      	ldr	r3, [pc, #32]	@ (800566c <HAL_RCC_ClockConfig+0x240>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f023 020f 	bic.w	r2, r3, #15
 8005652:	4906      	ldr	r1, [pc, #24]	@ (800566c <HAL_RCC_ClockConfig+0x240>)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	4313      	orrs	r3, r2
 8005658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800565a:	4b04      	ldr	r3, [pc, #16]	@ (800566c <HAL_RCC_ClockConfig+0x240>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d005      	beq.n	8005674 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e086      	b.n	800577a <HAL_RCC_ClockConfig+0x34e>
 800566c:	52002000 	.word	0x52002000
 8005670:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d010      	beq.n	80056a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	4b3f      	ldr	r3, [pc, #252]	@ (8005784 <HAL_RCC_ClockConfig+0x358>)
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800568c:	429a      	cmp	r2, r3
 800568e:	d208      	bcs.n	80056a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005690:	4b3c      	ldr	r3, [pc, #240]	@ (8005784 <HAL_RCC_ClockConfig+0x358>)
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	4939      	ldr	r1, [pc, #228]	@ (8005784 <HAL_RCC_ClockConfig+0x358>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d010      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	4b34      	ldr	r3, [pc, #208]	@ (8005784 <HAL_RCC_ClockConfig+0x358>)
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d208      	bcs.n	80056d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056be:	4b31      	ldr	r3, [pc, #196]	@ (8005784 <HAL_RCC_ClockConfig+0x358>)
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	492e      	ldr	r1, [pc, #184]	@ (8005784 <HAL_RCC_ClockConfig+0x358>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d010      	beq.n	80056fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	4b28      	ldr	r3, [pc, #160]	@ (8005784 <HAL_RCC_ClockConfig+0x358>)
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d208      	bcs.n	80056fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056ec:	4b25      	ldr	r3, [pc, #148]	@ (8005784 <HAL_RCC_ClockConfig+0x358>)
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	4922      	ldr	r1, [pc, #136]	@ (8005784 <HAL_RCC_ClockConfig+0x358>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d010      	beq.n	800572c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69da      	ldr	r2, [r3, #28]
 800570e:	4b1d      	ldr	r3, [pc, #116]	@ (8005784 <HAL_RCC_ClockConfig+0x358>)
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005716:	429a      	cmp	r2, r3
 8005718:	d208      	bcs.n	800572c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800571a:	4b1a      	ldr	r3, [pc, #104]	@ (8005784 <HAL_RCC_ClockConfig+0x358>)
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	4917      	ldr	r1, [pc, #92]	@ (8005784 <HAL_RCC_ClockConfig+0x358>)
 8005728:	4313      	orrs	r3, r2
 800572a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800572c:	f000 f834 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 8005730:	4602      	mov	r2, r0
 8005732:	4b14      	ldr	r3, [pc, #80]	@ (8005784 <HAL_RCC_ClockConfig+0x358>)
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	0a1b      	lsrs	r3, r3, #8
 8005738:	f003 030f 	and.w	r3, r3, #15
 800573c:	4912      	ldr	r1, [pc, #72]	@ (8005788 <HAL_RCC_ClockConfig+0x35c>)
 800573e:	5ccb      	ldrb	r3, [r1, r3]
 8005740:	f003 031f 	and.w	r3, r3, #31
 8005744:	fa22 f303 	lsr.w	r3, r2, r3
 8005748:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800574a:	4b0e      	ldr	r3, [pc, #56]	@ (8005784 <HAL_RCC_ClockConfig+0x358>)
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	4a0d      	ldr	r2, [pc, #52]	@ (8005788 <HAL_RCC_ClockConfig+0x35c>)
 8005754:	5cd3      	ldrb	r3, [r2, r3]
 8005756:	f003 031f 	and.w	r3, r3, #31
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	fa22 f303 	lsr.w	r3, r2, r3
 8005760:	4a0a      	ldr	r2, [pc, #40]	@ (800578c <HAL_RCC_ClockConfig+0x360>)
 8005762:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005764:	4a0a      	ldr	r2, [pc, #40]	@ (8005790 <HAL_RCC_ClockConfig+0x364>)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800576a:	4b0a      	ldr	r3, [pc, #40]	@ (8005794 <HAL_RCC_ClockConfig+0x368>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f7fc fcca 	bl	8002108 <HAL_InitTick>
 8005774:	4603      	mov	r3, r0
 8005776:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	58024400 	.word	0x58024400
 8005788:	0801e570 	.word	0x0801e570
 800578c:	24000008 	.word	0x24000008
 8005790:	24000004 	.word	0x24000004
 8005794:	2400000c 	.word	0x2400000c

08005798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005798:	b480      	push	{r7}
 800579a:	b089      	sub	sp, #36	@ 0x24
 800579c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800579e:	4bb3      	ldr	r3, [pc, #716]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057a6:	2b18      	cmp	r3, #24
 80057a8:	f200 8155 	bhi.w	8005a56 <HAL_RCC_GetSysClockFreq+0x2be>
 80057ac:	a201      	add	r2, pc, #4	@ (adr r2, 80057b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80057ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b2:	bf00      	nop
 80057b4:	08005819 	.word	0x08005819
 80057b8:	08005a57 	.word	0x08005a57
 80057bc:	08005a57 	.word	0x08005a57
 80057c0:	08005a57 	.word	0x08005a57
 80057c4:	08005a57 	.word	0x08005a57
 80057c8:	08005a57 	.word	0x08005a57
 80057cc:	08005a57 	.word	0x08005a57
 80057d0:	08005a57 	.word	0x08005a57
 80057d4:	0800583f 	.word	0x0800583f
 80057d8:	08005a57 	.word	0x08005a57
 80057dc:	08005a57 	.word	0x08005a57
 80057e0:	08005a57 	.word	0x08005a57
 80057e4:	08005a57 	.word	0x08005a57
 80057e8:	08005a57 	.word	0x08005a57
 80057ec:	08005a57 	.word	0x08005a57
 80057f0:	08005a57 	.word	0x08005a57
 80057f4:	08005845 	.word	0x08005845
 80057f8:	08005a57 	.word	0x08005a57
 80057fc:	08005a57 	.word	0x08005a57
 8005800:	08005a57 	.word	0x08005a57
 8005804:	08005a57 	.word	0x08005a57
 8005808:	08005a57 	.word	0x08005a57
 800580c:	08005a57 	.word	0x08005a57
 8005810:	08005a57 	.word	0x08005a57
 8005814:	0800584b 	.word	0x0800584b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005818:	4b94      	ldr	r3, [pc, #592]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b00      	cmp	r3, #0
 8005822:	d009      	beq.n	8005838 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005824:	4b91      	ldr	r3, [pc, #580]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	08db      	lsrs	r3, r3, #3
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	4a90      	ldr	r2, [pc, #576]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005830:	fa22 f303 	lsr.w	r3, r2, r3
 8005834:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005836:	e111      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005838:	4b8d      	ldr	r3, [pc, #564]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800583a:	61bb      	str	r3, [r7, #24]
      break;
 800583c:	e10e      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800583e:	4b8d      	ldr	r3, [pc, #564]	@ (8005a74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005840:	61bb      	str	r3, [r7, #24]
      break;
 8005842:	e10b      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005844:	4b8c      	ldr	r3, [pc, #560]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005846:	61bb      	str	r3, [r7, #24]
      break;
 8005848:	e108      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800584a:	4b88      	ldr	r3, [pc, #544]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800584c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005854:	4b85      	ldr	r3, [pc, #532]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005858:	091b      	lsrs	r3, r3, #4
 800585a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800585e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005860:	4b82      	ldr	r3, [pc, #520]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800586a:	4b80      	ldr	r3, [pc, #512]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800586c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800586e:	08db      	lsrs	r3, r3, #3
 8005870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	fb02 f303 	mul.w	r3, r2, r3
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005882:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 80e1 	beq.w	8005a50 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b02      	cmp	r3, #2
 8005892:	f000 8083 	beq.w	800599c <HAL_RCC_GetSysClockFreq+0x204>
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b02      	cmp	r3, #2
 800589a:	f200 80a1 	bhi.w	80059e0 <HAL_RCC_GetSysClockFreq+0x248>
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_RCC_GetSysClockFreq+0x114>
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d056      	beq.n	8005958 <HAL_RCC_GetSysClockFreq+0x1c0>
 80058aa:	e099      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058ac:	4b6f      	ldr	r3, [pc, #444]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d02d      	beq.n	8005914 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058b8:	4b6c      	ldr	r3, [pc, #432]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	08db      	lsrs	r3, r3, #3
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	4a6b      	ldr	r2, [pc, #428]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
 80058c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	ee07 3a90 	vmov	s15, r3
 80058d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e2:	4b62      	ldr	r3, [pc, #392]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80058f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 80058fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005912:	e087      	b.n	8005a24 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005a80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005926:	4b51      	ldr	r3, [pc, #324]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005936:	ed97 6a02 	vldr	s12, [r7, #8]
 800593a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 800593e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800594a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800594e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005952:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005956:	e065      	b.n	8005a24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005962:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005a84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596a:	4b40      	ldr	r3, [pc, #256]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800596c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597a:	ed97 6a02 	vldr	s12, [r7, #8]
 800597e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800598e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005996:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800599a:	e043      	b.n	8005a24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005a88 <HAL_RCC_GetSysClockFreq+0x2f0>
 80059aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ae:	4b2f      	ldr	r3, [pc, #188]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059be:	ed97 6a02 	vldr	s12, [r7, #8]
 80059c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 80059c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059de:	e021      	b.n	8005a24 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005a84 <HAL_RCC_GetSysClockFreq+0x2ec>
 80059ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f2:	4b1e      	ldr	r3, [pc, #120]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a02:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a06:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a22:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005a24:	4b11      	ldr	r3, [pc, #68]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a28:	0a5b      	lsrs	r3, r3, #9
 8005a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a2e:	3301      	adds	r3, #1
 8005a30:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	ee07 3a90 	vmov	s15, r3
 8005a38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a48:	ee17 3a90 	vmov	r3, s15
 8005a4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005a4e:	e005      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	61bb      	str	r3, [r7, #24]
      break;
 8005a54:	e002      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005a56:	4b07      	ldr	r3, [pc, #28]	@ (8005a74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a58:	61bb      	str	r3, [r7, #24]
      break;
 8005a5a:	bf00      	nop
  }

  return sysclockfreq;
 8005a5c:	69bb      	ldr	r3, [r7, #24]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3724      	adds	r7, #36	@ 0x24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	58024400 	.word	0x58024400
 8005a70:	03d09000 	.word	0x03d09000
 8005a74:	003d0900 	.word	0x003d0900
 8005a78:	02dc6c00 	.word	0x02dc6c00
 8005a7c:	46000000 	.word	0x46000000
 8005a80:	4c742400 	.word	0x4c742400
 8005a84:	4a742400 	.word	0x4a742400
 8005a88:	4c371b00 	.word	0x4c371b00

08005a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a92:	f7ff fe81 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 8005a96:	4602      	mov	r2, r0
 8005a98:	4b10      	ldr	r3, [pc, #64]	@ (8005adc <HAL_RCC_GetHCLKFreq+0x50>)
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	0a1b      	lsrs	r3, r3, #8
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	490f      	ldr	r1, [pc, #60]	@ (8005ae0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005aa4:	5ccb      	ldrb	r3, [r1, r3]
 8005aa6:	f003 031f 	and.w	r3, r3, #31
 8005aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8005aae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8005adc <HAL_RCC_GetHCLKFreq+0x50>)
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	4a09      	ldr	r2, [pc, #36]	@ (8005ae0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005aba:	5cd3      	ldrb	r3, [r2, r3]
 8005abc:	f003 031f 	and.w	r3, r3, #31
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac6:	4a07      	ldr	r2, [pc, #28]	@ (8005ae4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ac8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005aca:	4a07      	ldr	r2, [pc, #28]	@ (8005ae8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ad0:	4b04      	ldr	r3, [pc, #16]	@ (8005ae4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	58024400 	.word	0x58024400
 8005ae0:	0801e570 	.word	0x0801e570
 8005ae4:	24000008 	.word	0x24000008
 8005ae8:	24000004 	.word	0x24000004

08005aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005af0:	f7ff ffcc 	bl	8005a8c <HAL_RCC_GetHCLKFreq>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4b06      	ldr	r3, [pc, #24]	@ (8005b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	091b      	lsrs	r3, r3, #4
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	4904      	ldr	r1, [pc, #16]	@ (8005b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b02:	5ccb      	ldrb	r3, [r1, r3]
 8005b04:	f003 031f 	and.w	r3, r3, #31
 8005b08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	58024400 	.word	0x58024400
 8005b14:	0801e570 	.word	0x0801e570

08005b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b1c:	f7ff ffb6 	bl	8005a8c <HAL_RCC_GetHCLKFreq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b06      	ldr	r3, [pc, #24]	@ (8005b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	0a1b      	lsrs	r3, r3, #8
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4904      	ldr	r1, [pc, #16]	@ (8005b40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b2e:	5ccb      	ldrb	r3, [r1, r3]
 8005b30:	f003 031f 	and.w	r3, r3, #31
 8005b34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	58024400 	.word	0x58024400
 8005b40:	0801e570 	.word	0x0801e570

08005b44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	223f      	movs	r2, #63	@ 0x3f
 8005b52:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b54:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc0 <HAL_RCC_GetClockConfig+0x7c>)
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f003 0207 	and.w	r2, r3, #7
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005b60:	4b17      	ldr	r3, [pc, #92]	@ (8005bc0 <HAL_RCC_GetClockConfig+0x7c>)
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005b6c:	4b14      	ldr	r3, [pc, #80]	@ (8005bc0 <HAL_RCC_GetClockConfig+0x7c>)
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	f003 020f 	and.w	r2, r3, #15
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005b78:	4b11      	ldr	r3, [pc, #68]	@ (8005bc0 <HAL_RCC_GetClockConfig+0x7c>)
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005b84:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc0 <HAL_RCC_GetClockConfig+0x7c>)
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005b90:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc0 <HAL_RCC_GetClockConfig+0x7c>)
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005b9c:	4b08      	ldr	r3, [pc, #32]	@ (8005bc0 <HAL_RCC_GetClockConfig+0x7c>)
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ba8:	4b06      	ldr	r3, [pc, #24]	@ (8005bc4 <HAL_RCC_GetClockConfig+0x80>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 020f 	and.w	r2, r3, #15
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	601a      	str	r2, [r3, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	58024400 	.word	0x58024400
 8005bc4:	52002000 	.word	0x52002000

08005bc8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bcc:	b0c6      	sub	sp, #280	@ 0x118
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005bec:	2500      	movs	r5, #0
 8005bee:	ea54 0305 	orrs.w	r3, r4, r5
 8005bf2:	d049      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bfa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bfe:	d02f      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c04:	d828      	bhi.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c0a:	d01a      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c10:	d822      	bhi.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005c16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c1a:	d007      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c1c:	e01c      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c1e:	4bab      	ldr	r3, [pc, #684]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c22:	4aaa      	ldr	r2, [pc, #680]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c2a:	e01a      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c30:	3308      	adds	r3, #8
 8005c32:	2102      	movs	r1, #2
 8005c34:	4618      	mov	r0, r3
 8005c36:	f001 fc25 	bl	8007484 <RCCEx_PLL2_Config>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c40:	e00f      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c46:	3328      	adds	r3, #40	@ 0x28
 8005c48:	2102      	movs	r1, #2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f001 fccc 	bl	80075e8 <RCCEx_PLL3_Config>
 8005c50:	4603      	mov	r3, r0
 8005c52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c56:	e004      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c5e:	e000      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10a      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c6a:	4b98      	ldr	r3, [pc, #608]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c6e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c78:	4a94      	ldr	r2, [pc, #592]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c7a:	430b      	orrs	r3, r1
 8005c7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c7e:	e003      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c90:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005c94:	f04f 0900 	mov.w	r9, #0
 8005c98:	ea58 0309 	orrs.w	r3, r8, r9
 8005c9c:	d047      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d82a      	bhi.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cae:	bf00      	nop
 8005cb0:	08005cc5 	.word	0x08005cc5
 8005cb4:	08005cd3 	.word	0x08005cd3
 8005cb8:	08005ce9 	.word	0x08005ce9
 8005cbc:	08005d07 	.word	0x08005d07
 8005cc0:	08005d07 	.word	0x08005d07
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cc4:	4b81      	ldr	r3, [pc, #516]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc8:	4a80      	ldr	r2, [pc, #512]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cd0:	e01a      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	2100      	movs	r1, #0
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f001 fbd2 	bl	8007484 <RCCEx_PLL2_Config>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ce6:	e00f      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cec:	3328      	adds	r3, #40	@ 0x28
 8005cee:	2100      	movs	r1, #0
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f001 fc79 	bl	80075e8 <RCCEx_PLL3_Config>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cfc:	e004      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d04:	e000      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10a      	bne.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d10:	4b6e      	ldr	r3, [pc, #440]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d14:	f023 0107 	bic.w	r1, r3, #7
 8005d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d1e:	4a6b      	ldr	r2, [pc, #428]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d20:	430b      	orrs	r3, r1
 8005d22:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d24:	e003      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d2a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d36:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005d3a:	f04f 0b00 	mov.w	fp, #0
 8005d3e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005d42:	d05b      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d4c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005d50:	d03b      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005d52:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005d56:	d834      	bhi.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d5c:	d037      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005d5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d62:	d82e      	bhi.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d64:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d68:	d033      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005d6a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d6e:	d828      	bhi.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d74:	d01a      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005d76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d7a:	d822      	bhi.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005d80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d84:	d007      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005d86:	e01c      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d88:	4b50      	ldr	r3, [pc, #320]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8c:	4a4f      	ldr	r2, [pc, #316]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d94:	e01e      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f001 fb70 	bl	8007484 <RCCEx_PLL2_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005daa:	e013      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db0:	3328      	adds	r3, #40	@ 0x28
 8005db2:	2100      	movs	r1, #0
 8005db4:	4618      	mov	r0, r3
 8005db6:	f001 fc17 	bl	80075e8 <RCCEx_PLL3_Config>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dc8:	e004      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005dca:	bf00      	nop
 8005dcc:	e002      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005dce:	bf00      	nop
 8005dd0:	e000      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10b      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005de0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005dec:	4a37      	ldr	r2, [pc, #220]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dee:	430b      	orrs	r3, r1
 8005df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005df2:	e003      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005df8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005e08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e12:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005e16:	460b      	mov	r3, r1
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	d05d      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e24:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005e28:	d03b      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005e2a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005e2e:	d834      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e34:	d037      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005e36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e3a:	d82e      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e40:	d033      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005e42:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e46:	d828      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e4c:	d01a      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005e4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e52:	d822      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005e58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e5c:	d007      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005e5e:	e01c      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e60:	4b1a      	ldr	r3, [pc, #104]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e64:	4a19      	ldr	r2, [pc, #100]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e6c:	e01e      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e72:	3308      	adds	r3, #8
 8005e74:	2100      	movs	r1, #0
 8005e76:	4618      	mov	r0, r3
 8005e78:	f001 fb04 	bl	8007484 <RCCEx_PLL2_Config>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005e82:	e013      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e88:	3328      	adds	r3, #40	@ 0x28
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f001 fbab 	bl	80075e8 <RCCEx_PLL3_Config>
 8005e92:	4603      	mov	r3, r0
 8005e94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e98:	e008      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ea0:	e004      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005ea2:	bf00      	nop
 8005ea4:	e002      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005ea6:	bf00      	nop
 8005ea8:	e000      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10d      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005eb4:	4b05      	ldr	r3, [pc, #20]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ec4:	4a01      	ldr	r2, [pc, #4]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ec6:	430b      	orrs	r3, r1
 8005ec8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005eca:	e005      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005ecc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ed4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005ee4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005eee:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	d03a      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005efe:	2b30      	cmp	r3, #48	@ 0x30
 8005f00:	d01f      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005f02:	2b30      	cmp	r3, #48	@ 0x30
 8005f04:	d819      	bhi.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d00c      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d815      	bhi.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d019      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005f12:	2b10      	cmp	r3, #16
 8005f14:	d111      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f16:	4baa      	ldr	r3, [pc, #680]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1a:	4aa9      	ldr	r2, [pc, #676]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005f22:	e011      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f28:	3308      	adds	r3, #8
 8005f2a:	2102      	movs	r1, #2
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f001 faa9 	bl	8007484 <RCCEx_PLL2_Config>
 8005f32:	4603      	mov	r3, r0
 8005f34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005f38:	e006      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f40:	e002      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005f42:	bf00      	nop
 8005f44:	e000      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10a      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005f50:	4b9b      	ldr	r3, [pc, #620]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f54:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f5e:	4a98      	ldr	r2, [pc, #608]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f60:	430b      	orrs	r3, r1
 8005f62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f64:	e003      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	d051      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f98:	d035      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005f9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f9e:	d82e      	bhi.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005fa0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fa4:	d031      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005fa6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005faa:	d828      	bhi.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fb0:	d01a      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005fb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fb6:	d822      	bhi.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fc0:	d007      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005fc2:	e01c      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fc4:	4b7e      	ldr	r3, [pc, #504]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc8:	4a7d      	ldr	r2, [pc, #500]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005fd0:	e01c      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	2100      	movs	r1, #0
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f001 fa52 	bl	8007484 <RCCEx_PLL2_Config>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005fe6:	e011      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fec:	3328      	adds	r3, #40	@ 0x28
 8005fee:	2100      	movs	r1, #0
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 faf9 	bl	80075e8 <RCCEx_PLL3_Config>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ffc:	e006      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006004:	e002      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006006:	bf00      	nop
 8006008:	e000      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800600a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800600c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10a      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006014:	4b6a      	ldr	r3, [pc, #424]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006018:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006022:	4a67      	ldr	r2, [pc, #412]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006024:	430b      	orrs	r3, r1
 8006026:	6513      	str	r3, [r2, #80]	@ 0x50
 8006028:	e003      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800602e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800603e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006042:	2300      	movs	r3, #0
 8006044:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006048:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800604c:	460b      	mov	r3, r1
 800604e:	4313      	orrs	r3, r2
 8006050:	d053      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006058:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800605c:	d033      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800605e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006062:	d82c      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006064:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006068:	d02f      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x502>
 800606a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800606e:	d826      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006070:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006074:	d02b      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006076:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800607a:	d820      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800607c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006080:	d012      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006082:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006086:	d81a      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006088:	2b00      	cmp	r3, #0
 800608a:	d022      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800608c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006090:	d115      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006096:	3308      	adds	r3, #8
 8006098:	2101      	movs	r1, #1
 800609a:	4618      	mov	r0, r3
 800609c:	f001 f9f2 	bl	8007484 <RCCEx_PLL2_Config>
 80060a0:	4603      	mov	r3, r0
 80060a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80060a6:	e015      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ac:	3328      	adds	r3, #40	@ 0x28
 80060ae:	2101      	movs	r1, #1
 80060b0:	4618      	mov	r0, r3
 80060b2:	f001 fa99 	bl	80075e8 <RCCEx_PLL3_Config>
 80060b6:	4603      	mov	r3, r0
 80060b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80060bc:	e00a      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060c4:	e006      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80060c6:	bf00      	nop
 80060c8:	e004      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80060ca:	bf00      	nop
 80060cc:	e002      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80060ce:	bf00      	nop
 80060d0:	e000      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80060d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10a      	bne.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80060dc:	4b38      	ldr	r3, [pc, #224]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80060e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ea:	4a35      	ldr	r2, [pc, #212]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060ec:	430b      	orrs	r3, r1
 80060ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80060f0:	e003      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80060fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006102:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006106:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800610a:	2300      	movs	r3, #0
 800610c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006110:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006114:	460b      	mov	r3, r1
 8006116:	4313      	orrs	r3, r2
 8006118:	d058      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800611a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800611e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006122:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006126:	d033      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006128:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800612c:	d82c      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800612e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006132:	d02f      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006138:	d826      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800613a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800613e:	d02b      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006140:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006144:	d820      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006146:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800614a:	d012      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800614c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006150:	d81a      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006152:	2b00      	cmp	r3, #0
 8006154:	d022      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006156:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800615a:	d115      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006160:	3308      	adds	r3, #8
 8006162:	2101      	movs	r1, #1
 8006164:	4618      	mov	r0, r3
 8006166:	f001 f98d 	bl	8007484 <RCCEx_PLL2_Config>
 800616a:	4603      	mov	r3, r0
 800616c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006170:	e015      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006176:	3328      	adds	r3, #40	@ 0x28
 8006178:	2101      	movs	r1, #1
 800617a:	4618      	mov	r0, r3
 800617c:	f001 fa34 	bl	80075e8 <RCCEx_PLL3_Config>
 8006180:	4603      	mov	r3, r0
 8006182:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006186:	e00a      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800618e:	e006      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006190:	bf00      	nop
 8006192:	e004      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006194:	bf00      	nop
 8006196:	e002      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006198:	bf00      	nop
 800619a:	e000      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800619c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800619e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10e      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80061a6:	4b06      	ldr	r3, [pc, #24]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80061ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80061b6:	4a02      	ldr	r2, [pc, #8]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061b8:	430b      	orrs	r3, r1
 80061ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80061bc:	e006      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80061be:	bf00      	nop
 80061c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80061cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80061d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061dc:	2300      	movs	r3, #0
 80061de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80061e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4313      	orrs	r3, r2
 80061ea:	d037      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80061ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061f6:	d00e      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80061f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061fc:	d816      	bhi.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d018      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006202:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006206:	d111      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006208:	4bc4      	ldr	r3, [pc, #784]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800620a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620c:	4ac3      	ldr	r2, [pc, #780]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800620e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006212:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006214:	e00f      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800621a:	3308      	adds	r3, #8
 800621c:	2101      	movs	r1, #1
 800621e:	4618      	mov	r0, r3
 8006220:	f001 f930 	bl	8007484 <RCCEx_PLL2_Config>
 8006224:	4603      	mov	r3, r0
 8006226:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800622a:	e004      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006232:	e000      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006236:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10a      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800623e:	4bb7      	ldr	r3, [pc, #732]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006242:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800624a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800624c:	4ab3      	ldr	r2, [pc, #716]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800624e:	430b      	orrs	r3, r1
 8006250:	6513      	str	r3, [r2, #80]	@ 0x50
 8006252:	e003      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006254:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006258:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800625c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006264:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006268:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800626c:	2300      	movs	r3, #0
 800626e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006272:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006276:	460b      	mov	r3, r1
 8006278:	4313      	orrs	r3, r2
 800627a:	d039      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800627c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006282:	2b03      	cmp	r3, #3
 8006284:	d81c      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006286:	a201      	add	r2, pc, #4	@ (adr r2, 800628c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628c:	080062c9 	.word	0x080062c9
 8006290:	0800629d 	.word	0x0800629d
 8006294:	080062ab 	.word	0x080062ab
 8006298:	080062c9 	.word	0x080062c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800629c:	4b9f      	ldr	r3, [pc, #636]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800629e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a0:	4a9e      	ldr	r2, [pc, #632]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80062a8:	e00f      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ae:	3308      	adds	r3, #8
 80062b0:	2102      	movs	r1, #2
 80062b2:	4618      	mov	r0, r3
 80062b4:	f001 f8e6 	bl	8007484 <RCCEx_PLL2_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80062be:	e004      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062c6:	e000      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80062c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10a      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80062d2:	4b92      	ldr	r3, [pc, #584]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062d6:	f023 0103 	bic.w	r1, r3, #3
 80062da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062e0:	4a8e      	ldr	r2, [pc, #568]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062e2:	430b      	orrs	r3, r1
 80062e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80062e6:	e003      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80062fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006300:	2300      	movs	r3, #0
 8006302:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006306:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800630a:	460b      	mov	r3, r1
 800630c:	4313      	orrs	r3, r2
 800630e:	f000 8099 	beq.w	8006444 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006312:	4b83      	ldr	r3, [pc, #524]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a82      	ldr	r2, [pc, #520]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800631c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800631e:	f7fc fa65 	bl	80027ec <HAL_GetTick>
 8006322:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006326:	e00b      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006328:	f7fc fa60 	bl	80027ec <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b64      	cmp	r3, #100	@ 0x64
 8006336:	d903      	bls.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800633e:	e005      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006340:	4b77      	ldr	r3, [pc, #476]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0ed      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800634c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006350:	2b00      	cmp	r3, #0
 8006352:	d173      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006354:	4b71      	ldr	r3, [pc, #452]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006356:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006360:	4053      	eors	r3, r2
 8006362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006366:	2b00      	cmp	r3, #0
 8006368:	d015      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800636a:	4b6c      	ldr	r3, [pc, #432]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800636c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800636e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006372:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006376:	4b69      	ldr	r3, [pc, #420]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800637a:	4a68      	ldr	r2, [pc, #416]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800637c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006380:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006382:	4b66      	ldr	r3, [pc, #408]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006386:	4a65      	ldr	r2, [pc, #404]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800638c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800638e:	4a63      	ldr	r2, [pc, #396]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006394:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800639a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800639e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063a2:	d118      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a4:	f7fc fa22 	bl	80027ec <HAL_GetTick>
 80063a8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063ac:	e00d      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ae:	f7fc fa1d 	bl	80027ec <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80063b8:	1ad2      	subs	r2, r2, r3
 80063ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80063be:	429a      	cmp	r2, r3
 80063c0:	d903      	bls.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80063c8:	e005      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063ca:	4b54      	ldr	r3, [pc, #336]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0eb      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80063d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d129      	bne.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80063e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063ee:	d10e      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x846>
 80063f0:	4b4a      	ldr	r3, [pc, #296]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80063f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006400:	091a      	lsrs	r2, r3, #4
 8006402:	4b48      	ldr	r3, [pc, #288]	@ (8006524 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006404:	4013      	ands	r3, r2
 8006406:	4a45      	ldr	r2, [pc, #276]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006408:	430b      	orrs	r3, r1
 800640a:	6113      	str	r3, [r2, #16]
 800640c:	e005      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800640e:	4b43      	ldr	r3, [pc, #268]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	4a42      	ldr	r2, [pc, #264]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006414:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006418:	6113      	str	r3, [r2, #16]
 800641a:	4b40      	ldr	r3, [pc, #256]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800641c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800641e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006422:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800642a:	4a3c      	ldr	r2, [pc, #240]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800642c:	430b      	orrs	r3, r1
 800642e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006430:	e008      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006432:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006436:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800643a:	e003      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006440:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	f002 0301 	and.w	r3, r2, #1
 8006450:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006454:	2300      	movs	r3, #0
 8006456:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800645a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800645e:	460b      	mov	r3, r1
 8006460:	4313      	orrs	r3, r2
 8006462:	f000 808f 	beq.w	8006584 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800646c:	2b28      	cmp	r3, #40	@ 0x28
 800646e:	d871      	bhi.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006470:	a201      	add	r2, pc, #4	@ (adr r2, 8006478 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006476:	bf00      	nop
 8006478:	0800655d 	.word	0x0800655d
 800647c:	08006555 	.word	0x08006555
 8006480:	08006555 	.word	0x08006555
 8006484:	08006555 	.word	0x08006555
 8006488:	08006555 	.word	0x08006555
 800648c:	08006555 	.word	0x08006555
 8006490:	08006555 	.word	0x08006555
 8006494:	08006555 	.word	0x08006555
 8006498:	08006529 	.word	0x08006529
 800649c:	08006555 	.word	0x08006555
 80064a0:	08006555 	.word	0x08006555
 80064a4:	08006555 	.word	0x08006555
 80064a8:	08006555 	.word	0x08006555
 80064ac:	08006555 	.word	0x08006555
 80064b0:	08006555 	.word	0x08006555
 80064b4:	08006555 	.word	0x08006555
 80064b8:	0800653f 	.word	0x0800653f
 80064bc:	08006555 	.word	0x08006555
 80064c0:	08006555 	.word	0x08006555
 80064c4:	08006555 	.word	0x08006555
 80064c8:	08006555 	.word	0x08006555
 80064cc:	08006555 	.word	0x08006555
 80064d0:	08006555 	.word	0x08006555
 80064d4:	08006555 	.word	0x08006555
 80064d8:	0800655d 	.word	0x0800655d
 80064dc:	08006555 	.word	0x08006555
 80064e0:	08006555 	.word	0x08006555
 80064e4:	08006555 	.word	0x08006555
 80064e8:	08006555 	.word	0x08006555
 80064ec:	08006555 	.word	0x08006555
 80064f0:	08006555 	.word	0x08006555
 80064f4:	08006555 	.word	0x08006555
 80064f8:	0800655d 	.word	0x0800655d
 80064fc:	08006555 	.word	0x08006555
 8006500:	08006555 	.word	0x08006555
 8006504:	08006555 	.word	0x08006555
 8006508:	08006555 	.word	0x08006555
 800650c:	08006555 	.word	0x08006555
 8006510:	08006555 	.word	0x08006555
 8006514:	08006555 	.word	0x08006555
 8006518:	0800655d 	.word	0x0800655d
 800651c:	58024400 	.word	0x58024400
 8006520:	58024800 	.word	0x58024800
 8006524:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652c:	3308      	adds	r3, #8
 800652e:	2101      	movs	r1, #1
 8006530:	4618      	mov	r0, r3
 8006532:	f000 ffa7 	bl	8007484 <RCCEx_PLL2_Config>
 8006536:	4603      	mov	r3, r0
 8006538:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800653c:	e00f      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800653e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006542:	3328      	adds	r3, #40	@ 0x28
 8006544:	2101      	movs	r1, #1
 8006546:	4618      	mov	r0, r3
 8006548:	f001 f84e 	bl	80075e8 <RCCEx_PLL3_Config>
 800654c:	4603      	mov	r3, r0
 800654e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006552:	e004      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800655a:	e000      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800655c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800655e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006566:	4bbf      	ldr	r3, [pc, #764]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800656a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800656e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006572:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006574:	4abb      	ldr	r2, [pc, #748]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006576:	430b      	orrs	r3, r1
 8006578:	6553      	str	r3, [r2, #84]	@ 0x54
 800657a:	e003      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006580:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	f002 0302 	and.w	r3, r2, #2
 8006590:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006594:	2300      	movs	r3, #0
 8006596:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800659a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800659e:	460b      	mov	r3, r1
 80065a0:	4313      	orrs	r3, r2
 80065a2:	d041      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80065a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065aa:	2b05      	cmp	r3, #5
 80065ac:	d824      	bhi.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80065ae:	a201      	add	r2, pc, #4	@ (adr r2, 80065b4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80065b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b4:	08006601 	.word	0x08006601
 80065b8:	080065cd 	.word	0x080065cd
 80065bc:	080065e3 	.word	0x080065e3
 80065c0:	08006601 	.word	0x08006601
 80065c4:	08006601 	.word	0x08006601
 80065c8:	08006601 	.word	0x08006601
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d0:	3308      	adds	r3, #8
 80065d2:	2101      	movs	r1, #1
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 ff55 	bl	8007484 <RCCEx_PLL2_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80065e0:	e00f      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e6:	3328      	adds	r3, #40	@ 0x28
 80065e8:	2101      	movs	r1, #1
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fffc 	bl	80075e8 <RCCEx_PLL3_Config>
 80065f0:	4603      	mov	r3, r0
 80065f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80065f6:	e004      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065fe:	e000      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006602:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10a      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800660a:	4b96      	ldr	r3, [pc, #600]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800660c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800660e:	f023 0107 	bic.w	r1, r3, #7
 8006612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006618:	4a92      	ldr	r2, [pc, #584]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800661a:	430b      	orrs	r3, r1
 800661c:	6553      	str	r3, [r2, #84]	@ 0x54
 800661e:	e003      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006620:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006624:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	f002 0304 	and.w	r3, r2, #4
 8006634:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006638:	2300      	movs	r3, #0
 800663a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800663e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006642:	460b      	mov	r3, r1
 8006644:	4313      	orrs	r3, r2
 8006646:	d044      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006650:	2b05      	cmp	r3, #5
 8006652:	d825      	bhi.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006654:	a201      	add	r2, pc, #4	@ (adr r2, 800665c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665a:	bf00      	nop
 800665c:	080066a9 	.word	0x080066a9
 8006660:	08006675 	.word	0x08006675
 8006664:	0800668b 	.word	0x0800668b
 8006668:	080066a9 	.word	0x080066a9
 800666c:	080066a9 	.word	0x080066a9
 8006670:	080066a9 	.word	0x080066a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006678:	3308      	adds	r3, #8
 800667a:	2101      	movs	r1, #1
 800667c:	4618      	mov	r0, r3
 800667e:	f000 ff01 	bl	8007484 <RCCEx_PLL2_Config>
 8006682:	4603      	mov	r3, r0
 8006684:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006688:	e00f      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800668a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668e:	3328      	adds	r3, #40	@ 0x28
 8006690:	2101      	movs	r1, #1
 8006692:	4618      	mov	r0, r3
 8006694:	f000 ffa8 	bl	80075e8 <RCCEx_PLL3_Config>
 8006698:	4603      	mov	r3, r0
 800669a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800669e:	e004      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066a6:	e000      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80066a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10b      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066b2:	4b6c      	ldr	r3, [pc, #432]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b6:	f023 0107 	bic.w	r1, r3, #7
 80066ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c2:	4a68      	ldr	r2, [pc, #416]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066c4:	430b      	orrs	r3, r1
 80066c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80066c8:	e003      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80066d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	f002 0320 	and.w	r3, r2, #32
 80066de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80066e2:	2300      	movs	r3, #0
 80066e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80066e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80066ec:	460b      	mov	r3, r1
 80066ee:	4313      	orrs	r3, r2
 80066f0:	d055      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066fe:	d033      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006700:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006704:	d82c      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800670a:	d02f      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800670c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006710:	d826      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006712:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006716:	d02b      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006718:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800671c:	d820      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800671e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006722:	d012      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006724:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006728:	d81a      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800672a:	2b00      	cmp	r3, #0
 800672c:	d022      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800672e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006732:	d115      	bne.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006738:	3308      	adds	r3, #8
 800673a:	2100      	movs	r1, #0
 800673c:	4618      	mov	r0, r3
 800673e:	f000 fea1 	bl	8007484 <RCCEx_PLL2_Config>
 8006742:	4603      	mov	r3, r0
 8006744:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006748:	e015      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800674a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674e:	3328      	adds	r3, #40	@ 0x28
 8006750:	2102      	movs	r1, #2
 8006752:	4618      	mov	r0, r3
 8006754:	f000 ff48 	bl	80075e8 <RCCEx_PLL3_Config>
 8006758:	4603      	mov	r3, r0
 800675a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800675e:	e00a      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006766:	e006      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006768:	bf00      	nop
 800676a:	e004      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800676c:	bf00      	nop
 800676e:	e002      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006770:	bf00      	nop
 8006772:	e000      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006776:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10b      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800677e:	4b39      	ldr	r3, [pc, #228]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006782:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800678a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800678e:	4a35      	ldr	r2, [pc, #212]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006790:	430b      	orrs	r3, r1
 8006792:	6553      	str	r3, [r2, #84]	@ 0x54
 8006794:	e003      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006796:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800679a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800679e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80067aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067ae:	2300      	movs	r3, #0
 80067b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067b4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80067b8:	460b      	mov	r3, r1
 80067ba:	4313      	orrs	r3, r2
 80067bc:	d058      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80067be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80067ca:	d033      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80067cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80067d0:	d82c      	bhi.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80067d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067d6:	d02f      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80067d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067dc:	d826      	bhi.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80067de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067e2:	d02b      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80067e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067e8:	d820      	bhi.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80067ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067ee:	d012      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80067f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067f4:	d81a      	bhi.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d022      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80067fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067fe:	d115      	bne.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006804:	3308      	adds	r3, #8
 8006806:	2100      	movs	r1, #0
 8006808:	4618      	mov	r0, r3
 800680a:	f000 fe3b 	bl	8007484 <RCCEx_PLL2_Config>
 800680e:	4603      	mov	r3, r0
 8006810:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006814:	e015      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800681a:	3328      	adds	r3, #40	@ 0x28
 800681c:	2102      	movs	r1, #2
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fee2 	bl	80075e8 <RCCEx_PLL3_Config>
 8006824:	4603      	mov	r3, r0
 8006826:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800682a:	e00a      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006832:	e006      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006834:	bf00      	nop
 8006836:	e004      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006838:	bf00      	nop
 800683a:	e002      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800683c:	bf00      	nop
 800683e:	e000      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006842:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10e      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800684a:	4b06      	ldr	r3, [pc, #24]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800684c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800684e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006856:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800685a:	4a02      	ldr	r2, [pc, #8]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800685c:	430b      	orrs	r3, r1
 800685e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006860:	e006      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006862:	bf00      	nop
 8006864:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006868:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800686c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800687c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006880:	2300      	movs	r3, #0
 8006882:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006886:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800688a:	460b      	mov	r3, r1
 800688c:	4313      	orrs	r3, r2
 800688e:	d055      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006894:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006898:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800689c:	d033      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800689e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80068a2:	d82c      	bhi.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80068a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068a8:	d02f      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80068aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068ae:	d826      	bhi.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80068b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80068b4:	d02b      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80068b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80068ba:	d820      	bhi.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80068bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068c0:	d012      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80068c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068c6:	d81a      	bhi.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d022      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80068cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068d0:	d115      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d6:	3308      	adds	r3, #8
 80068d8:	2100      	movs	r1, #0
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 fdd2 	bl	8007484 <RCCEx_PLL2_Config>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80068e6:	e015      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ec:	3328      	adds	r3, #40	@ 0x28
 80068ee:	2102      	movs	r1, #2
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 fe79 	bl	80075e8 <RCCEx_PLL3_Config>
 80068f6:	4603      	mov	r3, r0
 80068f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80068fc:	e00a      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006904:	e006      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006906:	bf00      	nop
 8006908:	e004      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800690a:	bf00      	nop
 800690c:	e002      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800690e:	bf00      	nop
 8006910:	e000      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006914:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10b      	bne.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800691c:	4ba0      	ldr	r3, [pc, #640]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800691e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006920:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006928:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800692c:	4a9c      	ldr	r2, [pc, #624]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800692e:	430b      	orrs	r3, r1
 8006930:	6593      	str	r3, [r2, #88]	@ 0x58
 8006932:	e003      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006934:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006938:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800693c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006944:	f002 0308 	and.w	r3, r2, #8
 8006948:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800694c:	2300      	movs	r3, #0
 800694e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006952:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006956:	460b      	mov	r3, r1
 8006958:	4313      	orrs	r3, r2
 800695a:	d01e      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800695c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006964:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006968:	d10c      	bne.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800696a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696e:	3328      	adds	r3, #40	@ 0x28
 8006970:	2102      	movs	r1, #2
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fe38 	bl	80075e8 <RCCEx_PLL3_Config>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006984:	4b86      	ldr	r3, [pc, #536]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006988:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800698c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006994:	4a82      	ldr	r2, [pc, #520]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006996:	430b      	orrs	r3, r1
 8006998:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800699a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f002 0310 	and.w	r3, r2, #16
 80069a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069aa:	2300      	movs	r3, #0
 80069ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069b0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80069b4:	460b      	mov	r3, r1
 80069b6:	4313      	orrs	r3, r2
 80069b8:	d01e      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80069ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069c6:	d10c      	bne.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069cc:	3328      	adds	r3, #40	@ 0x28
 80069ce:	2102      	movs	r1, #2
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 fe09 	bl	80075e8 <RCCEx_PLL3_Config>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069e2:	4b6f      	ldr	r3, [pc, #444]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80069ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069f2:	4a6b      	ldr	r2, [pc, #428]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069f4:	430b      	orrs	r3, r1
 80069f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006a04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a06:	2300      	movs	r3, #0
 8006a08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a0a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4313      	orrs	r3, r2
 8006a12:	d03e      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a20:	d022      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006a22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a26:	d81b      	bhi.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a30:	d00b      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006a32:	e015      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a38:	3308      	adds	r3, #8
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fd21 	bl	8007484 <RCCEx_PLL2_Config>
 8006a42:	4603      	mov	r3, r0
 8006a44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a48:	e00f      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4e:	3328      	adds	r3, #40	@ 0x28
 8006a50:	2102      	movs	r1, #2
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fdc8 	bl	80075e8 <RCCEx_PLL3_Config>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a5e:	e004      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a66:	e000      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10b      	bne.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a72:	4b4b      	ldr	r3, [pc, #300]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a76:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a82:	4a47      	ldr	r2, [pc, #284]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a84:	430b      	orrs	r3, r1
 8006a86:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a88:	e003      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006a9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	677b      	str	r3, [r7, #116]	@ 0x74
 8006aa4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	d03b      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ab6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006aba:	d01f      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006abc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ac0:	d818      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006ac2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ac6:	d003      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006ac8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006acc:	d007      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006ace:	e011      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ad0:	4b33      	ldr	r3, [pc, #204]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad4:	4a32      	ldr	r2, [pc, #200]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ada:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006adc:	e00f      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae2:	3328      	adds	r3, #40	@ 0x28
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fd7e 	bl	80075e8 <RCCEx_PLL3_Config>
 8006aec:	4603      	mov	r3, r0
 8006aee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006af2:	e004      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006afa:	e000      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006afe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10b      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b06:	4b26      	ldr	r3, [pc, #152]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b16:	4a22      	ldr	r2, [pc, #136]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b1c:	e003      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006b32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b34:	2300      	movs	r3, #0
 8006b36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b38:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	d034      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b50:	d007      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006b52:	e011      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b54:	4b12      	ldr	r3, [pc, #72]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b58:	4a11      	ldr	r2, [pc, #68]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b60:	e00e      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b66:	3308      	adds	r3, #8
 8006b68:	2102      	movs	r1, #2
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fc8a 	bl	8007484 <RCCEx_PLL2_Config>
 8006b70:	4603      	mov	r3, r0
 8006b72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b76:	e003      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10d      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006b88:	4b05      	ldr	r3, [pc, #20]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b8c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b96:	4a02      	ldr	r2, [pc, #8]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b9c:	e006      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006b9e:	bf00      	nop
 8006ba0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ba8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006bb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bba:	2300      	movs	r3, #0
 8006bbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bbe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	d00c      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bcc:	3328      	adds	r3, #40	@ 0x28
 8006bce:	2102      	movs	r1, #2
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fd09 	bl	80075e8 <RCCEx_PLL3_Config>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006bee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bf4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	d036      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c08:	d018      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006c0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c0e:	d811      	bhi.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c14:	d014      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006c16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c1a:	d80b      	bhi.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d011      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c24:	d106      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c26:	4bb7      	ldr	r3, [pc, #732]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2a:	4ab6      	ldr	r2, [pc, #728]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006c32:	e008      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c3a:	e004      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006c3c:	bf00      	nop
 8006c3e:	e002      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006c40:	bf00      	nop
 8006c42:	e000      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c4e:	4bad      	ldr	r3, [pc, #692]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c5c:	4aa9      	ldr	r2, [pc, #676]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c5e:	430b      	orrs	r3, r1
 8006c60:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c62:	e003      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006c78:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006c82:	460b      	mov	r3, r1
 8006c84:	4313      	orrs	r3, r2
 8006c86:	d009      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c88:	4b9e      	ldr	r3, [pc, #632]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c96:	4a9b      	ldr	r2, [pc, #620]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c98:	430b      	orrs	r3, r1
 8006c9a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006caa:	2300      	movs	r3, #0
 8006cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	d009      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006cb8:	4b92      	ldr	r3, [pc, #584]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cbc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cc6:	4a8f      	ldr	r2, [pc, #572]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cc8:	430b      	orrs	r3, r1
 8006cca:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006cd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cda:	2300      	movs	r3, #0
 8006cdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cde:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	d00e      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ce8:	4b86      	ldr	r3, [pc, #536]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	4a85      	ldr	r2, [pc, #532]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006cf2:	6113      	str	r3, [r2, #16]
 8006cf4:	4b83      	ldr	r3, [pc, #524]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cf6:	6919      	ldr	r1, [r3, #16]
 8006cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d00:	4a80      	ldr	r2, [pc, #512]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d02:	430b      	orrs	r3, r1
 8006d04:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006d12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d14:	2300      	movs	r3, #0
 8006d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d18:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	d009      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d22:	4b78      	ldr	r3, [pc, #480]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d26:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d30:	4a74      	ldr	r2, [pc, #464]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d32:	430b      	orrs	r3, r1
 8006d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006d42:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d44:	2300      	movs	r3, #0
 8006d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d48:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	d00a      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d52:	4b6c      	ldr	r3, [pc, #432]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d56:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d62:	4a68      	ldr	r2, [pc, #416]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d64:	430b      	orrs	r3, r1
 8006d66:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	2100      	movs	r1, #0
 8006d72:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d7a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4313      	orrs	r3, r2
 8006d82:	d011      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d88:	3308      	adds	r3, #8
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 fb79 	bl	8007484 <RCCEx_PLL2_Config>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006da4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	2100      	movs	r1, #0
 8006db2:	6239      	str	r1, [r7, #32]
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	d011      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc8:	3308      	adds	r3, #8
 8006dca:	2101      	movs	r1, #1
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fb59 	bl	8007484 <RCCEx_PLL2_Config>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006dd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006de4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df0:	2100      	movs	r1, #0
 8006df2:	61b9      	str	r1, [r7, #24]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	61fb      	str	r3, [r7, #28]
 8006dfa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4313      	orrs	r3, r2
 8006e02:	d011      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e08:	3308      	adds	r3, #8
 8006e0a:	2102      	movs	r1, #2
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 fb39 	bl	8007484 <RCCEx_PLL2_Config>
 8006e12:	4603      	mov	r3, r0
 8006e14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e30:	2100      	movs	r1, #0
 8006e32:	6139      	str	r1, [r7, #16]
 8006e34:	f003 0308 	and.w	r3, r3, #8
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4313      	orrs	r3, r2
 8006e42:	d011      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e48:	3328      	adds	r3, #40	@ 0x28
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 fbcb 	bl	80075e8 <RCCEx_PLL3_Config>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006e58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	2100      	movs	r1, #0
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	f003 0310 	and.w	r3, r3, #16
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4313      	orrs	r3, r2
 8006e82:	d011      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e88:	3328      	adds	r3, #40	@ 0x28
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fbab 	bl	80075e8 <RCCEx_PLL3_Config>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ea4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	6039      	str	r1, [r7, #0]
 8006eb4:	f003 0320 	and.w	r3, r3, #32
 8006eb8:	607b      	str	r3, [r7, #4]
 8006eba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	d011      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec8:	3328      	adds	r3, #40	@ 0x28
 8006eca:	2102      	movs	r1, #2
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fb8b 	bl	80075e8 <RCCEx_PLL3_Config>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ee4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006ee8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d101      	bne.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	e000      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006efc:	46bd      	mov	sp, r7
 8006efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f02:	bf00      	nop
 8006f04:	58024400 	.word	0x58024400

08006f08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f0c:	f7fe fdbe 	bl	8005a8c <HAL_RCC_GetHCLKFreq>
 8006f10:	4602      	mov	r2, r0
 8006f12:	4b06      	ldr	r3, [pc, #24]	@ (8006f2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	091b      	lsrs	r3, r3, #4
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	4904      	ldr	r1, [pc, #16]	@ (8006f30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f1e:	5ccb      	ldrb	r3, [r1, r3]
 8006f20:	f003 031f 	and.w	r3, r3, #31
 8006f24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	58024400 	.word	0x58024400
 8006f30:	0801e570 	.word	0x0801e570

08006f34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b089      	sub	sp, #36	@ 0x24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f3c:	4ba1      	ldr	r3, [pc, #644]	@ (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f40:	f003 0303 	and.w	r3, r3, #3
 8006f44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006f46:	4b9f      	ldr	r3, [pc, #636]	@ (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f4a:	0b1b      	lsrs	r3, r3, #12
 8006f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f52:	4b9c      	ldr	r3, [pc, #624]	@ (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f56:	091b      	lsrs	r3, r3, #4
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006f5e:	4b99      	ldr	r3, [pc, #612]	@ (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f62:	08db      	lsrs	r3, r3, #3
 8006f64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	fb02 f303 	mul.w	r3, r2, r3
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 8111 	beq.w	80071a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	f000 8083 	beq.w	8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	f200 80a1 	bhi.w	80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d003      	beq.n	8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d056      	beq.n	800704c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f9e:	e099      	b.n	80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fa0:	4b88      	ldr	r3, [pc, #544]	@ (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0320 	and.w	r3, r3, #32
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d02d      	beq.n	8007008 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fac:	4b85      	ldr	r3, [pc, #532]	@ (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	08db      	lsrs	r3, r3, #3
 8006fb2:	f003 0303 	and.w	r3, r3, #3
 8006fb6:	4a84      	ldr	r2, [pc, #528]	@ (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fbc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	ee07 3a90 	vmov	s15, r3
 8006fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fd6:	4b7b      	ldr	r3, [pc, #492]	@ (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fde:	ee07 3a90 	vmov	s15, r3
 8006fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007002:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007006:	e087      	b.n	8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007012:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800701a:	4b6a      	ldr	r3, [pc, #424]	@ (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800701c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800702a:	ed97 6a03 	vldr	s12, [r7, #12]
 800702e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800703a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800703e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800704a:	e065      	b.n	8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	ee07 3a90 	vmov	s15, r3
 8007052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007056:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800705a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800705e:	4b59      	ldr	r3, [pc, #356]	@ (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800706e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007072:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800707a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800707e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800708e:	e043      	b.n	8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800709e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a2:	4b48      	ldr	r3, [pc, #288]	@ (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070d2:	e021      	b.n	8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e6:	4b37      	ldr	r3, [pc, #220]	@ (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800710a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007116:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007118:	4b2a      	ldr	r3, [pc, #168]	@ (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800711a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800711c:	0a5b      	lsrs	r3, r3, #9
 800711e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007122:	ee07 3a90 	vmov	s15, r3
 8007126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800712e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007132:	edd7 6a07 	vldr	s13, [r7, #28]
 8007136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800713a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800713e:	ee17 2a90 	vmov	r2, s15
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007146:	4b1f      	ldr	r3, [pc, #124]	@ (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714a:	0c1b      	lsrs	r3, r3, #16
 800714c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007150:	ee07 3a90 	vmov	s15, r3
 8007154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007158:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800715c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007160:	edd7 6a07 	vldr	s13, [r7, #28]
 8007164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800716c:	ee17 2a90 	vmov	r2, s15
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007174:	4b13      	ldr	r3, [pc, #76]	@ (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007178:	0e1b      	lsrs	r3, r3, #24
 800717a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007186:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800718a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800718e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800719a:	ee17 2a90 	vmov	r2, s15
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80071a2:	e008      	b.n	80071b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	609a      	str	r2, [r3, #8]
}
 80071b6:	bf00      	nop
 80071b8:	3724      	adds	r7, #36	@ 0x24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	58024400 	.word	0x58024400
 80071c8:	03d09000 	.word	0x03d09000
 80071cc:	46000000 	.word	0x46000000
 80071d0:	4c742400 	.word	0x4c742400
 80071d4:	4a742400 	.word	0x4a742400
 80071d8:	4c371b00 	.word	0x4c371b00

080071dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80071dc:	b480      	push	{r7}
 80071de:	b089      	sub	sp, #36	@ 0x24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071e4:	4ba1      	ldr	r3, [pc, #644]	@ (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e8:	f003 0303 	and.w	r3, r3, #3
 80071ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80071ee:	4b9f      	ldr	r3, [pc, #636]	@ (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f2:	0d1b      	lsrs	r3, r3, #20
 80071f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80071fa:	4b9c      	ldr	r3, [pc, #624]	@ (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fe:	0a1b      	lsrs	r3, r3, #8
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007206:	4b99      	ldr	r3, [pc, #612]	@ (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800720a:	08db      	lsrs	r3, r3, #3
 800720c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	fb02 f303 	mul.w	r3, r2, r3
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 8111 	beq.w	800744c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	2b02      	cmp	r3, #2
 800722e:	f000 8083 	beq.w	8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	2b02      	cmp	r3, #2
 8007236:	f200 80a1 	bhi.w	800737c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d056      	beq.n	80072f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007246:	e099      	b.n	800737c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007248:	4b88      	ldr	r3, [pc, #544]	@ (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0320 	and.w	r3, r3, #32
 8007250:	2b00      	cmp	r3, #0
 8007252:	d02d      	beq.n	80072b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007254:	4b85      	ldr	r3, [pc, #532]	@ (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	08db      	lsrs	r3, r3, #3
 800725a:	f003 0303 	and.w	r3, r3, #3
 800725e:	4a84      	ldr	r2, [pc, #528]	@ (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007260:	fa22 f303 	lsr.w	r3, r2, r3
 8007264:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	ee07 3a90 	vmov	s15, r3
 800726c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800727e:	4b7b      	ldr	r3, [pc, #492]	@ (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800728e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007292:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800729e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072ae:	e087      	b.n	80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80072be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c2:	4b6a      	ldr	r3, [pc, #424]	@ (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072f2:	e065      	b.n	80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800747c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007306:	4b59      	ldr	r3, [pc, #356]	@ (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800730a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007316:	ed97 6a03 	vldr	s12, [r7, #12]
 800731a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800731e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800732a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800732e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007336:	e043      	b.n	80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007342:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800734a:	4b48      	ldr	r3, [pc, #288]	@ (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800734c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800735a:	ed97 6a03 	vldr	s12, [r7, #12]
 800735e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800736a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800736e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800737a:	e021      	b.n	80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	ee07 3a90 	vmov	s15, r3
 8007382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007386:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800747c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800738a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800738e:	4b37      	ldr	r3, [pc, #220]	@ (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007396:	ee07 3a90 	vmov	s15, r3
 800739a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800739e:	ed97 6a03 	vldr	s12, [r7, #12]
 80073a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80073c0:	4b2a      	ldr	r3, [pc, #168]	@ (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c4:	0a5b      	lsrs	r3, r3, #9
 80073c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073da:	edd7 6a07 	vldr	s13, [r7, #28]
 80073de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073e6:	ee17 2a90 	vmov	r2, s15
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80073ee:	4b1f      	ldr	r3, [pc, #124]	@ (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f2:	0c1b      	lsrs	r3, r3, #16
 80073f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073f8:	ee07 3a90 	vmov	s15, r3
 80073fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007400:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007404:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007408:	edd7 6a07 	vldr	s13, [r7, #28]
 800740c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007414:	ee17 2a90 	vmov	r2, s15
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800741c:	4b13      	ldr	r3, [pc, #76]	@ (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800741e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007420:	0e1b      	lsrs	r3, r3, #24
 8007422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007432:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007436:	edd7 6a07 	vldr	s13, [r7, #28]
 800743a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800743e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007442:	ee17 2a90 	vmov	r2, s15
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800744a:	e008      	b.n	800745e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	609a      	str	r2, [r3, #8]
}
 800745e:	bf00      	nop
 8007460:	3724      	adds	r7, #36	@ 0x24
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	58024400 	.word	0x58024400
 8007470:	03d09000 	.word	0x03d09000
 8007474:	46000000 	.word	0x46000000
 8007478:	4c742400 	.word	0x4c742400
 800747c:	4a742400 	.word	0x4a742400
 8007480:	4c371b00 	.word	0x4c371b00

08007484 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007492:	4b53      	ldr	r3, [pc, #332]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007496:	f003 0303 	and.w	r3, r3, #3
 800749a:	2b03      	cmp	r3, #3
 800749c:	d101      	bne.n	80074a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e099      	b.n	80075d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80074a2:	4b4f      	ldr	r3, [pc, #316]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a4e      	ldr	r2, [pc, #312]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80074a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ae:	f7fb f99d 	bl	80027ec <HAL_GetTick>
 80074b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074b4:	e008      	b.n	80074c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074b6:	f7fb f999 	bl	80027ec <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e086      	b.n	80075d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074c8:	4b45      	ldr	r3, [pc, #276]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1f0      	bne.n	80074b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80074d4:	4b42      	ldr	r3, [pc, #264]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80074d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	031b      	lsls	r3, r3, #12
 80074e2:	493f      	ldr	r1, [pc, #252]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	025b      	lsls	r3, r3, #9
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	3b01      	subs	r3, #1
 8007504:	041b      	lsls	r3, r3, #16
 8007506:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800750a:	431a      	orrs	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	3b01      	subs	r3, #1
 8007512:	061b      	lsls	r3, r3, #24
 8007514:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007518:	4931      	ldr	r1, [pc, #196]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800751a:	4313      	orrs	r3, r2
 800751c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800751e:	4b30      	ldr	r3, [pc, #192]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007522:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	492d      	ldr	r1, [pc, #180]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800752c:	4313      	orrs	r3, r2
 800752e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007530:	4b2b      	ldr	r3, [pc, #172]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007534:	f023 0220 	bic.w	r2, r3, #32
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	4928      	ldr	r1, [pc, #160]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800753e:	4313      	orrs	r3, r2
 8007540:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007542:	4b27      	ldr	r3, [pc, #156]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007546:	4a26      	ldr	r2, [pc, #152]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007548:	f023 0310 	bic.w	r3, r3, #16
 800754c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800754e:	4b24      	ldr	r3, [pc, #144]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007550:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007552:	4b24      	ldr	r3, [pc, #144]	@ (80075e4 <RCCEx_PLL2_Config+0x160>)
 8007554:	4013      	ands	r3, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	69d2      	ldr	r2, [r2, #28]
 800755a:	00d2      	lsls	r2, r2, #3
 800755c:	4920      	ldr	r1, [pc, #128]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800755e:	4313      	orrs	r3, r2
 8007560:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007562:	4b1f      	ldr	r3, [pc, #124]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007566:	4a1e      	ldr	r2, [pc, #120]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007568:	f043 0310 	orr.w	r3, r3, #16
 800756c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d106      	bne.n	8007582 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007574:	4b1a      	ldr	r3, [pc, #104]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007578:	4a19      	ldr	r2, [pc, #100]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800757a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800757e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007580:	e00f      	b.n	80075a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d106      	bne.n	8007596 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007588:	4b15      	ldr	r3, [pc, #84]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800758a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758c:	4a14      	ldr	r2, [pc, #80]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800758e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007592:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007594:	e005      	b.n	80075a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007596:	4b12      	ldr	r3, [pc, #72]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759a:	4a11      	ldr	r2, [pc, #68]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800759c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80075a2:	4b0f      	ldr	r3, [pc, #60]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a0e      	ldr	r2, [pc, #56]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80075a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ae:	f7fb f91d 	bl	80027ec <HAL_GetTick>
 80075b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075b4:	e008      	b.n	80075c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075b6:	f7fb f919 	bl	80027ec <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d901      	bls.n	80075c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e006      	b.n	80075d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075c8:	4b05      	ldr	r3, [pc, #20]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0f0      	beq.n	80075b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	58024400 	.word	0x58024400
 80075e4:	ffff0007 	.word	0xffff0007

080075e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075f6:	4b53      	ldr	r3, [pc, #332]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80075f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fa:	f003 0303 	and.w	r3, r3, #3
 80075fe:	2b03      	cmp	r3, #3
 8007600:	d101      	bne.n	8007606 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e099      	b.n	800773a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007606:	4b4f      	ldr	r3, [pc, #316]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a4e      	ldr	r2, [pc, #312]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 800760c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007612:	f7fb f8eb 	bl	80027ec <HAL_GetTick>
 8007616:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007618:	e008      	b.n	800762c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800761a:	f7fb f8e7 	bl	80027ec <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d901      	bls.n	800762c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e086      	b.n	800773a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800762c:	4b45      	ldr	r3, [pc, #276]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1f0      	bne.n	800761a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007638:	4b42      	ldr	r3, [pc, #264]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 800763a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	051b      	lsls	r3, r3, #20
 8007646:	493f      	ldr	r1, [pc, #252]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007648:	4313      	orrs	r3, r2
 800764a:	628b      	str	r3, [r1, #40]	@ 0x28
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	3b01      	subs	r3, #1
 8007652:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	3b01      	subs	r3, #1
 800765c:	025b      	lsls	r3, r3, #9
 800765e:	b29b      	uxth	r3, r3
 8007660:	431a      	orrs	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	3b01      	subs	r3, #1
 8007668:	041b      	lsls	r3, r3, #16
 800766a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800766e:	431a      	orrs	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	3b01      	subs	r3, #1
 8007676:	061b      	lsls	r3, r3, #24
 8007678:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800767c:	4931      	ldr	r1, [pc, #196]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 800767e:	4313      	orrs	r3, r2
 8007680:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007682:	4b30      	ldr	r3, [pc, #192]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007686:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	492d      	ldr	r1, [pc, #180]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007690:	4313      	orrs	r3, r2
 8007692:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007694:	4b2b      	ldr	r3, [pc, #172]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007698:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	4928      	ldr	r1, [pc, #160]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80076a6:	4b27      	ldr	r3, [pc, #156]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076aa:	4a26      	ldr	r2, [pc, #152]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076b2:	4b24      	ldr	r3, [pc, #144]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076b6:	4b24      	ldr	r3, [pc, #144]	@ (8007748 <RCCEx_PLL3_Config+0x160>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	69d2      	ldr	r2, [r2, #28]
 80076be:	00d2      	lsls	r2, r2, #3
 80076c0:	4920      	ldr	r1, [pc, #128]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80076c6:	4b1f      	ldr	r3, [pc, #124]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d106      	bne.n	80076e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80076d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076dc:	4a19      	ldr	r2, [pc, #100]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80076e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80076e4:	e00f      	b.n	8007706 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d106      	bne.n	80076fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80076ec:	4b15      	ldr	r3, [pc, #84]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f0:	4a14      	ldr	r2, [pc, #80]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80076f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80076f8:	e005      	b.n	8007706 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80076fa:	4b12      	ldr	r3, [pc, #72]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fe:	4a11      	ldr	r2, [pc, #68]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007700:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007704:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007706:	4b0f      	ldr	r3, [pc, #60]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a0e      	ldr	r2, [pc, #56]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 800770c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007712:	f7fb f86b 	bl	80027ec <HAL_GetTick>
 8007716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007718:	e008      	b.n	800772c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800771a:	f7fb f867 	bl	80027ec <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	2b02      	cmp	r3, #2
 8007726:	d901      	bls.n	800772c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e006      	b.n	800773a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800772c:	4b05      	ldr	r3, [pc, #20]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0f0      	beq.n	800771a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007738:	7bfb      	ldrb	r3, [r7, #15]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	58024400 	.word	0x58024400
 8007748:	ffff0007 	.word	0xffff0007

0800774c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d071      	beq.n	8007842 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d106      	bne.n	8007778 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7fa f9fc 	bl	8001b70 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	f003 0310 	and.w	r3, r3, #16
 800778a:	2b10      	cmp	r3, #16
 800778c:	d050      	beq.n	8007830 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	22ca      	movs	r2, #202	@ 0xca
 8007794:	625a      	str	r2, [r3, #36]	@ 0x24
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2253      	movs	r2, #83	@ 0x53
 800779c:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fa4a 	bl	8007c38 <RTC_EnterInitMode>
 80077a4:	4603      	mov	r3, r0
 80077a6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d124      	bne.n	80077f8 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6899      	ldr	r1, [r3, #8]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	4b24      	ldr	r3, [pc, #144]	@ (800784c <HAL_RTC_Init+0x100>)
 80077ba:	400b      	ands	r3, r1
 80077bc:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	6899      	ldr	r1, [r3, #8]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	431a      	orrs	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	431a      	orrs	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	0419      	lsls	r1, r3, #16
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fa56 	bl	8007ca0 <RTC_ExitInitMode>
 80077f4:	4603      	mov	r3, r0
 80077f6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d113      	bne.n	8007826 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f022 0203 	bic.w	r2, r2, #3
 800780c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	69da      	ldr	r2, [r3, #28]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	431a      	orrs	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	430a      	orrs	r2, r1
 8007824:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	22ff      	movs	r2, #255	@ 0xff
 800782c:	625a      	str	r2, [r3, #36]	@ 0x24
 800782e:	e001      	b.n	8007834 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d103      	bne.n	8007842 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8007842:	7bfb      	ldrb	r3, [r7, #15]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	ff8fffbf 	.word	0xff8fffbf

08007850 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007850:	b590      	push	{r4, r7, lr}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d101      	bne.n	800786a <HAL_RTC_SetTime+0x1a>
 8007866:	2302      	movs	r3, #2
 8007868:	e089      	b.n	800797e <HAL_RTC_SetTime+0x12e>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2202      	movs	r2, #2
 8007876:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	22ca      	movs	r2, #202	@ 0xca
 8007880:	625a      	str	r2, [r3, #36]	@ 0x24
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2253      	movs	r2, #83	@ 0x53
 8007888:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 f9d4 	bl	8007c38 <RTC_EnterInitMode>
 8007890:	4603      	mov	r3, r0
 8007892:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007894:	7cfb      	ldrb	r3, [r7, #19]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d161      	bne.n	800795e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d126      	bne.n	80078ee <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d102      	bne.n	80078b4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2200      	movs	r2, #0
 80078b2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 fa2f 	bl	8007d1c <RTC_ByteToBcd2>
 80078be:	4603      	mov	r3, r0
 80078c0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	785b      	ldrb	r3, [r3, #1]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 fa28 	bl	8007d1c <RTC_ByteToBcd2>
 80078cc:	4603      	mov	r3, r0
 80078ce:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80078d0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	789b      	ldrb	r3, [r3, #2]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 fa20 	bl	8007d1c <RTC_ByteToBcd2>
 80078dc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80078de:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	78db      	ldrb	r3, [r3, #3]
 80078e6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80078e8:	4313      	orrs	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]
 80078ec:	e018      	b.n	8007920 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d102      	bne.n	8007902 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2200      	movs	r2, #0
 8007900:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	785b      	ldrb	r3, [r3, #1]
 800790c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800790e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007914:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	78db      	ldrb	r3, [r3, #3]
 800791a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800791c:	4313      	orrs	r3, r2
 800791e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	6979      	ldr	r1, [r7, #20]
 8007926:	4b18      	ldr	r3, [pc, #96]	@ (8007988 <HAL_RTC_SetTime+0x138>)
 8007928:	400b      	ands	r3, r1
 800792a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	689a      	ldr	r2, [r3, #8]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800793a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6899      	ldr	r1, [r3, #8]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	431a      	orrs	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	430a      	orrs	r2, r1
 8007952:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f9a3 	bl	8007ca0 <RTC_ExitInitMode>
 800795a:	4603      	mov	r3, r0
 800795c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	22ff      	movs	r2, #255	@ 0xff
 8007964:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007966:	7cfb      	ldrb	r3, [r7, #19]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d103      	bne.n	8007974 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800797c:	7cfb      	ldrb	r3, [r7, #19]
}
 800797e:	4618      	mov	r0, r3
 8007980:	371c      	adds	r7, #28
 8007982:	46bd      	mov	sp, r7
 8007984:	bd90      	pop	{r4, r7, pc}
 8007986:	bf00      	nop
 8007988:	007f7f7f 	.word	0x007f7f7f

0800798c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	4b22      	ldr	r3, [pc, #136]	@ (8007a40 <HAL_RTC_GetTime+0xb4>)
 80079b8:	4013      	ands	r3, r2
 80079ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	0c1b      	lsrs	r3, r3, #16
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	0a1b      	lsrs	r3, r3, #8
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	0d9b      	lsrs	r3, r3, #22
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d11a      	bne.n	8007a36 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 f9a9 	bl	8007d5c <RTC_Bcd2ToByte>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	785b      	ldrb	r3, [r3, #1]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 f9a0 	bl	8007d5c <RTC_Bcd2ToByte>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	461a      	mov	r2, r3
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	789b      	ldrb	r3, [r3, #2]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 f997 	bl	8007d5c <RTC_Bcd2ToByte>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	461a      	mov	r2, r3
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	007f7f7f 	.word	0x007f7f7f

08007a44 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a44:	b590      	push	{r4, r7, lr}
 8007a46:	b087      	sub	sp, #28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d101      	bne.n	8007a5e <HAL_RTC_SetDate+0x1a>
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e073      	b.n	8007b46 <HAL_RTC_SetDate+0x102>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2202      	movs	r2, #2
 8007a6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10e      	bne.n	8007a92 <HAL_RTC_SetDate+0x4e>
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	785b      	ldrb	r3, [r3, #1]
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d008      	beq.n	8007a92 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	785b      	ldrb	r3, [r3, #1]
 8007a84:	f023 0310 	bic.w	r3, r3, #16
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	330a      	adds	r3, #10
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d11c      	bne.n	8007ad2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	78db      	ldrb	r3, [r3, #3]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 f93d 	bl	8007d1c <RTC_ByteToBcd2>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	785b      	ldrb	r3, [r3, #1]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 f936 	bl	8007d1c <RTC_ByteToBcd2>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007ab4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	789b      	ldrb	r3, [r3, #2]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 f92e 	bl	8007d1c <RTC_ByteToBcd2>
 8007ac0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007ac2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007acc:	4313      	orrs	r3, r2
 8007ace:	617b      	str	r3, [r7, #20]
 8007ad0:	e00e      	b.n	8007af0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	78db      	ldrb	r3, [r3, #3]
 8007ad6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	785b      	ldrb	r3, [r3, #1]
 8007adc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007ade:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007ae4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007aec:	4313      	orrs	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	22ca      	movs	r2, #202	@ 0xca
 8007af6:	625a      	str	r2, [r3, #36]	@ 0x24
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2253      	movs	r2, #83	@ 0x53
 8007afe:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 f899 	bl	8007c38 <RTC_EnterInitMode>
 8007b06:	4603      	mov	r3, r0
 8007b08:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007b0a:	7cfb      	ldrb	r3, [r7, #19]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10a      	bne.n	8007b26 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	6979      	ldr	r1, [r7, #20]
 8007b16:	4b0e      	ldr	r3, [pc, #56]	@ (8007b50 <HAL_RTC_SetDate+0x10c>)
 8007b18:	400b      	ands	r3, r1
 8007b1a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 f8bf 	bl	8007ca0 <RTC_ExitInitMode>
 8007b22:	4603      	mov	r3, r0
 8007b24:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	22ff      	movs	r2, #255	@ 0xff
 8007b2c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007b2e:	7cfb      	ldrb	r3, [r7, #19]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d103      	bne.n	8007b3c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007b44:	7cfb      	ldrb	r3, [r7, #19]


}
 8007b46:	4618      	mov	r0, r3
 8007b48:	371c      	adds	r7, #28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd90      	pop	{r4, r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	00ffff3f 	.word	0x00ffff3f

08007b54 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	4b21      	ldr	r3, [pc, #132]	@ (8007bec <HAL_RTC_GetDate+0x98>)
 8007b68:	4013      	ands	r3, r2
 8007b6a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	0c1b      	lsrs	r3, r3, #16
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	0a1b      	lsrs	r3, r3, #8
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	f003 031f 	and.w	r3, r3, #31
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	0b5b      	lsrs	r3, r3, #13
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	f003 0307 	and.w	r3, r3, #7
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d11a      	bne.n	8007be0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	78db      	ldrb	r3, [r3, #3]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 f8d4 	bl	8007d5c <RTC_Bcd2ToByte>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	785b      	ldrb	r3, [r3, #1]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 f8cb 	bl	8007d5c <RTC_Bcd2ToByte>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	461a      	mov	r2, r3
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	789b      	ldrb	r3, [r3, #2]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 f8c2 	bl	8007d5c <RTC_Bcd2ToByte>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	461a      	mov	r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	00ffff3f 	.word	0x00ffff3f

08007bf0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8007c34 <HAL_RTC_WaitForSynchro+0x44>)
 8007bfe:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8007c00:	f7fa fdf4 	bl	80027ec <HAL_GetTick>
 8007c04:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007c06:	e009      	b.n	8007c1c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c08:	f7fa fdf0 	bl	80027ec <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c16:	d901      	bls.n	8007c1c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e007      	b.n	8007c2c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d0ee      	beq.n	8007c08 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	0003ff5f 	.word	0x0003ff5f

08007c38 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c40:	2300      	movs	r3, #0
 8007c42:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d120      	bne.n	8007c94 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f04f 32ff 	mov.w	r2, #4294967295
 8007c5a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007c5c:	f7fa fdc6 	bl	80027ec <HAL_GetTick>
 8007c60:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007c62:	e00d      	b.n	8007c80 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007c64:	f7fa fdc2 	bl	80027ec <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c72:	d905      	bls.n	8007c80 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2203      	movs	r2, #3
 8007c7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d102      	bne.n	8007c94 <RTC_EnterInitMode+0x5c>
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d1e7      	bne.n	8007c64 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
	...

08007ca0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007cac:	4b1a      	ldr	r3, [pc, #104]	@ (8007d18 <RTC_ExitInitMode+0x78>)
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	4a19      	ldr	r2, [pc, #100]	@ (8007d18 <RTC_ExitInitMode+0x78>)
 8007cb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cb6:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007cb8:	4b17      	ldr	r3, [pc, #92]	@ (8007d18 <RTC_ExitInitMode+0x78>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f003 0320 	and.w	r3, r3, #32
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10c      	bne.n	8007cde <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7ff ff93 	bl	8007bf0 <HAL_RTC_WaitForSynchro>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d01e      	beq.n	8007d0e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2203      	movs	r2, #3
 8007cd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	73fb      	strb	r3, [r7, #15]
 8007cdc:	e017      	b.n	8007d0e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007cde:	4b0e      	ldr	r3, [pc, #56]	@ (8007d18 <RTC_ExitInitMode+0x78>)
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	4a0d      	ldr	r2, [pc, #52]	@ (8007d18 <RTC_ExitInitMode+0x78>)
 8007ce4:	f023 0320 	bic.w	r3, r3, #32
 8007ce8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff ff80 	bl	8007bf0 <HAL_RTC_WaitForSynchro>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d005      	beq.n	8007d02 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2203      	movs	r2, #3
 8007cfa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007d02:	4b05      	ldr	r3, [pc, #20]	@ (8007d18 <RTC_ExitInitMode+0x78>)
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	4a04      	ldr	r2, [pc, #16]	@ (8007d18 <RTC_ExitInitMode+0x78>)
 8007d08:	f043 0320 	orr.w	r3, r3, #32
 8007d0c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	58004000 	.word	0x58004000

08007d1c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8007d2e:	e005      	b.n	8007d3c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3301      	adds	r3, #1
 8007d34:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8007d36:	7afb      	ldrb	r3, [r7, #11]
 8007d38:	3b0a      	subs	r3, #10
 8007d3a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8007d3c:	7afb      	ldrb	r3, [r7, #11]
 8007d3e:	2b09      	cmp	r3, #9
 8007d40:	d8f6      	bhi.n	8007d30 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	011b      	lsls	r3, r3, #4
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	7afb      	ldrb	r3, [r7, #11]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	b2db      	uxtb	r3, r3
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007d66:	79fb      	ldrb	r3, [r7, #7]
 8007d68:	091b      	lsrs	r3, r3, #4
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	0092      	lsls	r2, r2, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007d76:	79fb      	ldrb	r3, [r7, #7]
 8007d78:	f003 030f 	and.w	r3, r3, #15
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
 8007d80:	4413      	add	r3, r2
 8007d82:	b2db      	uxtb	r3, r3
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e10f      	b.n	8007fc2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a87      	ldr	r2, [pc, #540]	@ (8007fcc <HAL_SPI_Init+0x23c>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d00f      	beq.n	8007dd2 <HAL_SPI_Init+0x42>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a86      	ldr	r2, [pc, #536]	@ (8007fd0 <HAL_SPI_Init+0x240>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d00a      	beq.n	8007dd2 <HAL_SPI_Init+0x42>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a84      	ldr	r2, [pc, #528]	@ (8007fd4 <HAL_SPI_Init+0x244>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d005      	beq.n	8007dd2 <HAL_SPI_Init+0x42>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	2b0f      	cmp	r3, #15
 8007dcc:	d901      	bls.n	8007dd2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e0f7      	b.n	8007fc2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f900 	bl	8007fd8 <SPI_GetPacketSize>
 8007dd8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a7b      	ldr	r2, [pc, #492]	@ (8007fcc <HAL_SPI_Init+0x23c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d00c      	beq.n	8007dfe <HAL_SPI_Init+0x6e>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a79      	ldr	r2, [pc, #484]	@ (8007fd0 <HAL_SPI_Init+0x240>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d007      	beq.n	8007dfe <HAL_SPI_Init+0x6e>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a78      	ldr	r2, [pc, #480]	@ (8007fd4 <HAL_SPI_Init+0x244>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d002      	beq.n	8007dfe <HAL_SPI_Init+0x6e>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b08      	cmp	r3, #8
 8007dfc:	d811      	bhi.n	8007e22 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e02:	4a72      	ldr	r2, [pc, #456]	@ (8007fcc <HAL_SPI_Init+0x23c>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d009      	beq.n	8007e1c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a70      	ldr	r2, [pc, #448]	@ (8007fd0 <HAL_SPI_Init+0x240>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d004      	beq.n	8007e1c <HAL_SPI_Init+0x8c>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a6f      	ldr	r2, [pc, #444]	@ (8007fd4 <HAL_SPI_Init+0x244>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d104      	bne.n	8007e26 <HAL_SPI_Init+0x96>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2b10      	cmp	r3, #16
 8007e20:	d901      	bls.n	8007e26 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e0cd      	b.n	8007fc2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d106      	bne.n	8007e40 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7f9 fecc 	bl	8001bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2202      	movs	r2, #2
 8007e44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f022 0201 	bic.w	r2, r2, #1
 8007e56:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007e62:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e6c:	d119      	bne.n	8007ea2 <HAL_SPI_Init+0x112>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e76:	d103      	bne.n	8007e80 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d008      	beq.n	8007e92 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10c      	bne.n	8007ea2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007e8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e90:	d107      	bne.n	8007ea2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007ea0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00f      	beq.n	8007ece <HAL_SPI_Init+0x13e>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	2b06      	cmp	r3, #6
 8007eb4:	d90b      	bls.n	8007ece <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	e007      	b.n	8007ede <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007edc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	69da      	ldr	r2, [r3, #28]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	431a      	orrs	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ef0:	ea42 0103 	orr.w	r1, r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	68da      	ldr	r2, [r3, #12]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	430a      	orrs	r2, r1
 8007efe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f08:	431a      	orrs	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	431a      	orrs	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	431a      	orrs	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	431a      	orrs	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f32:	431a      	orrs	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	431a      	orrs	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f3e:	ea42 0103 	orr.w	r1, r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d113      	bne.n	8007f7e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f68:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007f7c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f022 0201 	bic.w	r2, r2, #1
 8007f8c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00a      	beq.n	8007fb0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	40013000 	.word	0x40013000
 8007fd0:	40003800 	.word	0x40003800
 8007fd4:	40003c00 	.word	0x40003c00

08007fd8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe4:	095b      	lsrs	r3, r3, #5
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	3307      	adds	r3, #7
 8007ff6:	08db      	lsrs	r3, r3, #3
 8007ff8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	fb02 f303 	mul.w	r3, r2, r3
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b082      	sub	sp, #8
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d101      	bne.n	8008020 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e049      	b.n	80080b4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b00      	cmp	r3, #0
 800802a:	d106      	bne.n	800803a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f841 	bl	80080bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2202      	movs	r2, #2
 800803e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	3304      	adds	r3, #4
 800804a:	4619      	mov	r1, r3
 800804c:	4610      	mov	r0, r2
 800804e:	f000 f9f5 	bl	800843c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d001      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e05e      	b.n	80081a6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2202      	movs	r2, #2
 80080ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f042 0201 	orr.w	r2, r2, #1
 80080fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a2b      	ldr	r2, [pc, #172]	@ (80081b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d02c      	beq.n	8008164 <HAL_TIM_Base_Start_IT+0x94>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008112:	d027      	beq.n	8008164 <HAL_TIM_Base_Start_IT+0x94>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a27      	ldr	r2, [pc, #156]	@ (80081b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d022      	beq.n	8008164 <HAL_TIM_Base_Start_IT+0x94>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a26      	ldr	r2, [pc, #152]	@ (80081bc <HAL_TIM_Base_Start_IT+0xec>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d01d      	beq.n	8008164 <HAL_TIM_Base_Start_IT+0x94>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a24      	ldr	r2, [pc, #144]	@ (80081c0 <HAL_TIM_Base_Start_IT+0xf0>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d018      	beq.n	8008164 <HAL_TIM_Base_Start_IT+0x94>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a23      	ldr	r2, [pc, #140]	@ (80081c4 <HAL_TIM_Base_Start_IT+0xf4>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d013      	beq.n	8008164 <HAL_TIM_Base_Start_IT+0x94>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a21      	ldr	r2, [pc, #132]	@ (80081c8 <HAL_TIM_Base_Start_IT+0xf8>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d00e      	beq.n	8008164 <HAL_TIM_Base_Start_IT+0x94>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a20      	ldr	r2, [pc, #128]	@ (80081cc <HAL_TIM_Base_Start_IT+0xfc>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d009      	beq.n	8008164 <HAL_TIM_Base_Start_IT+0x94>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a1e      	ldr	r2, [pc, #120]	@ (80081d0 <HAL_TIM_Base_Start_IT+0x100>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d004      	beq.n	8008164 <HAL_TIM_Base_Start_IT+0x94>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a1d      	ldr	r2, [pc, #116]	@ (80081d4 <HAL_TIM_Base_Start_IT+0x104>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d115      	bne.n	8008190 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689a      	ldr	r2, [r3, #8]
 800816a:	4b1b      	ldr	r3, [pc, #108]	@ (80081d8 <HAL_TIM_Base_Start_IT+0x108>)
 800816c:	4013      	ands	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b06      	cmp	r3, #6
 8008174:	d015      	beq.n	80081a2 <HAL_TIM_Base_Start_IT+0xd2>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800817c:	d011      	beq.n	80081a2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f042 0201 	orr.w	r2, r2, #1
 800818c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800818e:	e008      	b.n	80081a2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0201 	orr.w	r2, r2, #1
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	e000      	b.n	80081a4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	40010000 	.word	0x40010000
 80081b8:	40000400 	.word	0x40000400
 80081bc:	40000800 	.word	0x40000800
 80081c0:	40000c00 	.word	0x40000c00
 80081c4:	40010400 	.word	0x40010400
 80081c8:	40001800 	.word	0x40001800
 80081cc:	40014000 	.word	0x40014000
 80081d0:	4000e000 	.word	0x4000e000
 80081d4:	4000e400 	.word	0x4000e400
 80081d8:	00010007 	.word	0x00010007

080081dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f003 0302 	and.w	r3, r3, #2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d020      	beq.n	8008240 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f003 0302 	and.w	r3, r3, #2
 8008204:	2b00      	cmp	r3, #0
 8008206:	d01b      	beq.n	8008240 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f06f 0202 	mvn.w	r2, #2
 8008210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	f003 0303 	and.w	r3, r3, #3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f8e9 	bl	80083fe <HAL_TIM_IC_CaptureCallback>
 800822c:	e005      	b.n	800823a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f8db 	bl	80083ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f8ec 	bl	8008412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f003 0304 	and.w	r3, r3, #4
 8008246:	2b00      	cmp	r3, #0
 8008248:	d020      	beq.n	800828c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f003 0304 	and.w	r3, r3, #4
 8008250:	2b00      	cmp	r3, #0
 8008252:	d01b      	beq.n	800828c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f06f 0204 	mvn.w	r2, #4
 800825c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2202      	movs	r2, #2
 8008262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800826e:	2b00      	cmp	r3, #0
 8008270:	d003      	beq.n	800827a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f8c3 	bl	80083fe <HAL_TIM_IC_CaptureCallback>
 8008278:	e005      	b.n	8008286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f8b5 	bl	80083ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f8c6 	bl	8008412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f003 0308 	and.w	r3, r3, #8
 8008292:	2b00      	cmp	r3, #0
 8008294:	d020      	beq.n	80082d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f003 0308 	and.w	r3, r3, #8
 800829c:	2b00      	cmp	r3, #0
 800829e:	d01b      	beq.n	80082d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f06f 0208 	mvn.w	r2, #8
 80082a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2204      	movs	r2, #4
 80082ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	f003 0303 	and.w	r3, r3, #3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d003      	beq.n	80082c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f89d 	bl	80083fe <HAL_TIM_IC_CaptureCallback>
 80082c4:	e005      	b.n	80082d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f88f 	bl	80083ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f8a0 	bl	8008412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	f003 0310 	and.w	r3, r3, #16
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d020      	beq.n	8008324 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f003 0310 	and.w	r3, r3, #16
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d01b      	beq.n	8008324 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f06f 0210 	mvn.w	r2, #16
 80082f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2208      	movs	r2, #8
 80082fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f877 	bl	80083fe <HAL_TIM_IC_CaptureCallback>
 8008310:	e005      	b.n	800831e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f869 	bl	80083ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f87a 	bl	8008412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00c      	beq.n	8008348 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f003 0301 	and.w	r3, r3, #1
 8008334:	2b00      	cmp	r3, #0
 8008336:	d007      	beq.n	8008348 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f06f 0201 	mvn.w	r2, #1
 8008340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f7f9 fb10 	bl	8001968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800834e:	2b00      	cmp	r3, #0
 8008350:	d104      	bne.n	800835c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00c      	beq.n	8008376 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008362:	2b00      	cmp	r3, #0
 8008364:	d007      	beq.n	8008376 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800836e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f919 	bl	80085a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00c      	beq.n	800839a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008386:	2b00      	cmp	r3, #0
 8008388:	d007      	beq.n	800839a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f911 	bl	80085bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00c      	beq.n	80083be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d007      	beq.n	80083be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80083b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f834 	bl	8008426 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f003 0320 	and.w	r3, r3, #32
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00c      	beq.n	80083e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f003 0320 	and.w	r3, r3, #32
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d007      	beq.n	80083e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f06f 0220 	mvn.w	r2, #32
 80083da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f8d9 	bl	8008594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083e2:	bf00      	nop
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b083      	sub	sp, #12
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083f2:	bf00      	nop
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083fe:	b480      	push	{r7}
 8008400:	b083      	sub	sp, #12
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008406:	bf00      	nop
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008412:	b480      	push	{r7}
 8008414:	b083      	sub	sp, #12
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800841a:	bf00      	nop
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008426:	b480      	push	{r7}
 8008428:	b083      	sub	sp, #12
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800842e:	bf00      	nop
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
	...

0800843c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a47      	ldr	r2, [pc, #284]	@ (800856c <TIM_Base_SetConfig+0x130>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d013      	beq.n	800847c <TIM_Base_SetConfig+0x40>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800845a:	d00f      	beq.n	800847c <TIM_Base_SetConfig+0x40>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a44      	ldr	r2, [pc, #272]	@ (8008570 <TIM_Base_SetConfig+0x134>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d00b      	beq.n	800847c <TIM_Base_SetConfig+0x40>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a43      	ldr	r2, [pc, #268]	@ (8008574 <TIM_Base_SetConfig+0x138>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d007      	beq.n	800847c <TIM_Base_SetConfig+0x40>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a42      	ldr	r2, [pc, #264]	@ (8008578 <TIM_Base_SetConfig+0x13c>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d003      	beq.n	800847c <TIM_Base_SetConfig+0x40>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a41      	ldr	r2, [pc, #260]	@ (800857c <TIM_Base_SetConfig+0x140>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d108      	bne.n	800848e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a36      	ldr	r2, [pc, #216]	@ (800856c <TIM_Base_SetConfig+0x130>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d027      	beq.n	80084e6 <TIM_Base_SetConfig+0xaa>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800849c:	d023      	beq.n	80084e6 <TIM_Base_SetConfig+0xaa>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a33      	ldr	r2, [pc, #204]	@ (8008570 <TIM_Base_SetConfig+0x134>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d01f      	beq.n	80084e6 <TIM_Base_SetConfig+0xaa>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a32      	ldr	r2, [pc, #200]	@ (8008574 <TIM_Base_SetConfig+0x138>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d01b      	beq.n	80084e6 <TIM_Base_SetConfig+0xaa>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a31      	ldr	r2, [pc, #196]	@ (8008578 <TIM_Base_SetConfig+0x13c>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d017      	beq.n	80084e6 <TIM_Base_SetConfig+0xaa>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a30      	ldr	r2, [pc, #192]	@ (800857c <TIM_Base_SetConfig+0x140>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d013      	beq.n	80084e6 <TIM_Base_SetConfig+0xaa>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a2f      	ldr	r2, [pc, #188]	@ (8008580 <TIM_Base_SetConfig+0x144>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d00f      	beq.n	80084e6 <TIM_Base_SetConfig+0xaa>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a2e      	ldr	r2, [pc, #184]	@ (8008584 <TIM_Base_SetConfig+0x148>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d00b      	beq.n	80084e6 <TIM_Base_SetConfig+0xaa>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008588 <TIM_Base_SetConfig+0x14c>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d007      	beq.n	80084e6 <TIM_Base_SetConfig+0xaa>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a2c      	ldr	r2, [pc, #176]	@ (800858c <TIM_Base_SetConfig+0x150>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d003      	beq.n	80084e6 <TIM_Base_SetConfig+0xaa>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a2b      	ldr	r2, [pc, #172]	@ (8008590 <TIM_Base_SetConfig+0x154>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d108      	bne.n	80084f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	4313      	orrs	r3, r2
 8008504:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	689a      	ldr	r2, [r3, #8]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a14      	ldr	r2, [pc, #80]	@ (800856c <TIM_Base_SetConfig+0x130>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d00f      	beq.n	800853e <TIM_Base_SetConfig+0x102>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a16      	ldr	r2, [pc, #88]	@ (800857c <TIM_Base_SetConfig+0x140>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d00b      	beq.n	800853e <TIM_Base_SetConfig+0x102>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a15      	ldr	r2, [pc, #84]	@ (8008580 <TIM_Base_SetConfig+0x144>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d007      	beq.n	800853e <TIM_Base_SetConfig+0x102>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a14      	ldr	r2, [pc, #80]	@ (8008584 <TIM_Base_SetConfig+0x148>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d003      	beq.n	800853e <TIM_Base_SetConfig+0x102>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a13      	ldr	r2, [pc, #76]	@ (8008588 <TIM_Base_SetConfig+0x14c>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d103      	bne.n	8008546 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	691a      	ldr	r2, [r3, #16]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f043 0204 	orr.w	r2, r3, #4
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	601a      	str	r2, [r3, #0]
}
 800855e:	bf00      	nop
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	40010000 	.word	0x40010000
 8008570:	40000400 	.word	0x40000400
 8008574:	40000800 	.word	0x40000800
 8008578:	40000c00 	.word	0x40000c00
 800857c:	40010400 	.word	0x40010400
 8008580:	40014000 	.word	0x40014000
 8008584:	40014400 	.word	0x40014400
 8008588:	40014800 	.word	0x40014800
 800858c:	4000e000 	.word	0x4000e000
 8008590:	4000e400 	.word	0x4000e400

08008594 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d101      	bne.n	80085e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e042      	b.n	8008668 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d106      	bne.n	80085fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7f9 fd09 	bl	800200c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2224      	movs	r2, #36	@ 0x24
 80085fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f022 0201 	bic.w	r2, r2, #1
 8008610:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fe94 	bl	8009348 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f825 	bl	8008670 <UART_SetConfig>
 8008626:	4603      	mov	r3, r0
 8008628:	2b01      	cmp	r3, #1
 800862a:	d101      	bne.n	8008630 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e01b      	b.n	8008668 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800863e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689a      	ldr	r2, [r3, #8]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800864e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f042 0201 	orr.w	r2, r2, #1
 800865e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 ff13 	bl	800948c <UART_CheckIdleState>
 8008666:	4603      	mov	r3, r0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008674:	b092      	sub	sp, #72	@ 0x48
 8008676:	af00      	add	r7, sp, #0
 8008678:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	689a      	ldr	r2, [r3, #8]
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	431a      	orrs	r2, r3
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	431a      	orrs	r2, r3
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	69db      	ldr	r3, [r3, #28]
 8008694:	4313      	orrs	r3, r2
 8008696:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	4bbe      	ldr	r3, [pc, #760]	@ (8008998 <UART_SetConfig+0x328>)
 80086a0:	4013      	ands	r3, r2
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	6812      	ldr	r2, [r2, #0]
 80086a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80086a8:	430b      	orrs	r3, r1
 80086aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4ab3      	ldr	r2, [pc, #716]	@ (800899c <UART_SetConfig+0x32c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d004      	beq.n	80086dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086d8:	4313      	orrs	r3, r2
 80086da:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	689a      	ldr	r2, [r3, #8]
 80086e2:	4baf      	ldr	r3, [pc, #700]	@ (80089a0 <UART_SetConfig+0x330>)
 80086e4:	4013      	ands	r3, r2
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	6812      	ldr	r2, [r2, #0]
 80086ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80086ec:	430b      	orrs	r3, r1
 80086ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f6:	f023 010f 	bic.w	r1, r3, #15
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4aa6      	ldr	r2, [pc, #664]	@ (80089a4 <UART_SetConfig+0x334>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d177      	bne.n	8008800 <UART_SetConfig+0x190>
 8008710:	4ba5      	ldr	r3, [pc, #660]	@ (80089a8 <UART_SetConfig+0x338>)
 8008712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008714:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008718:	2b28      	cmp	r3, #40	@ 0x28
 800871a:	d86d      	bhi.n	80087f8 <UART_SetConfig+0x188>
 800871c:	a201      	add	r2, pc, #4	@ (adr r2, 8008724 <UART_SetConfig+0xb4>)
 800871e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008722:	bf00      	nop
 8008724:	080087c9 	.word	0x080087c9
 8008728:	080087f9 	.word	0x080087f9
 800872c:	080087f9 	.word	0x080087f9
 8008730:	080087f9 	.word	0x080087f9
 8008734:	080087f9 	.word	0x080087f9
 8008738:	080087f9 	.word	0x080087f9
 800873c:	080087f9 	.word	0x080087f9
 8008740:	080087f9 	.word	0x080087f9
 8008744:	080087d1 	.word	0x080087d1
 8008748:	080087f9 	.word	0x080087f9
 800874c:	080087f9 	.word	0x080087f9
 8008750:	080087f9 	.word	0x080087f9
 8008754:	080087f9 	.word	0x080087f9
 8008758:	080087f9 	.word	0x080087f9
 800875c:	080087f9 	.word	0x080087f9
 8008760:	080087f9 	.word	0x080087f9
 8008764:	080087d9 	.word	0x080087d9
 8008768:	080087f9 	.word	0x080087f9
 800876c:	080087f9 	.word	0x080087f9
 8008770:	080087f9 	.word	0x080087f9
 8008774:	080087f9 	.word	0x080087f9
 8008778:	080087f9 	.word	0x080087f9
 800877c:	080087f9 	.word	0x080087f9
 8008780:	080087f9 	.word	0x080087f9
 8008784:	080087e1 	.word	0x080087e1
 8008788:	080087f9 	.word	0x080087f9
 800878c:	080087f9 	.word	0x080087f9
 8008790:	080087f9 	.word	0x080087f9
 8008794:	080087f9 	.word	0x080087f9
 8008798:	080087f9 	.word	0x080087f9
 800879c:	080087f9 	.word	0x080087f9
 80087a0:	080087f9 	.word	0x080087f9
 80087a4:	080087e9 	.word	0x080087e9
 80087a8:	080087f9 	.word	0x080087f9
 80087ac:	080087f9 	.word	0x080087f9
 80087b0:	080087f9 	.word	0x080087f9
 80087b4:	080087f9 	.word	0x080087f9
 80087b8:	080087f9 	.word	0x080087f9
 80087bc:	080087f9 	.word	0x080087f9
 80087c0:	080087f9 	.word	0x080087f9
 80087c4:	080087f1 	.word	0x080087f1
 80087c8:	2301      	movs	r3, #1
 80087ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ce:	e326      	b.n	8008e1e <UART_SetConfig+0x7ae>
 80087d0:	2304      	movs	r3, #4
 80087d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087d6:	e322      	b.n	8008e1e <UART_SetConfig+0x7ae>
 80087d8:	2308      	movs	r3, #8
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087de:	e31e      	b.n	8008e1e <UART_SetConfig+0x7ae>
 80087e0:	2310      	movs	r3, #16
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e6:	e31a      	b.n	8008e1e <UART_SetConfig+0x7ae>
 80087e8:	2320      	movs	r3, #32
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ee:	e316      	b.n	8008e1e <UART_SetConfig+0x7ae>
 80087f0:	2340      	movs	r3, #64	@ 0x40
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f6:	e312      	b.n	8008e1e <UART_SetConfig+0x7ae>
 80087f8:	2380      	movs	r3, #128	@ 0x80
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087fe:	e30e      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a69      	ldr	r2, [pc, #420]	@ (80089ac <UART_SetConfig+0x33c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d130      	bne.n	800886c <UART_SetConfig+0x1fc>
 800880a:	4b67      	ldr	r3, [pc, #412]	@ (80089a8 <UART_SetConfig+0x338>)
 800880c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800880e:	f003 0307 	and.w	r3, r3, #7
 8008812:	2b05      	cmp	r3, #5
 8008814:	d826      	bhi.n	8008864 <UART_SetConfig+0x1f4>
 8008816:	a201      	add	r2, pc, #4	@ (adr r2, 800881c <UART_SetConfig+0x1ac>)
 8008818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881c:	08008835 	.word	0x08008835
 8008820:	0800883d 	.word	0x0800883d
 8008824:	08008845 	.word	0x08008845
 8008828:	0800884d 	.word	0x0800884d
 800882c:	08008855 	.word	0x08008855
 8008830:	0800885d 	.word	0x0800885d
 8008834:	2300      	movs	r3, #0
 8008836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800883a:	e2f0      	b.n	8008e1e <UART_SetConfig+0x7ae>
 800883c:	2304      	movs	r3, #4
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008842:	e2ec      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008844:	2308      	movs	r3, #8
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800884a:	e2e8      	b.n	8008e1e <UART_SetConfig+0x7ae>
 800884c:	2310      	movs	r3, #16
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008852:	e2e4      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008854:	2320      	movs	r3, #32
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800885a:	e2e0      	b.n	8008e1e <UART_SetConfig+0x7ae>
 800885c:	2340      	movs	r3, #64	@ 0x40
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008862:	e2dc      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008864:	2380      	movs	r3, #128	@ 0x80
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800886a:	e2d8      	b.n	8008e1e <UART_SetConfig+0x7ae>
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a4f      	ldr	r2, [pc, #316]	@ (80089b0 <UART_SetConfig+0x340>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d130      	bne.n	80088d8 <UART_SetConfig+0x268>
 8008876:	4b4c      	ldr	r3, [pc, #304]	@ (80089a8 <UART_SetConfig+0x338>)
 8008878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800887a:	f003 0307 	and.w	r3, r3, #7
 800887e:	2b05      	cmp	r3, #5
 8008880:	d826      	bhi.n	80088d0 <UART_SetConfig+0x260>
 8008882:	a201      	add	r2, pc, #4	@ (adr r2, 8008888 <UART_SetConfig+0x218>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088a1 	.word	0x080088a1
 800888c:	080088a9 	.word	0x080088a9
 8008890:	080088b1 	.word	0x080088b1
 8008894:	080088b9 	.word	0x080088b9
 8008898:	080088c1 	.word	0x080088c1
 800889c:	080088c9 	.word	0x080088c9
 80088a0:	2300      	movs	r3, #0
 80088a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088a6:	e2ba      	b.n	8008e1e <UART_SetConfig+0x7ae>
 80088a8:	2304      	movs	r3, #4
 80088aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ae:	e2b6      	b.n	8008e1e <UART_SetConfig+0x7ae>
 80088b0:	2308      	movs	r3, #8
 80088b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088b6:	e2b2      	b.n	8008e1e <UART_SetConfig+0x7ae>
 80088b8:	2310      	movs	r3, #16
 80088ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088be:	e2ae      	b.n	8008e1e <UART_SetConfig+0x7ae>
 80088c0:	2320      	movs	r3, #32
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088c6:	e2aa      	b.n	8008e1e <UART_SetConfig+0x7ae>
 80088c8:	2340      	movs	r3, #64	@ 0x40
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ce:	e2a6      	b.n	8008e1e <UART_SetConfig+0x7ae>
 80088d0:	2380      	movs	r3, #128	@ 0x80
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d6:	e2a2      	b.n	8008e1e <UART_SetConfig+0x7ae>
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a35      	ldr	r2, [pc, #212]	@ (80089b4 <UART_SetConfig+0x344>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d130      	bne.n	8008944 <UART_SetConfig+0x2d4>
 80088e2:	4b31      	ldr	r3, [pc, #196]	@ (80089a8 <UART_SetConfig+0x338>)
 80088e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088e6:	f003 0307 	and.w	r3, r3, #7
 80088ea:	2b05      	cmp	r3, #5
 80088ec:	d826      	bhi.n	800893c <UART_SetConfig+0x2cc>
 80088ee:	a201      	add	r2, pc, #4	@ (adr r2, 80088f4 <UART_SetConfig+0x284>)
 80088f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f4:	0800890d 	.word	0x0800890d
 80088f8:	08008915 	.word	0x08008915
 80088fc:	0800891d 	.word	0x0800891d
 8008900:	08008925 	.word	0x08008925
 8008904:	0800892d 	.word	0x0800892d
 8008908:	08008935 	.word	0x08008935
 800890c:	2300      	movs	r3, #0
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008912:	e284      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008914:	2304      	movs	r3, #4
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800891a:	e280      	b.n	8008e1e <UART_SetConfig+0x7ae>
 800891c:	2308      	movs	r3, #8
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008922:	e27c      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008924:	2310      	movs	r3, #16
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800892a:	e278      	b.n	8008e1e <UART_SetConfig+0x7ae>
 800892c:	2320      	movs	r3, #32
 800892e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008932:	e274      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008934:	2340      	movs	r3, #64	@ 0x40
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893a:	e270      	b.n	8008e1e <UART_SetConfig+0x7ae>
 800893c:	2380      	movs	r3, #128	@ 0x80
 800893e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008942:	e26c      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a1b      	ldr	r2, [pc, #108]	@ (80089b8 <UART_SetConfig+0x348>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d142      	bne.n	80089d4 <UART_SetConfig+0x364>
 800894e:	4b16      	ldr	r3, [pc, #88]	@ (80089a8 <UART_SetConfig+0x338>)
 8008950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	2b05      	cmp	r3, #5
 8008958:	d838      	bhi.n	80089cc <UART_SetConfig+0x35c>
 800895a:	a201      	add	r2, pc, #4	@ (adr r2, 8008960 <UART_SetConfig+0x2f0>)
 800895c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008960:	08008979 	.word	0x08008979
 8008964:	08008981 	.word	0x08008981
 8008968:	08008989 	.word	0x08008989
 800896c:	08008991 	.word	0x08008991
 8008970:	080089bd 	.word	0x080089bd
 8008974:	080089c5 	.word	0x080089c5
 8008978:	2300      	movs	r3, #0
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800897e:	e24e      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008980:	2304      	movs	r3, #4
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008986:	e24a      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008988:	2308      	movs	r3, #8
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800898e:	e246      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008990:	2310      	movs	r3, #16
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008996:	e242      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008998:	cfff69f3 	.word	0xcfff69f3
 800899c:	58000c00 	.word	0x58000c00
 80089a0:	11fff4ff 	.word	0x11fff4ff
 80089a4:	40011000 	.word	0x40011000
 80089a8:	58024400 	.word	0x58024400
 80089ac:	40004400 	.word	0x40004400
 80089b0:	40004800 	.word	0x40004800
 80089b4:	40004c00 	.word	0x40004c00
 80089b8:	40005000 	.word	0x40005000
 80089bc:	2320      	movs	r3, #32
 80089be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c2:	e22c      	b.n	8008e1e <UART_SetConfig+0x7ae>
 80089c4:	2340      	movs	r3, #64	@ 0x40
 80089c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ca:	e228      	b.n	8008e1e <UART_SetConfig+0x7ae>
 80089cc:	2380      	movs	r3, #128	@ 0x80
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d2:	e224      	b.n	8008e1e <UART_SetConfig+0x7ae>
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4ab1      	ldr	r2, [pc, #708]	@ (8008ca0 <UART_SetConfig+0x630>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d176      	bne.n	8008acc <UART_SetConfig+0x45c>
 80089de:	4bb1      	ldr	r3, [pc, #708]	@ (8008ca4 <UART_SetConfig+0x634>)
 80089e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089e6:	2b28      	cmp	r3, #40	@ 0x28
 80089e8:	d86c      	bhi.n	8008ac4 <UART_SetConfig+0x454>
 80089ea:	a201      	add	r2, pc, #4	@ (adr r2, 80089f0 <UART_SetConfig+0x380>)
 80089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f0:	08008a95 	.word	0x08008a95
 80089f4:	08008ac5 	.word	0x08008ac5
 80089f8:	08008ac5 	.word	0x08008ac5
 80089fc:	08008ac5 	.word	0x08008ac5
 8008a00:	08008ac5 	.word	0x08008ac5
 8008a04:	08008ac5 	.word	0x08008ac5
 8008a08:	08008ac5 	.word	0x08008ac5
 8008a0c:	08008ac5 	.word	0x08008ac5
 8008a10:	08008a9d 	.word	0x08008a9d
 8008a14:	08008ac5 	.word	0x08008ac5
 8008a18:	08008ac5 	.word	0x08008ac5
 8008a1c:	08008ac5 	.word	0x08008ac5
 8008a20:	08008ac5 	.word	0x08008ac5
 8008a24:	08008ac5 	.word	0x08008ac5
 8008a28:	08008ac5 	.word	0x08008ac5
 8008a2c:	08008ac5 	.word	0x08008ac5
 8008a30:	08008aa5 	.word	0x08008aa5
 8008a34:	08008ac5 	.word	0x08008ac5
 8008a38:	08008ac5 	.word	0x08008ac5
 8008a3c:	08008ac5 	.word	0x08008ac5
 8008a40:	08008ac5 	.word	0x08008ac5
 8008a44:	08008ac5 	.word	0x08008ac5
 8008a48:	08008ac5 	.word	0x08008ac5
 8008a4c:	08008ac5 	.word	0x08008ac5
 8008a50:	08008aad 	.word	0x08008aad
 8008a54:	08008ac5 	.word	0x08008ac5
 8008a58:	08008ac5 	.word	0x08008ac5
 8008a5c:	08008ac5 	.word	0x08008ac5
 8008a60:	08008ac5 	.word	0x08008ac5
 8008a64:	08008ac5 	.word	0x08008ac5
 8008a68:	08008ac5 	.word	0x08008ac5
 8008a6c:	08008ac5 	.word	0x08008ac5
 8008a70:	08008ab5 	.word	0x08008ab5
 8008a74:	08008ac5 	.word	0x08008ac5
 8008a78:	08008ac5 	.word	0x08008ac5
 8008a7c:	08008ac5 	.word	0x08008ac5
 8008a80:	08008ac5 	.word	0x08008ac5
 8008a84:	08008ac5 	.word	0x08008ac5
 8008a88:	08008ac5 	.word	0x08008ac5
 8008a8c:	08008ac5 	.word	0x08008ac5
 8008a90:	08008abd 	.word	0x08008abd
 8008a94:	2301      	movs	r3, #1
 8008a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a9a:	e1c0      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008a9c:	2304      	movs	r3, #4
 8008a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aa2:	e1bc      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008aa4:	2308      	movs	r3, #8
 8008aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aaa:	e1b8      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008aac:	2310      	movs	r3, #16
 8008aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ab2:	e1b4      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008ab4:	2320      	movs	r3, #32
 8008ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aba:	e1b0      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008abc:	2340      	movs	r3, #64	@ 0x40
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ac2:	e1ac      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008ac4:	2380      	movs	r3, #128	@ 0x80
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aca:	e1a8      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a75      	ldr	r2, [pc, #468]	@ (8008ca8 <UART_SetConfig+0x638>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d130      	bne.n	8008b38 <UART_SetConfig+0x4c8>
 8008ad6:	4b73      	ldr	r3, [pc, #460]	@ (8008ca4 <UART_SetConfig+0x634>)
 8008ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ada:	f003 0307 	and.w	r3, r3, #7
 8008ade:	2b05      	cmp	r3, #5
 8008ae0:	d826      	bhi.n	8008b30 <UART_SetConfig+0x4c0>
 8008ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ae8 <UART_SetConfig+0x478>)
 8008ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae8:	08008b01 	.word	0x08008b01
 8008aec:	08008b09 	.word	0x08008b09
 8008af0:	08008b11 	.word	0x08008b11
 8008af4:	08008b19 	.word	0x08008b19
 8008af8:	08008b21 	.word	0x08008b21
 8008afc:	08008b29 	.word	0x08008b29
 8008b00:	2300      	movs	r3, #0
 8008b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b06:	e18a      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008b08:	2304      	movs	r3, #4
 8008b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b0e:	e186      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008b10:	2308      	movs	r3, #8
 8008b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b16:	e182      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008b18:	2310      	movs	r3, #16
 8008b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b1e:	e17e      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008b20:	2320      	movs	r3, #32
 8008b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b26:	e17a      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008b28:	2340      	movs	r3, #64	@ 0x40
 8008b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b2e:	e176      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008b30:	2380      	movs	r3, #128	@ 0x80
 8008b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b36:	e172      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a5b      	ldr	r2, [pc, #364]	@ (8008cac <UART_SetConfig+0x63c>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d130      	bne.n	8008ba4 <UART_SetConfig+0x534>
 8008b42:	4b58      	ldr	r3, [pc, #352]	@ (8008ca4 <UART_SetConfig+0x634>)
 8008b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	2b05      	cmp	r3, #5
 8008b4c:	d826      	bhi.n	8008b9c <UART_SetConfig+0x52c>
 8008b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b54 <UART_SetConfig+0x4e4>)
 8008b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b54:	08008b6d 	.word	0x08008b6d
 8008b58:	08008b75 	.word	0x08008b75
 8008b5c:	08008b7d 	.word	0x08008b7d
 8008b60:	08008b85 	.word	0x08008b85
 8008b64:	08008b8d 	.word	0x08008b8d
 8008b68:	08008b95 	.word	0x08008b95
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b72:	e154      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008b74:	2304      	movs	r3, #4
 8008b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b7a:	e150      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008b7c:	2308      	movs	r3, #8
 8008b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b82:	e14c      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008b84:	2310      	movs	r3, #16
 8008b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8a:	e148      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008b8c:	2320      	movs	r3, #32
 8008b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b92:	e144      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008b94:	2340      	movs	r3, #64	@ 0x40
 8008b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b9a:	e140      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008b9c:	2380      	movs	r3, #128	@ 0x80
 8008b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba2:	e13c      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a41      	ldr	r2, [pc, #260]	@ (8008cb0 <UART_SetConfig+0x640>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	f040 8082 	bne.w	8008cb4 <UART_SetConfig+0x644>
 8008bb0:	4b3c      	ldr	r3, [pc, #240]	@ (8008ca4 <UART_SetConfig+0x634>)
 8008bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bb8:	2b28      	cmp	r3, #40	@ 0x28
 8008bba:	d86d      	bhi.n	8008c98 <UART_SetConfig+0x628>
 8008bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc4 <UART_SetConfig+0x554>)
 8008bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc2:	bf00      	nop
 8008bc4:	08008c69 	.word	0x08008c69
 8008bc8:	08008c99 	.word	0x08008c99
 8008bcc:	08008c99 	.word	0x08008c99
 8008bd0:	08008c99 	.word	0x08008c99
 8008bd4:	08008c99 	.word	0x08008c99
 8008bd8:	08008c99 	.word	0x08008c99
 8008bdc:	08008c99 	.word	0x08008c99
 8008be0:	08008c99 	.word	0x08008c99
 8008be4:	08008c71 	.word	0x08008c71
 8008be8:	08008c99 	.word	0x08008c99
 8008bec:	08008c99 	.word	0x08008c99
 8008bf0:	08008c99 	.word	0x08008c99
 8008bf4:	08008c99 	.word	0x08008c99
 8008bf8:	08008c99 	.word	0x08008c99
 8008bfc:	08008c99 	.word	0x08008c99
 8008c00:	08008c99 	.word	0x08008c99
 8008c04:	08008c79 	.word	0x08008c79
 8008c08:	08008c99 	.word	0x08008c99
 8008c0c:	08008c99 	.word	0x08008c99
 8008c10:	08008c99 	.word	0x08008c99
 8008c14:	08008c99 	.word	0x08008c99
 8008c18:	08008c99 	.word	0x08008c99
 8008c1c:	08008c99 	.word	0x08008c99
 8008c20:	08008c99 	.word	0x08008c99
 8008c24:	08008c81 	.word	0x08008c81
 8008c28:	08008c99 	.word	0x08008c99
 8008c2c:	08008c99 	.word	0x08008c99
 8008c30:	08008c99 	.word	0x08008c99
 8008c34:	08008c99 	.word	0x08008c99
 8008c38:	08008c99 	.word	0x08008c99
 8008c3c:	08008c99 	.word	0x08008c99
 8008c40:	08008c99 	.word	0x08008c99
 8008c44:	08008c89 	.word	0x08008c89
 8008c48:	08008c99 	.word	0x08008c99
 8008c4c:	08008c99 	.word	0x08008c99
 8008c50:	08008c99 	.word	0x08008c99
 8008c54:	08008c99 	.word	0x08008c99
 8008c58:	08008c99 	.word	0x08008c99
 8008c5c:	08008c99 	.word	0x08008c99
 8008c60:	08008c99 	.word	0x08008c99
 8008c64:	08008c91 	.word	0x08008c91
 8008c68:	2301      	movs	r3, #1
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6e:	e0d6      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008c70:	2304      	movs	r3, #4
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c76:	e0d2      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008c78:	2308      	movs	r3, #8
 8008c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7e:	e0ce      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008c80:	2310      	movs	r3, #16
 8008c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c86:	e0ca      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008c88:	2320      	movs	r3, #32
 8008c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8e:	e0c6      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008c90:	2340      	movs	r3, #64	@ 0x40
 8008c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c96:	e0c2      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008c98:	2380      	movs	r3, #128	@ 0x80
 8008c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9e:	e0be      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008ca0:	40011400 	.word	0x40011400
 8008ca4:	58024400 	.word	0x58024400
 8008ca8:	40007800 	.word	0x40007800
 8008cac:	40007c00 	.word	0x40007c00
 8008cb0:	40011800 	.word	0x40011800
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4aad      	ldr	r2, [pc, #692]	@ (8008f70 <UART_SetConfig+0x900>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d176      	bne.n	8008dac <UART_SetConfig+0x73c>
 8008cbe:	4bad      	ldr	r3, [pc, #692]	@ (8008f74 <UART_SetConfig+0x904>)
 8008cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008cc6:	2b28      	cmp	r3, #40	@ 0x28
 8008cc8:	d86c      	bhi.n	8008da4 <UART_SetConfig+0x734>
 8008cca:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd0 <UART_SetConfig+0x660>)
 8008ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd0:	08008d75 	.word	0x08008d75
 8008cd4:	08008da5 	.word	0x08008da5
 8008cd8:	08008da5 	.word	0x08008da5
 8008cdc:	08008da5 	.word	0x08008da5
 8008ce0:	08008da5 	.word	0x08008da5
 8008ce4:	08008da5 	.word	0x08008da5
 8008ce8:	08008da5 	.word	0x08008da5
 8008cec:	08008da5 	.word	0x08008da5
 8008cf0:	08008d7d 	.word	0x08008d7d
 8008cf4:	08008da5 	.word	0x08008da5
 8008cf8:	08008da5 	.word	0x08008da5
 8008cfc:	08008da5 	.word	0x08008da5
 8008d00:	08008da5 	.word	0x08008da5
 8008d04:	08008da5 	.word	0x08008da5
 8008d08:	08008da5 	.word	0x08008da5
 8008d0c:	08008da5 	.word	0x08008da5
 8008d10:	08008d85 	.word	0x08008d85
 8008d14:	08008da5 	.word	0x08008da5
 8008d18:	08008da5 	.word	0x08008da5
 8008d1c:	08008da5 	.word	0x08008da5
 8008d20:	08008da5 	.word	0x08008da5
 8008d24:	08008da5 	.word	0x08008da5
 8008d28:	08008da5 	.word	0x08008da5
 8008d2c:	08008da5 	.word	0x08008da5
 8008d30:	08008d8d 	.word	0x08008d8d
 8008d34:	08008da5 	.word	0x08008da5
 8008d38:	08008da5 	.word	0x08008da5
 8008d3c:	08008da5 	.word	0x08008da5
 8008d40:	08008da5 	.word	0x08008da5
 8008d44:	08008da5 	.word	0x08008da5
 8008d48:	08008da5 	.word	0x08008da5
 8008d4c:	08008da5 	.word	0x08008da5
 8008d50:	08008d95 	.word	0x08008d95
 8008d54:	08008da5 	.word	0x08008da5
 8008d58:	08008da5 	.word	0x08008da5
 8008d5c:	08008da5 	.word	0x08008da5
 8008d60:	08008da5 	.word	0x08008da5
 8008d64:	08008da5 	.word	0x08008da5
 8008d68:	08008da5 	.word	0x08008da5
 8008d6c:	08008da5 	.word	0x08008da5
 8008d70:	08008d9d 	.word	0x08008d9d
 8008d74:	2301      	movs	r3, #1
 8008d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d7a:	e050      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008d7c:	2304      	movs	r3, #4
 8008d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d82:	e04c      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008d84:	2308      	movs	r3, #8
 8008d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d8a:	e048      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008d8c:	2310      	movs	r3, #16
 8008d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d92:	e044      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008d94:	2320      	movs	r3, #32
 8008d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9a:	e040      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008d9c:	2340      	movs	r3, #64	@ 0x40
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da2:	e03c      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008da4:	2380      	movs	r3, #128	@ 0x80
 8008da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008daa:	e038      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a71      	ldr	r2, [pc, #452]	@ (8008f78 <UART_SetConfig+0x908>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d130      	bne.n	8008e18 <UART_SetConfig+0x7a8>
 8008db6:	4b6f      	ldr	r3, [pc, #444]	@ (8008f74 <UART_SetConfig+0x904>)
 8008db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dba:	f003 0307 	and.w	r3, r3, #7
 8008dbe:	2b05      	cmp	r3, #5
 8008dc0:	d826      	bhi.n	8008e10 <UART_SetConfig+0x7a0>
 8008dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc8 <UART_SetConfig+0x758>)
 8008dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc8:	08008de1 	.word	0x08008de1
 8008dcc:	08008de9 	.word	0x08008de9
 8008dd0:	08008df1 	.word	0x08008df1
 8008dd4:	08008df9 	.word	0x08008df9
 8008dd8:	08008e01 	.word	0x08008e01
 8008ddc:	08008e09 	.word	0x08008e09
 8008de0:	2302      	movs	r3, #2
 8008de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de6:	e01a      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008de8:	2304      	movs	r3, #4
 8008dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dee:	e016      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008df0:	2308      	movs	r3, #8
 8008df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008df6:	e012      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008df8:	2310      	movs	r3, #16
 8008dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfe:	e00e      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008e00:	2320      	movs	r3, #32
 8008e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e06:	e00a      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008e08:	2340      	movs	r3, #64	@ 0x40
 8008e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0e:	e006      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008e10:	2380      	movs	r3, #128	@ 0x80
 8008e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e16:	e002      	b.n	8008e1e <UART_SetConfig+0x7ae>
 8008e18:	2380      	movs	r3, #128	@ 0x80
 8008e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a55      	ldr	r2, [pc, #340]	@ (8008f78 <UART_SetConfig+0x908>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	f040 80f8 	bne.w	800901a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e2a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008e2e:	2b20      	cmp	r3, #32
 8008e30:	dc46      	bgt.n	8008ec0 <UART_SetConfig+0x850>
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	db75      	blt.n	8008f22 <UART_SetConfig+0x8b2>
 8008e36:	3b02      	subs	r3, #2
 8008e38:	2b1e      	cmp	r3, #30
 8008e3a:	d872      	bhi.n	8008f22 <UART_SetConfig+0x8b2>
 8008e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e44 <UART_SetConfig+0x7d4>)
 8008e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e42:	bf00      	nop
 8008e44:	08008ec7 	.word	0x08008ec7
 8008e48:	08008f23 	.word	0x08008f23
 8008e4c:	08008ecf 	.word	0x08008ecf
 8008e50:	08008f23 	.word	0x08008f23
 8008e54:	08008f23 	.word	0x08008f23
 8008e58:	08008f23 	.word	0x08008f23
 8008e5c:	08008edf 	.word	0x08008edf
 8008e60:	08008f23 	.word	0x08008f23
 8008e64:	08008f23 	.word	0x08008f23
 8008e68:	08008f23 	.word	0x08008f23
 8008e6c:	08008f23 	.word	0x08008f23
 8008e70:	08008f23 	.word	0x08008f23
 8008e74:	08008f23 	.word	0x08008f23
 8008e78:	08008f23 	.word	0x08008f23
 8008e7c:	08008eef 	.word	0x08008eef
 8008e80:	08008f23 	.word	0x08008f23
 8008e84:	08008f23 	.word	0x08008f23
 8008e88:	08008f23 	.word	0x08008f23
 8008e8c:	08008f23 	.word	0x08008f23
 8008e90:	08008f23 	.word	0x08008f23
 8008e94:	08008f23 	.word	0x08008f23
 8008e98:	08008f23 	.word	0x08008f23
 8008e9c:	08008f23 	.word	0x08008f23
 8008ea0:	08008f23 	.word	0x08008f23
 8008ea4:	08008f23 	.word	0x08008f23
 8008ea8:	08008f23 	.word	0x08008f23
 8008eac:	08008f23 	.word	0x08008f23
 8008eb0:	08008f23 	.word	0x08008f23
 8008eb4:	08008f23 	.word	0x08008f23
 8008eb8:	08008f23 	.word	0x08008f23
 8008ebc:	08008f15 	.word	0x08008f15
 8008ec0:	2b40      	cmp	r3, #64	@ 0x40
 8008ec2:	d02a      	beq.n	8008f1a <UART_SetConfig+0x8aa>
 8008ec4:	e02d      	b.n	8008f22 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008ec6:	f7fe f81f 	bl	8006f08 <HAL_RCCEx_GetD3PCLK1Freq>
 8008eca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ecc:	e02f      	b.n	8008f2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe f82e 	bl	8006f34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008edc:	e027      	b.n	8008f2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ede:	f107 0318 	add.w	r3, r7, #24
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fe f97a 	bl	80071dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eec:	e01f      	b.n	8008f2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008eee:	4b21      	ldr	r3, [pc, #132]	@ (8008f74 <UART_SetConfig+0x904>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0320 	and.w	r3, r3, #32
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d009      	beq.n	8008f0e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008efa:	4b1e      	ldr	r3, [pc, #120]	@ (8008f74 <UART_SetConfig+0x904>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	08db      	lsrs	r3, r3, #3
 8008f00:	f003 0303 	and.w	r3, r3, #3
 8008f04:	4a1d      	ldr	r2, [pc, #116]	@ (8008f7c <UART_SetConfig+0x90c>)
 8008f06:	fa22 f303 	lsr.w	r3, r2, r3
 8008f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f0c:	e00f      	b.n	8008f2e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8008f7c <UART_SetConfig+0x90c>)
 8008f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f12:	e00c      	b.n	8008f2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f14:	4b1a      	ldr	r3, [pc, #104]	@ (8008f80 <UART_SetConfig+0x910>)
 8008f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f18:	e009      	b.n	8008f2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f20:	e005      	b.n	8008f2e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008f2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 81ee 	beq.w	8009312 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f3a:	4a12      	ldr	r2, [pc, #72]	@ (8008f84 <UART_SetConfig+0x914>)
 8008f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f40:	461a      	mov	r2, r3
 8008f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f48:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	005b      	lsls	r3, r3, #1
 8008f52:	4413      	add	r3, r2
 8008f54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d305      	bcc.n	8008f66 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d910      	bls.n	8008f88 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008f6c:	e1d1      	b.n	8009312 <UART_SetConfig+0xca2>
 8008f6e:	bf00      	nop
 8008f70:	40011c00 	.word	0x40011c00
 8008f74:	58024400 	.word	0x58024400
 8008f78:	58000c00 	.word	0x58000c00
 8008f7c:	03d09000 	.word	0x03d09000
 8008f80:	003d0900 	.word	0x003d0900
 8008f84:	0801e580 	.word	0x0801e580
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	60bb      	str	r3, [r7, #8]
 8008f8e:	60fa      	str	r2, [r7, #12]
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f94:	4ac0      	ldr	r2, [pc, #768]	@ (8009298 <UART_SetConfig+0xc28>)
 8008f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	603b      	str	r3, [r7, #0]
 8008fa0:	607a      	str	r2, [r7, #4]
 8008fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fa6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008faa:	f7f7 fc25 	bl	80007f8 <__aeabi_uldivmod>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	4610      	mov	r0, r2
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	f04f 0200 	mov.w	r2, #0
 8008fba:	f04f 0300 	mov.w	r3, #0
 8008fbe:	020b      	lsls	r3, r1, #8
 8008fc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008fc4:	0202      	lsls	r2, r0, #8
 8008fc6:	6979      	ldr	r1, [r7, #20]
 8008fc8:	6849      	ldr	r1, [r1, #4]
 8008fca:	0849      	lsrs	r1, r1, #1
 8008fcc:	2000      	movs	r0, #0
 8008fce:	460c      	mov	r4, r1
 8008fd0:	4605      	mov	r5, r0
 8008fd2:	eb12 0804 	adds.w	r8, r2, r4
 8008fd6:	eb43 0905 	adc.w	r9, r3, r5
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	469a      	mov	sl, r3
 8008fe2:	4693      	mov	fp, r2
 8008fe4:	4652      	mov	r2, sl
 8008fe6:	465b      	mov	r3, fp
 8008fe8:	4640      	mov	r0, r8
 8008fea:	4649      	mov	r1, r9
 8008fec:	f7f7 fc04 	bl	80007f8 <__aeabi_uldivmod>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ffe:	d308      	bcc.n	8009012 <UART_SetConfig+0x9a2>
 8009000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009006:	d204      	bcs.n	8009012 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800900e:	60da      	str	r2, [r3, #12]
 8009010:	e17f      	b.n	8009312 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009018:	e17b      	b.n	8009312 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	69db      	ldr	r3, [r3, #28]
 800901e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009022:	f040 80bd 	bne.w	80091a0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009026:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800902a:	2b20      	cmp	r3, #32
 800902c:	dc48      	bgt.n	80090c0 <UART_SetConfig+0xa50>
 800902e:	2b00      	cmp	r3, #0
 8009030:	db7b      	blt.n	800912a <UART_SetConfig+0xaba>
 8009032:	2b20      	cmp	r3, #32
 8009034:	d879      	bhi.n	800912a <UART_SetConfig+0xaba>
 8009036:	a201      	add	r2, pc, #4	@ (adr r2, 800903c <UART_SetConfig+0x9cc>)
 8009038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903c:	080090c7 	.word	0x080090c7
 8009040:	080090cf 	.word	0x080090cf
 8009044:	0800912b 	.word	0x0800912b
 8009048:	0800912b 	.word	0x0800912b
 800904c:	080090d7 	.word	0x080090d7
 8009050:	0800912b 	.word	0x0800912b
 8009054:	0800912b 	.word	0x0800912b
 8009058:	0800912b 	.word	0x0800912b
 800905c:	080090e7 	.word	0x080090e7
 8009060:	0800912b 	.word	0x0800912b
 8009064:	0800912b 	.word	0x0800912b
 8009068:	0800912b 	.word	0x0800912b
 800906c:	0800912b 	.word	0x0800912b
 8009070:	0800912b 	.word	0x0800912b
 8009074:	0800912b 	.word	0x0800912b
 8009078:	0800912b 	.word	0x0800912b
 800907c:	080090f7 	.word	0x080090f7
 8009080:	0800912b 	.word	0x0800912b
 8009084:	0800912b 	.word	0x0800912b
 8009088:	0800912b 	.word	0x0800912b
 800908c:	0800912b 	.word	0x0800912b
 8009090:	0800912b 	.word	0x0800912b
 8009094:	0800912b 	.word	0x0800912b
 8009098:	0800912b 	.word	0x0800912b
 800909c:	0800912b 	.word	0x0800912b
 80090a0:	0800912b 	.word	0x0800912b
 80090a4:	0800912b 	.word	0x0800912b
 80090a8:	0800912b 	.word	0x0800912b
 80090ac:	0800912b 	.word	0x0800912b
 80090b0:	0800912b 	.word	0x0800912b
 80090b4:	0800912b 	.word	0x0800912b
 80090b8:	0800912b 	.word	0x0800912b
 80090bc:	0800911d 	.word	0x0800911d
 80090c0:	2b40      	cmp	r3, #64	@ 0x40
 80090c2:	d02e      	beq.n	8009122 <UART_SetConfig+0xab2>
 80090c4:	e031      	b.n	800912a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090c6:	f7fc fd11 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 80090ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090cc:	e033      	b.n	8009136 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090ce:	f7fc fd23 	bl	8005b18 <HAL_RCC_GetPCLK2Freq>
 80090d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090d4:	e02f      	b.n	8009136 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fd ff2a 	bl	8006f34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090e4:	e027      	b.n	8009136 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090e6:	f107 0318 	add.w	r3, r7, #24
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fe f876 	bl	80071dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090f4:	e01f      	b.n	8009136 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090f6:	4b69      	ldr	r3, [pc, #420]	@ (800929c <UART_SetConfig+0xc2c>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0320 	and.w	r3, r3, #32
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d009      	beq.n	8009116 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009102:	4b66      	ldr	r3, [pc, #408]	@ (800929c <UART_SetConfig+0xc2c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	08db      	lsrs	r3, r3, #3
 8009108:	f003 0303 	and.w	r3, r3, #3
 800910c:	4a64      	ldr	r2, [pc, #400]	@ (80092a0 <UART_SetConfig+0xc30>)
 800910e:	fa22 f303 	lsr.w	r3, r2, r3
 8009112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009114:	e00f      	b.n	8009136 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009116:	4b62      	ldr	r3, [pc, #392]	@ (80092a0 <UART_SetConfig+0xc30>)
 8009118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800911a:	e00c      	b.n	8009136 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800911c:	4b61      	ldr	r3, [pc, #388]	@ (80092a4 <UART_SetConfig+0xc34>)
 800911e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009120:	e009      	b.n	8009136 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009128:	e005      	b.n	8009136 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800912a:	2300      	movs	r3, #0
 800912c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009134:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 80ea 	beq.w	8009312 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009142:	4a55      	ldr	r2, [pc, #340]	@ (8009298 <UART_SetConfig+0xc28>)
 8009144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009148:	461a      	mov	r2, r3
 800914a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800914c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009150:	005a      	lsls	r2, r3, #1
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	085b      	lsrs	r3, r3, #1
 8009158:	441a      	add	r2, r3
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009162:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009166:	2b0f      	cmp	r3, #15
 8009168:	d916      	bls.n	8009198 <UART_SetConfig+0xb28>
 800916a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800916c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009170:	d212      	bcs.n	8009198 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009174:	b29b      	uxth	r3, r3
 8009176:	f023 030f 	bic.w	r3, r3, #15
 800917a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800917c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917e:	085b      	lsrs	r3, r3, #1
 8009180:	b29b      	uxth	r3, r3
 8009182:	f003 0307 	and.w	r3, r3, #7
 8009186:	b29a      	uxth	r2, r3
 8009188:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800918a:	4313      	orrs	r3, r2
 800918c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009194:	60da      	str	r2, [r3, #12]
 8009196:	e0bc      	b.n	8009312 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800919e:	e0b8      	b.n	8009312 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80091a4:	2b20      	cmp	r3, #32
 80091a6:	dc4b      	bgt.n	8009240 <UART_SetConfig+0xbd0>
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f2c0 8087 	blt.w	80092bc <UART_SetConfig+0xc4c>
 80091ae:	2b20      	cmp	r3, #32
 80091b0:	f200 8084 	bhi.w	80092bc <UART_SetConfig+0xc4c>
 80091b4:	a201      	add	r2, pc, #4	@ (adr r2, 80091bc <UART_SetConfig+0xb4c>)
 80091b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ba:	bf00      	nop
 80091bc:	08009247 	.word	0x08009247
 80091c0:	0800924f 	.word	0x0800924f
 80091c4:	080092bd 	.word	0x080092bd
 80091c8:	080092bd 	.word	0x080092bd
 80091cc:	08009257 	.word	0x08009257
 80091d0:	080092bd 	.word	0x080092bd
 80091d4:	080092bd 	.word	0x080092bd
 80091d8:	080092bd 	.word	0x080092bd
 80091dc:	08009267 	.word	0x08009267
 80091e0:	080092bd 	.word	0x080092bd
 80091e4:	080092bd 	.word	0x080092bd
 80091e8:	080092bd 	.word	0x080092bd
 80091ec:	080092bd 	.word	0x080092bd
 80091f0:	080092bd 	.word	0x080092bd
 80091f4:	080092bd 	.word	0x080092bd
 80091f8:	080092bd 	.word	0x080092bd
 80091fc:	08009277 	.word	0x08009277
 8009200:	080092bd 	.word	0x080092bd
 8009204:	080092bd 	.word	0x080092bd
 8009208:	080092bd 	.word	0x080092bd
 800920c:	080092bd 	.word	0x080092bd
 8009210:	080092bd 	.word	0x080092bd
 8009214:	080092bd 	.word	0x080092bd
 8009218:	080092bd 	.word	0x080092bd
 800921c:	080092bd 	.word	0x080092bd
 8009220:	080092bd 	.word	0x080092bd
 8009224:	080092bd 	.word	0x080092bd
 8009228:	080092bd 	.word	0x080092bd
 800922c:	080092bd 	.word	0x080092bd
 8009230:	080092bd 	.word	0x080092bd
 8009234:	080092bd 	.word	0x080092bd
 8009238:	080092bd 	.word	0x080092bd
 800923c:	080092af 	.word	0x080092af
 8009240:	2b40      	cmp	r3, #64	@ 0x40
 8009242:	d037      	beq.n	80092b4 <UART_SetConfig+0xc44>
 8009244:	e03a      	b.n	80092bc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009246:	f7fc fc51 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 800924a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800924c:	e03c      	b.n	80092c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800924e:	f7fc fc63 	bl	8005b18 <HAL_RCC_GetPCLK2Freq>
 8009252:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009254:	e038      	b.n	80092c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800925a:	4618      	mov	r0, r3
 800925c:	f7fd fe6a 	bl	8006f34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009264:	e030      	b.n	80092c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009266:	f107 0318 	add.w	r3, r7, #24
 800926a:	4618      	mov	r0, r3
 800926c:	f7fd ffb6 	bl	80071dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009274:	e028      	b.n	80092c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009276:	4b09      	ldr	r3, [pc, #36]	@ (800929c <UART_SetConfig+0xc2c>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 0320 	and.w	r3, r3, #32
 800927e:	2b00      	cmp	r3, #0
 8009280:	d012      	beq.n	80092a8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009282:	4b06      	ldr	r3, [pc, #24]	@ (800929c <UART_SetConfig+0xc2c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	08db      	lsrs	r3, r3, #3
 8009288:	f003 0303 	and.w	r3, r3, #3
 800928c:	4a04      	ldr	r2, [pc, #16]	@ (80092a0 <UART_SetConfig+0xc30>)
 800928e:	fa22 f303 	lsr.w	r3, r2, r3
 8009292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009294:	e018      	b.n	80092c8 <UART_SetConfig+0xc58>
 8009296:	bf00      	nop
 8009298:	0801e580 	.word	0x0801e580
 800929c:	58024400 	.word	0x58024400
 80092a0:	03d09000 	.word	0x03d09000
 80092a4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80092a8:	4b24      	ldr	r3, [pc, #144]	@ (800933c <UART_SetConfig+0xccc>)
 80092aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092ac:	e00c      	b.n	80092c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092ae:	4b24      	ldr	r3, [pc, #144]	@ (8009340 <UART_SetConfig+0xcd0>)
 80092b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092b2:	e009      	b.n	80092c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092ba:	e005      	b.n	80092c8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80092bc:	2300      	movs	r3, #0
 80092be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80092c6:	bf00      	nop
    }

    if (pclk != 0U)
 80092c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d021      	beq.n	8009312 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d2:	4a1c      	ldr	r2, [pc, #112]	@ (8009344 <UART_SetConfig+0xcd4>)
 80092d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092d8:	461a      	mov	r2, r3
 80092da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	085b      	lsrs	r3, r3, #1
 80092e6:	441a      	add	r2, r3
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f4:	2b0f      	cmp	r3, #15
 80092f6:	d909      	bls.n	800930c <UART_SetConfig+0xc9c>
 80092f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092fe:	d205      	bcs.n	800930c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009302:	b29a      	uxth	r2, r3
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	60da      	str	r2, [r3, #12]
 800930a:	e002      	b.n	8009312 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	2201      	movs	r2, #1
 8009316:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	2201      	movs	r2, #1
 800931e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2200      	movs	r2, #0
 8009326:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	2200      	movs	r2, #0
 800932c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800932e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009332:	4618      	mov	r0, r3
 8009334:	3748      	adds	r7, #72	@ 0x48
 8009336:	46bd      	mov	sp, r7
 8009338:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800933c:	03d09000 	.word	0x03d09000
 8009340:	003d0900 	.word	0x003d0900
 8009344:	0801e580 	.word	0x0801e580

08009348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009354:	f003 0308 	and.w	r3, r3, #8
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00a      	beq.n	8009372 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	430a      	orrs	r2, r1
 8009370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00a      	beq.n	8009394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	430a      	orrs	r2, r1
 8009392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009398:	f003 0302 	and.w	r3, r3, #2
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00a      	beq.n	80093b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	430a      	orrs	r2, r1
 80093b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ba:	f003 0304 	and.w	r3, r3, #4
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00a      	beq.n	80093d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	430a      	orrs	r2, r1
 80093d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093dc:	f003 0310 	and.w	r3, r3, #16
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00a      	beq.n	80093fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093fe:	f003 0320 	and.w	r3, r3, #32
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00a      	beq.n	800941c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	430a      	orrs	r2, r1
 800941a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009424:	2b00      	cmp	r3, #0
 8009426:	d01a      	beq.n	800945e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009446:	d10a      	bne.n	800945e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	430a      	orrs	r2, r1
 800945c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00a      	beq.n	8009480 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	430a      	orrs	r2, r1
 800947e:	605a      	str	r2, [r3, #4]
  }
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b098      	sub	sp, #96	@ 0x60
 8009490:	af02      	add	r7, sp, #8
 8009492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800949c:	f7f9 f9a6 	bl	80027ec <HAL_GetTick>
 80094a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0308 	and.w	r3, r3, #8
 80094ac:	2b08      	cmp	r3, #8
 80094ae:	d12f      	bne.n	8009510 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094b8:	2200      	movs	r2, #0
 80094ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f88e 	bl	80095e0 <UART_WaitOnFlagUntilTimeout>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d022      	beq.n	8009510 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d2:	e853 3f00 	ldrex	r3, [r3]
 80094d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094de:	653b      	str	r3, [r7, #80]	@ 0x50
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	461a      	mov	r2, r3
 80094e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80094ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094f0:	e841 2300 	strex	r3, r2, [r1]
 80094f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e6      	bne.n	80094ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2220      	movs	r2, #32
 8009500:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	e063      	b.n	80095d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 0304 	and.w	r3, r3, #4
 800951a:	2b04      	cmp	r3, #4
 800951c:	d149      	bne.n	80095b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800951e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009526:	2200      	movs	r2, #0
 8009528:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f857 	bl	80095e0 <UART_WaitOnFlagUntilTimeout>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d03c      	beq.n	80095b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009540:	e853 3f00 	ldrex	r3, [r3]
 8009544:	623b      	str	r3, [r7, #32]
   return(result);
 8009546:	6a3b      	ldr	r3, [r7, #32]
 8009548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800954c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009556:	633b      	str	r3, [r7, #48]	@ 0x30
 8009558:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800955c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800955e:	e841 2300 	strex	r3, r2, [r1]
 8009562:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1e6      	bne.n	8009538 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3308      	adds	r3, #8
 8009570:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	e853 3f00 	ldrex	r3, [r3]
 8009578:	60fb      	str	r3, [r7, #12]
   return(result);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f023 0301 	bic.w	r3, r3, #1
 8009580:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3308      	adds	r3, #8
 8009588:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800958a:	61fa      	str	r2, [r7, #28]
 800958c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958e:	69b9      	ldr	r1, [r7, #24]
 8009590:	69fa      	ldr	r2, [r7, #28]
 8009592:	e841 2300 	strex	r3, r2, [r1]
 8009596:	617b      	str	r3, [r7, #20]
   return(result);
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1e5      	bne.n	800956a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2220      	movs	r2, #32
 80095a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e012      	b.n	80095d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2220      	movs	r2, #32
 80095b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2220      	movs	r2, #32
 80095be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3758      	adds	r7, #88	@ 0x58
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	603b      	str	r3, [r7, #0]
 80095ec:	4613      	mov	r3, r2
 80095ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095f0:	e04f      	b.n	8009692 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f8:	d04b      	beq.n	8009692 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095fa:	f7f9 f8f7 	bl	80027ec <HAL_GetTick>
 80095fe:	4602      	mov	r2, r0
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	429a      	cmp	r2, r3
 8009608:	d302      	bcc.n	8009610 <UART_WaitOnFlagUntilTimeout+0x30>
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009610:	2303      	movs	r3, #3
 8009612:	e04e      	b.n	80096b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 0304 	and.w	r3, r3, #4
 800961e:	2b00      	cmp	r3, #0
 8009620:	d037      	beq.n	8009692 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	2b80      	cmp	r3, #128	@ 0x80
 8009626:	d034      	beq.n	8009692 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	2b40      	cmp	r3, #64	@ 0x40
 800962c:	d031      	beq.n	8009692 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	69db      	ldr	r3, [r3, #28]
 8009634:	f003 0308 	and.w	r3, r3, #8
 8009638:	2b08      	cmp	r3, #8
 800963a:	d110      	bne.n	800965e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2208      	movs	r2, #8
 8009642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 f839 	bl	80096bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2208      	movs	r2, #8
 800964e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e029      	b.n	80096b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	69db      	ldr	r3, [r3, #28]
 8009664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800966c:	d111      	bne.n	8009692 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009676:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 f81f 	bl	80096bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2220      	movs	r2, #32
 8009682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800968e:	2303      	movs	r3, #3
 8009690:	e00f      	b.n	80096b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	69da      	ldr	r2, [r3, #28]
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	4013      	ands	r3, r2
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	429a      	cmp	r2, r3
 80096a0:	bf0c      	ite	eq
 80096a2:	2301      	moveq	r3, #1
 80096a4:	2300      	movne	r3, #0
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	461a      	mov	r2, r3
 80096aa:	79fb      	ldrb	r3, [r7, #7]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d0a0      	beq.n	80095f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
	...

080096bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096bc:	b480      	push	{r7}
 80096be:	b095      	sub	sp, #84	@ 0x54
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096cc:	e853 3f00 	ldrex	r3, [r3]
 80096d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	461a      	mov	r2, r3
 80096e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80096e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096ea:	e841 2300 	strex	r3, r2, [r1]
 80096ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1e6      	bne.n	80096c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3308      	adds	r3, #8
 80096fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	e853 3f00 	ldrex	r3, [r3]
 8009704:	61fb      	str	r3, [r7, #28]
   return(result);
 8009706:	69fa      	ldr	r2, [r7, #28]
 8009708:	4b1e      	ldr	r3, [pc, #120]	@ (8009784 <UART_EndRxTransfer+0xc8>)
 800970a:	4013      	ands	r3, r2
 800970c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3308      	adds	r3, #8
 8009714:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009716:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009718:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800971c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800971e:	e841 2300 	strex	r3, r2, [r1]
 8009722:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1e5      	bne.n	80096f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800972e:	2b01      	cmp	r3, #1
 8009730:	d118      	bne.n	8009764 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	e853 3f00 	ldrex	r3, [r3]
 800973e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	f023 0310 	bic.w	r3, r3, #16
 8009746:	647b      	str	r3, [r7, #68]	@ 0x44
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	461a      	mov	r2, r3
 800974e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009750:	61bb      	str	r3, [r7, #24]
 8009752:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009754:	6979      	ldr	r1, [r7, #20]
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	e841 2300 	strex	r3, r2, [r1]
 800975c:	613b      	str	r3, [r7, #16]
   return(result);
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1e6      	bne.n	8009732 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2220      	movs	r2, #32
 8009768:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009778:	bf00      	nop
 800977a:	3754      	adds	r7, #84	@ 0x54
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	effffffe 	.word	0xeffffffe

08009788 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009796:	2b01      	cmp	r3, #1
 8009798:	d101      	bne.n	800979e <HAL_UARTEx_DisableFifoMode+0x16>
 800979a:	2302      	movs	r3, #2
 800979c:	e027      	b.n	80097ee <HAL_UARTEx_DisableFifoMode+0x66>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2224      	movs	r2, #36	@ 0x24
 80097aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f022 0201 	bic.w	r2, r2, #1
 80097c4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80097cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2220      	movs	r2, #32
 80097e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3714      	adds	r7, #20
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b084      	sub	sp, #16
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800980a:	2b01      	cmp	r3, #1
 800980c:	d101      	bne.n	8009812 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800980e:	2302      	movs	r3, #2
 8009810:	e02d      	b.n	800986e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2224      	movs	r2, #36	@ 0x24
 800981e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 0201 	bic.w	r2, r2, #1
 8009838:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	683a      	ldr	r2, [r7, #0]
 800984a:	430a      	orrs	r2, r1
 800984c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f850 	bl	80098f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2220      	movs	r2, #32
 8009860:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b084      	sub	sp, #16
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009886:	2b01      	cmp	r3, #1
 8009888:	d101      	bne.n	800988e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800988a:	2302      	movs	r3, #2
 800988c:	e02d      	b.n	80098ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2224      	movs	r2, #36	@ 0x24
 800989a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f022 0201 	bic.w	r2, r2, #1
 80098b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	683a      	ldr	r2, [r7, #0]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f812 	bl	80098f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2220      	movs	r2, #32
 80098dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
	...

080098f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009900:	2b00      	cmp	r3, #0
 8009902:	d108      	bne.n	8009916 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009914:	e031      	b.n	800997a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009916:	2310      	movs	r3, #16
 8009918:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800991a:	2310      	movs	r3, #16
 800991c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	0e5b      	lsrs	r3, r3, #25
 8009926:	b2db      	uxtb	r3, r3
 8009928:	f003 0307 	and.w	r3, r3, #7
 800992c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	0f5b      	lsrs	r3, r3, #29
 8009936:	b2db      	uxtb	r3, r3
 8009938:	f003 0307 	and.w	r3, r3, #7
 800993c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800993e:	7bbb      	ldrb	r3, [r7, #14]
 8009940:	7b3a      	ldrb	r2, [r7, #12]
 8009942:	4911      	ldr	r1, [pc, #68]	@ (8009988 <UARTEx_SetNbDataToProcess+0x94>)
 8009944:	5c8a      	ldrb	r2, [r1, r2]
 8009946:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800994a:	7b3a      	ldrb	r2, [r7, #12]
 800994c:	490f      	ldr	r1, [pc, #60]	@ (800998c <UARTEx_SetNbDataToProcess+0x98>)
 800994e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009950:	fb93 f3f2 	sdiv	r3, r3, r2
 8009954:	b29a      	uxth	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	7b7a      	ldrb	r2, [r7, #13]
 8009960:	4909      	ldr	r1, [pc, #36]	@ (8009988 <UARTEx_SetNbDataToProcess+0x94>)
 8009962:	5c8a      	ldrb	r2, [r1, r2]
 8009964:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009968:	7b7a      	ldrb	r2, [r7, #13]
 800996a:	4908      	ldr	r1, [pc, #32]	@ (800998c <UARTEx_SetNbDataToProcess+0x98>)
 800996c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800996e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009972:	b29a      	uxth	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800997a:	bf00      	nop
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	0801e598 	.word	0x0801e598
 800998c:	0801e5a0 	.word	0x0801e5a0

08009990 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009996:	4b92      	ldr	r3, [pc, #584]	@ (8009be0 <MX_LWIP_Init+0x250>)
 8009998:	22c0      	movs	r2, #192	@ 0xc0
 800999a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800999c:	4b90      	ldr	r3, [pc, #576]	@ (8009be0 <MX_LWIP_Init+0x250>)
 800999e:	22a8      	movs	r2, #168	@ 0xa8
 80099a0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80099a2:	4b8f      	ldr	r3, [pc, #572]	@ (8009be0 <MX_LWIP_Init+0x250>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80099a8:	4b8d      	ldr	r3, [pc, #564]	@ (8009be0 <MX_LWIP_Init+0x250>)
 80099aa:	220a      	movs	r2, #10
 80099ac:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80099ae:	4b8d      	ldr	r3, [pc, #564]	@ (8009be4 <MX_LWIP_Init+0x254>)
 80099b0:	22ff      	movs	r2, #255	@ 0xff
 80099b2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80099b4:	4b8b      	ldr	r3, [pc, #556]	@ (8009be4 <MX_LWIP_Init+0x254>)
 80099b6:	22ff      	movs	r2, #255	@ 0xff
 80099b8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80099ba:	4b8a      	ldr	r3, [pc, #552]	@ (8009be4 <MX_LWIP_Init+0x254>)
 80099bc:	22ff      	movs	r2, #255	@ 0xff
 80099be:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80099c0:	4b88      	ldr	r3, [pc, #544]	@ (8009be4 <MX_LWIP_Init+0x254>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80099c6:	4b88      	ldr	r3, [pc, #544]	@ (8009be8 <MX_LWIP_Init+0x258>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80099cc:	4b86      	ldr	r3, [pc, #536]	@ (8009be8 <MX_LWIP_Init+0x258>)
 80099ce:	2200      	movs	r2, #0
 80099d0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80099d2:	4b85      	ldr	r3, [pc, #532]	@ (8009be8 <MX_LWIP_Init+0x258>)
 80099d4:	2200      	movs	r2, #0
 80099d6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80099d8:	4b83      	ldr	r3, [pc, #524]	@ (8009be8 <MX_LWIP_Init+0x258>)
 80099da:	2200      	movs	r2, #0
 80099dc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80099de:	2100      	movs	r1, #0
 80099e0:	2000      	movs	r0, #0
 80099e2:	f004 fde1 	bl	800e5a8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80099e6:	4b7e      	ldr	r3, [pc, #504]	@ (8009be0 <MX_LWIP_Init+0x250>)
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	061a      	lsls	r2, r3, #24
 80099ec:	4b7c      	ldr	r3, [pc, #496]	@ (8009be0 <MX_LWIP_Init+0x250>)
 80099ee:	785b      	ldrb	r3, [r3, #1]
 80099f0:	041b      	lsls	r3, r3, #16
 80099f2:	431a      	orrs	r2, r3
 80099f4:	4b7a      	ldr	r3, [pc, #488]	@ (8009be0 <MX_LWIP_Init+0x250>)
 80099f6:	789b      	ldrb	r3, [r3, #2]
 80099f8:	021b      	lsls	r3, r3, #8
 80099fa:	4313      	orrs	r3, r2
 80099fc:	4a78      	ldr	r2, [pc, #480]	@ (8009be0 <MX_LWIP_Init+0x250>)
 80099fe:	78d2      	ldrb	r2, [r2, #3]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	061a      	lsls	r2, r3, #24
 8009a04:	4b76      	ldr	r3, [pc, #472]	@ (8009be0 <MX_LWIP_Init+0x250>)
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	0619      	lsls	r1, r3, #24
 8009a0a:	4b75      	ldr	r3, [pc, #468]	@ (8009be0 <MX_LWIP_Init+0x250>)
 8009a0c:	785b      	ldrb	r3, [r3, #1]
 8009a0e:	041b      	lsls	r3, r3, #16
 8009a10:	4319      	orrs	r1, r3
 8009a12:	4b73      	ldr	r3, [pc, #460]	@ (8009be0 <MX_LWIP_Init+0x250>)
 8009a14:	789b      	ldrb	r3, [r3, #2]
 8009a16:	021b      	lsls	r3, r3, #8
 8009a18:	430b      	orrs	r3, r1
 8009a1a:	4971      	ldr	r1, [pc, #452]	@ (8009be0 <MX_LWIP_Init+0x250>)
 8009a1c:	78c9      	ldrb	r1, [r1, #3]
 8009a1e:	430b      	orrs	r3, r1
 8009a20:	021b      	lsls	r3, r3, #8
 8009a22:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009a26:	431a      	orrs	r2, r3
 8009a28:	4b6d      	ldr	r3, [pc, #436]	@ (8009be0 <MX_LWIP_Init+0x250>)
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	0619      	lsls	r1, r3, #24
 8009a2e:	4b6c      	ldr	r3, [pc, #432]	@ (8009be0 <MX_LWIP_Init+0x250>)
 8009a30:	785b      	ldrb	r3, [r3, #1]
 8009a32:	041b      	lsls	r3, r3, #16
 8009a34:	4319      	orrs	r1, r3
 8009a36:	4b6a      	ldr	r3, [pc, #424]	@ (8009be0 <MX_LWIP_Init+0x250>)
 8009a38:	789b      	ldrb	r3, [r3, #2]
 8009a3a:	021b      	lsls	r3, r3, #8
 8009a3c:	430b      	orrs	r3, r1
 8009a3e:	4968      	ldr	r1, [pc, #416]	@ (8009be0 <MX_LWIP_Init+0x250>)
 8009a40:	78c9      	ldrb	r1, [r1, #3]
 8009a42:	430b      	orrs	r3, r1
 8009a44:	0a1b      	lsrs	r3, r3, #8
 8009a46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	4b64      	ldr	r3, [pc, #400]	@ (8009be0 <MX_LWIP_Init+0x250>)
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	0619      	lsls	r1, r3, #24
 8009a52:	4b63      	ldr	r3, [pc, #396]	@ (8009be0 <MX_LWIP_Init+0x250>)
 8009a54:	785b      	ldrb	r3, [r3, #1]
 8009a56:	041b      	lsls	r3, r3, #16
 8009a58:	4319      	orrs	r1, r3
 8009a5a:	4b61      	ldr	r3, [pc, #388]	@ (8009be0 <MX_LWIP_Init+0x250>)
 8009a5c:	789b      	ldrb	r3, [r3, #2]
 8009a5e:	021b      	lsls	r3, r3, #8
 8009a60:	430b      	orrs	r3, r1
 8009a62:	495f      	ldr	r1, [pc, #380]	@ (8009be0 <MX_LWIP_Init+0x250>)
 8009a64:	78c9      	ldrb	r1, [r1, #3]
 8009a66:	430b      	orrs	r3, r1
 8009a68:	0e1b      	lsrs	r3, r3, #24
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	4a5f      	ldr	r2, [pc, #380]	@ (8009bec <MX_LWIP_Init+0x25c>)
 8009a6e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009a70:	4b5c      	ldr	r3, [pc, #368]	@ (8009be4 <MX_LWIP_Init+0x254>)
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	061a      	lsls	r2, r3, #24
 8009a76:	4b5b      	ldr	r3, [pc, #364]	@ (8009be4 <MX_LWIP_Init+0x254>)
 8009a78:	785b      	ldrb	r3, [r3, #1]
 8009a7a:	041b      	lsls	r3, r3, #16
 8009a7c:	431a      	orrs	r2, r3
 8009a7e:	4b59      	ldr	r3, [pc, #356]	@ (8009be4 <MX_LWIP_Init+0x254>)
 8009a80:	789b      	ldrb	r3, [r3, #2]
 8009a82:	021b      	lsls	r3, r3, #8
 8009a84:	4313      	orrs	r3, r2
 8009a86:	4a57      	ldr	r2, [pc, #348]	@ (8009be4 <MX_LWIP_Init+0x254>)
 8009a88:	78d2      	ldrb	r2, [r2, #3]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	061a      	lsls	r2, r3, #24
 8009a8e:	4b55      	ldr	r3, [pc, #340]	@ (8009be4 <MX_LWIP_Init+0x254>)
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	0619      	lsls	r1, r3, #24
 8009a94:	4b53      	ldr	r3, [pc, #332]	@ (8009be4 <MX_LWIP_Init+0x254>)
 8009a96:	785b      	ldrb	r3, [r3, #1]
 8009a98:	041b      	lsls	r3, r3, #16
 8009a9a:	4319      	orrs	r1, r3
 8009a9c:	4b51      	ldr	r3, [pc, #324]	@ (8009be4 <MX_LWIP_Init+0x254>)
 8009a9e:	789b      	ldrb	r3, [r3, #2]
 8009aa0:	021b      	lsls	r3, r3, #8
 8009aa2:	430b      	orrs	r3, r1
 8009aa4:	494f      	ldr	r1, [pc, #316]	@ (8009be4 <MX_LWIP_Init+0x254>)
 8009aa6:	78c9      	ldrb	r1, [r1, #3]
 8009aa8:	430b      	orrs	r3, r1
 8009aaa:	021b      	lsls	r3, r3, #8
 8009aac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009ab0:	431a      	orrs	r2, r3
 8009ab2:	4b4c      	ldr	r3, [pc, #304]	@ (8009be4 <MX_LWIP_Init+0x254>)
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	0619      	lsls	r1, r3, #24
 8009ab8:	4b4a      	ldr	r3, [pc, #296]	@ (8009be4 <MX_LWIP_Init+0x254>)
 8009aba:	785b      	ldrb	r3, [r3, #1]
 8009abc:	041b      	lsls	r3, r3, #16
 8009abe:	4319      	orrs	r1, r3
 8009ac0:	4b48      	ldr	r3, [pc, #288]	@ (8009be4 <MX_LWIP_Init+0x254>)
 8009ac2:	789b      	ldrb	r3, [r3, #2]
 8009ac4:	021b      	lsls	r3, r3, #8
 8009ac6:	430b      	orrs	r3, r1
 8009ac8:	4946      	ldr	r1, [pc, #280]	@ (8009be4 <MX_LWIP_Init+0x254>)
 8009aca:	78c9      	ldrb	r1, [r1, #3]
 8009acc:	430b      	orrs	r3, r1
 8009ace:	0a1b      	lsrs	r3, r3, #8
 8009ad0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009ad4:	431a      	orrs	r2, r3
 8009ad6:	4b43      	ldr	r3, [pc, #268]	@ (8009be4 <MX_LWIP_Init+0x254>)
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	0619      	lsls	r1, r3, #24
 8009adc:	4b41      	ldr	r3, [pc, #260]	@ (8009be4 <MX_LWIP_Init+0x254>)
 8009ade:	785b      	ldrb	r3, [r3, #1]
 8009ae0:	041b      	lsls	r3, r3, #16
 8009ae2:	4319      	orrs	r1, r3
 8009ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8009be4 <MX_LWIP_Init+0x254>)
 8009ae6:	789b      	ldrb	r3, [r3, #2]
 8009ae8:	021b      	lsls	r3, r3, #8
 8009aea:	430b      	orrs	r3, r1
 8009aec:	493d      	ldr	r1, [pc, #244]	@ (8009be4 <MX_LWIP_Init+0x254>)
 8009aee:	78c9      	ldrb	r1, [r1, #3]
 8009af0:	430b      	orrs	r3, r1
 8009af2:	0e1b      	lsrs	r3, r3, #24
 8009af4:	4313      	orrs	r3, r2
 8009af6:	4a3e      	ldr	r2, [pc, #248]	@ (8009bf0 <MX_LWIP_Init+0x260>)
 8009af8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009afa:	4b3b      	ldr	r3, [pc, #236]	@ (8009be8 <MX_LWIP_Init+0x258>)
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	061a      	lsls	r2, r3, #24
 8009b00:	4b39      	ldr	r3, [pc, #228]	@ (8009be8 <MX_LWIP_Init+0x258>)
 8009b02:	785b      	ldrb	r3, [r3, #1]
 8009b04:	041b      	lsls	r3, r3, #16
 8009b06:	431a      	orrs	r2, r3
 8009b08:	4b37      	ldr	r3, [pc, #220]	@ (8009be8 <MX_LWIP_Init+0x258>)
 8009b0a:	789b      	ldrb	r3, [r3, #2]
 8009b0c:	021b      	lsls	r3, r3, #8
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	4a35      	ldr	r2, [pc, #212]	@ (8009be8 <MX_LWIP_Init+0x258>)
 8009b12:	78d2      	ldrb	r2, [r2, #3]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	061a      	lsls	r2, r3, #24
 8009b18:	4b33      	ldr	r3, [pc, #204]	@ (8009be8 <MX_LWIP_Init+0x258>)
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	0619      	lsls	r1, r3, #24
 8009b1e:	4b32      	ldr	r3, [pc, #200]	@ (8009be8 <MX_LWIP_Init+0x258>)
 8009b20:	785b      	ldrb	r3, [r3, #1]
 8009b22:	041b      	lsls	r3, r3, #16
 8009b24:	4319      	orrs	r1, r3
 8009b26:	4b30      	ldr	r3, [pc, #192]	@ (8009be8 <MX_LWIP_Init+0x258>)
 8009b28:	789b      	ldrb	r3, [r3, #2]
 8009b2a:	021b      	lsls	r3, r3, #8
 8009b2c:	430b      	orrs	r3, r1
 8009b2e:	492e      	ldr	r1, [pc, #184]	@ (8009be8 <MX_LWIP_Init+0x258>)
 8009b30:	78c9      	ldrb	r1, [r1, #3]
 8009b32:	430b      	orrs	r3, r1
 8009b34:	021b      	lsls	r3, r3, #8
 8009b36:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009b3a:	431a      	orrs	r2, r3
 8009b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8009be8 <MX_LWIP_Init+0x258>)
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	0619      	lsls	r1, r3, #24
 8009b42:	4b29      	ldr	r3, [pc, #164]	@ (8009be8 <MX_LWIP_Init+0x258>)
 8009b44:	785b      	ldrb	r3, [r3, #1]
 8009b46:	041b      	lsls	r3, r3, #16
 8009b48:	4319      	orrs	r1, r3
 8009b4a:	4b27      	ldr	r3, [pc, #156]	@ (8009be8 <MX_LWIP_Init+0x258>)
 8009b4c:	789b      	ldrb	r3, [r3, #2]
 8009b4e:	021b      	lsls	r3, r3, #8
 8009b50:	430b      	orrs	r3, r1
 8009b52:	4925      	ldr	r1, [pc, #148]	@ (8009be8 <MX_LWIP_Init+0x258>)
 8009b54:	78c9      	ldrb	r1, [r1, #3]
 8009b56:	430b      	orrs	r3, r1
 8009b58:	0a1b      	lsrs	r3, r3, #8
 8009b5a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009b5e:	431a      	orrs	r2, r3
 8009b60:	4b21      	ldr	r3, [pc, #132]	@ (8009be8 <MX_LWIP_Init+0x258>)
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	0619      	lsls	r1, r3, #24
 8009b66:	4b20      	ldr	r3, [pc, #128]	@ (8009be8 <MX_LWIP_Init+0x258>)
 8009b68:	785b      	ldrb	r3, [r3, #1]
 8009b6a:	041b      	lsls	r3, r3, #16
 8009b6c:	4319      	orrs	r1, r3
 8009b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8009be8 <MX_LWIP_Init+0x258>)
 8009b70:	789b      	ldrb	r3, [r3, #2]
 8009b72:	021b      	lsls	r3, r3, #8
 8009b74:	430b      	orrs	r3, r1
 8009b76:	491c      	ldr	r1, [pc, #112]	@ (8009be8 <MX_LWIP_Init+0x258>)
 8009b78:	78c9      	ldrb	r1, [r1, #3]
 8009b7a:	430b      	orrs	r3, r1
 8009b7c:	0e1b      	lsrs	r3, r3, #24
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	4a1c      	ldr	r2, [pc, #112]	@ (8009bf4 <MX_LWIP_Init+0x264>)
 8009b82:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009b84:	4b1c      	ldr	r3, [pc, #112]	@ (8009bf8 <MX_LWIP_Init+0x268>)
 8009b86:	9302      	str	r3, [sp, #8]
 8009b88:	4b1c      	ldr	r3, [pc, #112]	@ (8009bfc <MX_LWIP_Init+0x26c>)
 8009b8a:	9301      	str	r3, [sp, #4]
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	9300      	str	r3, [sp, #0]
 8009b90:	4b18      	ldr	r3, [pc, #96]	@ (8009bf4 <MX_LWIP_Init+0x264>)
 8009b92:	4a17      	ldr	r2, [pc, #92]	@ (8009bf0 <MX_LWIP_Init+0x260>)
 8009b94:	4915      	ldr	r1, [pc, #84]	@ (8009bec <MX_LWIP_Init+0x25c>)
 8009b96:	481a      	ldr	r0, [pc, #104]	@ (8009c00 <MX_LWIP_Init+0x270>)
 8009b98:	f005 fdc0 	bl	800f71c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009b9c:	4818      	ldr	r0, [pc, #96]	@ (8009c00 <MX_LWIP_Init+0x270>)
 8009b9e:	f005 ff6f 	bl	800fa80 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8009ba2:	4817      	ldr	r0, [pc, #92]	@ (8009c00 <MX_LWIP_Init+0x270>)
 8009ba4:	f005 ff7c 	bl	800faa0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009ba8:	4916      	ldr	r1, [pc, #88]	@ (8009c04 <MX_LWIP_Init+0x274>)
 8009baa:	4815      	ldr	r0, [pc, #84]	@ (8009c00 <MX_LWIP_Init+0x270>)
 8009bac:	f006 f87a 	bl	800fca4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8009bb0:	2224      	movs	r2, #36	@ 0x24
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	4814      	ldr	r0, [pc, #80]	@ (8009c08 <MX_LWIP_Init+0x278>)
 8009bb6:	f00f fe0d 	bl	80197d4 <memset>
  attributes.name = "EthLink";
 8009bba:	4b13      	ldr	r3, [pc, #76]	@ (8009c08 <MX_LWIP_Init+0x278>)
 8009bbc:	4a13      	ldr	r2, [pc, #76]	@ (8009c0c <MX_LWIP_Init+0x27c>)
 8009bbe:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8009bc0:	4b11      	ldr	r3, [pc, #68]	@ (8009c08 <MX_LWIP_Init+0x278>)
 8009bc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009bc6:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8009bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8009c08 <MX_LWIP_Init+0x278>)
 8009bca:	2210      	movs	r2, #16
 8009bcc:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8009bce:	4a0e      	ldr	r2, [pc, #56]	@ (8009c08 <MX_LWIP_Init+0x278>)
 8009bd0:	490b      	ldr	r1, [pc, #44]	@ (8009c00 <MX_LWIP_Init+0x270>)
 8009bd2:	480f      	ldr	r0, [pc, #60]	@ (8009c10 <MX_LWIP_Init+0x280>)
 8009bd4:	f000 fdbf 	bl	800a756 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009bd8:	bf00      	nop
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	240005b8 	.word	0x240005b8
 8009be4:	240005bc 	.word	0x240005bc
 8009be8:	240005c0 	.word	0x240005c0
 8009bec:	240005ac 	.word	0x240005ac
 8009bf0:	240005b0 	.word	0x240005b0
 8009bf4:	240005b4 	.word	0x240005b4
 8009bf8:	0800e4e5 	.word	0x0800e4e5
 8009bfc:	0800a0fd 	.word	0x0800a0fd
 8009c00:	24000578 	.word	0x24000578
 8009c04:	08009c15 	.word	0x08009c15
 8009c08:	240005c4 	.word	0x240005c4
 8009c0c:	0801b948 	.word	0x0801b948
 8009c10:	0800a3ad 	.word	0x0800a3ad

08009c14 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009c1c:	bf00      	nop
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009c30:	4b04      	ldr	r3, [pc, #16]	@ (8009c44 <HAL_ETH_RxCpltCallback+0x1c>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f001 f825 	bl	800ac84 <osSemaphoreRelease>
}
 8009c3a:	bf00      	nop
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	240005f0 	.word	0x240005f0

08009c48 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8009c50:	4b04      	ldr	r3, [pc, #16]	@ (8009c64 <HAL_ETH_TxCpltCallback+0x1c>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f001 f815 	bl	800ac84 <osSemaphoreRelease>
}
 8009c5a:	bf00      	nop
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	240005f4 	.word	0x240005f4

08009c68 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7f9 ff22 	bl	8003aba <HAL_ETH_GetDMAError>
 8009c76:	4603      	mov	r3, r0
 8009c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c7c:	2b80      	cmp	r3, #128	@ 0x80
 8009c7e:	d104      	bne.n	8009c8a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8009c80:	4b04      	ldr	r3, [pc, #16]	@ (8009c94 <HAL_ETH_ErrorCallback+0x2c>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f000 fffd 	bl	800ac84 <osSemaphoreRelease>
  }
}
 8009c8a:	bf00      	nop
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	240005f0 	.word	0x240005f0

08009c98 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b0aa      	sub	sp, #168	@ 0xa8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8009cac:	2300      	movs	r3, #0
 8009cae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8009cb2:	f107 0310 	add.w	r3, r7, #16
 8009cb6:	2264      	movs	r2, #100	@ 0x64
 8009cb8:	2100      	movs	r1, #0
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f00f fd8a 	bl	80197d4 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009cc0:	4b89      	ldr	r3, [pc, #548]	@ (8009ee8 <low_level_init+0x250>)
 8009cc2:	4a8a      	ldr	r2, [pc, #552]	@ (8009eec <low_level_init+0x254>)
 8009cc4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8009cca:	2380      	movs	r3, #128	@ 0x80
 8009ccc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8009cce:	23e1      	movs	r3, #225	@ 0xe1
 8009cd0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8009cde:	4a82      	ldr	r2, [pc, #520]	@ (8009ee8 <low_level_init+0x250>)
 8009ce0:	f107 0308 	add.w	r3, r7, #8
 8009ce4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009ce6:	4b80      	ldr	r3, [pc, #512]	@ (8009ee8 <low_level_init+0x250>)
 8009ce8:	2201      	movs	r2, #1
 8009cea:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009cec:	4b7e      	ldr	r3, [pc, #504]	@ (8009ee8 <low_level_init+0x250>)
 8009cee:	4a80      	ldr	r2, [pc, #512]	@ (8009ef0 <low_level_init+0x258>)
 8009cf0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009cf2:	4b7d      	ldr	r3, [pc, #500]	@ (8009ee8 <low_level_init+0x250>)
 8009cf4:	4a7f      	ldr	r2, [pc, #508]	@ (8009ef4 <low_level_init+0x25c>)
 8009cf6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009cf8:	4b7b      	ldr	r3, [pc, #492]	@ (8009ee8 <low_level_init+0x250>)
 8009cfa:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009cfe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009d00:	4879      	ldr	r0, [pc, #484]	@ (8009ee8 <low_level_init+0x250>)
 8009d02:	f7f8 ff01 	bl	8002b08 <HAL_ETH_Init>
 8009d06:	4603      	mov	r3, r0
 8009d08:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009d0c:	2238      	movs	r2, #56	@ 0x38
 8009d0e:	2100      	movs	r1, #0
 8009d10:	4879      	ldr	r0, [pc, #484]	@ (8009ef8 <low_level_init+0x260>)
 8009d12:	f00f fd5f 	bl	80197d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009d16:	4b78      	ldr	r3, [pc, #480]	@ (8009ef8 <low_level_init+0x260>)
 8009d18:	2221      	movs	r2, #33	@ 0x21
 8009d1a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009d1c:	4b76      	ldr	r3, [pc, #472]	@ (8009ef8 <low_level_init+0x260>)
 8009d1e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8009d22:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009d24:	4b74      	ldr	r3, [pc, #464]	@ (8009ef8 <low_level_init+0x260>)
 8009d26:	2200      	movs	r2, #0
 8009d28:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009d2a:	4874      	ldr	r0, [pc, #464]	@ (8009efc <low_level_init+0x264>)
 8009d2c:	f005 fbb0 	bl	800f490 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET
  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2206      	movs	r2, #6
 8009d34:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009d38:	4b6b      	ldr	r3, [pc, #428]	@ (8009ee8 <low_level_init+0x250>)
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	781a      	ldrb	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009d44:	4b68      	ldr	r3, [pc, #416]	@ (8009ee8 <low_level_init+0x250>)
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	785a      	ldrb	r2, [r3, #1]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009d50:	4b65      	ldr	r3, [pc, #404]	@ (8009ee8 <low_level_init+0x250>)
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	789a      	ldrb	r2, [r3, #2]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009d5c:	4b62      	ldr	r3, [pc, #392]	@ (8009ee8 <low_level_init+0x250>)
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	78da      	ldrb	r2, [r3, #3]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009d68:	4b5f      	ldr	r3, [pc, #380]	@ (8009ee8 <low_level_init+0x250>)
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	791a      	ldrb	r2, [r3, #4]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009d74:	4b5c      	ldr	r3, [pc, #368]	@ (8009ee8 <low_level_init+0x250>)
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	795a      	ldrb	r2, [r3, #5]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8009d86:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009d8e:	f043 030a 	orr.w	r3, r3, #10
 8009d92:	b2da      	uxtb	r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	2001      	movs	r0, #1
 8009da0:	f000 fe94 	bl	800aacc <osSemaphoreNew>
 8009da4:	4603      	mov	r3, r0
 8009da6:	4a56      	ldr	r2, [pc, #344]	@ (8009f00 <low_level_init+0x268>)
 8009da8:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8009daa:	2200      	movs	r2, #0
 8009dac:	2100      	movs	r1, #0
 8009dae:	2001      	movs	r0, #1
 8009db0:	f000 fe8c 	bl	800aacc <osSemaphoreNew>
 8009db4:	4603      	mov	r3, r0
 8009db6:	4a53      	ldr	r2, [pc, #332]	@ (8009f04 <low_level_init+0x26c>)
 8009db8:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8009dba:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8009dbe:	2224      	movs	r2, #36	@ 0x24
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f00f fd06 	bl	80197d4 <memset>
  attributes.name = "EthIf";
 8009dc8:	4b4f      	ldr	r3, [pc, #316]	@ (8009f08 <low_level_init+0x270>)
 8009dca:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8009dcc:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8009dd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8009dd4:	2330      	movs	r3, #48	@ 0x30
 8009dd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8009dda:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8009dde:	461a      	mov	r2, r3
 8009de0:	6879      	ldr	r1, [r7, #4]
 8009de2:	484a      	ldr	r0, [pc, #296]	@ (8009f0c <low_level_init+0x274>)
 8009de4:	f000 fcb7 	bl	800a756 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009de8:	4949      	ldr	r1, [pc, #292]	@ (8009f10 <low_level_init+0x278>)
 8009dea:	484a      	ldr	r0, [pc, #296]	@ (8009f14 <low_level_init+0x27c>)
 8009dec:	f7f8 fba7 	bl	800253e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8009df0:	4848      	ldr	r0, [pc, #288]	@ (8009f14 <low_level_init+0x27c>)
 8009df2:	f7f8 fbd6 	bl	80025a2 <LAN8742_Init>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d006      	beq.n	8009e0a <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f005 ff21 	bl	800fc44 <netif_set_link_down>
    netif_set_down(netif);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f005 feb8 	bl	800fb78 <netif_set_down>
 8009e08:	e06b      	b.n	8009ee2 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8009e0a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d165      	bne.n	8009ede <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009e12:	4840      	ldr	r0, [pc, #256]	@ (8009f14 <low_level_init+0x27c>)
 8009e14:	f7f8 fc12 	bl	800263c <LAN8742_GetLinkState>
 8009e18:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8009e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	dc06      	bgt.n	8009e32 <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f005 ff0d 	bl	800fc44 <netif_set_link_down>
      netif_set_down(netif);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f005 fea4 	bl	800fb78 <netif_set_down>
 8009e30:	e057      	b.n	8009ee2 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8009e32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e36:	3b02      	subs	r3, #2
 8009e38:	2b03      	cmp	r3, #3
 8009e3a:	d82b      	bhi.n	8009e94 <low_level_init+0x1fc>
 8009e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e44 <low_level_init+0x1ac>)
 8009e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e42:	bf00      	nop
 8009e44:	08009e55 	.word	0x08009e55
 8009e48:	08009e67 	.word	0x08009e67
 8009e4c:	08009e77 	.word	0x08009e77
 8009e50:	08009e87 	.word	0x08009e87
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8009e54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009e58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8009e5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009e60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8009e64:	e01f      	b.n	8009ea6 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8009e66:	2300      	movs	r3, #0
 8009e68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8009e6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009e70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8009e74:	e017      	b.n	8009ea6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8009e76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8009e84:	e00f      	b.n	8009ea6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8009e86:	2300      	movs	r3, #0
 8009e88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8009e92:	e008      	b.n	8009ea6 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8009e94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009e98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8009e9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009ea0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8009ea4:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009ea6:	f107 0310 	add.w	r3, r7, #16
 8009eaa:	4619      	mov	r1, r3
 8009eac:	480e      	ldr	r0, [pc, #56]	@ (8009ee8 <low_level_init+0x250>)
 8009eae:	f7f9 fbb9 	bl	8003624 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8009eb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8009eb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009ebe:	f107 0310 	add.w	r3, r7, #16
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	4808      	ldr	r0, [pc, #32]	@ (8009ee8 <low_level_init+0x250>)
 8009ec6:	f7f9 fd81 	bl	80039cc <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8009eca:	4807      	ldr	r0, [pc, #28]	@ (8009ee8 <low_level_init+0x250>)
 8009ecc:	f7f8 ff1a 	bl	8002d04 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f005 fde5 	bl	800faa0 <netif_set_up>
    netif_set_link_up(netif);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f005 fe80 	bl	800fbdc <netif_set_link_up>
 8009edc:	e001      	b.n	8009ee2 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8009ede:	f7f7 fd55 	bl	800198c <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009ee2:	37a8      	adds	r7, #168	@ 0xa8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	240005f8 	.word	0x240005f8
 8009eec:	40028000 	.word	0x40028000
 8009ef0:	30000100 	.word	0x30000100
 8009ef4:	30000000 	.word	0x30000000
 8009ef8:	240006a8 	.word	0x240006a8
 8009efc:	0801e5a8 	.word	0x0801e5a8
 8009f00:	240005f0 	.word	0x240005f0
 8009f04:	240005f4 	.word	0x240005f4
 8009f08:	0801b950 	.word	0x0801b950
 8009f0c:	0800a0a9 	.word	0x0800a0a9
 8009f10:	24000014 	.word	0x24000014
 8009f14:	240006e0 	.word	0x240006e0

08009f18 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b092      	sub	sp, #72	@ 0x48
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009f22:	2300      	movs	r3, #0
 8009f24:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8009f26:	2300      	movs	r3, #0
 8009f28:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009f30:	f107 030c 	add.w	r3, r7, #12
 8009f34:	2230      	movs	r2, #48	@ 0x30
 8009f36:	2100      	movs	r1, #0
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f00f fc4b 	bl	80197d4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009f3e:	f107 030c 	add.w	r3, r7, #12
 8009f42:	2230      	movs	r2, #48	@ 0x30
 8009f44:	2100      	movs	r1, #0
 8009f46:	4618      	mov	r0, r3
 8009f48:	f00f fc44 	bl	80197d4 <memset>

  for(q = p; q != NULL; q = q->next)
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f50:	e045      	b.n	8009fde <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f54:	2b03      	cmp	r3, #3
 8009f56:	d902      	bls.n	8009f5e <low_level_output+0x46>
      return ERR_IF;
 8009f58:	f06f 030b 	mvn.w	r3, #11
 8009f5c:	e07f      	b.n	800a05e <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8009f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f60:	6859      	ldr	r1, [r3, #4]
 8009f62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f64:	4613      	mov	r3, r2
 8009f66:	005b      	lsls	r3, r3, #1
 8009f68:	4413      	add	r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	3348      	adds	r3, #72	@ 0x48
 8009f6e:	443b      	add	r3, r7
 8009f70:	3b3c      	subs	r3, #60	@ 0x3c
 8009f72:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f76:	895b      	ldrh	r3, [r3, #10]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	005b      	lsls	r3, r3, #1
 8009f80:	4413      	add	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	3348      	adds	r3, #72	@ 0x48
 8009f86:	443b      	add	r3, r7
 8009f88:	3b38      	subs	r3, #56	@ 0x38
 8009f8a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d011      	beq.n	8009fb6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f94:	1e5a      	subs	r2, r3, #1
 8009f96:	f107 000c 	add.w	r0, r7, #12
 8009f9a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	005b      	lsls	r3, r3, #1
 8009fa0:	440b      	add	r3, r1
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	18c1      	adds	r1, r0, r3
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	4413      	add	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	3348      	adds	r3, #72	@ 0x48
 8009fb0:	443b      	add	r3, r7
 8009fb2:	3b34      	subs	r3, #52	@ 0x34
 8009fb4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d109      	bne.n	8009fd2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8009fbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	005b      	lsls	r3, r3, #1
 8009fc4:	4413      	add	r3, r2
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	3348      	adds	r3, #72	@ 0x48
 8009fca:	443b      	add	r3, r7
 8009fcc:	3b34      	subs	r3, #52	@ 0x34
 8009fce:	2200      	movs	r2, #0
 8009fd0:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8009fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d1b6      	bne.n	8009f52 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	891b      	ldrh	r3, [r3, #8]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	4b1f      	ldr	r3, [pc, #124]	@ (800a068 <low_level_output+0x150>)
 8009fec:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009fee:	4a1e      	ldr	r2, [pc, #120]	@ (800a068 <low_level_output+0x150>)
 8009ff0:	f107 030c 	add.w	r3, r7, #12
 8009ff4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009ff6:	4a1c      	ldr	r2, [pc, #112]	@ (800a068 <low_level_output+0x150>)
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8009ffc:	6838      	ldr	r0, [r7, #0]
 8009ffe:	f006 faa5 	bl	801054c <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800a002:	4919      	ldr	r1, [pc, #100]	@ (800a068 <low_level_output+0x150>)
 800a004:	4819      	ldr	r0, [pc, #100]	@ (800a06c <low_level_output+0x154>)
 800a006:	f7f8 ff69 	bl	8002edc <HAL_ETH_Transmit_IT>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d103      	bne.n	800a018 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a016:	e01b      	b.n	800a050 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800a018:	4814      	ldr	r0, [pc, #80]	@ (800a06c <low_level_output+0x154>)
 800a01a:	f7f9 fd41 	bl	8003aa0 <HAL_ETH_GetError>
 800a01e:	4603      	mov	r3, r0
 800a020:	f003 0302 	and.w	r3, r3, #2
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00d      	beq.n	800a044 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800a028:	4b11      	ldr	r3, [pc, #68]	@ (800a070 <low_level_output+0x158>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800a030:	4618      	mov	r0, r3
 800a032:	f000 fdd5 	bl	800abe0 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800a036:	480d      	ldr	r0, [pc, #52]	@ (800a06c <low_level_output+0x154>)
 800a038:	f7f9 f8d7 	bl	80031ea <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800a03c:	23fe      	movs	r3, #254	@ 0xfe
 800a03e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a042:	e005      	b.n	800a050 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800a044:	6838      	ldr	r0, [r7, #0]
 800a046:	f006 f9db 	bl	8010400 <pbuf_free>
        errval =  ERR_IF;
 800a04a:	23f4      	movs	r3, #244	@ 0xf4
 800a04c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800a050:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a054:	f113 0f02 	cmn.w	r3, #2
 800a058:	d0d3      	beq.n	800a002 <low_level_output+0xea>

  return errval;
 800a05a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3748      	adds	r7, #72	@ 0x48
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	240006a8 	.word	0x240006a8
 800a06c:	240005f8 	.word	0x240005f8
 800a070:	240005f4 	.word	0x240005f4

0800a074 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a07c:	2300      	movs	r3, #0
 800a07e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a080:	4b07      	ldr	r3, [pc, #28]	@ (800a0a0 <low_level_input+0x2c>)
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d105      	bne.n	800a094 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a088:	f107 030c 	add.w	r3, r7, #12
 800a08c:	4619      	mov	r1, r3
 800a08e:	4805      	ldr	r0, [pc, #20]	@ (800a0a4 <low_level_input+0x30>)
 800a090:	f7f8 ff75 	bl	8002f7e <HAL_ETH_ReadData>
  }

  return p;
 800a094:	68fb      	ldr	r3, [r7, #12]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	240005ec 	.word	0x240005ec
 800a0a4:	240005f8 	.word	0x240005f8

0800a0a8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a0b8:	4b0f      	ldr	r3, [pc, #60]	@ (800a0f8 <ethernetif_input+0x50>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f04f 31ff 	mov.w	r1, #4294967295
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f000 fd8d 	bl	800abe0 <osSemaphoreAcquire>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1f5      	bne.n	800a0b8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800a0cc:	68b8      	ldr	r0, [r7, #8]
 800a0ce:	f7ff ffd1 	bl	800a074 <low_level_input>
 800a0d2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00a      	beq.n	800a0f0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	68b9      	ldr	r1, [r7, #8]
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	4798      	blx	r3
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f006 f988 	bl	8010400 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1ea      	bne.n	800a0cc <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a0f6:	e7df      	b.n	800a0b8 <ethernetif_input+0x10>
 800a0f8:	240005f0 	.word	0x240005f0

0800a0fc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d106      	bne.n	800a118 <ethernetif_init+0x1c>
 800a10a:	4b0e      	ldr	r3, [pc, #56]	@ (800a144 <ethernetif_init+0x48>)
 800a10c:	f240 2215 	movw	r2, #533	@ 0x215
 800a110:	490d      	ldr	r1, [pc, #52]	@ (800a148 <ethernetif_init+0x4c>)
 800a112:	480e      	ldr	r0, [pc, #56]	@ (800a14c <ethernetif_init+0x50>)
 800a114:	f00f fa62 	bl	80195dc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2273      	movs	r2, #115	@ 0x73
 800a11c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2274      	movs	r2, #116	@ 0x74
 800a124:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4a09      	ldr	r2, [pc, #36]	@ (800a150 <ethernetif_init+0x54>)
 800a12c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a08      	ldr	r2, [pc, #32]	@ (800a154 <ethernetif_init+0x58>)
 800a132:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7ff fdaf 	bl	8009c98 <low_level_init>

  return ERR_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	0801b958 	.word	0x0801b958
 800a148:	0801b974 	.word	0x0801b974
 800a14c:	0801b984 	.word	0x0801b984
 800a150:	080171e5 	.word	0x080171e5
 800a154:	08009f19 	.word	0x08009f19

0800a158 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a164:	68f9      	ldr	r1, [r7, #12]
 800a166:	4809      	ldr	r0, [pc, #36]	@ (800a18c <pbuf_free_custom+0x34>)
 800a168:	f005 fa82 	bl	800f670 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a16c:	4b08      	ldr	r3, [pc, #32]	@ (800a190 <pbuf_free_custom+0x38>)
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	2b01      	cmp	r3, #1
 800a172:	d107      	bne.n	800a184 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a174:	4b06      	ldr	r3, [pc, #24]	@ (800a190 <pbuf_free_custom+0x38>)
 800a176:	2200      	movs	r2, #0
 800a178:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800a17a:	4b06      	ldr	r3, [pc, #24]	@ (800a194 <pbuf_free_custom+0x3c>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 fd80 	bl	800ac84 <osSemaphoreRelease>
  }
}
 800a184:	bf00      	nop
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	0801e5a8 	.word	0x0801e5a8
 800a190:	240005ec 	.word	0x240005ec
 800a194:	240005f0 	.word	0x240005f0

0800a198 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a19c:	f7f8 fb26 	bl	80027ec <HAL_GetTick>
 800a1a0:	4603      	mov	r3, r0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	bd80      	pop	{r7, pc}
	...

0800a1a8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b08e      	sub	sp, #56	@ 0x38
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	601a      	str	r2, [r3, #0]
 800a1b8:	605a      	str	r2, [r3, #4]
 800a1ba:	609a      	str	r2, [r3, #8]
 800a1bc:	60da      	str	r2, [r3, #12]
 800a1be:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a4d      	ldr	r2, [pc, #308]	@ (800a2fc <HAL_ETH_MspInit+0x154>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	f040 8093 	bne.w	800a2f2 <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800a1cc:	4b4c      	ldr	r3, [pc, #304]	@ (800a300 <HAL_ETH_MspInit+0x158>)
 800a1ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a1d2:	4a4b      	ldr	r2, [pc, #300]	@ (800a300 <HAL_ETH_MspInit+0x158>)
 800a1d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1d8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a1dc:	4b48      	ldr	r3, [pc, #288]	@ (800a300 <HAL_ETH_MspInit+0x158>)
 800a1de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a1e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a1e6:	623b      	str	r3, [r7, #32]
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800a1ea:	4b45      	ldr	r3, [pc, #276]	@ (800a300 <HAL_ETH_MspInit+0x158>)
 800a1ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a1f0:	4a43      	ldr	r2, [pc, #268]	@ (800a300 <HAL_ETH_MspInit+0x158>)
 800a1f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a1f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a1fa:	4b41      	ldr	r3, [pc, #260]	@ (800a300 <HAL_ETH_MspInit+0x158>)
 800a1fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a204:	61fb      	str	r3, [r7, #28]
 800a206:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800a208:	4b3d      	ldr	r3, [pc, #244]	@ (800a300 <HAL_ETH_MspInit+0x158>)
 800a20a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a20e:	4a3c      	ldr	r2, [pc, #240]	@ (800a300 <HAL_ETH_MspInit+0x158>)
 800a210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a214:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a218:	4b39      	ldr	r3, [pc, #228]	@ (800a300 <HAL_ETH_MspInit+0x158>)
 800a21a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a21e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a222:	61bb      	str	r3, [r7, #24]
 800a224:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a226:	4b36      	ldr	r3, [pc, #216]	@ (800a300 <HAL_ETH_MspInit+0x158>)
 800a228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a22c:	4a34      	ldr	r2, [pc, #208]	@ (800a300 <HAL_ETH_MspInit+0x158>)
 800a22e:	f043 0304 	orr.w	r3, r3, #4
 800a232:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a236:	4b32      	ldr	r3, [pc, #200]	@ (800a300 <HAL_ETH_MspInit+0x158>)
 800a238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a23c:	f003 0304 	and.w	r3, r3, #4
 800a240:	617b      	str	r3, [r7, #20]
 800a242:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a244:	4b2e      	ldr	r3, [pc, #184]	@ (800a300 <HAL_ETH_MspInit+0x158>)
 800a246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a24a:	4a2d      	ldr	r2, [pc, #180]	@ (800a300 <HAL_ETH_MspInit+0x158>)
 800a24c:	f043 0301 	orr.w	r3, r3, #1
 800a250:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a254:	4b2a      	ldr	r3, [pc, #168]	@ (800a300 <HAL_ETH_MspInit+0x158>)
 800a256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a25a:	f003 0301 	and.w	r3, r3, #1
 800a25e:	613b      	str	r3, [r7, #16]
 800a260:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a262:	4b27      	ldr	r3, [pc, #156]	@ (800a300 <HAL_ETH_MspInit+0x158>)
 800a264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a268:	4a25      	ldr	r2, [pc, #148]	@ (800a300 <HAL_ETH_MspInit+0x158>)
 800a26a:	f043 0302 	orr.w	r3, r3, #2
 800a26e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a272:	4b23      	ldr	r3, [pc, #140]	@ (800a300 <HAL_ETH_MspInit+0x158>)
 800a274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a278:	f003 0302 	and.w	r3, r3, #2
 800a27c:	60fb      	str	r3, [r7, #12]
 800a27e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a280:	2332      	movs	r3, #50	@ 0x32
 800a282:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a284:	2302      	movs	r3, #2
 800a286:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a288:	2300      	movs	r3, #0
 800a28a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a28c:	2303      	movs	r3, #3
 800a28e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a290:	230b      	movs	r3, #11
 800a292:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a298:	4619      	mov	r1, r3
 800a29a:	481a      	ldr	r0, [pc, #104]	@ (800a304 <HAL_ETH_MspInit+0x15c>)
 800a29c:	f7fa f99c 	bl	80045d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a2a0:	2386      	movs	r3, #134	@ 0x86
 800a2a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a2b0:	230b      	movs	r3, #11
 800a2b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	4813      	ldr	r0, [pc, #76]	@ (800a308 <HAL_ETH_MspInit+0x160>)
 800a2bc:	f7fa f98c 	bl	80045d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800a2c0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800a2c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2ce:	2303      	movs	r3, #3
 800a2d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a2d2:	230b      	movs	r3, #11
 800a2d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a2d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2da:	4619      	mov	r1, r3
 800a2dc:	480b      	ldr	r0, [pc, #44]	@ (800a30c <HAL_ETH_MspInit+0x164>)
 800a2de:	f7fa f97b 	bl	80045d8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	2105      	movs	r1, #5
 800a2e6:	203d      	movs	r0, #61	@ 0x3d
 800a2e8:	f7f8 fb6e 	bl	80029c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a2ec:	203d      	movs	r0, #61	@ 0x3d
 800a2ee:	f7f8 fb85 	bl	80029fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a2f2:	bf00      	nop
 800a2f4:	3738      	adds	r7, #56	@ 0x38
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	40028000 	.word	0x40028000
 800a300:	58024400 	.word	0x58024400
 800a304:	58020800 	.word	0x58020800
 800a308:	58020000 	.word	0x58020000
 800a30c:	58020400 	.word	0x58020400

0800a310 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a314:	4802      	ldr	r0, [pc, #8]	@ (800a320 <ETH_PHY_IO_Init+0x10>)
 800a316:	f7f9 fb73 	bl	8003a00 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	240005f8 	.word	0x240005f8

0800a324 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a324:	b480      	push	{r7}
 800a326:	af00      	add	r7, sp, #0
  return 0;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	68f9      	ldr	r1, [r7, #12]
 800a346:	4807      	ldr	r0, [pc, #28]	@ (800a364 <ETH_PHY_IO_ReadReg+0x30>)
 800a348:	f7f9 f8c4 	bl	80034d4 <HAL_ETH_ReadPHYRegister>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d002      	beq.n	800a358 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a352:	f04f 33ff 	mov.w	r3, #4294967295
 800a356:	e000      	b.n	800a35a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	240005f8 	.word	0x240005f8

0800a368 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	68f9      	ldr	r1, [r7, #12]
 800a37a:	4807      	ldr	r0, [pc, #28]	@ (800a398 <ETH_PHY_IO_WriteReg+0x30>)
 800a37c:	f7f9 f8fe 	bl	800357c <HAL_ETH_WritePHYRegister>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d002      	beq.n	800a38c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a386:	f04f 33ff 	mov.w	r3, #4294967295
 800a38a:	e000      	b.n	800a38e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	240005f8 	.word	0x240005f8

0800a39c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a3a0:	f7f8 fa24 	bl	80027ec <HAL_GetTick>
 800a3a4:	4603      	mov	r3, r0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	bd80      	pop	{r7, pc}
	...

0800a3ac <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b0a0      	sub	sp, #128	@ 0x80
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a3b4:	f107 0308 	add.w	r3, r7, #8
 800a3b8:	2264      	movs	r2, #100	@ 0x64
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f00f fa09 	bl	80197d4 <memset>
  int32_t PHYLinkState = 0;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a3d6:	483a      	ldr	r0, [pc, #232]	@ (800a4c0 <ethernet_link_thread+0x114>)
 800a3d8:	f7f8 f930 	bl	800263c <LAN8742_GetLinkState>
 800a3dc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a3de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a3e4:	089b      	lsrs	r3, r3, #2
 800a3e6:	f003 0301 	and.w	r3, r3, #1
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00c      	beq.n	800a40a <ethernet_link_thread+0x5e>
 800a3f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	dc09      	bgt.n	800a40a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800a3f6:	4833      	ldr	r0, [pc, #204]	@ (800a4c4 <ethernet_link_thread+0x118>)
 800a3f8:	f7f8 fcf8 	bl	8002dec <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800a3fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a3fe:	f005 fbbb 	bl	800fb78 <netif_set_down>
    netif_set_link_down(netif);
 800a402:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a404:	f005 fc1e 	bl	800fc44 <netif_set_link_down>
 800a408:	e055      	b.n	800a4b6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a40a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a40c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a410:	f003 0304 	and.w	r3, r3, #4
 800a414:	2b00      	cmp	r3, #0
 800a416:	d14e      	bne.n	800a4b6 <ethernet_link_thread+0x10a>
 800a418:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	dd4b      	ble.n	800a4b6 <ethernet_link_thread+0x10a>
  {

    switch (PHYLinkState)
 800a41e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a420:	3b02      	subs	r3, #2
 800a422:	2b03      	cmp	r3, #3
 800a424:	d82a      	bhi.n	800a47c <ethernet_link_thread+0xd0>
 800a426:	a201      	add	r2, pc, #4	@ (adr r2, 800a42c <ethernet_link_thread+0x80>)
 800a428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42c:	0800a43d 	.word	0x0800a43d
 800a430:	0800a44f 	.word	0x0800a44f
 800a434:	0800a45f 	.word	0x0800a45f
 800a438:	0800a46f 	.word	0x0800a46f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a43c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a440:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800a442:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a446:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a448:	2301      	movs	r3, #1
 800a44a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a44c:	e017      	b.n	800a47e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a44e:	2300      	movs	r3, #0
 800a450:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800a452:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a456:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a458:	2301      	movs	r3, #1
 800a45a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a45c:	e00f      	b.n	800a47e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a45e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a462:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800a464:	2300      	movs	r3, #0
 800a466:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a468:	2301      	movs	r3, #1
 800a46a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a46c:	e007      	b.n	800a47e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a46e:	2300      	movs	r3, #0
 800a470:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800a472:	2300      	movs	r3, #0
 800a474:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a476:	2301      	movs	r3, #1
 800a478:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a47a:	e000      	b.n	800a47e <ethernet_link_thread+0xd2>
    default:
      break;
 800a47c:	bf00      	nop
    }

    if(linkchanged)
 800a47e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a480:	2b00      	cmp	r3, #0
 800a482:	d018      	beq.n	800a4b6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a484:	f107 0308 	add.w	r3, r7, #8
 800a488:	4619      	mov	r1, r3
 800a48a:	480e      	ldr	r0, [pc, #56]	@ (800a4c4 <ethernet_link_thread+0x118>)
 800a48c:	f7f9 f8ca 	bl	8003624 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a490:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a492:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800a494:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a496:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a498:	f107 0308 	add.w	r3, r7, #8
 800a49c:	4619      	mov	r1, r3
 800a49e:	4809      	ldr	r0, [pc, #36]	@ (800a4c4 <ethernet_link_thread+0x118>)
 800a4a0:	f7f9 fa94 	bl	80039cc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800a4a4:	4807      	ldr	r0, [pc, #28]	@ (800a4c4 <ethernet_link_thread+0x118>)
 800a4a6:	f7f8 fc2d 	bl	8002d04 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800a4aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a4ac:	f005 faf8 	bl	800faa0 <netif_set_up>
      netif_set_link_up(netif);
 800a4b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a4b2:	f005 fb93 	bl	800fbdc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800a4b6:	2064      	movs	r0, #100	@ 0x64
 800a4b8:	f000 f9df 	bl	800a87a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a4bc:	e78b      	b.n	800a3d6 <ethernet_link_thread+0x2a>
 800a4be:	bf00      	nop
 800a4c0:	240006e0 	.word	0x240006e0
 800a4c4:	240005f8 	.word	0x240005f8

0800a4c8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af02      	add	r7, sp, #8
 800a4ce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a4d0:	4812      	ldr	r0, [pc, #72]	@ (800a51c <HAL_ETH_RxAllocateCallback+0x54>)
 800a4d2:	f005 f859 	bl	800f588 <memp_malloc_pool>
 800a4d6:	60f8      	str	r0, [r7, #12]
  if (p)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d014      	beq.n	800a508 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f103 0220 	add.w	r2, r3, #32
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	4a0d      	ldr	r2, [pc, #52]	@ (800a520 <HAL_ETH_RxAllocateCallback+0x58>)
 800a4ec:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a4f6:	9201      	str	r2, [sp, #4]
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2241      	movs	r2, #65	@ 0x41
 800a4fe:	2100      	movs	r1, #0
 800a500:	2000      	movs	r0, #0
 800a502:	f005 fdc3 	bl	801008c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800a506:	e005      	b.n	800a514 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800a508:	4b06      	ldr	r3, [pc, #24]	@ (800a524 <HAL_ETH_RxAllocateCallback+0x5c>)
 800a50a:	2201      	movs	r2, #1
 800a50c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	601a      	str	r2, [r3, #0]
}
 800a514:	bf00      	nop
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	0801e5a8 	.word	0x0801e5a8
 800a520:	0800a159 	.word	0x0800a159
 800a524:	240005ec 	.word	0x240005ec

0800a528 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800a528:	b480      	push	{r7}
 800a52a:	b08d      	sub	sp, #52	@ 0x34
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800a53e:	2300      	movs	r3, #0
 800a540:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	3b20      	subs	r3, #32
 800a546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 800a548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a54a:	2200      	movs	r2, #0
 800a54c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800a54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a550:	2200      	movs	r2, #0
 800a552:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800a554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a556:	887a      	ldrh	r2, [r7, #2]
 800a558:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800a55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d103      	bne.n	800a56a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800a562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a564:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a566:	601a      	str	r2, [r3, #0]
 800a568:	e003      	b.n	800a572 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800a56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a570:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800a572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a574:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a576:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800a578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a57e:	e009      	b.n	800a594 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800a580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a582:	891a      	ldrh	r2, [r3, #8]
 800a584:	887b      	ldrh	r3, [r7, #2]
 800a586:	4413      	add	r3, r2
 800a588:	b29a      	uxth	r2, r3
 800a58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a58c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800a58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1f2      	bne.n	800a580 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800a59a:	887b      	ldrh	r3, [r7, #2]
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	623a      	str	r2, [r7, #32]
 800a5a0:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	dd1d      	ble.n	800a5e4 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800a5a8:	6a3b      	ldr	r3, [r7, #32]
 800a5aa:	f003 021f 	and.w	r2, r3, #31
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800a5b4:	6a3b      	ldr	r3, [r7, #32]
 800a5b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a5b8:	f3bf 8f4f 	dsb	sy
}
 800a5bc:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800a5be:	4a0d      	ldr	r2, [pc, #52]	@ (800a5f4 <HAL_ETH_RxLinkCallback+0xcc>)
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	3320      	adds	r3, #32
 800a5ca:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	3b20      	subs	r3, #32
 800a5d0:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	dcf2      	bgt.n	800a5be <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800a5d8:	f3bf 8f4f 	dsb	sy
}
 800a5dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a5de:	f3bf 8f6f 	isb	sy
}
 800a5e2:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800a5e4:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800a5e6:	bf00      	nop
 800a5e8:	3734      	adds	r7, #52	@ 0x34
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	e000ed00 	.word	0xe000ed00

0800a5f8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f005 fefd 	bl	8010400 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800a606:	bf00      	nop
 800a608:	3708      	adds	r7, #8
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
	...

0800a610 <__NVIC_SetPriority>:
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	4603      	mov	r3, r0
 800a618:	6039      	str	r1, [r7, #0]
 800a61a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a61c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a620:	2b00      	cmp	r3, #0
 800a622:	db0a      	blt.n	800a63a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	b2da      	uxtb	r2, r3
 800a628:	490c      	ldr	r1, [pc, #48]	@ (800a65c <__NVIC_SetPriority+0x4c>)
 800a62a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a62e:	0112      	lsls	r2, r2, #4
 800a630:	b2d2      	uxtb	r2, r2
 800a632:	440b      	add	r3, r1
 800a634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a638:	e00a      	b.n	800a650 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	b2da      	uxtb	r2, r3
 800a63e:	4908      	ldr	r1, [pc, #32]	@ (800a660 <__NVIC_SetPriority+0x50>)
 800a640:	88fb      	ldrh	r3, [r7, #6]
 800a642:	f003 030f 	and.w	r3, r3, #15
 800a646:	3b04      	subs	r3, #4
 800a648:	0112      	lsls	r2, r2, #4
 800a64a:	b2d2      	uxtb	r2, r2
 800a64c:	440b      	add	r3, r1
 800a64e:	761a      	strb	r2, [r3, #24]
}
 800a650:	bf00      	nop
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr
 800a65c:	e000e100 	.word	0xe000e100
 800a660:	e000ed00 	.word	0xe000ed00

0800a664 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a664:	b580      	push	{r7, lr}
 800a666:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a668:	4b05      	ldr	r3, [pc, #20]	@ (800a680 <SysTick_Handler+0x1c>)
 800a66a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a66c:	f002 fcc6 	bl	800cffc <xTaskGetSchedulerState>
 800a670:	4603      	mov	r3, r0
 800a672:	2b01      	cmp	r3, #1
 800a674:	d001      	beq.n	800a67a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a676:	f003 fbbf 	bl	800ddf8 <xPortSysTickHandler>
  }
}
 800a67a:	bf00      	nop
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	e000e010 	.word	0xe000e010

0800a684 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a684:	b580      	push	{r7, lr}
 800a686:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a688:	2100      	movs	r1, #0
 800a68a:	f06f 0004 	mvn.w	r0, #4
 800a68e:	f7ff ffbf 	bl	800a610 <__NVIC_SetPriority>
#endif
}
 800a692:	bf00      	nop
 800a694:	bd80      	pop	{r7, pc}
	...

0800a698 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a69e:	f3ef 8305 	mrs	r3, IPSR
 800a6a2:	603b      	str	r3, [r7, #0]
  return(result);
 800a6a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d003      	beq.n	800a6b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a6aa:	f06f 0305 	mvn.w	r3, #5
 800a6ae:	607b      	str	r3, [r7, #4]
 800a6b0:	e00c      	b.n	800a6cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a6b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a6dc <osKernelInitialize+0x44>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d105      	bne.n	800a6c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a6ba:	4b08      	ldr	r3, [pc, #32]	@ (800a6dc <osKernelInitialize+0x44>)
 800a6bc:	2201      	movs	r2, #1
 800a6be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	607b      	str	r3, [r7, #4]
 800a6c4:	e002      	b.n	800a6cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a6cc:	687b      	ldr	r3, [r7, #4]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	370c      	adds	r7, #12
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	24000700 	.word	0x24000700

0800a6e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6e6:	f3ef 8305 	mrs	r3, IPSR
 800a6ea:	603b      	str	r3, [r7, #0]
  return(result);
 800a6ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d003      	beq.n	800a6fa <osKernelStart+0x1a>
    stat = osErrorISR;
 800a6f2:	f06f 0305 	mvn.w	r3, #5
 800a6f6:	607b      	str	r3, [r7, #4]
 800a6f8:	e010      	b.n	800a71c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a6fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a728 <osKernelStart+0x48>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d109      	bne.n	800a716 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a702:	f7ff ffbf 	bl	800a684 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a706:	4b08      	ldr	r3, [pc, #32]	@ (800a728 <osKernelStart+0x48>)
 800a708:	2202      	movs	r2, #2
 800a70a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a70c:	f001 fff0 	bl	800c6f0 <vTaskStartScheduler>
      stat = osOK;
 800a710:	2300      	movs	r3, #0
 800a712:	607b      	str	r3, [r7, #4]
 800a714:	e002      	b.n	800a71c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a716:	f04f 33ff 	mov.w	r3, #4294967295
 800a71a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a71c:	687b      	ldr	r3, [r7, #4]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3708      	adds	r7, #8
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	24000700 	.word	0x24000700

0800a72c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a732:	f3ef 8305 	mrs	r3, IPSR
 800a736:	603b      	str	r3, [r7, #0]
  return(result);
 800a738:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d003      	beq.n	800a746 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800a73e:	f002 f903 	bl	800c948 <xTaskGetTickCountFromISR>
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	e002      	b.n	800a74c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800a746:	f002 f8ef 	bl	800c928 <xTaskGetTickCount>
 800a74a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800a74c:	687b      	ldr	r3, [r7, #4]
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a756:	b580      	push	{r7, lr}
 800a758:	b08e      	sub	sp, #56	@ 0x38
 800a75a:	af04      	add	r7, sp, #16
 800a75c:	60f8      	str	r0, [r7, #12]
 800a75e:	60b9      	str	r1, [r7, #8]
 800a760:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a762:	2300      	movs	r3, #0
 800a764:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a766:	f3ef 8305 	mrs	r3, IPSR
 800a76a:	617b      	str	r3, [r7, #20]
  return(result);
 800a76c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d17e      	bne.n	800a870 <osThreadNew+0x11a>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d07b      	beq.n	800a870 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a778:	2380      	movs	r3, #128	@ 0x80
 800a77a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a77c:	2318      	movs	r3, #24
 800a77e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a780:	2300      	movs	r3, #0
 800a782:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a784:	f04f 33ff 	mov.w	r3, #4294967295
 800a788:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d045      	beq.n	800a81c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d002      	beq.n	800a79e <osThreadNew+0x48>
        name = attr->name;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	699b      	ldr	r3, [r3, #24]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d002      	beq.n	800a7ac <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	699b      	ldr	r3, [r3, #24]
 800a7aa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d008      	beq.n	800a7c4 <osThreadNew+0x6e>
 800a7b2:	69fb      	ldr	r3, [r7, #28]
 800a7b4:	2b38      	cmp	r3, #56	@ 0x38
 800a7b6:	d805      	bhi.n	800a7c4 <osThreadNew+0x6e>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	f003 0301 	and.w	r3, r3, #1
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d001      	beq.n	800a7c8 <osThreadNew+0x72>
        return (NULL);
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	e054      	b.n	800a872 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	695b      	ldr	r3, [r3, #20]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d003      	beq.n	800a7d8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	695b      	ldr	r3, [r3, #20]
 800a7d4:	089b      	lsrs	r3, r3, #2
 800a7d6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00e      	beq.n	800a7fe <osThreadNew+0xa8>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	2ba7      	cmp	r3, #167	@ 0xa7
 800a7e6:	d90a      	bls.n	800a7fe <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d006      	beq.n	800a7fe <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	695b      	ldr	r3, [r3, #20]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d002      	beq.n	800a7fe <osThreadNew+0xa8>
        mem = 1;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	61bb      	str	r3, [r7, #24]
 800a7fc:	e010      	b.n	800a820 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10c      	bne.n	800a820 <osThreadNew+0xca>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d108      	bne.n	800a820 <osThreadNew+0xca>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d104      	bne.n	800a820 <osThreadNew+0xca>
          mem = 0;
 800a816:	2300      	movs	r3, #0
 800a818:	61bb      	str	r3, [r7, #24]
 800a81a:	e001      	b.n	800a820 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a81c:	2300      	movs	r3, #0
 800a81e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	2b01      	cmp	r3, #1
 800a824:	d110      	bne.n	800a848 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a82e:	9202      	str	r2, [sp, #8]
 800a830:	9301      	str	r3, [sp, #4]
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	6a3a      	ldr	r2, [r7, #32]
 800a83a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f001 fd63 	bl	800c308 <xTaskCreateStatic>
 800a842:	4603      	mov	r3, r0
 800a844:	613b      	str	r3, [r7, #16]
 800a846:	e013      	b.n	800a870 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d110      	bne.n	800a870 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a84e:	6a3b      	ldr	r3, [r7, #32]
 800a850:	b29a      	uxth	r2, r3
 800a852:	f107 0310 	add.w	r3, r7, #16
 800a856:	9301      	str	r3, [sp, #4]
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	9300      	str	r3, [sp, #0]
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f001 fdb1 	bl	800c3c8 <xTaskCreate>
 800a866:	4603      	mov	r3, r0
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d001      	beq.n	800a870 <osThreadNew+0x11a>
            hTask = NULL;
 800a86c:	2300      	movs	r3, #0
 800a86e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a870:	693b      	ldr	r3, [r7, #16]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3728      	adds	r7, #40	@ 0x28
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b084      	sub	sp, #16
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a882:	f3ef 8305 	mrs	r3, IPSR
 800a886:	60bb      	str	r3, [r7, #8]
  return(result);
 800a888:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d003      	beq.n	800a896 <osDelay+0x1c>
    stat = osErrorISR;
 800a88e:	f06f 0305 	mvn.w	r3, #5
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	e007      	b.n	800a8a6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a896:	2300      	movs	r3, #0
 800a898:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d002      	beq.n	800a8a6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f001 feef 	bl	800c684 <vTaskDelay>
    }
  }

  return (stat);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b088      	sub	sp, #32
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8bc:	f3ef 8305 	mrs	r3, IPSR
 800a8c0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8c2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d174      	bne.n	800a9b2 <osMutexNew+0x102>
    if (attr != NULL) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d003      	beq.n	800a8d6 <osMutexNew+0x26>
      type = attr->attr_bits;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	61bb      	str	r3, [r7, #24]
 800a8d4:	e001      	b.n	800a8da <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	f003 0301 	and.w	r3, r3, #1
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <osMutexNew+0x3a>
      rmtx = 1U;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	617b      	str	r3, [r7, #20]
 800a8e8:	e001      	b.n	800a8ee <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	f003 0308 	and.w	r3, r3, #8
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d15c      	bne.n	800a9b2 <osMutexNew+0x102>
      mem = -1;
 800a8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8fc:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d015      	beq.n	800a930 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d006      	beq.n	800a91a <osMutexNew+0x6a>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	2b4f      	cmp	r3, #79	@ 0x4f
 800a912:	d902      	bls.n	800a91a <osMutexNew+0x6a>
          mem = 1;
 800a914:	2301      	movs	r3, #1
 800a916:	613b      	str	r3, [r7, #16]
 800a918:	e00c      	b.n	800a934 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d108      	bne.n	800a934 <osMutexNew+0x84>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d104      	bne.n	800a934 <osMutexNew+0x84>
            mem = 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	613b      	str	r3, [r7, #16]
 800a92e:	e001      	b.n	800a934 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a930:	2300      	movs	r3, #0
 800a932:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d112      	bne.n	800a960 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d007      	beq.n	800a950 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	4619      	mov	r1, r3
 800a946:	2004      	movs	r0, #4
 800a948:	f000 fd71 	bl	800b42e <xQueueCreateMutexStatic>
 800a94c:	61f8      	str	r0, [r7, #28]
 800a94e:	e016      	b.n	800a97e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	4619      	mov	r1, r3
 800a956:	2001      	movs	r0, #1
 800a958:	f000 fd69 	bl	800b42e <xQueueCreateMutexStatic>
 800a95c:	61f8      	str	r0, [r7, #28]
 800a95e:	e00e      	b.n	800a97e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d10b      	bne.n	800a97e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d004      	beq.n	800a976 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a96c:	2004      	movs	r0, #4
 800a96e:	f000 fd46 	bl	800b3fe <xQueueCreateMutex>
 800a972:	61f8      	str	r0, [r7, #28]
 800a974:	e003      	b.n	800a97e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a976:	2001      	movs	r0, #1
 800a978:	f000 fd41 	bl	800b3fe <xQueueCreateMutex>
 800a97c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00c      	beq.n	800a99e <osMutexNew+0xee>
        if (attr != NULL) {
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d003      	beq.n	800a992 <osMutexNew+0xe2>
          name = attr->name;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	60fb      	str	r3, [r7, #12]
 800a990:	e001      	b.n	800a996 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a992:	2300      	movs	r3, #0
 800a994:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a996:	68f9      	ldr	r1, [r7, #12]
 800a998:	69f8      	ldr	r0, [r7, #28]
 800a99a:	f001 fc2d 	bl	800c1f8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d006      	beq.n	800a9b2 <osMutexNew+0x102>
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d003      	beq.n	800a9b2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	f043 0301 	orr.w	r3, r3, #1
 800a9b0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a9b2:	69fb      	ldr	r3, [r7, #28]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3720      	adds	r7, #32
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f023 0301 	bic.w	r3, r3, #1
 800a9cc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f003 0301 	and.w	r3, r3, #1
 800a9d4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9da:	f3ef 8305 	mrs	r3, IPSR
 800a9de:	60bb      	str	r3, [r7, #8]
  return(result);
 800a9e0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d003      	beq.n	800a9ee <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a9e6:	f06f 0305 	mvn.w	r3, #5
 800a9ea:	617b      	str	r3, [r7, #20]
 800a9ec:	e02c      	b.n	800aa48 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d103      	bne.n	800a9fc <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a9f4:	f06f 0303 	mvn.w	r3, #3
 800a9f8:	617b      	str	r3, [r7, #20]
 800a9fa:	e025      	b.n	800aa48 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d011      	beq.n	800aa26 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800aa02:	6839      	ldr	r1, [r7, #0]
 800aa04:	6938      	ldr	r0, [r7, #16]
 800aa06:	f000 fd62 	bl	800b4ce <xQueueTakeMutexRecursive>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d01b      	beq.n	800aa48 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d003      	beq.n	800aa1e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800aa16:	f06f 0301 	mvn.w	r3, #1
 800aa1a:	617b      	str	r3, [r7, #20]
 800aa1c:	e014      	b.n	800aa48 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800aa1e:	f06f 0302 	mvn.w	r3, #2
 800aa22:	617b      	str	r3, [r7, #20]
 800aa24:	e010      	b.n	800aa48 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800aa26:	6839      	ldr	r1, [r7, #0]
 800aa28:	6938      	ldr	r0, [r7, #16]
 800aa2a:	f001 f907 	bl	800bc3c <xQueueSemaphoreTake>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d009      	beq.n	800aa48 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d003      	beq.n	800aa42 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800aa3a:	f06f 0301 	mvn.w	r3, #1
 800aa3e:	617b      	str	r3, [r7, #20]
 800aa40:	e002      	b.n	800aa48 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800aa42:	f06f 0302 	mvn.w	r3, #2
 800aa46:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800aa48:	697b      	ldr	r3, [r7, #20]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3718      	adds	r7, #24
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b086      	sub	sp, #24
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f023 0301 	bic.w	r3, r3, #1
 800aa60:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f003 0301 	and.w	r3, r3, #1
 800aa68:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa6e:	f3ef 8305 	mrs	r3, IPSR
 800aa72:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa74:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d003      	beq.n	800aa82 <osMutexRelease+0x30>
    stat = osErrorISR;
 800aa7a:	f06f 0305 	mvn.w	r3, #5
 800aa7e:	617b      	str	r3, [r7, #20]
 800aa80:	e01f      	b.n	800aac2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d103      	bne.n	800aa90 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800aa88:	f06f 0303 	mvn.w	r3, #3
 800aa8c:	617b      	str	r3, [r7, #20]
 800aa8e:	e018      	b.n	800aac2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d009      	beq.n	800aaaa <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800aa96:	6938      	ldr	r0, [r7, #16]
 800aa98:	f000 fce4 	bl	800b464 <xQueueGiveMutexRecursive>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d00f      	beq.n	800aac2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800aaa2:	f06f 0302 	mvn.w	r3, #2
 800aaa6:	617b      	str	r3, [r7, #20]
 800aaa8:	e00b      	b.n	800aac2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800aaaa:	2300      	movs	r3, #0
 800aaac:	2200      	movs	r2, #0
 800aaae:	2100      	movs	r1, #0
 800aab0:	6938      	ldr	r0, [r7, #16]
 800aab2:	f000 fdb1 	bl	800b618 <xQueueGenericSend>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d002      	beq.n	800aac2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800aabc:	f06f 0302 	mvn.w	r3, #2
 800aac0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800aac2:	697b      	ldr	r3, [r7, #20]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3718      	adds	r7, #24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800aacc:	b580      	push	{r7, lr}
 800aace:	b08a      	sub	sp, #40	@ 0x28
 800aad0:	af02      	add	r7, sp, #8
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800aad8:	2300      	movs	r3, #0
 800aada:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aadc:	f3ef 8305 	mrs	r3, IPSR
 800aae0:	613b      	str	r3, [r7, #16]
  return(result);
 800aae2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d175      	bne.n	800abd4 <osSemaphoreNew+0x108>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d072      	beq.n	800abd4 <osSemaphoreNew+0x108>
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d86e      	bhi.n	800abd4 <osSemaphoreNew+0x108>
    mem = -1;
 800aaf6:	f04f 33ff 	mov.w	r3, #4294967295
 800aafa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d015      	beq.n	800ab2e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d006      	beq.n	800ab18 <osSemaphoreNew+0x4c>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	2b4f      	cmp	r3, #79	@ 0x4f
 800ab10:	d902      	bls.n	800ab18 <osSemaphoreNew+0x4c>
        mem = 1;
 800ab12:	2301      	movs	r3, #1
 800ab14:	61bb      	str	r3, [r7, #24]
 800ab16:	e00c      	b.n	800ab32 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d108      	bne.n	800ab32 <osSemaphoreNew+0x66>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d104      	bne.n	800ab32 <osSemaphoreNew+0x66>
          mem = 0;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	61bb      	str	r3, [r7, #24]
 800ab2c:	e001      	b.n	800ab32 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab38:	d04c      	beq.n	800abd4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d128      	bne.n	800ab92 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d10a      	bne.n	800ab5c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	2203      	movs	r2, #3
 800ab4c:	9200      	str	r2, [sp, #0]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	2100      	movs	r1, #0
 800ab52:	2001      	movs	r0, #1
 800ab54:	f000 fb5e 	bl	800b214 <xQueueGenericCreateStatic>
 800ab58:	61f8      	str	r0, [r7, #28]
 800ab5a:	e005      	b.n	800ab68 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ab5c:	2203      	movs	r2, #3
 800ab5e:	2100      	movs	r1, #0
 800ab60:	2001      	movs	r0, #1
 800ab62:	f000 fbd4 	bl	800b30e <xQueueGenericCreate>
 800ab66:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d022      	beq.n	800abb4 <osSemaphoreNew+0xe8>
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d01f      	beq.n	800abb4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ab74:	2300      	movs	r3, #0
 800ab76:	2200      	movs	r2, #0
 800ab78:	2100      	movs	r1, #0
 800ab7a:	69f8      	ldr	r0, [r7, #28]
 800ab7c:	f000 fd4c 	bl	800b618 <xQueueGenericSend>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d016      	beq.n	800abb4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ab86:	69f8      	ldr	r0, [r7, #28]
 800ab88:	f001 f9ea 	bl	800bf60 <vQueueDelete>
            hSemaphore = NULL;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	61fb      	str	r3, [r7, #28]
 800ab90:	e010      	b.n	800abb4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d108      	bne.n	800abaa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	68b9      	ldr	r1, [r7, #8]
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f000 fccb 	bl	800b53c <xQueueCreateCountingSemaphoreStatic>
 800aba6:	61f8      	str	r0, [r7, #28]
 800aba8:	e004      	b.n	800abb4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800abaa:	68b9      	ldr	r1, [r7, #8]
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	f000 fcfe 	bl	800b5ae <xQueueCreateCountingSemaphore>
 800abb2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00c      	beq.n	800abd4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d003      	beq.n	800abc8 <osSemaphoreNew+0xfc>
          name = attr->name;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	617b      	str	r3, [r7, #20]
 800abc6:	e001      	b.n	800abcc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800abc8:	2300      	movs	r3, #0
 800abca:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800abcc:	6979      	ldr	r1, [r7, #20]
 800abce:	69f8      	ldr	r0, [r7, #28]
 800abd0:	f001 fb12 	bl	800c1f8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800abd4:	69fb      	ldr	r3, [r7, #28]
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3720      	adds	r7, #32
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
	...

0800abe0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800abee:	2300      	movs	r3, #0
 800abf0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d103      	bne.n	800ac00 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800abf8:	f06f 0303 	mvn.w	r3, #3
 800abfc:	617b      	str	r3, [r7, #20]
 800abfe:	e039      	b.n	800ac74 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac00:	f3ef 8305 	mrs	r3, IPSR
 800ac04:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac06:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d022      	beq.n	800ac52 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d003      	beq.n	800ac1a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ac12:	f06f 0303 	mvn.w	r3, #3
 800ac16:	617b      	str	r3, [r7, #20]
 800ac18:	e02c      	b.n	800ac74 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ac1e:	f107 0308 	add.w	r3, r7, #8
 800ac22:	461a      	mov	r2, r3
 800ac24:	2100      	movs	r1, #0
 800ac26:	6938      	ldr	r0, [r7, #16]
 800ac28:	f001 f918 	bl	800be5c <xQueueReceiveFromISR>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d003      	beq.n	800ac3a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ac32:	f06f 0302 	mvn.w	r3, #2
 800ac36:	617b      	str	r3, [r7, #20]
 800ac38:	e01c      	b.n	800ac74 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d019      	beq.n	800ac74 <osSemaphoreAcquire+0x94>
 800ac40:	4b0f      	ldr	r3, [pc, #60]	@ (800ac80 <osSemaphoreAcquire+0xa0>)
 800ac42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac46:	601a      	str	r2, [r3, #0]
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	f3bf 8f6f 	isb	sy
 800ac50:	e010      	b.n	800ac74 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ac52:	6839      	ldr	r1, [r7, #0]
 800ac54:	6938      	ldr	r0, [r7, #16]
 800ac56:	f000 fff1 	bl	800bc3c <xQueueSemaphoreTake>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d009      	beq.n	800ac74 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d003      	beq.n	800ac6e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ac66:	f06f 0301 	mvn.w	r3, #1
 800ac6a:	617b      	str	r3, [r7, #20]
 800ac6c:	e002      	b.n	800ac74 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ac6e:	f06f 0302 	mvn.w	r3, #2
 800ac72:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ac74:	697b      	ldr	r3, [r7, #20]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3718      	adds	r7, #24
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	e000ed04 	.word	0xe000ed04

0800ac84 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ac90:	2300      	movs	r3, #0
 800ac92:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d103      	bne.n	800aca2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ac9a:	f06f 0303 	mvn.w	r3, #3
 800ac9e:	617b      	str	r3, [r7, #20]
 800aca0:	e02c      	b.n	800acfc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aca2:	f3ef 8305 	mrs	r3, IPSR
 800aca6:	60fb      	str	r3, [r7, #12]
  return(result);
 800aca8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d01a      	beq.n	800ace4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800acae:	2300      	movs	r3, #0
 800acb0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800acb2:	f107 0308 	add.w	r3, r7, #8
 800acb6:	4619      	mov	r1, r3
 800acb8:	6938      	ldr	r0, [r7, #16]
 800acba:	f000 fe4d 	bl	800b958 <xQueueGiveFromISR>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d003      	beq.n	800accc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800acc4:	f06f 0302 	mvn.w	r3, #2
 800acc8:	617b      	str	r3, [r7, #20]
 800acca:	e017      	b.n	800acfc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d014      	beq.n	800acfc <osSemaphoreRelease+0x78>
 800acd2:	4b0d      	ldr	r3, [pc, #52]	@ (800ad08 <osSemaphoreRelease+0x84>)
 800acd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	e00b      	b.n	800acfc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ace4:	2300      	movs	r3, #0
 800ace6:	2200      	movs	r2, #0
 800ace8:	2100      	movs	r1, #0
 800acea:	6938      	ldr	r0, [r7, #16]
 800acec:	f000 fc94 	bl	800b618 <xQueueGenericSend>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d002      	beq.n	800acfc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800acf6:	f06f 0302 	mvn.w	r3, #2
 800acfa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800acfc:	697b      	ldr	r3, [r7, #20]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3718      	adds	r7, #24
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	e000ed04 	.word	0xe000ed04

0800ad0c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b08a      	sub	sp, #40	@ 0x28
 800ad10:	af02      	add	r7, sp, #8
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad1c:	f3ef 8305 	mrs	r3, IPSR
 800ad20:	613b      	str	r3, [r7, #16]
  return(result);
 800ad22:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d15f      	bne.n	800ade8 <osMessageQueueNew+0xdc>
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d05c      	beq.n	800ade8 <osMessageQueueNew+0xdc>
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d059      	beq.n	800ade8 <osMessageQueueNew+0xdc>
    mem = -1;
 800ad34:	f04f 33ff 	mov.w	r3, #4294967295
 800ad38:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d029      	beq.n	800ad94 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d012      	beq.n	800ad6e <osMessageQueueNew+0x62>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	2b4f      	cmp	r3, #79	@ 0x4f
 800ad4e:	d90e      	bls.n	800ad6e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00a      	beq.n	800ad6e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	695a      	ldr	r2, [r3, #20]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	68b9      	ldr	r1, [r7, #8]
 800ad60:	fb01 f303 	mul.w	r3, r1, r3
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d302      	bcc.n	800ad6e <osMessageQueueNew+0x62>
        mem = 1;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	61bb      	str	r3, [r7, #24]
 800ad6c:	e014      	b.n	800ad98 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d110      	bne.n	800ad98 <osMessageQueueNew+0x8c>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10c      	bne.n	800ad98 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d108      	bne.n	800ad98 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d104      	bne.n	800ad98 <osMessageQueueNew+0x8c>
          mem = 0;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	61bb      	str	r3, [r7, #24]
 800ad92:	e001      	b.n	800ad98 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ad94:	2300      	movs	r3, #0
 800ad96:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d10b      	bne.n	800adb6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	691a      	ldr	r2, [r3, #16]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	2100      	movs	r1, #0
 800ada8:	9100      	str	r1, [sp, #0]
 800adaa:	68b9      	ldr	r1, [r7, #8]
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f000 fa31 	bl	800b214 <xQueueGenericCreateStatic>
 800adb2:	61f8      	str	r0, [r7, #28]
 800adb4:	e008      	b.n	800adc8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d105      	bne.n	800adc8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800adbc:	2200      	movs	r2, #0
 800adbe:	68b9      	ldr	r1, [r7, #8]
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f000 faa4 	bl	800b30e <xQueueGenericCreate>
 800adc6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00c      	beq.n	800ade8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d003      	beq.n	800addc <osMessageQueueNew+0xd0>
        name = attr->name;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	617b      	str	r3, [r7, #20]
 800adda:	e001      	b.n	800ade0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800addc:	2300      	movs	r3, #0
 800adde:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ade0:	6979      	ldr	r1, [r7, #20]
 800ade2:	69f8      	ldr	r0, [r7, #28]
 800ade4:	f001 fa08 	bl	800c1f8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ade8:	69fb      	ldr	r3, [r7, #28]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3720      	adds	r7, #32
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
	...

0800adf4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b088      	sub	sp, #32
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	603b      	str	r3, [r7, #0]
 800ae00:	4613      	mov	r3, r2
 800ae02:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae0c:	f3ef 8305 	mrs	r3, IPSR
 800ae10:	617b      	str	r3, [r7, #20]
  return(result);
 800ae12:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d028      	beq.n	800ae6a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d005      	beq.n	800ae2a <osMessageQueuePut+0x36>
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <osMessageQueuePut+0x36>
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d003      	beq.n	800ae32 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ae2a:	f06f 0303 	mvn.w	r3, #3
 800ae2e:	61fb      	str	r3, [r7, #28]
 800ae30:	e038      	b.n	800aea4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ae32:	2300      	movs	r3, #0
 800ae34:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ae36:	f107 0210 	add.w	r2, r7, #16
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	68b9      	ldr	r1, [r7, #8]
 800ae3e:	69b8      	ldr	r0, [r7, #24]
 800ae40:	f000 fcec 	bl	800b81c <xQueueGenericSendFromISR>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d003      	beq.n	800ae52 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ae4a:	f06f 0302 	mvn.w	r3, #2
 800ae4e:	61fb      	str	r3, [r7, #28]
 800ae50:	e028      	b.n	800aea4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d025      	beq.n	800aea4 <osMessageQueuePut+0xb0>
 800ae58:	4b15      	ldr	r3, [pc, #84]	@ (800aeb0 <osMessageQueuePut+0xbc>)
 800ae5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae5e:	601a      	str	r2, [r3, #0]
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	e01c      	b.n	800aea4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <osMessageQueuePut+0x82>
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d103      	bne.n	800ae7e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ae76:	f06f 0303 	mvn.w	r3, #3
 800ae7a:	61fb      	str	r3, [r7, #28]
 800ae7c:	e012      	b.n	800aea4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ae7e:	2300      	movs	r3, #0
 800ae80:	683a      	ldr	r2, [r7, #0]
 800ae82:	68b9      	ldr	r1, [r7, #8]
 800ae84:	69b8      	ldr	r0, [r7, #24]
 800ae86:	f000 fbc7 	bl	800b618 <xQueueGenericSend>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d009      	beq.n	800aea4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d003      	beq.n	800ae9e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ae96:	f06f 0301 	mvn.w	r3, #1
 800ae9a:	61fb      	str	r3, [r7, #28]
 800ae9c:	e002      	b.n	800aea4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ae9e:	f06f 0302 	mvn.w	r3, #2
 800aea2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800aea4:	69fb      	ldr	r3, [r7, #28]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3720      	adds	r7, #32
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	e000ed04 	.word	0xe000ed04

0800aeb4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b088      	sub	sp, #32
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
 800aec0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800aec6:	2300      	movs	r3, #0
 800aec8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aeca:	f3ef 8305 	mrs	r3, IPSR
 800aece:	617b      	str	r3, [r7, #20]
  return(result);
 800aed0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d028      	beq.n	800af28 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d005      	beq.n	800aee8 <osMessageQueueGet+0x34>
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d002      	beq.n	800aee8 <osMessageQueueGet+0x34>
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d003      	beq.n	800aef0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800aee8:	f06f 0303 	mvn.w	r3, #3
 800aeec:	61fb      	str	r3, [r7, #28]
 800aeee:	e037      	b.n	800af60 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800aef0:	2300      	movs	r3, #0
 800aef2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800aef4:	f107 0310 	add.w	r3, r7, #16
 800aef8:	461a      	mov	r2, r3
 800aefa:	68b9      	ldr	r1, [r7, #8]
 800aefc:	69b8      	ldr	r0, [r7, #24]
 800aefe:	f000 ffad 	bl	800be5c <xQueueReceiveFromISR>
 800af02:	4603      	mov	r3, r0
 800af04:	2b01      	cmp	r3, #1
 800af06:	d003      	beq.n	800af10 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800af08:	f06f 0302 	mvn.w	r3, #2
 800af0c:	61fb      	str	r3, [r7, #28]
 800af0e:	e027      	b.n	800af60 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d024      	beq.n	800af60 <osMessageQueueGet+0xac>
 800af16:	4b15      	ldr	r3, [pc, #84]	@ (800af6c <osMessageQueueGet+0xb8>)
 800af18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	e01b      	b.n	800af60 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d002      	beq.n	800af34 <osMessageQueueGet+0x80>
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d103      	bne.n	800af3c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800af34:	f06f 0303 	mvn.w	r3, #3
 800af38:	61fb      	str	r3, [r7, #28]
 800af3a:	e011      	b.n	800af60 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800af3c:	683a      	ldr	r2, [r7, #0]
 800af3e:	68b9      	ldr	r1, [r7, #8]
 800af40:	69b8      	ldr	r0, [r7, #24]
 800af42:	f000 fd99 	bl	800ba78 <xQueueReceive>
 800af46:	4603      	mov	r3, r0
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d009      	beq.n	800af60 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d003      	beq.n	800af5a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800af52:	f06f 0301 	mvn.w	r3, #1
 800af56:	61fb      	str	r3, [r7, #28]
 800af58:	e002      	b.n	800af60 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800af5a:	f06f 0302 	mvn.w	r3, #2
 800af5e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800af60:	69fb      	ldr	r3, [r7, #28]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3720      	adds	r7, #32
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	e000ed04 	.word	0xe000ed04

0800af70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	4a07      	ldr	r2, [pc, #28]	@ (800af9c <vApplicationGetIdleTaskMemory+0x2c>)
 800af80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	4a06      	ldr	r2, [pc, #24]	@ (800afa0 <vApplicationGetIdleTaskMemory+0x30>)
 800af86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2280      	movs	r2, #128	@ 0x80
 800af8c:	601a      	str	r2, [r3, #0]
}
 800af8e:	bf00      	nop
 800af90:	3714      	adds	r7, #20
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	24000704 	.word	0x24000704
 800afa0:	240007ac 	.word	0x240007ac

0800afa4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800afa4:	b480      	push	{r7}
 800afa6:	b085      	sub	sp, #20
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	4a07      	ldr	r2, [pc, #28]	@ (800afd0 <vApplicationGetTimerTaskMemory+0x2c>)
 800afb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	4a06      	ldr	r2, [pc, #24]	@ (800afd4 <vApplicationGetTimerTaskMemory+0x30>)
 800afba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800afc2:	601a      	str	r2, [r3, #0]
}
 800afc4:	bf00      	nop
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	240009ac 	.word	0x240009ac
 800afd4:	24000a54 	.word	0x24000a54

0800afd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f103 0208 	add.w	r2, r3, #8
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f04f 32ff 	mov.w	r2, #4294967295
 800aff0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f103 0208 	add.w	r2, r3, #8
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f103 0208 	add.w	r2, r3, #8
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b00c:	bf00      	nop
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b026:	bf00      	nop
 800b028:	370c      	adds	r7, #12
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr

0800b032 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b032:	b480      	push	{r7}
 800b034:	b085      	sub	sp, #20
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	689a      	ldr	r2, [r3, #8]
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	683a      	ldr	r2, [r7, #0]
 800b056:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	1c5a      	adds	r2, r3, #1
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	601a      	str	r2, [r3, #0]
}
 800b06e:	bf00      	nop
 800b070:	3714      	adds	r7, #20
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr

0800b07a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b07a:	b480      	push	{r7}
 800b07c:	b085      	sub	sp, #20
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b090:	d103      	bne.n	800b09a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	60fb      	str	r3, [r7, #12]
 800b098:	e00c      	b.n	800b0b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	3308      	adds	r3, #8
 800b09e:	60fb      	str	r3, [r7, #12]
 800b0a0:	e002      	b.n	800b0a8 <vListInsert+0x2e>
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	60fb      	str	r3, [r7, #12]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d2f6      	bcs.n	800b0a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	685a      	ldr	r2, [r3, #4]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	683a      	ldr	r2, [r7, #0]
 800b0c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	683a      	ldr	r2, [r7, #0]
 800b0ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	1c5a      	adds	r2, r3, #1
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	601a      	str	r2, [r3, #0]
}
 800b0e0:	bf00      	nop
 800b0e2:	3714      	adds	r7, #20
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	6892      	ldr	r2, [r2, #8]
 800b102:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	6852      	ldr	r2, [r2, #4]
 800b10c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	429a      	cmp	r2, r3
 800b116:	d103      	bne.n	800b120 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	689a      	ldr	r2, [r3, #8]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	1e5a      	subs	r2, r3, #1
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3714      	adds	r7, #20
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d10b      	bne.n	800b16c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b158:	f383 8811 	msr	BASEPRI, r3
 800b15c:	f3bf 8f6f 	isb	sy
 800b160:	f3bf 8f4f 	dsb	sy
 800b164:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b166:	bf00      	nop
 800b168:	bf00      	nop
 800b16a:	e7fd      	b.n	800b168 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b16c:	f002 fdb4 	bl	800dcd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b178:	68f9      	ldr	r1, [r7, #12]
 800b17a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b17c:	fb01 f303 	mul.w	r3, r1, r3
 800b180:	441a      	add	r2, r3
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2200      	movs	r2, #0
 800b18a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b19c:	3b01      	subs	r3, #1
 800b19e:	68f9      	ldr	r1, [r7, #12]
 800b1a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b1a2:	fb01 f303 	mul.w	r3, r1, r3
 800b1a6:	441a      	add	r2, r3
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	22ff      	movs	r2, #255	@ 0xff
 800b1b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	22ff      	movs	r2, #255	@ 0xff
 800b1b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d114      	bne.n	800b1ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d01a      	beq.n	800b200 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	3310      	adds	r3, #16
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f001 fd3e 	bl	800cc50 <xTaskRemoveFromEventList>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d012      	beq.n	800b200 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b1da:	4b0d      	ldr	r3, [pc, #52]	@ (800b210 <xQueueGenericReset+0xd0>)
 800b1dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	e009      	b.n	800b200 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	3310      	adds	r3, #16
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7ff fef1 	bl	800afd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	3324      	adds	r3, #36	@ 0x24
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7ff feec 	bl	800afd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b200:	f002 fd9c 	bl	800dd3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b204:	2301      	movs	r3, #1
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	e000ed04 	.word	0xe000ed04

0800b214 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b214:	b580      	push	{r7, lr}
 800b216:	b08e      	sub	sp, #56	@ 0x38
 800b218:	af02      	add	r7, sp, #8
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
 800b220:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d10b      	bne.n	800b240 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b22c:	f383 8811 	msr	BASEPRI, r3
 800b230:	f3bf 8f6f 	isb	sy
 800b234:	f3bf 8f4f 	dsb	sy
 800b238:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b23a:	bf00      	nop
 800b23c:	bf00      	nop
 800b23e:	e7fd      	b.n	800b23c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d10b      	bne.n	800b25e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b24a:	f383 8811 	msr	BASEPRI, r3
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	f3bf 8f4f 	dsb	sy
 800b256:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b258:	bf00      	nop
 800b25a:	bf00      	nop
 800b25c:	e7fd      	b.n	800b25a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d002      	beq.n	800b26a <xQueueGenericCreateStatic+0x56>
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d001      	beq.n	800b26e <xQueueGenericCreateStatic+0x5a>
 800b26a:	2301      	movs	r3, #1
 800b26c:	e000      	b.n	800b270 <xQueueGenericCreateStatic+0x5c>
 800b26e:	2300      	movs	r3, #0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10b      	bne.n	800b28c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b278:	f383 8811 	msr	BASEPRI, r3
 800b27c:	f3bf 8f6f 	isb	sy
 800b280:	f3bf 8f4f 	dsb	sy
 800b284:	623b      	str	r3, [r7, #32]
}
 800b286:	bf00      	nop
 800b288:	bf00      	nop
 800b28a:	e7fd      	b.n	800b288 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d102      	bne.n	800b298 <xQueueGenericCreateStatic+0x84>
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <xQueueGenericCreateStatic+0x88>
 800b298:	2301      	movs	r3, #1
 800b29a:	e000      	b.n	800b29e <xQueueGenericCreateStatic+0x8a>
 800b29c:	2300      	movs	r3, #0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d10b      	bne.n	800b2ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a6:	f383 8811 	msr	BASEPRI, r3
 800b2aa:	f3bf 8f6f 	isb	sy
 800b2ae:	f3bf 8f4f 	dsb	sy
 800b2b2:	61fb      	str	r3, [r7, #28]
}
 800b2b4:	bf00      	nop
 800b2b6:	bf00      	nop
 800b2b8:	e7fd      	b.n	800b2b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b2ba:	2350      	movs	r3, #80	@ 0x50
 800b2bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	2b50      	cmp	r3, #80	@ 0x50
 800b2c2:	d00b      	beq.n	800b2dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c8:	f383 8811 	msr	BASEPRI, r3
 800b2cc:	f3bf 8f6f 	isb	sy
 800b2d0:	f3bf 8f4f 	dsb	sy
 800b2d4:	61bb      	str	r3, [r7, #24]
}
 800b2d6:	bf00      	nop
 800b2d8:	bf00      	nop
 800b2da:	e7fd      	b.n	800b2d8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b2dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00d      	beq.n	800b304 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b2f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f6:	9300      	str	r3, [sp, #0]
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	68b9      	ldr	r1, [r7, #8]
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f000 f840 	bl	800b384 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b306:	4618      	mov	r0, r3
 800b308:	3730      	adds	r7, #48	@ 0x30
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b08a      	sub	sp, #40	@ 0x28
 800b312:	af02      	add	r7, sp, #8
 800b314:	60f8      	str	r0, [r7, #12]
 800b316:	60b9      	str	r1, [r7, #8]
 800b318:	4613      	mov	r3, r2
 800b31a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d10b      	bne.n	800b33a <xQueueGenericCreate+0x2c>
	__asm volatile
 800b322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b326:	f383 8811 	msr	BASEPRI, r3
 800b32a:	f3bf 8f6f 	isb	sy
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	613b      	str	r3, [r7, #16]
}
 800b334:	bf00      	nop
 800b336:	bf00      	nop
 800b338:	e7fd      	b.n	800b336 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	fb02 f303 	mul.w	r3, r2, r3
 800b342:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	3350      	adds	r3, #80	@ 0x50
 800b348:	4618      	mov	r0, r3
 800b34a:	f002 fde7 	bl	800df1c <pvPortMalloc>
 800b34e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d011      	beq.n	800b37a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	3350      	adds	r3, #80	@ 0x50
 800b35e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	2200      	movs	r2, #0
 800b364:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b368:	79fa      	ldrb	r2, [r7, #7]
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	4613      	mov	r3, r2
 800b370:	697a      	ldr	r2, [r7, #20]
 800b372:	68b9      	ldr	r1, [r7, #8]
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f000 f805 	bl	800b384 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b37a:	69bb      	ldr	r3, [r7, #24]
	}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3720      	adds	r7, #32
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	607a      	str	r2, [r7, #4]
 800b390:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d103      	bne.n	800b3a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	69ba      	ldr	r2, [r7, #24]
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	e002      	b.n	800b3a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	68ba      	ldr	r2, [r7, #8]
 800b3b0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b3b2:	2101      	movs	r1, #1
 800b3b4:	69b8      	ldr	r0, [r7, #24]
 800b3b6:	f7ff fec3 	bl	800b140 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	78fa      	ldrb	r2, [r7, #3]
 800b3be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b3c2:	bf00      	nop
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b082      	sub	sp, #8
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00e      	beq.n	800b3f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 f911 	bl	800b618 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b3f6:	bf00      	nop
 800b3f8:	3708      	adds	r7, #8
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b086      	sub	sp, #24
 800b402:	af00      	add	r7, sp, #0
 800b404:	4603      	mov	r3, r0
 800b406:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b408:	2301      	movs	r3, #1
 800b40a:	617b      	str	r3, [r7, #20]
 800b40c:	2300      	movs	r3, #0
 800b40e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b410:	79fb      	ldrb	r3, [r7, #7]
 800b412:	461a      	mov	r2, r3
 800b414:	6939      	ldr	r1, [r7, #16]
 800b416:	6978      	ldr	r0, [r7, #20]
 800b418:	f7ff ff79 	bl	800b30e <xQueueGenericCreate>
 800b41c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	f7ff ffd3 	bl	800b3ca <prvInitialiseMutex>

		return xNewQueue;
 800b424:	68fb      	ldr	r3, [r7, #12]
	}
 800b426:	4618      	mov	r0, r3
 800b428:	3718      	adds	r7, #24
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b42e:	b580      	push	{r7, lr}
 800b430:	b088      	sub	sp, #32
 800b432:	af02      	add	r7, sp, #8
 800b434:	4603      	mov	r3, r0
 800b436:	6039      	str	r1, [r7, #0]
 800b438:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b43a:	2301      	movs	r3, #1
 800b43c:	617b      	str	r3, [r7, #20]
 800b43e:	2300      	movs	r3, #0
 800b440:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b442:	79fb      	ldrb	r3, [r7, #7]
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	2200      	movs	r2, #0
 800b44a:	6939      	ldr	r1, [r7, #16]
 800b44c:	6978      	ldr	r0, [r7, #20]
 800b44e:	f7ff fee1 	bl	800b214 <xQueueGenericCreateStatic>
 800b452:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f7ff ffb8 	bl	800b3ca <prvInitialiseMutex>

		return xNewQueue;
 800b45a:	68fb      	ldr	r3, [r7, #12]
	}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3718      	adds	r7, #24
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b464:	b590      	push	{r4, r7, lr}
 800b466:	b087      	sub	sp, #28
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10b      	bne.n	800b48e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800b476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47a:	f383 8811 	msr	BASEPRI, r3
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	f3bf 8f4f 	dsb	sy
 800b486:	60fb      	str	r3, [r7, #12]
}
 800b488:	bf00      	nop
 800b48a:	bf00      	nop
 800b48c:	e7fd      	b.n	800b48a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	689c      	ldr	r4, [r3, #8]
 800b492:	f001 fda3 	bl	800cfdc <xTaskGetCurrentTaskHandle>
 800b496:	4603      	mov	r3, r0
 800b498:	429c      	cmp	r4, r3
 800b49a:	d111      	bne.n	800b4c0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	1e5a      	subs	r2, r3, #1
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d105      	bne.n	800b4ba <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	6938      	ldr	r0, [r7, #16]
 800b4b6:	f000 f8af 	bl	800b618 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	617b      	str	r3, [r7, #20]
 800b4be:	e001      	b.n	800b4c4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b4c4:	697b      	ldr	r3, [r7, #20]
	}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	371c      	adds	r7, #28
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd90      	pop	{r4, r7, pc}

0800b4ce <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b4ce:	b590      	push	{r4, r7, lr}
 800b4d0:	b087      	sub	sp, #28
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
 800b4d6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10b      	bne.n	800b4fa <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800b4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e6:	f383 8811 	msr	BASEPRI, r3
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	60fb      	str	r3, [r7, #12]
}
 800b4f4:	bf00      	nop
 800b4f6:	bf00      	nop
 800b4f8:	e7fd      	b.n	800b4f6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	689c      	ldr	r4, [r3, #8]
 800b4fe:	f001 fd6d 	bl	800cfdc <xTaskGetCurrentTaskHandle>
 800b502:	4603      	mov	r3, r0
 800b504:	429c      	cmp	r4, r3
 800b506:	d107      	bne.n	800b518 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	1c5a      	adds	r2, r3, #1
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b512:	2301      	movs	r3, #1
 800b514:	617b      	str	r3, [r7, #20]
 800b516:	e00c      	b.n	800b532 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b518:	6839      	ldr	r1, [r7, #0]
 800b51a:	6938      	ldr	r0, [r7, #16]
 800b51c:	f000 fb8e 	bl	800bc3c <xQueueSemaphoreTake>
 800b520:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d004      	beq.n	800b532 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	1c5a      	adds	r2, r3, #1
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b532:	697b      	ldr	r3, [r7, #20]
	}
 800b534:	4618      	mov	r0, r3
 800b536:	371c      	adds	r7, #28
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd90      	pop	{r4, r7, pc}

0800b53c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b08a      	sub	sp, #40	@ 0x28
 800b540:	af02      	add	r7, sp, #8
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10b      	bne.n	800b566 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800b54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	61bb      	str	r3, [r7, #24]
}
 800b560:	bf00      	nop
 800b562:	bf00      	nop
 800b564:	e7fd      	b.n	800b562 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b566:	68ba      	ldr	r2, [r7, #8]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d90b      	bls.n	800b586 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800b56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b572:	f383 8811 	msr	BASEPRI, r3
 800b576:	f3bf 8f6f 	isb	sy
 800b57a:	f3bf 8f4f 	dsb	sy
 800b57e:	617b      	str	r3, [r7, #20]
}
 800b580:	bf00      	nop
 800b582:	bf00      	nop
 800b584:	e7fd      	b.n	800b582 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b586:	2302      	movs	r3, #2
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	2100      	movs	r1, #0
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f7ff fe3f 	bl	800b214 <xQueueGenericCreateStatic>
 800b596:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d002      	beq.n	800b5a4 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	68ba      	ldr	r2, [r7, #8]
 800b5a2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b5a4:	69fb      	ldr	r3, [r7, #28]
	}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3720      	adds	r7, #32
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b086      	sub	sp, #24
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
 800b5b6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10b      	bne.n	800b5d6 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	613b      	str	r3, [r7, #16]
}
 800b5d0:	bf00      	nop
 800b5d2:	bf00      	nop
 800b5d4:	e7fd      	b.n	800b5d2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b5d6:	683a      	ldr	r2, [r7, #0]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d90b      	bls.n	800b5f6 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800b5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5e2:	f383 8811 	msr	BASEPRI, r3
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	60fb      	str	r3, [r7, #12]
}
 800b5f0:	bf00      	nop
 800b5f2:	bf00      	nop
 800b5f4:	e7fd      	b.n	800b5f2 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b5f6:	2202      	movs	r2, #2
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7ff fe87 	bl	800b30e <xQueueGenericCreate>
 800b600:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d002      	beq.n	800b60e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	683a      	ldr	r2, [r7, #0]
 800b60c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b60e:	697b      	ldr	r3, [r7, #20]
	}
 800b610:	4618      	mov	r0, r3
 800b612:	3718      	adds	r7, #24
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08e      	sub	sp, #56	@ 0x38
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]
 800b624:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b626:	2300      	movs	r3, #0
 800b628:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b630:	2b00      	cmp	r3, #0
 800b632:	d10b      	bne.n	800b64c <xQueueGenericSend+0x34>
	__asm volatile
 800b634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b638:	f383 8811 	msr	BASEPRI, r3
 800b63c:	f3bf 8f6f 	isb	sy
 800b640:	f3bf 8f4f 	dsb	sy
 800b644:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b646:	bf00      	nop
 800b648:	bf00      	nop
 800b64a:	e7fd      	b.n	800b648 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d103      	bne.n	800b65a <xQueueGenericSend+0x42>
 800b652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b656:	2b00      	cmp	r3, #0
 800b658:	d101      	bne.n	800b65e <xQueueGenericSend+0x46>
 800b65a:	2301      	movs	r3, #1
 800b65c:	e000      	b.n	800b660 <xQueueGenericSend+0x48>
 800b65e:	2300      	movs	r3, #0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d10b      	bne.n	800b67c <xQueueGenericSend+0x64>
	__asm volatile
 800b664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b668:	f383 8811 	msr	BASEPRI, r3
 800b66c:	f3bf 8f6f 	isb	sy
 800b670:	f3bf 8f4f 	dsb	sy
 800b674:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b676:	bf00      	nop
 800b678:	bf00      	nop
 800b67a:	e7fd      	b.n	800b678 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d103      	bne.n	800b68a <xQueueGenericSend+0x72>
 800b682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b686:	2b01      	cmp	r3, #1
 800b688:	d101      	bne.n	800b68e <xQueueGenericSend+0x76>
 800b68a:	2301      	movs	r3, #1
 800b68c:	e000      	b.n	800b690 <xQueueGenericSend+0x78>
 800b68e:	2300      	movs	r3, #0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10b      	bne.n	800b6ac <xQueueGenericSend+0x94>
	__asm volatile
 800b694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	623b      	str	r3, [r7, #32]
}
 800b6a6:	bf00      	nop
 800b6a8:	bf00      	nop
 800b6aa:	e7fd      	b.n	800b6a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b6ac:	f001 fca6 	bl	800cffc <xTaskGetSchedulerState>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d102      	bne.n	800b6bc <xQueueGenericSend+0xa4>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d101      	bne.n	800b6c0 <xQueueGenericSend+0xa8>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e000      	b.n	800b6c2 <xQueueGenericSend+0xaa>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d10b      	bne.n	800b6de <xQueueGenericSend+0xc6>
	__asm volatile
 800b6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ca:	f383 8811 	msr	BASEPRI, r3
 800b6ce:	f3bf 8f6f 	isb	sy
 800b6d2:	f3bf 8f4f 	dsb	sy
 800b6d6:	61fb      	str	r3, [r7, #28]
}
 800b6d8:	bf00      	nop
 800b6da:	bf00      	nop
 800b6dc:	e7fd      	b.n	800b6da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b6de:	f002 fafb 	bl	800dcd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d302      	bcc.n	800b6f4 <xQueueGenericSend+0xdc>
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	2b02      	cmp	r3, #2
 800b6f2:	d129      	bne.n	800b748 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b6f4:	683a      	ldr	r2, [r7, #0]
 800b6f6:	68b9      	ldr	r1, [r7, #8]
 800b6f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b6fa:	f000 fc6d 	bl	800bfd8 <prvCopyDataToQueue>
 800b6fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b704:	2b00      	cmp	r3, #0
 800b706:	d010      	beq.n	800b72a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b70a:	3324      	adds	r3, #36	@ 0x24
 800b70c:	4618      	mov	r0, r3
 800b70e:	f001 fa9f 	bl	800cc50 <xTaskRemoveFromEventList>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d013      	beq.n	800b740 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b718:	4b3f      	ldr	r3, [pc, #252]	@ (800b818 <xQueueGenericSend+0x200>)
 800b71a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b71e:	601a      	str	r2, [r3, #0]
 800b720:	f3bf 8f4f 	dsb	sy
 800b724:	f3bf 8f6f 	isb	sy
 800b728:	e00a      	b.n	800b740 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b72a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d007      	beq.n	800b740 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b730:	4b39      	ldr	r3, [pc, #228]	@ (800b818 <xQueueGenericSend+0x200>)
 800b732:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b736:	601a      	str	r2, [r3, #0]
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b740:	f002 fafc 	bl	800dd3c <vPortExitCritical>
				return pdPASS;
 800b744:	2301      	movs	r3, #1
 800b746:	e063      	b.n	800b810 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d103      	bne.n	800b756 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b74e:	f002 faf5 	bl	800dd3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b752:	2300      	movs	r3, #0
 800b754:	e05c      	b.n	800b810 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d106      	bne.n	800b76a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b75c:	f107 0314 	add.w	r3, r7, #20
 800b760:	4618      	mov	r0, r3
 800b762:	f001 fad9 	bl	800cd18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b766:	2301      	movs	r3, #1
 800b768:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b76a:	f002 fae7 	bl	800dd3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b76e:	f001 f82f 	bl	800c7d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b772:	f002 fab1 	bl	800dcd8 <vPortEnterCritical>
 800b776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b778:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b77c:	b25b      	sxtb	r3, r3
 800b77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b782:	d103      	bne.n	800b78c <xQueueGenericSend+0x174>
 800b784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b786:	2200      	movs	r2, #0
 800b788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b78e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b792:	b25b      	sxtb	r3, r3
 800b794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b798:	d103      	bne.n	800b7a2 <xQueueGenericSend+0x18a>
 800b79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b79c:	2200      	movs	r2, #0
 800b79e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b7a2:	f002 facb 	bl	800dd3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b7a6:	1d3a      	adds	r2, r7, #4
 800b7a8:	f107 0314 	add.w	r3, r7, #20
 800b7ac:	4611      	mov	r1, r2
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f001 fac8 	bl	800cd44 <xTaskCheckForTimeOut>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d124      	bne.n	800b804 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b7ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b7bc:	f000 fd04 	bl	800c1c8 <prvIsQueueFull>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d018      	beq.n	800b7f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c8:	3310      	adds	r3, #16
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f001 f9ec 	bl	800cbac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b7d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b7d6:	f000 fc8f 	bl	800c0f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b7da:	f001 f807 	bl	800c7ec <xTaskResumeAll>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f47f af7c 	bne.w	800b6de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b7e6:	4b0c      	ldr	r3, [pc, #48]	@ (800b818 <xQueueGenericSend+0x200>)
 800b7e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7ec:	601a      	str	r2, [r3, #0]
 800b7ee:	f3bf 8f4f 	dsb	sy
 800b7f2:	f3bf 8f6f 	isb	sy
 800b7f6:	e772      	b.n	800b6de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b7f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b7fa:	f000 fc7d 	bl	800c0f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7fe:	f000 fff5 	bl	800c7ec <xTaskResumeAll>
 800b802:	e76c      	b.n	800b6de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b804:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b806:	f000 fc77 	bl	800c0f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b80a:	f000 ffef 	bl	800c7ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b80e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b810:	4618      	mov	r0, r3
 800b812:	3738      	adds	r7, #56	@ 0x38
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	e000ed04 	.word	0xe000ed04

0800b81c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b090      	sub	sp, #64	@ 0x40
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
 800b828:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b830:	2b00      	cmp	r3, #0
 800b832:	d10b      	bne.n	800b84c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b838:	f383 8811 	msr	BASEPRI, r3
 800b83c:	f3bf 8f6f 	isb	sy
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b846:	bf00      	nop
 800b848:	bf00      	nop
 800b84a:	e7fd      	b.n	800b848 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d103      	bne.n	800b85a <xQueueGenericSendFromISR+0x3e>
 800b852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <xQueueGenericSendFromISR+0x42>
 800b85a:	2301      	movs	r3, #1
 800b85c:	e000      	b.n	800b860 <xQueueGenericSendFromISR+0x44>
 800b85e:	2300      	movs	r3, #0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d10b      	bne.n	800b87c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b868:	f383 8811 	msr	BASEPRI, r3
 800b86c:	f3bf 8f6f 	isb	sy
 800b870:	f3bf 8f4f 	dsb	sy
 800b874:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b876:	bf00      	nop
 800b878:	bf00      	nop
 800b87a:	e7fd      	b.n	800b878 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d103      	bne.n	800b88a <xQueueGenericSendFromISR+0x6e>
 800b882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b886:	2b01      	cmp	r3, #1
 800b888:	d101      	bne.n	800b88e <xQueueGenericSendFromISR+0x72>
 800b88a:	2301      	movs	r3, #1
 800b88c:	e000      	b.n	800b890 <xQueueGenericSendFromISR+0x74>
 800b88e:	2300      	movs	r3, #0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10b      	bne.n	800b8ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b898:	f383 8811 	msr	BASEPRI, r3
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	623b      	str	r3, [r7, #32]
}
 800b8a6:	bf00      	nop
 800b8a8:	bf00      	nop
 800b8aa:	e7fd      	b.n	800b8a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b8ac:	f002 faf4 	bl	800de98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b8b0:	f3ef 8211 	mrs	r2, BASEPRI
 800b8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b8:	f383 8811 	msr	BASEPRI, r3
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	61fa      	str	r2, [r7, #28]
 800b8c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b8c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b8ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b8cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d302      	bcc.n	800b8de <xQueueGenericSendFromISR+0xc2>
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	2b02      	cmp	r3, #2
 800b8dc:	d12f      	bne.n	800b93e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b8e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b8ee:	683a      	ldr	r2, [r7, #0]
 800b8f0:	68b9      	ldr	r1, [r7, #8]
 800b8f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b8f4:	f000 fb70 	bl	800bfd8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b8f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b900:	d112      	bne.n	800b928 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b906:	2b00      	cmp	r3, #0
 800b908:	d016      	beq.n	800b938 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b90c:	3324      	adds	r3, #36	@ 0x24
 800b90e:	4618      	mov	r0, r3
 800b910:	f001 f99e 	bl	800cc50 <xTaskRemoveFromEventList>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00e      	beq.n	800b938 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00b      	beq.n	800b938 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	601a      	str	r2, [r3, #0]
 800b926:	e007      	b.n	800b938 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b928:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b92c:	3301      	adds	r3, #1
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	b25a      	sxtb	r2, r3
 800b932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b938:	2301      	movs	r3, #1
 800b93a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b93c:	e001      	b.n	800b942 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b93e:	2300      	movs	r3, #0
 800b940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b944:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b94c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b94e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b950:	4618      	mov	r0, r3
 800b952:	3740      	adds	r7, #64	@ 0x40
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b08e      	sub	sp, #56	@ 0x38
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10b      	bne.n	800b984 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800b96c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b970:	f383 8811 	msr	BASEPRI, r3
 800b974:	f3bf 8f6f 	isb	sy
 800b978:	f3bf 8f4f 	dsb	sy
 800b97c:	623b      	str	r3, [r7, #32]
}
 800b97e:	bf00      	nop
 800b980:	bf00      	nop
 800b982:	e7fd      	b.n	800b980 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00b      	beq.n	800b9a4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	61fb      	str	r3, [r7, #28]
}
 800b99e:	bf00      	nop
 800b9a0:	bf00      	nop
 800b9a2:	e7fd      	b.n	800b9a0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b9a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d103      	bne.n	800b9b4 <xQueueGiveFromISR+0x5c>
 800b9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d101      	bne.n	800b9b8 <xQueueGiveFromISR+0x60>
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e000      	b.n	800b9ba <xQueueGiveFromISR+0x62>
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d10b      	bne.n	800b9d6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800b9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	61bb      	str	r3, [r7, #24]
}
 800b9d0:	bf00      	nop
 800b9d2:	bf00      	nop
 800b9d4:	e7fd      	b.n	800b9d2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9d6:	f002 fa5f 	bl	800de98 <vPortValidateInterruptPriority>
	__asm volatile
 800b9da:	f3ef 8211 	mrs	r2, BASEPRI
 800b9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9e2:	f383 8811 	msr	BASEPRI, r3
 800b9e6:	f3bf 8f6f 	isb	sy
 800b9ea:	f3bf 8f4f 	dsb	sy
 800b9ee:	617a      	str	r2, [r7, #20]
 800b9f0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b9f2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d22b      	bcs.n	800ba5e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba12:	1c5a      	adds	r2, r3, #1
 800ba14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba16:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba18:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ba1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba20:	d112      	bne.n	800ba48 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d016      	beq.n	800ba58 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2c:	3324      	adds	r3, #36	@ 0x24
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f001 f90e 	bl	800cc50 <xTaskRemoveFromEventList>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00e      	beq.n	800ba58 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d00b      	beq.n	800ba58 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	2201      	movs	r2, #1
 800ba44:	601a      	str	r2, [r3, #0]
 800ba46:	e007      	b.n	800ba58 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ba48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	b25a      	sxtb	r2, r3
 800ba52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba5c:	e001      	b.n	800ba62 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba64:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f383 8811 	msr	BASEPRI, r3
}
 800ba6c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3738      	adds	r7, #56	@ 0x38
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b08c      	sub	sp, #48	@ 0x30
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba84:	2300      	movs	r3, #0
 800ba86:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d10b      	bne.n	800baaa <xQueueReceive+0x32>
	__asm volatile
 800ba92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba96:	f383 8811 	msr	BASEPRI, r3
 800ba9a:	f3bf 8f6f 	isb	sy
 800ba9e:	f3bf 8f4f 	dsb	sy
 800baa2:	623b      	str	r3, [r7, #32]
}
 800baa4:	bf00      	nop
 800baa6:	bf00      	nop
 800baa8:	e7fd      	b.n	800baa6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d103      	bne.n	800bab8 <xQueueReceive+0x40>
 800bab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d101      	bne.n	800babc <xQueueReceive+0x44>
 800bab8:	2301      	movs	r3, #1
 800baba:	e000      	b.n	800babe <xQueueReceive+0x46>
 800babc:	2300      	movs	r3, #0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d10b      	bne.n	800bada <xQueueReceive+0x62>
	__asm volatile
 800bac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bac6:	f383 8811 	msr	BASEPRI, r3
 800baca:	f3bf 8f6f 	isb	sy
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	61fb      	str	r3, [r7, #28]
}
 800bad4:	bf00      	nop
 800bad6:	bf00      	nop
 800bad8:	e7fd      	b.n	800bad6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bada:	f001 fa8f 	bl	800cffc <xTaskGetSchedulerState>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d102      	bne.n	800baea <xQueueReceive+0x72>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d101      	bne.n	800baee <xQueueReceive+0x76>
 800baea:	2301      	movs	r3, #1
 800baec:	e000      	b.n	800baf0 <xQueueReceive+0x78>
 800baee:	2300      	movs	r3, #0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d10b      	bne.n	800bb0c <xQueueReceive+0x94>
	__asm volatile
 800baf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf8:	f383 8811 	msr	BASEPRI, r3
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f3bf 8f4f 	dsb	sy
 800bb04:	61bb      	str	r3, [r7, #24]
}
 800bb06:	bf00      	nop
 800bb08:	bf00      	nop
 800bb0a:	e7fd      	b.n	800bb08 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb0c:	f002 f8e4 	bl	800dcd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb14:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d01f      	beq.n	800bb5c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb1c:	68b9      	ldr	r1, [r7, #8]
 800bb1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb20:	f000 fac4 	bl	800c0ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb26:	1e5a      	subs	r2, r3, #1
 800bb28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb2a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d00f      	beq.n	800bb54 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb36:	3310      	adds	r3, #16
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f001 f889 	bl	800cc50 <xTaskRemoveFromEventList>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d007      	beq.n	800bb54 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb44:	4b3c      	ldr	r3, [pc, #240]	@ (800bc38 <xQueueReceive+0x1c0>)
 800bb46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb4a:	601a      	str	r2, [r3, #0]
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb54:	f002 f8f2 	bl	800dd3c <vPortExitCritical>
				return pdPASS;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	e069      	b.n	800bc30 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d103      	bne.n	800bb6a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb62:	f002 f8eb 	bl	800dd3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb66:	2300      	movs	r3, #0
 800bb68:	e062      	b.n	800bc30 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d106      	bne.n	800bb7e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb70:	f107 0310 	add.w	r3, r7, #16
 800bb74:	4618      	mov	r0, r3
 800bb76:	f001 f8cf 	bl	800cd18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb7e:	f002 f8dd 	bl	800dd3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb82:	f000 fe25 	bl	800c7d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb86:	f002 f8a7 	bl	800dcd8 <vPortEnterCritical>
 800bb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bb90:	b25b      	sxtb	r3, r3
 800bb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb96:	d103      	bne.n	800bba0 <xQueueReceive+0x128>
 800bb98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bba6:	b25b      	sxtb	r3, r3
 800bba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbac:	d103      	bne.n	800bbb6 <xQueueReceive+0x13e>
 800bbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bbb6:	f002 f8c1 	bl	800dd3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbba:	1d3a      	adds	r2, r7, #4
 800bbbc:	f107 0310 	add.w	r3, r7, #16
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f001 f8be 	bl	800cd44 <xTaskCheckForTimeOut>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d123      	bne.n	800bc16 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbd0:	f000 fae4 	bl	800c19c <prvIsQueueEmpty>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d017      	beq.n	800bc0a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bbda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbdc:	3324      	adds	r3, #36	@ 0x24
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	4611      	mov	r1, r2
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f000 ffe2 	bl	800cbac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bbe8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbea:	f000 fa85 	bl	800c0f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bbee:	f000 fdfd 	bl	800c7ec <xTaskResumeAll>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d189      	bne.n	800bb0c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800bbf8:	4b0f      	ldr	r3, [pc, #60]	@ (800bc38 <xQueueReceive+0x1c0>)
 800bbfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbfe:	601a      	str	r2, [r3, #0]
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	e780      	b.n	800bb0c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bc0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc0c:	f000 fa74 	bl	800c0f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc10:	f000 fdec 	bl	800c7ec <xTaskResumeAll>
 800bc14:	e77a      	b.n	800bb0c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bc16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc18:	f000 fa6e 	bl	800c0f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc1c:	f000 fde6 	bl	800c7ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc22:	f000 fabb 	bl	800c19c <prvIsQueueEmpty>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f43f af6f 	beq.w	800bb0c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc2e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3730      	adds	r7, #48	@ 0x30
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	e000ed04 	.word	0xe000ed04

0800bc3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b08e      	sub	sp, #56	@ 0x38
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc46:	2300      	movs	r3, #0
 800bc48:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d10b      	bne.n	800bc70 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800bc58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc5c:	f383 8811 	msr	BASEPRI, r3
 800bc60:	f3bf 8f6f 	isb	sy
 800bc64:	f3bf 8f4f 	dsb	sy
 800bc68:	623b      	str	r3, [r7, #32]
}
 800bc6a:	bf00      	nop
 800bc6c:	bf00      	nop
 800bc6e:	e7fd      	b.n	800bc6c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bc70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00b      	beq.n	800bc90 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800bc78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc7c:	f383 8811 	msr	BASEPRI, r3
 800bc80:	f3bf 8f6f 	isb	sy
 800bc84:	f3bf 8f4f 	dsb	sy
 800bc88:	61fb      	str	r3, [r7, #28]
}
 800bc8a:	bf00      	nop
 800bc8c:	bf00      	nop
 800bc8e:	e7fd      	b.n	800bc8c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc90:	f001 f9b4 	bl	800cffc <xTaskGetSchedulerState>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d102      	bne.n	800bca0 <xQueueSemaphoreTake+0x64>
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d101      	bne.n	800bca4 <xQueueSemaphoreTake+0x68>
 800bca0:	2301      	movs	r3, #1
 800bca2:	e000      	b.n	800bca6 <xQueueSemaphoreTake+0x6a>
 800bca4:	2300      	movs	r3, #0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d10b      	bne.n	800bcc2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800bcaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcae:	f383 8811 	msr	BASEPRI, r3
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	f3bf 8f4f 	dsb	sy
 800bcba:	61bb      	str	r3, [r7, #24]
}
 800bcbc:	bf00      	nop
 800bcbe:	bf00      	nop
 800bcc0:	e7fd      	b.n	800bcbe <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcc2:	f002 f809 	bl	800dcd8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bcc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcca:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d024      	beq.n	800bd1c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bcd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcd4:	1e5a      	subs	r2, r3, #1
 800bcd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcd8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bcda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d104      	bne.n	800bcec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bce2:	f001 fb05 	bl	800d2f0 <pvTaskIncrementMutexHeldCount>
 800bce6:	4602      	mov	r2, r0
 800bce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcee:	691b      	ldr	r3, [r3, #16]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00f      	beq.n	800bd14 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcf6:	3310      	adds	r3, #16
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f000 ffa9 	bl	800cc50 <xTaskRemoveFromEventList>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d007      	beq.n	800bd14 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd04:	4b54      	ldr	r3, [pc, #336]	@ (800be58 <xQueueSemaphoreTake+0x21c>)
 800bd06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd0a:	601a      	str	r2, [r3, #0]
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd14:	f002 f812 	bl	800dd3c <vPortExitCritical>
				return pdPASS;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	e098      	b.n	800be4e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d112      	bne.n	800bd48 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00b      	beq.n	800bd40 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800bd28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd2c:	f383 8811 	msr	BASEPRI, r3
 800bd30:	f3bf 8f6f 	isb	sy
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	617b      	str	r3, [r7, #20]
}
 800bd3a:	bf00      	nop
 800bd3c:	bf00      	nop
 800bd3e:	e7fd      	b.n	800bd3c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bd40:	f001 fffc 	bl	800dd3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bd44:	2300      	movs	r3, #0
 800bd46:	e082      	b.n	800be4e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d106      	bne.n	800bd5c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd4e:	f107 030c 	add.w	r3, r7, #12
 800bd52:	4618      	mov	r0, r3
 800bd54:	f000 ffe0 	bl	800cd18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd5c:	f001 ffee 	bl	800dd3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd60:	f000 fd36 	bl	800c7d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd64:	f001 ffb8 	bl	800dcd8 <vPortEnterCritical>
 800bd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bd6e:	b25b      	sxtb	r3, r3
 800bd70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd74:	d103      	bne.n	800bd7e <xQueueSemaphoreTake+0x142>
 800bd76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bd84:	b25b      	sxtb	r3, r3
 800bd86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd8a:	d103      	bne.n	800bd94 <xQueueSemaphoreTake+0x158>
 800bd8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd94:	f001 ffd2 	bl	800dd3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd98:	463a      	mov	r2, r7
 800bd9a:	f107 030c 	add.w	r3, r7, #12
 800bd9e:	4611      	mov	r1, r2
 800bda0:	4618      	mov	r0, r3
 800bda2:	f000 ffcf 	bl	800cd44 <xTaskCheckForTimeOut>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d132      	bne.n	800be12 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bdae:	f000 f9f5 	bl	800c19c <prvIsQueueEmpty>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d026      	beq.n	800be06 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bdb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d109      	bne.n	800bdd4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800bdc0:	f001 ff8a 	bl	800dcd8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bdc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f001 f935 	bl	800d038 <xTaskPriorityInherit>
 800bdce:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800bdd0:	f001 ffb4 	bl	800dd3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bdd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd6:	3324      	adds	r3, #36	@ 0x24
 800bdd8:	683a      	ldr	r2, [r7, #0]
 800bdda:	4611      	mov	r1, r2
 800bddc:	4618      	mov	r0, r3
 800bdde:	f000 fee5 	bl	800cbac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bde2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bde4:	f000 f988 	bl	800c0f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bde8:	f000 fd00 	bl	800c7ec <xTaskResumeAll>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	f47f af67 	bne.w	800bcc2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800bdf4:	4b18      	ldr	r3, [pc, #96]	@ (800be58 <xQueueSemaphoreTake+0x21c>)
 800bdf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdfa:	601a      	str	r2, [r3, #0]
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	f3bf 8f6f 	isb	sy
 800be04:	e75d      	b.n	800bcc2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800be06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be08:	f000 f976 	bl	800c0f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be0c:	f000 fcee 	bl	800c7ec <xTaskResumeAll>
 800be10:	e757      	b.n	800bcc2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800be12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be14:	f000 f970 	bl	800c0f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be18:	f000 fce8 	bl	800c7ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be1e:	f000 f9bd 	bl	800c19c <prvIsQueueEmpty>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	f43f af4c 	beq.w	800bcc2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800be2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00d      	beq.n	800be4c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800be30:	f001 ff52 	bl	800dcd8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800be34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be36:	f000 f8b7 	bl	800bfa8 <prvGetDisinheritPriorityAfterTimeout>
 800be3a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800be3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be3e:	689b      	ldr	r3, [r3, #8]
 800be40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800be42:	4618      	mov	r0, r3
 800be44:	f001 f9d0 	bl	800d1e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800be48:	f001 ff78 	bl	800dd3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800be4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3738      	adds	r7, #56	@ 0x38
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	e000ed04 	.word	0xe000ed04

0800be5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08e      	sub	sp, #56	@ 0x38
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800be6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10b      	bne.n	800be8a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800be72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be76:	f383 8811 	msr	BASEPRI, r3
 800be7a:	f3bf 8f6f 	isb	sy
 800be7e:	f3bf 8f4f 	dsb	sy
 800be82:	623b      	str	r3, [r7, #32]
}
 800be84:	bf00      	nop
 800be86:	bf00      	nop
 800be88:	e7fd      	b.n	800be86 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d103      	bne.n	800be98 <xQueueReceiveFromISR+0x3c>
 800be90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be94:	2b00      	cmp	r3, #0
 800be96:	d101      	bne.n	800be9c <xQueueReceiveFromISR+0x40>
 800be98:	2301      	movs	r3, #1
 800be9a:	e000      	b.n	800be9e <xQueueReceiveFromISR+0x42>
 800be9c:	2300      	movs	r3, #0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d10b      	bne.n	800beba <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800bea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea6:	f383 8811 	msr	BASEPRI, r3
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	61fb      	str	r3, [r7, #28]
}
 800beb4:	bf00      	nop
 800beb6:	bf00      	nop
 800beb8:	e7fd      	b.n	800beb6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800beba:	f001 ffed 	bl	800de98 <vPortValidateInterruptPriority>
	__asm volatile
 800bebe:	f3ef 8211 	mrs	r2, BASEPRI
 800bec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec6:	f383 8811 	msr	BASEPRI, r3
 800beca:	f3bf 8f6f 	isb	sy
 800bece:	f3bf 8f4f 	dsb	sy
 800bed2:	61ba      	str	r2, [r7, #24]
 800bed4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bed6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800beda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bedc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bede:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d02f      	beq.n	800bf46 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800beec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bef0:	68b9      	ldr	r1, [r7, #8]
 800bef2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bef4:	f000 f8da 	bl	800c0ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800befa:	1e5a      	subs	r2, r3, #1
 800befc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800befe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bf00:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bf04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf08:	d112      	bne.n	800bf30 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf0c:	691b      	ldr	r3, [r3, #16]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d016      	beq.n	800bf40 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf14:	3310      	adds	r3, #16
 800bf16:	4618      	mov	r0, r3
 800bf18:	f000 fe9a 	bl	800cc50 <xTaskRemoveFromEventList>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00e      	beq.n	800bf40 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00b      	beq.n	800bf40 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	601a      	str	r2, [r3, #0]
 800bf2e:	e007      	b.n	800bf40 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bf30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf34:	3301      	adds	r3, #1
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	b25a      	sxtb	r2, r3
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800bf40:	2301      	movs	r3, #1
 800bf42:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf44:	e001      	b.n	800bf4a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800bf46:	2300      	movs	r3, #0
 800bf48:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	f383 8811 	msr	BASEPRI, r3
}
 800bf54:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3738      	adds	r7, #56	@ 0x38
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d10b      	bne.n	800bf8a <vQueueDelete+0x2a>
	__asm volatile
 800bf72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf76:	f383 8811 	msr	BASEPRI, r3
 800bf7a:	f3bf 8f6f 	isb	sy
 800bf7e:	f3bf 8f4f 	dsb	sy
 800bf82:	60bb      	str	r3, [r7, #8]
}
 800bf84:	bf00      	nop
 800bf86:	bf00      	nop
 800bf88:	e7fd      	b.n	800bf86 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f000 f95e 	bl	800c24c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d102      	bne.n	800bfa0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800bf9a:	68f8      	ldr	r0, [r7, #12]
 800bf9c:	f002 f88c 	bl	800e0b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800bfa0:	bf00      	nop
 800bfa2:	3710      	adds	r7, #16
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d006      	beq.n	800bfc6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800bfc2:	60fb      	str	r3, [r7, #12]
 800bfc4:	e001      	b.n	800bfca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bfca:	68fb      	ldr	r3, [r7, #12]
	}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3714      	adds	r7, #20
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b086      	sub	sp, #24
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d10d      	bne.n	800c012 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d14d      	bne.n	800c09a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	4618      	mov	r0, r3
 800c004:	f001 f880 	bl	800d108 <xTaskPriorityDisinherit>
 800c008:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2200      	movs	r2, #0
 800c00e:	609a      	str	r2, [r3, #8]
 800c010:	e043      	b.n	800c09a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d119      	bne.n	800c04c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6858      	ldr	r0, [r3, #4]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c020:	461a      	mov	r2, r3
 800c022:	68b9      	ldr	r1, [r7, #8]
 800c024:	f00e fb13 	bl	801a64e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	685a      	ldr	r2, [r3, #4]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c030:	441a      	add	r2, r3
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	685a      	ldr	r2, [r3, #4]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	689b      	ldr	r3, [r3, #8]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d32b      	bcc.n	800c09a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	605a      	str	r2, [r3, #4]
 800c04a:	e026      	b.n	800c09a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	68d8      	ldr	r0, [r3, #12]
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c054:	461a      	mov	r2, r3
 800c056:	68b9      	ldr	r1, [r7, #8]
 800c058:	f00e faf9 	bl	801a64e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	68da      	ldr	r2, [r3, #12]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c064:	425b      	negs	r3, r3
 800c066:	441a      	add	r2, r3
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	68da      	ldr	r2, [r3, #12]
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	429a      	cmp	r2, r3
 800c076:	d207      	bcs.n	800c088 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	689a      	ldr	r2, [r3, #8]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c080:	425b      	negs	r3, r3
 800c082:	441a      	add	r2, r3
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2b02      	cmp	r3, #2
 800c08c:	d105      	bne.n	800c09a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	3b01      	subs	r3, #1
 800c098:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	1c5a      	adds	r2, r3, #1
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c0a2:	697b      	ldr	r3, [r7, #20]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3718      	adds	r7, #24
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d018      	beq.n	800c0f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	68da      	ldr	r2, [r3, #12]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0c6:	441a      	add	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	68da      	ldr	r2, [r3, #12]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	689b      	ldr	r3, [r3, #8]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d303      	bcc.n	800c0e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	68d9      	ldr	r1, [r3, #12]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	6838      	ldr	r0, [r7, #0]
 800c0ec:	f00e faaf 	bl	801a64e <memcpy>
	}
}
 800c0f0:	bf00      	nop
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c100:	f001 fdea 	bl	800dcd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c10a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c10c:	e011      	b.n	800c132 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c112:	2b00      	cmp	r3, #0
 800c114:	d012      	beq.n	800c13c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	3324      	adds	r3, #36	@ 0x24
 800c11a:	4618      	mov	r0, r3
 800c11c:	f000 fd98 	bl	800cc50 <xTaskRemoveFromEventList>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d001      	beq.n	800c12a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c126:	f000 fe71 	bl	800ce0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c12a:	7bfb      	ldrb	r3, [r7, #15]
 800c12c:	3b01      	subs	r3, #1
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c136:	2b00      	cmp	r3, #0
 800c138:	dce9      	bgt.n	800c10e <prvUnlockQueue+0x16>
 800c13a:	e000      	b.n	800c13e <prvUnlockQueue+0x46>
					break;
 800c13c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	22ff      	movs	r2, #255	@ 0xff
 800c142:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c146:	f001 fdf9 	bl	800dd3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c14a:	f001 fdc5 	bl	800dcd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c154:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c156:	e011      	b.n	800c17c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	691b      	ldr	r3, [r3, #16]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d012      	beq.n	800c186 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	3310      	adds	r3, #16
 800c164:	4618      	mov	r0, r3
 800c166:	f000 fd73 	bl	800cc50 <xTaskRemoveFromEventList>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d001      	beq.n	800c174 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c170:	f000 fe4c 	bl	800ce0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c174:	7bbb      	ldrb	r3, [r7, #14]
 800c176:	3b01      	subs	r3, #1
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c17c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c180:	2b00      	cmp	r3, #0
 800c182:	dce9      	bgt.n	800c158 <prvUnlockQueue+0x60>
 800c184:	e000      	b.n	800c188 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c186:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	22ff      	movs	r2, #255	@ 0xff
 800c18c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c190:	f001 fdd4 	bl	800dd3c <vPortExitCritical>
}
 800c194:	bf00      	nop
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1a4:	f001 fd98 	bl	800dcd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d102      	bne.n	800c1b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	60fb      	str	r3, [r7, #12]
 800c1b4:	e001      	b.n	800c1ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1ba:	f001 fdbf 	bl	800dd3c <vPortExitCritical>

	return xReturn;
 800c1be:	68fb      	ldr	r3, [r7, #12]
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3710      	adds	r7, #16
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1d0:	f001 fd82 	bl	800dcd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d102      	bne.n	800c1e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	60fb      	str	r3, [r7, #12]
 800c1e4:	e001      	b.n	800c1ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1ea:	f001 fda7 	bl	800dd3c <vPortExitCritical>

	return xReturn;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3710      	adds	r7, #16
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b085      	sub	sp, #20
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c202:	2300      	movs	r3, #0
 800c204:	60fb      	str	r3, [r7, #12]
 800c206:	e014      	b.n	800c232 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c208:	4a0f      	ldr	r2, [pc, #60]	@ (800c248 <vQueueAddToRegistry+0x50>)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d10b      	bne.n	800c22c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c214:	490c      	ldr	r1, [pc, #48]	@ (800c248 <vQueueAddToRegistry+0x50>)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	683a      	ldr	r2, [r7, #0]
 800c21a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c21e:	4a0a      	ldr	r2, [pc, #40]	@ (800c248 <vQueueAddToRegistry+0x50>)
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	00db      	lsls	r3, r3, #3
 800c224:	4413      	add	r3, r2
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c22a:	e006      	b.n	800c23a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	3301      	adds	r3, #1
 800c230:	60fb      	str	r3, [r7, #12]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2b07      	cmp	r3, #7
 800c236:	d9e7      	bls.n	800c208 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c238:	bf00      	nop
 800c23a:	bf00      	nop
 800c23c:	3714      	adds	r7, #20
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop
 800c248:	24000e54 	.word	0x24000e54

0800c24c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c24c:	b480      	push	{r7}
 800c24e:	b085      	sub	sp, #20
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c254:	2300      	movs	r3, #0
 800c256:	60fb      	str	r3, [r7, #12]
 800c258:	e016      	b.n	800c288 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c25a:	4a10      	ldr	r2, [pc, #64]	@ (800c29c <vQueueUnregisterQueue+0x50>)
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	00db      	lsls	r3, r3, #3
 800c260:	4413      	add	r3, r2
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	429a      	cmp	r2, r3
 800c268:	d10b      	bne.n	800c282 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c26a:	4a0c      	ldr	r2, [pc, #48]	@ (800c29c <vQueueUnregisterQueue+0x50>)
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2100      	movs	r1, #0
 800c270:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c274:	4a09      	ldr	r2, [pc, #36]	@ (800c29c <vQueueUnregisterQueue+0x50>)
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	00db      	lsls	r3, r3, #3
 800c27a:	4413      	add	r3, r2
 800c27c:	2200      	movs	r2, #0
 800c27e:	605a      	str	r2, [r3, #4]
				break;
 800c280:	e006      	b.n	800c290 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	3301      	adds	r3, #1
 800c286:	60fb      	str	r3, [r7, #12]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2b07      	cmp	r3, #7
 800c28c:	d9e5      	bls.n	800c25a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c28e:	bf00      	nop
 800c290:	bf00      	nop
 800c292:	3714      	adds	r7, #20
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr
 800c29c:	24000e54 	.word	0x24000e54

0800c2a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c2b0:	f001 fd12 	bl	800dcd8 <vPortEnterCritical>
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c2ba:	b25b      	sxtb	r3, r3
 800c2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2c0:	d103      	bne.n	800c2ca <vQueueWaitForMessageRestricted+0x2a>
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2d0:	b25b      	sxtb	r3, r3
 800c2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d6:	d103      	bne.n	800c2e0 <vQueueWaitForMessageRestricted+0x40>
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c2e0:	f001 fd2c 	bl	800dd3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d106      	bne.n	800c2fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	3324      	adds	r3, #36	@ 0x24
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	68b9      	ldr	r1, [r7, #8]
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f000 fc7f 	bl	800cbf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c2fa:	6978      	ldr	r0, [r7, #20]
 800c2fc:	f7ff fefc 	bl	800c0f8 <prvUnlockQueue>
	}
 800c300:	bf00      	nop
 800c302:	3718      	adds	r7, #24
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b08e      	sub	sp, #56	@ 0x38
 800c30c:	af04      	add	r7, sp, #16
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	607a      	str	r2, [r7, #4]
 800c314:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d10b      	bne.n	800c334 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c320:	f383 8811 	msr	BASEPRI, r3
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	623b      	str	r3, [r7, #32]
}
 800c32e:	bf00      	nop
 800c330:	bf00      	nop
 800c332:	e7fd      	b.n	800c330 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c336:	2b00      	cmp	r3, #0
 800c338:	d10b      	bne.n	800c352 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c33e:	f383 8811 	msr	BASEPRI, r3
 800c342:	f3bf 8f6f 	isb	sy
 800c346:	f3bf 8f4f 	dsb	sy
 800c34a:	61fb      	str	r3, [r7, #28]
}
 800c34c:	bf00      	nop
 800c34e:	bf00      	nop
 800c350:	e7fd      	b.n	800c34e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c352:	23a8      	movs	r3, #168	@ 0xa8
 800c354:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	2ba8      	cmp	r3, #168	@ 0xa8
 800c35a:	d00b      	beq.n	800c374 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c360:	f383 8811 	msr	BASEPRI, r3
 800c364:	f3bf 8f6f 	isb	sy
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	61bb      	str	r3, [r7, #24]
}
 800c36e:	bf00      	nop
 800c370:	bf00      	nop
 800c372:	e7fd      	b.n	800c370 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c374:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d01e      	beq.n	800c3ba <xTaskCreateStatic+0xb2>
 800c37c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d01b      	beq.n	800c3ba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c384:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c388:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c38a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38e:	2202      	movs	r2, #2
 800c390:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c394:	2300      	movs	r3, #0
 800c396:	9303      	str	r3, [sp, #12]
 800c398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39a:	9302      	str	r3, [sp, #8]
 800c39c:	f107 0314 	add.w	r3, r7, #20
 800c3a0:	9301      	str	r3, [sp, #4]
 800c3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a4:	9300      	str	r3, [sp, #0]
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	68b9      	ldr	r1, [r7, #8]
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	f000 f851 	bl	800c454 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c3b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c3b4:	f000 f8f6 	bl	800c5a4 <prvAddNewTaskToReadyList>
 800c3b8:	e001      	b.n	800c3be <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c3be:	697b      	ldr	r3, [r7, #20]
	}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3728      	adds	r7, #40	@ 0x28
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b08c      	sub	sp, #48	@ 0x30
 800c3cc:	af04      	add	r7, sp, #16
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	603b      	str	r3, [r7, #0]
 800c3d4:	4613      	mov	r3, r2
 800c3d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c3d8:	88fb      	ldrh	r3, [r7, #6]
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f001 fd9d 	bl	800df1c <pvPortMalloc>
 800c3e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d00e      	beq.n	800c408 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c3ea:	20a8      	movs	r0, #168	@ 0xa8
 800c3ec:	f001 fd96 	bl	800df1c <pvPortMalloc>
 800c3f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d003      	beq.n	800c400 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	697a      	ldr	r2, [r7, #20]
 800c3fc:	631a      	str	r2, [r3, #48]	@ 0x30
 800c3fe:	e005      	b.n	800c40c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c400:	6978      	ldr	r0, [r7, #20]
 800c402:	f001 fe59 	bl	800e0b8 <vPortFree>
 800c406:	e001      	b.n	800c40c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c408:	2300      	movs	r3, #0
 800c40a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d017      	beq.n	800c442 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	2200      	movs	r2, #0
 800c416:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c41a:	88fa      	ldrh	r2, [r7, #6]
 800c41c:	2300      	movs	r3, #0
 800c41e:	9303      	str	r3, [sp, #12]
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	9302      	str	r3, [sp, #8]
 800c424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c426:	9301      	str	r3, [sp, #4]
 800c428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c42a:	9300      	str	r3, [sp, #0]
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	68b9      	ldr	r1, [r7, #8]
 800c430:	68f8      	ldr	r0, [r7, #12]
 800c432:	f000 f80f 	bl	800c454 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c436:	69f8      	ldr	r0, [r7, #28]
 800c438:	f000 f8b4 	bl	800c5a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c43c:	2301      	movs	r3, #1
 800c43e:	61bb      	str	r3, [r7, #24]
 800c440:	e002      	b.n	800c448 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c442:	f04f 33ff 	mov.w	r3, #4294967295
 800c446:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c448:	69bb      	ldr	r3, [r7, #24]
	}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3720      	adds	r7, #32
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
	...

0800c454 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b088      	sub	sp, #32
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
 800c460:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c464:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	461a      	mov	r2, r3
 800c46c:	21a5      	movs	r1, #165	@ 0xa5
 800c46e:	f00d f9b1 	bl	80197d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c474:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c476:	6879      	ldr	r1, [r7, #4]
 800c478:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c47c:	440b      	add	r3, r1
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	4413      	add	r3, r2
 800c482:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	f023 0307 	bic.w	r3, r3, #7
 800c48a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c48c:	69bb      	ldr	r3, [r7, #24]
 800c48e:	f003 0307 	and.w	r3, r3, #7
 800c492:	2b00      	cmp	r3, #0
 800c494:	d00b      	beq.n	800c4ae <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c49a:	f383 8811 	msr	BASEPRI, r3
 800c49e:	f3bf 8f6f 	isb	sy
 800c4a2:	f3bf 8f4f 	dsb	sy
 800c4a6:	617b      	str	r3, [r7, #20]
}
 800c4a8:	bf00      	nop
 800c4aa:	bf00      	nop
 800c4ac:	e7fd      	b.n	800c4aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d01f      	beq.n	800c4f4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	61fb      	str	r3, [r7, #28]
 800c4b8:	e012      	b.n	800c4e0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c4ba:	68ba      	ldr	r2, [r7, #8]
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	4413      	add	r3, r2
 800c4c0:	7819      	ldrb	r1, [r3, #0]
 800c4c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	3334      	adds	r3, #52	@ 0x34
 800c4ca:	460a      	mov	r2, r1
 800c4cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c4ce:	68ba      	ldr	r2, [r7, #8]
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d006      	beq.n	800c4e8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	3301      	adds	r3, #1
 800c4de:	61fb      	str	r3, [r7, #28]
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	2b0f      	cmp	r3, #15
 800c4e4:	d9e9      	bls.n	800c4ba <prvInitialiseNewTask+0x66>
 800c4e6:	e000      	b.n	800c4ea <prvInitialiseNewTask+0x96>
			{
				break;
 800c4e8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c4f2:	e003      	b.n	800c4fc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4fe:	2b37      	cmp	r3, #55	@ 0x37
 800c500:	d901      	bls.n	800c506 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c502:	2337      	movs	r3, #55	@ 0x37
 800c504:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c508:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c50a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c50e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c510:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c514:	2200      	movs	r2, #0
 800c516:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c51a:	3304      	adds	r3, #4
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7fe fd7b 	bl	800b018 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c524:	3318      	adds	r3, #24
 800c526:	4618      	mov	r0, r3
 800c528:	f7fe fd76 	bl	800b018 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c52e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c530:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c534:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c53a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c53e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c540:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c544:	2200      	movs	r2, #0
 800c546:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c54c:	2200      	movs	r2, #0
 800c54e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c554:	3354      	adds	r3, #84	@ 0x54
 800c556:	224c      	movs	r2, #76	@ 0x4c
 800c558:	2100      	movs	r1, #0
 800c55a:	4618      	mov	r0, r3
 800c55c:	f00d f93a 	bl	80197d4 <memset>
 800c560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c562:	4a0d      	ldr	r2, [pc, #52]	@ (800c598 <prvInitialiseNewTask+0x144>)
 800c564:	659a      	str	r2, [r3, #88]	@ 0x58
 800c566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c568:	4a0c      	ldr	r2, [pc, #48]	@ (800c59c <prvInitialiseNewTask+0x148>)
 800c56a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c56e:	4a0c      	ldr	r2, [pc, #48]	@ (800c5a0 <prvInitialiseNewTask+0x14c>)
 800c570:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c572:	683a      	ldr	r2, [r7, #0]
 800c574:	68f9      	ldr	r1, [r7, #12]
 800c576:	69b8      	ldr	r0, [r7, #24]
 800c578:	f001 fa7c 	bl	800da74 <pxPortInitialiseStack>
 800c57c:	4602      	mov	r2, r0
 800c57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c580:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c584:	2b00      	cmp	r3, #0
 800c586:	d002      	beq.n	800c58e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c58a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c58c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c58e:	bf00      	nop
 800c590:	3720      	adds	r7, #32
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	24008374 	.word	0x24008374
 800c59c:	240083dc 	.word	0x240083dc
 800c5a0:	24008444 	.word	0x24008444

0800c5a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c5ac:	f001 fb94 	bl	800dcd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c5b0:	4b2d      	ldr	r3, [pc, #180]	@ (800c668 <prvAddNewTaskToReadyList+0xc4>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	4a2c      	ldr	r2, [pc, #176]	@ (800c668 <prvAddNewTaskToReadyList+0xc4>)
 800c5b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c5ba:	4b2c      	ldr	r3, [pc, #176]	@ (800c66c <prvAddNewTaskToReadyList+0xc8>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d109      	bne.n	800c5d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c5c2:	4a2a      	ldr	r2, [pc, #168]	@ (800c66c <prvAddNewTaskToReadyList+0xc8>)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c5c8:	4b27      	ldr	r3, [pc, #156]	@ (800c668 <prvAddNewTaskToReadyList+0xc4>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d110      	bne.n	800c5f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c5d0:	f000 fc40 	bl	800ce54 <prvInitialiseTaskLists>
 800c5d4:	e00d      	b.n	800c5f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c5d6:	4b26      	ldr	r3, [pc, #152]	@ (800c670 <prvAddNewTaskToReadyList+0xcc>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d109      	bne.n	800c5f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c5de:	4b23      	ldr	r3, [pc, #140]	@ (800c66c <prvAddNewTaskToReadyList+0xc8>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d802      	bhi.n	800c5f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c5ec:	4a1f      	ldr	r2, [pc, #124]	@ (800c66c <prvAddNewTaskToReadyList+0xc8>)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c5f2:	4b20      	ldr	r3, [pc, #128]	@ (800c674 <prvAddNewTaskToReadyList+0xd0>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	4a1e      	ldr	r2, [pc, #120]	@ (800c674 <prvAddNewTaskToReadyList+0xd0>)
 800c5fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c5fc:	4b1d      	ldr	r3, [pc, #116]	@ (800c674 <prvAddNewTaskToReadyList+0xd0>)
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c608:	4b1b      	ldr	r3, [pc, #108]	@ (800c678 <prvAddNewTaskToReadyList+0xd4>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d903      	bls.n	800c618 <prvAddNewTaskToReadyList+0x74>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c614:	4a18      	ldr	r2, [pc, #96]	@ (800c678 <prvAddNewTaskToReadyList+0xd4>)
 800c616:	6013      	str	r3, [r2, #0]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c61c:	4613      	mov	r3, r2
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	4413      	add	r3, r2
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	4a15      	ldr	r2, [pc, #84]	@ (800c67c <prvAddNewTaskToReadyList+0xd8>)
 800c626:	441a      	add	r2, r3
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	3304      	adds	r3, #4
 800c62c:	4619      	mov	r1, r3
 800c62e:	4610      	mov	r0, r2
 800c630:	f7fe fcff 	bl	800b032 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c634:	f001 fb82 	bl	800dd3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c638:	4b0d      	ldr	r3, [pc, #52]	@ (800c670 <prvAddNewTaskToReadyList+0xcc>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d00e      	beq.n	800c65e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c640:	4b0a      	ldr	r3, [pc, #40]	@ (800c66c <prvAddNewTaskToReadyList+0xc8>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d207      	bcs.n	800c65e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c64e:	4b0c      	ldr	r3, [pc, #48]	@ (800c680 <prvAddNewTaskToReadyList+0xdc>)
 800c650:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c654:	601a      	str	r2, [r3, #0]
 800c656:	f3bf 8f4f 	dsb	sy
 800c65a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c65e:	bf00      	nop
 800c660:	3708      	adds	r7, #8
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	24001368 	.word	0x24001368
 800c66c:	24000e94 	.word	0x24000e94
 800c670:	24001374 	.word	0x24001374
 800c674:	24001384 	.word	0x24001384
 800c678:	24001370 	.word	0x24001370
 800c67c:	24000e98 	.word	0x24000e98
 800c680:	e000ed04 	.word	0xe000ed04

0800c684 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c68c:	2300      	movs	r3, #0
 800c68e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d018      	beq.n	800c6c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c696:	4b14      	ldr	r3, [pc, #80]	@ (800c6e8 <vTaskDelay+0x64>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d00b      	beq.n	800c6b6 <vTaskDelay+0x32>
	__asm volatile
 800c69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a2:	f383 8811 	msr	BASEPRI, r3
 800c6a6:	f3bf 8f6f 	isb	sy
 800c6aa:	f3bf 8f4f 	dsb	sy
 800c6ae:	60bb      	str	r3, [r7, #8]
}
 800c6b0:	bf00      	nop
 800c6b2:	bf00      	nop
 800c6b4:	e7fd      	b.n	800c6b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c6b6:	f000 f88b 	bl	800c7d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c6ba:	2100      	movs	r1, #0
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 fe2b 	bl	800d318 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c6c2:	f000 f893 	bl	800c7ec <xTaskResumeAll>
 800c6c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d107      	bne.n	800c6de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c6ce:	4b07      	ldr	r3, [pc, #28]	@ (800c6ec <vTaskDelay+0x68>)
 800c6d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6d4:	601a      	str	r2, [r3, #0]
 800c6d6:	f3bf 8f4f 	dsb	sy
 800c6da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6de:	bf00      	nop
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	24001390 	.word	0x24001390
 800c6ec:	e000ed04 	.word	0xe000ed04

0800c6f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b08a      	sub	sp, #40	@ 0x28
 800c6f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c6fe:	463a      	mov	r2, r7
 800c700:	1d39      	adds	r1, r7, #4
 800c702:	f107 0308 	add.w	r3, r7, #8
 800c706:	4618      	mov	r0, r3
 800c708:	f7fe fc32 	bl	800af70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c70c:	6839      	ldr	r1, [r7, #0]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	9202      	str	r2, [sp, #8]
 800c714:	9301      	str	r3, [sp, #4]
 800c716:	2300      	movs	r3, #0
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	2300      	movs	r3, #0
 800c71c:	460a      	mov	r2, r1
 800c71e:	4924      	ldr	r1, [pc, #144]	@ (800c7b0 <vTaskStartScheduler+0xc0>)
 800c720:	4824      	ldr	r0, [pc, #144]	@ (800c7b4 <vTaskStartScheduler+0xc4>)
 800c722:	f7ff fdf1 	bl	800c308 <xTaskCreateStatic>
 800c726:	4603      	mov	r3, r0
 800c728:	4a23      	ldr	r2, [pc, #140]	@ (800c7b8 <vTaskStartScheduler+0xc8>)
 800c72a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c72c:	4b22      	ldr	r3, [pc, #136]	@ (800c7b8 <vTaskStartScheduler+0xc8>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d002      	beq.n	800c73a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c734:	2301      	movs	r3, #1
 800c736:	617b      	str	r3, [r7, #20]
 800c738:	e001      	b.n	800c73e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c73a:	2300      	movs	r3, #0
 800c73c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	2b01      	cmp	r3, #1
 800c742:	d102      	bne.n	800c74a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c744:	f000 fe3c 	bl	800d3c0 <xTimerCreateTimerTask>
 800c748:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d11b      	bne.n	800c788 <vTaskStartScheduler+0x98>
	__asm volatile
 800c750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c754:	f383 8811 	msr	BASEPRI, r3
 800c758:	f3bf 8f6f 	isb	sy
 800c75c:	f3bf 8f4f 	dsb	sy
 800c760:	613b      	str	r3, [r7, #16]
}
 800c762:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c764:	4b15      	ldr	r3, [pc, #84]	@ (800c7bc <vTaskStartScheduler+0xcc>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	3354      	adds	r3, #84	@ 0x54
 800c76a:	4a15      	ldr	r2, [pc, #84]	@ (800c7c0 <vTaskStartScheduler+0xd0>)
 800c76c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c76e:	4b15      	ldr	r3, [pc, #84]	@ (800c7c4 <vTaskStartScheduler+0xd4>)
 800c770:	f04f 32ff 	mov.w	r2, #4294967295
 800c774:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c776:	4b14      	ldr	r3, [pc, #80]	@ (800c7c8 <vTaskStartScheduler+0xd8>)
 800c778:	2201      	movs	r2, #1
 800c77a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c77c:	4b13      	ldr	r3, [pc, #76]	@ (800c7cc <vTaskStartScheduler+0xdc>)
 800c77e:	2200      	movs	r2, #0
 800c780:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c782:	f001 fa05 	bl	800db90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c786:	e00f      	b.n	800c7a8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c78e:	d10b      	bne.n	800c7a8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c794:	f383 8811 	msr	BASEPRI, r3
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	60fb      	str	r3, [r7, #12]
}
 800c7a2:	bf00      	nop
 800c7a4:	bf00      	nop
 800c7a6:	e7fd      	b.n	800c7a4 <vTaskStartScheduler+0xb4>
}
 800c7a8:	bf00      	nop
 800c7aa:	3718      	adds	r7, #24
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	0801b9ac 	.word	0x0801b9ac
 800c7b4:	0800ce25 	.word	0x0800ce25
 800c7b8:	2400138c 	.word	0x2400138c
 800c7bc:	24000e94 	.word	0x24000e94
 800c7c0:	2400004c 	.word	0x2400004c
 800c7c4:	24001388 	.word	0x24001388
 800c7c8:	24001374 	.word	0x24001374
 800c7cc:	2400136c 	.word	0x2400136c

0800c7d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c7d4:	4b04      	ldr	r3, [pc, #16]	@ (800c7e8 <vTaskSuspendAll+0x18>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	3301      	adds	r3, #1
 800c7da:	4a03      	ldr	r2, [pc, #12]	@ (800c7e8 <vTaskSuspendAll+0x18>)
 800c7dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c7de:	bf00      	nop
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr
 800c7e8:	24001390 	.word	0x24001390

0800c7ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c7fa:	4b42      	ldr	r3, [pc, #264]	@ (800c904 <xTaskResumeAll+0x118>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10b      	bne.n	800c81a <xTaskResumeAll+0x2e>
	__asm volatile
 800c802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c806:	f383 8811 	msr	BASEPRI, r3
 800c80a:	f3bf 8f6f 	isb	sy
 800c80e:	f3bf 8f4f 	dsb	sy
 800c812:	603b      	str	r3, [r7, #0]
}
 800c814:	bf00      	nop
 800c816:	bf00      	nop
 800c818:	e7fd      	b.n	800c816 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c81a:	f001 fa5d 	bl	800dcd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c81e:	4b39      	ldr	r3, [pc, #228]	@ (800c904 <xTaskResumeAll+0x118>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	3b01      	subs	r3, #1
 800c824:	4a37      	ldr	r2, [pc, #220]	@ (800c904 <xTaskResumeAll+0x118>)
 800c826:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c828:	4b36      	ldr	r3, [pc, #216]	@ (800c904 <xTaskResumeAll+0x118>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d162      	bne.n	800c8f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c830:	4b35      	ldr	r3, [pc, #212]	@ (800c908 <xTaskResumeAll+0x11c>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d05e      	beq.n	800c8f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c838:	e02f      	b.n	800c89a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c83a:	4b34      	ldr	r3, [pc, #208]	@ (800c90c <xTaskResumeAll+0x120>)
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	3318      	adds	r3, #24
 800c846:	4618      	mov	r0, r3
 800c848:	f7fe fc50 	bl	800b0ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	3304      	adds	r3, #4
 800c850:	4618      	mov	r0, r3
 800c852:	f7fe fc4b 	bl	800b0ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c85a:	4b2d      	ldr	r3, [pc, #180]	@ (800c910 <xTaskResumeAll+0x124>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	429a      	cmp	r2, r3
 800c860:	d903      	bls.n	800c86a <xTaskResumeAll+0x7e>
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c866:	4a2a      	ldr	r2, [pc, #168]	@ (800c910 <xTaskResumeAll+0x124>)
 800c868:	6013      	str	r3, [r2, #0]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c86e:	4613      	mov	r3, r2
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	4413      	add	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4a27      	ldr	r2, [pc, #156]	@ (800c914 <xTaskResumeAll+0x128>)
 800c878:	441a      	add	r2, r3
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	3304      	adds	r3, #4
 800c87e:	4619      	mov	r1, r3
 800c880:	4610      	mov	r0, r2
 800c882:	f7fe fbd6 	bl	800b032 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c88a:	4b23      	ldr	r3, [pc, #140]	@ (800c918 <xTaskResumeAll+0x12c>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c890:	429a      	cmp	r2, r3
 800c892:	d302      	bcc.n	800c89a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c894:	4b21      	ldr	r3, [pc, #132]	@ (800c91c <xTaskResumeAll+0x130>)
 800c896:	2201      	movs	r2, #1
 800c898:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c89a:	4b1c      	ldr	r3, [pc, #112]	@ (800c90c <xTaskResumeAll+0x120>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d1cb      	bne.n	800c83a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d001      	beq.n	800c8ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c8a8:	f000 fb78 	bl	800cf9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c8ac:	4b1c      	ldr	r3, [pc, #112]	@ (800c920 <xTaskResumeAll+0x134>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d010      	beq.n	800c8da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c8b8:	f000 f858 	bl	800c96c <xTaskIncrementTick>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d002      	beq.n	800c8c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c8c2:	4b16      	ldr	r3, [pc, #88]	@ (800c91c <xTaskResumeAll+0x130>)
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	3b01      	subs	r3, #1
 800c8cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d1f1      	bne.n	800c8b8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c8d4:	4b12      	ldr	r3, [pc, #72]	@ (800c920 <xTaskResumeAll+0x134>)
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c8da:	4b10      	ldr	r3, [pc, #64]	@ (800c91c <xTaskResumeAll+0x130>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d009      	beq.n	800c8f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c8e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c924 <xTaskResumeAll+0x138>)
 800c8e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8ec:	601a      	str	r2, [r3, #0]
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8f6:	f001 fa21 	bl	800dd3c <vPortExitCritical>

	return xAlreadyYielded;
 800c8fa:	68bb      	ldr	r3, [r7, #8]
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3710      	adds	r7, #16
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	24001390 	.word	0x24001390
 800c908:	24001368 	.word	0x24001368
 800c90c:	24001328 	.word	0x24001328
 800c910:	24001370 	.word	0x24001370
 800c914:	24000e98 	.word	0x24000e98
 800c918:	24000e94 	.word	0x24000e94
 800c91c:	2400137c 	.word	0x2400137c
 800c920:	24001378 	.word	0x24001378
 800c924:	e000ed04 	.word	0xe000ed04

0800c928 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c92e:	4b05      	ldr	r3, [pc, #20]	@ (800c944 <xTaskGetTickCount+0x1c>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c934:	687b      	ldr	r3, [r7, #4]
}
 800c936:	4618      	mov	r0, r3
 800c938:	370c      	adds	r7, #12
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr
 800c942:	bf00      	nop
 800c944:	2400136c 	.word	0x2400136c

0800c948 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c94e:	f001 faa3 	bl	800de98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c952:	2300      	movs	r3, #0
 800c954:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c956:	4b04      	ldr	r3, [pc, #16]	@ (800c968 <xTaskGetTickCountFromISR+0x20>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c95c:	683b      	ldr	r3, [r7, #0]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3708      	adds	r7, #8
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	2400136c 	.word	0x2400136c

0800c96c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b086      	sub	sp, #24
 800c970:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c972:	2300      	movs	r3, #0
 800c974:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c976:	4b4f      	ldr	r3, [pc, #316]	@ (800cab4 <xTaskIncrementTick+0x148>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	f040 8090 	bne.w	800caa0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c980:	4b4d      	ldr	r3, [pc, #308]	@ (800cab8 <xTaskIncrementTick+0x14c>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	3301      	adds	r3, #1
 800c986:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c988:	4a4b      	ldr	r2, [pc, #300]	@ (800cab8 <xTaskIncrementTick+0x14c>)
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d121      	bne.n	800c9d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c994:	4b49      	ldr	r3, [pc, #292]	@ (800cabc <xTaskIncrementTick+0x150>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d00b      	beq.n	800c9b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	603b      	str	r3, [r7, #0]
}
 800c9b0:	bf00      	nop
 800c9b2:	bf00      	nop
 800c9b4:	e7fd      	b.n	800c9b2 <xTaskIncrementTick+0x46>
 800c9b6:	4b41      	ldr	r3, [pc, #260]	@ (800cabc <xTaskIncrementTick+0x150>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	60fb      	str	r3, [r7, #12]
 800c9bc:	4b40      	ldr	r3, [pc, #256]	@ (800cac0 <xTaskIncrementTick+0x154>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a3e      	ldr	r2, [pc, #248]	@ (800cabc <xTaskIncrementTick+0x150>)
 800c9c2:	6013      	str	r3, [r2, #0]
 800c9c4:	4a3e      	ldr	r2, [pc, #248]	@ (800cac0 <xTaskIncrementTick+0x154>)
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	6013      	str	r3, [r2, #0]
 800c9ca:	4b3e      	ldr	r3, [pc, #248]	@ (800cac4 <xTaskIncrementTick+0x158>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	4a3c      	ldr	r2, [pc, #240]	@ (800cac4 <xTaskIncrementTick+0x158>)
 800c9d2:	6013      	str	r3, [r2, #0]
 800c9d4:	f000 fae2 	bl	800cf9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c9d8:	4b3b      	ldr	r3, [pc, #236]	@ (800cac8 <xTaskIncrementTick+0x15c>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	693a      	ldr	r2, [r7, #16]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d349      	bcc.n	800ca76 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9e2:	4b36      	ldr	r3, [pc, #216]	@ (800cabc <xTaskIncrementTick+0x150>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d104      	bne.n	800c9f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9ec:	4b36      	ldr	r3, [pc, #216]	@ (800cac8 <xTaskIncrementTick+0x15c>)
 800c9ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c9f2:	601a      	str	r2, [r3, #0]
					break;
 800c9f4:	e03f      	b.n	800ca76 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9f6:	4b31      	ldr	r3, [pc, #196]	@ (800cabc <xTaskIncrementTick+0x150>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	68db      	ldr	r3, [r3, #12]
 800c9fc:	68db      	ldr	r3, [r3, #12]
 800c9fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ca06:	693a      	ldr	r2, [r7, #16]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d203      	bcs.n	800ca16 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ca0e:	4a2e      	ldr	r2, [pc, #184]	@ (800cac8 <xTaskIncrementTick+0x15c>)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ca14:	e02f      	b.n	800ca76 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	3304      	adds	r3, #4
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fe fb66 	bl	800b0ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d004      	beq.n	800ca32 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	3318      	adds	r3, #24
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7fe fb5d 	bl	800b0ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca36:	4b25      	ldr	r3, [pc, #148]	@ (800cacc <xTaskIncrementTick+0x160>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d903      	bls.n	800ca46 <xTaskIncrementTick+0xda>
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca42:	4a22      	ldr	r2, [pc, #136]	@ (800cacc <xTaskIncrementTick+0x160>)
 800ca44:	6013      	str	r3, [r2, #0]
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	4413      	add	r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	4a1f      	ldr	r2, [pc, #124]	@ (800cad0 <xTaskIncrementTick+0x164>)
 800ca54:	441a      	add	r2, r3
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	3304      	adds	r3, #4
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	4610      	mov	r0, r2
 800ca5e:	f7fe fae8 	bl	800b032 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca66:	4b1b      	ldr	r3, [pc, #108]	@ (800cad4 <xTaskIncrementTick+0x168>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d3b8      	bcc.n	800c9e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ca70:	2301      	movs	r3, #1
 800ca72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca74:	e7b5      	b.n	800c9e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ca76:	4b17      	ldr	r3, [pc, #92]	@ (800cad4 <xTaskIncrementTick+0x168>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca7c:	4914      	ldr	r1, [pc, #80]	@ (800cad0 <xTaskIncrementTick+0x164>)
 800ca7e:	4613      	mov	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	4413      	add	r3, r2
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	440b      	add	r3, r1
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d901      	bls.n	800ca92 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ca92:	4b11      	ldr	r3, [pc, #68]	@ (800cad8 <xTaskIncrementTick+0x16c>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d007      	beq.n	800caaa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	617b      	str	r3, [r7, #20]
 800ca9e:	e004      	b.n	800caaa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800caa0:	4b0e      	ldr	r3, [pc, #56]	@ (800cadc <xTaskIncrementTick+0x170>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	3301      	adds	r3, #1
 800caa6:	4a0d      	ldr	r2, [pc, #52]	@ (800cadc <xTaskIncrementTick+0x170>)
 800caa8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800caaa:	697b      	ldr	r3, [r7, #20]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3718      	adds	r7, #24
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	24001390 	.word	0x24001390
 800cab8:	2400136c 	.word	0x2400136c
 800cabc:	24001320 	.word	0x24001320
 800cac0:	24001324 	.word	0x24001324
 800cac4:	24001380 	.word	0x24001380
 800cac8:	24001388 	.word	0x24001388
 800cacc:	24001370 	.word	0x24001370
 800cad0:	24000e98 	.word	0x24000e98
 800cad4:	24000e94 	.word	0x24000e94
 800cad8:	2400137c 	.word	0x2400137c
 800cadc:	24001378 	.word	0x24001378

0800cae0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cae0:	b480      	push	{r7}
 800cae2:	b085      	sub	sp, #20
 800cae4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cae6:	4b2b      	ldr	r3, [pc, #172]	@ (800cb94 <vTaskSwitchContext+0xb4>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d003      	beq.n	800caf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800caee:	4b2a      	ldr	r3, [pc, #168]	@ (800cb98 <vTaskSwitchContext+0xb8>)
 800caf0:	2201      	movs	r2, #1
 800caf2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800caf4:	e047      	b.n	800cb86 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800caf6:	4b28      	ldr	r3, [pc, #160]	@ (800cb98 <vTaskSwitchContext+0xb8>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cafc:	4b27      	ldr	r3, [pc, #156]	@ (800cb9c <vTaskSwitchContext+0xbc>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	60fb      	str	r3, [r7, #12]
 800cb02:	e011      	b.n	800cb28 <vTaskSwitchContext+0x48>
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d10b      	bne.n	800cb22 <vTaskSwitchContext+0x42>
	__asm volatile
 800cb0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb0e:	f383 8811 	msr	BASEPRI, r3
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	607b      	str	r3, [r7, #4]
}
 800cb1c:	bf00      	nop
 800cb1e:	bf00      	nop
 800cb20:	e7fd      	b.n	800cb1e <vTaskSwitchContext+0x3e>
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	3b01      	subs	r3, #1
 800cb26:	60fb      	str	r3, [r7, #12]
 800cb28:	491d      	ldr	r1, [pc, #116]	@ (800cba0 <vTaskSwitchContext+0xc0>)
 800cb2a:	68fa      	ldr	r2, [r7, #12]
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	4413      	add	r3, r2
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	440b      	add	r3, r1
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d0e3      	beq.n	800cb04 <vTaskSwitchContext+0x24>
 800cb3c:	68fa      	ldr	r2, [r7, #12]
 800cb3e:	4613      	mov	r3, r2
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	4413      	add	r3, r2
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	4a16      	ldr	r2, [pc, #88]	@ (800cba0 <vTaskSwitchContext+0xc0>)
 800cb48:	4413      	add	r3, r2
 800cb4a:	60bb      	str	r3, [r7, #8]
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	685a      	ldr	r2, [r3, #4]
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	605a      	str	r2, [r3, #4]
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	685a      	ldr	r2, [r3, #4]
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	3308      	adds	r3, #8
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d104      	bne.n	800cb6c <vTaskSwitchContext+0x8c>
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	685a      	ldr	r2, [r3, #4]
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	605a      	str	r2, [r3, #4]
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	68db      	ldr	r3, [r3, #12]
 800cb72:	4a0c      	ldr	r2, [pc, #48]	@ (800cba4 <vTaskSwitchContext+0xc4>)
 800cb74:	6013      	str	r3, [r2, #0]
 800cb76:	4a09      	ldr	r2, [pc, #36]	@ (800cb9c <vTaskSwitchContext+0xbc>)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cb7c:	4b09      	ldr	r3, [pc, #36]	@ (800cba4 <vTaskSwitchContext+0xc4>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	3354      	adds	r3, #84	@ 0x54
 800cb82:	4a09      	ldr	r2, [pc, #36]	@ (800cba8 <vTaskSwitchContext+0xc8>)
 800cb84:	6013      	str	r3, [r2, #0]
}
 800cb86:	bf00      	nop
 800cb88:	3714      	adds	r7, #20
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	24001390 	.word	0x24001390
 800cb98:	2400137c 	.word	0x2400137c
 800cb9c:	24001370 	.word	0x24001370
 800cba0:	24000e98 	.word	0x24000e98
 800cba4:	24000e94 	.word	0x24000e94
 800cba8:	2400004c 	.word	0x2400004c

0800cbac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d10b      	bne.n	800cbd4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cbbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbc0:	f383 8811 	msr	BASEPRI, r3
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	60fb      	str	r3, [r7, #12]
}
 800cbce:	bf00      	nop
 800cbd0:	bf00      	nop
 800cbd2:	e7fd      	b.n	800cbd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cbd4:	4b07      	ldr	r3, [pc, #28]	@ (800cbf4 <vTaskPlaceOnEventList+0x48>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	3318      	adds	r3, #24
 800cbda:	4619      	mov	r1, r3
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f7fe fa4c 	bl	800b07a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cbe2:	2101      	movs	r1, #1
 800cbe4:	6838      	ldr	r0, [r7, #0]
 800cbe6:	f000 fb97 	bl	800d318 <prvAddCurrentTaskToDelayedList>
}
 800cbea:	bf00      	nop
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	24000e94 	.word	0x24000e94

0800cbf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b086      	sub	sp, #24
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d10b      	bne.n	800cc22 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800cc0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc0e:	f383 8811 	msr	BASEPRI, r3
 800cc12:	f3bf 8f6f 	isb	sy
 800cc16:	f3bf 8f4f 	dsb	sy
 800cc1a:	617b      	str	r3, [r7, #20]
}
 800cc1c:	bf00      	nop
 800cc1e:	bf00      	nop
 800cc20:	e7fd      	b.n	800cc1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc22:	4b0a      	ldr	r3, [pc, #40]	@ (800cc4c <vTaskPlaceOnEventListRestricted+0x54>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	3318      	adds	r3, #24
 800cc28:	4619      	mov	r1, r3
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f7fe fa01 	bl	800b032 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d002      	beq.n	800cc3c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800cc36:	f04f 33ff 	mov.w	r3, #4294967295
 800cc3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cc3c:	6879      	ldr	r1, [r7, #4]
 800cc3e:	68b8      	ldr	r0, [r7, #8]
 800cc40:	f000 fb6a 	bl	800d318 <prvAddCurrentTaskToDelayedList>
	}
 800cc44:	bf00      	nop
 800cc46:	3718      	adds	r7, #24
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	24000e94 	.word	0x24000e94

0800cc50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d10b      	bne.n	800cc7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800cc66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc6a:	f383 8811 	msr	BASEPRI, r3
 800cc6e:	f3bf 8f6f 	isb	sy
 800cc72:	f3bf 8f4f 	dsb	sy
 800cc76:	60fb      	str	r3, [r7, #12]
}
 800cc78:	bf00      	nop
 800cc7a:	bf00      	nop
 800cc7c:	e7fd      	b.n	800cc7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	3318      	adds	r3, #24
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fe fa32 	bl	800b0ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc88:	4b1d      	ldr	r3, [pc, #116]	@ (800cd00 <xTaskRemoveFromEventList+0xb0>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d11d      	bne.n	800cccc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	3304      	adds	r3, #4
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7fe fa29 	bl	800b0ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc9e:	4b19      	ldr	r3, [pc, #100]	@ (800cd04 <xTaskRemoveFromEventList+0xb4>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d903      	bls.n	800ccae <xTaskRemoveFromEventList+0x5e>
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccaa:	4a16      	ldr	r2, [pc, #88]	@ (800cd04 <xTaskRemoveFromEventList+0xb4>)
 800ccac:	6013      	str	r3, [r2, #0]
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	4413      	add	r3, r2
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	4a13      	ldr	r2, [pc, #76]	@ (800cd08 <xTaskRemoveFromEventList+0xb8>)
 800ccbc:	441a      	add	r2, r3
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	3304      	adds	r3, #4
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	4610      	mov	r0, r2
 800ccc6:	f7fe f9b4 	bl	800b032 <vListInsertEnd>
 800ccca:	e005      	b.n	800ccd8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	3318      	adds	r3, #24
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	480e      	ldr	r0, [pc, #56]	@ (800cd0c <xTaskRemoveFromEventList+0xbc>)
 800ccd4:	f7fe f9ad 	bl	800b032 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccdc:	4b0c      	ldr	r3, [pc, #48]	@ (800cd10 <xTaskRemoveFromEventList+0xc0>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d905      	bls.n	800ccf2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cce6:	2301      	movs	r3, #1
 800cce8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ccea:	4b0a      	ldr	r3, [pc, #40]	@ (800cd14 <xTaskRemoveFromEventList+0xc4>)
 800ccec:	2201      	movs	r2, #1
 800ccee:	601a      	str	r2, [r3, #0]
 800ccf0:	e001      	b.n	800ccf6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ccf6:	697b      	ldr	r3, [r7, #20]
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3718      	adds	r7, #24
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	24001390 	.word	0x24001390
 800cd04:	24001370 	.word	0x24001370
 800cd08:	24000e98 	.word	0x24000e98
 800cd0c:	24001328 	.word	0x24001328
 800cd10:	24000e94 	.word	0x24000e94
 800cd14:	2400137c 	.word	0x2400137c

0800cd18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cd20:	4b06      	ldr	r3, [pc, #24]	@ (800cd3c <vTaskInternalSetTimeOutState+0x24>)
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cd28:	4b05      	ldr	r3, [pc, #20]	@ (800cd40 <vTaskInternalSetTimeOutState+0x28>)
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	605a      	str	r2, [r3, #4]
}
 800cd30:	bf00      	nop
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr
 800cd3c:	24001380 	.word	0x24001380
 800cd40:	2400136c 	.word	0x2400136c

0800cd44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b088      	sub	sp, #32
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d10b      	bne.n	800cd6c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800cd54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd58:	f383 8811 	msr	BASEPRI, r3
 800cd5c:	f3bf 8f6f 	isb	sy
 800cd60:	f3bf 8f4f 	dsb	sy
 800cd64:	613b      	str	r3, [r7, #16]
}
 800cd66:	bf00      	nop
 800cd68:	bf00      	nop
 800cd6a:	e7fd      	b.n	800cd68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10b      	bne.n	800cd8a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800cd72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd76:	f383 8811 	msr	BASEPRI, r3
 800cd7a:	f3bf 8f6f 	isb	sy
 800cd7e:	f3bf 8f4f 	dsb	sy
 800cd82:	60fb      	str	r3, [r7, #12]
}
 800cd84:	bf00      	nop
 800cd86:	bf00      	nop
 800cd88:	e7fd      	b.n	800cd86 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800cd8a:	f000 ffa5 	bl	800dcd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cd8e:	4b1d      	ldr	r3, [pc, #116]	@ (800ce04 <xTaskCheckForTimeOut+0xc0>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	69ba      	ldr	r2, [r7, #24]
 800cd9a:	1ad3      	subs	r3, r2, r3
 800cd9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cda6:	d102      	bne.n	800cdae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	61fb      	str	r3, [r7, #28]
 800cdac:	e023      	b.n	800cdf6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	4b15      	ldr	r3, [pc, #84]	@ (800ce08 <xTaskCheckForTimeOut+0xc4>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d007      	beq.n	800cdca <xTaskCheckForTimeOut+0x86>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	69ba      	ldr	r2, [r7, #24]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d302      	bcc.n	800cdca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	61fb      	str	r3, [r7, #28]
 800cdc8:	e015      	b.n	800cdf6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	697a      	ldr	r2, [r7, #20]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d20b      	bcs.n	800cdec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	1ad2      	subs	r2, r2, r3
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f7ff ff99 	bl	800cd18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cde6:	2300      	movs	r3, #0
 800cde8:	61fb      	str	r3, [r7, #28]
 800cdea:	e004      	b.n	800cdf6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cdf6:	f000 ffa1 	bl	800dd3c <vPortExitCritical>

	return xReturn;
 800cdfa:	69fb      	ldr	r3, [r7, #28]
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3720      	adds	r7, #32
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}
 800ce04:	2400136c 	.word	0x2400136c
 800ce08:	24001380 	.word	0x24001380

0800ce0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ce10:	4b03      	ldr	r3, [pc, #12]	@ (800ce20 <vTaskMissedYield+0x14>)
 800ce12:	2201      	movs	r2, #1
 800ce14:	601a      	str	r2, [r3, #0]
}
 800ce16:	bf00      	nop
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr
 800ce20:	2400137c 	.word	0x2400137c

0800ce24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ce2c:	f000 f852 	bl	800ced4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ce30:	4b06      	ldr	r3, [pc, #24]	@ (800ce4c <prvIdleTask+0x28>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	2b01      	cmp	r3, #1
 800ce36:	d9f9      	bls.n	800ce2c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ce38:	4b05      	ldr	r3, [pc, #20]	@ (800ce50 <prvIdleTask+0x2c>)
 800ce3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce3e:	601a      	str	r2, [r3, #0]
 800ce40:	f3bf 8f4f 	dsb	sy
 800ce44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ce48:	e7f0      	b.n	800ce2c <prvIdleTask+0x8>
 800ce4a:	bf00      	nop
 800ce4c:	24000e98 	.word	0x24000e98
 800ce50:	e000ed04 	.word	0xe000ed04

0800ce54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	607b      	str	r3, [r7, #4]
 800ce5e:	e00c      	b.n	800ce7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	4613      	mov	r3, r2
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	4413      	add	r3, r2
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	4a12      	ldr	r2, [pc, #72]	@ (800ceb4 <prvInitialiseTaskLists+0x60>)
 800ce6c:	4413      	add	r3, r2
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7fe f8b2 	bl	800afd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	3301      	adds	r3, #1
 800ce78:	607b      	str	r3, [r7, #4]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2b37      	cmp	r3, #55	@ 0x37
 800ce7e:	d9ef      	bls.n	800ce60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ce80:	480d      	ldr	r0, [pc, #52]	@ (800ceb8 <prvInitialiseTaskLists+0x64>)
 800ce82:	f7fe f8a9 	bl	800afd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ce86:	480d      	ldr	r0, [pc, #52]	@ (800cebc <prvInitialiseTaskLists+0x68>)
 800ce88:	f7fe f8a6 	bl	800afd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ce8c:	480c      	ldr	r0, [pc, #48]	@ (800cec0 <prvInitialiseTaskLists+0x6c>)
 800ce8e:	f7fe f8a3 	bl	800afd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ce92:	480c      	ldr	r0, [pc, #48]	@ (800cec4 <prvInitialiseTaskLists+0x70>)
 800ce94:	f7fe f8a0 	bl	800afd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ce98:	480b      	ldr	r0, [pc, #44]	@ (800cec8 <prvInitialiseTaskLists+0x74>)
 800ce9a:	f7fe f89d 	bl	800afd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce9e:	4b0b      	ldr	r3, [pc, #44]	@ (800cecc <prvInitialiseTaskLists+0x78>)
 800cea0:	4a05      	ldr	r2, [pc, #20]	@ (800ceb8 <prvInitialiseTaskLists+0x64>)
 800cea2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cea4:	4b0a      	ldr	r3, [pc, #40]	@ (800ced0 <prvInitialiseTaskLists+0x7c>)
 800cea6:	4a05      	ldr	r2, [pc, #20]	@ (800cebc <prvInitialiseTaskLists+0x68>)
 800cea8:	601a      	str	r2, [r3, #0]
}
 800ceaa:	bf00      	nop
 800ceac:	3708      	adds	r7, #8
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	24000e98 	.word	0x24000e98
 800ceb8:	240012f8 	.word	0x240012f8
 800cebc:	2400130c 	.word	0x2400130c
 800cec0:	24001328 	.word	0x24001328
 800cec4:	2400133c 	.word	0x2400133c
 800cec8:	24001354 	.word	0x24001354
 800cecc:	24001320 	.word	0x24001320
 800ced0:	24001324 	.word	0x24001324

0800ced4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ceda:	e019      	b.n	800cf10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cedc:	f000 fefc 	bl	800dcd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cee0:	4b10      	ldr	r3, [pc, #64]	@ (800cf24 <prvCheckTasksWaitingTermination+0x50>)
 800cee2:	68db      	ldr	r3, [r3, #12]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	3304      	adds	r3, #4
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7fe f8fd 	bl	800b0ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cef2:	4b0d      	ldr	r3, [pc, #52]	@ (800cf28 <prvCheckTasksWaitingTermination+0x54>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	3b01      	subs	r3, #1
 800cef8:	4a0b      	ldr	r2, [pc, #44]	@ (800cf28 <prvCheckTasksWaitingTermination+0x54>)
 800cefa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cefc:	4b0b      	ldr	r3, [pc, #44]	@ (800cf2c <prvCheckTasksWaitingTermination+0x58>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	3b01      	subs	r3, #1
 800cf02:	4a0a      	ldr	r2, [pc, #40]	@ (800cf2c <prvCheckTasksWaitingTermination+0x58>)
 800cf04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cf06:	f000 ff19 	bl	800dd3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 f810 	bl	800cf30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf10:	4b06      	ldr	r3, [pc, #24]	@ (800cf2c <prvCheckTasksWaitingTermination+0x58>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d1e1      	bne.n	800cedc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cf18:	bf00      	nop
 800cf1a:	bf00      	nop
 800cf1c:	3708      	adds	r7, #8
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	2400133c 	.word	0x2400133c
 800cf28:	24001368 	.word	0x24001368
 800cf2c:	24001350 	.word	0x24001350

0800cf30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	3354      	adds	r3, #84	@ 0x54
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f00d faab 	bl	801a498 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d108      	bne.n	800cf5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf50:	4618      	mov	r0, r3
 800cf52:	f001 f8b1 	bl	800e0b8 <vPortFree>
				vPortFree( pxTCB );
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f001 f8ae 	bl	800e0b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cf5c:	e019      	b.n	800cf92 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d103      	bne.n	800cf70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f001 f8a5 	bl	800e0b8 <vPortFree>
	}
 800cf6e:	e010      	b.n	800cf92 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cf76:	2b02      	cmp	r3, #2
 800cf78:	d00b      	beq.n	800cf92 <prvDeleteTCB+0x62>
	__asm volatile
 800cf7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	60fb      	str	r3, [r7, #12]
}
 800cf8c:	bf00      	nop
 800cf8e:	bf00      	nop
 800cf90:	e7fd      	b.n	800cf8e <prvDeleteTCB+0x5e>
	}
 800cf92:	bf00      	nop
 800cf94:	3710      	adds	r7, #16
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
	...

0800cf9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfa2:	4b0c      	ldr	r3, [pc, #48]	@ (800cfd4 <prvResetNextTaskUnblockTime+0x38>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d104      	bne.n	800cfb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cfac:	4b0a      	ldr	r3, [pc, #40]	@ (800cfd8 <prvResetNextTaskUnblockTime+0x3c>)
 800cfae:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cfb4:	e008      	b.n	800cfc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfb6:	4b07      	ldr	r3, [pc, #28]	@ (800cfd4 <prvResetNextTaskUnblockTime+0x38>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	4a04      	ldr	r2, [pc, #16]	@ (800cfd8 <prvResetNextTaskUnblockTime+0x3c>)
 800cfc6:	6013      	str	r3, [r2, #0]
}
 800cfc8:	bf00      	nop
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr
 800cfd4:	24001320 	.word	0x24001320
 800cfd8:	24001388 	.word	0x24001388

0800cfdc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800cfe2:	4b05      	ldr	r3, [pc, #20]	@ (800cff8 <xTaskGetCurrentTaskHandle+0x1c>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800cfe8:	687b      	ldr	r3, [r7, #4]
	}
 800cfea:	4618      	mov	r0, r3
 800cfec:	370c      	adds	r7, #12
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop
 800cff8:	24000e94 	.word	0x24000e94

0800cffc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d002:	4b0b      	ldr	r3, [pc, #44]	@ (800d030 <xTaskGetSchedulerState+0x34>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d102      	bne.n	800d010 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d00a:	2301      	movs	r3, #1
 800d00c:	607b      	str	r3, [r7, #4]
 800d00e:	e008      	b.n	800d022 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d010:	4b08      	ldr	r3, [pc, #32]	@ (800d034 <xTaskGetSchedulerState+0x38>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d102      	bne.n	800d01e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d018:	2302      	movs	r3, #2
 800d01a:	607b      	str	r3, [r7, #4]
 800d01c:	e001      	b.n	800d022 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d01e:	2300      	movs	r3, #0
 800d020:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d022:	687b      	ldr	r3, [r7, #4]
	}
 800d024:	4618      	mov	r0, r3
 800d026:	370c      	adds	r7, #12
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr
 800d030:	24001374 	.word	0x24001374
 800d034:	24001390 	.word	0x24001390

0800d038 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d044:	2300      	movs	r3, #0
 800d046:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d051      	beq.n	800d0f2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d052:	4b2a      	ldr	r3, [pc, #168]	@ (800d0fc <xTaskPriorityInherit+0xc4>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d058:	429a      	cmp	r2, r3
 800d05a:	d241      	bcs.n	800d0e0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	699b      	ldr	r3, [r3, #24]
 800d060:	2b00      	cmp	r3, #0
 800d062:	db06      	blt.n	800d072 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d064:	4b25      	ldr	r3, [pc, #148]	@ (800d0fc <xTaskPriorityInherit+0xc4>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d06a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	6959      	ldr	r1, [r3, #20]
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d07a:	4613      	mov	r3, r2
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	4413      	add	r3, r2
 800d080:	009b      	lsls	r3, r3, #2
 800d082:	4a1f      	ldr	r2, [pc, #124]	@ (800d100 <xTaskPriorityInherit+0xc8>)
 800d084:	4413      	add	r3, r2
 800d086:	4299      	cmp	r1, r3
 800d088:	d122      	bne.n	800d0d0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	3304      	adds	r3, #4
 800d08e:	4618      	mov	r0, r3
 800d090:	f7fe f82c 	bl	800b0ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d094:	4b19      	ldr	r3, [pc, #100]	@ (800d0fc <xTaskPriorityInherit+0xc4>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0a2:	4b18      	ldr	r3, [pc, #96]	@ (800d104 <xTaskPriorityInherit+0xcc>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d903      	bls.n	800d0b2 <xTaskPriorityInherit+0x7a>
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ae:	4a15      	ldr	r2, [pc, #84]	@ (800d104 <xTaskPriorityInherit+0xcc>)
 800d0b0:	6013      	str	r3, [r2, #0]
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	4413      	add	r3, r2
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	4a10      	ldr	r2, [pc, #64]	@ (800d100 <xTaskPriorityInherit+0xc8>)
 800d0c0:	441a      	add	r2, r3
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	3304      	adds	r3, #4
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	4610      	mov	r0, r2
 800d0ca:	f7fd ffb2 	bl	800b032 <vListInsertEnd>
 800d0ce:	e004      	b.n	800d0da <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d0d0:	4b0a      	ldr	r3, [pc, #40]	@ (800d0fc <xTaskPriorityInherit+0xc4>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d0da:	2301      	movs	r3, #1
 800d0dc:	60fb      	str	r3, [r7, #12]
 800d0de:	e008      	b.n	800d0f2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d0e4:	4b05      	ldr	r3, [pc, #20]	@ (800d0fc <xTaskPriorityInherit+0xc4>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d201      	bcs.n	800d0f2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
	}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3710      	adds	r7, #16
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	24000e94 	.word	0x24000e94
 800d100:	24000e98 	.word	0x24000e98
 800d104:	24001370 	.word	0x24001370

0800d108 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b086      	sub	sp, #24
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d114:	2300      	movs	r3, #0
 800d116:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d058      	beq.n	800d1d0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d11e:	4b2f      	ldr	r3, [pc, #188]	@ (800d1dc <xTaskPriorityDisinherit+0xd4>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	693a      	ldr	r2, [r7, #16]
 800d124:	429a      	cmp	r2, r3
 800d126:	d00b      	beq.n	800d140 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d12c:	f383 8811 	msr	BASEPRI, r3
 800d130:	f3bf 8f6f 	isb	sy
 800d134:	f3bf 8f4f 	dsb	sy
 800d138:	60fb      	str	r3, [r7, #12]
}
 800d13a:	bf00      	nop
 800d13c:	bf00      	nop
 800d13e:	e7fd      	b.n	800d13c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d144:	2b00      	cmp	r3, #0
 800d146:	d10b      	bne.n	800d160 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d14c:	f383 8811 	msr	BASEPRI, r3
 800d150:	f3bf 8f6f 	isb	sy
 800d154:	f3bf 8f4f 	dsb	sy
 800d158:	60bb      	str	r3, [r7, #8]
}
 800d15a:	bf00      	nop
 800d15c:	bf00      	nop
 800d15e:	e7fd      	b.n	800d15c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d164:	1e5a      	subs	r2, r3, #1
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d172:	429a      	cmp	r2, r3
 800d174:	d02c      	beq.n	800d1d0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d128      	bne.n	800d1d0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	3304      	adds	r3, #4
 800d182:	4618      	mov	r0, r3
 800d184:	f7fd ffb2 	bl	800b0ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d194:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1a0:	4b0f      	ldr	r3, [pc, #60]	@ (800d1e0 <xTaskPriorityDisinherit+0xd8>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d903      	bls.n	800d1b0 <xTaskPriorityDisinherit+0xa8>
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1ac:	4a0c      	ldr	r2, [pc, #48]	@ (800d1e0 <xTaskPriorityDisinherit+0xd8>)
 800d1ae:	6013      	str	r3, [r2, #0]
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	4413      	add	r3, r2
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	4a09      	ldr	r2, [pc, #36]	@ (800d1e4 <xTaskPriorityDisinherit+0xdc>)
 800d1be:	441a      	add	r2, r3
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	3304      	adds	r3, #4
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	4610      	mov	r0, r2
 800d1c8:	f7fd ff33 	bl	800b032 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d1d0:	697b      	ldr	r3, [r7, #20]
	}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3718      	adds	r7, #24
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	24000e94 	.word	0x24000e94
 800d1e0:	24001370 	.word	0x24001370
 800d1e4:	24000e98 	.word	0x24000e98

0800d1e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b088      	sub	sp, #32
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d06c      	beq.n	800d2da <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d200:	69bb      	ldr	r3, [r7, #24]
 800d202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d204:	2b00      	cmp	r3, #0
 800d206:	d10b      	bne.n	800d220 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800d208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d20c:	f383 8811 	msr	BASEPRI, r3
 800d210:	f3bf 8f6f 	isb	sy
 800d214:	f3bf 8f4f 	dsb	sy
 800d218:	60fb      	str	r3, [r7, #12]
}
 800d21a:	bf00      	nop
 800d21c:	bf00      	nop
 800d21e:	e7fd      	b.n	800d21c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d224:	683a      	ldr	r2, [r7, #0]
 800d226:	429a      	cmp	r2, r3
 800d228:	d902      	bls.n	800d230 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	61fb      	str	r3, [r7, #28]
 800d22e:	e002      	b.n	800d236 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d230:	69bb      	ldr	r3, [r7, #24]
 800d232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d234:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d236:	69bb      	ldr	r3, [r7, #24]
 800d238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d23a:	69fa      	ldr	r2, [r7, #28]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d04c      	beq.n	800d2da <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d244:	697a      	ldr	r2, [r7, #20]
 800d246:	429a      	cmp	r2, r3
 800d248:	d147      	bne.n	800d2da <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d24a:	4b26      	ldr	r3, [pc, #152]	@ (800d2e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	69ba      	ldr	r2, [r7, #24]
 800d250:	429a      	cmp	r2, r3
 800d252:	d10b      	bne.n	800d26c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800d254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d258:	f383 8811 	msr	BASEPRI, r3
 800d25c:	f3bf 8f6f 	isb	sy
 800d260:	f3bf 8f4f 	dsb	sy
 800d264:	60bb      	str	r3, [r7, #8]
}
 800d266:	bf00      	nop
 800d268:	bf00      	nop
 800d26a:	e7fd      	b.n	800d268 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d26c:	69bb      	ldr	r3, [r7, #24]
 800d26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d270:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d272:	69bb      	ldr	r3, [r7, #24]
 800d274:	69fa      	ldr	r2, [r7, #28]
 800d276:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d278:	69bb      	ldr	r3, [r7, #24]
 800d27a:	699b      	ldr	r3, [r3, #24]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	db04      	blt.n	800d28a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d286:	69bb      	ldr	r3, [r7, #24]
 800d288:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d28a:	69bb      	ldr	r3, [r7, #24]
 800d28c:	6959      	ldr	r1, [r3, #20]
 800d28e:	693a      	ldr	r2, [r7, #16]
 800d290:	4613      	mov	r3, r2
 800d292:	009b      	lsls	r3, r3, #2
 800d294:	4413      	add	r3, r2
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	4a13      	ldr	r2, [pc, #76]	@ (800d2e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d29a:	4413      	add	r3, r2
 800d29c:	4299      	cmp	r1, r3
 800d29e:	d11c      	bne.n	800d2da <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	3304      	adds	r3, #4
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7fd ff21 	bl	800b0ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2ae:	4b0f      	ldr	r3, [pc, #60]	@ (800d2ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d903      	bls.n	800d2be <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ba:	4a0c      	ldr	r2, [pc, #48]	@ (800d2ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d2bc:	6013      	str	r3, [r2, #0]
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	4413      	add	r3, r2
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	4a07      	ldr	r2, [pc, #28]	@ (800d2e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d2cc:	441a      	add	r2, r3
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	3304      	adds	r3, #4
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	4610      	mov	r0, r2
 800d2d6:	f7fd feac 	bl	800b032 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d2da:	bf00      	nop
 800d2dc:	3720      	adds	r7, #32
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	24000e94 	.word	0x24000e94
 800d2e8:	24000e98 	.word	0x24000e98
 800d2ec:	24001370 	.word	0x24001370

0800d2f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d2f0:	b480      	push	{r7}
 800d2f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d2f4:	4b07      	ldr	r3, [pc, #28]	@ (800d314 <pvTaskIncrementMutexHeldCount+0x24>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d004      	beq.n	800d306 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d2fc:	4b05      	ldr	r3, [pc, #20]	@ (800d314 <pvTaskIncrementMutexHeldCount+0x24>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d302:	3201      	adds	r2, #1
 800d304:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800d306:	4b03      	ldr	r3, [pc, #12]	@ (800d314 <pvTaskIncrementMutexHeldCount+0x24>)
 800d308:	681b      	ldr	r3, [r3, #0]
	}
 800d30a:	4618      	mov	r0, r3
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr
 800d314:	24000e94 	.word	0x24000e94

0800d318 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d322:	4b21      	ldr	r3, [pc, #132]	@ (800d3a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d328:	4b20      	ldr	r3, [pc, #128]	@ (800d3ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	3304      	adds	r3, #4
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fd fedc 	bl	800b0ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d33a:	d10a      	bne.n	800d352 <prvAddCurrentTaskToDelayedList+0x3a>
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d007      	beq.n	800d352 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d342:	4b1a      	ldr	r3, [pc, #104]	@ (800d3ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	3304      	adds	r3, #4
 800d348:	4619      	mov	r1, r3
 800d34a:	4819      	ldr	r0, [pc, #100]	@ (800d3b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800d34c:	f7fd fe71 	bl	800b032 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d350:	e026      	b.n	800d3a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d352:	68fa      	ldr	r2, [r7, #12]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	4413      	add	r3, r2
 800d358:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d35a:	4b14      	ldr	r3, [pc, #80]	@ (800d3ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	68ba      	ldr	r2, [r7, #8]
 800d360:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d362:	68ba      	ldr	r2, [r7, #8]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	429a      	cmp	r2, r3
 800d368:	d209      	bcs.n	800d37e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d36a:	4b12      	ldr	r3, [pc, #72]	@ (800d3b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d36c:	681a      	ldr	r2, [r3, #0]
 800d36e:	4b0f      	ldr	r3, [pc, #60]	@ (800d3ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	3304      	adds	r3, #4
 800d374:	4619      	mov	r1, r3
 800d376:	4610      	mov	r0, r2
 800d378:	f7fd fe7f 	bl	800b07a <vListInsert>
}
 800d37c:	e010      	b.n	800d3a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d37e:	4b0e      	ldr	r3, [pc, #56]	@ (800d3b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	4b0a      	ldr	r3, [pc, #40]	@ (800d3ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	3304      	adds	r3, #4
 800d388:	4619      	mov	r1, r3
 800d38a:	4610      	mov	r0, r2
 800d38c:	f7fd fe75 	bl	800b07a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d390:	4b0a      	ldr	r3, [pc, #40]	@ (800d3bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	68ba      	ldr	r2, [r7, #8]
 800d396:	429a      	cmp	r2, r3
 800d398:	d202      	bcs.n	800d3a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d39a:	4a08      	ldr	r2, [pc, #32]	@ (800d3bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	6013      	str	r3, [r2, #0]
}
 800d3a0:	bf00      	nop
 800d3a2:	3710      	adds	r7, #16
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	2400136c 	.word	0x2400136c
 800d3ac:	24000e94 	.word	0x24000e94
 800d3b0:	24001354 	.word	0x24001354
 800d3b4:	24001324 	.word	0x24001324
 800d3b8:	24001320 	.word	0x24001320
 800d3bc:	24001388 	.word	0x24001388

0800d3c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b08a      	sub	sp, #40	@ 0x28
 800d3c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d3ca:	f000 fb13 	bl	800d9f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d3ce:	4b1d      	ldr	r3, [pc, #116]	@ (800d444 <xTimerCreateTimerTask+0x84>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d021      	beq.n	800d41a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d3de:	1d3a      	adds	r2, r7, #4
 800d3e0:	f107 0108 	add.w	r1, r7, #8
 800d3e4:	f107 030c 	add.w	r3, r7, #12
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7fd fddb 	bl	800afa4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d3ee:	6879      	ldr	r1, [r7, #4]
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	68fa      	ldr	r2, [r7, #12]
 800d3f4:	9202      	str	r2, [sp, #8]
 800d3f6:	9301      	str	r3, [sp, #4]
 800d3f8:	2302      	movs	r3, #2
 800d3fa:	9300      	str	r3, [sp, #0]
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	460a      	mov	r2, r1
 800d400:	4911      	ldr	r1, [pc, #68]	@ (800d448 <xTimerCreateTimerTask+0x88>)
 800d402:	4812      	ldr	r0, [pc, #72]	@ (800d44c <xTimerCreateTimerTask+0x8c>)
 800d404:	f7fe ff80 	bl	800c308 <xTaskCreateStatic>
 800d408:	4603      	mov	r3, r0
 800d40a:	4a11      	ldr	r2, [pc, #68]	@ (800d450 <xTimerCreateTimerTask+0x90>)
 800d40c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d40e:	4b10      	ldr	r3, [pc, #64]	@ (800d450 <xTimerCreateTimerTask+0x90>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d001      	beq.n	800d41a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d416:	2301      	movs	r3, #1
 800d418:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d10b      	bne.n	800d438 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d424:	f383 8811 	msr	BASEPRI, r3
 800d428:	f3bf 8f6f 	isb	sy
 800d42c:	f3bf 8f4f 	dsb	sy
 800d430:	613b      	str	r3, [r7, #16]
}
 800d432:	bf00      	nop
 800d434:	bf00      	nop
 800d436:	e7fd      	b.n	800d434 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d438:	697b      	ldr	r3, [r7, #20]
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3718      	adds	r7, #24
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	240013c4 	.word	0x240013c4
 800d448:	0801b9b4 	.word	0x0801b9b4
 800d44c:	0800d58d 	.word	0x0800d58d
 800d450:	240013c8 	.word	0x240013c8

0800d454 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b08a      	sub	sp, #40	@ 0x28
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
 800d460:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d462:	2300      	movs	r3, #0
 800d464:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d10b      	bne.n	800d484 <xTimerGenericCommand+0x30>
	__asm volatile
 800d46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d470:	f383 8811 	msr	BASEPRI, r3
 800d474:	f3bf 8f6f 	isb	sy
 800d478:	f3bf 8f4f 	dsb	sy
 800d47c:	623b      	str	r3, [r7, #32]
}
 800d47e:	bf00      	nop
 800d480:	bf00      	nop
 800d482:	e7fd      	b.n	800d480 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d484:	4b19      	ldr	r3, [pc, #100]	@ (800d4ec <xTimerGenericCommand+0x98>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d02a      	beq.n	800d4e2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	2b05      	cmp	r3, #5
 800d49c:	dc18      	bgt.n	800d4d0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d49e:	f7ff fdad 	bl	800cffc <xTaskGetSchedulerState>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	2b02      	cmp	r3, #2
 800d4a6:	d109      	bne.n	800d4bc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d4a8:	4b10      	ldr	r3, [pc, #64]	@ (800d4ec <xTimerGenericCommand+0x98>)
 800d4aa:	6818      	ldr	r0, [r3, #0]
 800d4ac:	f107 0110 	add.w	r1, r7, #16
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4b4:	f7fe f8b0 	bl	800b618 <xQueueGenericSend>
 800d4b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800d4ba:	e012      	b.n	800d4e2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d4bc:	4b0b      	ldr	r3, [pc, #44]	@ (800d4ec <xTimerGenericCommand+0x98>)
 800d4be:	6818      	ldr	r0, [r3, #0]
 800d4c0:	f107 0110 	add.w	r1, r7, #16
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f7fe f8a6 	bl	800b618 <xQueueGenericSend>
 800d4cc:	6278      	str	r0, [r7, #36]	@ 0x24
 800d4ce:	e008      	b.n	800d4e2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d4d0:	4b06      	ldr	r3, [pc, #24]	@ (800d4ec <xTimerGenericCommand+0x98>)
 800d4d2:	6818      	ldr	r0, [r3, #0]
 800d4d4:	f107 0110 	add.w	r1, r7, #16
 800d4d8:	2300      	movs	r3, #0
 800d4da:	683a      	ldr	r2, [r7, #0]
 800d4dc:	f7fe f99e 	bl	800b81c <xQueueGenericSendFromISR>
 800d4e0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3728      	adds	r7, #40	@ 0x28
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	240013c4 	.word	0x240013c4

0800d4f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b088      	sub	sp, #32
 800d4f4:	af02      	add	r7, sp, #8
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4fa:	4b23      	ldr	r3, [pc, #140]	@ (800d588 <prvProcessExpiredTimer+0x98>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	68db      	ldr	r3, [r3, #12]
 800d502:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	3304      	adds	r3, #4
 800d508:	4618      	mov	r0, r3
 800d50a:	f7fd fdef 	bl	800b0ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d514:	f003 0304 	and.w	r3, r3, #4
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d023      	beq.n	800d564 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	699a      	ldr	r2, [r3, #24]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	18d1      	adds	r1, r2, r3
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	683a      	ldr	r2, [r7, #0]
 800d528:	6978      	ldr	r0, [r7, #20]
 800d52a:	f000 f8d5 	bl	800d6d8 <prvInsertTimerInActiveList>
 800d52e:	4603      	mov	r3, r0
 800d530:	2b00      	cmp	r3, #0
 800d532:	d020      	beq.n	800d576 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d534:	2300      	movs	r3, #0
 800d536:	9300      	str	r3, [sp, #0]
 800d538:	2300      	movs	r3, #0
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	2100      	movs	r1, #0
 800d53e:	6978      	ldr	r0, [r7, #20]
 800d540:	f7ff ff88 	bl	800d454 <xTimerGenericCommand>
 800d544:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d114      	bne.n	800d576 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d550:	f383 8811 	msr	BASEPRI, r3
 800d554:	f3bf 8f6f 	isb	sy
 800d558:	f3bf 8f4f 	dsb	sy
 800d55c:	60fb      	str	r3, [r7, #12]
}
 800d55e:	bf00      	nop
 800d560:	bf00      	nop
 800d562:	e7fd      	b.n	800d560 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d56a:	f023 0301 	bic.w	r3, r3, #1
 800d56e:	b2da      	uxtb	r2, r3
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	6a1b      	ldr	r3, [r3, #32]
 800d57a:	6978      	ldr	r0, [r7, #20]
 800d57c:	4798      	blx	r3
}
 800d57e:	bf00      	nop
 800d580:	3718      	adds	r7, #24
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	240013bc 	.word	0x240013bc

0800d58c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d594:	f107 0308 	add.w	r3, r7, #8
 800d598:	4618      	mov	r0, r3
 800d59a:	f000 f859 	bl	800d650 <prvGetNextExpireTime>
 800d59e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	68f8      	ldr	r0, [r7, #12]
 800d5a6:	f000 f805 	bl	800d5b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d5aa:	f000 f8d7 	bl	800d75c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d5ae:	bf00      	nop
 800d5b0:	e7f0      	b.n	800d594 <prvTimerTask+0x8>
	...

0800d5b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b084      	sub	sp, #16
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d5be:	f7ff f907 	bl	800c7d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d5c2:	f107 0308 	add.w	r3, r7, #8
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f000 f866 	bl	800d698 <prvSampleTimeNow>
 800d5cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d130      	bne.n	800d636 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d10a      	bne.n	800d5f0 <prvProcessTimerOrBlockTask+0x3c>
 800d5da:	687a      	ldr	r2, [r7, #4]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d806      	bhi.n	800d5f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d5e2:	f7ff f903 	bl	800c7ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d5e6:	68f9      	ldr	r1, [r7, #12]
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f7ff ff81 	bl	800d4f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d5ee:	e024      	b.n	800d63a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d008      	beq.n	800d608 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d5f6:	4b13      	ldr	r3, [pc, #76]	@ (800d644 <prvProcessTimerOrBlockTask+0x90>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d101      	bne.n	800d604 <prvProcessTimerOrBlockTask+0x50>
 800d600:	2301      	movs	r3, #1
 800d602:	e000      	b.n	800d606 <prvProcessTimerOrBlockTask+0x52>
 800d604:	2300      	movs	r3, #0
 800d606:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d608:	4b0f      	ldr	r3, [pc, #60]	@ (800d648 <prvProcessTimerOrBlockTask+0x94>)
 800d60a:	6818      	ldr	r0, [r3, #0]
 800d60c:	687a      	ldr	r2, [r7, #4]
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	1ad3      	subs	r3, r2, r3
 800d612:	683a      	ldr	r2, [r7, #0]
 800d614:	4619      	mov	r1, r3
 800d616:	f7fe fe43 	bl	800c2a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d61a:	f7ff f8e7 	bl	800c7ec <xTaskResumeAll>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d10a      	bne.n	800d63a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d624:	4b09      	ldr	r3, [pc, #36]	@ (800d64c <prvProcessTimerOrBlockTask+0x98>)
 800d626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d62a:	601a      	str	r2, [r3, #0]
 800d62c:	f3bf 8f4f 	dsb	sy
 800d630:	f3bf 8f6f 	isb	sy
}
 800d634:	e001      	b.n	800d63a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d636:	f7ff f8d9 	bl	800c7ec <xTaskResumeAll>
}
 800d63a:	bf00      	nop
 800d63c:	3710      	adds	r7, #16
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	240013c0 	.word	0x240013c0
 800d648:	240013c4 	.word	0x240013c4
 800d64c:	e000ed04 	.word	0xe000ed04

0800d650 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d650:	b480      	push	{r7}
 800d652:	b085      	sub	sp, #20
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d658:	4b0e      	ldr	r3, [pc, #56]	@ (800d694 <prvGetNextExpireTime+0x44>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d101      	bne.n	800d666 <prvGetNextExpireTime+0x16>
 800d662:	2201      	movs	r2, #1
 800d664:	e000      	b.n	800d668 <prvGetNextExpireTime+0x18>
 800d666:	2200      	movs	r2, #0
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d105      	bne.n	800d680 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d674:	4b07      	ldr	r3, [pc, #28]	@ (800d694 <prvGetNextExpireTime+0x44>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	68db      	ldr	r3, [r3, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	60fb      	str	r3, [r7, #12]
 800d67e:	e001      	b.n	800d684 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d680:	2300      	movs	r3, #0
 800d682:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d684:	68fb      	ldr	r3, [r7, #12]
}
 800d686:	4618      	mov	r0, r3
 800d688:	3714      	adds	r7, #20
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr
 800d692:	bf00      	nop
 800d694:	240013bc 	.word	0x240013bc

0800d698 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d6a0:	f7ff f942 	bl	800c928 <xTaskGetTickCount>
 800d6a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d6a6:	4b0b      	ldr	r3, [pc, #44]	@ (800d6d4 <prvSampleTimeNow+0x3c>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	68fa      	ldr	r2, [r7, #12]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d205      	bcs.n	800d6bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d6b0:	f000 f93a 	bl	800d928 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	601a      	str	r2, [r3, #0]
 800d6ba:	e002      	b.n	800d6c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d6c2:	4a04      	ldr	r2, [pc, #16]	@ (800d6d4 <prvSampleTimeNow+0x3c>)
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3710      	adds	r7, #16
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop
 800d6d4:	240013cc 	.word	0x240013cc

0800d6d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b086      	sub	sp, #24
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	60b9      	str	r1, [r7, #8]
 800d6e2:	607a      	str	r2, [r7, #4]
 800d6e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	68fa      	ldr	r2, [r7, #12]
 800d6f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d6f6:	68ba      	ldr	r2, [r7, #8]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d812      	bhi.n	800d724 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	1ad2      	subs	r2, r2, r3
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	699b      	ldr	r3, [r3, #24]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d302      	bcc.n	800d712 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d70c:	2301      	movs	r3, #1
 800d70e:	617b      	str	r3, [r7, #20]
 800d710:	e01b      	b.n	800d74a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d712:	4b10      	ldr	r3, [pc, #64]	@ (800d754 <prvInsertTimerInActiveList+0x7c>)
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	3304      	adds	r3, #4
 800d71a:	4619      	mov	r1, r3
 800d71c:	4610      	mov	r0, r2
 800d71e:	f7fd fcac 	bl	800b07a <vListInsert>
 800d722:	e012      	b.n	800d74a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	429a      	cmp	r2, r3
 800d72a:	d206      	bcs.n	800d73a <prvInsertTimerInActiveList+0x62>
 800d72c:	68ba      	ldr	r2, [r7, #8]
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	429a      	cmp	r2, r3
 800d732:	d302      	bcc.n	800d73a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d734:	2301      	movs	r3, #1
 800d736:	617b      	str	r3, [r7, #20]
 800d738:	e007      	b.n	800d74a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d73a:	4b07      	ldr	r3, [pc, #28]	@ (800d758 <prvInsertTimerInActiveList+0x80>)
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	3304      	adds	r3, #4
 800d742:	4619      	mov	r1, r3
 800d744:	4610      	mov	r0, r2
 800d746:	f7fd fc98 	bl	800b07a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d74a:	697b      	ldr	r3, [r7, #20]
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3718      	adds	r7, #24
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}
 800d754:	240013c0 	.word	0x240013c0
 800d758:	240013bc 	.word	0x240013bc

0800d75c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b08e      	sub	sp, #56	@ 0x38
 800d760:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d762:	e0ce      	b.n	800d902 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	da19      	bge.n	800d79e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d76a:	1d3b      	adds	r3, r7, #4
 800d76c:	3304      	adds	r3, #4
 800d76e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d772:	2b00      	cmp	r3, #0
 800d774:	d10b      	bne.n	800d78e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d77a:	f383 8811 	msr	BASEPRI, r3
 800d77e:	f3bf 8f6f 	isb	sy
 800d782:	f3bf 8f4f 	dsb	sy
 800d786:	61fb      	str	r3, [r7, #28]
}
 800d788:	bf00      	nop
 800d78a:	bf00      	nop
 800d78c:	e7fd      	b.n	800d78a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d794:	6850      	ldr	r0, [r2, #4]
 800d796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d798:	6892      	ldr	r2, [r2, #8]
 800d79a:	4611      	mov	r1, r2
 800d79c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	f2c0 80ae 	blt.w	800d902 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ac:	695b      	ldr	r3, [r3, #20]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d004      	beq.n	800d7bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7b4:	3304      	adds	r3, #4
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fd fc98 	bl	800b0ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d7bc:	463b      	mov	r3, r7
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7ff ff6a 	bl	800d698 <prvSampleTimeNow>
 800d7c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2b09      	cmp	r3, #9
 800d7ca:	f200 8097 	bhi.w	800d8fc <prvProcessReceivedCommands+0x1a0>
 800d7ce:	a201      	add	r2, pc, #4	@ (adr r2, 800d7d4 <prvProcessReceivedCommands+0x78>)
 800d7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d4:	0800d7fd 	.word	0x0800d7fd
 800d7d8:	0800d7fd 	.word	0x0800d7fd
 800d7dc:	0800d7fd 	.word	0x0800d7fd
 800d7e0:	0800d873 	.word	0x0800d873
 800d7e4:	0800d887 	.word	0x0800d887
 800d7e8:	0800d8d3 	.word	0x0800d8d3
 800d7ec:	0800d7fd 	.word	0x0800d7fd
 800d7f0:	0800d7fd 	.word	0x0800d7fd
 800d7f4:	0800d873 	.word	0x0800d873
 800d7f8:	0800d887 	.word	0x0800d887
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d802:	f043 0301 	orr.w	r3, r3, #1
 800d806:	b2da      	uxtb	r2, r3
 800d808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d80a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d80e:	68ba      	ldr	r2, [r7, #8]
 800d810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d812:	699b      	ldr	r3, [r3, #24]
 800d814:	18d1      	adds	r1, r2, r3
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d81a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d81c:	f7ff ff5c 	bl	800d6d8 <prvInsertTimerInActiveList>
 800d820:	4603      	mov	r3, r0
 800d822:	2b00      	cmp	r3, #0
 800d824:	d06c      	beq.n	800d900 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d828:	6a1b      	ldr	r3, [r3, #32]
 800d82a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d82c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d82e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d830:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d834:	f003 0304 	and.w	r3, r3, #4
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d061      	beq.n	800d900 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d83c:	68ba      	ldr	r2, [r7, #8]
 800d83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d840:	699b      	ldr	r3, [r3, #24]
 800d842:	441a      	add	r2, r3
 800d844:	2300      	movs	r3, #0
 800d846:	9300      	str	r3, [sp, #0]
 800d848:	2300      	movs	r3, #0
 800d84a:	2100      	movs	r1, #0
 800d84c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d84e:	f7ff fe01 	bl	800d454 <xTimerGenericCommand>
 800d852:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d854:	6a3b      	ldr	r3, [r7, #32]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d152      	bne.n	800d900 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d85a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d85e:	f383 8811 	msr	BASEPRI, r3
 800d862:	f3bf 8f6f 	isb	sy
 800d866:	f3bf 8f4f 	dsb	sy
 800d86a:	61bb      	str	r3, [r7, #24]
}
 800d86c:	bf00      	nop
 800d86e:	bf00      	nop
 800d870:	e7fd      	b.n	800d86e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d874:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d878:	f023 0301 	bic.w	r3, r3, #1
 800d87c:	b2da      	uxtb	r2, r3
 800d87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d880:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d884:	e03d      	b.n	800d902 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d888:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d88c:	f043 0301 	orr.w	r3, r3, #1
 800d890:	b2da      	uxtb	r2, r3
 800d892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d894:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d898:	68ba      	ldr	r2, [r7, #8]
 800d89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d89c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8a0:	699b      	ldr	r3, [r3, #24]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d10b      	bne.n	800d8be <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8aa:	f383 8811 	msr	BASEPRI, r3
 800d8ae:	f3bf 8f6f 	isb	sy
 800d8b2:	f3bf 8f4f 	dsb	sy
 800d8b6:	617b      	str	r3, [r7, #20]
}
 800d8b8:	bf00      	nop
 800d8ba:	bf00      	nop
 800d8bc:	e7fd      	b.n	800d8ba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c0:	699a      	ldr	r2, [r3, #24]
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c4:	18d1      	adds	r1, r2, r3
 800d8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8cc:	f7ff ff04 	bl	800d6d8 <prvInsertTimerInActiveList>
					break;
 800d8d0:	e017      	b.n	800d902 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d8d8:	f003 0302 	and.w	r3, r3, #2
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d103      	bne.n	800d8e8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d8e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8e2:	f000 fbe9 	bl	800e0b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d8e6:	e00c      	b.n	800d902 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d8ee:	f023 0301 	bic.w	r3, r3, #1
 800d8f2:	b2da      	uxtb	r2, r3
 800d8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d8fa:	e002      	b.n	800d902 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d8fc:	bf00      	nop
 800d8fe:	e000      	b.n	800d902 <prvProcessReceivedCommands+0x1a6>
					break;
 800d900:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d902:	4b08      	ldr	r3, [pc, #32]	@ (800d924 <prvProcessReceivedCommands+0x1c8>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	1d39      	adds	r1, r7, #4
 800d908:	2200      	movs	r2, #0
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7fe f8b4 	bl	800ba78 <xQueueReceive>
 800d910:	4603      	mov	r3, r0
 800d912:	2b00      	cmp	r3, #0
 800d914:	f47f af26 	bne.w	800d764 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d918:	bf00      	nop
 800d91a:	bf00      	nop
 800d91c:	3730      	adds	r7, #48	@ 0x30
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	240013c4 	.word	0x240013c4

0800d928 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b088      	sub	sp, #32
 800d92c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d92e:	e049      	b.n	800d9c4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d930:	4b2e      	ldr	r3, [pc, #184]	@ (800d9ec <prvSwitchTimerLists+0xc4>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	68db      	ldr	r3, [r3, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d93a:	4b2c      	ldr	r3, [pc, #176]	@ (800d9ec <prvSwitchTimerLists+0xc4>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	68db      	ldr	r3, [r3, #12]
 800d942:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	3304      	adds	r3, #4
 800d948:	4618      	mov	r0, r3
 800d94a:	f7fd fbcf 	bl	800b0ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	6a1b      	ldr	r3, [r3, #32]
 800d952:	68f8      	ldr	r0, [r7, #12]
 800d954:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d95c:	f003 0304 	and.w	r3, r3, #4
 800d960:	2b00      	cmp	r3, #0
 800d962:	d02f      	beq.n	800d9c4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	699b      	ldr	r3, [r3, #24]
 800d968:	693a      	ldr	r2, [r7, #16]
 800d96a:	4413      	add	r3, r2
 800d96c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d96e:	68ba      	ldr	r2, [r7, #8]
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	429a      	cmp	r2, r3
 800d974:	d90e      	bls.n	800d994 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	68ba      	ldr	r2, [r7, #8]
 800d97a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	68fa      	ldr	r2, [r7, #12]
 800d980:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d982:	4b1a      	ldr	r3, [pc, #104]	@ (800d9ec <prvSwitchTimerLists+0xc4>)
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	3304      	adds	r3, #4
 800d98a:	4619      	mov	r1, r3
 800d98c:	4610      	mov	r0, r2
 800d98e:	f7fd fb74 	bl	800b07a <vListInsert>
 800d992:	e017      	b.n	800d9c4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d994:	2300      	movs	r3, #0
 800d996:	9300      	str	r3, [sp, #0]
 800d998:	2300      	movs	r3, #0
 800d99a:	693a      	ldr	r2, [r7, #16]
 800d99c:	2100      	movs	r1, #0
 800d99e:	68f8      	ldr	r0, [r7, #12]
 800d9a0:	f7ff fd58 	bl	800d454 <xTimerGenericCommand>
 800d9a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d10b      	bne.n	800d9c4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	603b      	str	r3, [r7, #0]
}
 800d9be:	bf00      	nop
 800d9c0:	bf00      	nop
 800d9c2:	e7fd      	b.n	800d9c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d9c4:	4b09      	ldr	r3, [pc, #36]	@ (800d9ec <prvSwitchTimerLists+0xc4>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d1b0      	bne.n	800d930 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d9ce:	4b07      	ldr	r3, [pc, #28]	@ (800d9ec <prvSwitchTimerLists+0xc4>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d9d4:	4b06      	ldr	r3, [pc, #24]	@ (800d9f0 <prvSwitchTimerLists+0xc8>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a04      	ldr	r2, [pc, #16]	@ (800d9ec <prvSwitchTimerLists+0xc4>)
 800d9da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d9dc:	4a04      	ldr	r2, [pc, #16]	@ (800d9f0 <prvSwitchTimerLists+0xc8>)
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	6013      	str	r3, [r2, #0]
}
 800d9e2:	bf00      	nop
 800d9e4:	3718      	adds	r7, #24
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	240013bc 	.word	0x240013bc
 800d9f0:	240013c0 	.word	0x240013c0

0800d9f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d9fa:	f000 f96d 	bl	800dcd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d9fe:	4b15      	ldr	r3, [pc, #84]	@ (800da54 <prvCheckForValidListAndQueue+0x60>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d120      	bne.n	800da48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800da06:	4814      	ldr	r0, [pc, #80]	@ (800da58 <prvCheckForValidListAndQueue+0x64>)
 800da08:	f7fd fae6 	bl	800afd8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800da0c:	4813      	ldr	r0, [pc, #76]	@ (800da5c <prvCheckForValidListAndQueue+0x68>)
 800da0e:	f7fd fae3 	bl	800afd8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800da12:	4b13      	ldr	r3, [pc, #76]	@ (800da60 <prvCheckForValidListAndQueue+0x6c>)
 800da14:	4a10      	ldr	r2, [pc, #64]	@ (800da58 <prvCheckForValidListAndQueue+0x64>)
 800da16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800da18:	4b12      	ldr	r3, [pc, #72]	@ (800da64 <prvCheckForValidListAndQueue+0x70>)
 800da1a:	4a10      	ldr	r2, [pc, #64]	@ (800da5c <prvCheckForValidListAndQueue+0x68>)
 800da1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800da1e:	2300      	movs	r3, #0
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	4b11      	ldr	r3, [pc, #68]	@ (800da68 <prvCheckForValidListAndQueue+0x74>)
 800da24:	4a11      	ldr	r2, [pc, #68]	@ (800da6c <prvCheckForValidListAndQueue+0x78>)
 800da26:	2110      	movs	r1, #16
 800da28:	200a      	movs	r0, #10
 800da2a:	f7fd fbf3 	bl	800b214 <xQueueGenericCreateStatic>
 800da2e:	4603      	mov	r3, r0
 800da30:	4a08      	ldr	r2, [pc, #32]	@ (800da54 <prvCheckForValidListAndQueue+0x60>)
 800da32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800da34:	4b07      	ldr	r3, [pc, #28]	@ (800da54 <prvCheckForValidListAndQueue+0x60>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d005      	beq.n	800da48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800da3c:	4b05      	ldr	r3, [pc, #20]	@ (800da54 <prvCheckForValidListAndQueue+0x60>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	490b      	ldr	r1, [pc, #44]	@ (800da70 <prvCheckForValidListAndQueue+0x7c>)
 800da42:	4618      	mov	r0, r3
 800da44:	f7fe fbd8 	bl	800c1f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800da48:	f000 f978 	bl	800dd3c <vPortExitCritical>
}
 800da4c:	bf00      	nop
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop
 800da54:	240013c4 	.word	0x240013c4
 800da58:	24001394 	.word	0x24001394
 800da5c:	240013a8 	.word	0x240013a8
 800da60:	240013bc 	.word	0x240013bc
 800da64:	240013c0 	.word	0x240013c0
 800da68:	24001470 	.word	0x24001470
 800da6c:	240013d0 	.word	0x240013d0
 800da70:	0801b9bc 	.word	0x0801b9bc

0800da74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	3b04      	subs	r3, #4
 800da84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800da8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	3b04      	subs	r3, #4
 800da92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	f023 0201 	bic.w	r2, r3, #1
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	3b04      	subs	r3, #4
 800daa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800daa4:	4a0c      	ldr	r2, [pc, #48]	@ (800dad8 <pxPortInitialiseStack+0x64>)
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	3b14      	subs	r3, #20
 800daae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dab0:	687a      	ldr	r2, [r7, #4]
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	3b04      	subs	r3, #4
 800daba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f06f 0202 	mvn.w	r2, #2
 800dac2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	3b20      	subs	r3, #32
 800dac8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800daca:	68fb      	ldr	r3, [r7, #12]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3714      	adds	r7, #20
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr
 800dad8:	0800dadd 	.word	0x0800dadd

0800dadc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dadc:	b480      	push	{r7}
 800dade:	b085      	sub	sp, #20
 800dae0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dae2:	2300      	movs	r3, #0
 800dae4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dae6:	4b13      	ldr	r3, [pc, #76]	@ (800db34 <prvTaskExitError+0x58>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daee:	d00b      	beq.n	800db08 <prvTaskExitError+0x2c>
	__asm volatile
 800daf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daf4:	f383 8811 	msr	BASEPRI, r3
 800daf8:	f3bf 8f6f 	isb	sy
 800dafc:	f3bf 8f4f 	dsb	sy
 800db00:	60fb      	str	r3, [r7, #12]
}
 800db02:	bf00      	nop
 800db04:	bf00      	nop
 800db06:	e7fd      	b.n	800db04 <prvTaskExitError+0x28>
	__asm volatile
 800db08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db0c:	f383 8811 	msr	BASEPRI, r3
 800db10:	f3bf 8f6f 	isb	sy
 800db14:	f3bf 8f4f 	dsb	sy
 800db18:	60bb      	str	r3, [r7, #8]
}
 800db1a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800db1c:	bf00      	nop
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d0fc      	beq.n	800db1e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800db24:	bf00      	nop
 800db26:	bf00      	nop
 800db28:	3714      	adds	r7, #20
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	24000028 	.word	0x24000028
	...

0800db40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800db40:	4b07      	ldr	r3, [pc, #28]	@ (800db60 <pxCurrentTCBConst2>)
 800db42:	6819      	ldr	r1, [r3, #0]
 800db44:	6808      	ldr	r0, [r1, #0]
 800db46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db4a:	f380 8809 	msr	PSP, r0
 800db4e:	f3bf 8f6f 	isb	sy
 800db52:	f04f 0000 	mov.w	r0, #0
 800db56:	f380 8811 	msr	BASEPRI, r0
 800db5a:	4770      	bx	lr
 800db5c:	f3af 8000 	nop.w

0800db60 <pxCurrentTCBConst2>:
 800db60:	24000e94 	.word	0x24000e94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800db64:	bf00      	nop
 800db66:	bf00      	nop

0800db68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800db68:	4808      	ldr	r0, [pc, #32]	@ (800db8c <prvPortStartFirstTask+0x24>)
 800db6a:	6800      	ldr	r0, [r0, #0]
 800db6c:	6800      	ldr	r0, [r0, #0]
 800db6e:	f380 8808 	msr	MSP, r0
 800db72:	f04f 0000 	mov.w	r0, #0
 800db76:	f380 8814 	msr	CONTROL, r0
 800db7a:	b662      	cpsie	i
 800db7c:	b661      	cpsie	f
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	f3bf 8f6f 	isb	sy
 800db86:	df00      	svc	0
 800db88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800db8a:	bf00      	nop
 800db8c:	e000ed08 	.word	0xe000ed08

0800db90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b086      	sub	sp, #24
 800db94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800db96:	4b47      	ldr	r3, [pc, #284]	@ (800dcb4 <xPortStartScheduler+0x124>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4a47      	ldr	r2, [pc, #284]	@ (800dcb8 <xPortStartScheduler+0x128>)
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d10b      	bne.n	800dbb8 <xPortStartScheduler+0x28>
	__asm volatile
 800dba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dba4:	f383 8811 	msr	BASEPRI, r3
 800dba8:	f3bf 8f6f 	isb	sy
 800dbac:	f3bf 8f4f 	dsb	sy
 800dbb0:	60fb      	str	r3, [r7, #12]
}
 800dbb2:	bf00      	nop
 800dbb4:	bf00      	nop
 800dbb6:	e7fd      	b.n	800dbb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dbb8:	4b3e      	ldr	r3, [pc, #248]	@ (800dcb4 <xPortStartScheduler+0x124>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	4a3f      	ldr	r2, [pc, #252]	@ (800dcbc <xPortStartScheduler+0x12c>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d10b      	bne.n	800dbda <xPortStartScheduler+0x4a>
	__asm volatile
 800dbc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc6:	f383 8811 	msr	BASEPRI, r3
 800dbca:	f3bf 8f6f 	isb	sy
 800dbce:	f3bf 8f4f 	dsb	sy
 800dbd2:	613b      	str	r3, [r7, #16]
}
 800dbd4:	bf00      	nop
 800dbd6:	bf00      	nop
 800dbd8:	e7fd      	b.n	800dbd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dbda:	4b39      	ldr	r3, [pc, #228]	@ (800dcc0 <xPortStartScheduler+0x130>)
 800dbdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	22ff      	movs	r2, #255	@ 0xff
 800dbea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dbf4:	78fb      	ldrb	r3, [r7, #3]
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800dbfc:	b2da      	uxtb	r2, r3
 800dbfe:	4b31      	ldr	r3, [pc, #196]	@ (800dcc4 <xPortStartScheduler+0x134>)
 800dc00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dc02:	4b31      	ldr	r3, [pc, #196]	@ (800dcc8 <xPortStartScheduler+0x138>)
 800dc04:	2207      	movs	r2, #7
 800dc06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc08:	e009      	b.n	800dc1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800dc0a:	4b2f      	ldr	r3, [pc, #188]	@ (800dcc8 <xPortStartScheduler+0x138>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	3b01      	subs	r3, #1
 800dc10:	4a2d      	ldr	r2, [pc, #180]	@ (800dcc8 <xPortStartScheduler+0x138>)
 800dc12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dc14:	78fb      	ldrb	r3, [r7, #3]
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	005b      	lsls	r3, r3, #1
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc1e:	78fb      	ldrb	r3, [r7, #3]
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc26:	2b80      	cmp	r3, #128	@ 0x80
 800dc28:	d0ef      	beq.n	800dc0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dc2a:	4b27      	ldr	r3, [pc, #156]	@ (800dcc8 <xPortStartScheduler+0x138>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	f1c3 0307 	rsb	r3, r3, #7
 800dc32:	2b04      	cmp	r3, #4
 800dc34:	d00b      	beq.n	800dc4e <xPortStartScheduler+0xbe>
	__asm volatile
 800dc36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc3a:	f383 8811 	msr	BASEPRI, r3
 800dc3e:	f3bf 8f6f 	isb	sy
 800dc42:	f3bf 8f4f 	dsb	sy
 800dc46:	60bb      	str	r3, [r7, #8]
}
 800dc48:	bf00      	nop
 800dc4a:	bf00      	nop
 800dc4c:	e7fd      	b.n	800dc4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dc4e:	4b1e      	ldr	r3, [pc, #120]	@ (800dcc8 <xPortStartScheduler+0x138>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	021b      	lsls	r3, r3, #8
 800dc54:	4a1c      	ldr	r2, [pc, #112]	@ (800dcc8 <xPortStartScheduler+0x138>)
 800dc56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dc58:	4b1b      	ldr	r3, [pc, #108]	@ (800dcc8 <xPortStartScheduler+0x138>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dc60:	4a19      	ldr	r2, [pc, #100]	@ (800dcc8 <xPortStartScheduler+0x138>)
 800dc62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	b2da      	uxtb	r2, r3
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dc6c:	4b17      	ldr	r3, [pc, #92]	@ (800dccc <xPortStartScheduler+0x13c>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a16      	ldr	r2, [pc, #88]	@ (800dccc <xPortStartScheduler+0x13c>)
 800dc72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800dc76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dc78:	4b14      	ldr	r3, [pc, #80]	@ (800dccc <xPortStartScheduler+0x13c>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4a13      	ldr	r2, [pc, #76]	@ (800dccc <xPortStartScheduler+0x13c>)
 800dc7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800dc82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dc84:	f000 f8da 	bl	800de3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dc88:	4b11      	ldr	r3, [pc, #68]	@ (800dcd0 <xPortStartScheduler+0x140>)
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dc8e:	f000 f8f9 	bl	800de84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dc92:	4b10      	ldr	r3, [pc, #64]	@ (800dcd4 <xPortStartScheduler+0x144>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	4a0f      	ldr	r2, [pc, #60]	@ (800dcd4 <xPortStartScheduler+0x144>)
 800dc98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800dc9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dc9e:	f7ff ff63 	bl	800db68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dca2:	f7fe ff1d 	bl	800cae0 <vTaskSwitchContext>
	prvTaskExitError();
 800dca6:	f7ff ff19 	bl	800dadc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dcaa:	2300      	movs	r3, #0
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3718      	adds	r7, #24
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	e000ed00 	.word	0xe000ed00
 800dcb8:	410fc271 	.word	0x410fc271
 800dcbc:	410fc270 	.word	0x410fc270
 800dcc0:	e000e400 	.word	0xe000e400
 800dcc4:	240014c0 	.word	0x240014c0
 800dcc8:	240014c4 	.word	0x240014c4
 800dccc:	e000ed20 	.word	0xe000ed20
 800dcd0:	24000028 	.word	0x24000028
 800dcd4:	e000ef34 	.word	0xe000ef34

0800dcd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
	__asm volatile
 800dcde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce2:	f383 8811 	msr	BASEPRI, r3
 800dce6:	f3bf 8f6f 	isb	sy
 800dcea:	f3bf 8f4f 	dsb	sy
 800dcee:	607b      	str	r3, [r7, #4]
}
 800dcf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dcf2:	4b10      	ldr	r3, [pc, #64]	@ (800dd34 <vPortEnterCritical+0x5c>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	4a0e      	ldr	r2, [pc, #56]	@ (800dd34 <vPortEnterCritical+0x5c>)
 800dcfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dcfc:	4b0d      	ldr	r3, [pc, #52]	@ (800dd34 <vPortEnterCritical+0x5c>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	d110      	bne.n	800dd26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dd04:	4b0c      	ldr	r3, [pc, #48]	@ (800dd38 <vPortEnterCritical+0x60>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	b2db      	uxtb	r3, r3
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d00b      	beq.n	800dd26 <vPortEnterCritical+0x4e>
	__asm volatile
 800dd0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd12:	f383 8811 	msr	BASEPRI, r3
 800dd16:	f3bf 8f6f 	isb	sy
 800dd1a:	f3bf 8f4f 	dsb	sy
 800dd1e:	603b      	str	r3, [r7, #0]
}
 800dd20:	bf00      	nop
 800dd22:	bf00      	nop
 800dd24:	e7fd      	b.n	800dd22 <vPortEnterCritical+0x4a>
	}
}
 800dd26:	bf00      	nop
 800dd28:	370c      	adds	r7, #12
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr
 800dd32:	bf00      	nop
 800dd34:	24000028 	.word	0x24000028
 800dd38:	e000ed04 	.word	0xe000ed04

0800dd3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b083      	sub	sp, #12
 800dd40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dd42:	4b12      	ldr	r3, [pc, #72]	@ (800dd8c <vPortExitCritical+0x50>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d10b      	bne.n	800dd62 <vPortExitCritical+0x26>
	__asm volatile
 800dd4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd4e:	f383 8811 	msr	BASEPRI, r3
 800dd52:	f3bf 8f6f 	isb	sy
 800dd56:	f3bf 8f4f 	dsb	sy
 800dd5a:	607b      	str	r3, [r7, #4]
}
 800dd5c:	bf00      	nop
 800dd5e:	bf00      	nop
 800dd60:	e7fd      	b.n	800dd5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dd62:	4b0a      	ldr	r3, [pc, #40]	@ (800dd8c <vPortExitCritical+0x50>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	3b01      	subs	r3, #1
 800dd68:	4a08      	ldr	r2, [pc, #32]	@ (800dd8c <vPortExitCritical+0x50>)
 800dd6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dd6c:	4b07      	ldr	r3, [pc, #28]	@ (800dd8c <vPortExitCritical+0x50>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d105      	bne.n	800dd80 <vPortExitCritical+0x44>
 800dd74:	2300      	movs	r3, #0
 800dd76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	f383 8811 	msr	BASEPRI, r3
}
 800dd7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dd80:	bf00      	nop
 800dd82:	370c      	adds	r7, #12
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr
 800dd8c:	24000028 	.word	0x24000028

0800dd90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dd90:	f3ef 8009 	mrs	r0, PSP
 800dd94:	f3bf 8f6f 	isb	sy
 800dd98:	4b15      	ldr	r3, [pc, #84]	@ (800ddf0 <pxCurrentTCBConst>)
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	f01e 0f10 	tst.w	lr, #16
 800dda0:	bf08      	it	eq
 800dda2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dda6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddaa:	6010      	str	r0, [r2, #0]
 800ddac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ddb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ddb4:	f380 8811 	msr	BASEPRI, r0
 800ddb8:	f3bf 8f4f 	dsb	sy
 800ddbc:	f3bf 8f6f 	isb	sy
 800ddc0:	f7fe fe8e 	bl	800cae0 <vTaskSwitchContext>
 800ddc4:	f04f 0000 	mov.w	r0, #0
 800ddc8:	f380 8811 	msr	BASEPRI, r0
 800ddcc:	bc09      	pop	{r0, r3}
 800ddce:	6819      	ldr	r1, [r3, #0]
 800ddd0:	6808      	ldr	r0, [r1, #0]
 800ddd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd6:	f01e 0f10 	tst.w	lr, #16
 800ddda:	bf08      	it	eq
 800dddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dde0:	f380 8809 	msr	PSP, r0
 800dde4:	f3bf 8f6f 	isb	sy
 800dde8:	4770      	bx	lr
 800ddea:	bf00      	nop
 800ddec:	f3af 8000 	nop.w

0800ddf0 <pxCurrentTCBConst>:
 800ddf0:	24000e94 	.word	0x24000e94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ddf4:	bf00      	nop
 800ddf6:	bf00      	nop

0800ddf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
	__asm volatile
 800ddfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de02:	f383 8811 	msr	BASEPRI, r3
 800de06:	f3bf 8f6f 	isb	sy
 800de0a:	f3bf 8f4f 	dsb	sy
 800de0e:	607b      	str	r3, [r7, #4]
}
 800de10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800de12:	f7fe fdab 	bl	800c96c <xTaskIncrementTick>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d003      	beq.n	800de24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800de1c:	4b06      	ldr	r3, [pc, #24]	@ (800de38 <xPortSysTickHandler+0x40>)
 800de1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de22:	601a      	str	r2, [r3, #0]
 800de24:	2300      	movs	r3, #0
 800de26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	f383 8811 	msr	BASEPRI, r3
}
 800de2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800de30:	bf00      	nop
 800de32:	3708      	adds	r7, #8
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	e000ed04 	.word	0xe000ed04

0800de3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800de3c:	b480      	push	{r7}
 800de3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800de40:	4b0b      	ldr	r3, [pc, #44]	@ (800de70 <vPortSetupTimerInterrupt+0x34>)
 800de42:	2200      	movs	r2, #0
 800de44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800de46:	4b0b      	ldr	r3, [pc, #44]	@ (800de74 <vPortSetupTimerInterrupt+0x38>)
 800de48:	2200      	movs	r2, #0
 800de4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800de4c:	4b0a      	ldr	r3, [pc, #40]	@ (800de78 <vPortSetupTimerInterrupt+0x3c>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4a0a      	ldr	r2, [pc, #40]	@ (800de7c <vPortSetupTimerInterrupt+0x40>)
 800de52:	fba2 2303 	umull	r2, r3, r2, r3
 800de56:	099b      	lsrs	r3, r3, #6
 800de58:	4a09      	ldr	r2, [pc, #36]	@ (800de80 <vPortSetupTimerInterrupt+0x44>)
 800de5a:	3b01      	subs	r3, #1
 800de5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800de5e:	4b04      	ldr	r3, [pc, #16]	@ (800de70 <vPortSetupTimerInterrupt+0x34>)
 800de60:	2207      	movs	r2, #7
 800de62:	601a      	str	r2, [r3, #0]
}
 800de64:	bf00      	nop
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr
 800de6e:	bf00      	nop
 800de70:	e000e010 	.word	0xe000e010
 800de74:	e000e018 	.word	0xe000e018
 800de78:	24000004 	.word	0x24000004
 800de7c:	10624dd3 	.word	0x10624dd3
 800de80:	e000e014 	.word	0xe000e014

0800de84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800de84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800de94 <vPortEnableVFP+0x10>
 800de88:	6801      	ldr	r1, [r0, #0]
 800de8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800de8e:	6001      	str	r1, [r0, #0]
 800de90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800de92:	bf00      	nop
 800de94:	e000ed88 	.word	0xe000ed88

0800de98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800de98:	b480      	push	{r7}
 800de9a:	b085      	sub	sp, #20
 800de9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800de9e:	f3ef 8305 	mrs	r3, IPSR
 800dea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2b0f      	cmp	r3, #15
 800dea8:	d915      	bls.n	800ded6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800deaa:	4a18      	ldr	r2, [pc, #96]	@ (800df0c <vPortValidateInterruptPriority+0x74>)
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	4413      	add	r3, r2
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800deb4:	4b16      	ldr	r3, [pc, #88]	@ (800df10 <vPortValidateInterruptPriority+0x78>)
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	7afa      	ldrb	r2, [r7, #11]
 800deba:	429a      	cmp	r2, r3
 800debc:	d20b      	bcs.n	800ded6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800debe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dec2:	f383 8811 	msr	BASEPRI, r3
 800dec6:	f3bf 8f6f 	isb	sy
 800deca:	f3bf 8f4f 	dsb	sy
 800dece:	607b      	str	r3, [r7, #4]
}
 800ded0:	bf00      	nop
 800ded2:	bf00      	nop
 800ded4:	e7fd      	b.n	800ded2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ded6:	4b0f      	ldr	r3, [pc, #60]	@ (800df14 <vPortValidateInterruptPriority+0x7c>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800dede:	4b0e      	ldr	r3, [pc, #56]	@ (800df18 <vPortValidateInterruptPriority+0x80>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d90b      	bls.n	800defe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800dee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deea:	f383 8811 	msr	BASEPRI, r3
 800deee:	f3bf 8f6f 	isb	sy
 800def2:	f3bf 8f4f 	dsb	sy
 800def6:	603b      	str	r3, [r7, #0]
}
 800def8:	bf00      	nop
 800defa:	bf00      	nop
 800defc:	e7fd      	b.n	800defa <vPortValidateInterruptPriority+0x62>
	}
 800defe:	bf00      	nop
 800df00:	3714      	adds	r7, #20
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr
 800df0a:	bf00      	nop
 800df0c:	e000e3f0 	.word	0xe000e3f0
 800df10:	240014c0 	.word	0x240014c0
 800df14:	e000ed0c 	.word	0xe000ed0c
 800df18:	240014c4 	.word	0x240014c4

0800df1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b08a      	sub	sp, #40	@ 0x28
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800df24:	2300      	movs	r3, #0
 800df26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800df28:	f7fe fc52 	bl	800c7d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800df2c:	4b5c      	ldr	r3, [pc, #368]	@ (800e0a0 <pvPortMalloc+0x184>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d101      	bne.n	800df38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800df34:	f000 f924 	bl	800e180 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800df38:	4b5a      	ldr	r3, [pc, #360]	@ (800e0a4 <pvPortMalloc+0x188>)
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	4013      	ands	r3, r2
 800df40:	2b00      	cmp	r3, #0
 800df42:	f040 8095 	bne.w	800e070 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d01e      	beq.n	800df8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800df4c:	2208      	movs	r2, #8
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	4413      	add	r3, r2
 800df52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f003 0307 	and.w	r3, r3, #7
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d015      	beq.n	800df8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f023 0307 	bic.w	r3, r3, #7
 800df64:	3308      	adds	r3, #8
 800df66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f003 0307 	and.w	r3, r3, #7
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d00b      	beq.n	800df8a <pvPortMalloc+0x6e>
	__asm volatile
 800df72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df76:	f383 8811 	msr	BASEPRI, r3
 800df7a:	f3bf 8f6f 	isb	sy
 800df7e:	f3bf 8f4f 	dsb	sy
 800df82:	617b      	str	r3, [r7, #20]
}
 800df84:	bf00      	nop
 800df86:	bf00      	nop
 800df88:	e7fd      	b.n	800df86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d06f      	beq.n	800e070 <pvPortMalloc+0x154>
 800df90:	4b45      	ldr	r3, [pc, #276]	@ (800e0a8 <pvPortMalloc+0x18c>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	429a      	cmp	r2, r3
 800df98:	d86a      	bhi.n	800e070 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800df9a:	4b44      	ldr	r3, [pc, #272]	@ (800e0ac <pvPortMalloc+0x190>)
 800df9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800df9e:	4b43      	ldr	r3, [pc, #268]	@ (800e0ac <pvPortMalloc+0x190>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfa4:	e004      	b.n	800dfb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800dfa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dfaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	687a      	ldr	r2, [r7, #4]
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d903      	bls.n	800dfc2 <pvPortMalloc+0xa6>
 800dfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d1f1      	bne.n	800dfa6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dfc2:	4b37      	ldr	r3, [pc, #220]	@ (800e0a0 <pvPortMalloc+0x184>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d051      	beq.n	800e070 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dfcc:	6a3b      	ldr	r3, [r7, #32]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	2208      	movs	r2, #8
 800dfd2:	4413      	add	r3, r2
 800dfd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	6a3b      	ldr	r3, [r7, #32]
 800dfdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dfde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfe0:	685a      	ldr	r2, [r3, #4]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	1ad2      	subs	r2, r2, r3
 800dfe6:	2308      	movs	r3, #8
 800dfe8:	005b      	lsls	r3, r3, #1
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d920      	bls.n	800e030 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dfee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	4413      	add	r3, r2
 800dff4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dff6:	69bb      	ldr	r3, [r7, #24]
 800dff8:	f003 0307 	and.w	r3, r3, #7
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00b      	beq.n	800e018 <pvPortMalloc+0xfc>
	__asm volatile
 800e000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e004:	f383 8811 	msr	BASEPRI, r3
 800e008:	f3bf 8f6f 	isb	sy
 800e00c:	f3bf 8f4f 	dsb	sy
 800e010:	613b      	str	r3, [r7, #16]
}
 800e012:	bf00      	nop
 800e014:	bf00      	nop
 800e016:	e7fd      	b.n	800e014 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e01a:	685a      	ldr	r2, [r3, #4]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	1ad2      	subs	r2, r2, r3
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e02a:	69b8      	ldr	r0, [r7, #24]
 800e02c:	f000 f90a 	bl	800e244 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e030:	4b1d      	ldr	r3, [pc, #116]	@ (800e0a8 <pvPortMalloc+0x18c>)
 800e032:	681a      	ldr	r2, [r3, #0]
 800e034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e036:	685b      	ldr	r3, [r3, #4]
 800e038:	1ad3      	subs	r3, r2, r3
 800e03a:	4a1b      	ldr	r2, [pc, #108]	@ (800e0a8 <pvPortMalloc+0x18c>)
 800e03c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e03e:	4b1a      	ldr	r3, [pc, #104]	@ (800e0a8 <pvPortMalloc+0x18c>)
 800e040:	681a      	ldr	r2, [r3, #0]
 800e042:	4b1b      	ldr	r3, [pc, #108]	@ (800e0b0 <pvPortMalloc+0x194>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	429a      	cmp	r2, r3
 800e048:	d203      	bcs.n	800e052 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e04a:	4b17      	ldr	r3, [pc, #92]	@ (800e0a8 <pvPortMalloc+0x18c>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4a18      	ldr	r2, [pc, #96]	@ (800e0b0 <pvPortMalloc+0x194>)
 800e050:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e054:	685a      	ldr	r2, [r3, #4]
 800e056:	4b13      	ldr	r3, [pc, #76]	@ (800e0a4 <pvPortMalloc+0x188>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	431a      	orrs	r2, r3
 800e05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e05e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e062:	2200      	movs	r2, #0
 800e064:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e066:	4b13      	ldr	r3, [pc, #76]	@ (800e0b4 <pvPortMalloc+0x198>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	3301      	adds	r3, #1
 800e06c:	4a11      	ldr	r2, [pc, #68]	@ (800e0b4 <pvPortMalloc+0x198>)
 800e06e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e070:	f7fe fbbc 	bl	800c7ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	f003 0307 	and.w	r3, r3, #7
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d00b      	beq.n	800e096 <pvPortMalloc+0x17a>
	__asm volatile
 800e07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e082:	f383 8811 	msr	BASEPRI, r3
 800e086:	f3bf 8f6f 	isb	sy
 800e08a:	f3bf 8f4f 	dsb	sy
 800e08e:	60fb      	str	r3, [r7, #12]
}
 800e090:	bf00      	nop
 800e092:	bf00      	nop
 800e094:	e7fd      	b.n	800e092 <pvPortMalloc+0x176>
	return pvReturn;
 800e096:	69fb      	ldr	r3, [r7, #28]
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3728      	adds	r7, #40	@ 0x28
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	240050d0 	.word	0x240050d0
 800e0a4:	240050e4 	.word	0x240050e4
 800e0a8:	240050d4 	.word	0x240050d4
 800e0ac:	240050c8 	.word	0x240050c8
 800e0b0:	240050d8 	.word	0x240050d8
 800e0b4:	240050dc 	.word	0x240050dc

0800e0b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b086      	sub	sp, #24
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d04f      	beq.n	800e16a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e0ca:	2308      	movs	r3, #8
 800e0cc:	425b      	negs	r3, r3
 800e0ce:	697a      	ldr	r2, [r7, #20]
 800e0d0:	4413      	add	r3, r2
 800e0d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	685a      	ldr	r2, [r3, #4]
 800e0dc:	4b25      	ldr	r3, [pc, #148]	@ (800e174 <vPortFree+0xbc>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4013      	ands	r3, r2
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d10b      	bne.n	800e0fe <vPortFree+0x46>
	__asm volatile
 800e0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ea:	f383 8811 	msr	BASEPRI, r3
 800e0ee:	f3bf 8f6f 	isb	sy
 800e0f2:	f3bf 8f4f 	dsb	sy
 800e0f6:	60fb      	str	r3, [r7, #12]
}
 800e0f8:	bf00      	nop
 800e0fa:	bf00      	nop
 800e0fc:	e7fd      	b.n	800e0fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00b      	beq.n	800e11e <vPortFree+0x66>
	__asm volatile
 800e106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e10a:	f383 8811 	msr	BASEPRI, r3
 800e10e:	f3bf 8f6f 	isb	sy
 800e112:	f3bf 8f4f 	dsb	sy
 800e116:	60bb      	str	r3, [r7, #8]
}
 800e118:	bf00      	nop
 800e11a:	bf00      	nop
 800e11c:	e7fd      	b.n	800e11a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	685a      	ldr	r2, [r3, #4]
 800e122:	4b14      	ldr	r3, [pc, #80]	@ (800e174 <vPortFree+0xbc>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	4013      	ands	r3, r2
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d01e      	beq.n	800e16a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d11a      	bne.n	800e16a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	685a      	ldr	r2, [r3, #4]
 800e138:	4b0e      	ldr	r3, [pc, #56]	@ (800e174 <vPortFree+0xbc>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	43db      	mvns	r3, r3
 800e13e:	401a      	ands	r2, r3
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e144:	f7fe fb44 	bl	800c7d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	685a      	ldr	r2, [r3, #4]
 800e14c:	4b0a      	ldr	r3, [pc, #40]	@ (800e178 <vPortFree+0xc0>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4413      	add	r3, r2
 800e152:	4a09      	ldr	r2, [pc, #36]	@ (800e178 <vPortFree+0xc0>)
 800e154:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e156:	6938      	ldr	r0, [r7, #16]
 800e158:	f000 f874 	bl	800e244 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e15c:	4b07      	ldr	r3, [pc, #28]	@ (800e17c <vPortFree+0xc4>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	3301      	adds	r3, #1
 800e162:	4a06      	ldr	r2, [pc, #24]	@ (800e17c <vPortFree+0xc4>)
 800e164:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e166:	f7fe fb41 	bl	800c7ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e16a:	bf00      	nop
 800e16c:	3718      	adds	r7, #24
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
 800e172:	bf00      	nop
 800e174:	240050e4 	.word	0x240050e4
 800e178:	240050d4 	.word	0x240050d4
 800e17c:	240050e0 	.word	0x240050e0

0800e180 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e180:	b480      	push	{r7}
 800e182:	b085      	sub	sp, #20
 800e184:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e186:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e18a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e18c:	4b27      	ldr	r3, [pc, #156]	@ (800e22c <prvHeapInit+0xac>)
 800e18e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f003 0307 	and.w	r3, r3, #7
 800e196:	2b00      	cmp	r3, #0
 800e198:	d00c      	beq.n	800e1b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	3307      	adds	r3, #7
 800e19e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f023 0307 	bic.w	r3, r3, #7
 800e1a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e1a8:	68ba      	ldr	r2, [r7, #8]
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	1ad3      	subs	r3, r2, r3
 800e1ae:	4a1f      	ldr	r2, [pc, #124]	@ (800e22c <prvHeapInit+0xac>)
 800e1b0:	4413      	add	r3, r2
 800e1b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e1b8:	4a1d      	ldr	r2, [pc, #116]	@ (800e230 <prvHeapInit+0xb0>)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e1be:	4b1c      	ldr	r3, [pc, #112]	@ (800e230 <prvHeapInit+0xb0>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	68ba      	ldr	r2, [r7, #8]
 800e1c8:	4413      	add	r3, r2
 800e1ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e1cc:	2208      	movs	r2, #8
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	1a9b      	subs	r3, r3, r2
 800e1d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f023 0307 	bic.w	r3, r3, #7
 800e1da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	4a15      	ldr	r2, [pc, #84]	@ (800e234 <prvHeapInit+0xb4>)
 800e1e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e1e2:	4b14      	ldr	r3, [pc, #80]	@ (800e234 <prvHeapInit+0xb4>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e1ea:	4b12      	ldr	r3, [pc, #72]	@ (800e234 <prvHeapInit+0xb4>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	68fa      	ldr	r2, [r7, #12]
 800e1fa:	1ad2      	subs	r2, r2, r3
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e200:	4b0c      	ldr	r3, [pc, #48]	@ (800e234 <prvHeapInit+0xb4>)
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	4a0a      	ldr	r2, [pc, #40]	@ (800e238 <prvHeapInit+0xb8>)
 800e20e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	4a09      	ldr	r2, [pc, #36]	@ (800e23c <prvHeapInit+0xbc>)
 800e216:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e218:	4b09      	ldr	r3, [pc, #36]	@ (800e240 <prvHeapInit+0xc0>)
 800e21a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e21e:	601a      	str	r2, [r3, #0]
}
 800e220:	bf00      	nop
 800e222:	3714      	adds	r7, #20
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr
 800e22c:	240014c8 	.word	0x240014c8
 800e230:	240050c8 	.word	0x240050c8
 800e234:	240050d0 	.word	0x240050d0
 800e238:	240050d8 	.word	0x240050d8
 800e23c:	240050d4 	.word	0x240050d4
 800e240:	240050e4 	.word	0x240050e4

0800e244 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e244:	b480      	push	{r7}
 800e246:	b085      	sub	sp, #20
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e24c:	4b28      	ldr	r3, [pc, #160]	@ (800e2f0 <prvInsertBlockIntoFreeList+0xac>)
 800e24e:	60fb      	str	r3, [r7, #12]
 800e250:	e002      	b.n	800e258 <prvInsertBlockIntoFreeList+0x14>
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	60fb      	str	r3, [r7, #12]
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	687a      	ldr	r2, [r7, #4]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d8f7      	bhi.n	800e252 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	685b      	ldr	r3, [r3, #4]
 800e26a:	68ba      	ldr	r2, [r7, #8]
 800e26c:	4413      	add	r3, r2
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	429a      	cmp	r2, r3
 800e272:	d108      	bne.n	800e286 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	685a      	ldr	r2, [r3, #4]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	441a      	add	r2, r3
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	68ba      	ldr	r2, [r7, #8]
 800e290:	441a      	add	r2, r3
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	429a      	cmp	r2, r3
 800e298:	d118      	bne.n	800e2cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	4b15      	ldr	r3, [pc, #84]	@ (800e2f4 <prvInsertBlockIntoFreeList+0xb0>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d00d      	beq.n	800e2c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	685a      	ldr	r2, [r3, #4]
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	441a      	add	r2, r3
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	601a      	str	r2, [r3, #0]
 800e2c0:	e008      	b.n	800e2d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e2c2:	4b0c      	ldr	r3, [pc, #48]	@ (800e2f4 <prvInsertBlockIntoFreeList+0xb0>)
 800e2c4:	681a      	ldr	r2, [r3, #0]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	601a      	str	r2, [r3, #0]
 800e2ca:	e003      	b.n	800e2d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681a      	ldr	r2, [r3, #0]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e2d4:	68fa      	ldr	r2, [r7, #12]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d002      	beq.n	800e2e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	687a      	ldr	r2, [r7, #4]
 800e2e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2e2:	bf00      	nop
 800e2e4:	3714      	adds	r7, #20
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr
 800e2ee:	bf00      	nop
 800e2f0:	240050c8 	.word	0x240050c8
 800e2f4:	240050d0 	.word	0x240050d0

0800e2f8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800e302:	f007 fe5f 	bl	8015fc4 <sys_timeouts_sleeptime>
 800e306:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e30e:	d10b      	bne.n	800e328 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800e310:	4813      	ldr	r0, [pc, #76]	@ (800e360 <tcpip_timeouts_mbox_fetch+0x68>)
 800e312:	f00a feae 	bl	8019072 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800e316:	2200      	movs	r2, #0
 800e318:	6839      	ldr	r1, [r7, #0]
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f00a fe36 	bl	8018f8c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e320:	480f      	ldr	r0, [pc, #60]	@ (800e360 <tcpip_timeouts_mbox_fetch+0x68>)
 800e322:	f00a fe97 	bl	8019054 <sys_mutex_lock>
    return;
 800e326:	e018      	b.n	800e35a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d102      	bne.n	800e334 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800e32e:	f007 fe0f 	bl	8015f50 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e332:	e7e6      	b.n	800e302 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800e334:	480a      	ldr	r0, [pc, #40]	@ (800e360 <tcpip_timeouts_mbox_fetch+0x68>)
 800e336:	f00a fe9c 	bl	8019072 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800e33a:	68fa      	ldr	r2, [r7, #12]
 800e33c:	6839      	ldr	r1, [r7, #0]
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f00a fe24 	bl	8018f8c <sys_arch_mbox_fetch>
 800e344:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800e346:	4806      	ldr	r0, [pc, #24]	@ (800e360 <tcpip_timeouts_mbox_fetch+0x68>)
 800e348:	f00a fe84 	bl	8019054 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e352:	d102      	bne.n	800e35a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800e354:	f007 fdfc 	bl	8015f50 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e358:	e7d3      	b.n	800e302 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800e35a:	3710      	adds	r7, #16
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	240050f4 	.word	0x240050f4

0800e364 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800e36c:	4810      	ldr	r0, [pc, #64]	@ (800e3b0 <tcpip_thread+0x4c>)
 800e36e:	f00a fe71 	bl	8019054 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800e372:	4b10      	ldr	r3, [pc, #64]	@ (800e3b4 <tcpip_thread+0x50>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d005      	beq.n	800e386 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800e37a:	4b0e      	ldr	r3, [pc, #56]	@ (800e3b4 <tcpip_thread+0x50>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4a0e      	ldr	r2, [pc, #56]	@ (800e3b8 <tcpip_thread+0x54>)
 800e380:	6812      	ldr	r2, [r2, #0]
 800e382:	4610      	mov	r0, r2
 800e384:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e386:	f107 030c 	add.w	r3, r7, #12
 800e38a:	4619      	mov	r1, r3
 800e38c:	480b      	ldr	r0, [pc, #44]	@ (800e3bc <tcpip_thread+0x58>)
 800e38e:	f7ff ffb3 	bl	800e2f8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d106      	bne.n	800e3a6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e398:	4b09      	ldr	r3, [pc, #36]	@ (800e3c0 <tcpip_thread+0x5c>)
 800e39a:	2291      	movs	r2, #145	@ 0x91
 800e39c:	4909      	ldr	r1, [pc, #36]	@ (800e3c4 <tcpip_thread+0x60>)
 800e39e:	480a      	ldr	r0, [pc, #40]	@ (800e3c8 <tcpip_thread+0x64>)
 800e3a0:	f00b f91c 	bl	80195dc <iprintf>
      continue;
 800e3a4:	e003      	b.n	800e3ae <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f000 f80f 	bl	800e3cc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e3ae:	e7ea      	b.n	800e386 <tcpip_thread+0x22>
 800e3b0:	240050f4 	.word	0x240050f4
 800e3b4:	240050e8 	.word	0x240050e8
 800e3b8:	240050ec 	.word	0x240050ec
 800e3bc:	240050f0 	.word	0x240050f0
 800e3c0:	0801b9c4 	.word	0x0801b9c4
 800e3c4:	0801b9f4 	.word	0x0801b9f4
 800e3c8:	0801ba14 	.word	0x0801ba14

0800e3cc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	2b02      	cmp	r3, #2
 800e3da:	d026      	beq.n	800e42a <tcpip_thread_handle_msg+0x5e>
 800e3dc:	2b02      	cmp	r3, #2
 800e3de:	dc2b      	bgt.n	800e438 <tcpip_thread_handle_msg+0x6c>
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d002      	beq.n	800e3ea <tcpip_thread_handle_msg+0x1e>
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d015      	beq.n	800e414 <tcpip_thread_handle_msg+0x48>
 800e3e8:	e026      	b.n	800e438 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	68db      	ldr	r3, [r3, #12]
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	6850      	ldr	r0, [r2, #4]
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	6892      	ldr	r2, [r2, #8]
 800e3f6:	4611      	mov	r1, r2
 800e3f8:	4798      	blx	r3
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d004      	beq.n	800e40a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	4618      	mov	r0, r3
 800e406:	f001 fffb 	bl	8010400 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e40a:	6879      	ldr	r1, [r7, #4]
 800e40c:	2009      	movs	r0, #9
 800e40e:	f001 f953 	bl	800f6b8 <memp_free>
      break;
 800e412:	e018      	b.n	800e446 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	685b      	ldr	r3, [r3, #4]
 800e418:	687a      	ldr	r2, [r7, #4]
 800e41a:	6892      	ldr	r2, [r2, #8]
 800e41c:	4610      	mov	r0, r2
 800e41e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e420:	6879      	ldr	r1, [r7, #4]
 800e422:	2008      	movs	r0, #8
 800e424:	f001 f948 	bl	800f6b8 <memp_free>
      break;
 800e428:	e00d      	b.n	800e446 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	685b      	ldr	r3, [r3, #4]
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	6892      	ldr	r2, [r2, #8]
 800e432:	4610      	mov	r0, r2
 800e434:	4798      	blx	r3
      break;
 800e436:	e006      	b.n	800e446 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e438:	4b05      	ldr	r3, [pc, #20]	@ (800e450 <tcpip_thread_handle_msg+0x84>)
 800e43a:	22cf      	movs	r2, #207	@ 0xcf
 800e43c:	4905      	ldr	r1, [pc, #20]	@ (800e454 <tcpip_thread_handle_msg+0x88>)
 800e43e:	4806      	ldr	r0, [pc, #24]	@ (800e458 <tcpip_thread_handle_msg+0x8c>)
 800e440:	f00b f8cc 	bl	80195dc <iprintf>
      break;
 800e444:	bf00      	nop
  }
}
 800e446:	bf00      	nop
 800e448:	3708      	adds	r7, #8
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	0801b9c4 	.word	0x0801b9c4
 800e454:	0801b9f4 	.word	0x0801b9f4
 800e458:	0801ba14 	.word	0x0801ba14

0800e45c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b086      	sub	sp, #24
 800e460:	af00      	add	r7, sp, #0
 800e462:	60f8      	str	r0, [r7, #12]
 800e464:	60b9      	str	r1, [r7, #8]
 800e466:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e468:	481a      	ldr	r0, [pc, #104]	@ (800e4d4 <tcpip_inpkt+0x78>)
 800e46a:	f00a fdc0 	bl	8018fee <sys_mbox_valid>
 800e46e:	4603      	mov	r3, r0
 800e470:	2b00      	cmp	r3, #0
 800e472:	d105      	bne.n	800e480 <tcpip_inpkt+0x24>
 800e474:	4b18      	ldr	r3, [pc, #96]	@ (800e4d8 <tcpip_inpkt+0x7c>)
 800e476:	22fc      	movs	r2, #252	@ 0xfc
 800e478:	4918      	ldr	r1, [pc, #96]	@ (800e4dc <tcpip_inpkt+0x80>)
 800e47a:	4819      	ldr	r0, [pc, #100]	@ (800e4e0 <tcpip_inpkt+0x84>)
 800e47c:	f00b f8ae 	bl	80195dc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e480:	2009      	movs	r0, #9
 800e482:	f001 f8a3 	bl	800f5cc <memp_malloc>
 800e486:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d102      	bne.n	800e494 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e48e:	f04f 33ff 	mov.w	r3, #4294967295
 800e492:	e01a      	b.n	800e4ca <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	2200      	movs	r2, #0
 800e498:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	68fa      	ldr	r2, [r7, #12]
 800e49e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	68ba      	ldr	r2, [r7, #8]
 800e4a4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	687a      	ldr	r2, [r7, #4]
 800e4aa:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e4ac:	6979      	ldr	r1, [r7, #20]
 800e4ae:	4809      	ldr	r0, [pc, #36]	@ (800e4d4 <tcpip_inpkt+0x78>)
 800e4b0:	f00a fd52 	bl	8018f58 <sys_mbox_trypost>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d006      	beq.n	800e4c8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e4ba:	6979      	ldr	r1, [r7, #20]
 800e4bc:	2009      	movs	r0, #9
 800e4be:	f001 f8fb 	bl	800f6b8 <memp_free>
    return ERR_MEM;
 800e4c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e4c6:	e000      	b.n	800e4ca <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e4c8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3718      	adds	r7, #24
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	240050f0 	.word	0x240050f0
 800e4d8:	0801b9c4 	.word	0x0801b9c4
 800e4dc:	0801ba3c 	.word	0x0801ba3c
 800e4e0:	0801ba14 	.word	0x0801ba14

0800e4e4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e4f4:	f003 0318 	and.w	r3, r3, #24
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d006      	beq.n	800e50a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e4fc:	4a08      	ldr	r2, [pc, #32]	@ (800e520 <tcpip_input+0x3c>)
 800e4fe:	6839      	ldr	r1, [r7, #0]
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f7ff ffab 	bl	800e45c <tcpip_inpkt>
 800e506:	4603      	mov	r3, r0
 800e508:	e005      	b.n	800e516 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800e50a:	4a06      	ldr	r2, [pc, #24]	@ (800e524 <tcpip_input+0x40>)
 800e50c:	6839      	ldr	r1, [r7, #0]
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f7ff ffa4 	bl	800e45c <tcpip_inpkt>
 800e514:	4603      	mov	r3, r0
}
 800e516:	4618      	mov	r0, r3
 800e518:	3708      	adds	r7, #8
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop
 800e520:	08018d79 	.word	0x08018d79
 800e524:	08017c81 	.word	0x08017c81

0800e528 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e532:	4819      	ldr	r0, [pc, #100]	@ (800e598 <tcpip_try_callback+0x70>)
 800e534:	f00a fd5b 	bl	8018fee <sys_mbox_valid>
 800e538:	4603      	mov	r3, r0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d106      	bne.n	800e54c <tcpip_try_callback+0x24>
 800e53e:	4b17      	ldr	r3, [pc, #92]	@ (800e59c <tcpip_try_callback+0x74>)
 800e540:	f240 125d 	movw	r2, #349	@ 0x15d
 800e544:	4916      	ldr	r1, [pc, #88]	@ (800e5a0 <tcpip_try_callback+0x78>)
 800e546:	4817      	ldr	r0, [pc, #92]	@ (800e5a4 <tcpip_try_callback+0x7c>)
 800e548:	f00b f848 	bl	80195dc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e54c:	2008      	movs	r0, #8
 800e54e:	f001 f83d 	bl	800f5cc <memp_malloc>
 800e552:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d102      	bne.n	800e560 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800e55a:	f04f 33ff 	mov.w	r3, #4294967295
 800e55e:	e017      	b.n	800e590 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2201      	movs	r2, #1
 800e564:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	687a      	ldr	r2, [r7, #4]
 800e56a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	683a      	ldr	r2, [r7, #0]
 800e570:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e572:	68f9      	ldr	r1, [r7, #12]
 800e574:	4808      	ldr	r0, [pc, #32]	@ (800e598 <tcpip_try_callback+0x70>)
 800e576:	f00a fcef 	bl	8018f58 <sys_mbox_trypost>
 800e57a:	4603      	mov	r3, r0
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d006      	beq.n	800e58e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800e580:	68f9      	ldr	r1, [r7, #12]
 800e582:	2008      	movs	r0, #8
 800e584:	f001 f898 	bl	800f6b8 <memp_free>
    return ERR_MEM;
 800e588:	f04f 33ff 	mov.w	r3, #4294967295
 800e58c:	e000      	b.n	800e590 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800e58e:	2300      	movs	r3, #0
}
 800e590:	4618      	mov	r0, r3
 800e592:	3710      	adds	r7, #16
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}
 800e598:	240050f0 	.word	0x240050f0
 800e59c:	0801b9c4 	.word	0x0801b9c4
 800e5a0:	0801ba3c 	.word	0x0801ba3c
 800e5a4:	0801ba14 	.word	0x0801ba14

0800e5a8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b084      	sub	sp, #16
 800e5ac:	af02      	add	r7, sp, #8
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800e5b2:	f000 fb56 	bl	800ec62 <lwip_init>

  tcpip_init_done = initfunc;
 800e5b6:	4a17      	ldr	r2, [pc, #92]	@ (800e614 <tcpip_init+0x6c>)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800e5bc:	4a16      	ldr	r2, [pc, #88]	@ (800e618 <tcpip_init+0x70>)
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800e5c2:	2106      	movs	r1, #6
 800e5c4:	4815      	ldr	r0, [pc, #84]	@ (800e61c <tcpip_init+0x74>)
 800e5c6:	f00a fcad 	bl	8018f24 <sys_mbox_new>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d006      	beq.n	800e5de <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800e5d0:	4b13      	ldr	r3, [pc, #76]	@ (800e620 <tcpip_init+0x78>)
 800e5d2:	f240 2261 	movw	r2, #609	@ 0x261
 800e5d6:	4913      	ldr	r1, [pc, #76]	@ (800e624 <tcpip_init+0x7c>)
 800e5d8:	4813      	ldr	r0, [pc, #76]	@ (800e628 <tcpip_init+0x80>)
 800e5da:	f00a ffff 	bl	80195dc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800e5de:	4813      	ldr	r0, [pc, #76]	@ (800e62c <tcpip_init+0x84>)
 800e5e0:	f00a fd22 	bl	8019028 <sys_mutex_new>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d006      	beq.n	800e5f8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800e5ea:	4b0d      	ldr	r3, [pc, #52]	@ (800e620 <tcpip_init+0x78>)
 800e5ec:	f240 2265 	movw	r2, #613	@ 0x265
 800e5f0:	490f      	ldr	r1, [pc, #60]	@ (800e630 <tcpip_init+0x88>)
 800e5f2:	480d      	ldr	r0, [pc, #52]	@ (800e628 <tcpip_init+0x80>)
 800e5f4:	f00a fff2 	bl	80195dc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800e5f8:	2318      	movs	r3, #24
 800e5fa:	9300      	str	r3, [sp, #0]
 800e5fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e600:	2200      	movs	r2, #0
 800e602:	490c      	ldr	r1, [pc, #48]	@ (800e634 <tcpip_init+0x8c>)
 800e604:	480c      	ldr	r0, [pc, #48]	@ (800e638 <tcpip_init+0x90>)
 800e606:	f00a fd41 	bl	801908c <sys_thread_new>
}
 800e60a:	bf00      	nop
 800e60c:	3708      	adds	r7, #8
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	240050e8 	.word	0x240050e8
 800e618:	240050ec 	.word	0x240050ec
 800e61c:	240050f0 	.word	0x240050f0
 800e620:	0801b9c4 	.word	0x0801b9c4
 800e624:	0801ba4c 	.word	0x0801ba4c
 800e628:	0801ba14 	.word	0x0801ba14
 800e62c:	240050f4 	.word	0x240050f4
 800e630:	0801ba70 	.word	0x0801ba70
 800e634:	0800e365 	.word	0x0800e365
 800e638:	0801ba94 	.word	0x0801ba94

0800e63c <sntp_process>:
/**
 * SNTP processing of received timestamp
 */
static void
sntp_process(const struct sntp_timestamps *timestamps)
{
 800e63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e640:	b089      	sub	sp, #36	@ 0x24
 800e642:	af00      	add	r7, sp, #0
 800e644:	6178      	str	r0, [r7, #20]
  s32_t sec;
  u32_t frac;

  sec  = (s32_t)lwip_ntohl(timestamps->xmit.sec);
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	4618      	mov	r0, r3
 800e64c:	f000 fa34 	bl	800eab8 <lwip_htonl>
 800e650:	4603      	mov	r3, r0
 800e652:	61fb      	str	r3, [r7, #28]
  frac = lwip_ntohl(timestamps->xmit.frac);
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	4618      	mov	r0, r3
 800e65a:	f000 fa2d 	bl	800eab8 <lwip_htonl>
 800e65e:	61b8      	str	r0, [r7, #24]
      frac = (u32_t)((u64_t)t4);
    }
  }
#endif /* SNTP_COMP_ROUNDTRIP */

  SNTP_SET_SYSTEM_TIME_NTP(sec, frac);
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	4e27      	ldr	r6, [pc, #156]	@ (800e700 <sntp_process+0xc4>)
 800e664:	441e      	add	r6, r3
 800e666:	69bb      	ldr	r3, [r7, #24]
 800e668:	2200      	movs	r2, #0
 800e66a:	469a      	mov	sl, r3
 800e66c:	4693      	mov	fp, r2
 800e66e:	4652      	mov	r2, sl
 800e670:	465b      	mov	r3, fp
 800e672:	f04f 0000 	mov.w	r0, #0
 800e676:	f04f 0100 	mov.w	r1, #0
 800e67a:	0159      	lsls	r1, r3, #5
 800e67c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e680:	0150      	lsls	r0, r2, #5
 800e682:	4602      	mov	r2, r0
 800e684:	460b      	mov	r3, r1
 800e686:	ebb2 040a 	subs.w	r4, r2, sl
 800e68a:	eb63 050b 	sbc.w	r5, r3, fp
 800e68e:	f04f 0200 	mov.w	r2, #0
 800e692:	f04f 0300 	mov.w	r3, #0
 800e696:	026b      	lsls	r3, r5, #9
 800e698:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800e69c:	0262      	lsls	r2, r4, #9
 800e69e:	4614      	mov	r4, r2
 800e6a0:	461d      	mov	r5, r3
 800e6a2:	eb14 080a 	adds.w	r8, r4, sl
 800e6a6:	eb45 090b 	adc.w	r9, r5, fp
 800e6aa:	f04f 0200 	mov.w	r2, #0
 800e6ae:	f04f 0300 	mov.w	r3, #0
 800e6b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800e6b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800e6ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800e6be:	ebb2 0108 	subs.w	r1, r2, r8
 800e6c2:	6039      	str	r1, [r7, #0]
 800e6c4:	eb63 0309 	sbc.w	r3, r3, r9
 800e6c8:	607b      	str	r3, [r7, #4]
 800e6ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	eb13 030a 	adds.w	r3, r3, sl
 800e6d4:	60bb      	str	r3, [r7, #8]
 800e6d6:	4613      	mov	r3, r2
 800e6d8:	eb43 030b 	adc.w	r3, r3, fp
 800e6dc:	60fb      	str	r3, [r7, #12]
 800e6de:	f04f 0200 	mov.w	r2, #0
 800e6e2:	f04f 0300 	mov.w	r3, #0
 800e6e6:	68f9      	ldr	r1, [r7, #12]
 800e6e8:	000a      	movs	r2, r1
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	4613      	mov	r3, r2
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	f7f2 fa39 	bl	8000b68 <set_system_time>
  LWIP_UNUSED_ARG(frac); /* might be unused if only seconds are set */
  LWIP_DEBUGF(SNTP_DEBUG_TRACE, ("sntp_process: %s, %" U32_F " us\n",
                                 sntp_format_time(sec), SNTP_FRAC_TO_US(frac)));
}
 800e6f6:	bf00      	nop
 800e6f8:	3724      	adds	r7, #36	@ 0x24
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e700:	7c558180 	.word	0x7c558180

0800e704 <sntp_initialize_request>:
/**
 * Initialize request struct to be sent to server.
 */
static void
sntp_initialize_request(struct sntp_msg *req)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  memset(req, 0, SNTP_MSG_LEN);
 800e70c:	2230      	movs	r2, #48	@ 0x30
 800e70e:	2100      	movs	r1, #0
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f00b f85f 	bl	80197d4 <memset>
  req->li_vn_mode = SNTP_LI_NO_WARNING | SNTP_VERSION | SNTP_MODE_CLIENT;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2223      	movs	r2, #35	@ 0x23
 800e71a:	701a      	strb	r2, [r3, #0]
# endif
    req->transmit_timestamp[0] = sec;
    req->transmit_timestamp[1] = frac;
  }
#endif /* SNTP_CHECK_RESPONSE >= 2 || SNTP_COMP_ROUNDTRIP */
}
 800e71c:	bf00      	nop
 800e71e:	3708      	adds	r7, #8
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <sntp_retry>:
 *
 * @param arg is unused (only necessary to conform to sys_timeout)
 */
static void
sntp_retry(void *arg)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b084      	sub	sp, #16
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]

  LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_retry: Next request will be sent in %"U32_F" ms\n",
                                 sntp_retry_timeout));

  /* set up a timer to send a retry and increase the retry delay */
  sys_timeout(sntp_retry_timeout, sntp_request, NULL);
 800e72c:	4b0d      	ldr	r3, [pc, #52]	@ (800e764 <sntp_retry+0x40>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	2200      	movs	r2, #0
 800e732:	490d      	ldr	r1, [pc, #52]	@ (800e768 <sntp_retry+0x44>)
 800e734:	4618      	mov	r0, r3
 800e736:	f007 fbab 	bl	8015e90 <sys_timeout>

#if SNTP_RETRY_TIMEOUT_EXP
  {
    u32_t new_retry_timeout;
    /* increase the timeout for next retry */
    new_retry_timeout = sntp_retry_timeout << 1;
 800e73a:	4b0a      	ldr	r3, [pc, #40]	@ (800e764 <sntp_retry+0x40>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	005b      	lsls	r3, r3, #1
 800e740:	60fb      	str	r3, [r7, #12]
    /* limit to maximum timeout and prevent overflow */
    if ((new_retry_timeout <= SNTP_RETRY_TIMEOUT_MAX) &&
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	4a09      	ldr	r2, [pc, #36]	@ (800e76c <sntp_retry+0x48>)
 800e746:	4293      	cmp	r3, r2
 800e748:	d807      	bhi.n	800e75a <sntp_retry+0x36>
        (new_retry_timeout > sntp_retry_timeout)) {
 800e74a:	4b06      	ldr	r3, [pc, #24]	@ (800e764 <sntp_retry+0x40>)
 800e74c:	681b      	ldr	r3, [r3, #0]
    if ((new_retry_timeout <= SNTP_RETRY_TIMEOUT_MAX) &&
 800e74e:	68fa      	ldr	r2, [r7, #12]
 800e750:	429a      	cmp	r2, r3
 800e752:	d902      	bls.n	800e75a <sntp_retry+0x36>
      sntp_retry_timeout = new_retry_timeout;
 800e754:	4a03      	ldr	r2, [pc, #12]	@ (800e764 <sntp_retry+0x40>)
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* SNTP_RETRY_TIMEOUT_EXP */
}
 800e75a:	bf00      	nop
 800e75c:	3710      	adds	r7, #16
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	24005108 	.word	0x24005108
 800e768:	0800e911 	.word	0x0800e911
 800e76c:	000249f0 	.word	0x000249f0

0800e770 <sntp_recv>:
#endif /* SNTP_SUPPORT_MULTIPLE_SERVERS */

/** UDP recv callback for the sntp pcb */
static void
sntp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b088      	sub	sp, #32
 800e774:	af00      	add	r7, sp, #0
 800e776:	60f8      	str	r0, [r7, #12]
 800e778:	60b9      	str	r1, [r7, #8]
 800e77a:	607a      	str	r2, [r7, #4]
 800e77c:	603b      	str	r3, [r7, #0]
  err_t err;

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);

  err = ERR_ARG;
 800e77e:	23f0      	movs	r3, #240	@ 0xf0
 800e780:	77fb      	strb	r3, [r7, #31]
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);
#endif /* SNTP_CHECK_RESPONSE >= 1 */
  {
    /* process the response */
    if (p->tot_len == SNTP_MSG_LEN) {
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	891b      	ldrh	r3, [r3, #8]
 800e786:	2b30      	cmp	r3, #48	@ 0x30
 800e788:	d12d      	bne.n	800e7e6 <sntp_recv+0x76>
      mode = pbuf_get_at(p, SNTP_OFFSET_LI_VN_MODE) & SNTP_MODE_MASK;
 800e78a:	2100      	movs	r1, #0
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f002 f90b 	bl	80109a8 <pbuf_get_at>
 800e792:	4603      	mov	r3, r0
 800e794:	f003 0307 	and.w	r3, r3, #7
 800e798:	77bb      	strb	r3, [r7, #30]
      /* if this is a SNTP response... */
      if (((sntp_opmode == SNTP_OPMODE_POLL)       && (mode == SNTP_MODE_SERVER)) ||
 800e79a:	4b30      	ldr	r3, [pc, #192]	@ (800e85c <sntp_recv+0xec>)
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d102      	bne.n	800e7a8 <sntp_recv+0x38>
 800e7a2:	7fbb      	ldrb	r3, [r7, #30]
 800e7a4:	2b04      	cmp	r3, #4
 800e7a6:	d006      	beq.n	800e7b6 <sntp_recv+0x46>
          ((sntp_opmode == SNTP_OPMODE_LISTENONLY) && (mode == SNTP_MODE_BROADCAST))) {
 800e7a8:	4b2c      	ldr	r3, [pc, #176]	@ (800e85c <sntp_recv+0xec>)
 800e7aa:	781b      	ldrb	r3, [r3, #0]
      if (((sntp_opmode == SNTP_OPMODE_POLL)       && (mode == SNTP_MODE_SERVER)) ||
 800e7ac:	2b01      	cmp	r3, #1
 800e7ae:	d118      	bne.n	800e7e2 <sntp_recv+0x72>
          ((sntp_opmode == SNTP_OPMODE_LISTENONLY) && (mode == SNTP_MODE_BROADCAST))) {
 800e7b0:	7fbb      	ldrb	r3, [r7, #30]
 800e7b2:	2b05      	cmp	r3, #5
 800e7b4:	d115      	bne.n	800e7e2 <sntp_recv+0x72>
        stratum = pbuf_get_at(p, SNTP_OFFSET_STRATUM);
 800e7b6:	2101      	movs	r1, #1
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f002 f8f5 	bl	80109a8 <pbuf_get_at>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	777b      	strb	r3, [r7, #29]

        if (stratum == SNTP_STRATUM_KOD) {
 800e7c2:	7f7b      	ldrb	r3, [r7, #29]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d102      	bne.n	800e7ce <sntp_recv+0x5e>
          /* Kiss-of-death packet. Use another server or increase UPDATE_DELAY. */
          err = SNTP_ERR_KOD;
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	77fb      	strb	r3, [r7, #31]
        if (stratum == SNTP_STRATUM_KOD) {
 800e7cc:	e00b      	b.n	800e7e6 <sntp_recv+0x76>
          LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_recv: Received Kiss-of-Death\n"));
        } else {
          pbuf_copy_partial(p, &timestamps, sizeof(timestamps), SNTP_OFFSET_TIMESTAMPS);
 800e7ce:	f107 0110 	add.w	r1, r7, #16
 800e7d2:	2328      	movs	r3, #40	@ 0x28
 800e7d4:	2208      	movs	r2, #8
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f002 f818 	bl	801080c <pbuf_copy_partial>
          } else
#endif /* SNTP_CHECK_RESPONSE >= 2 */
            /* @todo: add code for SNTP_CHECK_RESPONSE >= 3 and >= 4 here */
          {
            /* correct answer */
            err = ERR_OK;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	77fb      	strb	r3, [r7, #31]
        if (stratum == SNTP_STRATUM_KOD) {
 800e7e0:	e001      	b.n	800e7e6 <sntp_recv+0x76>
          }
        }
      } else {
        LWIP_DEBUGF(SNTP_DEBUG_WARN, ("sntp_recv: Invalid mode in response: %"U16_F"\n", (u16_t)mode));
        /* wait for correct response */
        err = ERR_TIMEOUT;
 800e7e2:	23fd      	movs	r3, #253	@ 0xfd
 800e7e4:	77fb      	strb	r3, [r7, #31]
    /* packet from wrong remote address or port, wait for correct response */
    err = ERR_TIMEOUT;
  }
#endif /* SNTP_CHECK_RESPONSE >= 1 */

  pbuf_free(p);
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f001 fe0a 	bl	8010400 <pbuf_free>

  if (err == ERR_OK) {
 800e7ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d123      	bne.n	800e83c <sntp_recv+0xcc>
    /* correct packet received: process it it */
    sntp_process(&timestamps);
 800e7f4:	f107 0310 	add.w	r3, r7, #16
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7ff ff1f 	bl	800e63c <sntp_process>

#if SNTP_MONITOR_SERVER_REACHABILITY
    /* indicate that server responded */
    sntp_servers[sntp_current_server].reachability |= 1;
 800e7fe:	4b18      	ldr	r3, [pc, #96]	@ (800e860 <sntp_recv+0xf0>)
 800e800:	791b      	ldrb	r3, [r3, #4]
 800e802:	f043 0301 	orr.w	r3, r3, #1
 800e806:	b2da      	uxtb	r2, r3
 800e808:	4b15      	ldr	r3, [pc, #84]	@ (800e860 <sntp_recv+0xf0>)
 800e80a:	711a      	strb	r2, [r3, #4]
#endif /* SNTP_MONITOR_SERVER_REACHABILITY */
    /* Set up timeout for next request (only if poll response was received)*/
    if (sntp_opmode == SNTP_OPMODE_POLL) {
 800e80c:	4b13      	ldr	r3, [pc, #76]	@ (800e85c <sntp_recv+0xec>)
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d11e      	bne.n	800e852 <sntp_recv+0xe2>
      u32_t sntp_update_delay;
      sys_untimeout(sntp_try_next_server, NULL);
 800e814:	2100      	movs	r1, #0
 800e816:	4813      	ldr	r0, [pc, #76]	@ (800e864 <sntp_recv+0xf4>)
 800e818:	f007 fb60 	bl	8015edc <sys_untimeout>
      sys_untimeout(sntp_request, NULL);
 800e81c:	2100      	movs	r1, #0
 800e81e:	4812      	ldr	r0, [pc, #72]	@ (800e868 <sntp_recv+0xf8>)
 800e820:	f007 fb5c 	bl	8015edc <sys_untimeout>

      /* Correct response, reset retry timeout */
      SNTP_RESET_RETRY_TIMEOUT();
 800e824:	4b11      	ldr	r3, [pc, #68]	@ (800e86c <sntp_recv+0xfc>)
 800e826:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800e82a:	601a      	str	r2, [r3, #0]

      sntp_update_delay = (u32_t)SNTP_UPDATE_DELAY;
 800e82c:	4b10      	ldr	r3, [pc, #64]	@ (800e870 <sntp_recv+0x100>)
 800e82e:	61bb      	str	r3, [r7, #24]
      sys_timeout(sntp_update_delay, sntp_request, NULL);
 800e830:	2200      	movs	r2, #0
 800e832:	490d      	ldr	r1, [pc, #52]	@ (800e868 <sntp_recv+0xf8>)
 800e834:	69b8      	ldr	r0, [r7, #24]
 800e836:	f007 fb2b 	bl	8015e90 <sys_timeout>
      sntp_try_next_server(NULL);
    }
  } else {
    /* ignore any broken packet, poll mode: retry after timeout to avoid flooding */
  }
}
 800e83a:	e00a      	b.n	800e852 <sntp_recv+0xe2>
  } else if (err == SNTP_ERR_KOD) {
 800e83c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e840:	2b01      	cmp	r3, #1
 800e842:	d106      	bne.n	800e852 <sntp_recv+0xe2>
    if (sntp_opmode == SNTP_OPMODE_POLL) {
 800e844:	4b05      	ldr	r3, [pc, #20]	@ (800e85c <sntp_recv+0xec>)
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d102      	bne.n	800e852 <sntp_recv+0xe2>
      sntp_try_next_server(NULL);
 800e84c:	2000      	movs	r0, #0
 800e84e:	f7ff ff69 	bl	800e724 <sntp_retry>
}
 800e852:	bf00      	nop
 800e854:	3720      	adds	r7, #32
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	240050f8 	.word	0x240050f8
 800e860:	24005100 	.word	0x24005100
 800e864:	0800e725 	.word	0x0800e725
 800e868:	0800e911 	.word	0x0800e911
 800e86c:	24005108 	.word	0x24005108
 800e870:	0036ee80 	.word	0x0036ee80

0800e874 <sntp_send_request>:
 *
 * @param server_addr resolved IP address of the SNTP server
 */
static void
sntp_send_request(const ip_addr_t *server_addr)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b084      	sub	sp, #16
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;

  LWIP_ASSERT("server_addr != NULL", server_addr != NULL);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d106      	bne.n	800e890 <sntp_send_request+0x1c>
 800e882:	4b1c      	ldr	r3, [pc, #112]	@ (800e8f4 <sntp_send_request+0x80>)
 800e884:	f44f 7208 	mov.w	r2, #544	@ 0x220
 800e888:	491b      	ldr	r1, [pc, #108]	@ (800e8f8 <sntp_send_request+0x84>)
 800e88a:	481c      	ldr	r0, [pc, #112]	@ (800e8fc <sntp_send_request+0x88>)
 800e88c:	f00a fea6 	bl	80195dc <iprintf>

  p = pbuf_alloc(PBUF_TRANSPORT, SNTP_MSG_LEN, PBUF_RAM);
 800e890:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e894:	2130      	movs	r1, #48	@ 0x30
 800e896:	2036      	movs	r0, #54	@ 0x36
 800e898:	f001 face 	bl	800fe38 <pbuf_alloc>
 800e89c:	60f8      	str	r0, [r7, #12]
  if (p != NULL) {
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d01c      	beq.n	800e8de <sntp_send_request+0x6a>
    struct sntp_msg *sntpmsg = (struct sntp_msg *)p->payload;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	60bb      	str	r3, [r7, #8]
    LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_send_request: Sending request to server\n"));
    /* initialize request message */
    sntp_initialize_request(sntpmsg);
 800e8aa:	68b8      	ldr	r0, [r7, #8]
 800e8ac:	f7ff ff2a 	bl	800e704 <sntp_initialize_request>
    /* send request */
    udp_sendto(sntp_pcb, p, server_addr, SNTP_PORT);
 800e8b0:	4b13      	ldr	r3, [pc, #76]	@ (800e900 <sntp_send_request+0x8c>)
 800e8b2:	6818      	ldr	r0, [r3, #0]
 800e8b4:	237b      	movs	r3, #123	@ 0x7b
 800e8b6:	687a      	ldr	r2, [r7, #4]
 800e8b8:	68f9      	ldr	r1, [r7, #12]
 800e8ba:	f007 fd83 	bl	80163c4 <udp_sendto>
    /* free the pbuf after sending it */
    pbuf_free(p);
 800e8be:	68f8      	ldr	r0, [r7, #12]
 800e8c0:	f001 fd9e 	bl	8010400 <pbuf_free>
#if SNTP_MONITOR_SERVER_REACHABILITY
    /* indicate new packet has been sent */
    sntp_servers[sntp_current_server].reachability <<= 1;
 800e8c4:	4b0f      	ldr	r3, [pc, #60]	@ (800e904 <sntp_send_request+0x90>)
 800e8c6:	791b      	ldrb	r3, [r3, #4]
 800e8c8:	005b      	lsls	r3, r3, #1
 800e8ca:	b2da      	uxtb	r2, r3
 800e8cc:	4b0d      	ldr	r3, [pc, #52]	@ (800e904 <sntp_send_request+0x90>)
 800e8ce:	711a      	strb	r2, [r3, #4]
#endif /* SNTP_MONITOR_SERVER_REACHABILITY */
    /* set up receive timeout: try next server or retry on timeout */
    sys_timeout((u32_t)SNTP_RECV_TIMEOUT, sntp_try_next_server, NULL);
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	490d      	ldr	r1, [pc, #52]	@ (800e908 <sntp_send_request+0x94>)
 800e8d4:	f643 2098 	movw	r0, #15000	@ 0x3a98
 800e8d8:	f007 fada 	bl	8015e90 <sys_timeout>
    LWIP_DEBUGF(SNTP_DEBUG_SERIOUS, ("sntp_send_request: Out of memory, trying again in %"U32_F" ms\n",
                                     (u32_t)SNTP_RETRY_TIMEOUT));
    /* out of memory: set up a timer to send a retry */
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_request, NULL);
  }
}
 800e8dc:	e005      	b.n	800e8ea <sntp_send_request+0x76>
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_request, NULL);
 800e8de:	2200      	movs	r2, #0
 800e8e0:	490a      	ldr	r1, [pc, #40]	@ (800e90c <sntp_send_request+0x98>)
 800e8e2:	f643 2098 	movw	r0, #15000	@ 0x3a98
 800e8e6:	f007 fad3 	bl	8015e90 <sys_timeout>
}
 800e8ea:	bf00      	nop
 800e8ec:	3710      	adds	r7, #16
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}
 800e8f2:	bf00      	nop
 800e8f4:	0801baa4 	.word	0x0801baa4
 800e8f8:	0801badc 	.word	0x0801badc
 800e8fc:	0801baf0 	.word	0x0801baf0
 800e900:	240050fc 	.word	0x240050fc
 800e904:	24005100 	.word	0x24005100
 800e908:	0800e725 	.word	0x0800e725
 800e90c:	0800e911 	.word	0x0800e911

0800e910 <sntp_request>:
 *
 * @param arg is unused (only necessary to conform to sys_timeout)
 */
static void
sntp_request(void *arg)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
      sntp_servers[sntp_current_server].addr = sntp_server_address;
    }
  } else
#endif /* SNTP_SERVER_DNS */
  {
    sntp_server_address = sntp_servers[sntp_current_server].addr;
 800e918:	4b0f      	ldr	r3, [pc, #60]	@ (800e958 <sntp_request+0x48>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	60bb      	str	r3, [r7, #8]
    err = (ip_addr_isany_val(sntp_server_address)) ? ERR_ARG : ERR_OK;
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d102      	bne.n	800e92a <sntp_request+0x1a>
 800e924:	f06f 030f 	mvn.w	r3, #15
 800e928:	e000      	b.n	800e92c <sntp_request+0x1c>
 800e92a:	2300      	movs	r3, #0
 800e92c:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 800e92e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d105      	bne.n	800e942 <sntp_request+0x32>
    LWIP_DEBUGF(SNTP_DEBUG_TRACE, ("sntp_request: current server address is %s\n",
                                   ipaddr_ntoa(&sntp_server_address)));
    sntp_send_request(&sntp_server_address);
 800e936:	f107 0308 	add.w	r3, r7, #8
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7ff ff9a 	bl	800e874 <sntp_send_request>
  } else {
    /* address conversion failed, try another server */
    LWIP_DEBUGF(SNTP_DEBUG_WARN_STATE, ("sntp_request: Invalid server address, trying next server.\n"));
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_try_next_server, NULL);
  }
}
 800e940:	e005      	b.n	800e94e <sntp_request+0x3e>
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_try_next_server, NULL);
 800e942:	2200      	movs	r2, #0
 800e944:	4905      	ldr	r1, [pc, #20]	@ (800e95c <sntp_request+0x4c>)
 800e946:	f643 2098 	movw	r0, #15000	@ 0x3a98
 800e94a:	f007 faa1 	bl	8015e90 <sys_timeout>
}
 800e94e:	bf00      	nop
 800e950:	3710      	adds	r7, #16
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
 800e956:	bf00      	nop
 800e958:	24005100 	.word	0x24005100
 800e95c:	0800e725 	.word	0x0800e725

0800e960 <sntp_init>:
 * Initialize this module.
 * Send out request instantly or after SNTP_STARTUP_DELAY(_FUNC).
 */
void
sntp_init(void)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	af00      	add	r7, sp, #0
#else
#error SNTP_SERVER_ADDRESS string not supported SNTP_SERVER_DNS==0
#endif
#endif /* SNTP_SERVER_ADDRESS */

  if (sntp_pcb == NULL) {
 800e964:	4b28      	ldr	r3, [pc, #160]	@ (800ea08 <sntp_init+0xa8>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d14a      	bne.n	800ea02 <sntp_init+0xa2>
    sntp_pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 800e96c:	202e      	movs	r0, #46	@ 0x2e
 800e96e:	f007 ffb0 	bl	80168d2 <udp_new_ip_type>
 800e972:	4603      	mov	r3, r0
 800e974:	4a24      	ldr	r2, [pc, #144]	@ (800ea08 <sntp_init+0xa8>)
 800e976:	6013      	str	r3, [r2, #0]
    LWIP_ASSERT("Failed to allocate udp pcb for sntp client", sntp_pcb != NULL);
 800e978:	4b23      	ldr	r3, [pc, #140]	@ (800ea08 <sntp_init+0xa8>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d106      	bne.n	800e98e <sntp_init+0x2e>
 800e980:	4b22      	ldr	r3, [pc, #136]	@ (800ea0c <sntp_init+0xac>)
 800e982:	f240 2296 	movw	r2, #662	@ 0x296
 800e986:	4922      	ldr	r1, [pc, #136]	@ (800ea10 <sntp_init+0xb0>)
 800e988:	4822      	ldr	r0, [pc, #136]	@ (800ea14 <sntp_init+0xb4>)
 800e98a:	f00a fe27 	bl	80195dc <iprintf>
    if (sntp_pcb != NULL) {
 800e98e:	4b1e      	ldr	r3, [pc, #120]	@ (800ea08 <sntp_init+0xa8>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d035      	beq.n	800ea02 <sntp_init+0xa2>
      udp_recv(sntp_pcb, sntp_recv, NULL);
 800e996:	4b1c      	ldr	r3, [pc, #112]	@ (800ea08 <sntp_init+0xa8>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	2200      	movs	r2, #0
 800e99c:	491e      	ldr	r1, [pc, #120]	@ (800ea18 <sntp_init+0xb8>)
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f007 ff60 	bl	8016864 <udp_recv>

      if (sntp_opmode == SNTP_OPMODE_POLL) {
 800e9a4:	4b1d      	ldr	r3, [pc, #116]	@ (800ea1c <sntp_init+0xbc>)
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d116      	bne.n	800e9da <sntp_init+0x7a>
        SNTP_RESET_RETRY_TIMEOUT();
 800e9ac:	4b1c      	ldr	r3, [pc, #112]	@ (800ea20 <sntp_init+0xc0>)
 800e9ae:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800e9b2:	601a      	str	r2, [r3, #0]
#if SNTP_STARTUP_DELAY
        sys_timeout((u32_t)SNTP_STARTUP_DELAY_FUNC, sntp_request, NULL);
 800e9b4:	f00a fc84 	bl	80192c0 <rand>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	4b19      	ldr	r3, [pc, #100]	@ (800ea24 <sntp_init+0xc4>)
 800e9be:	fba3 1302 	umull	r1, r3, r3, r2
 800e9c2:	0b1b      	lsrs	r3, r3, #12
 800e9c4:	f241 3188 	movw	r1, #5000	@ 0x1388
 800e9c8:	fb01 f303 	mul.w	r3, r1, r3
 800e9cc:	1ad3      	subs	r3, r2, r3
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	4915      	ldr	r1, [pc, #84]	@ (800ea28 <sntp_init+0xc8>)
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f007 fa5c 	bl	8015e90 <sys_timeout>
        ip_set_option(sntp_pcb, SOF_BROADCAST);
        udp_bind(sntp_pcb, IP_ANY_TYPE, SNTP_PORT);
      }
    }
  }
}
 800e9d8:	e013      	b.n	800ea02 <sntp_init+0xa2>
      } else if (sntp_opmode == SNTP_OPMODE_LISTENONLY) {
 800e9da:	4b10      	ldr	r3, [pc, #64]	@ (800ea1c <sntp_init+0xbc>)
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	2b01      	cmp	r3, #1
 800e9e0:	d10f      	bne.n	800ea02 <sntp_init+0xa2>
        ip_set_option(sntp_pcb, SOF_BROADCAST);
 800e9e2:	4b09      	ldr	r3, [pc, #36]	@ (800ea08 <sntp_init+0xa8>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	7a5a      	ldrb	r2, [r3, #9]
 800e9e8:	4b07      	ldr	r3, [pc, #28]	@ (800ea08 <sntp_init+0xa8>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f042 0220 	orr.w	r2, r2, #32
 800e9f0:	b2d2      	uxtb	r2, r2
 800e9f2:	725a      	strb	r2, [r3, #9]
        udp_bind(sntp_pcb, IP_ANY_TYPE, SNTP_PORT);
 800e9f4:	4b04      	ldr	r3, [pc, #16]	@ (800ea08 <sntp_init+0xa8>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	227b      	movs	r2, #123	@ 0x7b
 800e9fa:	490c      	ldr	r1, [pc, #48]	@ (800ea2c <sntp_init+0xcc>)
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f007 fea9 	bl	8016754 <udp_bind>
}
 800ea02:	bf00      	nop
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	240050fc 	.word	0x240050fc
 800ea0c:	0801baa4 	.word	0x0801baa4
 800ea10:	0801bb18 	.word	0x0801bb18
 800ea14:	0801baf0 	.word	0x0801baf0
 800ea18:	0800e771 	.word	0x0800e771
 800ea1c:	240050f8 	.word	0x240050f8
 800ea20:	24005108 	.word	0x24005108
 800ea24:	d1b71759 	.word	0xd1b71759
 800ea28:	0800e911 	.word	0x0800e911
 800ea2c:	0801e6c4 	.word	0x0801e6c4

0800ea30 <sntp_setoperatingmode>:
 * Sets the operating mode.
 * @param operating_mode one of the available operating modes
 */
void
sntp_setoperatingmode(u8_t operating_mode)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	4603      	mov	r3, r0
 800ea38:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("Invalid operating mode", operating_mode <= SNTP_OPMODE_LISTENONLY);
 800ea3a:	79fb      	ldrb	r3, [r7, #7]
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	d906      	bls.n	800ea4e <sntp_setoperatingmode+0x1e>
 800ea40:	4b0c      	ldr	r3, [pc, #48]	@ (800ea74 <sntp_setoperatingmode+0x44>)
 800ea42:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800ea46:	490c      	ldr	r1, [pc, #48]	@ (800ea78 <sntp_setoperatingmode+0x48>)
 800ea48:	480c      	ldr	r0, [pc, #48]	@ (800ea7c <sntp_setoperatingmode+0x4c>)
 800ea4a:	f00a fdc7 	bl	80195dc <iprintf>
  LWIP_ASSERT("Operating mode must not be set while SNTP client is running", sntp_pcb == NULL);
 800ea4e:	4b0c      	ldr	r3, [pc, #48]	@ (800ea80 <sntp_setoperatingmode+0x50>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d006      	beq.n	800ea64 <sntp_setoperatingmode+0x34>
 800ea56:	4b07      	ldr	r3, [pc, #28]	@ (800ea74 <sntp_setoperatingmode+0x44>)
 800ea58:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800ea5c:	4909      	ldr	r1, [pc, #36]	@ (800ea84 <sntp_setoperatingmode+0x54>)
 800ea5e:	4807      	ldr	r0, [pc, #28]	@ (800ea7c <sntp_setoperatingmode+0x4c>)
 800ea60:	f00a fdbc 	bl	80195dc <iprintf>
  sntp_opmode = operating_mode;
 800ea64:	4a08      	ldr	r2, [pc, #32]	@ (800ea88 <sntp_setoperatingmode+0x58>)
 800ea66:	79fb      	ldrb	r3, [r7, #7]
 800ea68:	7013      	strb	r3, [r2, #0]
}
 800ea6a:	bf00      	nop
 800ea6c:	3708      	adds	r7, #8
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	0801baa4 	.word	0x0801baa4
 800ea78:	0801bb44 	.word	0x0801bb44
 800ea7c:	0801baf0 	.word	0x0801baf0
 800ea80:	240050fc 	.word	0x240050fc
 800ea84:	0801bb5c 	.word	0x0801bb5c
 800ea88:	240050f8 	.word	0x240050f8

0800ea8c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b083      	sub	sp, #12
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	4603      	mov	r3, r0
 800ea94:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ea96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea9a:	021b      	lsls	r3, r3, #8
 800ea9c:	b21a      	sxth	r2, r3
 800ea9e:	88fb      	ldrh	r3, [r7, #6]
 800eaa0:	0a1b      	lsrs	r3, r3, #8
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	b21b      	sxth	r3, r3
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	b21b      	sxth	r3, r3
 800eaaa:	b29b      	uxth	r3, r3
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	370c      	adds	r7, #12
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr

0800eab8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b083      	sub	sp, #12
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	061a      	lsls	r2, r3, #24
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	021b      	lsls	r3, r3, #8
 800eac8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800eacc:	431a      	orrs	r2, r3
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	0a1b      	lsrs	r3, r3, #8
 800ead2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ead6:	431a      	orrs	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	0e1b      	lsrs	r3, r3, #24
 800eadc:	4313      	orrs	r3, r2
}
 800eade:	4618      	mov	r0, r3
 800eae0:	370c      	adds	r7, #12
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr

0800eaea <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800eaea:	b480      	push	{r7}
 800eaec:	b089      	sub	sp, #36	@ 0x24
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
 800eaf2:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800eafc:	2300      	movs	r3, #0
 800eafe:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	f003 0301 	and.w	r3, r3, #1
 800eb06:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d00d      	beq.n	800eb2a <lwip_standard_chksum+0x40>
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	dd0a      	ble.n	800eb2a <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800eb14:	69fa      	ldr	r2, [r7, #28]
 800eb16:	1c53      	adds	r3, r2, #1
 800eb18:	61fb      	str	r3, [r7, #28]
 800eb1a:	f107 030e 	add.w	r3, r7, #14
 800eb1e:	3301      	adds	r3, #1
 800eb20:	7812      	ldrb	r2, [r2, #0]
 800eb22:	701a      	strb	r2, [r3, #0]
    len--;
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	3b01      	subs	r3, #1
 800eb28:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800eb2a:	69fb      	ldr	r3, [r7, #28]
 800eb2c:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800eb2e:	e00a      	b.n	800eb46 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800eb30:	69bb      	ldr	r3, [r7, #24]
 800eb32:	1c9a      	adds	r2, r3, #2
 800eb34:	61ba      	str	r2, [r7, #24]
 800eb36:	881b      	ldrh	r3, [r3, #0]
 800eb38:	461a      	mov	r2, r3
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	617b      	str	r3, [r7, #20]
    len -= 2;
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	3b02      	subs	r3, #2
 800eb44:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	dcf1      	bgt.n	800eb30 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	dd04      	ble.n	800eb5c <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800eb52:	f107 030e 	add.w	r3, r7, #14
 800eb56:	69ba      	ldr	r2, [r7, #24]
 800eb58:	7812      	ldrb	r2, [r2, #0]
 800eb5a:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800eb5c:	89fb      	ldrh	r3, [r7, #14]
 800eb5e:	461a      	mov	r2, r3
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	4413      	add	r3, r2
 800eb64:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	0c1a      	lsrs	r2, r3, #16
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	4413      	add	r3, r2
 800eb70:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	0c1a      	lsrs	r2, r3, #16
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	4413      	add	r3, r2
 800eb7c:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d007      	beq.n	800eb94 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	021b      	lsls	r3, r3, #8
 800eb88:	b29a      	uxth	r2, r3
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	0a1b      	lsrs	r3, r3, #8
 800eb8e:	b2db      	uxtb	r3, r3
 800eb90:	4313      	orrs	r3, r2
 800eb92:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	b29b      	uxth	r3, r3
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3724      	adds	r7, #36	@ 0x24
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba2:	4770      	bx	lr

0800eba4 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	460b      	mov	r3, r1
 800ebae:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800ebb0:	887b      	ldrh	r3, [r7, #2]
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f7ff ff98 	bl	800eaea <lwip_standard_chksum>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	43db      	mvns	r3, r3
 800ebbe:	b29b      	uxth	r3, r3
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3708      	adds	r7, #8
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b086      	sub	sp, #24
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	613b      	str	r3, [r7, #16]
 800ebdc:	e02b      	b.n	800ec36 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	685a      	ldr	r2, [r3, #4]
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	895b      	ldrh	r3, [r3, #10]
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	4610      	mov	r0, r2
 800ebea:	f7ff ff7e 	bl	800eaea <lwip_standard_chksum>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	4413      	add	r3, r2
 800ebf6:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	0c1a      	lsrs	r2, r3, #16
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	4413      	add	r3, r2
 800ec02:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	895b      	ldrh	r3, [r3, #10]
 800ec08:	f003 0301 	and.w	r3, r3, #1
 800ec0c:	b29b      	uxth	r3, r3
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d00e      	beq.n	800ec30 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	bf0c      	ite	eq
 800ec18:	2301      	moveq	r3, #1
 800ec1a:	2300      	movne	r3, #0
 800ec1c:	b2db      	uxtb	r3, r3
 800ec1e:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	021b      	lsls	r3, r3, #8
 800ec24:	b29a      	uxth	r2, r3
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	0a1b      	lsrs	r3, r3, #8
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	4313      	orrs	r3, r2
 800ec2e:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	613b      	str	r3, [r7, #16]
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d1d0      	bne.n	800ebde <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d007      	beq.n	800ec52 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	021b      	lsls	r3, r3, #8
 800ec46:	b29a      	uxth	r2, r3
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	0a1b      	lsrs	r3, r3, #8
 800ec4c:	b2db      	uxtb	r3, r3
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	43db      	mvns	r3, r3
 800ec58:	b29b      	uxth	r3, r3
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3718      	adds	r7, #24
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}

0800ec62 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ec62:	b580      	push	{r7, lr}
 800ec64:	b082      	sub	sp, #8
 800ec66:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ec6c:	f00a f9d0 	bl	8019010 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ec70:	f000 f8d8 	bl	800ee24 <mem_init>
  memp_init();
 800ec74:	f000 fc3c 	bl	800f4f0 <memp_init>
  pbuf_init();
  netif_init();
 800ec78:	f000 fd48 	bl	800f70c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ec7c:	f007 f9da 	bl	8016034 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ec80:	f001 fecc 	bl	8010a1c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ec84:	f007 f8e2 	bl	8015e4c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ec88:	bf00      	nop
 800ec8a:	3708      	adds	r7, #8
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ec90:	b480      	push	{r7}
 800ec92:	b083      	sub	sp, #12
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	4603      	mov	r3, r0
 800ec98:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ec9a:	4b05      	ldr	r3, [pc, #20]	@ (800ecb0 <ptr_to_mem+0x20>)
 800ec9c:	681a      	ldr	r2, [r3, #0]
 800ec9e:	88fb      	ldrh	r3, [r7, #6]
 800eca0:	4413      	add	r3, r2
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	370c      	adds	r7, #12
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr
 800ecae:	bf00      	nop
 800ecb0:	24005124 	.word	0x24005124

0800ecb4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ecbc:	4b05      	ldr	r3, [pc, #20]	@ (800ecd4 <mem_to_ptr+0x20>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	687a      	ldr	r2, [r7, #4]
 800ecc2:	1ad3      	subs	r3, r2, r3
 800ecc4:	b29b      	uxth	r3, r3
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	370c      	adds	r7, #12
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr
 800ecd2:	bf00      	nop
 800ecd4:	24005124 	.word	0x24005124

0800ecd8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ecd8:	b590      	push	{r4, r7, lr}
 800ecda:	b085      	sub	sp, #20
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ece0:	4b47      	ldr	r3, [pc, #284]	@ (800ee00 <plug_holes+0x128>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	687a      	ldr	r2, [r7, #4]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d206      	bcs.n	800ecf8 <plug_holes+0x20>
 800ecea:	4b46      	ldr	r3, [pc, #280]	@ (800ee04 <plug_holes+0x12c>)
 800ecec:	f240 12df 	movw	r2, #479	@ 0x1df
 800ecf0:	4945      	ldr	r1, [pc, #276]	@ (800ee08 <plug_holes+0x130>)
 800ecf2:	4846      	ldr	r0, [pc, #280]	@ (800ee0c <plug_holes+0x134>)
 800ecf4:	f00a fc72 	bl	80195dc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ecf8:	4b45      	ldr	r3, [pc, #276]	@ (800ee10 <plug_holes+0x138>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	687a      	ldr	r2, [r7, #4]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d306      	bcc.n	800ed10 <plug_holes+0x38>
 800ed02:	4b40      	ldr	r3, [pc, #256]	@ (800ee04 <plug_holes+0x12c>)
 800ed04:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ed08:	4942      	ldr	r1, [pc, #264]	@ (800ee14 <plug_holes+0x13c>)
 800ed0a:	4840      	ldr	r0, [pc, #256]	@ (800ee0c <plug_holes+0x134>)
 800ed0c:	f00a fc66 	bl	80195dc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	791b      	ldrb	r3, [r3, #4]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d006      	beq.n	800ed26 <plug_holes+0x4e>
 800ed18:	4b3a      	ldr	r3, [pc, #232]	@ (800ee04 <plug_holes+0x12c>)
 800ed1a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800ed1e:	493e      	ldr	r1, [pc, #248]	@ (800ee18 <plug_holes+0x140>)
 800ed20:	483a      	ldr	r0, [pc, #232]	@ (800ee0c <plug_holes+0x134>)
 800ed22:	f00a fc5b 	bl	80195dc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	881b      	ldrh	r3, [r3, #0]
 800ed2a:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d906      	bls.n	800ed40 <plug_holes+0x68>
 800ed32:	4b34      	ldr	r3, [pc, #208]	@ (800ee04 <plug_holes+0x12c>)
 800ed34:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800ed38:	4938      	ldr	r1, [pc, #224]	@ (800ee1c <plug_holes+0x144>)
 800ed3a:	4834      	ldr	r0, [pc, #208]	@ (800ee0c <plug_holes+0x134>)
 800ed3c:	f00a fc4e 	bl	80195dc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	881b      	ldrh	r3, [r3, #0]
 800ed44:	4618      	mov	r0, r3
 800ed46:	f7ff ffa3 	bl	800ec90 <ptr_to_mem>
 800ed4a:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ed4c:	687a      	ldr	r2, [r7, #4]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d025      	beq.n	800eda0 <plug_holes+0xc8>
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	791b      	ldrb	r3, [r3, #4]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d121      	bne.n	800eda0 <plug_holes+0xc8>
 800ed5c:	4b2c      	ldr	r3, [pc, #176]	@ (800ee10 <plug_holes+0x138>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	68fa      	ldr	r2, [r7, #12]
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d01c      	beq.n	800eda0 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ed66:	4b2e      	ldr	r3, [pc, #184]	@ (800ee20 <plug_holes+0x148>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	68fa      	ldr	r2, [r7, #12]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d102      	bne.n	800ed76 <plug_holes+0x9e>
      lfree = mem;
 800ed70:	4a2b      	ldr	r2, [pc, #172]	@ (800ee20 <plug_holes+0x148>)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	881a      	ldrh	r2, [r3, #0]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	881b      	ldrh	r3, [r3, #0]
 800ed82:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d00a      	beq.n	800eda0 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	881b      	ldrh	r3, [r3, #0]
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7ff ff7e 	bl	800ec90 <ptr_to_mem>
 800ed94:	4604      	mov	r4, r0
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f7ff ff8c 	bl	800ecb4 <mem_to_ptr>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	885b      	ldrh	r3, [r3, #2]
 800eda4:	4618      	mov	r0, r3
 800eda6:	f7ff ff73 	bl	800ec90 <ptr_to_mem>
 800edaa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800edac:	68ba      	ldr	r2, [r7, #8]
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d020      	beq.n	800edf6 <plug_holes+0x11e>
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	791b      	ldrb	r3, [r3, #4]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d11c      	bne.n	800edf6 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800edbc:	4b18      	ldr	r3, [pc, #96]	@ (800ee20 <plug_holes+0x148>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	687a      	ldr	r2, [r7, #4]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d102      	bne.n	800edcc <plug_holes+0xf4>
      lfree = pmem;
 800edc6:	4a16      	ldr	r2, [pc, #88]	@ (800ee20 <plug_holes+0x148>)
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	881a      	ldrh	r2, [r3, #0]
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	881b      	ldrh	r3, [r3, #0]
 800edd8:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800eddc:	4293      	cmp	r3, r2
 800edde:	d00a      	beq.n	800edf6 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	881b      	ldrh	r3, [r3, #0]
 800ede4:	4618      	mov	r0, r3
 800ede6:	f7ff ff53 	bl	800ec90 <ptr_to_mem>
 800edea:	4604      	mov	r4, r0
 800edec:	68b8      	ldr	r0, [r7, #8]
 800edee:	f7ff ff61 	bl	800ecb4 <mem_to_ptr>
 800edf2:	4603      	mov	r3, r0
 800edf4:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800edf6:	bf00      	nop
 800edf8:	3714      	adds	r7, #20
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd90      	pop	{r4, r7, pc}
 800edfe:	bf00      	nop
 800ee00:	24005124 	.word	0x24005124
 800ee04:	0801bb98 	.word	0x0801bb98
 800ee08:	0801bbc8 	.word	0x0801bbc8
 800ee0c:	0801bbe0 	.word	0x0801bbe0
 800ee10:	24005128 	.word	0x24005128
 800ee14:	0801bc08 	.word	0x0801bc08
 800ee18:	0801bc24 	.word	0x0801bc24
 800ee1c:	0801bc40 	.word	0x0801bc40
 800ee20:	24005130 	.word	0x24005130

0800ee24 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ee2a:	4b1d      	ldr	r3, [pc, #116]	@ (800eea0 <mem_init+0x7c>)
 800ee2c:	4a1d      	ldr	r2, [pc, #116]	@ (800eea4 <mem_init+0x80>)
 800ee2e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ee30:	4b1b      	ldr	r3, [pc, #108]	@ (800eea0 <mem_init+0x7c>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800ee3c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2200      	movs	r2, #0
 800ee42:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2200      	movs	r2, #0
 800ee48:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ee4a:	f647 50e8 	movw	r0, #32232	@ 0x7de8
 800ee4e:	f7ff ff1f 	bl	800ec90 <ptr_to_mem>
 800ee52:	4603      	mov	r3, r0
 800ee54:	4a14      	ldr	r2, [pc, #80]	@ (800eea8 <mem_init+0x84>)
 800ee56:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ee58:	4b13      	ldr	r3, [pc, #76]	@ (800eea8 <mem_init+0x84>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ee60:	4b11      	ldr	r3, [pc, #68]	@ (800eea8 <mem_init+0x84>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800ee68:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ee6a:	4b0f      	ldr	r3, [pc, #60]	@ (800eea8 <mem_init+0x84>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800ee72:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ee74:	4b0a      	ldr	r3, [pc, #40]	@ (800eea0 <mem_init+0x7c>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	4a0c      	ldr	r2, [pc, #48]	@ (800eeac <mem_init+0x88>)
 800ee7a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ee7c:	480c      	ldr	r0, [pc, #48]	@ (800eeb0 <mem_init+0x8c>)
 800ee7e:	f00a f8d3 	bl	8019028 <sys_mutex_new>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d006      	beq.n	800ee96 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ee88:	4b0a      	ldr	r3, [pc, #40]	@ (800eeb4 <mem_init+0x90>)
 800ee8a:	f240 221f 	movw	r2, #543	@ 0x21f
 800ee8e:	490a      	ldr	r1, [pc, #40]	@ (800eeb8 <mem_init+0x94>)
 800ee90:	480a      	ldr	r0, [pc, #40]	@ (800eebc <mem_init+0x98>)
 800ee92:	f00a fba3 	bl	80195dc <iprintf>
  }
}
 800ee96:	bf00      	nop
 800ee98:	3708      	adds	r7, #8
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop
 800eea0:	24005124 	.word	0x24005124
 800eea4:	30000200 	.word	0x30000200
 800eea8:	24005128 	.word	0x24005128
 800eeac:	24005130 	.word	0x24005130
 800eeb0:	2400512c 	.word	0x2400512c
 800eeb4:	0801bb98 	.word	0x0801bb98
 800eeb8:	0801bc6c 	.word	0x0801bc6c
 800eebc:	0801bbe0 	.word	0x0801bbe0

0800eec0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b086      	sub	sp, #24
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f7ff fef3 	bl	800ecb4 <mem_to_ptr>
 800eece:	4603      	mov	r3, r0
 800eed0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	881b      	ldrh	r3, [r3, #0]
 800eed6:	4618      	mov	r0, r3
 800eed8:	f7ff feda 	bl	800ec90 <ptr_to_mem>
 800eedc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	885b      	ldrh	r3, [r3, #2]
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7ff fed4 	bl	800ec90 <ptr_to_mem>
 800eee8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	881b      	ldrh	r3, [r3, #0]
 800eeee:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d819      	bhi.n	800ef2a <mem_link_valid+0x6a>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	885b      	ldrh	r3, [r3, #2]
 800eefa:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d813      	bhi.n	800ef2a <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ef06:	8afa      	ldrh	r2, [r7, #22]
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d004      	beq.n	800ef16 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	881b      	ldrh	r3, [r3, #0]
 800ef10:	8afa      	ldrh	r2, [r7, #22]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d109      	bne.n	800ef2a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ef16:	4b08      	ldr	r3, [pc, #32]	@ (800ef38 <mem_link_valid+0x78>)
 800ef18:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ef1a:	693a      	ldr	r2, [r7, #16]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d006      	beq.n	800ef2e <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	885b      	ldrh	r3, [r3, #2]
 800ef24:	8afa      	ldrh	r2, [r7, #22]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d001      	beq.n	800ef2e <mem_link_valid+0x6e>
    return 0;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	e000      	b.n	800ef30 <mem_link_valid+0x70>
  }
  return 1;
 800ef2e:	2301      	movs	r3, #1
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3718      	adds	r7, #24
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}
 800ef38:	24005128 	.word	0x24005128

0800ef3c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b088      	sub	sp, #32
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d070      	beq.n	800f02c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f003 0303 	and.w	r3, r3, #3
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d00d      	beq.n	800ef70 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ef54:	4b37      	ldr	r3, [pc, #220]	@ (800f034 <mem_free+0xf8>)
 800ef56:	f240 2273 	movw	r2, #627	@ 0x273
 800ef5a:	4937      	ldr	r1, [pc, #220]	@ (800f038 <mem_free+0xfc>)
 800ef5c:	4837      	ldr	r0, [pc, #220]	@ (800f03c <mem_free+0x100>)
 800ef5e:	f00a fb3d 	bl	80195dc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ef62:	f00a f8b3 	bl	80190cc <sys_arch_protect>
 800ef66:	60f8      	str	r0, [r7, #12]
 800ef68:	68f8      	ldr	r0, [r7, #12]
 800ef6a:	f00a f8bd 	bl	80190e8 <sys_arch_unprotect>
    return;
 800ef6e:	e05e      	b.n	800f02e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	3b08      	subs	r3, #8
 800ef74:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ef76:	4b32      	ldr	r3, [pc, #200]	@ (800f040 <mem_free+0x104>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	69fa      	ldr	r2, [r7, #28]
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d306      	bcc.n	800ef8e <mem_free+0x52>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f103 020c 	add.w	r2, r3, #12
 800ef86:	4b2f      	ldr	r3, [pc, #188]	@ (800f044 <mem_free+0x108>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d90d      	bls.n	800efaa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ef8e:	4b29      	ldr	r3, [pc, #164]	@ (800f034 <mem_free+0xf8>)
 800ef90:	f240 227f 	movw	r2, #639	@ 0x27f
 800ef94:	492c      	ldr	r1, [pc, #176]	@ (800f048 <mem_free+0x10c>)
 800ef96:	4829      	ldr	r0, [pc, #164]	@ (800f03c <mem_free+0x100>)
 800ef98:	f00a fb20 	bl	80195dc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ef9c:	f00a f896 	bl	80190cc <sys_arch_protect>
 800efa0:	6138      	str	r0, [r7, #16]
 800efa2:	6938      	ldr	r0, [r7, #16]
 800efa4:	f00a f8a0 	bl	80190e8 <sys_arch_unprotect>
    return;
 800efa8:	e041      	b.n	800f02e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800efaa:	4828      	ldr	r0, [pc, #160]	@ (800f04c <mem_free+0x110>)
 800efac:	f00a f852 	bl	8019054 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800efb0:	69fb      	ldr	r3, [r7, #28]
 800efb2:	791b      	ldrb	r3, [r3, #4]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d110      	bne.n	800efda <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800efb8:	4b1e      	ldr	r3, [pc, #120]	@ (800f034 <mem_free+0xf8>)
 800efba:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800efbe:	4924      	ldr	r1, [pc, #144]	@ (800f050 <mem_free+0x114>)
 800efc0:	481e      	ldr	r0, [pc, #120]	@ (800f03c <mem_free+0x100>)
 800efc2:	f00a fb0b 	bl	80195dc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800efc6:	4821      	ldr	r0, [pc, #132]	@ (800f04c <mem_free+0x110>)
 800efc8:	f00a f853 	bl	8019072 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800efcc:	f00a f87e 	bl	80190cc <sys_arch_protect>
 800efd0:	6178      	str	r0, [r7, #20]
 800efd2:	6978      	ldr	r0, [r7, #20]
 800efd4:	f00a f888 	bl	80190e8 <sys_arch_unprotect>
    return;
 800efd8:	e029      	b.n	800f02e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800efda:	69f8      	ldr	r0, [r7, #28]
 800efdc:	f7ff ff70 	bl	800eec0 <mem_link_valid>
 800efe0:	4603      	mov	r3, r0
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d110      	bne.n	800f008 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800efe6:	4b13      	ldr	r3, [pc, #76]	@ (800f034 <mem_free+0xf8>)
 800efe8:	f240 2295 	movw	r2, #661	@ 0x295
 800efec:	4919      	ldr	r1, [pc, #100]	@ (800f054 <mem_free+0x118>)
 800efee:	4813      	ldr	r0, [pc, #76]	@ (800f03c <mem_free+0x100>)
 800eff0:	f00a faf4 	bl	80195dc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800eff4:	4815      	ldr	r0, [pc, #84]	@ (800f04c <mem_free+0x110>)
 800eff6:	f00a f83c 	bl	8019072 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800effa:	f00a f867 	bl	80190cc <sys_arch_protect>
 800effe:	61b8      	str	r0, [r7, #24]
 800f000:	69b8      	ldr	r0, [r7, #24]
 800f002:	f00a f871 	bl	80190e8 <sys_arch_unprotect>
    return;
 800f006:	e012      	b.n	800f02e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f008:	69fb      	ldr	r3, [r7, #28]
 800f00a:	2200      	movs	r2, #0
 800f00c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f00e:	4b12      	ldr	r3, [pc, #72]	@ (800f058 <mem_free+0x11c>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	69fa      	ldr	r2, [r7, #28]
 800f014:	429a      	cmp	r2, r3
 800f016:	d202      	bcs.n	800f01e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f018:	4a0f      	ldr	r2, [pc, #60]	@ (800f058 <mem_free+0x11c>)
 800f01a:	69fb      	ldr	r3, [r7, #28]
 800f01c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f01e:	69f8      	ldr	r0, [r7, #28]
 800f020:	f7ff fe5a 	bl	800ecd8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f024:	4809      	ldr	r0, [pc, #36]	@ (800f04c <mem_free+0x110>)
 800f026:	f00a f824 	bl	8019072 <sys_mutex_unlock>
 800f02a:	e000      	b.n	800f02e <mem_free+0xf2>
    return;
 800f02c:	bf00      	nop
}
 800f02e:	3720      	adds	r7, #32
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}
 800f034:	0801bb98 	.word	0x0801bb98
 800f038:	0801bc88 	.word	0x0801bc88
 800f03c:	0801bbe0 	.word	0x0801bbe0
 800f040:	24005124 	.word	0x24005124
 800f044:	24005128 	.word	0x24005128
 800f048:	0801bcac 	.word	0x0801bcac
 800f04c:	2400512c 	.word	0x2400512c
 800f050:	0801bcc8 	.word	0x0801bcc8
 800f054:	0801bcf0 	.word	0x0801bcf0
 800f058:	24005130 	.word	0x24005130

0800f05c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b088      	sub	sp, #32
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	460b      	mov	r3, r1
 800f066:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f068:	887b      	ldrh	r3, [r7, #2]
 800f06a:	3303      	adds	r3, #3
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	f023 0303 	bic.w	r3, r3, #3
 800f072:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f074:	8bfb      	ldrh	r3, [r7, #30]
 800f076:	2b0b      	cmp	r3, #11
 800f078:	d801      	bhi.n	800f07e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f07a:	230c      	movs	r3, #12
 800f07c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f07e:	8bfb      	ldrh	r3, [r7, #30]
 800f080:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f084:	4293      	cmp	r3, r2
 800f086:	d803      	bhi.n	800f090 <mem_trim+0x34>
 800f088:	8bfa      	ldrh	r2, [r7, #30]
 800f08a:	887b      	ldrh	r3, [r7, #2]
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d201      	bcs.n	800f094 <mem_trim+0x38>
    return NULL;
 800f090:	2300      	movs	r3, #0
 800f092:	e0dc      	b.n	800f24e <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f094:	4b70      	ldr	r3, [pc, #448]	@ (800f258 <mem_trim+0x1fc>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	687a      	ldr	r2, [r7, #4]
 800f09a:	429a      	cmp	r2, r3
 800f09c:	d304      	bcc.n	800f0a8 <mem_trim+0x4c>
 800f09e:	4b6f      	ldr	r3, [pc, #444]	@ (800f25c <mem_trim+0x200>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	687a      	ldr	r2, [r7, #4]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d306      	bcc.n	800f0b6 <mem_trim+0x5a>
 800f0a8:	4b6d      	ldr	r3, [pc, #436]	@ (800f260 <mem_trim+0x204>)
 800f0aa:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800f0ae:	496d      	ldr	r1, [pc, #436]	@ (800f264 <mem_trim+0x208>)
 800f0b0:	486d      	ldr	r0, [pc, #436]	@ (800f268 <mem_trim+0x20c>)
 800f0b2:	f00a fa93 	bl	80195dc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f0b6:	4b68      	ldr	r3, [pc, #416]	@ (800f258 <mem_trim+0x1fc>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	687a      	ldr	r2, [r7, #4]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d304      	bcc.n	800f0ca <mem_trim+0x6e>
 800f0c0:	4b66      	ldr	r3, [pc, #408]	@ (800f25c <mem_trim+0x200>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	687a      	ldr	r2, [r7, #4]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d307      	bcc.n	800f0da <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f0ca:	f009 ffff 	bl	80190cc <sys_arch_protect>
 800f0ce:	60b8      	str	r0, [r7, #8]
 800f0d0:	68b8      	ldr	r0, [r7, #8]
 800f0d2:	f00a f809 	bl	80190e8 <sys_arch_unprotect>
    return rmem;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	e0b9      	b.n	800f24e <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	3b08      	subs	r3, #8
 800f0de:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f0e0:	69b8      	ldr	r0, [r7, #24]
 800f0e2:	f7ff fde7 	bl	800ecb4 <mem_to_ptr>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f0ea:	69bb      	ldr	r3, [r7, #24]
 800f0ec:	881a      	ldrh	r2, [r3, #0]
 800f0ee:	8afb      	ldrh	r3, [r7, #22]
 800f0f0:	1ad3      	subs	r3, r2, r3
 800f0f2:	b29b      	uxth	r3, r3
 800f0f4:	3b08      	subs	r3, #8
 800f0f6:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f0f8:	8bfa      	ldrh	r2, [r7, #30]
 800f0fa:	8abb      	ldrh	r3, [r7, #20]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d906      	bls.n	800f10e <mem_trim+0xb2>
 800f100:	4b57      	ldr	r3, [pc, #348]	@ (800f260 <mem_trim+0x204>)
 800f102:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800f106:	4959      	ldr	r1, [pc, #356]	@ (800f26c <mem_trim+0x210>)
 800f108:	4857      	ldr	r0, [pc, #348]	@ (800f268 <mem_trim+0x20c>)
 800f10a:	f00a fa67 	bl	80195dc <iprintf>
  if (newsize > size) {
 800f10e:	8bfa      	ldrh	r2, [r7, #30]
 800f110:	8abb      	ldrh	r3, [r7, #20]
 800f112:	429a      	cmp	r2, r3
 800f114:	d901      	bls.n	800f11a <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800f116:	2300      	movs	r3, #0
 800f118:	e099      	b.n	800f24e <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800f11a:	8bfa      	ldrh	r2, [r7, #30]
 800f11c:	8abb      	ldrh	r3, [r7, #20]
 800f11e:	429a      	cmp	r2, r3
 800f120:	d101      	bne.n	800f126 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	e093      	b.n	800f24e <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f126:	4852      	ldr	r0, [pc, #328]	@ (800f270 <mem_trim+0x214>)
 800f128:	f009 ff94 	bl	8019054 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f12c:	69bb      	ldr	r3, [r7, #24]
 800f12e:	881b      	ldrh	r3, [r3, #0]
 800f130:	4618      	mov	r0, r3
 800f132:	f7ff fdad 	bl	800ec90 <ptr_to_mem>
 800f136:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f138:	693b      	ldr	r3, [r7, #16]
 800f13a:	791b      	ldrb	r3, [r3, #4]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d141      	bne.n	800f1c4 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f140:	69bb      	ldr	r3, [r7, #24]
 800f142:	881b      	ldrh	r3, [r3, #0]
 800f144:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f148:	4293      	cmp	r3, r2
 800f14a:	d106      	bne.n	800f15a <mem_trim+0xfe>
 800f14c:	4b44      	ldr	r3, [pc, #272]	@ (800f260 <mem_trim+0x204>)
 800f14e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800f152:	4948      	ldr	r1, [pc, #288]	@ (800f274 <mem_trim+0x218>)
 800f154:	4844      	ldr	r0, [pc, #272]	@ (800f268 <mem_trim+0x20c>)
 800f156:	f00a fa41 	bl	80195dc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	881b      	ldrh	r3, [r3, #0]
 800f15e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f160:	8afa      	ldrh	r2, [r7, #22]
 800f162:	8bfb      	ldrh	r3, [r7, #30]
 800f164:	4413      	add	r3, r2
 800f166:	b29b      	uxth	r3, r3
 800f168:	3308      	adds	r3, #8
 800f16a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f16c:	4b42      	ldr	r3, [pc, #264]	@ (800f278 <mem_trim+0x21c>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	693a      	ldr	r2, [r7, #16]
 800f172:	429a      	cmp	r2, r3
 800f174:	d106      	bne.n	800f184 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800f176:	89fb      	ldrh	r3, [r7, #14]
 800f178:	4618      	mov	r0, r3
 800f17a:	f7ff fd89 	bl	800ec90 <ptr_to_mem>
 800f17e:	4603      	mov	r3, r0
 800f180:	4a3d      	ldr	r2, [pc, #244]	@ (800f278 <mem_trim+0x21c>)
 800f182:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f184:	89fb      	ldrh	r3, [r7, #14]
 800f186:	4618      	mov	r0, r3
 800f188:	f7ff fd82 	bl	800ec90 <ptr_to_mem>
 800f18c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	2200      	movs	r2, #0
 800f192:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f194:	693b      	ldr	r3, [r7, #16]
 800f196:	89ba      	ldrh	r2, [r7, #12]
 800f198:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f19a:	693b      	ldr	r3, [r7, #16]
 800f19c:	8afa      	ldrh	r2, [r7, #22]
 800f19e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f1a0:	69bb      	ldr	r3, [r7, #24]
 800f1a2:	89fa      	ldrh	r2, [r7, #14]
 800f1a4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	881b      	ldrh	r3, [r3, #0]
 800f1aa:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	d049      	beq.n	800f246 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	881b      	ldrh	r3, [r3, #0]
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7ff fd6a 	bl	800ec90 <ptr_to_mem>
 800f1bc:	4602      	mov	r2, r0
 800f1be:	89fb      	ldrh	r3, [r7, #14]
 800f1c0:	8053      	strh	r3, [r2, #2]
 800f1c2:	e040      	b.n	800f246 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f1c4:	8bfb      	ldrh	r3, [r7, #30]
 800f1c6:	f103 0214 	add.w	r2, r3, #20
 800f1ca:	8abb      	ldrh	r3, [r7, #20]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d83a      	bhi.n	800f246 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f1d0:	8afa      	ldrh	r2, [r7, #22]
 800f1d2:	8bfb      	ldrh	r3, [r7, #30]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	3308      	adds	r3, #8
 800f1da:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f1dc:	69bb      	ldr	r3, [r7, #24]
 800f1de:	881b      	ldrh	r3, [r3, #0]
 800f1e0:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d106      	bne.n	800f1f6 <mem_trim+0x19a>
 800f1e8:	4b1d      	ldr	r3, [pc, #116]	@ (800f260 <mem_trim+0x204>)
 800f1ea:	f240 3216 	movw	r2, #790	@ 0x316
 800f1ee:	4921      	ldr	r1, [pc, #132]	@ (800f274 <mem_trim+0x218>)
 800f1f0:	481d      	ldr	r0, [pc, #116]	@ (800f268 <mem_trim+0x20c>)
 800f1f2:	f00a f9f3 	bl	80195dc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f1f6:	89fb      	ldrh	r3, [r7, #14]
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7ff fd49 	bl	800ec90 <ptr_to_mem>
 800f1fe:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f200:	4b1d      	ldr	r3, [pc, #116]	@ (800f278 <mem_trim+0x21c>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	693a      	ldr	r2, [r7, #16]
 800f206:	429a      	cmp	r2, r3
 800f208:	d202      	bcs.n	800f210 <mem_trim+0x1b4>
      lfree = mem2;
 800f20a:	4a1b      	ldr	r2, [pc, #108]	@ (800f278 <mem_trim+0x21c>)
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	2200      	movs	r2, #0
 800f214:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f216:	69bb      	ldr	r3, [r7, #24]
 800f218:	881a      	ldrh	r2, [r3, #0]
 800f21a:	693b      	ldr	r3, [r7, #16]
 800f21c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	8afa      	ldrh	r2, [r7, #22]
 800f222:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f224:	69bb      	ldr	r3, [r7, #24]
 800f226:	89fa      	ldrh	r2, [r7, #14]
 800f228:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	881b      	ldrh	r3, [r3, #0]
 800f22e:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f232:	4293      	cmp	r3, r2
 800f234:	d007      	beq.n	800f246 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	881b      	ldrh	r3, [r3, #0]
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7ff fd28 	bl	800ec90 <ptr_to_mem>
 800f240:	4602      	mov	r2, r0
 800f242:	89fb      	ldrh	r3, [r7, #14]
 800f244:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f246:	480a      	ldr	r0, [pc, #40]	@ (800f270 <mem_trim+0x214>)
 800f248:	f009 ff13 	bl	8019072 <sys_mutex_unlock>
  return rmem;
 800f24c:	687b      	ldr	r3, [r7, #4]
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3720      	adds	r7, #32
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}
 800f256:	bf00      	nop
 800f258:	24005124 	.word	0x24005124
 800f25c:	24005128 	.word	0x24005128
 800f260:	0801bb98 	.word	0x0801bb98
 800f264:	0801bd24 	.word	0x0801bd24
 800f268:	0801bbe0 	.word	0x0801bbe0
 800f26c:	0801bd3c 	.word	0x0801bd3c
 800f270:	2400512c 	.word	0x2400512c
 800f274:	0801bd5c 	.word	0x0801bd5c
 800f278:	24005130 	.word	0x24005130

0800f27c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b088      	sub	sp, #32
 800f280:	af00      	add	r7, sp, #0
 800f282:	4603      	mov	r3, r0
 800f284:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f286:	88fb      	ldrh	r3, [r7, #6]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d101      	bne.n	800f290 <mem_malloc+0x14>
    return NULL;
 800f28c:	2300      	movs	r3, #0
 800f28e:	e0e6      	b.n	800f45e <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f290:	88fb      	ldrh	r3, [r7, #6]
 800f292:	3303      	adds	r3, #3
 800f294:	b29b      	uxth	r3, r3
 800f296:	f023 0303 	bic.w	r3, r3, #3
 800f29a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f29c:	8bbb      	ldrh	r3, [r7, #28]
 800f29e:	2b0b      	cmp	r3, #11
 800f2a0:	d801      	bhi.n	800f2a6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f2a2:	230c      	movs	r3, #12
 800f2a4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f2a6:	8bbb      	ldrh	r3, [r7, #28]
 800f2a8:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f2ac:	4293      	cmp	r3, r2
 800f2ae:	d803      	bhi.n	800f2b8 <mem_malloc+0x3c>
 800f2b0:	8bba      	ldrh	r2, [r7, #28]
 800f2b2:	88fb      	ldrh	r3, [r7, #6]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d201      	bcs.n	800f2bc <mem_malloc+0x40>
    return NULL;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	e0d0      	b.n	800f45e <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f2bc:	486a      	ldr	r0, [pc, #424]	@ (800f468 <mem_malloc+0x1ec>)
 800f2be:	f009 fec9 	bl	8019054 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f2c2:	4b6a      	ldr	r3, [pc, #424]	@ (800f46c <mem_malloc+0x1f0>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7ff fcf4 	bl	800ecb4 <mem_to_ptr>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	83fb      	strh	r3, [r7, #30]
 800f2d0:	e0b9      	b.n	800f446 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f2d2:	8bfb      	ldrh	r3, [r7, #30]
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7ff fcdb 	bl	800ec90 <ptr_to_mem>
 800f2da:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	791b      	ldrb	r3, [r3, #4]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	f040 80a9 	bne.w	800f438 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	881b      	ldrh	r3, [r3, #0]
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	8bfb      	ldrh	r3, [r7, #30]
 800f2ee:	1ad3      	subs	r3, r2, r3
 800f2f0:	f1a3 0208 	sub.w	r2, r3, #8
 800f2f4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	f0c0 809e 	bcc.w	800f438 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	881b      	ldrh	r3, [r3, #0]
 800f300:	461a      	mov	r2, r3
 800f302:	8bfb      	ldrh	r3, [r7, #30]
 800f304:	1ad3      	subs	r3, r2, r3
 800f306:	f1a3 0208 	sub.w	r2, r3, #8
 800f30a:	8bbb      	ldrh	r3, [r7, #28]
 800f30c:	3314      	adds	r3, #20
 800f30e:	429a      	cmp	r2, r3
 800f310:	d335      	bcc.n	800f37e <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f312:	8bfa      	ldrh	r2, [r7, #30]
 800f314:	8bbb      	ldrh	r3, [r7, #28]
 800f316:	4413      	add	r3, r2
 800f318:	b29b      	uxth	r3, r3
 800f31a:	3308      	adds	r3, #8
 800f31c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f31e:	8a7b      	ldrh	r3, [r7, #18]
 800f320:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f324:	4293      	cmp	r3, r2
 800f326:	d106      	bne.n	800f336 <mem_malloc+0xba>
 800f328:	4b51      	ldr	r3, [pc, #324]	@ (800f470 <mem_malloc+0x1f4>)
 800f32a:	f240 3287 	movw	r2, #903	@ 0x387
 800f32e:	4951      	ldr	r1, [pc, #324]	@ (800f474 <mem_malloc+0x1f8>)
 800f330:	4851      	ldr	r0, [pc, #324]	@ (800f478 <mem_malloc+0x1fc>)
 800f332:	f00a f953 	bl	80195dc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f336:	8a7b      	ldrh	r3, [r7, #18]
 800f338:	4618      	mov	r0, r3
 800f33a:	f7ff fca9 	bl	800ec90 <ptr_to_mem>
 800f33e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2200      	movs	r2, #0
 800f344:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	881a      	ldrh	r2, [r3, #0]
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	8bfa      	ldrh	r2, [r7, #30]
 800f352:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	8a7a      	ldrh	r2, [r7, #18]
 800f358:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	2201      	movs	r2, #1
 800f35e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	881b      	ldrh	r3, [r3, #0]
 800f364:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f368:	4293      	cmp	r3, r2
 800f36a:	d00b      	beq.n	800f384 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	881b      	ldrh	r3, [r3, #0]
 800f370:	4618      	mov	r0, r3
 800f372:	f7ff fc8d 	bl	800ec90 <ptr_to_mem>
 800f376:	4602      	mov	r2, r0
 800f378:	8a7b      	ldrh	r3, [r7, #18]
 800f37a:	8053      	strh	r3, [r2, #2]
 800f37c:	e002      	b.n	800f384 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	2201      	movs	r2, #1
 800f382:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f384:	4b39      	ldr	r3, [pc, #228]	@ (800f46c <mem_malloc+0x1f0>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	697a      	ldr	r2, [r7, #20]
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d127      	bne.n	800f3de <mem_malloc+0x162>
          struct mem *cur = lfree;
 800f38e:	4b37      	ldr	r3, [pc, #220]	@ (800f46c <mem_malloc+0x1f0>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f394:	e005      	b.n	800f3a2 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f396:	69bb      	ldr	r3, [r7, #24]
 800f398:	881b      	ldrh	r3, [r3, #0]
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7ff fc78 	bl	800ec90 <ptr_to_mem>
 800f3a0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f3a2:	69bb      	ldr	r3, [r7, #24]
 800f3a4:	791b      	ldrb	r3, [r3, #4]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d004      	beq.n	800f3b4 <mem_malloc+0x138>
 800f3aa:	4b34      	ldr	r3, [pc, #208]	@ (800f47c <mem_malloc+0x200>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	69ba      	ldr	r2, [r7, #24]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d1f0      	bne.n	800f396 <mem_malloc+0x11a>
          }
          lfree = cur;
 800f3b4:	4a2d      	ldr	r2, [pc, #180]	@ (800f46c <mem_malloc+0x1f0>)
 800f3b6:	69bb      	ldr	r3, [r7, #24]
 800f3b8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f3ba:	4b2c      	ldr	r3, [pc, #176]	@ (800f46c <mem_malloc+0x1f0>)
 800f3bc:	681a      	ldr	r2, [r3, #0]
 800f3be:	4b2f      	ldr	r3, [pc, #188]	@ (800f47c <mem_malloc+0x200>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d00b      	beq.n	800f3de <mem_malloc+0x162>
 800f3c6:	4b29      	ldr	r3, [pc, #164]	@ (800f46c <mem_malloc+0x1f0>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	791b      	ldrb	r3, [r3, #4]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d006      	beq.n	800f3de <mem_malloc+0x162>
 800f3d0:	4b27      	ldr	r3, [pc, #156]	@ (800f470 <mem_malloc+0x1f4>)
 800f3d2:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800f3d6:	492a      	ldr	r1, [pc, #168]	@ (800f480 <mem_malloc+0x204>)
 800f3d8:	4827      	ldr	r0, [pc, #156]	@ (800f478 <mem_malloc+0x1fc>)
 800f3da:	f00a f8ff 	bl	80195dc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f3de:	4822      	ldr	r0, [pc, #136]	@ (800f468 <mem_malloc+0x1ec>)
 800f3e0:	f009 fe47 	bl	8019072 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f3e4:	8bba      	ldrh	r2, [r7, #28]
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	4413      	add	r3, r2
 800f3ea:	3308      	adds	r3, #8
 800f3ec:	4a23      	ldr	r2, [pc, #140]	@ (800f47c <mem_malloc+0x200>)
 800f3ee:	6812      	ldr	r2, [r2, #0]
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	d906      	bls.n	800f402 <mem_malloc+0x186>
 800f3f4:	4b1e      	ldr	r3, [pc, #120]	@ (800f470 <mem_malloc+0x1f4>)
 800f3f6:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800f3fa:	4922      	ldr	r1, [pc, #136]	@ (800f484 <mem_malloc+0x208>)
 800f3fc:	481e      	ldr	r0, [pc, #120]	@ (800f478 <mem_malloc+0x1fc>)
 800f3fe:	f00a f8ed 	bl	80195dc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	f003 0303 	and.w	r3, r3, #3
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d006      	beq.n	800f41a <mem_malloc+0x19e>
 800f40c:	4b18      	ldr	r3, [pc, #96]	@ (800f470 <mem_malloc+0x1f4>)
 800f40e:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800f412:	491d      	ldr	r1, [pc, #116]	@ (800f488 <mem_malloc+0x20c>)
 800f414:	4818      	ldr	r0, [pc, #96]	@ (800f478 <mem_malloc+0x1fc>)
 800f416:	f00a f8e1 	bl	80195dc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	f003 0303 	and.w	r3, r3, #3
 800f420:	2b00      	cmp	r3, #0
 800f422:	d006      	beq.n	800f432 <mem_malloc+0x1b6>
 800f424:	4b12      	ldr	r3, [pc, #72]	@ (800f470 <mem_malloc+0x1f4>)
 800f426:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800f42a:	4918      	ldr	r1, [pc, #96]	@ (800f48c <mem_malloc+0x210>)
 800f42c:	4812      	ldr	r0, [pc, #72]	@ (800f478 <mem_malloc+0x1fc>)
 800f42e:	f00a f8d5 	bl	80195dc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	3308      	adds	r3, #8
 800f436:	e012      	b.n	800f45e <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800f438:	8bfb      	ldrh	r3, [r7, #30]
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7ff fc28 	bl	800ec90 <ptr_to_mem>
 800f440:	4603      	mov	r3, r0
 800f442:	881b      	ldrh	r3, [r3, #0]
 800f444:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f446:	8bfa      	ldrh	r2, [r7, #30]
 800f448:	8bb9      	ldrh	r1, [r7, #28]
 800f44a:	f647 53e8 	movw	r3, #32232	@ 0x7de8
 800f44e:	1a5b      	subs	r3, r3, r1
 800f450:	429a      	cmp	r2, r3
 800f452:	f4ff af3e 	bcc.w	800f2d2 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f456:	4804      	ldr	r0, [pc, #16]	@ (800f468 <mem_malloc+0x1ec>)
 800f458:	f009 fe0b 	bl	8019072 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f45c:	2300      	movs	r3, #0
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3720      	adds	r7, #32
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	2400512c 	.word	0x2400512c
 800f46c:	24005130 	.word	0x24005130
 800f470:	0801bb98 	.word	0x0801bb98
 800f474:	0801bd5c 	.word	0x0801bd5c
 800f478:	0801bbe0 	.word	0x0801bbe0
 800f47c:	24005128 	.word	0x24005128
 800f480:	0801bd70 	.word	0x0801bd70
 800f484:	0801bd8c 	.word	0x0801bd8c
 800f488:	0801bdbc 	.word	0x0801bdbc
 800f48c:	0801bdec 	.word	0x0801bdec

0800f490 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f490:	b480      	push	{r7}
 800f492:	b085      	sub	sp, #20
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	689b      	ldr	r3, [r3, #8]
 800f49c:	2200      	movs	r2, #0
 800f49e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	3303      	adds	r3, #3
 800f4a6:	f023 0303 	bic.w	r3, r3, #3
 800f4aa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	60fb      	str	r3, [r7, #12]
 800f4b0:	e011      	b.n	800f4d6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	689b      	ldr	r3, [r3, #8]
 800f4b6:	681a      	ldr	r2, [r3, #0]
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	689b      	ldr	r3, [r3, #8]
 800f4c0:	68ba      	ldr	r2, [r7, #8]
 800f4c2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	881b      	ldrh	r3, [r3, #0]
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	4413      	add	r3, r2
 800f4ce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	60fb      	str	r3, [r7, #12]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	885b      	ldrh	r3, [r3, #2]
 800f4da:	461a      	mov	r2, r3
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	dbe7      	blt.n	800f4b2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f4e2:	bf00      	nop
 800f4e4:	bf00      	nop
 800f4e6:	3714      	adds	r7, #20
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr

0800f4f0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	80fb      	strh	r3, [r7, #6]
 800f4fa:	e009      	b.n	800f510 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f4fc:	88fb      	ldrh	r3, [r7, #6]
 800f4fe:	4a08      	ldr	r2, [pc, #32]	@ (800f520 <memp_init+0x30>)
 800f500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f504:	4618      	mov	r0, r3
 800f506:	f7ff ffc3 	bl	800f490 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f50a:	88fb      	ldrh	r3, [r7, #6]
 800f50c:	3301      	adds	r3, #1
 800f50e:	80fb      	strh	r3, [r7, #6]
 800f510:	88fb      	ldrh	r3, [r7, #6]
 800f512:	2b0c      	cmp	r3, #12
 800f514:	d9f2      	bls.n	800f4fc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f516:	bf00      	nop
 800f518:	bf00      	nop
 800f51a:	3708      	adds	r7, #8
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}
 800f520:	0801e650 	.word	0x0801e650

0800f524 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f52c:	f009 fdce 	bl	80190cc <sys_arch_protect>
 800f530:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	689b      	ldr	r3, [r3, #8]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d015      	beq.n	800f56c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	689b      	ldr	r3, [r3, #8]
 800f544:	68ba      	ldr	r2, [r7, #8]
 800f546:	6812      	ldr	r2, [r2, #0]
 800f548:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	f003 0303 	and.w	r3, r3, #3
 800f550:	2b00      	cmp	r3, #0
 800f552:	d006      	beq.n	800f562 <do_memp_malloc_pool+0x3e>
 800f554:	4b09      	ldr	r3, [pc, #36]	@ (800f57c <do_memp_malloc_pool+0x58>)
 800f556:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800f55a:	4909      	ldr	r1, [pc, #36]	@ (800f580 <do_memp_malloc_pool+0x5c>)
 800f55c:	4809      	ldr	r0, [pc, #36]	@ (800f584 <do_memp_malloc_pool+0x60>)
 800f55e:	f00a f83d 	bl	80195dc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f562:	68f8      	ldr	r0, [r7, #12]
 800f564:	f009 fdc0 	bl	80190e8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	e003      	b.n	800f574 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f56c:	68f8      	ldr	r0, [r7, #12]
 800f56e:	f009 fdbb 	bl	80190e8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f572:	2300      	movs	r3, #0
}
 800f574:	4618      	mov	r0, r3
 800f576:	3710      	adds	r7, #16
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}
 800f57c:	0801be10 	.word	0x0801be10
 800f580:	0801be40 	.word	0x0801be40
 800f584:	0801be64 	.word	0x0801be64

0800f588 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d106      	bne.n	800f5a4 <memp_malloc_pool+0x1c>
 800f596:	4b0a      	ldr	r3, [pc, #40]	@ (800f5c0 <memp_malloc_pool+0x38>)
 800f598:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800f59c:	4909      	ldr	r1, [pc, #36]	@ (800f5c4 <memp_malloc_pool+0x3c>)
 800f59e:	480a      	ldr	r0, [pc, #40]	@ (800f5c8 <memp_malloc_pool+0x40>)
 800f5a0:	f00a f81c 	bl	80195dc <iprintf>
  if (desc == NULL) {
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d101      	bne.n	800f5ae <memp_malloc_pool+0x26>
    return NULL;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	e003      	b.n	800f5b6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f7ff ffb8 	bl	800f524 <do_memp_malloc_pool>
 800f5b4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3708      	adds	r7, #8
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
 800f5be:	bf00      	nop
 800f5c0:	0801be10 	.word	0x0801be10
 800f5c4:	0801be8c 	.word	0x0801be8c
 800f5c8:	0801be64 	.word	0x0801be64

0800f5cc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b084      	sub	sp, #16
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f5d6:	79fb      	ldrb	r3, [r7, #7]
 800f5d8:	2b0c      	cmp	r3, #12
 800f5da:	d908      	bls.n	800f5ee <memp_malloc+0x22>
 800f5dc:	4b0a      	ldr	r3, [pc, #40]	@ (800f608 <memp_malloc+0x3c>)
 800f5de:	f240 1257 	movw	r2, #343	@ 0x157
 800f5e2:	490a      	ldr	r1, [pc, #40]	@ (800f60c <memp_malloc+0x40>)
 800f5e4:	480a      	ldr	r0, [pc, #40]	@ (800f610 <memp_malloc+0x44>)
 800f5e6:	f009 fff9 	bl	80195dc <iprintf>
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	e008      	b.n	800f600 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f5ee:	79fb      	ldrb	r3, [r7, #7]
 800f5f0:	4a08      	ldr	r2, [pc, #32]	@ (800f614 <memp_malloc+0x48>)
 800f5f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7ff ff94 	bl	800f524 <do_memp_malloc_pool>
 800f5fc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
}
 800f600:	4618      	mov	r0, r3
 800f602:	3710      	adds	r7, #16
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}
 800f608:	0801be10 	.word	0x0801be10
 800f60c:	0801bea0 	.word	0x0801bea0
 800f610:	0801be64 	.word	0x0801be64
 800f614:	0801e650 	.word	0x0801e650

0800f618 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b084      	sub	sp, #16
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
 800f620:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	f003 0303 	and.w	r3, r3, #3
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d006      	beq.n	800f63a <do_memp_free_pool+0x22>
 800f62c:	4b0d      	ldr	r3, [pc, #52]	@ (800f664 <do_memp_free_pool+0x4c>)
 800f62e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800f632:	490d      	ldr	r1, [pc, #52]	@ (800f668 <do_memp_free_pool+0x50>)
 800f634:	480d      	ldr	r0, [pc, #52]	@ (800f66c <do_memp_free_pool+0x54>)
 800f636:	f009 ffd1 	bl	80195dc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f63e:	f009 fd45 	bl	80190cc <sys_arch_protect>
 800f642:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	689b      	ldr	r3, [r3, #8]
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	689b      	ldr	r3, [r3, #8]
 800f652:	68fa      	ldr	r2, [r7, #12]
 800f654:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f656:	68b8      	ldr	r0, [r7, #8]
 800f658:	f009 fd46 	bl	80190e8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f65c:	bf00      	nop
 800f65e:	3710      	adds	r7, #16
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}
 800f664:	0801be10 	.word	0x0801be10
 800f668:	0801bec0 	.word	0x0801bec0
 800f66c:	0801be64 	.word	0x0801be64

0800f670 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b082      	sub	sp, #8
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d106      	bne.n	800f68e <memp_free_pool+0x1e>
 800f680:	4b0a      	ldr	r3, [pc, #40]	@ (800f6ac <memp_free_pool+0x3c>)
 800f682:	f240 1295 	movw	r2, #405	@ 0x195
 800f686:	490a      	ldr	r1, [pc, #40]	@ (800f6b0 <memp_free_pool+0x40>)
 800f688:	480a      	ldr	r0, [pc, #40]	@ (800f6b4 <memp_free_pool+0x44>)
 800f68a:	f009 ffa7 	bl	80195dc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d007      	beq.n	800f6a4 <memp_free_pool+0x34>
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d004      	beq.n	800f6a4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f69a:	6839      	ldr	r1, [r7, #0]
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f7ff ffbb 	bl	800f618 <do_memp_free_pool>
 800f6a2:	e000      	b.n	800f6a6 <memp_free_pool+0x36>
    return;
 800f6a4:	bf00      	nop
}
 800f6a6:	3708      	adds	r7, #8
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	0801be10 	.word	0x0801be10
 800f6b0:	0801be8c 	.word	0x0801be8c
 800f6b4:	0801be64 	.word	0x0801be64

0800f6b8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b082      	sub	sp, #8
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	4603      	mov	r3, r0
 800f6c0:	6039      	str	r1, [r7, #0]
 800f6c2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f6c4:	79fb      	ldrb	r3, [r7, #7]
 800f6c6:	2b0c      	cmp	r3, #12
 800f6c8:	d907      	bls.n	800f6da <memp_free+0x22>
 800f6ca:	4b0c      	ldr	r3, [pc, #48]	@ (800f6fc <memp_free+0x44>)
 800f6cc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800f6d0:	490b      	ldr	r1, [pc, #44]	@ (800f700 <memp_free+0x48>)
 800f6d2:	480c      	ldr	r0, [pc, #48]	@ (800f704 <memp_free+0x4c>)
 800f6d4:	f009 ff82 	bl	80195dc <iprintf>
 800f6d8:	e00c      	b.n	800f6f4 <memp_free+0x3c>

  if (mem == NULL) {
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d008      	beq.n	800f6f2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f6e0:	79fb      	ldrb	r3, [r7, #7]
 800f6e2:	4a09      	ldr	r2, [pc, #36]	@ (800f708 <memp_free+0x50>)
 800f6e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6e8:	6839      	ldr	r1, [r7, #0]
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7ff ff94 	bl	800f618 <do_memp_free_pool>
 800f6f0:	e000      	b.n	800f6f4 <memp_free+0x3c>
    return;
 800f6f2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f6f4:	3708      	adds	r7, #8
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
 800f6fa:	bf00      	nop
 800f6fc:	0801be10 	.word	0x0801be10
 800f700:	0801bee0 	.word	0x0801bee0
 800f704:	0801be64 	.word	0x0801be64
 800f708:	0801e650 	.word	0x0801e650

0800f70c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f70c:	b480      	push	{r7}
 800f70e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f710:	bf00      	nop
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr
	...

0800f71c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b086      	sub	sp, #24
 800f720:	af00      	add	r7, sp, #0
 800f722:	60f8      	str	r0, [r7, #12]
 800f724:	60b9      	str	r1, [r7, #8]
 800f726:	607a      	str	r2, [r7, #4]
 800f728:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d108      	bne.n	800f742 <netif_add+0x26>
 800f730:	4b57      	ldr	r3, [pc, #348]	@ (800f890 <netif_add+0x174>)
 800f732:	f240 1227 	movw	r2, #295	@ 0x127
 800f736:	4957      	ldr	r1, [pc, #348]	@ (800f894 <netif_add+0x178>)
 800f738:	4857      	ldr	r0, [pc, #348]	@ (800f898 <netif_add+0x17c>)
 800f73a:	f009 ff4f 	bl	80195dc <iprintf>
 800f73e:	2300      	movs	r3, #0
 800f740:	e0a2      	b.n	800f888 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f744:	2b00      	cmp	r3, #0
 800f746:	d108      	bne.n	800f75a <netif_add+0x3e>
 800f748:	4b51      	ldr	r3, [pc, #324]	@ (800f890 <netif_add+0x174>)
 800f74a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800f74e:	4953      	ldr	r1, [pc, #332]	@ (800f89c <netif_add+0x180>)
 800f750:	4851      	ldr	r0, [pc, #324]	@ (800f898 <netif_add+0x17c>)
 800f752:	f009 ff43 	bl	80195dc <iprintf>
 800f756:	2300      	movs	r3, #0
 800f758:	e096      	b.n	800f888 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d101      	bne.n	800f764 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f760:	4b4f      	ldr	r3, [pc, #316]	@ (800f8a0 <netif_add+0x184>)
 800f762:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d101      	bne.n	800f76e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f76a:	4b4d      	ldr	r3, [pc, #308]	@ (800f8a0 <netif_add+0x184>)
 800f76c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d101      	bne.n	800f778 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f774:	4b4a      	ldr	r3, [pc, #296]	@ (800f8a0 <netif_add+0x184>)
 800f776:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2200      	movs	r2, #0
 800f77c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	2200      	movs	r2, #0
 800f782:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	2200      	movs	r2, #0
 800f788:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	4a45      	ldr	r2, [pc, #276]	@ (800f8a4 <netif_add+0x188>)
 800f78e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	2200      	movs	r2, #0
 800f794:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	2200      	movs	r2, #0
 800f79a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	6a3a      	ldr	r2, [r7, #32]
 800f7a8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f7aa:	4b3f      	ldr	r3, [pc, #252]	@ (800f8a8 <netif_add+0x18c>)
 800f7ac:	781a      	ldrb	r2, [r3, #0]
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f7b8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	68b9      	ldr	r1, [r7, #8]
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f000 f913 	bl	800f9ec <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7c8:	68f8      	ldr	r0, [r7, #12]
 800f7ca:	4798      	blx	r3
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d001      	beq.n	800f7d6 <netif_add+0xba>
    return NULL;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	e058      	b.n	800f888 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f7dc:	2bff      	cmp	r3, #255	@ 0xff
 800f7de:	d103      	bne.n	800f7e8 <netif_add+0xcc>
        netif->num = 0;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f7ec:	4b2f      	ldr	r3, [pc, #188]	@ (800f8ac <netif_add+0x190>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	617b      	str	r3, [r7, #20]
 800f7f2:	e02b      	b.n	800f84c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f7f4:	697a      	ldr	r2, [r7, #20]
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d106      	bne.n	800f80a <netif_add+0xee>
 800f7fc:	4b24      	ldr	r3, [pc, #144]	@ (800f890 <netif_add+0x174>)
 800f7fe:	f240 128b 	movw	r2, #395	@ 0x18b
 800f802:	492b      	ldr	r1, [pc, #172]	@ (800f8b0 <netif_add+0x194>)
 800f804:	4824      	ldr	r0, [pc, #144]	@ (800f898 <netif_add+0x17c>)
 800f806:	f009 fee9 	bl	80195dc <iprintf>
        num_netifs++;
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	3301      	adds	r3, #1
 800f80e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f810:	693b      	ldr	r3, [r7, #16]
 800f812:	2bff      	cmp	r3, #255	@ 0xff
 800f814:	dd06      	ble.n	800f824 <netif_add+0x108>
 800f816:	4b1e      	ldr	r3, [pc, #120]	@ (800f890 <netif_add+0x174>)
 800f818:	f240 128d 	movw	r2, #397	@ 0x18d
 800f81c:	4925      	ldr	r1, [pc, #148]	@ (800f8b4 <netif_add+0x198>)
 800f81e:	481e      	ldr	r0, [pc, #120]	@ (800f898 <netif_add+0x17c>)
 800f820:	f009 fedc 	bl	80195dc <iprintf>
        if (netif2->num == netif->num) {
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f830:	429a      	cmp	r2, r3
 800f832:	d108      	bne.n	800f846 <netif_add+0x12a>
          netif->num++;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f83a:	3301      	adds	r3, #1
 800f83c:	b2da      	uxtb	r2, r3
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800f844:	e005      	b.n	800f852 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	617b      	str	r3, [r7, #20]
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d1d0      	bne.n	800f7f4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d1be      	bne.n	800f7d6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f85e:	2bfe      	cmp	r3, #254	@ 0xfe
 800f860:	d103      	bne.n	800f86a <netif_add+0x14e>
    netif_num = 0;
 800f862:	4b11      	ldr	r3, [pc, #68]	@ (800f8a8 <netif_add+0x18c>)
 800f864:	2200      	movs	r2, #0
 800f866:	701a      	strb	r2, [r3, #0]
 800f868:	e006      	b.n	800f878 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f870:	3301      	adds	r3, #1
 800f872:	b2da      	uxtb	r2, r3
 800f874:	4b0c      	ldr	r3, [pc, #48]	@ (800f8a8 <netif_add+0x18c>)
 800f876:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f878:	4b0c      	ldr	r3, [pc, #48]	@ (800f8ac <netif_add+0x190>)
 800f87a:	681a      	ldr	r2, [r3, #0]
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f880:	4a0a      	ldr	r2, [pc, #40]	@ (800f8ac <netif_add+0x190>)
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f886:	68fb      	ldr	r3, [r7, #12]
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3718      	adds	r7, #24
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}
 800f890:	0801befc 	.word	0x0801befc
 800f894:	0801bf90 	.word	0x0801bf90
 800f898:	0801bf4c 	.word	0x0801bf4c
 800f89c:	0801bfac 	.word	0x0801bfac
 800f8a0:	0801e6c4 	.word	0x0801e6c4
 800f8a4:	0800fcc7 	.word	0x0800fcc7
 800f8a8:	24008208 	.word	0x24008208
 800f8ac:	24008200 	.word	0x24008200
 800f8b0:	0801bfd0 	.word	0x0801bfd0
 800f8b4:	0801bfe4 	.word	0x0801bfe4

0800f8b8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f8c2:	6839      	ldr	r1, [r7, #0]
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f002 fbf3 	bl	80120b0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f8ca:	6839      	ldr	r1, [r7, #0]
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f007 f80d 	bl	80168ec <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f8d2:	bf00      	nop
 800f8d4:	3708      	adds	r7, #8
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
	...

0800f8dc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b086      	sub	sp, #24
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	60f8      	str	r0, [r7, #12]
 800f8e4:	60b9      	str	r1, [r7, #8]
 800f8e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d106      	bne.n	800f8fc <netif_do_set_ipaddr+0x20>
 800f8ee:	4b1d      	ldr	r3, [pc, #116]	@ (800f964 <netif_do_set_ipaddr+0x88>)
 800f8f0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800f8f4:	491c      	ldr	r1, [pc, #112]	@ (800f968 <netif_do_set_ipaddr+0x8c>)
 800f8f6:	481d      	ldr	r0, [pc, #116]	@ (800f96c <netif_do_set_ipaddr+0x90>)
 800f8f8:	f009 fe70 	bl	80195dc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d106      	bne.n	800f910 <netif_do_set_ipaddr+0x34>
 800f902:	4b18      	ldr	r3, [pc, #96]	@ (800f964 <netif_do_set_ipaddr+0x88>)
 800f904:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800f908:	4917      	ldr	r1, [pc, #92]	@ (800f968 <netif_do_set_ipaddr+0x8c>)
 800f90a:	4818      	ldr	r0, [pc, #96]	@ (800f96c <netif_do_set_ipaddr+0x90>)
 800f90c:	f009 fe66 	bl	80195dc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	681a      	ldr	r2, [r3, #0]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	3304      	adds	r3, #4
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d01c      	beq.n	800f958 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	3304      	adds	r3, #4
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f92e:	f107 0314 	add.w	r3, r7, #20
 800f932:	4619      	mov	r1, r3
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7ff ffbf 	bl	800f8b8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d002      	beq.n	800f946 <netif_do_set_ipaddr+0x6a>
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	e000      	b.n	800f948 <netif_do_set_ipaddr+0x6c>
 800f946:	2300      	movs	r3, #0
 800f948:	68fa      	ldr	r2, [r7, #12]
 800f94a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f94c:	2101      	movs	r1, #1
 800f94e:	68f8      	ldr	r0, [r7, #12]
 800f950:	f000 f8d2 	bl	800faf8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f954:	2301      	movs	r3, #1
 800f956:	e000      	b.n	800f95a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f958:	2300      	movs	r3, #0
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3718      	adds	r7, #24
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
 800f962:	bf00      	nop
 800f964:	0801befc 	.word	0x0801befc
 800f968:	0801c014 	.word	0x0801c014
 800f96c:	0801bf4c 	.word	0x0801bf4c

0800f970 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f970:	b480      	push	{r7}
 800f972:	b085      	sub	sp, #20
 800f974:	af00      	add	r7, sp, #0
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	60b9      	str	r1, [r7, #8]
 800f97a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	681a      	ldr	r2, [r3, #0]
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	3308      	adds	r3, #8
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	429a      	cmp	r2, r3
 800f988:	d00a      	beq.n	800f9a0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d002      	beq.n	800f996 <netif_do_set_netmask+0x26>
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	e000      	b.n	800f998 <netif_do_set_netmask+0x28>
 800f996:	2300      	movs	r3, #0
 800f998:	68fa      	ldr	r2, [r7, #12]
 800f99a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f99c:	2301      	movs	r3, #1
 800f99e:	e000      	b.n	800f9a2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f9a0:	2300      	movs	r3, #0
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3714      	adds	r7, #20
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr

0800f9ae <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f9ae:	b480      	push	{r7}
 800f9b0:	b085      	sub	sp, #20
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	60f8      	str	r0, [r7, #12]
 800f9b6:	60b9      	str	r1, [r7, #8]
 800f9b8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	681a      	ldr	r2, [r3, #0]
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	330c      	adds	r3, #12
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d00a      	beq.n	800f9de <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d002      	beq.n	800f9d4 <netif_do_set_gw+0x26>
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	e000      	b.n	800f9d6 <netif_do_set_gw+0x28>
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	68fa      	ldr	r2, [r7, #12]
 800f9d8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f9da:	2301      	movs	r3, #1
 800f9dc:	e000      	b.n	800f9e0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f9de:	2300      	movs	r3, #0
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3714      	adds	r7, #20
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr

0800f9ec <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b088      	sub	sp, #32
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	60f8      	str	r0, [r7, #12]
 800f9f4:	60b9      	str	r1, [r7, #8]
 800f9f6:	607a      	str	r2, [r7, #4]
 800f9f8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d101      	bne.n	800fa0c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800fa08:	4b1c      	ldr	r3, [pc, #112]	@ (800fa7c <netif_set_addr+0x90>)
 800fa0a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d101      	bne.n	800fa16 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800fa12:	4b1a      	ldr	r3, [pc, #104]	@ (800fa7c <netif_set_addr+0x90>)
 800fa14:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d101      	bne.n	800fa20 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800fa1c:	4b17      	ldr	r3, [pc, #92]	@ (800fa7c <netif_set_addr+0x90>)
 800fa1e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d003      	beq.n	800fa2e <netif_set_addr+0x42>
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d101      	bne.n	800fa32 <netif_set_addr+0x46>
 800fa2e:	2301      	movs	r3, #1
 800fa30:	e000      	b.n	800fa34 <netif_set_addr+0x48>
 800fa32:	2300      	movs	r3, #0
 800fa34:	617b      	str	r3, [r7, #20]
  if (remove) {
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d006      	beq.n	800fa4a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fa3c:	f107 0310 	add.w	r3, r7, #16
 800fa40:	461a      	mov	r2, r3
 800fa42:	68b9      	ldr	r1, [r7, #8]
 800fa44:	68f8      	ldr	r0, [r7, #12]
 800fa46:	f7ff ff49 	bl	800f8dc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fa4a:	69fa      	ldr	r2, [r7, #28]
 800fa4c:	6879      	ldr	r1, [r7, #4]
 800fa4e:	68f8      	ldr	r0, [r7, #12]
 800fa50:	f7ff ff8e 	bl	800f970 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fa54:	69ba      	ldr	r2, [r7, #24]
 800fa56:	6839      	ldr	r1, [r7, #0]
 800fa58:	68f8      	ldr	r0, [r7, #12]
 800fa5a:	f7ff ffa8 	bl	800f9ae <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d106      	bne.n	800fa72 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fa64:	f107 0310 	add.w	r3, r7, #16
 800fa68:	461a      	mov	r2, r3
 800fa6a:	68b9      	ldr	r1, [r7, #8]
 800fa6c:	68f8      	ldr	r0, [r7, #12]
 800fa6e:	f7ff ff35 	bl	800f8dc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fa72:	bf00      	nop
 800fa74:	3720      	adds	r7, #32
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	0801e6c4 	.word	0x0801e6c4

0800fa80 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fa88:	4a04      	ldr	r2, [pc, #16]	@ (800fa9c <netif_set_default+0x1c>)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fa8e:	bf00      	nop
 800fa90:	370c      	adds	r7, #12
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr
 800fa9a:	bf00      	nop
 800fa9c:	24008204 	.word	0x24008204

0800faa0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d107      	bne.n	800fabe <netif_set_up+0x1e>
 800faae:	4b0f      	ldr	r3, [pc, #60]	@ (800faec <netif_set_up+0x4c>)
 800fab0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800fab4:	490e      	ldr	r1, [pc, #56]	@ (800faf0 <netif_set_up+0x50>)
 800fab6:	480f      	ldr	r0, [pc, #60]	@ (800faf4 <netif_set_up+0x54>)
 800fab8:	f009 fd90 	bl	80195dc <iprintf>
 800fabc:	e013      	b.n	800fae6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fac4:	f003 0301 	and.w	r3, r3, #1
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d10c      	bne.n	800fae6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fad2:	f043 0301 	orr.w	r3, r3, #1
 800fad6:	b2da      	uxtb	r2, r3
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fade:	2103      	movs	r1, #3
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f000 f809 	bl	800faf8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}
 800faec:	0801befc 	.word	0x0801befc
 800faf0:	0801c084 	.word	0x0801c084
 800faf4:	0801bf4c 	.word	0x0801bf4c

0800faf8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	460b      	mov	r3, r1
 800fb02:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d106      	bne.n	800fb18 <netif_issue_reports+0x20>
 800fb0a:	4b18      	ldr	r3, [pc, #96]	@ (800fb6c <netif_issue_reports+0x74>)
 800fb0c:	f240 326d 	movw	r2, #877	@ 0x36d
 800fb10:	4917      	ldr	r1, [pc, #92]	@ (800fb70 <netif_issue_reports+0x78>)
 800fb12:	4818      	ldr	r0, [pc, #96]	@ (800fb74 <netif_issue_reports+0x7c>)
 800fb14:	f009 fd62 	bl	80195dc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fb1e:	f003 0304 	and.w	r3, r3, #4
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d01e      	beq.n	800fb64 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fb2c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d017      	beq.n	800fb64 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fb34:	78fb      	ldrb	r3, [r7, #3]
 800fb36:	f003 0301 	and.w	r3, r3, #1
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d013      	beq.n	800fb66 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	3304      	adds	r3, #4
 800fb42:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d00e      	beq.n	800fb66 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fb4e:	f003 0308 	and.w	r3, r3, #8
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d007      	beq.n	800fb66 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	3304      	adds	r3, #4
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f007 fe2f 	bl	80177c0 <etharp_request>
 800fb62:	e000      	b.n	800fb66 <netif_issue_reports+0x6e>
    return;
 800fb64:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fb66:	3708      	adds	r7, #8
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}
 800fb6c:	0801befc 	.word	0x0801befc
 800fb70:	0801c0a0 	.word	0x0801c0a0
 800fb74:	0801bf4c 	.word	0x0801bf4c

0800fb78 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d107      	bne.n	800fb96 <netif_set_down+0x1e>
 800fb86:	4b12      	ldr	r3, [pc, #72]	@ (800fbd0 <netif_set_down+0x58>)
 800fb88:	f240 329b 	movw	r2, #923	@ 0x39b
 800fb8c:	4911      	ldr	r1, [pc, #68]	@ (800fbd4 <netif_set_down+0x5c>)
 800fb8e:	4812      	ldr	r0, [pc, #72]	@ (800fbd8 <netif_set_down+0x60>)
 800fb90:	f009 fd24 	bl	80195dc <iprintf>
 800fb94:	e019      	b.n	800fbca <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fb9c:	f003 0301 	and.w	r3, r3, #1
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d012      	beq.n	800fbca <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fbaa:	f023 0301 	bic.w	r3, r3, #1
 800fbae:	b2da      	uxtb	r2, r3
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fbbc:	f003 0308 	and.w	r3, r3, #8
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d002      	beq.n	800fbca <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f007 f9b9 	bl	8016f3c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800fbca:	3708      	adds	r7, #8
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}
 800fbd0:	0801befc 	.word	0x0801befc
 800fbd4:	0801c0c4 	.word	0x0801c0c4
 800fbd8:	0801bf4c 	.word	0x0801bf4c

0800fbdc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d107      	bne.n	800fbfa <netif_set_link_up+0x1e>
 800fbea:	4b13      	ldr	r3, [pc, #76]	@ (800fc38 <netif_set_link_up+0x5c>)
 800fbec:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800fbf0:	4912      	ldr	r1, [pc, #72]	@ (800fc3c <netif_set_link_up+0x60>)
 800fbf2:	4813      	ldr	r0, [pc, #76]	@ (800fc40 <netif_set_link_up+0x64>)
 800fbf4:	f009 fcf2 	bl	80195dc <iprintf>
 800fbf8:	e01b      	b.n	800fc32 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fc00:	f003 0304 	and.w	r3, r3, #4
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d114      	bne.n	800fc32 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fc0e:	f043 0304 	orr.w	r3, r3, #4
 800fc12:	b2da      	uxtb	r2, r3
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fc1a:	2103      	movs	r1, #3
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f7ff ff6b 	bl	800faf8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	69db      	ldr	r3, [r3, #28]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d003      	beq.n	800fc32 <netif_set_link_up+0x56>
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	69db      	ldr	r3, [r3, #28]
 800fc2e:	6878      	ldr	r0, [r7, #4]
 800fc30:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fc32:	3708      	adds	r7, #8
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}
 800fc38:	0801befc 	.word	0x0801befc
 800fc3c:	0801c0e4 	.word	0x0801c0e4
 800fc40:	0801bf4c 	.word	0x0801bf4c

0800fc44 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d107      	bne.n	800fc62 <netif_set_link_down+0x1e>
 800fc52:	4b11      	ldr	r3, [pc, #68]	@ (800fc98 <netif_set_link_down+0x54>)
 800fc54:	f240 4206 	movw	r2, #1030	@ 0x406
 800fc58:	4910      	ldr	r1, [pc, #64]	@ (800fc9c <netif_set_link_down+0x58>)
 800fc5a:	4811      	ldr	r0, [pc, #68]	@ (800fca0 <netif_set_link_down+0x5c>)
 800fc5c:	f009 fcbe 	bl	80195dc <iprintf>
 800fc60:	e017      	b.n	800fc92 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fc68:	f003 0304 	and.w	r3, r3, #4
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d010      	beq.n	800fc92 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fc76:	f023 0304 	bic.w	r3, r3, #4
 800fc7a:	b2da      	uxtb	r2, r3
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	69db      	ldr	r3, [r3, #28]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d003      	beq.n	800fc92 <netif_set_link_down+0x4e>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	69db      	ldr	r3, [r3, #28]
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}
 800fc98:	0801befc 	.word	0x0801befc
 800fc9c:	0801c108 	.word	0x0801c108
 800fca0:	0801bf4c 	.word	0x0801bf4c

0800fca4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800fca4:	b480      	push	{r7}
 800fca6:	b083      	sub	sp, #12
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d002      	beq.n	800fcba <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	683a      	ldr	r2, [r7, #0]
 800fcb8:	61da      	str	r2, [r3, #28]
  }
}
 800fcba:	bf00      	nop
 800fcbc:	370c      	adds	r7, #12
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc4:	4770      	bx	lr

0800fcc6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800fcc6:	b480      	push	{r7}
 800fcc8:	b085      	sub	sp, #20
 800fcca:	af00      	add	r7, sp, #0
 800fccc:	60f8      	str	r0, [r7, #12]
 800fcce:	60b9      	str	r1, [r7, #8]
 800fcd0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800fcd2:	f06f 030b 	mvn.w	r3, #11
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3714      	adds	r7, #20
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce0:	4770      	bx	lr
	...

0800fce4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800fce4:	b480      	push	{r7}
 800fce6:	b085      	sub	sp, #20
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	4603      	mov	r3, r0
 800fcec:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800fcee:	79fb      	ldrb	r3, [r7, #7]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d013      	beq.n	800fd1c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800fcf4:	4b0d      	ldr	r3, [pc, #52]	@ (800fd2c <netif_get_by_index+0x48>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	60fb      	str	r3, [r7, #12]
 800fcfa:	e00c      	b.n	800fd16 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fd02:	3301      	adds	r3, #1
 800fd04:	b2db      	uxtb	r3, r3
 800fd06:	79fa      	ldrb	r2, [r7, #7]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d101      	bne.n	800fd10 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	e006      	b.n	800fd1e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	60fb      	str	r3, [r7, #12]
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d1ef      	bne.n	800fcfc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800fd1c:	2300      	movs	r3, #0
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3714      	adds	r7, #20
 800fd22:	46bd      	mov	sp, r7
 800fd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd28:	4770      	bx	lr
 800fd2a:	bf00      	nop
 800fd2c:	24008200 	.word	0x24008200

0800fd30 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800fd36:	f009 f9c9 	bl	80190cc <sys_arch_protect>
 800fd3a:	6038      	str	r0, [r7, #0]
 800fd3c:	4b0d      	ldr	r3, [pc, #52]	@ (800fd74 <pbuf_free_ooseq+0x44>)
 800fd3e:	2200      	movs	r2, #0
 800fd40:	701a      	strb	r2, [r3, #0]
 800fd42:	6838      	ldr	r0, [r7, #0]
 800fd44:	f009 f9d0 	bl	80190e8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fd48:	4b0b      	ldr	r3, [pc, #44]	@ (800fd78 <pbuf_free_ooseq+0x48>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	607b      	str	r3, [r7, #4]
 800fd4e:	e00a      	b.n	800fd66 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d003      	beq.n	800fd60 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f002 f9e7 	bl	801212c <tcp_free_ooseq>
      return;
 800fd5e:	e005      	b.n	800fd6c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	68db      	ldr	r3, [r3, #12]
 800fd64:	607b      	str	r3, [r7, #4]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d1f1      	bne.n	800fd50 <pbuf_free_ooseq+0x20>
    }
  }
}
 800fd6c:	3708      	adds	r7, #8
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	24008209 	.word	0x24008209
 800fd78:	24008218 	.word	0x24008218

0800fd7c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b082      	sub	sp, #8
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800fd84:	f7ff ffd4 	bl	800fd30 <pbuf_free_ooseq>
}
 800fd88:	bf00      	nop
 800fd8a:	3708      	adds	r7, #8
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}

0800fd90 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b082      	sub	sp, #8
 800fd94:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800fd96:	f009 f999 	bl	80190cc <sys_arch_protect>
 800fd9a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800fd9c:	4b0f      	ldr	r3, [pc, #60]	@ (800fddc <pbuf_pool_is_empty+0x4c>)
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800fda2:	4b0e      	ldr	r3, [pc, #56]	@ (800fddc <pbuf_pool_is_empty+0x4c>)
 800fda4:	2201      	movs	r2, #1
 800fda6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f009 f99d 	bl	80190e8 <sys_arch_unprotect>

  if (!queued) {
 800fdae:	78fb      	ldrb	r3, [r7, #3]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d10f      	bne.n	800fdd4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800fdb4:	2100      	movs	r1, #0
 800fdb6:	480a      	ldr	r0, [pc, #40]	@ (800fde0 <pbuf_pool_is_empty+0x50>)
 800fdb8:	f7fe fbb6 	bl	800e528 <tcpip_try_callback>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d008      	beq.n	800fdd4 <pbuf_pool_is_empty+0x44>
 800fdc2:	f009 f983 	bl	80190cc <sys_arch_protect>
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	4b04      	ldr	r3, [pc, #16]	@ (800fddc <pbuf_pool_is_empty+0x4c>)
 800fdca:	2200      	movs	r2, #0
 800fdcc:	701a      	strb	r2, [r3, #0]
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f009 f98a 	bl	80190e8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fdd4:	bf00      	nop
 800fdd6:	3708      	adds	r7, #8
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}
 800fddc:	24008209 	.word	0x24008209
 800fde0:	0800fd7d 	.word	0x0800fd7d

0800fde4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800fde4:	b480      	push	{r7}
 800fde6:	b085      	sub	sp, #20
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	60f8      	str	r0, [r7, #12]
 800fdec:	60b9      	str	r1, [r7, #8]
 800fdee:	4611      	mov	r1, r2
 800fdf0:	461a      	mov	r2, r3
 800fdf2:	460b      	mov	r3, r1
 800fdf4:	80fb      	strh	r3, [r7, #6]
 800fdf6:	4613      	mov	r3, r2
 800fdf8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	68ba      	ldr	r2, [r7, #8]
 800fe04:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	88fa      	ldrh	r2, [r7, #6]
 800fe0a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	88ba      	ldrh	r2, [r7, #4]
 800fe10:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800fe12:	8b3b      	ldrh	r3, [r7, #24]
 800fe14:	b2da      	uxtb	r2, r3
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	7f3a      	ldrb	r2, [r7, #28]
 800fe1e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	2201      	movs	r2, #1
 800fe24:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	73da      	strb	r2, [r3, #15]
}
 800fe2c:	bf00      	nop
 800fe2e:	3714      	adds	r7, #20
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr

0800fe38 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b08c      	sub	sp, #48	@ 0x30
 800fe3c:	af02      	add	r7, sp, #8
 800fe3e:	4603      	mov	r3, r0
 800fe40:	71fb      	strb	r3, [r7, #7]
 800fe42:	460b      	mov	r3, r1
 800fe44:	80bb      	strh	r3, [r7, #4]
 800fe46:	4613      	mov	r3, r2
 800fe48:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800fe4a:	79fb      	ldrb	r3, [r7, #7]
 800fe4c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800fe4e:	887b      	ldrh	r3, [r7, #2]
 800fe50:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800fe54:	d07f      	beq.n	800ff56 <pbuf_alloc+0x11e>
 800fe56:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800fe5a:	f300 80c8 	bgt.w	800ffee <pbuf_alloc+0x1b6>
 800fe5e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800fe62:	d010      	beq.n	800fe86 <pbuf_alloc+0x4e>
 800fe64:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800fe68:	f300 80c1 	bgt.w	800ffee <pbuf_alloc+0x1b6>
 800fe6c:	2b01      	cmp	r3, #1
 800fe6e:	d002      	beq.n	800fe76 <pbuf_alloc+0x3e>
 800fe70:	2b41      	cmp	r3, #65	@ 0x41
 800fe72:	f040 80bc 	bne.w	800ffee <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800fe76:	887a      	ldrh	r2, [r7, #2]
 800fe78:	88bb      	ldrh	r3, [r7, #4]
 800fe7a:	4619      	mov	r1, r3
 800fe7c:	2000      	movs	r0, #0
 800fe7e:	f000 f8d1 	bl	8010024 <pbuf_alloc_reference>
 800fe82:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800fe84:	e0bd      	b.n	8010002 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800fe86:	2300      	movs	r3, #0
 800fe88:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800fe8e:	88bb      	ldrh	r3, [r7, #4]
 800fe90:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fe92:	200c      	movs	r0, #12
 800fe94:	f7ff fb9a 	bl	800f5cc <memp_malloc>
 800fe98:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d109      	bne.n	800feb4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800fea0:	f7ff ff76 	bl	800fd90 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800fea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d002      	beq.n	800feb0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800feaa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800feac:	f000 faa8 	bl	8010400 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800feb0:	2300      	movs	r3, #0
 800feb2:	e0a7      	b.n	8010004 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800feb4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800feb6:	3303      	adds	r3, #3
 800feb8:	b29b      	uxth	r3, r3
 800feba:	f023 0303 	bic.w	r3, r3, #3
 800febe:	b29b      	uxth	r3, r3
 800fec0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	8b7a      	ldrh	r2, [r7, #26]
 800fec8:	4293      	cmp	r3, r2
 800feca:	bf28      	it	cs
 800fecc:	4613      	movcs	r3, r2
 800fece:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800fed0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fed2:	3310      	adds	r3, #16
 800fed4:	693a      	ldr	r2, [r7, #16]
 800fed6:	4413      	add	r3, r2
 800fed8:	3303      	adds	r3, #3
 800feda:	f023 0303 	bic.w	r3, r3, #3
 800fede:	4618      	mov	r0, r3
 800fee0:	89f9      	ldrh	r1, [r7, #14]
 800fee2:	8b7a      	ldrh	r2, [r7, #26]
 800fee4:	2300      	movs	r3, #0
 800fee6:	9301      	str	r3, [sp, #4]
 800fee8:	887b      	ldrh	r3, [r7, #2]
 800feea:	9300      	str	r3, [sp, #0]
 800feec:	460b      	mov	r3, r1
 800feee:	4601      	mov	r1, r0
 800fef0:	6938      	ldr	r0, [r7, #16]
 800fef2:	f7ff ff77 	bl	800fde4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	f003 0303 	and.w	r3, r3, #3
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d006      	beq.n	800ff10 <pbuf_alloc+0xd8>
 800ff02:	4b42      	ldr	r3, [pc, #264]	@ (801000c <pbuf_alloc+0x1d4>)
 800ff04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ff08:	4941      	ldr	r1, [pc, #260]	@ (8010010 <pbuf_alloc+0x1d8>)
 800ff0a:	4842      	ldr	r0, [pc, #264]	@ (8010014 <pbuf_alloc+0x1dc>)
 800ff0c:	f009 fb66 	bl	80195dc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ff10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ff12:	3303      	adds	r3, #3
 800ff14:	f023 0303 	bic.w	r3, r3, #3
 800ff18:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800ff1c:	d106      	bne.n	800ff2c <pbuf_alloc+0xf4>
 800ff1e:	4b3b      	ldr	r3, [pc, #236]	@ (801000c <pbuf_alloc+0x1d4>)
 800ff20:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800ff24:	493c      	ldr	r1, [pc, #240]	@ (8010018 <pbuf_alloc+0x1e0>)
 800ff26:	483b      	ldr	r0, [pc, #236]	@ (8010014 <pbuf_alloc+0x1dc>)
 800ff28:	f009 fb58 	bl	80195dc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ff2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d102      	bne.n	800ff38 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff36:	e002      	b.n	800ff3e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ff38:	69fb      	ldr	r3, [r7, #28]
 800ff3a:	693a      	ldr	r2, [r7, #16]
 800ff3c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ff3e:	693b      	ldr	r3, [r7, #16]
 800ff40:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ff42:	8b7a      	ldrh	r2, [r7, #26]
 800ff44:	89fb      	ldrh	r3, [r7, #14]
 800ff46:	1ad3      	subs	r3, r2, r3
 800ff48:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800ff4e:	8b7b      	ldrh	r3, [r7, #26]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d19e      	bne.n	800fe92 <pbuf_alloc+0x5a>
      break;
 800ff54:	e055      	b.n	8010002 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ff56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ff58:	3303      	adds	r3, #3
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	f023 0303 	bic.w	r3, r3, #3
 800ff60:	b29a      	uxth	r2, r3
 800ff62:	88bb      	ldrh	r3, [r7, #4]
 800ff64:	3303      	adds	r3, #3
 800ff66:	b29b      	uxth	r3, r3
 800ff68:	f023 0303 	bic.w	r3, r3, #3
 800ff6c:	b29b      	uxth	r3, r3
 800ff6e:	4413      	add	r3, r2
 800ff70:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ff72:	8b3b      	ldrh	r3, [r7, #24]
 800ff74:	3310      	adds	r3, #16
 800ff76:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ff78:	8b3a      	ldrh	r2, [r7, #24]
 800ff7a:	88bb      	ldrh	r3, [r7, #4]
 800ff7c:	3303      	adds	r3, #3
 800ff7e:	f023 0303 	bic.w	r3, r3, #3
 800ff82:	429a      	cmp	r2, r3
 800ff84:	d306      	bcc.n	800ff94 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ff86:	8afa      	ldrh	r2, [r7, #22]
 800ff88:	88bb      	ldrh	r3, [r7, #4]
 800ff8a:	3303      	adds	r3, #3
 800ff8c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d201      	bcs.n	800ff98 <pbuf_alloc+0x160>
        return NULL;
 800ff94:	2300      	movs	r3, #0
 800ff96:	e035      	b.n	8010004 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ff98:	8afb      	ldrh	r3, [r7, #22]
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7ff f96e 	bl	800f27c <mem_malloc>
 800ffa0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800ffa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d101      	bne.n	800ffac <pbuf_alloc+0x174>
        return NULL;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	e02b      	b.n	8010004 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ffac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ffae:	3310      	adds	r3, #16
 800ffb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ffb2:	4413      	add	r3, r2
 800ffb4:	3303      	adds	r3, #3
 800ffb6:	f023 0303 	bic.w	r3, r3, #3
 800ffba:	4618      	mov	r0, r3
 800ffbc:	88b9      	ldrh	r1, [r7, #4]
 800ffbe:	88ba      	ldrh	r2, [r7, #4]
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	9301      	str	r3, [sp, #4]
 800ffc4:	887b      	ldrh	r3, [r7, #2]
 800ffc6:	9300      	str	r3, [sp, #0]
 800ffc8:	460b      	mov	r3, r1
 800ffca:	4601      	mov	r1, r0
 800ffcc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ffce:	f7ff ff09 	bl	800fde4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ffd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffd4:	685b      	ldr	r3, [r3, #4]
 800ffd6:	f003 0303 	and.w	r3, r3, #3
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d010      	beq.n	8010000 <pbuf_alloc+0x1c8>
 800ffde:	4b0b      	ldr	r3, [pc, #44]	@ (801000c <pbuf_alloc+0x1d4>)
 800ffe0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800ffe4:	490d      	ldr	r1, [pc, #52]	@ (801001c <pbuf_alloc+0x1e4>)
 800ffe6:	480b      	ldr	r0, [pc, #44]	@ (8010014 <pbuf_alloc+0x1dc>)
 800ffe8:	f009 faf8 	bl	80195dc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ffec:	e008      	b.n	8010000 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ffee:	4b07      	ldr	r3, [pc, #28]	@ (801000c <pbuf_alloc+0x1d4>)
 800fff0:	f240 1227 	movw	r2, #295	@ 0x127
 800fff4:	490a      	ldr	r1, [pc, #40]	@ (8010020 <pbuf_alloc+0x1e8>)
 800fff6:	4807      	ldr	r0, [pc, #28]	@ (8010014 <pbuf_alloc+0x1dc>)
 800fff8:	f009 faf0 	bl	80195dc <iprintf>
      return NULL;
 800fffc:	2300      	movs	r3, #0
 800fffe:	e001      	b.n	8010004 <pbuf_alloc+0x1cc>
      break;
 8010000:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010004:	4618      	mov	r0, r3
 8010006:	3728      	adds	r7, #40	@ 0x28
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}
 801000c:	0801c12c 	.word	0x0801c12c
 8010010:	0801c15c 	.word	0x0801c15c
 8010014:	0801c18c 	.word	0x0801c18c
 8010018:	0801c1b4 	.word	0x0801c1b4
 801001c:	0801c1e8 	.word	0x0801c1e8
 8010020:	0801c214 	.word	0x0801c214

08010024 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b086      	sub	sp, #24
 8010028:	af02      	add	r7, sp, #8
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	460b      	mov	r3, r1
 801002e:	807b      	strh	r3, [r7, #2]
 8010030:	4613      	mov	r3, r2
 8010032:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010034:	883b      	ldrh	r3, [r7, #0]
 8010036:	2b41      	cmp	r3, #65	@ 0x41
 8010038:	d009      	beq.n	801004e <pbuf_alloc_reference+0x2a>
 801003a:	883b      	ldrh	r3, [r7, #0]
 801003c:	2b01      	cmp	r3, #1
 801003e:	d006      	beq.n	801004e <pbuf_alloc_reference+0x2a>
 8010040:	4b0f      	ldr	r3, [pc, #60]	@ (8010080 <pbuf_alloc_reference+0x5c>)
 8010042:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8010046:	490f      	ldr	r1, [pc, #60]	@ (8010084 <pbuf_alloc_reference+0x60>)
 8010048:	480f      	ldr	r0, [pc, #60]	@ (8010088 <pbuf_alloc_reference+0x64>)
 801004a:	f009 fac7 	bl	80195dc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801004e:	200b      	movs	r0, #11
 8010050:	f7ff fabc 	bl	800f5cc <memp_malloc>
 8010054:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d101      	bne.n	8010060 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801005c:	2300      	movs	r3, #0
 801005e:	e00b      	b.n	8010078 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010060:	8879      	ldrh	r1, [r7, #2]
 8010062:	887a      	ldrh	r2, [r7, #2]
 8010064:	2300      	movs	r3, #0
 8010066:	9301      	str	r3, [sp, #4]
 8010068:	883b      	ldrh	r3, [r7, #0]
 801006a:	9300      	str	r3, [sp, #0]
 801006c:	460b      	mov	r3, r1
 801006e:	6879      	ldr	r1, [r7, #4]
 8010070:	68f8      	ldr	r0, [r7, #12]
 8010072:	f7ff feb7 	bl	800fde4 <pbuf_init_alloced_pbuf>
  return p;
 8010076:	68fb      	ldr	r3, [r7, #12]
}
 8010078:	4618      	mov	r0, r3
 801007a:	3710      	adds	r7, #16
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}
 8010080:	0801c12c 	.word	0x0801c12c
 8010084:	0801c230 	.word	0x0801c230
 8010088:	0801c18c 	.word	0x0801c18c

0801008c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b088      	sub	sp, #32
 8010090:	af02      	add	r7, sp, #8
 8010092:	607b      	str	r3, [r7, #4]
 8010094:	4603      	mov	r3, r0
 8010096:	73fb      	strb	r3, [r7, #15]
 8010098:	460b      	mov	r3, r1
 801009a:	81bb      	strh	r3, [r7, #12]
 801009c:	4613      	mov	r3, r2
 801009e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80100a0:	7bfb      	ldrb	r3, [r7, #15]
 80100a2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80100a4:	8a7b      	ldrh	r3, [r7, #18]
 80100a6:	3303      	adds	r3, #3
 80100a8:	f023 0203 	bic.w	r2, r3, #3
 80100ac:	89bb      	ldrh	r3, [r7, #12]
 80100ae:	441a      	add	r2, r3
 80100b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d901      	bls.n	80100ba <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80100b6:	2300      	movs	r3, #0
 80100b8:	e018      	b.n	80100ec <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80100ba:	6a3b      	ldr	r3, [r7, #32]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d007      	beq.n	80100d0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80100c0:	8a7b      	ldrh	r3, [r7, #18]
 80100c2:	3303      	adds	r3, #3
 80100c4:	f023 0303 	bic.w	r3, r3, #3
 80100c8:	6a3a      	ldr	r2, [r7, #32]
 80100ca:	4413      	add	r3, r2
 80100cc:	617b      	str	r3, [r7, #20]
 80100ce:	e001      	b.n	80100d4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80100d0:	2300      	movs	r3, #0
 80100d2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	89b9      	ldrh	r1, [r7, #12]
 80100d8:	89ba      	ldrh	r2, [r7, #12]
 80100da:	2302      	movs	r3, #2
 80100dc:	9301      	str	r3, [sp, #4]
 80100de:	897b      	ldrh	r3, [r7, #10]
 80100e0:	9300      	str	r3, [sp, #0]
 80100e2:	460b      	mov	r3, r1
 80100e4:	6979      	ldr	r1, [r7, #20]
 80100e6:	f7ff fe7d 	bl	800fde4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80100ea:	687b      	ldr	r3, [r7, #4]
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	3718      	adds	r7, #24
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}

080100f4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b084      	sub	sp, #16
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	460b      	mov	r3, r1
 80100fe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d106      	bne.n	8010114 <pbuf_realloc+0x20>
 8010106:	4b3a      	ldr	r3, [pc, #232]	@ (80101f0 <pbuf_realloc+0xfc>)
 8010108:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 801010c:	4939      	ldr	r1, [pc, #228]	@ (80101f4 <pbuf_realloc+0x100>)
 801010e:	483a      	ldr	r0, [pc, #232]	@ (80101f8 <pbuf_realloc+0x104>)
 8010110:	f009 fa64 	bl	80195dc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	891b      	ldrh	r3, [r3, #8]
 8010118:	887a      	ldrh	r2, [r7, #2]
 801011a:	429a      	cmp	r2, r3
 801011c:	d263      	bcs.n	80101e6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	891a      	ldrh	r2, [r3, #8]
 8010122:	887b      	ldrh	r3, [r7, #2]
 8010124:	1ad3      	subs	r3, r2, r3
 8010126:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010128:	887b      	ldrh	r3, [r7, #2]
 801012a:	817b      	strh	r3, [r7, #10]
  q = p;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010130:	e018      	b.n	8010164 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	895b      	ldrh	r3, [r3, #10]
 8010136:	897a      	ldrh	r2, [r7, #10]
 8010138:	1ad3      	subs	r3, r2, r3
 801013a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	891a      	ldrh	r2, [r3, #8]
 8010140:	893b      	ldrh	r3, [r7, #8]
 8010142:	1ad3      	subs	r3, r2, r3
 8010144:	b29a      	uxth	r2, r3
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d106      	bne.n	8010164 <pbuf_realloc+0x70>
 8010156:	4b26      	ldr	r3, [pc, #152]	@ (80101f0 <pbuf_realloc+0xfc>)
 8010158:	f240 12af 	movw	r2, #431	@ 0x1af
 801015c:	4927      	ldr	r1, [pc, #156]	@ (80101fc <pbuf_realloc+0x108>)
 801015e:	4826      	ldr	r0, [pc, #152]	@ (80101f8 <pbuf_realloc+0x104>)
 8010160:	f009 fa3c 	bl	80195dc <iprintf>
  while (rem_len > q->len) {
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	895b      	ldrh	r3, [r3, #10]
 8010168:	897a      	ldrh	r2, [r7, #10]
 801016a:	429a      	cmp	r2, r3
 801016c:	d8e1      	bhi.n	8010132 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	7b1b      	ldrb	r3, [r3, #12]
 8010172:	f003 030f 	and.w	r3, r3, #15
 8010176:	2b00      	cmp	r3, #0
 8010178:	d121      	bne.n	80101be <pbuf_realloc+0xca>
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	895b      	ldrh	r3, [r3, #10]
 801017e:	897a      	ldrh	r2, [r7, #10]
 8010180:	429a      	cmp	r2, r3
 8010182:	d01c      	beq.n	80101be <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	7b5b      	ldrb	r3, [r3, #13]
 8010188:	f003 0302 	and.w	r3, r3, #2
 801018c:	2b00      	cmp	r3, #0
 801018e:	d116      	bne.n	80101be <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	685a      	ldr	r2, [r3, #4]
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	1ad3      	subs	r3, r2, r3
 8010198:	b29a      	uxth	r2, r3
 801019a:	897b      	ldrh	r3, [r7, #10]
 801019c:	4413      	add	r3, r2
 801019e:	b29b      	uxth	r3, r3
 80101a0:	4619      	mov	r1, r3
 80101a2:	68f8      	ldr	r0, [r7, #12]
 80101a4:	f7fe ff5a 	bl	800f05c <mem_trim>
 80101a8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d106      	bne.n	80101be <pbuf_realloc+0xca>
 80101b0:	4b0f      	ldr	r3, [pc, #60]	@ (80101f0 <pbuf_realloc+0xfc>)
 80101b2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80101b6:	4912      	ldr	r1, [pc, #72]	@ (8010200 <pbuf_realloc+0x10c>)
 80101b8:	480f      	ldr	r0, [pc, #60]	@ (80101f8 <pbuf_realloc+0x104>)
 80101ba:	f009 fa0f 	bl	80195dc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	897a      	ldrh	r2, [r7, #10]
 80101c2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	895a      	ldrh	r2, [r3, #10]
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d004      	beq.n	80101de <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	4618      	mov	r0, r3
 80101da:	f000 f911 	bl	8010400 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2200      	movs	r2, #0
 80101e2:	601a      	str	r2, [r3, #0]
 80101e4:	e000      	b.n	80101e8 <pbuf_realloc+0xf4>
    return;
 80101e6:	bf00      	nop

}
 80101e8:	3710      	adds	r7, #16
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	0801c12c 	.word	0x0801c12c
 80101f4:	0801c244 	.word	0x0801c244
 80101f8:	0801c18c 	.word	0x0801c18c
 80101fc:	0801c25c 	.word	0x0801c25c
 8010200:	0801c274 	.word	0x0801c274

08010204 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b086      	sub	sp, #24
 8010208:	af00      	add	r7, sp, #0
 801020a:	60f8      	str	r0, [r7, #12]
 801020c:	60b9      	str	r1, [r7, #8]
 801020e:	4613      	mov	r3, r2
 8010210:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d106      	bne.n	8010226 <pbuf_add_header_impl+0x22>
 8010218:	4b2b      	ldr	r3, [pc, #172]	@ (80102c8 <pbuf_add_header_impl+0xc4>)
 801021a:	f240 12df 	movw	r2, #479	@ 0x1df
 801021e:	492b      	ldr	r1, [pc, #172]	@ (80102cc <pbuf_add_header_impl+0xc8>)
 8010220:	482b      	ldr	r0, [pc, #172]	@ (80102d0 <pbuf_add_header_impl+0xcc>)
 8010222:	f009 f9db 	bl	80195dc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d003      	beq.n	8010234 <pbuf_add_header_impl+0x30>
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010232:	d301      	bcc.n	8010238 <pbuf_add_header_impl+0x34>
    return 1;
 8010234:	2301      	movs	r3, #1
 8010236:	e043      	b.n	80102c0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d101      	bne.n	8010242 <pbuf_add_header_impl+0x3e>
    return 0;
 801023e:	2300      	movs	r3, #0
 8010240:	e03e      	b.n	80102c0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	891a      	ldrh	r2, [r3, #8]
 801024a:	8a7b      	ldrh	r3, [r7, #18]
 801024c:	4413      	add	r3, r2
 801024e:	b29b      	uxth	r3, r3
 8010250:	8a7a      	ldrh	r2, [r7, #18]
 8010252:	429a      	cmp	r2, r3
 8010254:	d901      	bls.n	801025a <pbuf_add_header_impl+0x56>
    return 1;
 8010256:	2301      	movs	r3, #1
 8010258:	e032      	b.n	80102c0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	7b1b      	ldrb	r3, [r3, #12]
 801025e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010260:	8a3b      	ldrh	r3, [r7, #16]
 8010262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010266:	2b00      	cmp	r3, #0
 8010268:	d00c      	beq.n	8010284 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	685a      	ldr	r2, [r3, #4]
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	425b      	negs	r3, r3
 8010272:	4413      	add	r3, r2
 8010274:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	3310      	adds	r3, #16
 801027a:	697a      	ldr	r2, [r7, #20]
 801027c:	429a      	cmp	r2, r3
 801027e:	d20d      	bcs.n	801029c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010280:	2301      	movs	r3, #1
 8010282:	e01d      	b.n	80102c0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010284:	79fb      	ldrb	r3, [r7, #7]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d006      	beq.n	8010298 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	685a      	ldr	r2, [r3, #4]
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	425b      	negs	r3, r3
 8010292:	4413      	add	r3, r2
 8010294:	617b      	str	r3, [r7, #20]
 8010296:	e001      	b.n	801029c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010298:	2301      	movs	r3, #1
 801029a:	e011      	b.n	80102c0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	697a      	ldr	r2, [r7, #20]
 80102a0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	895a      	ldrh	r2, [r3, #10]
 80102a6:	8a7b      	ldrh	r3, [r7, #18]
 80102a8:	4413      	add	r3, r2
 80102aa:	b29a      	uxth	r2, r3
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	891a      	ldrh	r2, [r3, #8]
 80102b4:	8a7b      	ldrh	r3, [r7, #18]
 80102b6:	4413      	add	r3, r2
 80102b8:	b29a      	uxth	r2, r3
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	811a      	strh	r2, [r3, #8]


  return 0;
 80102be:	2300      	movs	r3, #0
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	3718      	adds	r7, #24
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	0801c12c 	.word	0x0801c12c
 80102cc:	0801c290 	.word	0x0801c290
 80102d0:	0801c18c 	.word	0x0801c18c

080102d4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80102de:	2200      	movs	r2, #0
 80102e0:	6839      	ldr	r1, [r7, #0]
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f7ff ff8e 	bl	8010204 <pbuf_add_header_impl>
 80102e8:	4603      	mov	r3, r0
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3708      	adds	r7, #8
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}
	...

080102f4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d106      	bne.n	8010312 <pbuf_remove_header+0x1e>
 8010304:	4b20      	ldr	r3, [pc, #128]	@ (8010388 <pbuf_remove_header+0x94>)
 8010306:	f240 224b 	movw	r2, #587	@ 0x24b
 801030a:	4920      	ldr	r1, [pc, #128]	@ (801038c <pbuf_remove_header+0x98>)
 801030c:	4820      	ldr	r0, [pc, #128]	@ (8010390 <pbuf_remove_header+0x9c>)
 801030e:	f009 f965 	bl	80195dc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d003      	beq.n	8010320 <pbuf_remove_header+0x2c>
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801031e:	d301      	bcc.n	8010324 <pbuf_remove_header+0x30>
    return 1;
 8010320:	2301      	movs	r3, #1
 8010322:	e02c      	b.n	801037e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d101      	bne.n	801032e <pbuf_remove_header+0x3a>
    return 0;
 801032a:	2300      	movs	r3, #0
 801032c:	e027      	b.n	801037e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	895b      	ldrh	r3, [r3, #10]
 8010336:	89fa      	ldrh	r2, [r7, #14]
 8010338:	429a      	cmp	r2, r3
 801033a:	d908      	bls.n	801034e <pbuf_remove_header+0x5a>
 801033c:	4b12      	ldr	r3, [pc, #72]	@ (8010388 <pbuf_remove_header+0x94>)
 801033e:	f240 2255 	movw	r2, #597	@ 0x255
 8010342:	4914      	ldr	r1, [pc, #80]	@ (8010394 <pbuf_remove_header+0xa0>)
 8010344:	4812      	ldr	r0, [pc, #72]	@ (8010390 <pbuf_remove_header+0x9c>)
 8010346:	f009 f949 	bl	80195dc <iprintf>
 801034a:	2301      	movs	r3, #1
 801034c:	e017      	b.n	801037e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	685b      	ldr	r3, [r3, #4]
 8010352:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	685a      	ldr	r2, [r3, #4]
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	441a      	add	r2, r3
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	895a      	ldrh	r2, [r3, #10]
 8010364:	89fb      	ldrh	r3, [r7, #14]
 8010366:	1ad3      	subs	r3, r2, r3
 8010368:	b29a      	uxth	r2, r3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	891a      	ldrh	r2, [r3, #8]
 8010372:	89fb      	ldrh	r3, [r7, #14]
 8010374:	1ad3      	subs	r3, r2, r3
 8010376:	b29a      	uxth	r2, r3
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801037c:	2300      	movs	r3, #0
}
 801037e:	4618      	mov	r0, r3
 8010380:	3710      	adds	r7, #16
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
 8010386:	bf00      	nop
 8010388:	0801c12c 	.word	0x0801c12c
 801038c:	0801c290 	.word	0x0801c290
 8010390:	0801c18c 	.word	0x0801c18c
 8010394:	0801c29c 	.word	0x0801c29c

08010398 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b082      	sub	sp, #8
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	460b      	mov	r3, r1
 80103a2:	807b      	strh	r3, [r7, #2]
 80103a4:	4613      	mov	r3, r2
 80103a6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80103a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	da08      	bge.n	80103c2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80103b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80103b4:	425b      	negs	r3, r3
 80103b6:	4619      	mov	r1, r3
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f7ff ff9b 	bl	80102f4 <pbuf_remove_header>
 80103be:	4603      	mov	r3, r0
 80103c0:	e007      	b.n	80103d2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80103c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80103c6:	787a      	ldrb	r2, [r7, #1]
 80103c8:	4619      	mov	r1, r3
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f7ff ff1a 	bl	8010204 <pbuf_add_header_impl>
 80103d0:	4603      	mov	r3, r0
  }
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3708      	adds	r7, #8
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80103da:	b580      	push	{r7, lr}
 80103dc:	b082      	sub	sp, #8
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
 80103e2:	460b      	mov	r3, r1
 80103e4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80103e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80103ea:	2201      	movs	r2, #1
 80103ec:	4619      	mov	r1, r3
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f7ff ffd2 	bl	8010398 <pbuf_header_impl>
 80103f4:	4603      	mov	r3, r0
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	3708      	adds	r7, #8
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
	...

08010400 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b088      	sub	sp, #32
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d10b      	bne.n	8010426 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d106      	bne.n	8010422 <pbuf_free+0x22>
 8010414:	4b3b      	ldr	r3, [pc, #236]	@ (8010504 <pbuf_free+0x104>)
 8010416:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 801041a:	493b      	ldr	r1, [pc, #236]	@ (8010508 <pbuf_free+0x108>)
 801041c:	483b      	ldr	r0, [pc, #236]	@ (801050c <pbuf_free+0x10c>)
 801041e:	f009 f8dd 	bl	80195dc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010422:	2300      	movs	r3, #0
 8010424:	e069      	b.n	80104fa <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010426:	2300      	movs	r3, #0
 8010428:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801042a:	e062      	b.n	80104f2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801042c:	f008 fe4e 	bl	80190cc <sys_arch_protect>
 8010430:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	7b9b      	ldrb	r3, [r3, #14]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d106      	bne.n	8010448 <pbuf_free+0x48>
 801043a:	4b32      	ldr	r3, [pc, #200]	@ (8010504 <pbuf_free+0x104>)
 801043c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8010440:	4933      	ldr	r1, [pc, #204]	@ (8010510 <pbuf_free+0x110>)
 8010442:	4832      	ldr	r0, [pc, #200]	@ (801050c <pbuf_free+0x10c>)
 8010444:	f009 f8ca 	bl	80195dc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	7b9b      	ldrb	r3, [r3, #14]
 801044c:	3b01      	subs	r3, #1
 801044e:	b2da      	uxtb	r2, r3
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	739a      	strb	r2, [r3, #14]
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	7b9b      	ldrb	r3, [r3, #14]
 8010458:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801045a:	69b8      	ldr	r0, [r7, #24]
 801045c:	f008 fe44 	bl	80190e8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010460:	7dfb      	ldrb	r3, [r7, #23]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d143      	bne.n	80104ee <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	7b1b      	ldrb	r3, [r3, #12]
 8010470:	f003 030f 	and.w	r3, r3, #15
 8010474:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	7b5b      	ldrb	r3, [r3, #13]
 801047a:	f003 0302 	and.w	r3, r3, #2
 801047e:	2b00      	cmp	r3, #0
 8010480:	d011      	beq.n	80104a6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	691b      	ldr	r3, [r3, #16]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d106      	bne.n	801049c <pbuf_free+0x9c>
 801048e:	4b1d      	ldr	r3, [pc, #116]	@ (8010504 <pbuf_free+0x104>)
 8010490:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8010494:	491f      	ldr	r1, [pc, #124]	@ (8010514 <pbuf_free+0x114>)
 8010496:	481d      	ldr	r0, [pc, #116]	@ (801050c <pbuf_free+0x10c>)
 8010498:	f009 f8a0 	bl	80195dc <iprintf>
        pc->custom_free_function(p);
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	691b      	ldr	r3, [r3, #16]
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	4798      	blx	r3
 80104a4:	e01d      	b.n	80104e2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80104a6:	7bfb      	ldrb	r3, [r7, #15]
 80104a8:	2b02      	cmp	r3, #2
 80104aa:	d104      	bne.n	80104b6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80104ac:	6879      	ldr	r1, [r7, #4]
 80104ae:	200c      	movs	r0, #12
 80104b0:	f7ff f902 	bl	800f6b8 <memp_free>
 80104b4:	e015      	b.n	80104e2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80104b6:	7bfb      	ldrb	r3, [r7, #15]
 80104b8:	2b01      	cmp	r3, #1
 80104ba:	d104      	bne.n	80104c6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80104bc:	6879      	ldr	r1, [r7, #4]
 80104be:	200b      	movs	r0, #11
 80104c0:	f7ff f8fa 	bl	800f6b8 <memp_free>
 80104c4:	e00d      	b.n	80104e2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80104c6:	7bfb      	ldrb	r3, [r7, #15]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d103      	bne.n	80104d4 <pbuf_free+0xd4>
          mem_free(p);
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f7fe fd35 	bl	800ef3c <mem_free>
 80104d2:	e006      	b.n	80104e2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80104d4:	4b0b      	ldr	r3, [pc, #44]	@ (8010504 <pbuf_free+0x104>)
 80104d6:	f240 320f 	movw	r2, #783	@ 0x30f
 80104da:	490f      	ldr	r1, [pc, #60]	@ (8010518 <pbuf_free+0x118>)
 80104dc:	480b      	ldr	r0, [pc, #44]	@ (801050c <pbuf_free+0x10c>)
 80104de:	f009 f87d 	bl	80195dc <iprintf>
        }
      }
      count++;
 80104e2:	7ffb      	ldrb	r3, [r7, #31]
 80104e4:	3301      	adds	r3, #1
 80104e6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	607b      	str	r3, [r7, #4]
 80104ec:	e001      	b.n	80104f2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80104ee:	2300      	movs	r3, #0
 80104f0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d199      	bne.n	801042c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80104f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3720      	adds	r7, #32
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}
 8010502:	bf00      	nop
 8010504:	0801c12c 	.word	0x0801c12c
 8010508:	0801c290 	.word	0x0801c290
 801050c:	0801c18c 	.word	0x0801c18c
 8010510:	0801c2bc 	.word	0x0801c2bc
 8010514:	0801c2d4 	.word	0x0801c2d4
 8010518:	0801c2f8 	.word	0x0801c2f8

0801051c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801051c:	b480      	push	{r7}
 801051e:	b085      	sub	sp, #20
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010524:	2300      	movs	r3, #0
 8010526:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010528:	e005      	b.n	8010536 <pbuf_clen+0x1a>
    ++len;
 801052a:	89fb      	ldrh	r3, [r7, #14]
 801052c:	3301      	adds	r3, #1
 801052e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d1f6      	bne.n	801052a <pbuf_clen+0xe>
  }
  return len;
 801053c:	89fb      	ldrh	r3, [r7, #14]
}
 801053e:	4618      	mov	r0, r3
 8010540:	3714      	adds	r7, #20
 8010542:	46bd      	mov	sp, r7
 8010544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010548:	4770      	bx	lr
	...

0801054c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b084      	sub	sp, #16
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d016      	beq.n	8010588 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801055a:	f008 fdb7 	bl	80190cc <sys_arch_protect>
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	7b9b      	ldrb	r3, [r3, #14]
 8010564:	3301      	adds	r3, #1
 8010566:	b2da      	uxtb	r2, r3
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	739a      	strb	r2, [r3, #14]
 801056c:	68f8      	ldr	r0, [r7, #12]
 801056e:	f008 fdbb 	bl	80190e8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	7b9b      	ldrb	r3, [r3, #14]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d106      	bne.n	8010588 <pbuf_ref+0x3c>
 801057a:	4b05      	ldr	r3, [pc, #20]	@ (8010590 <pbuf_ref+0x44>)
 801057c:	f240 3242 	movw	r2, #834	@ 0x342
 8010580:	4904      	ldr	r1, [pc, #16]	@ (8010594 <pbuf_ref+0x48>)
 8010582:	4805      	ldr	r0, [pc, #20]	@ (8010598 <pbuf_ref+0x4c>)
 8010584:	f009 f82a 	bl	80195dc <iprintf>
  }
}
 8010588:	bf00      	nop
 801058a:	3710      	adds	r7, #16
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}
 8010590:	0801c12c 	.word	0x0801c12c
 8010594:	0801c30c 	.word	0x0801c30c
 8010598:	0801c18c 	.word	0x0801c18c

0801059c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d002      	beq.n	80105b2 <pbuf_cat+0x16>
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d107      	bne.n	80105c2 <pbuf_cat+0x26>
 80105b2:	4b20      	ldr	r3, [pc, #128]	@ (8010634 <pbuf_cat+0x98>)
 80105b4:	f240 3259 	movw	r2, #857	@ 0x359
 80105b8:	491f      	ldr	r1, [pc, #124]	@ (8010638 <pbuf_cat+0x9c>)
 80105ba:	4820      	ldr	r0, [pc, #128]	@ (801063c <pbuf_cat+0xa0>)
 80105bc:	f009 f80e 	bl	80195dc <iprintf>
 80105c0:	e034      	b.n	801062c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	60fb      	str	r3, [r7, #12]
 80105c6:	e00a      	b.n	80105de <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	891a      	ldrh	r2, [r3, #8]
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	891b      	ldrh	r3, [r3, #8]
 80105d0:	4413      	add	r3, r2
 80105d2:	b29a      	uxth	r2, r3
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	60fb      	str	r3, [r7, #12]
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d1f0      	bne.n	80105c8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	891a      	ldrh	r2, [r3, #8]
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	895b      	ldrh	r3, [r3, #10]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d006      	beq.n	8010600 <pbuf_cat+0x64>
 80105f2:	4b10      	ldr	r3, [pc, #64]	@ (8010634 <pbuf_cat+0x98>)
 80105f4:	f240 3262 	movw	r2, #866	@ 0x362
 80105f8:	4911      	ldr	r1, [pc, #68]	@ (8010640 <pbuf_cat+0xa4>)
 80105fa:	4810      	ldr	r0, [pc, #64]	@ (801063c <pbuf_cat+0xa0>)
 80105fc:	f008 ffee 	bl	80195dc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d006      	beq.n	8010616 <pbuf_cat+0x7a>
 8010608:	4b0a      	ldr	r3, [pc, #40]	@ (8010634 <pbuf_cat+0x98>)
 801060a:	f240 3263 	movw	r2, #867	@ 0x363
 801060e:	490d      	ldr	r1, [pc, #52]	@ (8010644 <pbuf_cat+0xa8>)
 8010610:	480a      	ldr	r0, [pc, #40]	@ (801063c <pbuf_cat+0xa0>)
 8010612:	f008 ffe3 	bl	80195dc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	891a      	ldrh	r2, [r3, #8]
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	891b      	ldrh	r3, [r3, #8]
 801061e:	4413      	add	r3, r2
 8010620:	b29a      	uxth	r2, r3
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	683a      	ldr	r2, [r7, #0]
 801062a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801062c:	3710      	adds	r7, #16
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
 8010632:	bf00      	nop
 8010634:	0801c12c 	.word	0x0801c12c
 8010638:	0801c320 	.word	0x0801c320
 801063c:	0801c18c 	.word	0x0801c18c
 8010640:	0801c358 	.word	0x0801c358
 8010644:	0801c388 	.word	0x0801c388

08010648 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b082      	sub	sp, #8
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8010652:	6839      	ldr	r1, [r7, #0]
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f7ff ffa1 	bl	801059c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801065a:	6838      	ldr	r0, [r7, #0]
 801065c:	f7ff ff76 	bl	801054c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010660:	bf00      	nop
 8010662:	3708      	adds	r7, #8
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}

08010668 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b086      	sub	sp, #24
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010672:	2300      	movs	r3, #0
 8010674:	617b      	str	r3, [r7, #20]
 8010676:	2300      	movs	r3, #0
 8010678:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d008      	beq.n	8010692 <pbuf_copy+0x2a>
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d005      	beq.n	8010692 <pbuf_copy+0x2a>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	891a      	ldrh	r2, [r3, #8]
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	891b      	ldrh	r3, [r3, #8]
 801068e:	429a      	cmp	r2, r3
 8010690:	d209      	bcs.n	80106a6 <pbuf_copy+0x3e>
 8010692:	4b57      	ldr	r3, [pc, #348]	@ (80107f0 <pbuf_copy+0x188>)
 8010694:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8010698:	4956      	ldr	r1, [pc, #344]	@ (80107f4 <pbuf_copy+0x18c>)
 801069a:	4857      	ldr	r0, [pc, #348]	@ (80107f8 <pbuf_copy+0x190>)
 801069c:	f008 ff9e 	bl	80195dc <iprintf>
 80106a0:	f06f 030f 	mvn.w	r3, #15
 80106a4:	e09f      	b.n	80107e6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	895b      	ldrh	r3, [r3, #10]
 80106aa:	461a      	mov	r2, r3
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	1ad2      	subs	r2, r2, r3
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	895b      	ldrh	r3, [r3, #10]
 80106b4:	4619      	mov	r1, r3
 80106b6:	693b      	ldr	r3, [r7, #16]
 80106b8:	1acb      	subs	r3, r1, r3
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d306      	bcc.n	80106cc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	895b      	ldrh	r3, [r3, #10]
 80106c2:	461a      	mov	r2, r3
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	1ad3      	subs	r3, r2, r3
 80106c8:	60fb      	str	r3, [r7, #12]
 80106ca:	e005      	b.n	80106d8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	895b      	ldrh	r3, [r3, #10]
 80106d0:	461a      	mov	r2, r3
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	1ad3      	subs	r3, r2, r3
 80106d6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	685a      	ldr	r2, [r3, #4]
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	18d0      	adds	r0, r2, r3
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	685a      	ldr	r2, [r3, #4]
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	4413      	add	r3, r2
 80106e8:	68fa      	ldr	r2, [r7, #12]
 80106ea:	4619      	mov	r1, r3
 80106ec:	f009 ffaf 	bl	801a64e <memcpy>
    offset_to += len;
 80106f0:	697a      	ldr	r2, [r7, #20]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	4413      	add	r3, r2
 80106f6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80106f8:	693a      	ldr	r2, [r7, #16]
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	4413      	add	r3, r2
 80106fe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	895b      	ldrh	r3, [r3, #10]
 8010704:	461a      	mov	r2, r3
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	4293      	cmp	r3, r2
 801070a:	d906      	bls.n	801071a <pbuf_copy+0xb2>
 801070c:	4b38      	ldr	r3, [pc, #224]	@ (80107f0 <pbuf_copy+0x188>)
 801070e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8010712:	493a      	ldr	r1, [pc, #232]	@ (80107fc <pbuf_copy+0x194>)
 8010714:	4838      	ldr	r0, [pc, #224]	@ (80107f8 <pbuf_copy+0x190>)
 8010716:	f008 ff61 	bl	80195dc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	895b      	ldrh	r3, [r3, #10]
 801071e:	461a      	mov	r2, r3
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	4293      	cmp	r3, r2
 8010724:	d906      	bls.n	8010734 <pbuf_copy+0xcc>
 8010726:	4b32      	ldr	r3, [pc, #200]	@ (80107f0 <pbuf_copy+0x188>)
 8010728:	f240 32da 	movw	r2, #986	@ 0x3da
 801072c:	4934      	ldr	r1, [pc, #208]	@ (8010800 <pbuf_copy+0x198>)
 801072e:	4832      	ldr	r0, [pc, #200]	@ (80107f8 <pbuf_copy+0x190>)
 8010730:	f008 ff54 	bl	80195dc <iprintf>
    if (offset_from >= p_from->len) {
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	895b      	ldrh	r3, [r3, #10]
 8010738:	461a      	mov	r2, r3
 801073a:	693b      	ldr	r3, [r7, #16]
 801073c:	4293      	cmp	r3, r2
 801073e:	d304      	bcc.n	801074a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010740:	2300      	movs	r3, #0
 8010742:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	895b      	ldrh	r3, [r3, #10]
 801074e:	461a      	mov	r2, r3
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	4293      	cmp	r3, r2
 8010754:	d114      	bne.n	8010780 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010756:	2300      	movs	r3, #0
 8010758:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d10c      	bne.n	8010780 <pbuf_copy+0x118>
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d009      	beq.n	8010780 <pbuf_copy+0x118>
 801076c:	4b20      	ldr	r3, [pc, #128]	@ (80107f0 <pbuf_copy+0x188>)
 801076e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8010772:	4924      	ldr	r1, [pc, #144]	@ (8010804 <pbuf_copy+0x19c>)
 8010774:	4820      	ldr	r0, [pc, #128]	@ (80107f8 <pbuf_copy+0x190>)
 8010776:	f008 ff31 	bl	80195dc <iprintf>
 801077a:	f06f 030f 	mvn.w	r3, #15
 801077e:	e032      	b.n	80107e6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d013      	beq.n	80107ae <pbuf_copy+0x146>
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	895a      	ldrh	r2, [r3, #10]
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	891b      	ldrh	r3, [r3, #8]
 801078e:	429a      	cmp	r2, r3
 8010790:	d10d      	bne.n	80107ae <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d009      	beq.n	80107ae <pbuf_copy+0x146>
 801079a:	4b15      	ldr	r3, [pc, #84]	@ (80107f0 <pbuf_copy+0x188>)
 801079c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80107a0:	4919      	ldr	r1, [pc, #100]	@ (8010808 <pbuf_copy+0x1a0>)
 80107a2:	4815      	ldr	r0, [pc, #84]	@ (80107f8 <pbuf_copy+0x190>)
 80107a4:	f008 ff1a 	bl	80195dc <iprintf>
 80107a8:	f06f 0305 	mvn.w	r3, #5
 80107ac:	e01b      	b.n	80107e6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d013      	beq.n	80107dc <pbuf_copy+0x174>
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	895a      	ldrh	r2, [r3, #10]
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	891b      	ldrh	r3, [r3, #8]
 80107bc:	429a      	cmp	r2, r3
 80107be:	d10d      	bne.n	80107dc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d009      	beq.n	80107dc <pbuf_copy+0x174>
 80107c8:	4b09      	ldr	r3, [pc, #36]	@ (80107f0 <pbuf_copy+0x188>)
 80107ca:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80107ce:	490e      	ldr	r1, [pc, #56]	@ (8010808 <pbuf_copy+0x1a0>)
 80107d0:	4809      	ldr	r0, [pc, #36]	@ (80107f8 <pbuf_copy+0x190>)
 80107d2:	f008 ff03 	bl	80195dc <iprintf>
 80107d6:	f06f 0305 	mvn.w	r3, #5
 80107da:	e004      	b.n	80107e6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	f47f af61 	bne.w	80106a6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80107e4:	2300      	movs	r3, #0
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3718      	adds	r7, #24
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}
 80107ee:	bf00      	nop
 80107f0:	0801c12c 	.word	0x0801c12c
 80107f4:	0801c3d4 	.word	0x0801c3d4
 80107f8:	0801c18c 	.word	0x0801c18c
 80107fc:	0801c404 	.word	0x0801c404
 8010800:	0801c41c 	.word	0x0801c41c
 8010804:	0801c438 	.word	0x0801c438
 8010808:	0801c448 	.word	0x0801c448

0801080c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b088      	sub	sp, #32
 8010810:	af00      	add	r7, sp, #0
 8010812:	60f8      	str	r0, [r7, #12]
 8010814:	60b9      	str	r1, [r7, #8]
 8010816:	4611      	mov	r1, r2
 8010818:	461a      	mov	r2, r3
 801081a:	460b      	mov	r3, r1
 801081c:	80fb      	strh	r3, [r7, #6]
 801081e:	4613      	mov	r3, r2
 8010820:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010822:	2300      	movs	r3, #0
 8010824:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010826:	2300      	movs	r3, #0
 8010828:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d108      	bne.n	8010842 <pbuf_copy_partial+0x36>
 8010830:	4b2b      	ldr	r3, [pc, #172]	@ (80108e0 <pbuf_copy_partial+0xd4>)
 8010832:	f240 420a 	movw	r2, #1034	@ 0x40a
 8010836:	492b      	ldr	r1, [pc, #172]	@ (80108e4 <pbuf_copy_partial+0xd8>)
 8010838:	482b      	ldr	r0, [pc, #172]	@ (80108e8 <pbuf_copy_partial+0xdc>)
 801083a:	f008 fecf 	bl	80195dc <iprintf>
 801083e:	2300      	movs	r3, #0
 8010840:	e04a      	b.n	80108d8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d108      	bne.n	801085a <pbuf_copy_partial+0x4e>
 8010848:	4b25      	ldr	r3, [pc, #148]	@ (80108e0 <pbuf_copy_partial+0xd4>)
 801084a:	f240 420b 	movw	r2, #1035	@ 0x40b
 801084e:	4927      	ldr	r1, [pc, #156]	@ (80108ec <pbuf_copy_partial+0xe0>)
 8010850:	4825      	ldr	r0, [pc, #148]	@ (80108e8 <pbuf_copy_partial+0xdc>)
 8010852:	f008 fec3 	bl	80195dc <iprintf>
 8010856:	2300      	movs	r3, #0
 8010858:	e03e      	b.n	80108d8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	61fb      	str	r3, [r7, #28]
 801085e:	e034      	b.n	80108ca <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010860:	88bb      	ldrh	r3, [r7, #4]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d00a      	beq.n	801087c <pbuf_copy_partial+0x70>
 8010866:	69fb      	ldr	r3, [r7, #28]
 8010868:	895b      	ldrh	r3, [r3, #10]
 801086a:	88ba      	ldrh	r2, [r7, #4]
 801086c:	429a      	cmp	r2, r3
 801086e:	d305      	bcc.n	801087c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010870:	69fb      	ldr	r3, [r7, #28]
 8010872:	895b      	ldrh	r3, [r3, #10]
 8010874:	88ba      	ldrh	r2, [r7, #4]
 8010876:	1ad3      	subs	r3, r2, r3
 8010878:	80bb      	strh	r3, [r7, #4]
 801087a:	e023      	b.n	80108c4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801087c:	69fb      	ldr	r3, [r7, #28]
 801087e:	895a      	ldrh	r2, [r3, #10]
 8010880:	88bb      	ldrh	r3, [r7, #4]
 8010882:	1ad3      	subs	r3, r2, r3
 8010884:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010886:	8b3a      	ldrh	r2, [r7, #24]
 8010888:	88fb      	ldrh	r3, [r7, #6]
 801088a:	429a      	cmp	r2, r3
 801088c:	d901      	bls.n	8010892 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801088e:	88fb      	ldrh	r3, [r7, #6]
 8010890:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010892:	8b7b      	ldrh	r3, [r7, #26]
 8010894:	68ba      	ldr	r2, [r7, #8]
 8010896:	18d0      	adds	r0, r2, r3
 8010898:	69fb      	ldr	r3, [r7, #28]
 801089a:	685a      	ldr	r2, [r3, #4]
 801089c:	88bb      	ldrh	r3, [r7, #4]
 801089e:	4413      	add	r3, r2
 80108a0:	8b3a      	ldrh	r2, [r7, #24]
 80108a2:	4619      	mov	r1, r3
 80108a4:	f009 fed3 	bl	801a64e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80108a8:	8afa      	ldrh	r2, [r7, #22]
 80108aa:	8b3b      	ldrh	r3, [r7, #24]
 80108ac:	4413      	add	r3, r2
 80108ae:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80108b0:	8b7a      	ldrh	r2, [r7, #26]
 80108b2:	8b3b      	ldrh	r3, [r7, #24]
 80108b4:	4413      	add	r3, r2
 80108b6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80108b8:	88fa      	ldrh	r2, [r7, #6]
 80108ba:	8b3b      	ldrh	r3, [r7, #24]
 80108bc:	1ad3      	subs	r3, r2, r3
 80108be:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80108c0:	2300      	movs	r3, #0
 80108c2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80108c4:	69fb      	ldr	r3, [r7, #28]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	61fb      	str	r3, [r7, #28]
 80108ca:	88fb      	ldrh	r3, [r7, #6]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d002      	beq.n	80108d6 <pbuf_copy_partial+0xca>
 80108d0:	69fb      	ldr	r3, [r7, #28]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d1c4      	bne.n	8010860 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80108d6:	8afb      	ldrh	r3, [r7, #22]
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3720      	adds	r7, #32
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}
 80108e0:	0801c12c 	.word	0x0801c12c
 80108e4:	0801c474 	.word	0x0801c474
 80108e8:	0801c18c 	.word	0x0801c18c
 80108ec:	0801c494 	.word	0x0801c494

080108f0 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80108f0:	b480      	push	{r7}
 80108f2:	b087      	sub	sp, #28
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	60f8      	str	r0, [r7, #12]
 80108f8:	460b      	mov	r3, r1
 80108fa:	607a      	str	r2, [r7, #4]
 80108fc:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80108fe:	897b      	ldrh	r3, [r7, #10]
 8010900:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8010906:	e007      	b.n	8010918 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8010908:	693b      	ldr	r3, [r7, #16]
 801090a:	895b      	ldrh	r3, [r3, #10]
 801090c:	8afa      	ldrh	r2, [r7, #22]
 801090e:	1ad3      	subs	r3, r2, r3
 8010910:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8010912:	693b      	ldr	r3, [r7, #16]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8010918:	693b      	ldr	r3, [r7, #16]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d004      	beq.n	8010928 <pbuf_skip_const+0x38>
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	895b      	ldrh	r3, [r3, #10]
 8010922:	8afa      	ldrh	r2, [r7, #22]
 8010924:	429a      	cmp	r2, r3
 8010926:	d2ef      	bcs.n	8010908 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d002      	beq.n	8010934 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	8afa      	ldrh	r2, [r7, #22]
 8010932:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8010934:	693b      	ldr	r3, [r7, #16]
}
 8010936:	4618      	mov	r0, r3
 8010938:	371c      	adds	r7, #28
 801093a:	46bd      	mov	sp, r7
 801093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010940:	4770      	bx	lr
	...

08010944 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b084      	sub	sp, #16
 8010948:	af00      	add	r7, sp, #0
 801094a:	4603      	mov	r3, r0
 801094c:	603a      	str	r2, [r7, #0]
 801094e:	71fb      	strb	r3, [r7, #7]
 8010950:	460b      	mov	r3, r1
 8010952:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	8919      	ldrh	r1, [r3, #8]
 8010958:	88ba      	ldrh	r2, [r7, #4]
 801095a:	79fb      	ldrb	r3, [r7, #7]
 801095c:	4618      	mov	r0, r3
 801095e:	f7ff fa6b 	bl	800fe38 <pbuf_alloc>
 8010962:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d101      	bne.n	801096e <pbuf_clone+0x2a>
    return NULL;
 801096a:	2300      	movs	r3, #0
 801096c:	e011      	b.n	8010992 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801096e:	6839      	ldr	r1, [r7, #0]
 8010970:	68f8      	ldr	r0, [r7, #12]
 8010972:	f7ff fe79 	bl	8010668 <pbuf_copy>
 8010976:	4603      	mov	r3, r0
 8010978:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801097a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d006      	beq.n	8010990 <pbuf_clone+0x4c>
 8010982:	4b06      	ldr	r3, [pc, #24]	@ (801099c <pbuf_clone+0x58>)
 8010984:	f240 5224 	movw	r2, #1316	@ 0x524
 8010988:	4905      	ldr	r1, [pc, #20]	@ (80109a0 <pbuf_clone+0x5c>)
 801098a:	4806      	ldr	r0, [pc, #24]	@ (80109a4 <pbuf_clone+0x60>)
 801098c:	f008 fe26 	bl	80195dc <iprintf>
  return q;
 8010990:	68fb      	ldr	r3, [r7, #12]
}
 8010992:	4618      	mov	r0, r3
 8010994:	3710      	adds	r7, #16
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	0801c12c 	.word	0x0801c12c
 80109a0:	0801c5a0 	.word	0x0801c5a0
 80109a4:	0801c18c 	.word	0x0801c18c

080109a8 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b084      	sub	sp, #16
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	460b      	mov	r3, r1
 80109b2:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 80109b4:	887b      	ldrh	r3, [r7, #2]
 80109b6:	4619      	mov	r1, r3
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f000 f80c 	bl	80109d6 <pbuf_try_get_at>
 80109be:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	db02      	blt.n	80109cc <pbuf_get_at+0x24>
    return (u8_t)ret;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	b2db      	uxtb	r3, r3
 80109ca:	e000      	b.n	80109ce <pbuf_get_at+0x26>
  }
  return 0;
 80109cc:	2300      	movs	r3, #0
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3710      	adds	r7, #16
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}

080109d6 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 80109d6:	b580      	push	{r7, lr}
 80109d8:	b084      	sub	sp, #16
 80109da:	af00      	add	r7, sp, #0
 80109dc:	6078      	str	r0, [r7, #4]
 80109de:	460b      	mov	r3, r1
 80109e0:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 80109e2:	f107 020a 	add.w	r2, r7, #10
 80109e6:	887b      	ldrh	r3, [r7, #2]
 80109e8:	4619      	mov	r1, r3
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f7ff ff80 	bl	80108f0 <pbuf_skip_const>
 80109f0:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d00a      	beq.n	8010a0e <pbuf_try_get_at+0x38>
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	895a      	ldrh	r2, [r3, #10]
 80109fc:	897b      	ldrh	r3, [r7, #10]
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d905      	bls.n	8010a0e <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	685b      	ldr	r3, [r3, #4]
 8010a06:	897a      	ldrh	r2, [r7, #10]
 8010a08:	4413      	add	r3, r2
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	e001      	b.n	8010a12 <pbuf_try_get_at+0x3c>
  }
  return -1;
 8010a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3710      	adds	r7, #16
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
	...

08010a1c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010a20:	f008 fc4e 	bl	80192c0 <rand>
 8010a24:	4603      	mov	r3, r0
 8010a26:	b29b      	uxth	r3, r3
 8010a28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010a2c:	b29b      	uxth	r3, r3
 8010a2e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8010a32:	b29a      	uxth	r2, r3
 8010a34:	4b01      	ldr	r3, [pc, #4]	@ (8010a3c <tcp_init+0x20>)
 8010a36:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010a38:	bf00      	nop
 8010a3a:	bd80      	pop	{r7, pc}
 8010a3c:	2400002c 	.word	0x2400002c

08010a40 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b082      	sub	sp, #8
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	7d1b      	ldrb	r3, [r3, #20]
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	d105      	bne.n	8010a5c <tcp_free+0x1c>
 8010a50:	4b06      	ldr	r3, [pc, #24]	@ (8010a6c <tcp_free+0x2c>)
 8010a52:	22d4      	movs	r2, #212	@ 0xd4
 8010a54:	4906      	ldr	r1, [pc, #24]	@ (8010a70 <tcp_free+0x30>)
 8010a56:	4807      	ldr	r0, [pc, #28]	@ (8010a74 <tcp_free+0x34>)
 8010a58:	f008 fdc0 	bl	80195dc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010a5c:	6879      	ldr	r1, [r7, #4]
 8010a5e:	2001      	movs	r0, #1
 8010a60:	f7fe fe2a 	bl	800f6b8 <memp_free>
}
 8010a64:	bf00      	nop
 8010a66:	3708      	adds	r7, #8
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}
 8010a6c:	0801c62c 	.word	0x0801c62c
 8010a70:	0801c65c 	.word	0x0801c65c
 8010a74:	0801c670 	.word	0x0801c670

08010a78 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	7d1b      	ldrb	r3, [r3, #20]
 8010a84:	2b01      	cmp	r3, #1
 8010a86:	d105      	bne.n	8010a94 <tcp_free_listen+0x1c>
 8010a88:	4b06      	ldr	r3, [pc, #24]	@ (8010aa4 <tcp_free_listen+0x2c>)
 8010a8a:	22df      	movs	r2, #223	@ 0xdf
 8010a8c:	4906      	ldr	r1, [pc, #24]	@ (8010aa8 <tcp_free_listen+0x30>)
 8010a8e:	4807      	ldr	r0, [pc, #28]	@ (8010aac <tcp_free_listen+0x34>)
 8010a90:	f008 fda4 	bl	80195dc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010a94:	6879      	ldr	r1, [r7, #4]
 8010a96:	2002      	movs	r0, #2
 8010a98:	f7fe fe0e 	bl	800f6b8 <memp_free>
}
 8010a9c:	bf00      	nop
 8010a9e:	3708      	adds	r7, #8
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}
 8010aa4:	0801c62c 	.word	0x0801c62c
 8010aa8:	0801c698 	.word	0x0801c698
 8010aac:	0801c670 	.word	0x0801c670

08010ab0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010ab4:	f000 fea4 	bl	8011800 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010ab8:	4b07      	ldr	r3, [pc, #28]	@ (8010ad8 <tcp_tmr+0x28>)
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	3301      	adds	r3, #1
 8010abe:	b2da      	uxtb	r2, r3
 8010ac0:	4b05      	ldr	r3, [pc, #20]	@ (8010ad8 <tcp_tmr+0x28>)
 8010ac2:	701a      	strb	r2, [r3, #0]
 8010ac4:	4b04      	ldr	r3, [pc, #16]	@ (8010ad8 <tcp_tmr+0x28>)
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	f003 0301 	and.w	r3, r3, #1
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d001      	beq.n	8010ad4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010ad0:	f000 fb54 	bl	801117c <tcp_slowtmr>
  }
}
 8010ad4:	bf00      	nop
 8010ad6:	bd80      	pop	{r7, pc}
 8010ad8:	24008221 	.word	0x24008221

08010adc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b084      	sub	sp, #16
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d105      	bne.n	8010af8 <tcp_remove_listener+0x1c>
 8010aec:	4b0d      	ldr	r3, [pc, #52]	@ (8010b24 <tcp_remove_listener+0x48>)
 8010aee:	22ff      	movs	r2, #255	@ 0xff
 8010af0:	490d      	ldr	r1, [pc, #52]	@ (8010b28 <tcp_remove_listener+0x4c>)
 8010af2:	480e      	ldr	r0, [pc, #56]	@ (8010b2c <tcp_remove_listener+0x50>)
 8010af4:	f008 fd72 	bl	80195dc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	60fb      	str	r3, [r7, #12]
 8010afc:	e00a      	b.n	8010b14 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010b02:	683a      	ldr	r2, [r7, #0]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d102      	bne.n	8010b0e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	68db      	ldr	r3, [r3, #12]
 8010b12:	60fb      	str	r3, [r7, #12]
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d1f1      	bne.n	8010afe <tcp_remove_listener+0x22>
    }
  }
}
 8010b1a:	bf00      	nop
 8010b1c:	bf00      	nop
 8010b1e:	3710      	adds	r7, #16
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}
 8010b24:	0801c62c 	.word	0x0801c62c
 8010b28:	0801c6b4 	.word	0x0801c6b4
 8010b2c:	0801c670 	.word	0x0801c670

08010b30 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b084      	sub	sp, #16
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d106      	bne.n	8010b4c <tcp_listen_closed+0x1c>
 8010b3e:	4b14      	ldr	r3, [pc, #80]	@ (8010b90 <tcp_listen_closed+0x60>)
 8010b40:	f240 1211 	movw	r2, #273	@ 0x111
 8010b44:	4913      	ldr	r1, [pc, #76]	@ (8010b94 <tcp_listen_closed+0x64>)
 8010b46:	4814      	ldr	r0, [pc, #80]	@ (8010b98 <tcp_listen_closed+0x68>)
 8010b48:	f008 fd48 	bl	80195dc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	7d1b      	ldrb	r3, [r3, #20]
 8010b50:	2b01      	cmp	r3, #1
 8010b52:	d006      	beq.n	8010b62 <tcp_listen_closed+0x32>
 8010b54:	4b0e      	ldr	r3, [pc, #56]	@ (8010b90 <tcp_listen_closed+0x60>)
 8010b56:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8010b5a:	4910      	ldr	r1, [pc, #64]	@ (8010b9c <tcp_listen_closed+0x6c>)
 8010b5c:	480e      	ldr	r0, [pc, #56]	@ (8010b98 <tcp_listen_closed+0x68>)
 8010b5e:	f008 fd3d 	bl	80195dc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010b62:	2301      	movs	r3, #1
 8010b64:	60fb      	str	r3, [r7, #12]
 8010b66:	e00b      	b.n	8010b80 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010b68:	4a0d      	ldr	r2, [pc, #52]	@ (8010ba0 <tcp_listen_closed+0x70>)
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	6879      	ldr	r1, [r7, #4]
 8010b74:	4618      	mov	r0, r3
 8010b76:	f7ff ffb1 	bl	8010adc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	3301      	adds	r3, #1
 8010b7e:	60fb      	str	r3, [r7, #12]
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	2b03      	cmp	r3, #3
 8010b84:	d9f0      	bls.n	8010b68 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010b86:	bf00      	nop
 8010b88:	bf00      	nop
 8010b8a:	3710      	adds	r7, #16
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}
 8010b90:	0801c62c 	.word	0x0801c62c
 8010b94:	0801c6dc 	.word	0x0801c6dc
 8010b98:	0801c670 	.word	0x0801c670
 8010b9c:	0801c6e8 	.word	0x0801c6e8
 8010ba0:	0801e69c 	.word	0x0801e69c

08010ba4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010ba4:	b5b0      	push	{r4, r5, r7, lr}
 8010ba6:	b088      	sub	sp, #32
 8010ba8:	af04      	add	r7, sp, #16
 8010baa:	6078      	str	r0, [r7, #4]
 8010bac:	460b      	mov	r3, r1
 8010bae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d106      	bne.n	8010bc4 <tcp_close_shutdown+0x20>
 8010bb6:	4b63      	ldr	r3, [pc, #396]	@ (8010d44 <tcp_close_shutdown+0x1a0>)
 8010bb8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8010bbc:	4962      	ldr	r1, [pc, #392]	@ (8010d48 <tcp_close_shutdown+0x1a4>)
 8010bbe:	4863      	ldr	r0, [pc, #396]	@ (8010d4c <tcp_close_shutdown+0x1a8>)
 8010bc0:	f008 fd0c 	bl	80195dc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010bc4:	78fb      	ldrb	r3, [r7, #3]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d066      	beq.n	8010c98 <tcp_close_shutdown+0xf4>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	7d1b      	ldrb	r3, [r3, #20]
 8010bce:	2b04      	cmp	r3, #4
 8010bd0:	d003      	beq.n	8010bda <tcp_close_shutdown+0x36>
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	7d1b      	ldrb	r3, [r3, #20]
 8010bd6:	2b07      	cmp	r3, #7
 8010bd8:	d15e      	bne.n	8010c98 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d104      	bne.n	8010bec <tcp_close_shutdown+0x48>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010be6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010bea:	d055      	beq.n	8010c98 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	8b5b      	ldrh	r3, [r3, #26]
 8010bf0:	f003 0310 	and.w	r3, r3, #16
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d106      	bne.n	8010c06 <tcp_close_shutdown+0x62>
 8010bf8:	4b52      	ldr	r3, [pc, #328]	@ (8010d44 <tcp_close_shutdown+0x1a0>)
 8010bfa:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8010bfe:	4954      	ldr	r1, [pc, #336]	@ (8010d50 <tcp_close_shutdown+0x1ac>)
 8010c00:	4852      	ldr	r0, [pc, #328]	@ (8010d4c <tcp_close_shutdown+0x1a8>)
 8010c02:	f008 fceb 	bl	80195dc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010c0e:	687d      	ldr	r5, [r7, #4]
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	3304      	adds	r3, #4
 8010c14:	687a      	ldr	r2, [r7, #4]
 8010c16:	8ad2      	ldrh	r2, [r2, #22]
 8010c18:	6879      	ldr	r1, [r7, #4]
 8010c1a:	8b09      	ldrh	r1, [r1, #24]
 8010c1c:	9102      	str	r1, [sp, #8]
 8010c1e:	9201      	str	r2, [sp, #4]
 8010c20:	9300      	str	r3, [sp, #0]
 8010c22:	462b      	mov	r3, r5
 8010c24:	4622      	mov	r2, r4
 8010c26:	4601      	mov	r1, r0
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f004 fe8d 	bl	8015948 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	f001 f8c8 	bl	8011dc4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010c34:	4b47      	ldr	r3, [pc, #284]	@ (8010d54 <tcp_close_shutdown+0x1b0>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	687a      	ldr	r2, [r7, #4]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d105      	bne.n	8010c4a <tcp_close_shutdown+0xa6>
 8010c3e:	4b45      	ldr	r3, [pc, #276]	@ (8010d54 <tcp_close_shutdown+0x1b0>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	68db      	ldr	r3, [r3, #12]
 8010c44:	4a43      	ldr	r2, [pc, #268]	@ (8010d54 <tcp_close_shutdown+0x1b0>)
 8010c46:	6013      	str	r3, [r2, #0]
 8010c48:	e013      	b.n	8010c72 <tcp_close_shutdown+0xce>
 8010c4a:	4b42      	ldr	r3, [pc, #264]	@ (8010d54 <tcp_close_shutdown+0x1b0>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	60fb      	str	r3, [r7, #12]
 8010c50:	e00c      	b.n	8010c6c <tcp_close_shutdown+0xc8>
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	68db      	ldr	r3, [r3, #12]
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d104      	bne.n	8010c66 <tcp_close_shutdown+0xc2>
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	68da      	ldr	r2, [r3, #12]
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	60da      	str	r2, [r3, #12]
 8010c64:	e005      	b.n	8010c72 <tcp_close_shutdown+0xce>
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	68db      	ldr	r3, [r3, #12]
 8010c6a:	60fb      	str	r3, [r7, #12]
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d1ef      	bne.n	8010c52 <tcp_close_shutdown+0xae>
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2200      	movs	r2, #0
 8010c76:	60da      	str	r2, [r3, #12]
 8010c78:	4b37      	ldr	r3, [pc, #220]	@ (8010d58 <tcp_close_shutdown+0x1b4>)
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010c7e:	4b37      	ldr	r3, [pc, #220]	@ (8010d5c <tcp_close_shutdown+0x1b8>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	429a      	cmp	r2, r3
 8010c86:	d102      	bne.n	8010c8e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010c88:	f003 fd5c 	bl	8014744 <tcp_trigger_input_pcb_close>
 8010c8c:	e002      	b.n	8010c94 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f7ff fed6 	bl	8010a40 <tcp_free>
      }
      return ERR_OK;
 8010c94:	2300      	movs	r3, #0
 8010c96:	e050      	b.n	8010d3a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	7d1b      	ldrb	r3, [r3, #20]
 8010c9c:	2b02      	cmp	r3, #2
 8010c9e:	d03b      	beq.n	8010d18 <tcp_close_shutdown+0x174>
 8010ca0:	2b02      	cmp	r3, #2
 8010ca2:	dc44      	bgt.n	8010d2e <tcp_close_shutdown+0x18a>
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d002      	beq.n	8010cae <tcp_close_shutdown+0x10a>
 8010ca8:	2b01      	cmp	r3, #1
 8010caa:	d02a      	beq.n	8010d02 <tcp_close_shutdown+0x15e>
 8010cac:	e03f      	b.n	8010d2e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	8adb      	ldrh	r3, [r3, #22]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d021      	beq.n	8010cfa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8010d60 <tcp_close_shutdown+0x1bc>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	d105      	bne.n	8010ccc <tcp_close_shutdown+0x128>
 8010cc0:	4b27      	ldr	r3, [pc, #156]	@ (8010d60 <tcp_close_shutdown+0x1bc>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	68db      	ldr	r3, [r3, #12]
 8010cc6:	4a26      	ldr	r2, [pc, #152]	@ (8010d60 <tcp_close_shutdown+0x1bc>)
 8010cc8:	6013      	str	r3, [r2, #0]
 8010cca:	e013      	b.n	8010cf4 <tcp_close_shutdown+0x150>
 8010ccc:	4b24      	ldr	r3, [pc, #144]	@ (8010d60 <tcp_close_shutdown+0x1bc>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	60bb      	str	r3, [r7, #8]
 8010cd2:	e00c      	b.n	8010cee <tcp_close_shutdown+0x14a>
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	68db      	ldr	r3, [r3, #12]
 8010cd8:	687a      	ldr	r2, [r7, #4]
 8010cda:	429a      	cmp	r2, r3
 8010cdc:	d104      	bne.n	8010ce8 <tcp_close_shutdown+0x144>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	68da      	ldr	r2, [r3, #12]
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	60da      	str	r2, [r3, #12]
 8010ce6:	e005      	b.n	8010cf4 <tcp_close_shutdown+0x150>
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	68db      	ldr	r3, [r3, #12]
 8010cec:	60bb      	str	r3, [r7, #8]
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d1ef      	bne.n	8010cd4 <tcp_close_shutdown+0x130>
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f7ff fea0 	bl	8010a40 <tcp_free>
      break;
 8010d00:	e01a      	b.n	8010d38 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010d02:	6878      	ldr	r0, [r7, #4]
 8010d04:	f7ff ff14 	bl	8010b30 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010d08:	6879      	ldr	r1, [r7, #4]
 8010d0a:	4816      	ldr	r0, [pc, #88]	@ (8010d64 <tcp_close_shutdown+0x1c0>)
 8010d0c:	f001 f8aa 	bl	8011e64 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f7ff feb1 	bl	8010a78 <tcp_free_listen>
      break;
 8010d16:	e00f      	b.n	8010d38 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010d18:	6879      	ldr	r1, [r7, #4]
 8010d1a:	480e      	ldr	r0, [pc, #56]	@ (8010d54 <tcp_close_shutdown+0x1b0>)
 8010d1c:	f001 f8a2 	bl	8011e64 <tcp_pcb_remove>
 8010d20:	4b0d      	ldr	r3, [pc, #52]	@ (8010d58 <tcp_close_shutdown+0x1b4>)
 8010d22:	2201      	movs	r2, #1
 8010d24:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f7ff fe8a 	bl	8010a40 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010d2c:	e004      	b.n	8010d38 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f000 f81a 	bl	8010d68 <tcp_close_shutdown_fin>
 8010d34:	4603      	mov	r3, r0
 8010d36:	e000      	b.n	8010d3a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8010d38:	2300      	movs	r3, #0
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3710      	adds	r7, #16
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bdb0      	pop	{r4, r5, r7, pc}
 8010d42:	bf00      	nop
 8010d44:	0801c62c 	.word	0x0801c62c
 8010d48:	0801c700 	.word	0x0801c700
 8010d4c:	0801c670 	.word	0x0801c670
 8010d50:	0801c720 	.word	0x0801c720
 8010d54:	24008218 	.word	0x24008218
 8010d58:	24008220 	.word	0x24008220
 8010d5c:	24008258 	.word	0x24008258
 8010d60:	24008210 	.word	0x24008210
 8010d64:	24008214 	.word	0x24008214

08010d68 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b084      	sub	sp, #16
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d106      	bne.n	8010d84 <tcp_close_shutdown_fin+0x1c>
 8010d76:	4b2e      	ldr	r3, [pc, #184]	@ (8010e30 <tcp_close_shutdown_fin+0xc8>)
 8010d78:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8010d7c:	492d      	ldr	r1, [pc, #180]	@ (8010e34 <tcp_close_shutdown_fin+0xcc>)
 8010d7e:	482e      	ldr	r0, [pc, #184]	@ (8010e38 <tcp_close_shutdown_fin+0xd0>)
 8010d80:	f008 fc2c 	bl	80195dc <iprintf>

  switch (pcb->state) {
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	7d1b      	ldrb	r3, [r3, #20]
 8010d88:	2b07      	cmp	r3, #7
 8010d8a:	d020      	beq.n	8010dce <tcp_close_shutdown_fin+0x66>
 8010d8c:	2b07      	cmp	r3, #7
 8010d8e:	dc2b      	bgt.n	8010de8 <tcp_close_shutdown_fin+0x80>
 8010d90:	2b03      	cmp	r3, #3
 8010d92:	d002      	beq.n	8010d9a <tcp_close_shutdown_fin+0x32>
 8010d94:	2b04      	cmp	r3, #4
 8010d96:	d00d      	beq.n	8010db4 <tcp_close_shutdown_fin+0x4c>
 8010d98:	e026      	b.n	8010de8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f003 fee2 	bl	8014b64 <tcp_send_fin>
 8010da0:	4603      	mov	r3, r0
 8010da2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d11f      	bne.n	8010dec <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2205      	movs	r2, #5
 8010db0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010db2:	e01b      	b.n	8010dec <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f003 fed5 	bl	8014b64 <tcp_send_fin>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d114      	bne.n	8010df0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2205      	movs	r2, #5
 8010dca:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010dcc:	e010      	b.n	8010df0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	f003 fec8 	bl	8014b64 <tcp_send_fin>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d109      	bne.n	8010df4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	2209      	movs	r2, #9
 8010de4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010de6:	e005      	b.n	8010df4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010de8:	2300      	movs	r3, #0
 8010dea:	e01c      	b.n	8010e26 <tcp_close_shutdown_fin+0xbe>
      break;
 8010dec:	bf00      	nop
 8010dee:	e002      	b.n	8010df6 <tcp_close_shutdown_fin+0x8e>
      break;
 8010df0:	bf00      	nop
 8010df2:	e000      	b.n	8010df6 <tcp_close_shutdown_fin+0x8e>
      break;
 8010df4:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d103      	bne.n	8010e06 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	f003 ffee 	bl	8014de0 <tcp_output>
 8010e04:	e00d      	b.n	8010e22 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8010e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e0e:	d108      	bne.n	8010e22 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	8b5b      	ldrh	r3, [r3, #26]
 8010e14:	f043 0308 	orr.w	r3, r3, #8
 8010e18:	b29a      	uxth	r2, r3
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	e001      	b.n	8010e26 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	3710      	adds	r7, #16
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bd80      	pop	{r7, pc}
 8010e2e:	bf00      	nop
 8010e30:	0801c62c 	.word	0x0801c62c
 8010e34:	0801c6dc 	.word	0x0801c6dc
 8010e38:	0801c670 	.word	0x0801c670

08010e3c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b082      	sub	sp, #8
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d109      	bne.n	8010e5e <tcp_close+0x22>
 8010e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8010e88 <tcp_close+0x4c>)
 8010e4c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8010e50:	490e      	ldr	r1, [pc, #56]	@ (8010e8c <tcp_close+0x50>)
 8010e52:	480f      	ldr	r0, [pc, #60]	@ (8010e90 <tcp_close+0x54>)
 8010e54:	f008 fbc2 	bl	80195dc <iprintf>
 8010e58:	f06f 030f 	mvn.w	r3, #15
 8010e5c:	e00f      	b.n	8010e7e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	7d1b      	ldrb	r3, [r3, #20]
 8010e62:	2b01      	cmp	r3, #1
 8010e64:	d006      	beq.n	8010e74 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	8b5b      	ldrh	r3, [r3, #26]
 8010e6a:	f043 0310 	orr.w	r3, r3, #16
 8010e6e:	b29a      	uxth	r2, r3
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010e74:	2101      	movs	r1, #1
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f7ff fe94 	bl	8010ba4 <tcp_close_shutdown>
 8010e7c:	4603      	mov	r3, r0
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3708      	adds	r7, #8
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
 8010e86:	bf00      	nop
 8010e88:	0801c62c 	.word	0x0801c62c
 8010e8c:	0801c73c 	.word	0x0801c73c
 8010e90:	0801c670 	.word	0x0801c670

08010e94 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b08e      	sub	sp, #56	@ 0x38
 8010e98:	af04      	add	r7, sp, #16
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d107      	bne.n	8010eb4 <tcp_abandon+0x20>
 8010ea4:	4b52      	ldr	r3, [pc, #328]	@ (8010ff0 <tcp_abandon+0x15c>)
 8010ea6:	f240 223d 	movw	r2, #573	@ 0x23d
 8010eaa:	4952      	ldr	r1, [pc, #328]	@ (8010ff4 <tcp_abandon+0x160>)
 8010eac:	4852      	ldr	r0, [pc, #328]	@ (8010ff8 <tcp_abandon+0x164>)
 8010eae:	f008 fb95 	bl	80195dc <iprintf>
 8010eb2:	e099      	b.n	8010fe8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	7d1b      	ldrb	r3, [r3, #20]
 8010eb8:	2b01      	cmp	r3, #1
 8010eba:	d106      	bne.n	8010eca <tcp_abandon+0x36>
 8010ebc:	4b4c      	ldr	r3, [pc, #304]	@ (8010ff0 <tcp_abandon+0x15c>)
 8010ebe:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8010ec2:	494e      	ldr	r1, [pc, #312]	@ (8010ffc <tcp_abandon+0x168>)
 8010ec4:	484c      	ldr	r0, [pc, #304]	@ (8010ff8 <tcp_abandon+0x164>)
 8010ec6:	f008 fb89 	bl	80195dc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	7d1b      	ldrb	r3, [r3, #20]
 8010ece:	2b0a      	cmp	r3, #10
 8010ed0:	d107      	bne.n	8010ee2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010ed2:	6879      	ldr	r1, [r7, #4]
 8010ed4:	484a      	ldr	r0, [pc, #296]	@ (8011000 <tcp_abandon+0x16c>)
 8010ed6:	f000 ffc5 	bl	8011e64 <tcp_pcb_remove>
    tcp_free(pcb);
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f7ff fdb0 	bl	8010a40 <tcp_free>
 8010ee0:	e082      	b.n	8010fe8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010eee:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ef4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010efc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	691b      	ldr	r3, [r3, #16]
 8010f02:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	7d1b      	ldrb	r3, [r3, #20]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d126      	bne.n	8010f5a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	8adb      	ldrh	r3, [r3, #22]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d02e      	beq.n	8010f72 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010f14:	4b3b      	ldr	r3, [pc, #236]	@ (8011004 <tcp_abandon+0x170>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	687a      	ldr	r2, [r7, #4]
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d105      	bne.n	8010f2a <tcp_abandon+0x96>
 8010f1e:	4b39      	ldr	r3, [pc, #228]	@ (8011004 <tcp_abandon+0x170>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	68db      	ldr	r3, [r3, #12]
 8010f24:	4a37      	ldr	r2, [pc, #220]	@ (8011004 <tcp_abandon+0x170>)
 8010f26:	6013      	str	r3, [r2, #0]
 8010f28:	e013      	b.n	8010f52 <tcp_abandon+0xbe>
 8010f2a:	4b36      	ldr	r3, [pc, #216]	@ (8011004 <tcp_abandon+0x170>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	61fb      	str	r3, [r7, #28]
 8010f30:	e00c      	b.n	8010f4c <tcp_abandon+0xb8>
 8010f32:	69fb      	ldr	r3, [r7, #28]
 8010f34:	68db      	ldr	r3, [r3, #12]
 8010f36:	687a      	ldr	r2, [r7, #4]
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d104      	bne.n	8010f46 <tcp_abandon+0xb2>
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	68da      	ldr	r2, [r3, #12]
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	60da      	str	r2, [r3, #12]
 8010f44:	e005      	b.n	8010f52 <tcp_abandon+0xbe>
 8010f46:	69fb      	ldr	r3, [r7, #28]
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	61fb      	str	r3, [r7, #28]
 8010f4c:	69fb      	ldr	r3, [r7, #28]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d1ef      	bne.n	8010f32 <tcp_abandon+0x9e>
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2200      	movs	r2, #0
 8010f56:	60da      	str	r2, [r3, #12]
 8010f58:	e00b      	b.n	8010f72 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	8adb      	ldrh	r3, [r3, #22]
 8010f62:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010f64:	6879      	ldr	r1, [r7, #4]
 8010f66:	4828      	ldr	r0, [pc, #160]	@ (8011008 <tcp_abandon+0x174>)
 8010f68:	f000 ff7c 	bl	8011e64 <tcp_pcb_remove>
 8010f6c:	4b27      	ldr	r3, [pc, #156]	@ (801100c <tcp_abandon+0x178>)
 8010f6e:	2201      	movs	r2, #1
 8010f70:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d004      	beq.n	8010f84 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f000 fd1e 	bl	80119c0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d004      	beq.n	8010f96 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f90:	4618      	mov	r0, r3
 8010f92:	f000 fd15 	bl	80119c0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d004      	beq.n	8010fa8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f000 fd0c 	bl	80119c0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d00e      	beq.n	8010fcc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010fae:	6879      	ldr	r1, [r7, #4]
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	3304      	adds	r3, #4
 8010fb4:	687a      	ldr	r2, [r7, #4]
 8010fb6:	8b12      	ldrh	r2, [r2, #24]
 8010fb8:	9202      	str	r2, [sp, #8]
 8010fba:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010fbc:	9201      	str	r2, [sp, #4]
 8010fbe:	9300      	str	r3, [sp, #0]
 8010fc0:	460b      	mov	r3, r1
 8010fc2:	697a      	ldr	r2, [r7, #20]
 8010fc4:	69b9      	ldr	r1, [r7, #24]
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f004 fcbe 	bl	8015948 <tcp_rst>
    }
    last_state = pcb->state;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	7d1b      	ldrb	r3, [r3, #20]
 8010fd0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f7ff fd34 	bl	8010a40 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010fd8:	693b      	ldr	r3, [r7, #16]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d004      	beq.n	8010fe8 <tcp_abandon+0x154>
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	f06f 010c 	mvn.w	r1, #12
 8010fe4:	68f8      	ldr	r0, [r7, #12]
 8010fe6:	4798      	blx	r3
  }
}
 8010fe8:	3728      	adds	r7, #40	@ 0x28
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}
 8010fee:	bf00      	nop
 8010ff0:	0801c62c 	.word	0x0801c62c
 8010ff4:	0801c770 	.word	0x0801c770
 8010ff8:	0801c670 	.word	0x0801c670
 8010ffc:	0801c78c 	.word	0x0801c78c
 8011000:	2400821c 	.word	0x2400821c
 8011004:	24008210 	.word	0x24008210
 8011008:	24008218 	.word	0x24008218
 801100c:	24008220 	.word	0x24008220

08011010 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b082      	sub	sp, #8
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011018:	2101      	movs	r1, #1
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f7ff ff3a 	bl	8010e94 <tcp_abandon>
}
 8011020:	bf00      	nop
 8011022:	3708      	adds	r7, #8
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}

08011028 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b084      	sub	sp, #16
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d106      	bne.n	8011044 <tcp_update_rcv_ann_wnd+0x1c>
 8011036:	4b25      	ldr	r3, [pc, #148]	@ (80110cc <tcp_update_rcv_ann_wnd+0xa4>)
 8011038:	f240 32a6 	movw	r2, #934	@ 0x3a6
 801103c:	4924      	ldr	r1, [pc, #144]	@ (80110d0 <tcp_update_rcv_ann_wnd+0xa8>)
 801103e:	4825      	ldr	r0, [pc, #148]	@ (80110d4 <tcp_update_rcv_ann_wnd+0xac>)
 8011040:	f008 facc 	bl	80195dc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011048:	687a      	ldr	r2, [r7, #4]
 801104a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801104c:	4413      	add	r3, r2
 801104e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011054:	687a      	ldr	r2, [r7, #4]
 8011056:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8011058:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 801105c:	bf28      	it	cs
 801105e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8011062:	b292      	uxth	r2, r2
 8011064:	4413      	add	r3, r2
 8011066:	68fa      	ldr	r2, [r7, #12]
 8011068:	1ad3      	subs	r3, r2, r3
 801106a:	2b00      	cmp	r3, #0
 801106c:	db08      	blt.n	8011080 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801107a:	68fa      	ldr	r2, [r7, #12]
 801107c:	1ad3      	subs	r3, r2, r3
 801107e:	e020      	b.n	80110c2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011088:	1ad3      	subs	r3, r2, r3
 801108a:	2b00      	cmp	r3, #0
 801108c:	dd03      	ble.n	8011096 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2200      	movs	r2, #0
 8011092:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011094:	e014      	b.n	80110c0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801109e:	1ad3      	subs	r3, r2, r3
 80110a0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80110a8:	d306      	bcc.n	80110b8 <tcp_update_rcv_ann_wnd+0x90>
 80110aa:	4b08      	ldr	r3, [pc, #32]	@ (80110cc <tcp_update_rcv_ann_wnd+0xa4>)
 80110ac:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80110b0:	4909      	ldr	r1, [pc, #36]	@ (80110d8 <tcp_update_rcv_ann_wnd+0xb0>)
 80110b2:	4808      	ldr	r0, [pc, #32]	@ (80110d4 <tcp_update_rcv_ann_wnd+0xac>)
 80110b4:	f008 fa92 	bl	80195dc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	b29a      	uxth	r2, r3
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80110c0:	2300      	movs	r3, #0
  }
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3710      	adds	r7, #16
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
 80110ca:	bf00      	nop
 80110cc:	0801c62c 	.word	0x0801c62c
 80110d0:	0801c888 	.word	0x0801c888
 80110d4:	0801c670 	.word	0x0801c670
 80110d8:	0801c8ac 	.word	0x0801c8ac

080110dc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b084      	sub	sp, #16
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	460b      	mov	r3, r1
 80110e6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d107      	bne.n	80110fe <tcp_recved+0x22>
 80110ee:	4b1f      	ldr	r3, [pc, #124]	@ (801116c <tcp_recved+0x90>)
 80110f0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80110f4:	491e      	ldr	r1, [pc, #120]	@ (8011170 <tcp_recved+0x94>)
 80110f6:	481f      	ldr	r0, [pc, #124]	@ (8011174 <tcp_recved+0x98>)
 80110f8:	f008 fa70 	bl	80195dc <iprintf>
 80110fc:	e032      	b.n	8011164 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	7d1b      	ldrb	r3, [r3, #20]
 8011102:	2b01      	cmp	r3, #1
 8011104:	d106      	bne.n	8011114 <tcp_recved+0x38>
 8011106:	4b19      	ldr	r3, [pc, #100]	@ (801116c <tcp_recved+0x90>)
 8011108:	f240 32d2 	movw	r2, #978	@ 0x3d2
 801110c:	491a      	ldr	r1, [pc, #104]	@ (8011178 <tcp_recved+0x9c>)
 801110e:	4819      	ldr	r0, [pc, #100]	@ (8011174 <tcp_recved+0x98>)
 8011110:	f008 fa64 	bl	80195dc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011118:	887b      	ldrh	r3, [r7, #2]
 801111a:	4413      	add	r3, r2
 801111c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801111e:	89fb      	ldrh	r3, [r7, #14]
 8011120:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011124:	d804      	bhi.n	8011130 <tcp_recved+0x54>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801112a:	89fa      	ldrh	r2, [r7, #14]
 801112c:	429a      	cmp	r2, r3
 801112e:	d204      	bcs.n	801113a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8011136:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011138:	e002      	b.n	8011140 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	89fa      	ldrh	r2, [r7, #14]
 801113e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f7ff ff71 	bl	8011028 <tcp_update_rcv_ann_wnd>
 8011146:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801114e:	d309      	bcc.n	8011164 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	8b5b      	ldrh	r3, [r3, #26]
 8011154:	f043 0302 	orr.w	r3, r3, #2
 8011158:	b29a      	uxth	r2, r3
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801115e:	6878      	ldr	r0, [r7, #4]
 8011160:	f003 fe3e 	bl	8014de0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011164:	3710      	adds	r7, #16
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}
 801116a:	bf00      	nop
 801116c:	0801c62c 	.word	0x0801c62c
 8011170:	0801c8c8 	.word	0x0801c8c8
 8011174:	0801c670 	.word	0x0801c670
 8011178:	0801c8e0 	.word	0x0801c8e0

0801117c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801117c:	b5b0      	push	{r4, r5, r7, lr}
 801117e:	b090      	sub	sp, #64	@ 0x40
 8011180:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011182:	2300      	movs	r3, #0
 8011184:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8011188:	4b95      	ldr	r3, [pc, #596]	@ (80113e0 <tcp_slowtmr+0x264>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	3301      	adds	r3, #1
 801118e:	4a94      	ldr	r2, [pc, #592]	@ (80113e0 <tcp_slowtmr+0x264>)
 8011190:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011192:	4b94      	ldr	r3, [pc, #592]	@ (80113e4 <tcp_slowtmr+0x268>)
 8011194:	781b      	ldrb	r3, [r3, #0]
 8011196:	3301      	adds	r3, #1
 8011198:	b2da      	uxtb	r2, r3
 801119a:	4b92      	ldr	r3, [pc, #584]	@ (80113e4 <tcp_slowtmr+0x268>)
 801119c:	701a      	strb	r2, [r3, #0]
 801119e:	e000      	b.n	80111a2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80111a0:	bf00      	nop
  prev = NULL;
 80111a2:	2300      	movs	r3, #0
 80111a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80111a6:	4b90      	ldr	r3, [pc, #576]	@ (80113e8 <tcp_slowtmr+0x26c>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80111ac:	e29d      	b.n	80116ea <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80111ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111b0:	7d1b      	ldrb	r3, [r3, #20]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d106      	bne.n	80111c4 <tcp_slowtmr+0x48>
 80111b6:	4b8d      	ldr	r3, [pc, #564]	@ (80113ec <tcp_slowtmr+0x270>)
 80111b8:	f240 42be 	movw	r2, #1214	@ 0x4be
 80111bc:	498c      	ldr	r1, [pc, #560]	@ (80113f0 <tcp_slowtmr+0x274>)
 80111be:	488d      	ldr	r0, [pc, #564]	@ (80113f4 <tcp_slowtmr+0x278>)
 80111c0:	f008 fa0c 	bl	80195dc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80111c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111c6:	7d1b      	ldrb	r3, [r3, #20]
 80111c8:	2b01      	cmp	r3, #1
 80111ca:	d106      	bne.n	80111da <tcp_slowtmr+0x5e>
 80111cc:	4b87      	ldr	r3, [pc, #540]	@ (80113ec <tcp_slowtmr+0x270>)
 80111ce:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80111d2:	4989      	ldr	r1, [pc, #548]	@ (80113f8 <tcp_slowtmr+0x27c>)
 80111d4:	4887      	ldr	r0, [pc, #540]	@ (80113f4 <tcp_slowtmr+0x278>)
 80111d6:	f008 fa01 	bl	80195dc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80111da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111dc:	7d1b      	ldrb	r3, [r3, #20]
 80111de:	2b0a      	cmp	r3, #10
 80111e0:	d106      	bne.n	80111f0 <tcp_slowtmr+0x74>
 80111e2:	4b82      	ldr	r3, [pc, #520]	@ (80113ec <tcp_slowtmr+0x270>)
 80111e4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80111e8:	4984      	ldr	r1, [pc, #528]	@ (80113fc <tcp_slowtmr+0x280>)
 80111ea:	4882      	ldr	r0, [pc, #520]	@ (80113f4 <tcp_slowtmr+0x278>)
 80111ec:	f008 f9f6 	bl	80195dc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80111f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111f2:	7f9a      	ldrb	r2, [r3, #30]
 80111f4:	4b7b      	ldr	r3, [pc, #492]	@ (80113e4 <tcp_slowtmr+0x268>)
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d105      	bne.n	8011208 <tcp_slowtmr+0x8c>
      prev = pcb;
 80111fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011202:	68db      	ldr	r3, [r3, #12]
 8011204:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8011206:	e270      	b.n	80116ea <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8011208:	4b76      	ldr	r3, [pc, #472]	@ (80113e4 <tcp_slowtmr+0x268>)
 801120a:	781a      	ldrb	r2, [r3, #0]
 801120c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801120e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8011210:	2300      	movs	r3, #0
 8011212:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8011216:	2300      	movs	r3, #0
 8011218:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801121c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801121e:	7d1b      	ldrb	r3, [r3, #20]
 8011220:	2b02      	cmp	r3, #2
 8011222:	d10a      	bne.n	801123a <tcp_slowtmr+0xbe>
 8011224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011226:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801122a:	2b05      	cmp	r3, #5
 801122c:	d905      	bls.n	801123a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801122e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011232:	3301      	adds	r3, #1
 8011234:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011238:	e11e      	b.n	8011478 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801123a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801123c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011240:	2b0b      	cmp	r3, #11
 8011242:	d905      	bls.n	8011250 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8011244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011248:	3301      	adds	r3, #1
 801124a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801124e:	e113      	b.n	8011478 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8011250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011252:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011256:	2b00      	cmp	r3, #0
 8011258:	d075      	beq.n	8011346 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801125a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801125c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801125e:	2b00      	cmp	r3, #0
 8011260:	d006      	beq.n	8011270 <tcp_slowtmr+0xf4>
 8011262:	4b62      	ldr	r3, [pc, #392]	@ (80113ec <tcp_slowtmr+0x270>)
 8011264:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8011268:	4965      	ldr	r1, [pc, #404]	@ (8011400 <tcp_slowtmr+0x284>)
 801126a:	4862      	ldr	r0, [pc, #392]	@ (80113f4 <tcp_slowtmr+0x278>)
 801126c:	f008 f9b6 	bl	80195dc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011274:	2b00      	cmp	r3, #0
 8011276:	d106      	bne.n	8011286 <tcp_slowtmr+0x10a>
 8011278:	4b5c      	ldr	r3, [pc, #368]	@ (80113ec <tcp_slowtmr+0x270>)
 801127a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 801127e:	4961      	ldr	r1, [pc, #388]	@ (8011404 <tcp_slowtmr+0x288>)
 8011280:	485c      	ldr	r0, [pc, #368]	@ (80113f4 <tcp_slowtmr+0x278>)
 8011282:	f008 f9ab 	bl	80195dc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011288:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801128c:	2b0b      	cmp	r3, #11
 801128e:	d905      	bls.n	801129c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8011290:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011294:	3301      	adds	r3, #1
 8011296:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801129a:	e0ed      	b.n	8011478 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801129c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801129e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80112a2:	3b01      	subs	r3, #1
 80112a4:	4a58      	ldr	r2, [pc, #352]	@ (8011408 <tcp_slowtmr+0x28c>)
 80112a6:	5cd3      	ldrb	r3, [r2, r3]
 80112a8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80112aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80112b0:	7c7a      	ldrb	r2, [r7, #17]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d907      	bls.n	80112c6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80112b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112b8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80112bc:	3301      	adds	r3, #1
 80112be:	b2da      	uxtb	r2, r3
 80112c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112c2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80112c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112c8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80112cc:	7c7a      	ldrb	r2, [r7, #17]
 80112ce:	429a      	cmp	r2, r3
 80112d0:	f200 80d2 	bhi.w	8011478 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80112d4:	2301      	movs	r3, #1
 80112d6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80112d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d108      	bne.n	80112f4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80112e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80112e4:	f004 fc24 	bl	8015b30 <tcp_zero_window_probe>
 80112e8:	4603      	mov	r3, r0
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d014      	beq.n	8011318 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80112ee:	2300      	movs	r3, #0
 80112f0:	623b      	str	r3, [r7, #32]
 80112f2:	e011      	b.n	8011318 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80112f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80112fa:	4619      	mov	r1, r3
 80112fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80112fe:	f003 fae9 	bl	80148d4 <tcp_split_unsent_seg>
 8011302:	4603      	mov	r3, r0
 8011304:	2b00      	cmp	r3, #0
 8011306:	d107      	bne.n	8011318 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8011308:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801130a:	f003 fd69 	bl	8014de0 <tcp_output>
 801130e:	4603      	mov	r3, r0
 8011310:	2b00      	cmp	r3, #0
 8011312:	d101      	bne.n	8011318 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8011314:	2300      	movs	r3, #0
 8011316:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8011318:	6a3b      	ldr	r3, [r7, #32]
 801131a:	2b00      	cmp	r3, #0
 801131c:	f000 80ac 	beq.w	8011478 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8011320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011322:	2200      	movs	r2, #0
 8011324:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801132a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801132e:	2b06      	cmp	r3, #6
 8011330:	f200 80a2 	bhi.w	8011478 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8011334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011336:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801133a:	3301      	adds	r3, #1
 801133c:	b2da      	uxtb	r2, r3
 801133e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011340:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8011344:	e098      	b.n	8011478 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011348:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801134c:	2b00      	cmp	r3, #0
 801134e:	db0f      	blt.n	8011370 <tcp_slowtmr+0x1f4>
 8011350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011352:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011356:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801135a:	4293      	cmp	r3, r2
 801135c:	d008      	beq.n	8011370 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801135e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011360:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011364:	b29b      	uxth	r3, r3
 8011366:	3301      	adds	r3, #1
 8011368:	b29b      	uxth	r3, r3
 801136a:	b21a      	sxth	r2, r3
 801136c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801136e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8011370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011372:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8011376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011378:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801137c:	429a      	cmp	r2, r3
 801137e:	db7b      	blt.n	8011478 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011380:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011382:	f004 f821 	bl	80153c8 <tcp_rexmit_rto_prepare>
 8011386:	4603      	mov	r3, r0
 8011388:	2b00      	cmp	r3, #0
 801138a:	d007      	beq.n	801139c <tcp_slowtmr+0x220>
 801138c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801138e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011390:	2b00      	cmp	r3, #0
 8011392:	d171      	bne.n	8011478 <tcp_slowtmr+0x2fc>
 8011394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011398:	2b00      	cmp	r3, #0
 801139a:	d06d      	beq.n	8011478 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 801139c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801139e:	7d1b      	ldrb	r3, [r3, #20]
 80113a0:	2b02      	cmp	r3, #2
 80113a2:	d03a      	beq.n	801141a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80113a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80113aa:	2b0c      	cmp	r3, #12
 80113ac:	bf28      	it	cs
 80113ae:	230c      	movcs	r3, #12
 80113b0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80113b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80113b8:	10db      	asrs	r3, r3, #3
 80113ba:	b21b      	sxth	r3, r3
 80113bc:	461a      	mov	r2, r3
 80113be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80113c4:	4413      	add	r3, r2
 80113c6:	7efa      	ldrb	r2, [r7, #27]
 80113c8:	4910      	ldr	r1, [pc, #64]	@ (801140c <tcp_slowtmr+0x290>)
 80113ca:	5c8a      	ldrb	r2, [r1, r2]
 80113cc:	4093      	lsls	r3, r2
 80113ce:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80113d0:	697b      	ldr	r3, [r7, #20]
 80113d2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80113d6:	4293      	cmp	r3, r2
 80113d8:	dc1a      	bgt.n	8011410 <tcp_slowtmr+0x294>
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	b21a      	sxth	r2, r3
 80113de:	e019      	b.n	8011414 <tcp_slowtmr+0x298>
 80113e0:	2400820c 	.word	0x2400820c
 80113e4:	24008222 	.word	0x24008222
 80113e8:	24008218 	.word	0x24008218
 80113ec:	0801c62c 	.word	0x0801c62c
 80113f0:	0801c970 	.word	0x0801c970
 80113f4:	0801c670 	.word	0x0801c670
 80113f8:	0801c99c 	.word	0x0801c99c
 80113fc:	0801c9c8 	.word	0x0801c9c8
 8011400:	0801c9f8 	.word	0x0801c9f8
 8011404:	0801ca2c 	.word	0x0801ca2c
 8011408:	0801e694 	.word	0x0801e694
 801140c:	0801e684 	.word	0x0801e684
 8011410:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8011414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011416:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801141a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801141c:	2200      	movs	r2, #0
 801141e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011422:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011428:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801142c:	4293      	cmp	r3, r2
 801142e:	bf28      	it	cs
 8011430:	4613      	movcs	r3, r2
 8011432:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011434:	8a7b      	ldrh	r3, [r7, #18]
 8011436:	085b      	lsrs	r3, r3, #1
 8011438:	b29a      	uxth	r2, r3
 801143a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801143c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011442:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011448:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801144a:	005b      	lsls	r3, r3, #1
 801144c:	b29b      	uxth	r3, r3
 801144e:	429a      	cmp	r2, r3
 8011450:	d206      	bcs.n	8011460 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011454:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011456:	005b      	lsls	r3, r3, #1
 8011458:	b29a      	uxth	r2, r3
 801145a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801145c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8011460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011462:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8011464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011466:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801146a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801146c:	2200      	movs	r2, #0
 801146e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8011472:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011474:	f004 f818 	bl	80154a8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8011478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801147a:	7d1b      	ldrb	r3, [r3, #20]
 801147c:	2b06      	cmp	r3, #6
 801147e:	d111      	bne.n	80114a4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8011480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011482:	8b5b      	ldrh	r3, [r3, #26]
 8011484:	f003 0310 	and.w	r3, r3, #16
 8011488:	2b00      	cmp	r3, #0
 801148a:	d00b      	beq.n	80114a4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801148c:	4b9c      	ldr	r3, [pc, #624]	@ (8011700 <tcp_slowtmr+0x584>)
 801148e:	681a      	ldr	r2, [r3, #0]
 8011490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011492:	6a1b      	ldr	r3, [r3, #32]
 8011494:	1ad3      	subs	r3, r2, r3
 8011496:	2b28      	cmp	r3, #40	@ 0x28
 8011498:	d904      	bls.n	80114a4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801149a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801149e:	3301      	adds	r3, #1
 80114a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80114a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114a6:	7a5b      	ldrb	r3, [r3, #9]
 80114a8:	f003 0308 	and.w	r3, r3, #8
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d04a      	beq.n	8011546 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80114b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114b2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80114b4:	2b04      	cmp	r3, #4
 80114b6:	d003      	beq.n	80114c0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80114b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114ba:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80114bc:	2b07      	cmp	r3, #7
 80114be:	d142      	bne.n	8011546 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80114c0:	4b8f      	ldr	r3, [pc, #572]	@ (8011700 <tcp_slowtmr+0x584>)
 80114c2:	681a      	ldr	r2, [r3, #0]
 80114c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114c6:	6a1b      	ldr	r3, [r3, #32]
 80114c8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80114ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114cc:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80114d0:	4b8c      	ldr	r3, [pc, #560]	@ (8011704 <tcp_slowtmr+0x588>)
 80114d2:	440b      	add	r3, r1
 80114d4:	498c      	ldr	r1, [pc, #560]	@ (8011708 <tcp_slowtmr+0x58c>)
 80114d6:	fba1 1303 	umull	r1, r3, r1, r3
 80114da:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80114dc:	429a      	cmp	r2, r3
 80114de:	d90a      	bls.n	80114f6 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80114e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80114e4:	3301      	adds	r3, #1
 80114e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80114ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80114ee:	3301      	adds	r3, #1
 80114f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80114f4:	e027      	b.n	8011546 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80114f6:	4b82      	ldr	r3, [pc, #520]	@ (8011700 <tcp_slowtmr+0x584>)
 80114f8:	681a      	ldr	r2, [r3, #0]
 80114fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114fc:	6a1b      	ldr	r3, [r3, #32]
 80114fe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011502:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8011506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011508:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801150c:	4618      	mov	r0, r3
 801150e:	4b7f      	ldr	r3, [pc, #508]	@ (801170c <tcp_slowtmr+0x590>)
 8011510:	fb00 f303 	mul.w	r3, r0, r3
 8011514:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011516:	497c      	ldr	r1, [pc, #496]	@ (8011708 <tcp_slowtmr+0x58c>)
 8011518:	fba1 1303 	umull	r1, r3, r1, r3
 801151c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801151e:	429a      	cmp	r2, r3
 8011520:	d911      	bls.n	8011546 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8011522:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011524:	f004 fac4 	bl	8015ab0 <tcp_keepalive>
 8011528:	4603      	mov	r3, r0
 801152a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801152e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8011532:	2b00      	cmp	r3, #0
 8011534:	d107      	bne.n	8011546 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8011536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011538:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801153c:	3301      	adds	r3, #1
 801153e:	b2da      	uxtb	r2, r3
 8011540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011542:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8011546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801154a:	2b00      	cmp	r3, #0
 801154c:	d011      	beq.n	8011572 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801154e:	4b6c      	ldr	r3, [pc, #432]	@ (8011700 <tcp_slowtmr+0x584>)
 8011550:	681a      	ldr	r2, [r3, #0]
 8011552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011554:	6a1b      	ldr	r3, [r3, #32]
 8011556:	1ad2      	subs	r2, r2, r3
 8011558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801155a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801155e:	4619      	mov	r1, r3
 8011560:	460b      	mov	r3, r1
 8011562:	005b      	lsls	r3, r3, #1
 8011564:	440b      	add	r3, r1
 8011566:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011568:	429a      	cmp	r2, r3
 801156a:	d302      	bcc.n	8011572 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 801156c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801156e:	f000 fddd 	bl	801212c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8011572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011574:	7d1b      	ldrb	r3, [r3, #20]
 8011576:	2b03      	cmp	r3, #3
 8011578:	d10b      	bne.n	8011592 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801157a:	4b61      	ldr	r3, [pc, #388]	@ (8011700 <tcp_slowtmr+0x584>)
 801157c:	681a      	ldr	r2, [r3, #0]
 801157e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011580:	6a1b      	ldr	r3, [r3, #32]
 8011582:	1ad3      	subs	r3, r2, r3
 8011584:	2b28      	cmp	r3, #40	@ 0x28
 8011586:	d904      	bls.n	8011592 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8011588:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801158c:	3301      	adds	r3, #1
 801158e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8011592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011594:	7d1b      	ldrb	r3, [r3, #20]
 8011596:	2b09      	cmp	r3, #9
 8011598:	d10b      	bne.n	80115b2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801159a:	4b59      	ldr	r3, [pc, #356]	@ (8011700 <tcp_slowtmr+0x584>)
 801159c:	681a      	ldr	r2, [r3, #0]
 801159e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a0:	6a1b      	ldr	r3, [r3, #32]
 80115a2:	1ad3      	subs	r3, r2, r3
 80115a4:	2bf0      	cmp	r3, #240	@ 0xf0
 80115a6:	d904      	bls.n	80115b2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80115a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80115ac:	3301      	adds	r3, #1
 80115ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80115b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d060      	beq.n	801167c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80115ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80115c0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80115c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80115c4:	f000 fbfe 	bl	8011dc4 <tcp_pcb_purge>
      if (prev != NULL) {
 80115c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d010      	beq.n	80115f0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80115ce:	4b50      	ldr	r3, [pc, #320]	@ (8011710 <tcp_slowtmr+0x594>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80115d4:	429a      	cmp	r2, r3
 80115d6:	d106      	bne.n	80115e6 <tcp_slowtmr+0x46a>
 80115d8:	4b4e      	ldr	r3, [pc, #312]	@ (8011714 <tcp_slowtmr+0x598>)
 80115da:	f240 526d 	movw	r2, #1389	@ 0x56d
 80115de:	494e      	ldr	r1, [pc, #312]	@ (8011718 <tcp_slowtmr+0x59c>)
 80115e0:	484e      	ldr	r0, [pc, #312]	@ (801171c <tcp_slowtmr+0x5a0>)
 80115e2:	f007 fffb 	bl	80195dc <iprintf>
        prev->next = pcb->next;
 80115e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115e8:	68da      	ldr	r2, [r3, #12]
 80115ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115ec:	60da      	str	r2, [r3, #12]
 80115ee:	e00f      	b.n	8011610 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80115f0:	4b47      	ldr	r3, [pc, #284]	@ (8011710 <tcp_slowtmr+0x594>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d006      	beq.n	8011608 <tcp_slowtmr+0x48c>
 80115fa:	4b46      	ldr	r3, [pc, #280]	@ (8011714 <tcp_slowtmr+0x598>)
 80115fc:	f240 5271 	movw	r2, #1393	@ 0x571
 8011600:	4947      	ldr	r1, [pc, #284]	@ (8011720 <tcp_slowtmr+0x5a4>)
 8011602:	4846      	ldr	r0, [pc, #280]	@ (801171c <tcp_slowtmr+0x5a0>)
 8011604:	f007 ffea 	bl	80195dc <iprintf>
        tcp_active_pcbs = pcb->next;
 8011608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801160a:	68db      	ldr	r3, [r3, #12]
 801160c:	4a40      	ldr	r2, [pc, #256]	@ (8011710 <tcp_slowtmr+0x594>)
 801160e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8011610:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011614:	2b00      	cmp	r3, #0
 8011616:	d013      	beq.n	8011640 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801161a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801161c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801161e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011620:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8011622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011624:	3304      	adds	r3, #4
 8011626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011628:	8ad2      	ldrh	r2, [r2, #22]
 801162a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801162c:	8b09      	ldrh	r1, [r1, #24]
 801162e:	9102      	str	r1, [sp, #8]
 8011630:	9201      	str	r2, [sp, #4]
 8011632:	9300      	str	r3, [sp, #0]
 8011634:	462b      	mov	r3, r5
 8011636:	4622      	mov	r2, r4
 8011638:	4601      	mov	r1, r0
 801163a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801163c:	f004 f984 	bl	8015948 <tcp_rst>
      err_arg = pcb->callback_arg;
 8011640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011642:	691b      	ldr	r3, [r3, #16]
 8011644:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011648:	7d1b      	ldrb	r3, [r3, #20]
 801164a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801164c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801164e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011652:	68db      	ldr	r3, [r3, #12]
 8011654:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8011656:	6838      	ldr	r0, [r7, #0]
 8011658:	f7ff f9f2 	bl	8010a40 <tcp_free>
      tcp_active_pcbs_changed = 0;
 801165c:	4b31      	ldr	r3, [pc, #196]	@ (8011724 <tcp_slowtmr+0x5a8>)
 801165e:	2200      	movs	r2, #0
 8011660:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d004      	beq.n	8011672 <tcp_slowtmr+0x4f6>
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	f06f 010c 	mvn.w	r1, #12
 801166e:	68b8      	ldr	r0, [r7, #8]
 8011670:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011672:	4b2c      	ldr	r3, [pc, #176]	@ (8011724 <tcp_slowtmr+0x5a8>)
 8011674:	781b      	ldrb	r3, [r3, #0]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d037      	beq.n	80116ea <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801167a:	e592      	b.n	80111a2 <tcp_slowtmr+0x26>
      prev = pcb;
 801167c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801167e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011682:	68db      	ldr	r3, [r3, #12]
 8011684:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8011686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011688:	7f1b      	ldrb	r3, [r3, #28]
 801168a:	3301      	adds	r3, #1
 801168c:	b2da      	uxtb	r2, r3
 801168e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011690:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011694:	7f1a      	ldrb	r2, [r3, #28]
 8011696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011698:	7f5b      	ldrb	r3, [r3, #29]
 801169a:	429a      	cmp	r2, r3
 801169c:	d325      	bcc.n	80116ea <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801169e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116a0:	2200      	movs	r2, #0
 80116a2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80116a4:	4b1f      	ldr	r3, [pc, #124]	@ (8011724 <tcp_slowtmr+0x5a8>)
 80116a6:	2200      	movs	r2, #0
 80116a8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80116aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d00b      	beq.n	80116cc <tcp_slowtmr+0x550>
 80116b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80116ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80116bc:	6912      	ldr	r2, [r2, #16]
 80116be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80116c0:	4610      	mov	r0, r2
 80116c2:	4798      	blx	r3
 80116c4:	4603      	mov	r3, r0
 80116c6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80116ca:	e002      	b.n	80116d2 <tcp_slowtmr+0x556>
 80116cc:	2300      	movs	r3, #0
 80116ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80116d2:	4b14      	ldr	r3, [pc, #80]	@ (8011724 <tcp_slowtmr+0x5a8>)
 80116d4:	781b      	ldrb	r3, [r3, #0]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	f47f ad62 	bne.w	80111a0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80116dc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d102      	bne.n	80116ea <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80116e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80116e6:	f003 fb7b 	bl	8014de0 <tcp_output>
  while (pcb != NULL) {
 80116ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	f47f ad5e 	bne.w	80111ae <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80116f2:	2300      	movs	r3, #0
 80116f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80116f6:	4b0c      	ldr	r3, [pc, #48]	@ (8011728 <tcp_slowtmr+0x5ac>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80116fc:	e069      	b.n	80117d2 <tcp_slowtmr+0x656>
 80116fe:	bf00      	nop
 8011700:	2400820c 	.word	0x2400820c
 8011704:	000a4cb8 	.word	0x000a4cb8
 8011708:	10624dd3 	.word	0x10624dd3
 801170c:	000124f8 	.word	0x000124f8
 8011710:	24008218 	.word	0x24008218
 8011714:	0801c62c 	.word	0x0801c62c
 8011718:	0801ca64 	.word	0x0801ca64
 801171c:	0801c670 	.word	0x0801c670
 8011720:	0801ca90 	.word	0x0801ca90
 8011724:	24008220 	.word	0x24008220
 8011728:	2400821c 	.word	0x2400821c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801172c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801172e:	7d1b      	ldrb	r3, [r3, #20]
 8011730:	2b0a      	cmp	r3, #10
 8011732:	d006      	beq.n	8011742 <tcp_slowtmr+0x5c6>
 8011734:	4b2b      	ldr	r3, [pc, #172]	@ (80117e4 <tcp_slowtmr+0x668>)
 8011736:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801173a:	492b      	ldr	r1, [pc, #172]	@ (80117e8 <tcp_slowtmr+0x66c>)
 801173c:	482b      	ldr	r0, [pc, #172]	@ (80117ec <tcp_slowtmr+0x670>)
 801173e:	f007 ff4d 	bl	80195dc <iprintf>
    pcb_remove = 0;
 8011742:	2300      	movs	r3, #0
 8011744:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011748:	4b29      	ldr	r3, [pc, #164]	@ (80117f0 <tcp_slowtmr+0x674>)
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801174e:	6a1b      	ldr	r3, [r3, #32]
 8011750:	1ad3      	subs	r3, r2, r3
 8011752:	2bf0      	cmp	r3, #240	@ 0xf0
 8011754:	d904      	bls.n	8011760 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8011756:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801175a:	3301      	adds	r3, #1
 801175c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011760:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011764:	2b00      	cmp	r3, #0
 8011766:	d02f      	beq.n	80117c8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011768:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801176a:	f000 fb2b 	bl	8011dc4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801176e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011770:	2b00      	cmp	r3, #0
 8011772:	d010      	beq.n	8011796 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011774:	4b1f      	ldr	r3, [pc, #124]	@ (80117f4 <tcp_slowtmr+0x678>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801177a:	429a      	cmp	r2, r3
 801177c:	d106      	bne.n	801178c <tcp_slowtmr+0x610>
 801177e:	4b19      	ldr	r3, [pc, #100]	@ (80117e4 <tcp_slowtmr+0x668>)
 8011780:	f240 52af 	movw	r2, #1455	@ 0x5af
 8011784:	491c      	ldr	r1, [pc, #112]	@ (80117f8 <tcp_slowtmr+0x67c>)
 8011786:	4819      	ldr	r0, [pc, #100]	@ (80117ec <tcp_slowtmr+0x670>)
 8011788:	f007 ff28 	bl	80195dc <iprintf>
        prev->next = pcb->next;
 801178c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801178e:	68da      	ldr	r2, [r3, #12]
 8011790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011792:	60da      	str	r2, [r3, #12]
 8011794:	e00f      	b.n	80117b6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011796:	4b17      	ldr	r3, [pc, #92]	@ (80117f4 <tcp_slowtmr+0x678>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801179c:	429a      	cmp	r2, r3
 801179e:	d006      	beq.n	80117ae <tcp_slowtmr+0x632>
 80117a0:	4b10      	ldr	r3, [pc, #64]	@ (80117e4 <tcp_slowtmr+0x668>)
 80117a2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80117a6:	4915      	ldr	r1, [pc, #84]	@ (80117fc <tcp_slowtmr+0x680>)
 80117a8:	4810      	ldr	r0, [pc, #64]	@ (80117ec <tcp_slowtmr+0x670>)
 80117aa:	f007 ff17 	bl	80195dc <iprintf>
        tcp_tw_pcbs = pcb->next;
 80117ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117b0:	68db      	ldr	r3, [r3, #12]
 80117b2:	4a10      	ldr	r2, [pc, #64]	@ (80117f4 <tcp_slowtmr+0x678>)
 80117b4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80117b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117b8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80117ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117bc:	68db      	ldr	r3, [r3, #12]
 80117be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80117c0:	69f8      	ldr	r0, [r7, #28]
 80117c2:	f7ff f93d 	bl	8010a40 <tcp_free>
 80117c6:	e004      	b.n	80117d2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80117c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80117cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ce:	68db      	ldr	r3, [r3, #12]
 80117d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80117d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d1a9      	bne.n	801172c <tcp_slowtmr+0x5b0>
    }
  }
}
 80117d8:	bf00      	nop
 80117da:	bf00      	nop
 80117dc:	3730      	adds	r7, #48	@ 0x30
 80117de:	46bd      	mov	sp, r7
 80117e0:	bdb0      	pop	{r4, r5, r7, pc}
 80117e2:	bf00      	nop
 80117e4:	0801c62c 	.word	0x0801c62c
 80117e8:	0801cabc 	.word	0x0801cabc
 80117ec:	0801c670 	.word	0x0801c670
 80117f0:	2400820c 	.word	0x2400820c
 80117f4:	2400821c 	.word	0x2400821c
 80117f8:	0801caec 	.word	0x0801caec
 80117fc:	0801cb14 	.word	0x0801cb14

08011800 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b082      	sub	sp, #8
 8011804:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011806:	4b2d      	ldr	r3, [pc, #180]	@ (80118bc <tcp_fasttmr+0xbc>)
 8011808:	781b      	ldrb	r3, [r3, #0]
 801180a:	3301      	adds	r3, #1
 801180c:	b2da      	uxtb	r2, r3
 801180e:	4b2b      	ldr	r3, [pc, #172]	@ (80118bc <tcp_fasttmr+0xbc>)
 8011810:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011812:	4b2b      	ldr	r3, [pc, #172]	@ (80118c0 <tcp_fasttmr+0xc0>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011818:	e048      	b.n	80118ac <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	7f9a      	ldrb	r2, [r3, #30]
 801181e:	4b27      	ldr	r3, [pc, #156]	@ (80118bc <tcp_fasttmr+0xbc>)
 8011820:	781b      	ldrb	r3, [r3, #0]
 8011822:	429a      	cmp	r2, r3
 8011824:	d03f      	beq.n	80118a6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011826:	4b25      	ldr	r3, [pc, #148]	@ (80118bc <tcp_fasttmr+0xbc>)
 8011828:	781a      	ldrb	r2, [r3, #0]
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	8b5b      	ldrh	r3, [r3, #26]
 8011832:	f003 0301 	and.w	r3, r3, #1
 8011836:	2b00      	cmp	r3, #0
 8011838:	d010      	beq.n	801185c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	8b5b      	ldrh	r3, [r3, #26]
 801183e:	f043 0302 	orr.w	r3, r3, #2
 8011842:	b29a      	uxth	r2, r3
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f003 fac9 	bl	8014de0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	8b5b      	ldrh	r3, [r3, #26]
 8011852:	f023 0303 	bic.w	r3, r3, #3
 8011856:	b29a      	uxth	r2, r3
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	8b5b      	ldrh	r3, [r3, #26]
 8011860:	f003 0308 	and.w	r3, r3, #8
 8011864:	2b00      	cmp	r3, #0
 8011866:	d009      	beq.n	801187c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	8b5b      	ldrh	r3, [r3, #26]
 801186c:	f023 0308 	bic.w	r3, r3, #8
 8011870:	b29a      	uxth	r2, r3
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f7ff fa76 	bl	8010d68 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	68db      	ldr	r3, [r3, #12]
 8011880:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011886:	2b00      	cmp	r3, #0
 8011888:	d00a      	beq.n	80118a0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801188a:	4b0e      	ldr	r3, [pc, #56]	@ (80118c4 <tcp_fasttmr+0xc4>)
 801188c:	2200      	movs	r2, #0
 801188e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f000 f819 	bl	80118c8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011896:	4b0b      	ldr	r3, [pc, #44]	@ (80118c4 <tcp_fasttmr+0xc4>)
 8011898:	781b      	ldrb	r3, [r3, #0]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d000      	beq.n	80118a0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801189e:	e7b8      	b.n	8011812 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	607b      	str	r3, [r7, #4]
 80118a4:	e002      	b.n	80118ac <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	68db      	ldr	r3, [r3, #12]
 80118aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d1b3      	bne.n	801181a <tcp_fasttmr+0x1a>
    }
  }
}
 80118b2:	bf00      	nop
 80118b4:	bf00      	nop
 80118b6:	3708      	adds	r7, #8
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}
 80118bc:	24008222 	.word	0x24008222
 80118c0:	24008218 	.word	0x24008218
 80118c4:	24008220 	.word	0x24008220

080118c8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80118c8:	b590      	push	{r4, r7, lr}
 80118ca:	b085      	sub	sp, #20
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d109      	bne.n	80118ea <tcp_process_refused_data+0x22>
 80118d6:	4b37      	ldr	r3, [pc, #220]	@ (80119b4 <tcp_process_refused_data+0xec>)
 80118d8:	f240 6209 	movw	r2, #1545	@ 0x609
 80118dc:	4936      	ldr	r1, [pc, #216]	@ (80119b8 <tcp_process_refused_data+0xf0>)
 80118de:	4837      	ldr	r0, [pc, #220]	@ (80119bc <tcp_process_refused_data+0xf4>)
 80118e0:	f007 fe7c 	bl	80195dc <iprintf>
 80118e4:	f06f 030f 	mvn.w	r3, #15
 80118e8:	e060      	b.n	80119ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80118ee:	7b5b      	ldrb	r3, [r3, #13]
 80118f0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80118f6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2200      	movs	r2, #0
 80118fc:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011904:	2b00      	cmp	r3, #0
 8011906:	d00b      	beq.n	8011920 <tcp_process_refused_data+0x58>
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	6918      	ldr	r0, [r3, #16]
 8011912:	2300      	movs	r3, #0
 8011914:	68ba      	ldr	r2, [r7, #8]
 8011916:	6879      	ldr	r1, [r7, #4]
 8011918:	47a0      	blx	r4
 801191a:	4603      	mov	r3, r0
 801191c:	73fb      	strb	r3, [r7, #15]
 801191e:	e007      	b.n	8011930 <tcp_process_refused_data+0x68>
 8011920:	2300      	movs	r3, #0
 8011922:	68ba      	ldr	r2, [r7, #8]
 8011924:	6879      	ldr	r1, [r7, #4]
 8011926:	2000      	movs	r0, #0
 8011928:	f000 f8a4 	bl	8011a74 <tcp_recv_null>
 801192c:	4603      	mov	r3, r0
 801192e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d12a      	bne.n	801198e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011938:	7bbb      	ldrb	r3, [r7, #14]
 801193a:	f003 0320 	and.w	r3, r3, #32
 801193e:	2b00      	cmp	r3, #0
 8011940:	d033      	beq.n	80119aa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011946:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801194a:	d005      	beq.n	8011958 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011950:	3301      	adds	r3, #1
 8011952:	b29a      	uxth	r2, r3
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801195e:	2b00      	cmp	r3, #0
 8011960:	d00b      	beq.n	801197a <tcp_process_refused_data+0xb2>
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6918      	ldr	r0, [r3, #16]
 801196c:	2300      	movs	r3, #0
 801196e:	2200      	movs	r2, #0
 8011970:	6879      	ldr	r1, [r7, #4]
 8011972:	47a0      	blx	r4
 8011974:	4603      	mov	r3, r0
 8011976:	73fb      	strb	r3, [r7, #15]
 8011978:	e001      	b.n	801197e <tcp_process_refused_data+0xb6>
 801197a:	2300      	movs	r3, #0
 801197c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011982:	f113 0f0d 	cmn.w	r3, #13
 8011986:	d110      	bne.n	80119aa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011988:	f06f 030c 	mvn.w	r3, #12
 801198c:	e00e      	b.n	80119ac <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801198e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011992:	f113 0f0d 	cmn.w	r3, #13
 8011996:	d102      	bne.n	801199e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011998:	f06f 030c 	mvn.w	r3, #12
 801199c:	e006      	b.n	80119ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	68ba      	ldr	r2, [r7, #8]
 80119a2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80119a4:	f06f 0304 	mvn.w	r3, #4
 80119a8:	e000      	b.n	80119ac <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80119aa:	2300      	movs	r3, #0
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	3714      	adds	r7, #20
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd90      	pop	{r4, r7, pc}
 80119b4:	0801c62c 	.word	0x0801c62c
 80119b8:	0801cb3c 	.word	0x0801cb3c
 80119bc:	0801c670 	.word	0x0801c670

080119c0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b084      	sub	sp, #16
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80119c8:	e007      	b.n	80119da <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f000 f80a 	bl	80119ea <tcp_seg_free>
    seg = next;
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d1f4      	bne.n	80119ca <tcp_segs_free+0xa>
  }
}
 80119e0:	bf00      	nop
 80119e2:	bf00      	nop
 80119e4:	3710      	adds	r7, #16
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}

080119ea <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80119ea:	b580      	push	{r7, lr}
 80119ec:	b082      	sub	sp, #8
 80119ee:	af00      	add	r7, sp, #0
 80119f0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d00c      	beq.n	8011a12 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	685b      	ldr	r3, [r3, #4]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d004      	beq.n	8011a0a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7fe fcfb 	bl	8010400 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011a0a:	6879      	ldr	r1, [r7, #4]
 8011a0c:	2003      	movs	r0, #3
 8011a0e:	f7fd fe53 	bl	800f6b8 <memp_free>
  }
}
 8011a12:	bf00      	nop
 8011a14:	3708      	adds	r7, #8
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
	...

08011a1c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b084      	sub	sp, #16
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d106      	bne.n	8011a38 <tcp_seg_copy+0x1c>
 8011a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8011a68 <tcp_seg_copy+0x4c>)
 8011a2c:	f240 6282 	movw	r2, #1666	@ 0x682
 8011a30:	490e      	ldr	r1, [pc, #56]	@ (8011a6c <tcp_seg_copy+0x50>)
 8011a32:	480f      	ldr	r0, [pc, #60]	@ (8011a70 <tcp_seg_copy+0x54>)
 8011a34:	f007 fdd2 	bl	80195dc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011a38:	2003      	movs	r0, #3
 8011a3a:	f7fd fdc7 	bl	800f5cc <memp_malloc>
 8011a3e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d101      	bne.n	8011a4a <tcp_seg_copy+0x2e>
    return NULL;
 8011a46:	2300      	movs	r3, #0
 8011a48:	e00a      	b.n	8011a60 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011a4a:	2210      	movs	r2, #16
 8011a4c:	6879      	ldr	r1, [r7, #4]
 8011a4e:	68f8      	ldr	r0, [r7, #12]
 8011a50:	f008 fdfd 	bl	801a64e <memcpy>
  pbuf_ref(cseg->p);
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	685b      	ldr	r3, [r3, #4]
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f7fe fd77 	bl	801054c <pbuf_ref>
  return cseg;
 8011a5e:	68fb      	ldr	r3, [r7, #12]
}
 8011a60:	4618      	mov	r0, r3
 8011a62:	3710      	adds	r7, #16
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}
 8011a68:	0801c62c 	.word	0x0801c62c
 8011a6c:	0801cb80 	.word	0x0801cb80
 8011a70:	0801c670 	.word	0x0801c670

08011a74 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b084      	sub	sp, #16
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	60f8      	str	r0, [r7, #12]
 8011a7c:	60b9      	str	r1, [r7, #8]
 8011a7e:	607a      	str	r2, [r7, #4]
 8011a80:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d109      	bne.n	8011a9c <tcp_recv_null+0x28>
 8011a88:	4b12      	ldr	r3, [pc, #72]	@ (8011ad4 <tcp_recv_null+0x60>)
 8011a8a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011a8e:	4912      	ldr	r1, [pc, #72]	@ (8011ad8 <tcp_recv_null+0x64>)
 8011a90:	4812      	ldr	r0, [pc, #72]	@ (8011adc <tcp_recv_null+0x68>)
 8011a92:	f007 fda3 	bl	80195dc <iprintf>
 8011a96:	f06f 030f 	mvn.w	r3, #15
 8011a9a:	e016      	b.n	8011aca <tcp_recv_null+0x56>

  if (p != NULL) {
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d009      	beq.n	8011ab6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	891b      	ldrh	r3, [r3, #8]
 8011aa6:	4619      	mov	r1, r3
 8011aa8:	68b8      	ldr	r0, [r7, #8]
 8011aaa:	f7ff fb17 	bl	80110dc <tcp_recved>
    pbuf_free(p);
 8011aae:	6878      	ldr	r0, [r7, #4]
 8011ab0:	f7fe fca6 	bl	8010400 <pbuf_free>
 8011ab4:	e008      	b.n	8011ac8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d104      	bne.n	8011ac8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011abe:	68b8      	ldr	r0, [r7, #8]
 8011ac0:	f7ff f9bc 	bl	8010e3c <tcp_close>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	e000      	b.n	8011aca <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011ac8:	2300      	movs	r3, #0
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	3710      	adds	r7, #16
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}
 8011ad2:	bf00      	nop
 8011ad4:	0801c62c 	.word	0x0801c62c
 8011ad8:	0801cb9c 	.word	0x0801cb9c
 8011adc:	0801c670 	.word	0x0801c670

08011ae0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b086      	sub	sp, #24
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	db01      	blt.n	8011af6 <tcp_kill_prio+0x16>
 8011af2:	79fb      	ldrb	r3, [r7, #7]
 8011af4:	e000      	b.n	8011af8 <tcp_kill_prio+0x18>
 8011af6:	237f      	movs	r3, #127	@ 0x7f
 8011af8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011afa:	7afb      	ldrb	r3, [r7, #11]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d034      	beq.n	8011b6a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011b00:	7afb      	ldrb	r3, [r7, #11]
 8011b02:	3b01      	subs	r3, #1
 8011b04:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011b06:	2300      	movs	r3, #0
 8011b08:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b0e:	4b19      	ldr	r3, [pc, #100]	@ (8011b74 <tcp_kill_prio+0x94>)
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	617b      	str	r3, [r7, #20]
 8011b14:	e01f      	b.n	8011b56 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011b16:	697b      	ldr	r3, [r7, #20]
 8011b18:	7d5b      	ldrb	r3, [r3, #21]
 8011b1a:	7afa      	ldrb	r2, [r7, #11]
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d80c      	bhi.n	8011b3a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011b24:	7afa      	ldrb	r2, [r7, #11]
 8011b26:	429a      	cmp	r2, r3
 8011b28:	d112      	bne.n	8011b50 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011b2a:	4b13      	ldr	r3, [pc, #76]	@ (8011b78 <tcp_kill_prio+0x98>)
 8011b2c:	681a      	ldr	r2, [r3, #0]
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	6a1b      	ldr	r3, [r3, #32]
 8011b32:	1ad3      	subs	r3, r2, r3
 8011b34:	68fa      	ldr	r2, [r7, #12]
 8011b36:	429a      	cmp	r2, r3
 8011b38:	d80a      	bhi.n	8011b50 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8011b78 <tcp_kill_prio+0x98>)
 8011b3c:	681a      	ldr	r2, [r3, #0]
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	6a1b      	ldr	r3, [r3, #32]
 8011b42:	1ad3      	subs	r3, r2, r3
 8011b44:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011b4a:	697b      	ldr	r3, [r7, #20]
 8011b4c:	7d5b      	ldrb	r3, [r3, #21]
 8011b4e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b50:	697b      	ldr	r3, [r7, #20]
 8011b52:	68db      	ldr	r3, [r3, #12]
 8011b54:	617b      	str	r3, [r7, #20]
 8011b56:	697b      	ldr	r3, [r7, #20]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d1dc      	bne.n	8011b16 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011b5c:	693b      	ldr	r3, [r7, #16]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d004      	beq.n	8011b6c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011b62:	6938      	ldr	r0, [r7, #16]
 8011b64:	f7ff fa54 	bl	8011010 <tcp_abort>
 8011b68:	e000      	b.n	8011b6c <tcp_kill_prio+0x8c>
    return;
 8011b6a:	bf00      	nop
  }
}
 8011b6c:	3718      	adds	r7, #24
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}
 8011b72:	bf00      	nop
 8011b74:	24008218 	.word	0x24008218
 8011b78:	2400820c 	.word	0x2400820c

08011b7c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b086      	sub	sp, #24
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	4603      	mov	r3, r0
 8011b84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011b86:	79fb      	ldrb	r3, [r7, #7]
 8011b88:	2b08      	cmp	r3, #8
 8011b8a:	d009      	beq.n	8011ba0 <tcp_kill_state+0x24>
 8011b8c:	79fb      	ldrb	r3, [r7, #7]
 8011b8e:	2b09      	cmp	r3, #9
 8011b90:	d006      	beq.n	8011ba0 <tcp_kill_state+0x24>
 8011b92:	4b1a      	ldr	r3, [pc, #104]	@ (8011bfc <tcp_kill_state+0x80>)
 8011b94:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8011b98:	4919      	ldr	r1, [pc, #100]	@ (8011c00 <tcp_kill_state+0x84>)
 8011b9a:	481a      	ldr	r0, [pc, #104]	@ (8011c04 <tcp_kill_state+0x88>)
 8011b9c:	f007 fd1e 	bl	80195dc <iprintf>

  inactivity = 0;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ba8:	4b17      	ldr	r3, [pc, #92]	@ (8011c08 <tcp_kill_state+0x8c>)
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	617b      	str	r3, [r7, #20]
 8011bae:	e017      	b.n	8011be0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	7d1b      	ldrb	r3, [r3, #20]
 8011bb4:	79fa      	ldrb	r2, [r7, #7]
 8011bb6:	429a      	cmp	r2, r3
 8011bb8:	d10f      	bne.n	8011bda <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011bba:	4b14      	ldr	r3, [pc, #80]	@ (8011c0c <tcp_kill_state+0x90>)
 8011bbc:	681a      	ldr	r2, [r3, #0]
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	6a1b      	ldr	r3, [r3, #32]
 8011bc2:	1ad3      	subs	r3, r2, r3
 8011bc4:	68fa      	ldr	r2, [r7, #12]
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d807      	bhi.n	8011bda <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011bca:	4b10      	ldr	r3, [pc, #64]	@ (8011c0c <tcp_kill_state+0x90>)
 8011bcc:	681a      	ldr	r2, [r3, #0]
 8011bce:	697b      	ldr	r3, [r7, #20]
 8011bd0:	6a1b      	ldr	r3, [r3, #32]
 8011bd2:	1ad3      	subs	r3, r2, r3
 8011bd4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011bda:	697b      	ldr	r3, [r7, #20]
 8011bdc:	68db      	ldr	r3, [r3, #12]
 8011bde:	617b      	str	r3, [r7, #20]
 8011be0:	697b      	ldr	r3, [r7, #20]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d1e4      	bne.n	8011bb0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d003      	beq.n	8011bf4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011bec:	2100      	movs	r1, #0
 8011bee:	6938      	ldr	r0, [r7, #16]
 8011bf0:	f7ff f950 	bl	8010e94 <tcp_abandon>
  }
}
 8011bf4:	bf00      	nop
 8011bf6:	3718      	adds	r7, #24
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bd80      	pop	{r7, pc}
 8011bfc:	0801c62c 	.word	0x0801c62c
 8011c00:	0801cbb8 	.word	0x0801cbb8
 8011c04:	0801c670 	.word	0x0801c670
 8011c08:	24008218 	.word	0x24008218
 8011c0c:	2400820c 	.word	0x2400820c

08011c10 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b084      	sub	sp, #16
 8011c14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011c16:	2300      	movs	r3, #0
 8011c18:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c1e:	4b12      	ldr	r3, [pc, #72]	@ (8011c68 <tcp_kill_timewait+0x58>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	60fb      	str	r3, [r7, #12]
 8011c24:	e012      	b.n	8011c4c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011c26:	4b11      	ldr	r3, [pc, #68]	@ (8011c6c <tcp_kill_timewait+0x5c>)
 8011c28:	681a      	ldr	r2, [r3, #0]
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	6a1b      	ldr	r3, [r3, #32]
 8011c2e:	1ad3      	subs	r3, r2, r3
 8011c30:	687a      	ldr	r2, [r7, #4]
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d807      	bhi.n	8011c46 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011c36:	4b0d      	ldr	r3, [pc, #52]	@ (8011c6c <tcp_kill_timewait+0x5c>)
 8011c38:	681a      	ldr	r2, [r3, #0]
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	6a1b      	ldr	r3, [r3, #32]
 8011c3e:	1ad3      	subs	r3, r2, r3
 8011c40:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	68db      	ldr	r3, [r3, #12]
 8011c4a:	60fb      	str	r3, [r7, #12]
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d1e9      	bne.n	8011c26 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d002      	beq.n	8011c5e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011c58:	68b8      	ldr	r0, [r7, #8]
 8011c5a:	f7ff f9d9 	bl	8011010 <tcp_abort>
  }
}
 8011c5e:	bf00      	nop
 8011c60:	3710      	adds	r7, #16
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}
 8011c66:	bf00      	nop
 8011c68:	2400821c 	.word	0x2400821c
 8011c6c:	2400820c 	.word	0x2400820c

08011c70 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b082      	sub	sp, #8
 8011c74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011c76:	4b10      	ldr	r3, [pc, #64]	@ (8011cb8 <tcp_handle_closepend+0x48>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011c7c:	e014      	b.n	8011ca8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	68db      	ldr	r3, [r3, #12]
 8011c82:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	8b5b      	ldrh	r3, [r3, #26]
 8011c88:	f003 0308 	and.w	r3, r3, #8
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d009      	beq.n	8011ca4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	8b5b      	ldrh	r3, [r3, #26]
 8011c94:	f023 0308 	bic.w	r3, r3, #8
 8011c98:	b29a      	uxth	r2, r3
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011c9e:	6878      	ldr	r0, [r7, #4]
 8011ca0:	f7ff f862 	bl	8010d68 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d1e7      	bne.n	8011c7e <tcp_handle_closepend+0xe>
  }
}
 8011cae:	bf00      	nop
 8011cb0:	bf00      	nop
 8011cb2:	3708      	adds	r7, #8
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd80      	pop	{r7, pc}
 8011cb8:	24008218 	.word	0x24008218

08011cbc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b084      	sub	sp, #16
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011cc6:	2001      	movs	r0, #1
 8011cc8:	f7fd fc80 	bl	800f5cc <memp_malloc>
 8011ccc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d126      	bne.n	8011d22 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011cd4:	f7ff ffcc 	bl	8011c70 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011cd8:	f7ff ff9a 	bl	8011c10 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011cdc:	2001      	movs	r0, #1
 8011cde:	f7fd fc75 	bl	800f5cc <memp_malloc>
 8011ce2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d11b      	bne.n	8011d22 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011cea:	2009      	movs	r0, #9
 8011cec:	f7ff ff46 	bl	8011b7c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011cf0:	2001      	movs	r0, #1
 8011cf2:	f7fd fc6b 	bl	800f5cc <memp_malloc>
 8011cf6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d111      	bne.n	8011d22 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011cfe:	2008      	movs	r0, #8
 8011d00:	f7ff ff3c 	bl	8011b7c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011d04:	2001      	movs	r0, #1
 8011d06:	f7fd fc61 	bl	800f5cc <memp_malloc>
 8011d0a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d107      	bne.n	8011d22 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011d12:	79fb      	ldrb	r3, [r7, #7]
 8011d14:	4618      	mov	r0, r3
 8011d16:	f7ff fee3 	bl	8011ae0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011d1a:	2001      	movs	r0, #1
 8011d1c:	f7fd fc56 	bl	800f5cc <memp_malloc>
 8011d20:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d03f      	beq.n	8011da8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011d28:	229c      	movs	r2, #156	@ 0x9c
 8011d2a:	2100      	movs	r1, #0
 8011d2c:	68f8      	ldr	r0, [r7, #12]
 8011d2e:	f007 fd51 	bl	80197d4 <memset>
    pcb->prio = prio;
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	79fa      	ldrb	r2, [r7, #7]
 8011d36:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8011d3e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8011d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	22ff      	movs	r2, #255	@ 0xff
 8011d56:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011d5e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	2206      	movs	r2, #6
 8011d64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	2206      	movs	r2, #6
 8011d6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011d74:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	2201      	movs	r2, #1
 8011d7a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8011d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8011db4 <tcp_alloc+0xf8>)
 8011d80:	681a      	ldr	r2, [r3, #0]
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011d86:	4b0c      	ldr	r3, [pc, #48]	@ (8011db8 <tcp_alloc+0xfc>)
 8011d88:	781a      	ldrb	r2, [r3, #0]
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8011d94:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	4a08      	ldr	r2, [pc, #32]	@ (8011dbc <tcp_alloc+0x100>)
 8011d9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	4a07      	ldr	r2, [pc, #28]	@ (8011dc0 <tcp_alloc+0x104>)
 8011da4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011da8:	68fb      	ldr	r3, [r7, #12]
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3710      	adds	r7, #16
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}
 8011db2:	bf00      	nop
 8011db4:	2400820c 	.word	0x2400820c
 8011db8:	24008222 	.word	0x24008222
 8011dbc:	08011a75 	.word	0x08011a75
 8011dc0:	006ddd00 	.word	0x006ddd00

08011dc4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d107      	bne.n	8011de2 <tcp_pcb_purge+0x1e>
 8011dd2:	4b21      	ldr	r3, [pc, #132]	@ (8011e58 <tcp_pcb_purge+0x94>)
 8011dd4:	f640 0251 	movw	r2, #2129	@ 0x851
 8011dd8:	4920      	ldr	r1, [pc, #128]	@ (8011e5c <tcp_pcb_purge+0x98>)
 8011dda:	4821      	ldr	r0, [pc, #132]	@ (8011e60 <tcp_pcb_purge+0x9c>)
 8011ddc:	f007 fbfe 	bl	80195dc <iprintf>
 8011de0:	e037      	b.n	8011e52 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	7d1b      	ldrb	r3, [r3, #20]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d033      	beq.n	8011e52 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011dee:	2b0a      	cmp	r3, #10
 8011df0:	d02f      	beq.n	8011e52 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011df6:	2b01      	cmp	r3, #1
 8011df8:	d02b      	beq.n	8011e52 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d007      	beq.n	8011e12 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7fe fafa 	bl	8010400 <pbuf_free>
      pcb->refused_data = NULL;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d002      	beq.n	8011e20 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f000 f986 	bl	801212c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011e26:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f7ff fdc7 	bl	80119c0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7ff fdc2 	bl	80119c0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2200      	movs	r2, #0
 8011e40:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011e52:	3708      	adds	r7, #8
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}
 8011e58:	0801c62c 	.word	0x0801c62c
 8011e5c:	0801cc78 	.word	0x0801cc78
 8011e60:	0801c670 	.word	0x0801c670

08011e64 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b084      	sub	sp, #16
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
 8011e6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d106      	bne.n	8011e82 <tcp_pcb_remove+0x1e>
 8011e74:	4b3e      	ldr	r3, [pc, #248]	@ (8011f70 <tcp_pcb_remove+0x10c>)
 8011e76:	f640 0283 	movw	r2, #2179	@ 0x883
 8011e7a:	493e      	ldr	r1, [pc, #248]	@ (8011f74 <tcp_pcb_remove+0x110>)
 8011e7c:	483e      	ldr	r0, [pc, #248]	@ (8011f78 <tcp_pcb_remove+0x114>)
 8011e7e:	f007 fbad 	bl	80195dc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d106      	bne.n	8011e96 <tcp_pcb_remove+0x32>
 8011e88:	4b39      	ldr	r3, [pc, #228]	@ (8011f70 <tcp_pcb_remove+0x10c>)
 8011e8a:	f640 0284 	movw	r2, #2180	@ 0x884
 8011e8e:	493b      	ldr	r1, [pc, #236]	@ (8011f7c <tcp_pcb_remove+0x118>)
 8011e90:	4839      	ldr	r0, [pc, #228]	@ (8011f78 <tcp_pcb_remove+0x114>)
 8011e92:	f007 fba3 	bl	80195dc <iprintf>

  TCP_RMV(pcblist, pcb);
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	683a      	ldr	r2, [r7, #0]
 8011e9c:	429a      	cmp	r2, r3
 8011e9e:	d105      	bne.n	8011eac <tcp_pcb_remove+0x48>
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	68da      	ldr	r2, [r3, #12]
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	601a      	str	r2, [r3, #0]
 8011eaa:	e013      	b.n	8011ed4 <tcp_pcb_remove+0x70>
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	60fb      	str	r3, [r7, #12]
 8011eb2:	e00c      	b.n	8011ece <tcp_pcb_remove+0x6a>
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	68db      	ldr	r3, [r3, #12]
 8011eb8:	683a      	ldr	r2, [r7, #0]
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d104      	bne.n	8011ec8 <tcp_pcb_remove+0x64>
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	68da      	ldr	r2, [r3, #12]
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	60da      	str	r2, [r3, #12]
 8011ec6:	e005      	b.n	8011ed4 <tcp_pcb_remove+0x70>
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	68db      	ldr	r3, [r3, #12]
 8011ecc:	60fb      	str	r3, [r7, #12]
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d1ef      	bne.n	8011eb4 <tcp_pcb_remove+0x50>
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011eda:	6838      	ldr	r0, [r7, #0]
 8011edc:	f7ff ff72 	bl	8011dc4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	7d1b      	ldrb	r3, [r3, #20]
 8011ee4:	2b0a      	cmp	r3, #10
 8011ee6:	d013      	beq.n	8011f10 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011eec:	2b01      	cmp	r3, #1
 8011eee:	d00f      	beq.n	8011f10 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	8b5b      	ldrh	r3, [r3, #26]
 8011ef4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d009      	beq.n	8011f10 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	8b5b      	ldrh	r3, [r3, #26]
 8011f00:	f043 0302 	orr.w	r3, r3, #2
 8011f04:	b29a      	uxth	r2, r3
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011f0a:	6838      	ldr	r0, [r7, #0]
 8011f0c:	f002 ff68 	bl	8014de0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	7d1b      	ldrb	r3, [r3, #20]
 8011f14:	2b01      	cmp	r3, #1
 8011f16:	d020      	beq.n	8011f5a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d006      	beq.n	8011f2e <tcp_pcb_remove+0xca>
 8011f20:	4b13      	ldr	r3, [pc, #76]	@ (8011f70 <tcp_pcb_remove+0x10c>)
 8011f22:	f640 0293 	movw	r2, #2195	@ 0x893
 8011f26:	4916      	ldr	r1, [pc, #88]	@ (8011f80 <tcp_pcb_remove+0x11c>)
 8011f28:	4813      	ldr	r0, [pc, #76]	@ (8011f78 <tcp_pcb_remove+0x114>)
 8011f2a:	f007 fb57 	bl	80195dc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d006      	beq.n	8011f44 <tcp_pcb_remove+0xe0>
 8011f36:	4b0e      	ldr	r3, [pc, #56]	@ (8011f70 <tcp_pcb_remove+0x10c>)
 8011f38:	f640 0294 	movw	r2, #2196	@ 0x894
 8011f3c:	4911      	ldr	r1, [pc, #68]	@ (8011f84 <tcp_pcb_remove+0x120>)
 8011f3e:	480e      	ldr	r0, [pc, #56]	@ (8011f78 <tcp_pcb_remove+0x114>)
 8011f40:	f007 fb4c 	bl	80195dc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d006      	beq.n	8011f5a <tcp_pcb_remove+0xf6>
 8011f4c:	4b08      	ldr	r3, [pc, #32]	@ (8011f70 <tcp_pcb_remove+0x10c>)
 8011f4e:	f640 0296 	movw	r2, #2198	@ 0x896
 8011f52:	490d      	ldr	r1, [pc, #52]	@ (8011f88 <tcp_pcb_remove+0x124>)
 8011f54:	4808      	ldr	r0, [pc, #32]	@ (8011f78 <tcp_pcb_remove+0x114>)
 8011f56:	f007 fb41 	bl	80195dc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	2200      	movs	r2, #0
 8011f64:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011f66:	bf00      	nop
 8011f68:	3710      	adds	r7, #16
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd80      	pop	{r7, pc}
 8011f6e:	bf00      	nop
 8011f70:	0801c62c 	.word	0x0801c62c
 8011f74:	0801cc94 	.word	0x0801cc94
 8011f78:	0801c670 	.word	0x0801c670
 8011f7c:	0801ccb0 	.word	0x0801ccb0
 8011f80:	0801ccd0 	.word	0x0801ccd0
 8011f84:	0801cce8 	.word	0x0801cce8
 8011f88:	0801cd04 	.word	0x0801cd04

08011f8c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b082      	sub	sp, #8
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d106      	bne.n	8011fa8 <tcp_next_iss+0x1c>
 8011f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8011fc4 <tcp_next_iss+0x38>)
 8011f9c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8011fa0:	4909      	ldr	r1, [pc, #36]	@ (8011fc8 <tcp_next_iss+0x3c>)
 8011fa2:	480a      	ldr	r0, [pc, #40]	@ (8011fcc <tcp_next_iss+0x40>)
 8011fa4:	f007 fb1a 	bl	80195dc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011fa8:	4b09      	ldr	r3, [pc, #36]	@ (8011fd0 <tcp_next_iss+0x44>)
 8011faa:	681a      	ldr	r2, [r3, #0]
 8011fac:	4b09      	ldr	r3, [pc, #36]	@ (8011fd4 <tcp_next_iss+0x48>)
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	4413      	add	r3, r2
 8011fb2:	4a07      	ldr	r2, [pc, #28]	@ (8011fd0 <tcp_next_iss+0x44>)
 8011fb4:	6013      	str	r3, [r2, #0]
  return iss;
 8011fb6:	4b06      	ldr	r3, [pc, #24]	@ (8011fd0 <tcp_next_iss+0x44>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3708      	adds	r7, #8
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
 8011fc2:	bf00      	nop
 8011fc4:	0801c62c 	.word	0x0801c62c
 8011fc8:	0801cd1c 	.word	0x0801cd1c
 8011fcc:	0801c670 	.word	0x0801c670
 8011fd0:	24000030 	.word	0x24000030
 8011fd4:	2400820c 	.word	0x2400820c

08011fd8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b086      	sub	sp, #24
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	4603      	mov	r3, r0
 8011fe0:	60b9      	str	r1, [r7, #8]
 8011fe2:	607a      	str	r2, [r7, #4]
 8011fe4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d106      	bne.n	8011ffa <tcp_eff_send_mss_netif+0x22>
 8011fec:	4b14      	ldr	r3, [pc, #80]	@ (8012040 <tcp_eff_send_mss_netif+0x68>)
 8011fee:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8011ff2:	4914      	ldr	r1, [pc, #80]	@ (8012044 <tcp_eff_send_mss_netif+0x6c>)
 8011ff4:	4814      	ldr	r0, [pc, #80]	@ (8012048 <tcp_eff_send_mss_netif+0x70>)
 8011ff6:	f007 faf1 	bl	80195dc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d101      	bne.n	8012004 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012000:	89fb      	ldrh	r3, [r7, #14]
 8012002:	e019      	b.n	8012038 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012008:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801200a:	8afb      	ldrh	r3, [r7, #22]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d012      	beq.n	8012036 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012010:	2328      	movs	r3, #40	@ 0x28
 8012012:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012014:	8afa      	ldrh	r2, [r7, #22]
 8012016:	8abb      	ldrh	r3, [r7, #20]
 8012018:	429a      	cmp	r2, r3
 801201a:	d904      	bls.n	8012026 <tcp_eff_send_mss_netif+0x4e>
 801201c:	8afa      	ldrh	r2, [r7, #22]
 801201e:	8abb      	ldrh	r3, [r7, #20]
 8012020:	1ad3      	subs	r3, r2, r3
 8012022:	b29b      	uxth	r3, r3
 8012024:	e000      	b.n	8012028 <tcp_eff_send_mss_netif+0x50>
 8012026:	2300      	movs	r3, #0
 8012028:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801202a:	8a7a      	ldrh	r2, [r7, #18]
 801202c:	89fb      	ldrh	r3, [r7, #14]
 801202e:	4293      	cmp	r3, r2
 8012030:	bf28      	it	cs
 8012032:	4613      	movcs	r3, r2
 8012034:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8012036:	89fb      	ldrh	r3, [r7, #14]
}
 8012038:	4618      	mov	r0, r3
 801203a:	3718      	adds	r7, #24
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}
 8012040:	0801c62c 	.word	0x0801c62c
 8012044:	0801cd38 	.word	0x0801cd38
 8012048:	0801c670 	.word	0x0801c670

0801204c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b084      	sub	sp, #16
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
 8012054:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d119      	bne.n	8012094 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012060:	4b10      	ldr	r3, [pc, #64]	@ (80120a4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012062:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8012066:	4910      	ldr	r1, [pc, #64]	@ (80120a8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012068:	4810      	ldr	r0, [pc, #64]	@ (80120ac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801206a:	f007 fab7 	bl	80195dc <iprintf>

  while (pcb != NULL) {
 801206e:	e011      	b.n	8012094 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	681a      	ldr	r2, [r3, #0]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	429a      	cmp	r2, r3
 801207a:	d108      	bne.n	801208e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	68db      	ldr	r3, [r3, #12]
 8012080:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012082:	68f8      	ldr	r0, [r7, #12]
 8012084:	f7fe ffc4 	bl	8011010 <tcp_abort>
      pcb = next;
 8012088:	68bb      	ldr	r3, [r7, #8]
 801208a:	60fb      	str	r3, [r7, #12]
 801208c:	e002      	b.n	8012094 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	68db      	ldr	r3, [r3, #12]
 8012092:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d1ea      	bne.n	8012070 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801209a:	bf00      	nop
 801209c:	bf00      	nop
 801209e:	3710      	adds	r7, #16
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}
 80120a4:	0801c62c 	.word	0x0801c62c
 80120a8:	0801cd60 	.word	0x0801cd60
 80120ac:	0801c670 	.word	0x0801c670

080120b0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b084      	sub	sp, #16
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
 80120b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d02a      	beq.n	8012116 <tcp_netif_ip_addr_changed+0x66>
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d026      	beq.n	8012116 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80120c8:	4b15      	ldr	r3, [pc, #84]	@ (8012120 <tcp_netif_ip_addr_changed+0x70>)
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	4619      	mov	r1, r3
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f7ff ffbc 	bl	801204c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80120d4:	4b13      	ldr	r3, [pc, #76]	@ (8012124 <tcp_netif_ip_addr_changed+0x74>)
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	4619      	mov	r1, r3
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	f7ff ffb6 	bl	801204c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d017      	beq.n	8012116 <tcp_netif_ip_addr_changed+0x66>
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d013      	beq.n	8012116 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80120ee:	4b0e      	ldr	r3, [pc, #56]	@ (8012128 <tcp_netif_ip_addr_changed+0x78>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	60fb      	str	r3, [r7, #12]
 80120f4:	e00c      	b.n	8012110 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	681a      	ldr	r2, [r3, #0]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	429a      	cmp	r2, r3
 8012100:	d103      	bne.n	801210a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	681a      	ldr	r2, [r3, #0]
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	68db      	ldr	r3, [r3, #12]
 801210e:	60fb      	str	r3, [r7, #12]
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d1ef      	bne.n	80120f6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012116:	bf00      	nop
 8012118:	3710      	adds	r7, #16
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
 801211e:	bf00      	nop
 8012120:	24008218 	.word	0x24008218
 8012124:	24008210 	.word	0x24008210
 8012128:	24008214 	.word	0x24008214

0801212c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012138:	2b00      	cmp	r3, #0
 801213a:	d007      	beq.n	801214c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012140:	4618      	mov	r0, r3
 8012142:	f7ff fc3d 	bl	80119c0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	2200      	movs	r2, #0
 801214a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801214c:	bf00      	nop
 801214e:	3708      	adds	r7, #8
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}

08012154 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012154:	b590      	push	{r4, r7, lr}
 8012156:	b08d      	sub	sp, #52	@ 0x34
 8012158:	af04      	add	r7, sp, #16
 801215a:	6078      	str	r0, [r7, #4]
 801215c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d105      	bne.n	8012170 <tcp_input+0x1c>
 8012164:	4b9b      	ldr	r3, [pc, #620]	@ (80123d4 <tcp_input+0x280>)
 8012166:	2283      	movs	r2, #131	@ 0x83
 8012168:	499b      	ldr	r1, [pc, #620]	@ (80123d8 <tcp_input+0x284>)
 801216a:	489c      	ldr	r0, [pc, #624]	@ (80123dc <tcp_input+0x288>)
 801216c:	f007 fa36 	bl	80195dc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	685b      	ldr	r3, [r3, #4]
 8012174:	4a9a      	ldr	r2, [pc, #616]	@ (80123e0 <tcp_input+0x28c>)
 8012176:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	895b      	ldrh	r3, [r3, #10]
 801217c:	2b13      	cmp	r3, #19
 801217e:	f240 83d1 	bls.w	8012924 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012182:	4b98      	ldr	r3, [pc, #608]	@ (80123e4 <tcp_input+0x290>)
 8012184:	695b      	ldr	r3, [r3, #20]
 8012186:	4a97      	ldr	r2, [pc, #604]	@ (80123e4 <tcp_input+0x290>)
 8012188:	6812      	ldr	r2, [r2, #0]
 801218a:	4611      	mov	r1, r2
 801218c:	4618      	mov	r0, r3
 801218e:	f005 ff73 	bl	8018078 <ip4_addr_isbroadcast_u32>
 8012192:	4603      	mov	r3, r0
 8012194:	2b00      	cmp	r3, #0
 8012196:	f040 83c7 	bne.w	8012928 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801219a:	4b92      	ldr	r3, [pc, #584]	@ (80123e4 <tcp_input+0x290>)
 801219c:	695b      	ldr	r3, [r3, #20]
 801219e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80121a2:	2be0      	cmp	r3, #224	@ 0xe0
 80121a4:	f000 83c0 	beq.w	8012928 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80121a8:	4b8d      	ldr	r3, [pc, #564]	@ (80123e0 <tcp_input+0x28c>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	899b      	ldrh	r3, [r3, #12]
 80121ae:	b29b      	uxth	r3, r3
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7fc fc6b 	bl	800ea8c <lwip_htons>
 80121b6:	4603      	mov	r3, r0
 80121b8:	0b1b      	lsrs	r3, r3, #12
 80121ba:	b29b      	uxth	r3, r3
 80121bc:	b2db      	uxtb	r3, r3
 80121be:	009b      	lsls	r3, r3, #2
 80121c0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80121c2:	7cbb      	ldrb	r3, [r7, #18]
 80121c4:	2b13      	cmp	r3, #19
 80121c6:	f240 83b1 	bls.w	801292c <tcp_input+0x7d8>
 80121ca:	7cbb      	ldrb	r3, [r7, #18]
 80121cc:	b29a      	uxth	r2, r3
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	891b      	ldrh	r3, [r3, #8]
 80121d2:	429a      	cmp	r2, r3
 80121d4:	f200 83aa 	bhi.w	801292c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80121d8:	7cbb      	ldrb	r3, [r7, #18]
 80121da:	b29b      	uxth	r3, r3
 80121dc:	3b14      	subs	r3, #20
 80121de:	b29a      	uxth	r2, r3
 80121e0:	4b81      	ldr	r3, [pc, #516]	@ (80123e8 <tcp_input+0x294>)
 80121e2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80121e4:	4b81      	ldr	r3, [pc, #516]	@ (80123ec <tcp_input+0x298>)
 80121e6:	2200      	movs	r2, #0
 80121e8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	895a      	ldrh	r2, [r3, #10]
 80121ee:	7cbb      	ldrb	r3, [r7, #18]
 80121f0:	b29b      	uxth	r3, r3
 80121f2:	429a      	cmp	r2, r3
 80121f4:	d309      	bcc.n	801220a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80121f6:	4b7c      	ldr	r3, [pc, #496]	@ (80123e8 <tcp_input+0x294>)
 80121f8:	881a      	ldrh	r2, [r3, #0]
 80121fa:	4b7d      	ldr	r3, [pc, #500]	@ (80123f0 <tcp_input+0x29c>)
 80121fc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80121fe:	7cbb      	ldrb	r3, [r7, #18]
 8012200:	4619      	mov	r1, r3
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f7fe f876 	bl	80102f4 <pbuf_remove_header>
 8012208:	e04e      	b.n	80122a8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d105      	bne.n	801221e <tcp_input+0xca>
 8012212:	4b70      	ldr	r3, [pc, #448]	@ (80123d4 <tcp_input+0x280>)
 8012214:	22c2      	movs	r2, #194	@ 0xc2
 8012216:	4977      	ldr	r1, [pc, #476]	@ (80123f4 <tcp_input+0x2a0>)
 8012218:	4870      	ldr	r0, [pc, #448]	@ (80123dc <tcp_input+0x288>)
 801221a:	f007 f9df 	bl	80195dc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801221e:	2114      	movs	r1, #20
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f7fe f867 	bl	80102f4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	895a      	ldrh	r2, [r3, #10]
 801222a:	4b71      	ldr	r3, [pc, #452]	@ (80123f0 <tcp_input+0x29c>)
 801222c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801222e:	4b6e      	ldr	r3, [pc, #440]	@ (80123e8 <tcp_input+0x294>)
 8012230:	881a      	ldrh	r2, [r3, #0]
 8012232:	4b6f      	ldr	r3, [pc, #444]	@ (80123f0 <tcp_input+0x29c>)
 8012234:	881b      	ldrh	r3, [r3, #0]
 8012236:	1ad3      	subs	r3, r2, r3
 8012238:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801223a:	4b6d      	ldr	r3, [pc, #436]	@ (80123f0 <tcp_input+0x29c>)
 801223c:	881b      	ldrh	r3, [r3, #0]
 801223e:	4619      	mov	r1, r3
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f7fe f857 	bl	80102f4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	895b      	ldrh	r3, [r3, #10]
 801224c:	8a3a      	ldrh	r2, [r7, #16]
 801224e:	429a      	cmp	r2, r3
 8012250:	f200 836e 	bhi.w	8012930 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	4a64      	ldr	r2, [pc, #400]	@ (80123ec <tcp_input+0x298>)
 801225c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	8a3a      	ldrh	r2, [r7, #16]
 8012264:	4611      	mov	r1, r2
 8012266:	4618      	mov	r0, r3
 8012268:	f7fe f844 	bl	80102f4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	891a      	ldrh	r2, [r3, #8]
 8012270:	8a3b      	ldrh	r3, [r7, #16]
 8012272:	1ad3      	subs	r3, r2, r3
 8012274:	b29a      	uxth	r2, r3
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	895b      	ldrh	r3, [r3, #10]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d005      	beq.n	801228e <tcp_input+0x13a>
 8012282:	4b54      	ldr	r3, [pc, #336]	@ (80123d4 <tcp_input+0x280>)
 8012284:	22df      	movs	r2, #223	@ 0xdf
 8012286:	495c      	ldr	r1, [pc, #368]	@ (80123f8 <tcp_input+0x2a4>)
 8012288:	4854      	ldr	r0, [pc, #336]	@ (80123dc <tcp_input+0x288>)
 801228a:	f007 f9a7 	bl	80195dc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	891a      	ldrh	r2, [r3, #8]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	891b      	ldrh	r3, [r3, #8]
 8012298:	429a      	cmp	r2, r3
 801229a:	d005      	beq.n	80122a8 <tcp_input+0x154>
 801229c:	4b4d      	ldr	r3, [pc, #308]	@ (80123d4 <tcp_input+0x280>)
 801229e:	22e0      	movs	r2, #224	@ 0xe0
 80122a0:	4956      	ldr	r1, [pc, #344]	@ (80123fc <tcp_input+0x2a8>)
 80122a2:	484e      	ldr	r0, [pc, #312]	@ (80123dc <tcp_input+0x288>)
 80122a4:	f007 f99a 	bl	80195dc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80122a8:	4b4d      	ldr	r3, [pc, #308]	@ (80123e0 <tcp_input+0x28c>)
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	881b      	ldrh	r3, [r3, #0]
 80122ae:	b29b      	uxth	r3, r3
 80122b0:	4a4b      	ldr	r2, [pc, #300]	@ (80123e0 <tcp_input+0x28c>)
 80122b2:	6814      	ldr	r4, [r2, #0]
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7fc fbe9 	bl	800ea8c <lwip_htons>
 80122ba:	4603      	mov	r3, r0
 80122bc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80122be:	4b48      	ldr	r3, [pc, #288]	@ (80123e0 <tcp_input+0x28c>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	885b      	ldrh	r3, [r3, #2]
 80122c4:	b29b      	uxth	r3, r3
 80122c6:	4a46      	ldr	r2, [pc, #280]	@ (80123e0 <tcp_input+0x28c>)
 80122c8:	6814      	ldr	r4, [r2, #0]
 80122ca:	4618      	mov	r0, r3
 80122cc:	f7fc fbde 	bl	800ea8c <lwip_htons>
 80122d0:	4603      	mov	r3, r0
 80122d2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80122d4:	4b42      	ldr	r3, [pc, #264]	@ (80123e0 <tcp_input+0x28c>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	685b      	ldr	r3, [r3, #4]
 80122da:	4a41      	ldr	r2, [pc, #260]	@ (80123e0 <tcp_input+0x28c>)
 80122dc:	6814      	ldr	r4, [r2, #0]
 80122de:	4618      	mov	r0, r3
 80122e0:	f7fc fbea 	bl	800eab8 <lwip_htonl>
 80122e4:	4603      	mov	r3, r0
 80122e6:	6063      	str	r3, [r4, #4]
 80122e8:	6863      	ldr	r3, [r4, #4]
 80122ea:	4a45      	ldr	r2, [pc, #276]	@ (8012400 <tcp_input+0x2ac>)
 80122ec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80122ee:	4b3c      	ldr	r3, [pc, #240]	@ (80123e0 <tcp_input+0x28c>)
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	689b      	ldr	r3, [r3, #8]
 80122f4:	4a3a      	ldr	r2, [pc, #232]	@ (80123e0 <tcp_input+0x28c>)
 80122f6:	6814      	ldr	r4, [r2, #0]
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7fc fbdd 	bl	800eab8 <lwip_htonl>
 80122fe:	4603      	mov	r3, r0
 8012300:	60a3      	str	r3, [r4, #8]
 8012302:	68a3      	ldr	r3, [r4, #8]
 8012304:	4a3f      	ldr	r2, [pc, #252]	@ (8012404 <tcp_input+0x2b0>)
 8012306:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012308:	4b35      	ldr	r3, [pc, #212]	@ (80123e0 <tcp_input+0x28c>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	89db      	ldrh	r3, [r3, #14]
 801230e:	b29b      	uxth	r3, r3
 8012310:	4a33      	ldr	r2, [pc, #204]	@ (80123e0 <tcp_input+0x28c>)
 8012312:	6814      	ldr	r4, [r2, #0]
 8012314:	4618      	mov	r0, r3
 8012316:	f7fc fbb9 	bl	800ea8c <lwip_htons>
 801231a:	4603      	mov	r3, r0
 801231c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801231e:	4b30      	ldr	r3, [pc, #192]	@ (80123e0 <tcp_input+0x28c>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	899b      	ldrh	r3, [r3, #12]
 8012324:	b29b      	uxth	r3, r3
 8012326:	4618      	mov	r0, r3
 8012328:	f7fc fbb0 	bl	800ea8c <lwip_htons>
 801232c:	4603      	mov	r3, r0
 801232e:	b2db      	uxtb	r3, r3
 8012330:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012334:	b2da      	uxtb	r2, r3
 8012336:	4b34      	ldr	r3, [pc, #208]	@ (8012408 <tcp_input+0x2b4>)
 8012338:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	891a      	ldrh	r2, [r3, #8]
 801233e:	4b33      	ldr	r3, [pc, #204]	@ (801240c <tcp_input+0x2b8>)
 8012340:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012342:	4b31      	ldr	r3, [pc, #196]	@ (8012408 <tcp_input+0x2b4>)
 8012344:	781b      	ldrb	r3, [r3, #0]
 8012346:	f003 0303 	and.w	r3, r3, #3
 801234a:	2b00      	cmp	r3, #0
 801234c:	d00c      	beq.n	8012368 <tcp_input+0x214>
    tcplen++;
 801234e:	4b2f      	ldr	r3, [pc, #188]	@ (801240c <tcp_input+0x2b8>)
 8012350:	881b      	ldrh	r3, [r3, #0]
 8012352:	3301      	adds	r3, #1
 8012354:	b29a      	uxth	r2, r3
 8012356:	4b2d      	ldr	r3, [pc, #180]	@ (801240c <tcp_input+0x2b8>)
 8012358:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	891a      	ldrh	r2, [r3, #8]
 801235e:	4b2b      	ldr	r3, [pc, #172]	@ (801240c <tcp_input+0x2b8>)
 8012360:	881b      	ldrh	r3, [r3, #0]
 8012362:	429a      	cmp	r2, r3
 8012364:	f200 82e6 	bhi.w	8012934 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012368:	2300      	movs	r3, #0
 801236a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801236c:	4b28      	ldr	r3, [pc, #160]	@ (8012410 <tcp_input+0x2bc>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	61fb      	str	r3, [r7, #28]
 8012372:	e09d      	b.n	80124b0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012374:	69fb      	ldr	r3, [r7, #28]
 8012376:	7d1b      	ldrb	r3, [r3, #20]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d105      	bne.n	8012388 <tcp_input+0x234>
 801237c:	4b15      	ldr	r3, [pc, #84]	@ (80123d4 <tcp_input+0x280>)
 801237e:	22fb      	movs	r2, #251	@ 0xfb
 8012380:	4924      	ldr	r1, [pc, #144]	@ (8012414 <tcp_input+0x2c0>)
 8012382:	4816      	ldr	r0, [pc, #88]	@ (80123dc <tcp_input+0x288>)
 8012384:	f007 f92a 	bl	80195dc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012388:	69fb      	ldr	r3, [r7, #28]
 801238a:	7d1b      	ldrb	r3, [r3, #20]
 801238c:	2b0a      	cmp	r3, #10
 801238e:	d105      	bne.n	801239c <tcp_input+0x248>
 8012390:	4b10      	ldr	r3, [pc, #64]	@ (80123d4 <tcp_input+0x280>)
 8012392:	22fc      	movs	r2, #252	@ 0xfc
 8012394:	4920      	ldr	r1, [pc, #128]	@ (8012418 <tcp_input+0x2c4>)
 8012396:	4811      	ldr	r0, [pc, #68]	@ (80123dc <tcp_input+0x288>)
 8012398:	f007 f920 	bl	80195dc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	7d1b      	ldrb	r3, [r3, #20]
 80123a0:	2b01      	cmp	r3, #1
 80123a2:	d105      	bne.n	80123b0 <tcp_input+0x25c>
 80123a4:	4b0b      	ldr	r3, [pc, #44]	@ (80123d4 <tcp_input+0x280>)
 80123a6:	22fd      	movs	r2, #253	@ 0xfd
 80123a8:	491c      	ldr	r1, [pc, #112]	@ (801241c <tcp_input+0x2c8>)
 80123aa:	480c      	ldr	r0, [pc, #48]	@ (80123dc <tcp_input+0x288>)
 80123ac:	f007 f916 	bl	80195dc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80123b0:	69fb      	ldr	r3, [r7, #28]
 80123b2:	7a1b      	ldrb	r3, [r3, #8]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d033      	beq.n	8012420 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80123b8:	69fb      	ldr	r3, [r7, #28]
 80123ba:	7a1a      	ldrb	r2, [r3, #8]
 80123bc:	4b09      	ldr	r3, [pc, #36]	@ (80123e4 <tcp_input+0x290>)
 80123be:	685b      	ldr	r3, [r3, #4]
 80123c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80123c4:	3301      	adds	r3, #1
 80123c6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80123c8:	429a      	cmp	r2, r3
 80123ca:	d029      	beq.n	8012420 <tcp_input+0x2cc>
      prev = pcb;
 80123cc:	69fb      	ldr	r3, [r7, #28]
 80123ce:	61bb      	str	r3, [r7, #24]
      continue;
 80123d0:	e06b      	b.n	80124aa <tcp_input+0x356>
 80123d2:	bf00      	nop
 80123d4:	0801cd94 	.word	0x0801cd94
 80123d8:	0801cdc8 	.word	0x0801cdc8
 80123dc:	0801cde0 	.word	0x0801cde0
 80123e0:	24008234 	.word	0x24008234
 80123e4:	2400510c 	.word	0x2400510c
 80123e8:	24008238 	.word	0x24008238
 80123ec:	2400823c 	.word	0x2400823c
 80123f0:	2400823a 	.word	0x2400823a
 80123f4:	0801ce08 	.word	0x0801ce08
 80123f8:	0801ce18 	.word	0x0801ce18
 80123fc:	0801ce24 	.word	0x0801ce24
 8012400:	24008244 	.word	0x24008244
 8012404:	24008248 	.word	0x24008248
 8012408:	24008250 	.word	0x24008250
 801240c:	2400824e 	.word	0x2400824e
 8012410:	24008218 	.word	0x24008218
 8012414:	0801ce44 	.word	0x0801ce44
 8012418:	0801ce6c 	.word	0x0801ce6c
 801241c:	0801ce98 	.word	0x0801ce98
    }

    if (pcb->remote_port == tcphdr->src &&
 8012420:	69fb      	ldr	r3, [r7, #28]
 8012422:	8b1a      	ldrh	r2, [r3, #24]
 8012424:	4b72      	ldr	r3, [pc, #456]	@ (80125f0 <tcp_input+0x49c>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	881b      	ldrh	r3, [r3, #0]
 801242a:	b29b      	uxth	r3, r3
 801242c:	429a      	cmp	r2, r3
 801242e:	d13a      	bne.n	80124a6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012430:	69fb      	ldr	r3, [r7, #28]
 8012432:	8ada      	ldrh	r2, [r3, #22]
 8012434:	4b6e      	ldr	r3, [pc, #440]	@ (80125f0 <tcp_input+0x49c>)
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	885b      	ldrh	r3, [r3, #2]
 801243a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801243c:	429a      	cmp	r2, r3
 801243e:	d132      	bne.n	80124a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012440:	69fb      	ldr	r3, [r7, #28]
 8012442:	685a      	ldr	r2, [r3, #4]
 8012444:	4b6b      	ldr	r3, [pc, #428]	@ (80125f4 <tcp_input+0x4a0>)
 8012446:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012448:	429a      	cmp	r2, r3
 801244a:	d12c      	bne.n	80124a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801244c:	69fb      	ldr	r3, [r7, #28]
 801244e:	681a      	ldr	r2, [r3, #0]
 8012450:	4b68      	ldr	r3, [pc, #416]	@ (80125f4 <tcp_input+0x4a0>)
 8012452:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012454:	429a      	cmp	r2, r3
 8012456:	d126      	bne.n	80124a6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012458:	69fb      	ldr	r3, [r7, #28]
 801245a:	68db      	ldr	r3, [r3, #12]
 801245c:	69fa      	ldr	r2, [r7, #28]
 801245e:	429a      	cmp	r2, r3
 8012460:	d106      	bne.n	8012470 <tcp_input+0x31c>
 8012462:	4b65      	ldr	r3, [pc, #404]	@ (80125f8 <tcp_input+0x4a4>)
 8012464:	f240 120d 	movw	r2, #269	@ 0x10d
 8012468:	4964      	ldr	r1, [pc, #400]	@ (80125fc <tcp_input+0x4a8>)
 801246a:	4865      	ldr	r0, [pc, #404]	@ (8012600 <tcp_input+0x4ac>)
 801246c:	f007 f8b6 	bl	80195dc <iprintf>
      if (prev != NULL) {
 8012470:	69bb      	ldr	r3, [r7, #24]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d00a      	beq.n	801248c <tcp_input+0x338>
        prev->next = pcb->next;
 8012476:	69fb      	ldr	r3, [r7, #28]
 8012478:	68da      	ldr	r2, [r3, #12]
 801247a:	69bb      	ldr	r3, [r7, #24]
 801247c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801247e:	4b61      	ldr	r3, [pc, #388]	@ (8012604 <tcp_input+0x4b0>)
 8012480:	681a      	ldr	r2, [r3, #0]
 8012482:	69fb      	ldr	r3, [r7, #28]
 8012484:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012486:	4a5f      	ldr	r2, [pc, #380]	@ (8012604 <tcp_input+0x4b0>)
 8012488:	69fb      	ldr	r3, [r7, #28]
 801248a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801248c:	69fb      	ldr	r3, [r7, #28]
 801248e:	68db      	ldr	r3, [r3, #12]
 8012490:	69fa      	ldr	r2, [r7, #28]
 8012492:	429a      	cmp	r2, r3
 8012494:	d111      	bne.n	80124ba <tcp_input+0x366>
 8012496:	4b58      	ldr	r3, [pc, #352]	@ (80125f8 <tcp_input+0x4a4>)
 8012498:	f240 1215 	movw	r2, #277	@ 0x115
 801249c:	495a      	ldr	r1, [pc, #360]	@ (8012608 <tcp_input+0x4b4>)
 801249e:	4858      	ldr	r0, [pc, #352]	@ (8012600 <tcp_input+0x4ac>)
 80124a0:	f007 f89c 	bl	80195dc <iprintf>
      break;
 80124a4:	e009      	b.n	80124ba <tcp_input+0x366>
    }
    prev = pcb;
 80124a6:	69fb      	ldr	r3, [r7, #28]
 80124a8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80124aa:	69fb      	ldr	r3, [r7, #28]
 80124ac:	68db      	ldr	r3, [r3, #12]
 80124ae:	61fb      	str	r3, [r7, #28]
 80124b0:	69fb      	ldr	r3, [r7, #28]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	f47f af5e 	bne.w	8012374 <tcp_input+0x220>
 80124b8:	e000      	b.n	80124bc <tcp_input+0x368>
      break;
 80124ba:	bf00      	nop
  }

  if (pcb == NULL) {
 80124bc:	69fb      	ldr	r3, [r7, #28]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	f040 80aa 	bne.w	8012618 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80124c4:	4b51      	ldr	r3, [pc, #324]	@ (801260c <tcp_input+0x4b8>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	61fb      	str	r3, [r7, #28]
 80124ca:	e03f      	b.n	801254c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80124cc:	69fb      	ldr	r3, [r7, #28]
 80124ce:	7d1b      	ldrb	r3, [r3, #20]
 80124d0:	2b0a      	cmp	r3, #10
 80124d2:	d006      	beq.n	80124e2 <tcp_input+0x38e>
 80124d4:	4b48      	ldr	r3, [pc, #288]	@ (80125f8 <tcp_input+0x4a4>)
 80124d6:	f240 121f 	movw	r2, #287	@ 0x11f
 80124da:	494d      	ldr	r1, [pc, #308]	@ (8012610 <tcp_input+0x4bc>)
 80124dc:	4848      	ldr	r0, [pc, #288]	@ (8012600 <tcp_input+0x4ac>)
 80124de:	f007 f87d 	bl	80195dc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80124e2:	69fb      	ldr	r3, [r7, #28]
 80124e4:	7a1b      	ldrb	r3, [r3, #8]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d009      	beq.n	80124fe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80124ea:	69fb      	ldr	r3, [r7, #28]
 80124ec:	7a1a      	ldrb	r2, [r3, #8]
 80124ee:	4b41      	ldr	r3, [pc, #260]	@ (80125f4 <tcp_input+0x4a0>)
 80124f0:	685b      	ldr	r3, [r3, #4]
 80124f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80124f6:	3301      	adds	r3, #1
 80124f8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80124fa:	429a      	cmp	r2, r3
 80124fc:	d122      	bne.n	8012544 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80124fe:	69fb      	ldr	r3, [r7, #28]
 8012500:	8b1a      	ldrh	r2, [r3, #24]
 8012502:	4b3b      	ldr	r3, [pc, #236]	@ (80125f0 <tcp_input+0x49c>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	881b      	ldrh	r3, [r3, #0]
 8012508:	b29b      	uxth	r3, r3
 801250a:	429a      	cmp	r2, r3
 801250c:	d11b      	bne.n	8012546 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801250e:	69fb      	ldr	r3, [r7, #28]
 8012510:	8ada      	ldrh	r2, [r3, #22]
 8012512:	4b37      	ldr	r3, [pc, #220]	@ (80125f0 <tcp_input+0x49c>)
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	885b      	ldrh	r3, [r3, #2]
 8012518:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801251a:	429a      	cmp	r2, r3
 801251c:	d113      	bne.n	8012546 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801251e:	69fb      	ldr	r3, [r7, #28]
 8012520:	685a      	ldr	r2, [r3, #4]
 8012522:	4b34      	ldr	r3, [pc, #208]	@ (80125f4 <tcp_input+0x4a0>)
 8012524:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012526:	429a      	cmp	r2, r3
 8012528:	d10d      	bne.n	8012546 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801252a:	69fb      	ldr	r3, [r7, #28]
 801252c:	681a      	ldr	r2, [r3, #0]
 801252e:	4b31      	ldr	r3, [pc, #196]	@ (80125f4 <tcp_input+0x4a0>)
 8012530:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012532:	429a      	cmp	r2, r3
 8012534:	d107      	bne.n	8012546 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012536:	69f8      	ldr	r0, [r7, #28]
 8012538:	f000 fb56 	bl	8012be8 <tcp_timewait_input>
        }
        pbuf_free(p);
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f7fd ff5f 	bl	8010400 <pbuf_free>
        return;
 8012542:	e1fd      	b.n	8012940 <tcp_input+0x7ec>
        continue;
 8012544:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012546:	69fb      	ldr	r3, [r7, #28]
 8012548:	68db      	ldr	r3, [r3, #12]
 801254a:	61fb      	str	r3, [r7, #28]
 801254c:	69fb      	ldr	r3, [r7, #28]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d1bc      	bne.n	80124cc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012552:	2300      	movs	r3, #0
 8012554:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012556:	4b2f      	ldr	r3, [pc, #188]	@ (8012614 <tcp_input+0x4c0>)
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	617b      	str	r3, [r7, #20]
 801255c:	e02a      	b.n	80125b4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	7a1b      	ldrb	r3, [r3, #8]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d00c      	beq.n	8012580 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	7a1a      	ldrb	r2, [r3, #8]
 801256a:	4b22      	ldr	r3, [pc, #136]	@ (80125f4 <tcp_input+0x4a0>)
 801256c:	685b      	ldr	r3, [r3, #4]
 801256e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012572:	3301      	adds	r3, #1
 8012574:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012576:	429a      	cmp	r2, r3
 8012578:	d002      	beq.n	8012580 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	61bb      	str	r3, [r7, #24]
        continue;
 801257e:	e016      	b.n	80125ae <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012580:	697b      	ldr	r3, [r7, #20]
 8012582:	8ada      	ldrh	r2, [r3, #22]
 8012584:	4b1a      	ldr	r3, [pc, #104]	@ (80125f0 <tcp_input+0x49c>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	885b      	ldrh	r3, [r3, #2]
 801258a:	b29b      	uxth	r3, r3
 801258c:	429a      	cmp	r2, r3
 801258e:	d10c      	bne.n	80125aa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012590:	697b      	ldr	r3, [r7, #20]
 8012592:	681a      	ldr	r2, [r3, #0]
 8012594:	4b17      	ldr	r3, [pc, #92]	@ (80125f4 <tcp_input+0x4a0>)
 8012596:	695b      	ldr	r3, [r3, #20]
 8012598:	429a      	cmp	r2, r3
 801259a:	d00f      	beq.n	80125bc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d00d      	beq.n	80125be <tcp_input+0x46a>
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d009      	beq.n	80125be <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80125aa:	697b      	ldr	r3, [r7, #20]
 80125ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80125ae:	697b      	ldr	r3, [r7, #20]
 80125b0:	68db      	ldr	r3, [r3, #12]
 80125b2:	617b      	str	r3, [r7, #20]
 80125b4:	697b      	ldr	r3, [r7, #20]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d1d1      	bne.n	801255e <tcp_input+0x40a>
 80125ba:	e000      	b.n	80125be <tcp_input+0x46a>
            break;
 80125bc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80125be:	697b      	ldr	r3, [r7, #20]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d029      	beq.n	8012618 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80125c4:	69bb      	ldr	r3, [r7, #24]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d00a      	beq.n	80125e0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	68da      	ldr	r2, [r3, #12]
 80125ce:	69bb      	ldr	r3, [r7, #24]
 80125d0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80125d2:	4b10      	ldr	r3, [pc, #64]	@ (8012614 <tcp_input+0x4c0>)
 80125d4:	681a      	ldr	r2, [r3, #0]
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80125da:	4a0e      	ldr	r2, [pc, #56]	@ (8012614 <tcp_input+0x4c0>)
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80125e0:	6978      	ldr	r0, [r7, #20]
 80125e2:	f000 fa03 	bl	80129ec <tcp_listen_input>
      }
      pbuf_free(p);
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	f7fd ff0a 	bl	8010400 <pbuf_free>
      return;
 80125ec:	e1a8      	b.n	8012940 <tcp_input+0x7ec>
 80125ee:	bf00      	nop
 80125f0:	24008234 	.word	0x24008234
 80125f4:	2400510c 	.word	0x2400510c
 80125f8:	0801cd94 	.word	0x0801cd94
 80125fc:	0801cec0 	.word	0x0801cec0
 8012600:	0801cde0 	.word	0x0801cde0
 8012604:	24008218 	.word	0x24008218
 8012608:	0801ceec 	.word	0x0801ceec
 801260c:	2400821c 	.word	0x2400821c
 8012610:	0801cf18 	.word	0x0801cf18
 8012614:	24008214 	.word	0x24008214
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012618:	69fb      	ldr	r3, [r7, #28]
 801261a:	2b00      	cmp	r3, #0
 801261c:	f000 8158 	beq.w	80128d0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012620:	4b95      	ldr	r3, [pc, #596]	@ (8012878 <tcp_input+0x724>)
 8012622:	2200      	movs	r2, #0
 8012624:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	891a      	ldrh	r2, [r3, #8]
 801262a:	4b93      	ldr	r3, [pc, #588]	@ (8012878 <tcp_input+0x724>)
 801262c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801262e:	4a92      	ldr	r2, [pc, #584]	@ (8012878 <tcp_input+0x724>)
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012634:	4b91      	ldr	r3, [pc, #580]	@ (801287c <tcp_input+0x728>)
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	4a8f      	ldr	r2, [pc, #572]	@ (8012878 <tcp_input+0x724>)
 801263a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801263c:	4b90      	ldr	r3, [pc, #576]	@ (8012880 <tcp_input+0x72c>)
 801263e:	2200      	movs	r2, #0
 8012640:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012642:	4b90      	ldr	r3, [pc, #576]	@ (8012884 <tcp_input+0x730>)
 8012644:	2200      	movs	r2, #0
 8012646:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012648:	4b8f      	ldr	r3, [pc, #572]	@ (8012888 <tcp_input+0x734>)
 801264a:	2200      	movs	r2, #0
 801264c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801264e:	4b8f      	ldr	r3, [pc, #572]	@ (801288c <tcp_input+0x738>)
 8012650:	781b      	ldrb	r3, [r3, #0]
 8012652:	f003 0308 	and.w	r3, r3, #8
 8012656:	2b00      	cmp	r3, #0
 8012658:	d006      	beq.n	8012668 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	7b5b      	ldrb	r3, [r3, #13]
 801265e:	f043 0301 	orr.w	r3, r3, #1
 8012662:	b2da      	uxtb	r2, r3
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012668:	69fb      	ldr	r3, [r7, #28]
 801266a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801266c:	2b00      	cmp	r3, #0
 801266e:	d017      	beq.n	80126a0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012670:	69f8      	ldr	r0, [r7, #28]
 8012672:	f7ff f929 	bl	80118c8 <tcp_process_refused_data>
 8012676:	4603      	mov	r3, r0
 8012678:	f113 0f0d 	cmn.w	r3, #13
 801267c:	d007      	beq.n	801268e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801267e:	69fb      	ldr	r3, [r7, #28]
 8012680:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012682:	2b00      	cmp	r3, #0
 8012684:	d00c      	beq.n	80126a0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012686:	4b82      	ldr	r3, [pc, #520]	@ (8012890 <tcp_input+0x73c>)
 8012688:	881b      	ldrh	r3, [r3, #0]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d008      	beq.n	80126a0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801268e:	69fb      	ldr	r3, [r7, #28]
 8012690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012692:	2b00      	cmp	r3, #0
 8012694:	f040 80e3 	bne.w	801285e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012698:	69f8      	ldr	r0, [r7, #28]
 801269a:	f003 f9a7 	bl	80159ec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801269e:	e0de      	b.n	801285e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80126a0:	4a7c      	ldr	r2, [pc, #496]	@ (8012894 <tcp_input+0x740>)
 80126a2:	69fb      	ldr	r3, [r7, #28]
 80126a4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80126a6:	69f8      	ldr	r0, [r7, #28]
 80126a8:	f000 fb18 	bl	8012cdc <tcp_process>
 80126ac:	4603      	mov	r3, r0
 80126ae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80126b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80126b4:	f113 0f0d 	cmn.w	r3, #13
 80126b8:	f000 80d3 	beq.w	8012862 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80126bc:	4b71      	ldr	r3, [pc, #452]	@ (8012884 <tcp_input+0x730>)
 80126be:	781b      	ldrb	r3, [r3, #0]
 80126c0:	f003 0308 	and.w	r3, r3, #8
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d015      	beq.n	80126f4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80126c8:	69fb      	ldr	r3, [r7, #28]
 80126ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d008      	beq.n	80126e4 <tcp_input+0x590>
 80126d2:	69fb      	ldr	r3, [r7, #28]
 80126d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80126d8:	69fa      	ldr	r2, [r7, #28]
 80126da:	6912      	ldr	r2, [r2, #16]
 80126dc:	f06f 010d 	mvn.w	r1, #13
 80126e0:	4610      	mov	r0, r2
 80126e2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80126e4:	69f9      	ldr	r1, [r7, #28]
 80126e6:	486c      	ldr	r0, [pc, #432]	@ (8012898 <tcp_input+0x744>)
 80126e8:	f7ff fbbc 	bl	8011e64 <tcp_pcb_remove>
        tcp_free(pcb);
 80126ec:	69f8      	ldr	r0, [r7, #28]
 80126ee:	f7fe f9a7 	bl	8010a40 <tcp_free>
 80126f2:	e0da      	b.n	80128aa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80126f4:	2300      	movs	r3, #0
 80126f6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80126f8:	4b63      	ldr	r3, [pc, #396]	@ (8012888 <tcp_input+0x734>)
 80126fa:	881b      	ldrh	r3, [r3, #0]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d01d      	beq.n	801273c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012700:	4b61      	ldr	r3, [pc, #388]	@ (8012888 <tcp_input+0x734>)
 8012702:	881b      	ldrh	r3, [r3, #0]
 8012704:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012706:	69fb      	ldr	r3, [r7, #28]
 8012708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801270c:	2b00      	cmp	r3, #0
 801270e:	d00a      	beq.n	8012726 <tcp_input+0x5d2>
 8012710:	69fb      	ldr	r3, [r7, #28]
 8012712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012716:	69fa      	ldr	r2, [r7, #28]
 8012718:	6910      	ldr	r0, [r2, #16]
 801271a:	89fa      	ldrh	r2, [r7, #14]
 801271c:	69f9      	ldr	r1, [r7, #28]
 801271e:	4798      	blx	r3
 8012720:	4603      	mov	r3, r0
 8012722:	74fb      	strb	r3, [r7, #19]
 8012724:	e001      	b.n	801272a <tcp_input+0x5d6>
 8012726:	2300      	movs	r3, #0
 8012728:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801272a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801272e:	f113 0f0d 	cmn.w	r3, #13
 8012732:	f000 8098 	beq.w	8012866 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012736:	4b54      	ldr	r3, [pc, #336]	@ (8012888 <tcp_input+0x734>)
 8012738:	2200      	movs	r2, #0
 801273a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801273c:	69f8      	ldr	r0, [r7, #28]
 801273e:	f000 f915 	bl	801296c <tcp_input_delayed_close>
 8012742:	4603      	mov	r3, r0
 8012744:	2b00      	cmp	r3, #0
 8012746:	f040 8090 	bne.w	801286a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801274a:	4b4d      	ldr	r3, [pc, #308]	@ (8012880 <tcp_input+0x72c>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d041      	beq.n	80127d6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012752:	69fb      	ldr	r3, [r7, #28]
 8012754:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012756:	2b00      	cmp	r3, #0
 8012758:	d006      	beq.n	8012768 <tcp_input+0x614>
 801275a:	4b50      	ldr	r3, [pc, #320]	@ (801289c <tcp_input+0x748>)
 801275c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8012760:	494f      	ldr	r1, [pc, #316]	@ (80128a0 <tcp_input+0x74c>)
 8012762:	4850      	ldr	r0, [pc, #320]	@ (80128a4 <tcp_input+0x750>)
 8012764:	f006 ff3a 	bl	80195dc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012768:	69fb      	ldr	r3, [r7, #28]
 801276a:	8b5b      	ldrh	r3, [r3, #26]
 801276c:	f003 0310 	and.w	r3, r3, #16
 8012770:	2b00      	cmp	r3, #0
 8012772:	d008      	beq.n	8012786 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012774:	4b42      	ldr	r3, [pc, #264]	@ (8012880 <tcp_input+0x72c>)
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	4618      	mov	r0, r3
 801277a:	f7fd fe41 	bl	8010400 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801277e:	69f8      	ldr	r0, [r7, #28]
 8012780:	f7fe fc46 	bl	8011010 <tcp_abort>
            goto aborted;
 8012784:	e091      	b.n	80128aa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012786:	69fb      	ldr	r3, [r7, #28]
 8012788:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801278c:	2b00      	cmp	r3, #0
 801278e:	d00c      	beq.n	80127aa <tcp_input+0x656>
 8012790:	69fb      	ldr	r3, [r7, #28]
 8012792:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012796:	69fb      	ldr	r3, [r7, #28]
 8012798:	6918      	ldr	r0, [r3, #16]
 801279a:	4b39      	ldr	r3, [pc, #228]	@ (8012880 <tcp_input+0x72c>)
 801279c:	681a      	ldr	r2, [r3, #0]
 801279e:	2300      	movs	r3, #0
 80127a0:	69f9      	ldr	r1, [r7, #28]
 80127a2:	47a0      	blx	r4
 80127a4:	4603      	mov	r3, r0
 80127a6:	74fb      	strb	r3, [r7, #19]
 80127a8:	e008      	b.n	80127bc <tcp_input+0x668>
 80127aa:	4b35      	ldr	r3, [pc, #212]	@ (8012880 <tcp_input+0x72c>)
 80127ac:	681a      	ldr	r2, [r3, #0]
 80127ae:	2300      	movs	r3, #0
 80127b0:	69f9      	ldr	r1, [r7, #28]
 80127b2:	2000      	movs	r0, #0
 80127b4:	f7ff f95e 	bl	8011a74 <tcp_recv_null>
 80127b8:	4603      	mov	r3, r0
 80127ba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80127bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80127c0:	f113 0f0d 	cmn.w	r3, #13
 80127c4:	d053      	beq.n	801286e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80127c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d003      	beq.n	80127d6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80127ce:	4b2c      	ldr	r3, [pc, #176]	@ (8012880 <tcp_input+0x72c>)
 80127d0:	681a      	ldr	r2, [r3, #0]
 80127d2:	69fb      	ldr	r3, [r7, #28]
 80127d4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80127d6:	4b2b      	ldr	r3, [pc, #172]	@ (8012884 <tcp_input+0x730>)
 80127d8:	781b      	ldrb	r3, [r3, #0]
 80127da:	f003 0320 	and.w	r3, r3, #32
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d030      	beq.n	8012844 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80127e2:	69fb      	ldr	r3, [r7, #28]
 80127e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d009      	beq.n	80127fe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80127ea:	69fb      	ldr	r3, [r7, #28]
 80127ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80127ee:	7b5a      	ldrb	r2, [r3, #13]
 80127f0:	69fb      	ldr	r3, [r7, #28]
 80127f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80127f4:	f042 0220 	orr.w	r2, r2, #32
 80127f8:	b2d2      	uxtb	r2, r2
 80127fa:	735a      	strb	r2, [r3, #13]
 80127fc:	e022      	b.n	8012844 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80127fe:	69fb      	ldr	r3, [r7, #28]
 8012800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012802:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012806:	d005      	beq.n	8012814 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8012808:	69fb      	ldr	r3, [r7, #28]
 801280a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801280c:	3301      	adds	r3, #1
 801280e:	b29a      	uxth	r2, r3
 8012810:	69fb      	ldr	r3, [r7, #28]
 8012812:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012814:	69fb      	ldr	r3, [r7, #28]
 8012816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801281a:	2b00      	cmp	r3, #0
 801281c:	d00b      	beq.n	8012836 <tcp_input+0x6e2>
 801281e:	69fb      	ldr	r3, [r7, #28]
 8012820:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012824:	69fb      	ldr	r3, [r7, #28]
 8012826:	6918      	ldr	r0, [r3, #16]
 8012828:	2300      	movs	r3, #0
 801282a:	2200      	movs	r2, #0
 801282c:	69f9      	ldr	r1, [r7, #28]
 801282e:	47a0      	blx	r4
 8012830:	4603      	mov	r3, r0
 8012832:	74fb      	strb	r3, [r7, #19]
 8012834:	e001      	b.n	801283a <tcp_input+0x6e6>
 8012836:	2300      	movs	r3, #0
 8012838:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801283a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801283e:	f113 0f0d 	cmn.w	r3, #13
 8012842:	d016      	beq.n	8012872 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012844:	4b13      	ldr	r3, [pc, #76]	@ (8012894 <tcp_input+0x740>)
 8012846:	2200      	movs	r2, #0
 8012848:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801284a:	69f8      	ldr	r0, [r7, #28]
 801284c:	f000 f88e 	bl	801296c <tcp_input_delayed_close>
 8012850:	4603      	mov	r3, r0
 8012852:	2b00      	cmp	r3, #0
 8012854:	d128      	bne.n	80128a8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012856:	69f8      	ldr	r0, [r7, #28]
 8012858:	f002 fac2 	bl	8014de0 <tcp_output>
 801285c:	e025      	b.n	80128aa <tcp_input+0x756>
        goto aborted;
 801285e:	bf00      	nop
 8012860:	e023      	b.n	80128aa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012862:	bf00      	nop
 8012864:	e021      	b.n	80128aa <tcp_input+0x756>
              goto aborted;
 8012866:	bf00      	nop
 8012868:	e01f      	b.n	80128aa <tcp_input+0x756>
          goto aborted;
 801286a:	bf00      	nop
 801286c:	e01d      	b.n	80128aa <tcp_input+0x756>
            goto aborted;
 801286e:	bf00      	nop
 8012870:	e01b      	b.n	80128aa <tcp_input+0x756>
              goto aborted;
 8012872:	bf00      	nop
 8012874:	e019      	b.n	80128aa <tcp_input+0x756>
 8012876:	bf00      	nop
 8012878:	24008224 	.word	0x24008224
 801287c:	24008234 	.word	0x24008234
 8012880:	24008254 	.word	0x24008254
 8012884:	24008251 	.word	0x24008251
 8012888:	2400824c 	.word	0x2400824c
 801288c:	24008250 	.word	0x24008250
 8012890:	2400824e 	.word	0x2400824e
 8012894:	24008258 	.word	0x24008258
 8012898:	24008218 	.word	0x24008218
 801289c:	0801cd94 	.word	0x0801cd94
 80128a0:	0801cf48 	.word	0x0801cf48
 80128a4:	0801cde0 	.word	0x0801cde0
          goto aborted;
 80128a8:	bf00      	nop
    tcp_input_pcb = NULL;
 80128aa:	4b27      	ldr	r3, [pc, #156]	@ (8012948 <tcp_input+0x7f4>)
 80128ac:	2200      	movs	r2, #0
 80128ae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80128b0:	4b26      	ldr	r3, [pc, #152]	@ (801294c <tcp_input+0x7f8>)
 80128b2:	2200      	movs	r2, #0
 80128b4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80128b6:	4b26      	ldr	r3, [pc, #152]	@ (8012950 <tcp_input+0x7fc>)
 80128b8:	685b      	ldr	r3, [r3, #4]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d03f      	beq.n	801293e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80128be:	4b24      	ldr	r3, [pc, #144]	@ (8012950 <tcp_input+0x7fc>)
 80128c0:	685b      	ldr	r3, [r3, #4]
 80128c2:	4618      	mov	r0, r3
 80128c4:	f7fd fd9c 	bl	8010400 <pbuf_free>
      inseg.p = NULL;
 80128c8:	4b21      	ldr	r3, [pc, #132]	@ (8012950 <tcp_input+0x7fc>)
 80128ca:	2200      	movs	r2, #0
 80128cc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80128ce:	e036      	b.n	801293e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80128d0:	4b20      	ldr	r3, [pc, #128]	@ (8012954 <tcp_input+0x800>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	899b      	ldrh	r3, [r3, #12]
 80128d6:	b29b      	uxth	r3, r3
 80128d8:	4618      	mov	r0, r3
 80128da:	f7fc f8d7 	bl	800ea8c <lwip_htons>
 80128de:	4603      	mov	r3, r0
 80128e0:	b2db      	uxtb	r3, r3
 80128e2:	f003 0304 	and.w	r3, r3, #4
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d118      	bne.n	801291c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80128ea:	4b1b      	ldr	r3, [pc, #108]	@ (8012958 <tcp_input+0x804>)
 80128ec:	6819      	ldr	r1, [r3, #0]
 80128ee:	4b1b      	ldr	r3, [pc, #108]	@ (801295c <tcp_input+0x808>)
 80128f0:	881b      	ldrh	r3, [r3, #0]
 80128f2:	461a      	mov	r2, r3
 80128f4:	4b1a      	ldr	r3, [pc, #104]	@ (8012960 <tcp_input+0x80c>)
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80128fa:	4b16      	ldr	r3, [pc, #88]	@ (8012954 <tcp_input+0x800>)
 80128fc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80128fe:	885b      	ldrh	r3, [r3, #2]
 8012900:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012902:	4a14      	ldr	r2, [pc, #80]	@ (8012954 <tcp_input+0x800>)
 8012904:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012906:	8812      	ldrh	r2, [r2, #0]
 8012908:	b292      	uxth	r2, r2
 801290a:	9202      	str	r2, [sp, #8]
 801290c:	9301      	str	r3, [sp, #4]
 801290e:	4b15      	ldr	r3, [pc, #84]	@ (8012964 <tcp_input+0x810>)
 8012910:	9300      	str	r3, [sp, #0]
 8012912:	4b15      	ldr	r3, [pc, #84]	@ (8012968 <tcp_input+0x814>)
 8012914:	4602      	mov	r2, r0
 8012916:	2000      	movs	r0, #0
 8012918:	f003 f816 	bl	8015948 <tcp_rst>
    pbuf_free(p);
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f7fd fd6f 	bl	8010400 <pbuf_free>
  return;
 8012922:	e00c      	b.n	801293e <tcp_input+0x7ea>
    goto dropped;
 8012924:	bf00      	nop
 8012926:	e006      	b.n	8012936 <tcp_input+0x7e2>
    goto dropped;
 8012928:	bf00      	nop
 801292a:	e004      	b.n	8012936 <tcp_input+0x7e2>
    goto dropped;
 801292c:	bf00      	nop
 801292e:	e002      	b.n	8012936 <tcp_input+0x7e2>
      goto dropped;
 8012930:	bf00      	nop
 8012932:	e000      	b.n	8012936 <tcp_input+0x7e2>
      goto dropped;
 8012934:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f7fd fd62 	bl	8010400 <pbuf_free>
 801293c:	e000      	b.n	8012940 <tcp_input+0x7ec>
  return;
 801293e:	bf00      	nop
}
 8012940:	3724      	adds	r7, #36	@ 0x24
 8012942:	46bd      	mov	sp, r7
 8012944:	bd90      	pop	{r4, r7, pc}
 8012946:	bf00      	nop
 8012948:	24008258 	.word	0x24008258
 801294c:	24008254 	.word	0x24008254
 8012950:	24008224 	.word	0x24008224
 8012954:	24008234 	.word	0x24008234
 8012958:	24008248 	.word	0x24008248
 801295c:	2400824e 	.word	0x2400824e
 8012960:	24008244 	.word	0x24008244
 8012964:	2400511c 	.word	0x2400511c
 8012968:	24005120 	.word	0x24005120

0801296c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b082      	sub	sp, #8
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d106      	bne.n	8012988 <tcp_input_delayed_close+0x1c>
 801297a:	4b17      	ldr	r3, [pc, #92]	@ (80129d8 <tcp_input_delayed_close+0x6c>)
 801297c:	f240 225a 	movw	r2, #602	@ 0x25a
 8012980:	4916      	ldr	r1, [pc, #88]	@ (80129dc <tcp_input_delayed_close+0x70>)
 8012982:	4817      	ldr	r0, [pc, #92]	@ (80129e0 <tcp_input_delayed_close+0x74>)
 8012984:	f006 fe2a 	bl	80195dc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012988:	4b16      	ldr	r3, [pc, #88]	@ (80129e4 <tcp_input_delayed_close+0x78>)
 801298a:	781b      	ldrb	r3, [r3, #0]
 801298c:	f003 0310 	and.w	r3, r3, #16
 8012990:	2b00      	cmp	r3, #0
 8012992:	d01c      	beq.n	80129ce <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	8b5b      	ldrh	r3, [r3, #26]
 8012998:	f003 0310 	and.w	r3, r3, #16
 801299c:	2b00      	cmp	r3, #0
 801299e:	d10d      	bne.n	80129bc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d008      	beq.n	80129bc <tcp_input_delayed_close+0x50>
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80129b0:	687a      	ldr	r2, [r7, #4]
 80129b2:	6912      	ldr	r2, [r2, #16]
 80129b4:	f06f 010e 	mvn.w	r1, #14
 80129b8:	4610      	mov	r0, r2
 80129ba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80129bc:	6879      	ldr	r1, [r7, #4]
 80129be:	480a      	ldr	r0, [pc, #40]	@ (80129e8 <tcp_input_delayed_close+0x7c>)
 80129c0:	f7ff fa50 	bl	8011e64 <tcp_pcb_remove>
    tcp_free(pcb);
 80129c4:	6878      	ldr	r0, [r7, #4]
 80129c6:	f7fe f83b 	bl	8010a40 <tcp_free>
    return 1;
 80129ca:	2301      	movs	r3, #1
 80129cc:	e000      	b.n	80129d0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80129ce:	2300      	movs	r3, #0
}
 80129d0:	4618      	mov	r0, r3
 80129d2:	3708      	adds	r7, #8
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}
 80129d8:	0801cd94 	.word	0x0801cd94
 80129dc:	0801cf64 	.word	0x0801cf64
 80129e0:	0801cde0 	.word	0x0801cde0
 80129e4:	24008251 	.word	0x24008251
 80129e8:	24008218 	.word	0x24008218

080129ec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80129ec:	b590      	push	{r4, r7, lr}
 80129ee:	b08b      	sub	sp, #44	@ 0x2c
 80129f0:	af04      	add	r7, sp, #16
 80129f2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80129f4:	4b6f      	ldr	r3, [pc, #444]	@ (8012bb4 <tcp_listen_input+0x1c8>)
 80129f6:	781b      	ldrb	r3, [r3, #0]
 80129f8:	f003 0304 	and.w	r3, r3, #4
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	f040 80d2 	bne.w	8012ba6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d106      	bne.n	8012a16 <tcp_listen_input+0x2a>
 8012a08:	4b6b      	ldr	r3, [pc, #428]	@ (8012bb8 <tcp_listen_input+0x1cc>)
 8012a0a:	f240 2281 	movw	r2, #641	@ 0x281
 8012a0e:	496b      	ldr	r1, [pc, #428]	@ (8012bbc <tcp_listen_input+0x1d0>)
 8012a10:	486b      	ldr	r0, [pc, #428]	@ (8012bc0 <tcp_listen_input+0x1d4>)
 8012a12:	f006 fde3 	bl	80195dc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012a16:	4b67      	ldr	r3, [pc, #412]	@ (8012bb4 <tcp_listen_input+0x1c8>)
 8012a18:	781b      	ldrb	r3, [r3, #0]
 8012a1a:	f003 0310 	and.w	r3, r3, #16
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d019      	beq.n	8012a56 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a22:	4b68      	ldr	r3, [pc, #416]	@ (8012bc4 <tcp_listen_input+0x1d8>)
 8012a24:	6819      	ldr	r1, [r3, #0]
 8012a26:	4b68      	ldr	r3, [pc, #416]	@ (8012bc8 <tcp_listen_input+0x1dc>)
 8012a28:	881b      	ldrh	r3, [r3, #0]
 8012a2a:	461a      	mov	r2, r3
 8012a2c:	4b67      	ldr	r3, [pc, #412]	@ (8012bcc <tcp_listen_input+0x1e0>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012a32:	4b67      	ldr	r3, [pc, #412]	@ (8012bd0 <tcp_listen_input+0x1e4>)
 8012a34:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a36:	885b      	ldrh	r3, [r3, #2]
 8012a38:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012a3a:	4a65      	ldr	r2, [pc, #404]	@ (8012bd0 <tcp_listen_input+0x1e4>)
 8012a3c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a3e:	8812      	ldrh	r2, [r2, #0]
 8012a40:	b292      	uxth	r2, r2
 8012a42:	9202      	str	r2, [sp, #8]
 8012a44:	9301      	str	r3, [sp, #4]
 8012a46:	4b63      	ldr	r3, [pc, #396]	@ (8012bd4 <tcp_listen_input+0x1e8>)
 8012a48:	9300      	str	r3, [sp, #0]
 8012a4a:	4b63      	ldr	r3, [pc, #396]	@ (8012bd8 <tcp_listen_input+0x1ec>)
 8012a4c:	4602      	mov	r2, r0
 8012a4e:	6878      	ldr	r0, [r7, #4]
 8012a50:	f002 ff7a 	bl	8015948 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012a54:	e0a9      	b.n	8012baa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012a56:	4b57      	ldr	r3, [pc, #348]	@ (8012bb4 <tcp_listen_input+0x1c8>)
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	f003 0302 	and.w	r3, r3, #2
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	f000 80a3 	beq.w	8012baa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	7d5b      	ldrb	r3, [r3, #21]
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f7ff f927 	bl	8011cbc <tcp_alloc>
 8012a6e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012a70:	697b      	ldr	r3, [r7, #20]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d111      	bne.n	8012a9a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	699b      	ldr	r3, [r3, #24]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d00a      	beq.n	8012a94 <tcp_listen_input+0xa8>
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	699b      	ldr	r3, [r3, #24]
 8012a82:	687a      	ldr	r2, [r7, #4]
 8012a84:	6910      	ldr	r0, [r2, #16]
 8012a86:	f04f 32ff 	mov.w	r2, #4294967295
 8012a8a:	2100      	movs	r1, #0
 8012a8c:	4798      	blx	r3
 8012a8e:	4603      	mov	r3, r0
 8012a90:	73bb      	strb	r3, [r7, #14]
      return;
 8012a92:	e08b      	b.n	8012bac <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012a94:	23f0      	movs	r3, #240	@ 0xf0
 8012a96:	73bb      	strb	r3, [r7, #14]
      return;
 8012a98:	e088      	b.n	8012bac <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012a9a:	4b50      	ldr	r3, [pc, #320]	@ (8012bdc <tcp_listen_input+0x1f0>)
 8012a9c:	695a      	ldr	r2, [r3, #20]
 8012a9e:	697b      	ldr	r3, [r7, #20]
 8012aa0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012aa2:	4b4e      	ldr	r3, [pc, #312]	@ (8012bdc <tcp_listen_input+0x1f0>)
 8012aa4:	691a      	ldr	r2, [r3, #16]
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	8ada      	ldrh	r2, [r3, #22]
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012ab2:	4b47      	ldr	r3, [pc, #284]	@ (8012bd0 <tcp_listen_input+0x1e4>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	881b      	ldrh	r3, [r3, #0]
 8012ab8:	b29a      	uxth	r2, r3
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012abe:	697b      	ldr	r3, [r7, #20]
 8012ac0:	2203      	movs	r2, #3
 8012ac2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012ac4:	4b41      	ldr	r3, [pc, #260]	@ (8012bcc <tcp_listen_input+0x1e0>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	1c5a      	adds	r2, r3, #1
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012ace:	697b      	ldr	r3, [r7, #20]
 8012ad0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8012ad6:	6978      	ldr	r0, [r7, #20]
 8012ad8:	f7ff fa58 	bl	8011f8c <tcp_next_iss>
 8012adc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	693a      	ldr	r2, [r7, #16]
 8012ae2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8012ae4:	697b      	ldr	r3, [r7, #20]
 8012ae6:	693a      	ldr	r2, [r7, #16]
 8012ae8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8012aea:	697b      	ldr	r3, [r7, #20]
 8012aec:	693a      	ldr	r2, [r7, #16]
 8012aee:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	693a      	ldr	r2, [r7, #16]
 8012af4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012af6:	4b35      	ldr	r3, [pc, #212]	@ (8012bcc <tcp_listen_input+0x1e0>)
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	1e5a      	subs	r2, r3, #1
 8012afc:	697b      	ldr	r3, [r7, #20]
 8012afe:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	691a      	ldr	r2, [r3, #16]
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012b08:	697b      	ldr	r3, [r7, #20]
 8012b0a:	687a      	ldr	r2, [r7, #4]
 8012b0c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	7a5b      	ldrb	r3, [r3, #9]
 8012b12:	f003 030c 	and.w	r3, r3, #12
 8012b16:	b2da      	uxtb	r2, r3
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	7a1a      	ldrb	r2, [r3, #8]
 8012b20:	697b      	ldr	r3, [r7, #20]
 8012b22:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012b24:	4b2e      	ldr	r3, [pc, #184]	@ (8012be0 <tcp_listen_input+0x1f4>)
 8012b26:	681a      	ldr	r2, [r3, #0]
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	60da      	str	r2, [r3, #12]
 8012b2c:	4a2c      	ldr	r2, [pc, #176]	@ (8012be0 <tcp_listen_input+0x1f4>)
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	6013      	str	r3, [r2, #0]
 8012b32:	f003 f8cb 	bl	8015ccc <tcp_timer_needed>
 8012b36:	4b2b      	ldr	r3, [pc, #172]	@ (8012be4 <tcp_listen_input+0x1f8>)
 8012b38:	2201      	movs	r2, #1
 8012b3a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012b3c:	6978      	ldr	r0, [r7, #20]
 8012b3e:	f001 fd8b 	bl	8014658 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012b42:	4b23      	ldr	r3, [pc, #140]	@ (8012bd0 <tcp_listen_input+0x1e4>)
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	89db      	ldrh	r3, [r3, #14]
 8012b48:	b29a      	uxth	r2, r3
 8012b4a:	697b      	ldr	r3, [r7, #20]
 8012b4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012b50:	697b      	ldr	r3, [r7, #20]
 8012b52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012b5c:	697b      	ldr	r3, [r7, #20]
 8012b5e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	3304      	adds	r3, #4
 8012b64:	4618      	mov	r0, r3
 8012b66:	f004 fff1 	bl	8017b4c <ip4_route>
 8012b6a:	4601      	mov	r1, r0
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	3304      	adds	r3, #4
 8012b70:	461a      	mov	r2, r3
 8012b72:	4620      	mov	r0, r4
 8012b74:	f7ff fa30 	bl	8011fd8 <tcp_eff_send_mss_netif>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	461a      	mov	r2, r3
 8012b7c:	697b      	ldr	r3, [r7, #20]
 8012b7e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012b80:	2112      	movs	r1, #18
 8012b82:	6978      	ldr	r0, [r7, #20]
 8012b84:	f002 f83e 	bl	8014c04 <tcp_enqueue_flags>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d004      	beq.n	8012b9e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012b94:	2100      	movs	r1, #0
 8012b96:	6978      	ldr	r0, [r7, #20]
 8012b98:	f7fe f97c 	bl	8010e94 <tcp_abandon>
      return;
 8012b9c:	e006      	b.n	8012bac <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012b9e:	6978      	ldr	r0, [r7, #20]
 8012ba0:	f002 f91e 	bl	8014de0 <tcp_output>
  return;
 8012ba4:	e001      	b.n	8012baa <tcp_listen_input+0x1be>
    return;
 8012ba6:	bf00      	nop
 8012ba8:	e000      	b.n	8012bac <tcp_listen_input+0x1c0>
  return;
 8012baa:	bf00      	nop
}
 8012bac:	371c      	adds	r7, #28
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd90      	pop	{r4, r7, pc}
 8012bb2:	bf00      	nop
 8012bb4:	24008250 	.word	0x24008250
 8012bb8:	0801cd94 	.word	0x0801cd94
 8012bbc:	0801cf8c 	.word	0x0801cf8c
 8012bc0:	0801cde0 	.word	0x0801cde0
 8012bc4:	24008248 	.word	0x24008248
 8012bc8:	2400824e 	.word	0x2400824e
 8012bcc:	24008244 	.word	0x24008244
 8012bd0:	24008234 	.word	0x24008234
 8012bd4:	2400511c 	.word	0x2400511c
 8012bd8:	24005120 	.word	0x24005120
 8012bdc:	2400510c 	.word	0x2400510c
 8012be0:	24008218 	.word	0x24008218
 8012be4:	24008220 	.word	0x24008220

08012be8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b086      	sub	sp, #24
 8012bec:	af04      	add	r7, sp, #16
 8012bee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012bf0:	4b2f      	ldr	r3, [pc, #188]	@ (8012cb0 <tcp_timewait_input+0xc8>)
 8012bf2:	781b      	ldrb	r3, [r3, #0]
 8012bf4:	f003 0304 	and.w	r3, r3, #4
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d153      	bne.n	8012ca4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d106      	bne.n	8012c10 <tcp_timewait_input+0x28>
 8012c02:	4b2c      	ldr	r3, [pc, #176]	@ (8012cb4 <tcp_timewait_input+0xcc>)
 8012c04:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012c08:	492b      	ldr	r1, [pc, #172]	@ (8012cb8 <tcp_timewait_input+0xd0>)
 8012c0a:	482c      	ldr	r0, [pc, #176]	@ (8012cbc <tcp_timewait_input+0xd4>)
 8012c0c:	f006 fce6 	bl	80195dc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012c10:	4b27      	ldr	r3, [pc, #156]	@ (8012cb0 <tcp_timewait_input+0xc8>)
 8012c12:	781b      	ldrb	r3, [r3, #0]
 8012c14:	f003 0302 	and.w	r3, r3, #2
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d02a      	beq.n	8012c72 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012c1c:	4b28      	ldr	r3, [pc, #160]	@ (8012cc0 <tcp_timewait_input+0xd8>)
 8012c1e:	681a      	ldr	r2, [r3, #0]
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c24:	1ad3      	subs	r3, r2, r3
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	db2d      	blt.n	8012c86 <tcp_timewait_input+0x9e>
 8012c2a:	4b25      	ldr	r3, [pc, #148]	@ (8012cc0 <tcp_timewait_input+0xd8>)
 8012c2c:	681a      	ldr	r2, [r3, #0]
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c32:	6879      	ldr	r1, [r7, #4]
 8012c34:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012c36:	440b      	add	r3, r1
 8012c38:	1ad3      	subs	r3, r2, r3
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	dc23      	bgt.n	8012c86 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012c3e:	4b21      	ldr	r3, [pc, #132]	@ (8012cc4 <tcp_timewait_input+0xdc>)
 8012c40:	6819      	ldr	r1, [r3, #0]
 8012c42:	4b21      	ldr	r3, [pc, #132]	@ (8012cc8 <tcp_timewait_input+0xe0>)
 8012c44:	881b      	ldrh	r3, [r3, #0]
 8012c46:	461a      	mov	r2, r3
 8012c48:	4b1d      	ldr	r3, [pc, #116]	@ (8012cc0 <tcp_timewait_input+0xd8>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8012ccc <tcp_timewait_input+0xe4>)
 8012c50:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012c52:	885b      	ldrh	r3, [r3, #2]
 8012c54:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012c56:	4a1d      	ldr	r2, [pc, #116]	@ (8012ccc <tcp_timewait_input+0xe4>)
 8012c58:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012c5a:	8812      	ldrh	r2, [r2, #0]
 8012c5c:	b292      	uxth	r2, r2
 8012c5e:	9202      	str	r2, [sp, #8]
 8012c60:	9301      	str	r3, [sp, #4]
 8012c62:	4b1b      	ldr	r3, [pc, #108]	@ (8012cd0 <tcp_timewait_input+0xe8>)
 8012c64:	9300      	str	r3, [sp, #0]
 8012c66:	4b1b      	ldr	r3, [pc, #108]	@ (8012cd4 <tcp_timewait_input+0xec>)
 8012c68:	4602      	mov	r2, r0
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f002 fe6c 	bl	8015948 <tcp_rst>
      return;
 8012c70:	e01b      	b.n	8012caa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012c72:	4b0f      	ldr	r3, [pc, #60]	@ (8012cb0 <tcp_timewait_input+0xc8>)
 8012c74:	781b      	ldrb	r3, [r3, #0]
 8012c76:	f003 0301 	and.w	r3, r3, #1
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d003      	beq.n	8012c86 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012c7e:	4b16      	ldr	r3, [pc, #88]	@ (8012cd8 <tcp_timewait_input+0xf0>)
 8012c80:	681a      	ldr	r2, [r3, #0]
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012c86:	4b10      	ldr	r3, [pc, #64]	@ (8012cc8 <tcp_timewait_input+0xe0>)
 8012c88:	881b      	ldrh	r3, [r3, #0]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d00c      	beq.n	8012ca8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	8b5b      	ldrh	r3, [r3, #26]
 8012c92:	f043 0302 	orr.w	r3, r3, #2
 8012c96:	b29a      	uxth	r2, r3
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012c9c:	6878      	ldr	r0, [r7, #4]
 8012c9e:	f002 f89f 	bl	8014de0 <tcp_output>
  }
  return;
 8012ca2:	e001      	b.n	8012ca8 <tcp_timewait_input+0xc0>
    return;
 8012ca4:	bf00      	nop
 8012ca6:	e000      	b.n	8012caa <tcp_timewait_input+0xc2>
  return;
 8012ca8:	bf00      	nop
}
 8012caa:	3708      	adds	r7, #8
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}
 8012cb0:	24008250 	.word	0x24008250
 8012cb4:	0801cd94 	.word	0x0801cd94
 8012cb8:	0801cfac 	.word	0x0801cfac
 8012cbc:	0801cde0 	.word	0x0801cde0
 8012cc0:	24008244 	.word	0x24008244
 8012cc4:	24008248 	.word	0x24008248
 8012cc8:	2400824e 	.word	0x2400824e
 8012ccc:	24008234 	.word	0x24008234
 8012cd0:	2400511c 	.word	0x2400511c
 8012cd4:	24005120 	.word	0x24005120
 8012cd8:	2400820c 	.word	0x2400820c

08012cdc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012cdc:	b590      	push	{r4, r7, lr}
 8012cde:	b08d      	sub	sp, #52	@ 0x34
 8012ce0:	af04      	add	r7, sp, #16
 8012ce2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d106      	bne.n	8012d00 <tcp_process+0x24>
 8012cf2:	4b9d      	ldr	r3, [pc, #628]	@ (8012f68 <tcp_process+0x28c>)
 8012cf4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8012cf8:	499c      	ldr	r1, [pc, #624]	@ (8012f6c <tcp_process+0x290>)
 8012cfa:	489d      	ldr	r0, [pc, #628]	@ (8012f70 <tcp_process+0x294>)
 8012cfc:	f006 fc6e 	bl	80195dc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012d00:	4b9c      	ldr	r3, [pc, #624]	@ (8012f74 <tcp_process+0x298>)
 8012d02:	781b      	ldrb	r3, [r3, #0]
 8012d04:	f003 0304 	and.w	r3, r3, #4
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d04e      	beq.n	8012daa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	7d1b      	ldrb	r3, [r3, #20]
 8012d10:	2b02      	cmp	r3, #2
 8012d12:	d108      	bne.n	8012d26 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012d18:	4b97      	ldr	r3, [pc, #604]	@ (8012f78 <tcp_process+0x29c>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d123      	bne.n	8012d68 <tcp_process+0x8c>
        acceptable = 1;
 8012d20:	2301      	movs	r3, #1
 8012d22:	76fb      	strb	r3, [r7, #27]
 8012d24:	e020      	b.n	8012d68 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012d2a:	4b94      	ldr	r3, [pc, #592]	@ (8012f7c <tcp_process+0x2a0>)
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	429a      	cmp	r2, r3
 8012d30:	d102      	bne.n	8012d38 <tcp_process+0x5c>
        acceptable = 1;
 8012d32:	2301      	movs	r3, #1
 8012d34:	76fb      	strb	r3, [r7, #27]
 8012d36:	e017      	b.n	8012d68 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012d38:	4b90      	ldr	r3, [pc, #576]	@ (8012f7c <tcp_process+0x2a0>)
 8012d3a:	681a      	ldr	r2, [r3, #0]
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d40:	1ad3      	subs	r3, r2, r3
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	db10      	blt.n	8012d68 <tcp_process+0x8c>
 8012d46:	4b8d      	ldr	r3, [pc, #564]	@ (8012f7c <tcp_process+0x2a0>)
 8012d48:	681a      	ldr	r2, [r3, #0]
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d4e:	6879      	ldr	r1, [r7, #4]
 8012d50:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012d52:	440b      	add	r3, r1
 8012d54:	1ad3      	subs	r3, r2, r3
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	dc06      	bgt.n	8012d68 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	8b5b      	ldrh	r3, [r3, #26]
 8012d5e:	f043 0302 	orr.w	r3, r3, #2
 8012d62:	b29a      	uxth	r2, r3
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012d68:	7efb      	ldrb	r3, [r7, #27]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d01b      	beq.n	8012da6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	7d1b      	ldrb	r3, [r3, #20]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d106      	bne.n	8012d84 <tcp_process+0xa8>
 8012d76:	4b7c      	ldr	r3, [pc, #496]	@ (8012f68 <tcp_process+0x28c>)
 8012d78:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8012d7c:	4980      	ldr	r1, [pc, #512]	@ (8012f80 <tcp_process+0x2a4>)
 8012d7e:	487c      	ldr	r0, [pc, #496]	@ (8012f70 <tcp_process+0x294>)
 8012d80:	f006 fc2c 	bl	80195dc <iprintf>
      recv_flags |= TF_RESET;
 8012d84:	4b7f      	ldr	r3, [pc, #508]	@ (8012f84 <tcp_process+0x2a8>)
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	f043 0308 	orr.w	r3, r3, #8
 8012d8c:	b2da      	uxtb	r2, r3
 8012d8e:	4b7d      	ldr	r3, [pc, #500]	@ (8012f84 <tcp_process+0x2a8>)
 8012d90:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	8b5b      	ldrh	r3, [r3, #26]
 8012d96:	f023 0301 	bic.w	r3, r3, #1
 8012d9a:	b29a      	uxth	r2, r3
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012da0:	f06f 030d 	mvn.w	r3, #13
 8012da4:	e37a      	b.n	801349c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012da6:	2300      	movs	r3, #0
 8012da8:	e378      	b.n	801349c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012daa:	4b72      	ldr	r3, [pc, #456]	@ (8012f74 <tcp_process+0x298>)
 8012dac:	781b      	ldrb	r3, [r3, #0]
 8012dae:	f003 0302 	and.w	r3, r3, #2
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d010      	beq.n	8012dd8 <tcp_process+0xfc>
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	7d1b      	ldrb	r3, [r3, #20]
 8012dba:	2b02      	cmp	r3, #2
 8012dbc:	d00c      	beq.n	8012dd8 <tcp_process+0xfc>
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	7d1b      	ldrb	r3, [r3, #20]
 8012dc2:	2b03      	cmp	r3, #3
 8012dc4:	d008      	beq.n	8012dd8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	8b5b      	ldrh	r3, [r3, #26]
 8012dca:	f043 0302 	orr.w	r3, r3, #2
 8012dce:	b29a      	uxth	r2, r3
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	e361      	b.n	801349c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	8b5b      	ldrh	r3, [r3, #26]
 8012ddc:	f003 0310 	and.w	r3, r3, #16
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d103      	bne.n	8012dec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012de4:	4b68      	ldr	r3, [pc, #416]	@ (8012f88 <tcp_process+0x2ac>)
 8012de6:	681a      	ldr	r2, [r3, #0]
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2200      	movs	r2, #0
 8012df0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2200      	movs	r2, #0
 8012df8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f001 fc2b 	bl	8014658 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	7d1b      	ldrb	r3, [r3, #20]
 8012e06:	3b02      	subs	r3, #2
 8012e08:	2b07      	cmp	r3, #7
 8012e0a:	f200 8337 	bhi.w	801347c <tcp_process+0x7a0>
 8012e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8012e14 <tcp_process+0x138>)
 8012e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e14:	08012e35 	.word	0x08012e35
 8012e18:	08013065 	.word	0x08013065
 8012e1c:	080131dd 	.word	0x080131dd
 8012e20:	08013207 	.word	0x08013207
 8012e24:	0801332b 	.word	0x0801332b
 8012e28:	080131dd 	.word	0x080131dd
 8012e2c:	080133b7 	.word	0x080133b7
 8012e30:	08013447 	.word	0x08013447
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012e34:	4b4f      	ldr	r3, [pc, #316]	@ (8012f74 <tcp_process+0x298>)
 8012e36:	781b      	ldrb	r3, [r3, #0]
 8012e38:	f003 0310 	and.w	r3, r3, #16
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	f000 80e4 	beq.w	801300a <tcp_process+0x32e>
 8012e42:	4b4c      	ldr	r3, [pc, #304]	@ (8012f74 <tcp_process+0x298>)
 8012e44:	781b      	ldrb	r3, [r3, #0]
 8012e46:	f003 0302 	and.w	r3, r3, #2
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	f000 80dd 	beq.w	801300a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e54:	1c5a      	adds	r2, r3, #1
 8012e56:	4b48      	ldr	r3, [pc, #288]	@ (8012f78 <tcp_process+0x29c>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	429a      	cmp	r2, r3
 8012e5c:	f040 80d5 	bne.w	801300a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012e60:	4b46      	ldr	r3, [pc, #280]	@ (8012f7c <tcp_process+0x2a0>)
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	1c5a      	adds	r2, r3, #1
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8012e72:	4b41      	ldr	r3, [pc, #260]	@ (8012f78 <tcp_process+0x29c>)
 8012e74:	681a      	ldr	r2, [r3, #0]
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012e7a:	4b44      	ldr	r3, [pc, #272]	@ (8012f8c <tcp_process+0x2b0>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	89db      	ldrh	r3, [r3, #14]
 8012e80:	b29a      	uxth	r2, r3
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012e94:	4b39      	ldr	r3, [pc, #228]	@ (8012f7c <tcp_process+0x2a0>)
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	1e5a      	subs	r2, r3, #1
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2204      	movs	r2, #4
 8012ea2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	3304      	adds	r3, #4
 8012eac:	4618      	mov	r0, r3
 8012eae:	f004 fe4d 	bl	8017b4c <ip4_route>
 8012eb2:	4601      	mov	r1, r0
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	3304      	adds	r3, #4
 8012eb8:	461a      	mov	r2, r3
 8012eba:	4620      	mov	r0, r4
 8012ebc:	f7ff f88c 	bl	8011fd8 <tcp_eff_send_mss_netif>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	461a      	mov	r2, r3
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012ecc:	009a      	lsls	r2, r3, #2
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012ed2:	005b      	lsls	r3, r3, #1
 8012ed4:	f241 111c 	movw	r1, #4380	@ 0x111c
 8012ed8:	428b      	cmp	r3, r1
 8012eda:	bf38      	it	cc
 8012edc:	460b      	movcc	r3, r1
 8012ede:	429a      	cmp	r2, r3
 8012ee0:	d204      	bcs.n	8012eec <tcp_process+0x210>
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012ee6:	009b      	lsls	r3, r3, #2
 8012ee8:	b29b      	uxth	r3, r3
 8012eea:	e00d      	b.n	8012f08 <tcp_process+0x22c>
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012ef0:	005b      	lsls	r3, r3, #1
 8012ef2:	f241 121c 	movw	r2, #4380	@ 0x111c
 8012ef6:	4293      	cmp	r3, r2
 8012ef8:	d904      	bls.n	8012f04 <tcp_process+0x228>
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012efe:	005b      	lsls	r3, r3, #1
 8012f00:	b29b      	uxth	r3, r3
 8012f02:	e001      	b.n	8012f08 <tcp_process+0x22c>
 8012f04:	f241 131c 	movw	r3, #4380	@ 0x111c
 8012f08:	687a      	ldr	r2, [r7, #4]
 8012f0a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d106      	bne.n	8012f26 <tcp_process+0x24a>
 8012f18:	4b13      	ldr	r3, [pc, #76]	@ (8012f68 <tcp_process+0x28c>)
 8012f1a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8012f1e:	491c      	ldr	r1, [pc, #112]	@ (8012f90 <tcp_process+0x2b4>)
 8012f20:	4813      	ldr	r0, [pc, #76]	@ (8012f70 <tcp_process+0x294>)
 8012f22:	f006 fb5b 	bl	80195dc <iprintf>
        --pcb->snd_queuelen;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012f2c:	3b01      	subs	r3, #1
 8012f2e:	b29a      	uxth	r2, r3
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012f3a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012f3c:	69fb      	ldr	r3, [r7, #28]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d12a      	bne.n	8012f98 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012f46:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012f48:	69fb      	ldr	r3, [r7, #28]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d106      	bne.n	8012f5c <tcp_process+0x280>
 8012f4e:	4b06      	ldr	r3, [pc, #24]	@ (8012f68 <tcp_process+0x28c>)
 8012f50:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8012f54:	490f      	ldr	r1, [pc, #60]	@ (8012f94 <tcp_process+0x2b8>)
 8012f56:	4806      	ldr	r0, [pc, #24]	@ (8012f70 <tcp_process+0x294>)
 8012f58:	f006 fb40 	bl	80195dc <iprintf>
          pcb->unsent = rseg->next;
 8012f5c:	69fb      	ldr	r3, [r7, #28]
 8012f5e:	681a      	ldr	r2, [r3, #0]
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012f64:	e01c      	b.n	8012fa0 <tcp_process+0x2c4>
 8012f66:	bf00      	nop
 8012f68:	0801cd94 	.word	0x0801cd94
 8012f6c:	0801cfcc 	.word	0x0801cfcc
 8012f70:	0801cde0 	.word	0x0801cde0
 8012f74:	24008250 	.word	0x24008250
 8012f78:	24008248 	.word	0x24008248
 8012f7c:	24008244 	.word	0x24008244
 8012f80:	0801cfe8 	.word	0x0801cfe8
 8012f84:	24008251 	.word	0x24008251
 8012f88:	2400820c 	.word	0x2400820c
 8012f8c:	24008234 	.word	0x24008234
 8012f90:	0801d008 	.word	0x0801d008
 8012f94:	0801d020 	.word	0x0801d020
        } else {
          pcb->unacked = rseg->next;
 8012f98:	69fb      	ldr	r3, [r7, #28]
 8012f9a:	681a      	ldr	r2, [r3, #0]
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8012fa0:	69f8      	ldr	r0, [r7, #28]
 8012fa2:	f7fe fd22 	bl	80119ea <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d104      	bne.n	8012fb8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012fb4:	861a      	strh	r2, [r3, #48]	@ 0x30
 8012fb6:	e006      	b.n	8012fc6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d00a      	beq.n	8012fe6 <tcp_process+0x30a>
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012fd6:	687a      	ldr	r2, [r7, #4]
 8012fd8:	6910      	ldr	r0, [r2, #16]
 8012fda:	2200      	movs	r2, #0
 8012fdc:	6879      	ldr	r1, [r7, #4]
 8012fde:	4798      	blx	r3
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	76bb      	strb	r3, [r7, #26]
 8012fe4:	e001      	b.n	8012fea <tcp_process+0x30e>
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012fea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012fee:	f113 0f0d 	cmn.w	r3, #13
 8012ff2:	d102      	bne.n	8012ffa <tcp_process+0x31e>
          return ERR_ABRT;
 8012ff4:	f06f 030c 	mvn.w	r3, #12
 8012ff8:	e250      	b.n	801349c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	8b5b      	ldrh	r3, [r3, #26]
 8012ffe:	f043 0302 	orr.w	r3, r3, #2
 8013002:	b29a      	uxth	r2, r3
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013008:	e23a      	b.n	8013480 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801300a:	4b98      	ldr	r3, [pc, #608]	@ (801326c <tcp_process+0x590>)
 801300c:	781b      	ldrb	r3, [r3, #0]
 801300e:	f003 0310 	and.w	r3, r3, #16
 8013012:	2b00      	cmp	r3, #0
 8013014:	f000 8234 	beq.w	8013480 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013018:	4b95      	ldr	r3, [pc, #596]	@ (8013270 <tcp_process+0x594>)
 801301a:	6819      	ldr	r1, [r3, #0]
 801301c:	4b95      	ldr	r3, [pc, #596]	@ (8013274 <tcp_process+0x598>)
 801301e:	881b      	ldrh	r3, [r3, #0]
 8013020:	461a      	mov	r2, r3
 8013022:	4b95      	ldr	r3, [pc, #596]	@ (8013278 <tcp_process+0x59c>)
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013028:	4b94      	ldr	r3, [pc, #592]	@ (801327c <tcp_process+0x5a0>)
 801302a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801302c:	885b      	ldrh	r3, [r3, #2]
 801302e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013030:	4a92      	ldr	r2, [pc, #584]	@ (801327c <tcp_process+0x5a0>)
 8013032:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013034:	8812      	ldrh	r2, [r2, #0]
 8013036:	b292      	uxth	r2, r2
 8013038:	9202      	str	r2, [sp, #8]
 801303a:	9301      	str	r3, [sp, #4]
 801303c:	4b90      	ldr	r3, [pc, #576]	@ (8013280 <tcp_process+0x5a4>)
 801303e:	9300      	str	r3, [sp, #0]
 8013040:	4b90      	ldr	r3, [pc, #576]	@ (8013284 <tcp_process+0x5a8>)
 8013042:	4602      	mov	r2, r0
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f002 fc7f 	bl	8015948 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013050:	2b05      	cmp	r3, #5
 8013052:	f200 8215 	bhi.w	8013480 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	2200      	movs	r2, #0
 801305a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f002 fa4b 	bl	80154f8 <tcp_rexmit_rto>
      break;
 8013062:	e20d      	b.n	8013480 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013064:	4b81      	ldr	r3, [pc, #516]	@ (801326c <tcp_process+0x590>)
 8013066:	781b      	ldrb	r3, [r3, #0]
 8013068:	f003 0310 	and.w	r3, r3, #16
 801306c:	2b00      	cmp	r3, #0
 801306e:	f000 80a1 	beq.w	80131b4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013072:	4b7f      	ldr	r3, [pc, #508]	@ (8013270 <tcp_process+0x594>)
 8013074:	681a      	ldr	r2, [r3, #0]
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801307a:	1ad3      	subs	r3, r2, r3
 801307c:	3b01      	subs	r3, #1
 801307e:	2b00      	cmp	r3, #0
 8013080:	db7e      	blt.n	8013180 <tcp_process+0x4a4>
 8013082:	4b7b      	ldr	r3, [pc, #492]	@ (8013270 <tcp_process+0x594>)
 8013084:	681a      	ldr	r2, [r3, #0]
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801308a:	1ad3      	subs	r3, r2, r3
 801308c:	2b00      	cmp	r3, #0
 801308e:	dc77      	bgt.n	8013180 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2204      	movs	r2, #4
 8013094:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801309a:	2b00      	cmp	r3, #0
 801309c:	d102      	bne.n	80130a4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801309e:	23fa      	movs	r3, #250	@ 0xfa
 80130a0:	76bb      	strb	r3, [r7, #26]
 80130a2:	e01d      	b.n	80130e0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80130a8:	699b      	ldr	r3, [r3, #24]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d106      	bne.n	80130bc <tcp_process+0x3e0>
 80130ae:	4b76      	ldr	r3, [pc, #472]	@ (8013288 <tcp_process+0x5ac>)
 80130b0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80130b4:	4975      	ldr	r1, [pc, #468]	@ (801328c <tcp_process+0x5b0>)
 80130b6:	4876      	ldr	r0, [pc, #472]	@ (8013290 <tcp_process+0x5b4>)
 80130b8:	f006 fa90 	bl	80195dc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80130c0:	699b      	ldr	r3, [r3, #24]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d00a      	beq.n	80130dc <tcp_process+0x400>
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80130ca:	699b      	ldr	r3, [r3, #24]
 80130cc:	687a      	ldr	r2, [r7, #4]
 80130ce:	6910      	ldr	r0, [r2, #16]
 80130d0:	2200      	movs	r2, #0
 80130d2:	6879      	ldr	r1, [r7, #4]
 80130d4:	4798      	blx	r3
 80130d6:	4603      	mov	r3, r0
 80130d8:	76bb      	strb	r3, [r7, #26]
 80130da:	e001      	b.n	80130e0 <tcp_process+0x404>
 80130dc:	23f0      	movs	r3, #240	@ 0xf0
 80130de:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80130e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d00a      	beq.n	80130fe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80130e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80130ec:	f113 0f0d 	cmn.w	r3, #13
 80130f0:	d002      	beq.n	80130f8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80130f2:	6878      	ldr	r0, [r7, #4]
 80130f4:	f7fd ff8c 	bl	8011010 <tcp_abort>
            }
            return ERR_ABRT;
 80130f8:	f06f 030c 	mvn.w	r3, #12
 80130fc:	e1ce      	b.n	801349c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f000 fae0 	bl	80136c4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013104:	4b63      	ldr	r3, [pc, #396]	@ (8013294 <tcp_process+0x5b8>)
 8013106:	881b      	ldrh	r3, [r3, #0]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d005      	beq.n	8013118 <tcp_process+0x43c>
            recv_acked--;
 801310c:	4b61      	ldr	r3, [pc, #388]	@ (8013294 <tcp_process+0x5b8>)
 801310e:	881b      	ldrh	r3, [r3, #0]
 8013110:	3b01      	subs	r3, #1
 8013112:	b29a      	uxth	r2, r3
 8013114:	4b5f      	ldr	r3, [pc, #380]	@ (8013294 <tcp_process+0x5b8>)
 8013116:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801311c:	009a      	lsls	r2, r3, #2
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013122:	005b      	lsls	r3, r3, #1
 8013124:	f241 111c 	movw	r1, #4380	@ 0x111c
 8013128:	428b      	cmp	r3, r1
 801312a:	bf38      	it	cc
 801312c:	460b      	movcc	r3, r1
 801312e:	429a      	cmp	r2, r3
 8013130:	d204      	bcs.n	801313c <tcp_process+0x460>
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013136:	009b      	lsls	r3, r3, #2
 8013138:	b29b      	uxth	r3, r3
 801313a:	e00d      	b.n	8013158 <tcp_process+0x47c>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013140:	005b      	lsls	r3, r3, #1
 8013142:	f241 121c 	movw	r2, #4380	@ 0x111c
 8013146:	4293      	cmp	r3, r2
 8013148:	d904      	bls.n	8013154 <tcp_process+0x478>
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801314e:	005b      	lsls	r3, r3, #1
 8013150:	b29b      	uxth	r3, r3
 8013152:	e001      	b.n	8013158 <tcp_process+0x47c>
 8013154:	f241 131c 	movw	r3, #4380	@ 0x111c
 8013158:	687a      	ldr	r2, [r7, #4]
 801315a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801315e:	4b4e      	ldr	r3, [pc, #312]	@ (8013298 <tcp_process+0x5bc>)
 8013160:	781b      	ldrb	r3, [r3, #0]
 8013162:	f003 0320 	and.w	r3, r3, #32
 8013166:	2b00      	cmp	r3, #0
 8013168:	d037      	beq.n	80131da <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	8b5b      	ldrh	r3, [r3, #26]
 801316e:	f043 0302 	orr.w	r3, r3, #2
 8013172:	b29a      	uxth	r2, r3
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	2207      	movs	r2, #7
 801317c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801317e:	e02c      	b.n	80131da <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013180:	4b3b      	ldr	r3, [pc, #236]	@ (8013270 <tcp_process+0x594>)
 8013182:	6819      	ldr	r1, [r3, #0]
 8013184:	4b3b      	ldr	r3, [pc, #236]	@ (8013274 <tcp_process+0x598>)
 8013186:	881b      	ldrh	r3, [r3, #0]
 8013188:	461a      	mov	r2, r3
 801318a:	4b3b      	ldr	r3, [pc, #236]	@ (8013278 <tcp_process+0x59c>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013190:	4b3a      	ldr	r3, [pc, #232]	@ (801327c <tcp_process+0x5a0>)
 8013192:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013194:	885b      	ldrh	r3, [r3, #2]
 8013196:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013198:	4a38      	ldr	r2, [pc, #224]	@ (801327c <tcp_process+0x5a0>)
 801319a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801319c:	8812      	ldrh	r2, [r2, #0]
 801319e:	b292      	uxth	r2, r2
 80131a0:	9202      	str	r2, [sp, #8]
 80131a2:	9301      	str	r3, [sp, #4]
 80131a4:	4b36      	ldr	r3, [pc, #216]	@ (8013280 <tcp_process+0x5a4>)
 80131a6:	9300      	str	r3, [sp, #0]
 80131a8:	4b36      	ldr	r3, [pc, #216]	@ (8013284 <tcp_process+0x5a8>)
 80131aa:	4602      	mov	r2, r0
 80131ac:	6878      	ldr	r0, [r7, #4]
 80131ae:	f002 fbcb 	bl	8015948 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80131b2:	e167      	b.n	8013484 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80131b4:	4b2d      	ldr	r3, [pc, #180]	@ (801326c <tcp_process+0x590>)
 80131b6:	781b      	ldrb	r3, [r3, #0]
 80131b8:	f003 0302 	and.w	r3, r3, #2
 80131bc:	2b00      	cmp	r3, #0
 80131be:	f000 8161 	beq.w	8013484 <tcp_process+0x7a8>
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131c6:	1e5a      	subs	r2, r3, #1
 80131c8:	4b2b      	ldr	r3, [pc, #172]	@ (8013278 <tcp_process+0x59c>)
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	429a      	cmp	r2, r3
 80131ce:	f040 8159 	bne.w	8013484 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f002 f9b2 	bl	801553c <tcp_rexmit>
      break;
 80131d8:	e154      	b.n	8013484 <tcp_process+0x7a8>
 80131da:	e153      	b.n	8013484 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80131dc:	6878      	ldr	r0, [r7, #4]
 80131de:	f000 fa71 	bl	80136c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80131e2:	4b2d      	ldr	r3, [pc, #180]	@ (8013298 <tcp_process+0x5bc>)
 80131e4:	781b      	ldrb	r3, [r3, #0]
 80131e6:	f003 0320 	and.w	r3, r3, #32
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	f000 814c 	beq.w	8013488 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	8b5b      	ldrh	r3, [r3, #26]
 80131f4:	f043 0302 	orr.w	r3, r3, #2
 80131f8:	b29a      	uxth	r2, r3
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	2207      	movs	r2, #7
 8013202:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013204:	e140      	b.n	8013488 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f000 fa5c 	bl	80136c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801320c:	4b22      	ldr	r3, [pc, #136]	@ (8013298 <tcp_process+0x5bc>)
 801320e:	781b      	ldrb	r3, [r3, #0]
 8013210:	f003 0320 	and.w	r3, r3, #32
 8013214:	2b00      	cmp	r3, #0
 8013216:	d071      	beq.n	80132fc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013218:	4b14      	ldr	r3, [pc, #80]	@ (801326c <tcp_process+0x590>)
 801321a:	781b      	ldrb	r3, [r3, #0]
 801321c:	f003 0310 	and.w	r3, r3, #16
 8013220:	2b00      	cmp	r3, #0
 8013222:	d060      	beq.n	80132e6 <tcp_process+0x60a>
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013228:	4b11      	ldr	r3, [pc, #68]	@ (8013270 <tcp_process+0x594>)
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	429a      	cmp	r2, r3
 801322e:	d15a      	bne.n	80132e6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013234:	2b00      	cmp	r3, #0
 8013236:	d156      	bne.n	80132e6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	8b5b      	ldrh	r3, [r3, #26]
 801323c:	f043 0302 	orr.w	r3, r3, #2
 8013240:	b29a      	uxth	r2, r3
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013246:	6878      	ldr	r0, [r7, #4]
 8013248:	f7fe fdbc 	bl	8011dc4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801324c:	4b13      	ldr	r3, [pc, #76]	@ (801329c <tcp_process+0x5c0>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	687a      	ldr	r2, [r7, #4]
 8013252:	429a      	cmp	r2, r3
 8013254:	d105      	bne.n	8013262 <tcp_process+0x586>
 8013256:	4b11      	ldr	r3, [pc, #68]	@ (801329c <tcp_process+0x5c0>)
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	68db      	ldr	r3, [r3, #12]
 801325c:	4a0f      	ldr	r2, [pc, #60]	@ (801329c <tcp_process+0x5c0>)
 801325e:	6013      	str	r3, [r2, #0]
 8013260:	e02e      	b.n	80132c0 <tcp_process+0x5e4>
 8013262:	4b0e      	ldr	r3, [pc, #56]	@ (801329c <tcp_process+0x5c0>)
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	617b      	str	r3, [r7, #20]
 8013268:	e027      	b.n	80132ba <tcp_process+0x5de>
 801326a:	bf00      	nop
 801326c:	24008250 	.word	0x24008250
 8013270:	24008248 	.word	0x24008248
 8013274:	2400824e 	.word	0x2400824e
 8013278:	24008244 	.word	0x24008244
 801327c:	24008234 	.word	0x24008234
 8013280:	2400511c 	.word	0x2400511c
 8013284:	24005120 	.word	0x24005120
 8013288:	0801cd94 	.word	0x0801cd94
 801328c:	0801d034 	.word	0x0801d034
 8013290:	0801cde0 	.word	0x0801cde0
 8013294:	2400824c 	.word	0x2400824c
 8013298:	24008251 	.word	0x24008251
 801329c:	24008218 	.word	0x24008218
 80132a0:	697b      	ldr	r3, [r7, #20]
 80132a2:	68db      	ldr	r3, [r3, #12]
 80132a4:	687a      	ldr	r2, [r7, #4]
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d104      	bne.n	80132b4 <tcp_process+0x5d8>
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	68da      	ldr	r2, [r3, #12]
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	60da      	str	r2, [r3, #12]
 80132b2:	e005      	b.n	80132c0 <tcp_process+0x5e4>
 80132b4:	697b      	ldr	r3, [r7, #20]
 80132b6:	68db      	ldr	r3, [r3, #12]
 80132b8:	617b      	str	r3, [r7, #20]
 80132ba:	697b      	ldr	r3, [r7, #20]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d1ef      	bne.n	80132a0 <tcp_process+0x5c4>
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	2200      	movs	r2, #0
 80132c4:	60da      	str	r2, [r3, #12]
 80132c6:	4b77      	ldr	r3, [pc, #476]	@ (80134a4 <tcp_process+0x7c8>)
 80132c8:	2201      	movs	r2, #1
 80132ca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	220a      	movs	r2, #10
 80132d0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80132d2:	4b75      	ldr	r3, [pc, #468]	@ (80134a8 <tcp_process+0x7cc>)
 80132d4:	681a      	ldr	r2, [r3, #0]
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	60da      	str	r2, [r3, #12]
 80132da:	4a73      	ldr	r2, [pc, #460]	@ (80134a8 <tcp_process+0x7cc>)
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6013      	str	r3, [r2, #0]
 80132e0:	f002 fcf4 	bl	8015ccc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80132e4:	e0d2      	b.n	801348c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	8b5b      	ldrh	r3, [r3, #26]
 80132ea:	f043 0302 	orr.w	r3, r3, #2
 80132ee:	b29a      	uxth	r2, r3
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2208      	movs	r2, #8
 80132f8:	751a      	strb	r2, [r3, #20]
      break;
 80132fa:	e0c7      	b.n	801348c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80132fc:	4b6b      	ldr	r3, [pc, #428]	@ (80134ac <tcp_process+0x7d0>)
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	f003 0310 	and.w	r3, r3, #16
 8013304:	2b00      	cmp	r3, #0
 8013306:	f000 80c1 	beq.w	801348c <tcp_process+0x7b0>
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801330e:	4b68      	ldr	r3, [pc, #416]	@ (80134b0 <tcp_process+0x7d4>)
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	429a      	cmp	r2, r3
 8013314:	f040 80ba 	bne.w	801348c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801331c:	2b00      	cmp	r3, #0
 801331e:	f040 80b5 	bne.w	801348c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	2206      	movs	r2, #6
 8013326:	751a      	strb	r2, [r3, #20]
      break;
 8013328:	e0b0      	b.n	801348c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801332a:	6878      	ldr	r0, [r7, #4]
 801332c:	f000 f9ca 	bl	80136c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013330:	4b60      	ldr	r3, [pc, #384]	@ (80134b4 <tcp_process+0x7d8>)
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	f003 0320 	and.w	r3, r3, #32
 8013338:	2b00      	cmp	r3, #0
 801333a:	f000 80a9 	beq.w	8013490 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	8b5b      	ldrh	r3, [r3, #26]
 8013342:	f043 0302 	orr.w	r3, r3, #2
 8013346:	b29a      	uxth	r2, r3
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801334c:	6878      	ldr	r0, [r7, #4]
 801334e:	f7fe fd39 	bl	8011dc4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013352:	4b59      	ldr	r3, [pc, #356]	@ (80134b8 <tcp_process+0x7dc>)
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	429a      	cmp	r2, r3
 801335a:	d105      	bne.n	8013368 <tcp_process+0x68c>
 801335c:	4b56      	ldr	r3, [pc, #344]	@ (80134b8 <tcp_process+0x7dc>)
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	68db      	ldr	r3, [r3, #12]
 8013362:	4a55      	ldr	r2, [pc, #340]	@ (80134b8 <tcp_process+0x7dc>)
 8013364:	6013      	str	r3, [r2, #0]
 8013366:	e013      	b.n	8013390 <tcp_process+0x6b4>
 8013368:	4b53      	ldr	r3, [pc, #332]	@ (80134b8 <tcp_process+0x7dc>)
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	613b      	str	r3, [r7, #16]
 801336e:	e00c      	b.n	801338a <tcp_process+0x6ae>
 8013370:	693b      	ldr	r3, [r7, #16]
 8013372:	68db      	ldr	r3, [r3, #12]
 8013374:	687a      	ldr	r2, [r7, #4]
 8013376:	429a      	cmp	r2, r3
 8013378:	d104      	bne.n	8013384 <tcp_process+0x6a8>
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	68da      	ldr	r2, [r3, #12]
 801337e:	693b      	ldr	r3, [r7, #16]
 8013380:	60da      	str	r2, [r3, #12]
 8013382:	e005      	b.n	8013390 <tcp_process+0x6b4>
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	68db      	ldr	r3, [r3, #12]
 8013388:	613b      	str	r3, [r7, #16]
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d1ef      	bne.n	8013370 <tcp_process+0x694>
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2200      	movs	r2, #0
 8013394:	60da      	str	r2, [r3, #12]
 8013396:	4b43      	ldr	r3, [pc, #268]	@ (80134a4 <tcp_process+0x7c8>)
 8013398:	2201      	movs	r2, #1
 801339a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	220a      	movs	r2, #10
 80133a0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80133a2:	4b41      	ldr	r3, [pc, #260]	@ (80134a8 <tcp_process+0x7cc>)
 80133a4:	681a      	ldr	r2, [r3, #0]
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	60da      	str	r2, [r3, #12]
 80133aa:	4a3f      	ldr	r2, [pc, #252]	@ (80134a8 <tcp_process+0x7cc>)
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	6013      	str	r3, [r2, #0]
 80133b0:	f002 fc8c 	bl	8015ccc <tcp_timer_needed>
      }
      break;
 80133b4:	e06c      	b.n	8013490 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80133b6:	6878      	ldr	r0, [r7, #4]
 80133b8:	f000 f984 	bl	80136c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80133bc:	4b3b      	ldr	r3, [pc, #236]	@ (80134ac <tcp_process+0x7d0>)
 80133be:	781b      	ldrb	r3, [r3, #0]
 80133c0:	f003 0310 	and.w	r3, r3, #16
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d065      	beq.n	8013494 <tcp_process+0x7b8>
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80133cc:	4b38      	ldr	r3, [pc, #224]	@ (80134b0 <tcp_process+0x7d4>)
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d15f      	bne.n	8013494 <tcp_process+0x7b8>
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d15b      	bne.n	8013494 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f7fe fcf1 	bl	8011dc4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80133e2:	4b35      	ldr	r3, [pc, #212]	@ (80134b8 <tcp_process+0x7dc>)
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	687a      	ldr	r2, [r7, #4]
 80133e8:	429a      	cmp	r2, r3
 80133ea:	d105      	bne.n	80133f8 <tcp_process+0x71c>
 80133ec:	4b32      	ldr	r3, [pc, #200]	@ (80134b8 <tcp_process+0x7dc>)
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	68db      	ldr	r3, [r3, #12]
 80133f2:	4a31      	ldr	r2, [pc, #196]	@ (80134b8 <tcp_process+0x7dc>)
 80133f4:	6013      	str	r3, [r2, #0]
 80133f6:	e013      	b.n	8013420 <tcp_process+0x744>
 80133f8:	4b2f      	ldr	r3, [pc, #188]	@ (80134b8 <tcp_process+0x7dc>)
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	60fb      	str	r3, [r7, #12]
 80133fe:	e00c      	b.n	801341a <tcp_process+0x73e>
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	68db      	ldr	r3, [r3, #12]
 8013404:	687a      	ldr	r2, [r7, #4]
 8013406:	429a      	cmp	r2, r3
 8013408:	d104      	bne.n	8013414 <tcp_process+0x738>
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	68da      	ldr	r2, [r3, #12]
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	60da      	str	r2, [r3, #12]
 8013412:	e005      	b.n	8013420 <tcp_process+0x744>
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	68db      	ldr	r3, [r3, #12]
 8013418:	60fb      	str	r3, [r7, #12]
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d1ef      	bne.n	8013400 <tcp_process+0x724>
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	2200      	movs	r2, #0
 8013424:	60da      	str	r2, [r3, #12]
 8013426:	4b1f      	ldr	r3, [pc, #124]	@ (80134a4 <tcp_process+0x7c8>)
 8013428:	2201      	movs	r2, #1
 801342a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	220a      	movs	r2, #10
 8013430:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013432:	4b1d      	ldr	r3, [pc, #116]	@ (80134a8 <tcp_process+0x7cc>)
 8013434:	681a      	ldr	r2, [r3, #0]
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	60da      	str	r2, [r3, #12]
 801343a:	4a1b      	ldr	r2, [pc, #108]	@ (80134a8 <tcp_process+0x7cc>)
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	6013      	str	r3, [r2, #0]
 8013440:	f002 fc44 	bl	8015ccc <tcp_timer_needed>
      }
      break;
 8013444:	e026      	b.n	8013494 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013446:	6878      	ldr	r0, [r7, #4]
 8013448:	f000 f93c 	bl	80136c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801344c:	4b17      	ldr	r3, [pc, #92]	@ (80134ac <tcp_process+0x7d0>)
 801344e:	781b      	ldrb	r3, [r3, #0]
 8013450:	f003 0310 	and.w	r3, r3, #16
 8013454:	2b00      	cmp	r3, #0
 8013456:	d01f      	beq.n	8013498 <tcp_process+0x7bc>
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801345c:	4b14      	ldr	r3, [pc, #80]	@ (80134b0 <tcp_process+0x7d4>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	429a      	cmp	r2, r3
 8013462:	d119      	bne.n	8013498 <tcp_process+0x7bc>
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013468:	2b00      	cmp	r3, #0
 801346a:	d115      	bne.n	8013498 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801346c:	4b11      	ldr	r3, [pc, #68]	@ (80134b4 <tcp_process+0x7d8>)
 801346e:	781b      	ldrb	r3, [r3, #0]
 8013470:	f043 0310 	orr.w	r3, r3, #16
 8013474:	b2da      	uxtb	r2, r3
 8013476:	4b0f      	ldr	r3, [pc, #60]	@ (80134b4 <tcp_process+0x7d8>)
 8013478:	701a      	strb	r2, [r3, #0]
      }
      break;
 801347a:	e00d      	b.n	8013498 <tcp_process+0x7bc>
    default:
      break;
 801347c:	bf00      	nop
 801347e:	e00c      	b.n	801349a <tcp_process+0x7be>
      break;
 8013480:	bf00      	nop
 8013482:	e00a      	b.n	801349a <tcp_process+0x7be>
      break;
 8013484:	bf00      	nop
 8013486:	e008      	b.n	801349a <tcp_process+0x7be>
      break;
 8013488:	bf00      	nop
 801348a:	e006      	b.n	801349a <tcp_process+0x7be>
      break;
 801348c:	bf00      	nop
 801348e:	e004      	b.n	801349a <tcp_process+0x7be>
      break;
 8013490:	bf00      	nop
 8013492:	e002      	b.n	801349a <tcp_process+0x7be>
      break;
 8013494:	bf00      	nop
 8013496:	e000      	b.n	801349a <tcp_process+0x7be>
      break;
 8013498:	bf00      	nop
  }
  return ERR_OK;
 801349a:	2300      	movs	r3, #0
}
 801349c:	4618      	mov	r0, r3
 801349e:	3724      	adds	r7, #36	@ 0x24
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd90      	pop	{r4, r7, pc}
 80134a4:	24008220 	.word	0x24008220
 80134a8:	2400821c 	.word	0x2400821c
 80134ac:	24008250 	.word	0x24008250
 80134b0:	24008248 	.word	0x24008248
 80134b4:	24008251 	.word	0x24008251
 80134b8:	24008218 	.word	0x24008218

080134bc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80134bc:	b590      	push	{r4, r7, lr}
 80134be:	b085      	sub	sp, #20
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
 80134c4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d106      	bne.n	80134da <tcp_oos_insert_segment+0x1e>
 80134cc:	4b3b      	ldr	r3, [pc, #236]	@ (80135bc <tcp_oos_insert_segment+0x100>)
 80134ce:	f240 421f 	movw	r2, #1055	@ 0x41f
 80134d2:	493b      	ldr	r1, [pc, #236]	@ (80135c0 <tcp_oos_insert_segment+0x104>)
 80134d4:	483b      	ldr	r0, [pc, #236]	@ (80135c4 <tcp_oos_insert_segment+0x108>)
 80134d6:	f006 f881 	bl	80195dc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	68db      	ldr	r3, [r3, #12]
 80134de:	899b      	ldrh	r3, [r3, #12]
 80134e0:	b29b      	uxth	r3, r3
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7fb fad2 	bl	800ea8c <lwip_htons>
 80134e8:	4603      	mov	r3, r0
 80134ea:	b2db      	uxtb	r3, r3
 80134ec:	f003 0301 	and.w	r3, r3, #1
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d028      	beq.n	8013546 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80134f4:	6838      	ldr	r0, [r7, #0]
 80134f6:	f7fe fa63 	bl	80119c0 <tcp_segs_free>
    next = NULL;
 80134fa:	2300      	movs	r3, #0
 80134fc:	603b      	str	r3, [r7, #0]
 80134fe:	e056      	b.n	80135ae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	68db      	ldr	r3, [r3, #12]
 8013504:	899b      	ldrh	r3, [r3, #12]
 8013506:	b29b      	uxth	r3, r3
 8013508:	4618      	mov	r0, r3
 801350a:	f7fb fabf 	bl	800ea8c <lwip_htons>
 801350e:	4603      	mov	r3, r0
 8013510:	b2db      	uxtb	r3, r3
 8013512:	f003 0301 	and.w	r3, r3, #1
 8013516:	2b00      	cmp	r3, #0
 8013518:	d00d      	beq.n	8013536 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	68db      	ldr	r3, [r3, #12]
 801351e:	899b      	ldrh	r3, [r3, #12]
 8013520:	b29c      	uxth	r4, r3
 8013522:	2001      	movs	r0, #1
 8013524:	f7fb fab2 	bl	800ea8c <lwip_htons>
 8013528:	4603      	mov	r3, r0
 801352a:	461a      	mov	r2, r3
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	68db      	ldr	r3, [r3, #12]
 8013530:	4322      	orrs	r2, r4
 8013532:	b292      	uxth	r2, r2
 8013534:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013540:	68f8      	ldr	r0, [r7, #12]
 8013542:	f7fe fa52 	bl	80119ea <tcp_seg_free>
    while (next &&
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d00e      	beq.n	801356a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	891b      	ldrh	r3, [r3, #8]
 8013550:	461a      	mov	r2, r3
 8013552:	4b1d      	ldr	r3, [pc, #116]	@ (80135c8 <tcp_oos_insert_segment+0x10c>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	441a      	add	r2, r3
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	68db      	ldr	r3, [r3, #12]
 801355c:	685b      	ldr	r3, [r3, #4]
 801355e:	6839      	ldr	r1, [r7, #0]
 8013560:	8909      	ldrh	r1, [r1, #8]
 8013562:	440b      	add	r3, r1
 8013564:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013566:	2b00      	cmp	r3, #0
 8013568:	daca      	bge.n	8013500 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d01e      	beq.n	80135ae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	891b      	ldrh	r3, [r3, #8]
 8013574:	461a      	mov	r2, r3
 8013576:	4b14      	ldr	r3, [pc, #80]	@ (80135c8 <tcp_oos_insert_segment+0x10c>)
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	441a      	add	r2, r3
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	68db      	ldr	r3, [r3, #12]
 8013580:	685b      	ldr	r3, [r3, #4]
 8013582:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013584:	2b00      	cmp	r3, #0
 8013586:	dd12      	ble.n	80135ae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	68db      	ldr	r3, [r3, #12]
 801358c:	685b      	ldr	r3, [r3, #4]
 801358e:	b29a      	uxth	r2, r3
 8013590:	4b0d      	ldr	r3, [pc, #52]	@ (80135c8 <tcp_oos_insert_segment+0x10c>)
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	b29b      	uxth	r3, r3
 8013596:	1ad3      	subs	r3, r2, r3
 8013598:	b29a      	uxth	r2, r3
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	685a      	ldr	r2, [r3, #4]
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	891b      	ldrh	r3, [r3, #8]
 80135a6:	4619      	mov	r1, r3
 80135a8:	4610      	mov	r0, r2
 80135aa:	f7fc fda3 	bl	80100f4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	683a      	ldr	r2, [r7, #0]
 80135b2:	601a      	str	r2, [r3, #0]
}
 80135b4:	bf00      	nop
 80135b6:	3714      	adds	r7, #20
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd90      	pop	{r4, r7, pc}
 80135bc:	0801cd94 	.word	0x0801cd94
 80135c0:	0801d054 	.word	0x0801d054
 80135c4:	0801cde0 	.word	0x0801cde0
 80135c8:	24008244 	.word	0x24008244

080135cc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80135cc:	b5b0      	push	{r4, r5, r7, lr}
 80135ce:	b086      	sub	sp, #24
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	60f8      	str	r0, [r7, #12]
 80135d4:	60b9      	str	r1, [r7, #8]
 80135d6:	607a      	str	r2, [r7, #4]
 80135d8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80135da:	e03e      	b.n	801365a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80135e6:	697b      	ldr	r3, [r7, #20]
 80135e8:	685b      	ldr	r3, [r3, #4]
 80135ea:	4618      	mov	r0, r3
 80135ec:	f7fc ff96 	bl	801051c <pbuf_clen>
 80135f0:	4603      	mov	r3, r0
 80135f2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80135fa:	8a7a      	ldrh	r2, [r7, #18]
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d906      	bls.n	801360e <tcp_free_acked_segments+0x42>
 8013600:	4b2a      	ldr	r3, [pc, #168]	@ (80136ac <tcp_free_acked_segments+0xe0>)
 8013602:	f240 4257 	movw	r2, #1111	@ 0x457
 8013606:	492a      	ldr	r1, [pc, #168]	@ (80136b0 <tcp_free_acked_segments+0xe4>)
 8013608:	482a      	ldr	r0, [pc, #168]	@ (80136b4 <tcp_free_acked_segments+0xe8>)
 801360a:	f005 ffe7 	bl	80195dc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8013614:	8a7b      	ldrh	r3, [r7, #18]
 8013616:	1ad3      	subs	r3, r2, r3
 8013618:	b29a      	uxth	r2, r3
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013620:	697b      	ldr	r3, [r7, #20]
 8013622:	891a      	ldrh	r2, [r3, #8]
 8013624:	4b24      	ldr	r3, [pc, #144]	@ (80136b8 <tcp_free_acked_segments+0xec>)
 8013626:	881b      	ldrh	r3, [r3, #0]
 8013628:	4413      	add	r3, r2
 801362a:	b29a      	uxth	r2, r3
 801362c:	4b22      	ldr	r3, [pc, #136]	@ (80136b8 <tcp_free_acked_segments+0xec>)
 801362e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013630:	6978      	ldr	r0, [r7, #20]
 8013632:	f7fe f9da 	bl	80119ea <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801363c:	2b00      	cmp	r3, #0
 801363e:	d00c      	beq.n	801365a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d109      	bne.n	801365a <tcp_free_acked_segments+0x8e>
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d106      	bne.n	801365a <tcp_free_acked_segments+0x8e>
 801364c:	4b17      	ldr	r3, [pc, #92]	@ (80136ac <tcp_free_acked_segments+0xe0>)
 801364e:	f240 4261 	movw	r2, #1121	@ 0x461
 8013652:	491a      	ldr	r1, [pc, #104]	@ (80136bc <tcp_free_acked_segments+0xf0>)
 8013654:	4817      	ldr	r0, [pc, #92]	@ (80136b4 <tcp_free_acked_segments+0xe8>)
 8013656:	f005 ffc1 	bl	80195dc <iprintf>
  while (seg_list != NULL &&
 801365a:	68bb      	ldr	r3, [r7, #8]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d020      	beq.n	80136a2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013660:	68bb      	ldr	r3, [r7, #8]
 8013662:	68db      	ldr	r3, [r3, #12]
 8013664:	685b      	ldr	r3, [r3, #4]
 8013666:	4618      	mov	r0, r3
 8013668:	f7fb fa26 	bl	800eab8 <lwip_htonl>
 801366c:	4604      	mov	r4, r0
 801366e:	68bb      	ldr	r3, [r7, #8]
 8013670:	891b      	ldrh	r3, [r3, #8]
 8013672:	461d      	mov	r5, r3
 8013674:	68bb      	ldr	r3, [r7, #8]
 8013676:	68db      	ldr	r3, [r3, #12]
 8013678:	899b      	ldrh	r3, [r3, #12]
 801367a:	b29b      	uxth	r3, r3
 801367c:	4618      	mov	r0, r3
 801367e:	f7fb fa05 	bl	800ea8c <lwip_htons>
 8013682:	4603      	mov	r3, r0
 8013684:	b2db      	uxtb	r3, r3
 8013686:	f003 0303 	and.w	r3, r3, #3
 801368a:	2b00      	cmp	r3, #0
 801368c:	d001      	beq.n	8013692 <tcp_free_acked_segments+0xc6>
 801368e:	2301      	movs	r3, #1
 8013690:	e000      	b.n	8013694 <tcp_free_acked_segments+0xc8>
 8013692:	2300      	movs	r3, #0
 8013694:	442b      	add	r3, r5
 8013696:	18e2      	adds	r2, r4, r3
 8013698:	4b09      	ldr	r3, [pc, #36]	@ (80136c0 <tcp_free_acked_segments+0xf4>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801369e:	2b00      	cmp	r3, #0
 80136a0:	dd9c      	ble.n	80135dc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80136a2:	68bb      	ldr	r3, [r7, #8]
}
 80136a4:	4618      	mov	r0, r3
 80136a6:	3718      	adds	r7, #24
 80136a8:	46bd      	mov	sp, r7
 80136aa:	bdb0      	pop	{r4, r5, r7, pc}
 80136ac:	0801cd94 	.word	0x0801cd94
 80136b0:	0801d07c 	.word	0x0801d07c
 80136b4:	0801cde0 	.word	0x0801cde0
 80136b8:	2400824c 	.word	0x2400824c
 80136bc:	0801d0a4 	.word	0x0801d0a4
 80136c0:	24008248 	.word	0x24008248

080136c4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80136c4:	b5b0      	push	{r4, r5, r7, lr}
 80136c6:	b094      	sub	sp, #80	@ 0x50
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80136cc:	2300      	movs	r3, #0
 80136ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d106      	bne.n	80136e4 <tcp_receive+0x20>
 80136d6:	4b91      	ldr	r3, [pc, #580]	@ (801391c <tcp_receive+0x258>)
 80136d8:	f240 427b 	movw	r2, #1147	@ 0x47b
 80136dc:	4990      	ldr	r1, [pc, #576]	@ (8013920 <tcp_receive+0x25c>)
 80136de:	4891      	ldr	r0, [pc, #580]	@ (8013924 <tcp_receive+0x260>)
 80136e0:	f005 ff7c 	bl	80195dc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	7d1b      	ldrb	r3, [r3, #20]
 80136e8:	2b03      	cmp	r3, #3
 80136ea:	d806      	bhi.n	80136fa <tcp_receive+0x36>
 80136ec:	4b8b      	ldr	r3, [pc, #556]	@ (801391c <tcp_receive+0x258>)
 80136ee:	f240 427c 	movw	r2, #1148	@ 0x47c
 80136f2:	498d      	ldr	r1, [pc, #564]	@ (8013928 <tcp_receive+0x264>)
 80136f4:	488b      	ldr	r0, [pc, #556]	@ (8013924 <tcp_receive+0x260>)
 80136f6:	f005 ff71 	bl	80195dc <iprintf>

  if (flags & TCP_ACK) {
 80136fa:	4b8c      	ldr	r3, [pc, #560]	@ (801392c <tcp_receive+0x268>)
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	f003 0310 	and.w	r3, r3, #16
 8013702:	2b00      	cmp	r3, #0
 8013704:	f000 8264 	beq.w	8013bd0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801370e:	461a      	mov	r2, r3
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013714:	4413      	add	r3, r2
 8013716:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801371c:	4b84      	ldr	r3, [pc, #528]	@ (8013930 <tcp_receive+0x26c>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	1ad3      	subs	r3, r2, r3
 8013722:	2b00      	cmp	r3, #0
 8013724:	db1b      	blt.n	801375e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801372a:	4b81      	ldr	r3, [pc, #516]	@ (8013930 <tcp_receive+0x26c>)
 801372c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801372e:	429a      	cmp	r2, r3
 8013730:	d106      	bne.n	8013740 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013736:	4b7f      	ldr	r3, [pc, #508]	@ (8013934 <tcp_receive+0x270>)
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	1ad3      	subs	r3, r2, r3
 801373c:	2b00      	cmp	r3, #0
 801373e:	db0e      	blt.n	801375e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013744:	4b7b      	ldr	r3, [pc, #492]	@ (8013934 <tcp_receive+0x270>)
 8013746:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013748:	429a      	cmp	r2, r3
 801374a:	d125      	bne.n	8013798 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801374c:	4b7a      	ldr	r3, [pc, #488]	@ (8013938 <tcp_receive+0x274>)
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	89db      	ldrh	r3, [r3, #14]
 8013752:	b29a      	uxth	r2, r3
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801375a:	429a      	cmp	r2, r3
 801375c:	d91c      	bls.n	8013798 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801375e:	4b76      	ldr	r3, [pc, #472]	@ (8013938 <tcp_receive+0x274>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	89db      	ldrh	r3, [r3, #14]
 8013764:	b29a      	uxth	r2, r3
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013778:	429a      	cmp	r2, r3
 801377a:	d205      	bcs.n	8013788 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8013788:	4b69      	ldr	r3, [pc, #420]	@ (8013930 <tcp_receive+0x26c>)
 801378a:	681a      	ldr	r2, [r3, #0]
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8013790:	4b68      	ldr	r3, [pc, #416]	@ (8013934 <tcp_receive+0x270>)
 8013792:	681a      	ldr	r2, [r3, #0]
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013798:	4b66      	ldr	r3, [pc, #408]	@ (8013934 <tcp_receive+0x270>)
 801379a:	681a      	ldr	r2, [r3, #0]
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80137a0:	1ad3      	subs	r3, r2, r3
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	dc58      	bgt.n	8013858 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80137a6:	4b65      	ldr	r3, [pc, #404]	@ (801393c <tcp_receive+0x278>)
 80137a8:	881b      	ldrh	r3, [r3, #0]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d14b      	bne.n	8013846 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80137b2:	687a      	ldr	r2, [r7, #4]
 80137b4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80137b8:	4413      	add	r3, r2
 80137ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80137bc:	429a      	cmp	r2, r3
 80137be:	d142      	bne.n	8013846 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	db3d      	blt.n	8013846 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80137ce:	4b59      	ldr	r3, [pc, #356]	@ (8013934 <tcp_receive+0x270>)
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d137      	bne.n	8013846 <tcp_receive+0x182>
              found_dupack = 1;
 80137d6:	2301      	movs	r3, #1
 80137d8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80137e0:	2bff      	cmp	r3, #255	@ 0xff
 80137e2:	d007      	beq.n	80137f4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80137ea:	3301      	adds	r3, #1
 80137ec:	b2da      	uxtb	r2, r3
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80137fa:	2b03      	cmp	r3, #3
 80137fc:	d91b      	bls.n	8013836 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013808:	4413      	add	r3, r2
 801380a:	b29a      	uxth	r2, r3
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013812:	429a      	cmp	r2, r3
 8013814:	d30a      	bcc.n	801382c <tcp_receive+0x168>
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013820:	4413      	add	r3, r2
 8013822:	b29a      	uxth	r2, r3
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801382a:	e004      	b.n	8013836 <tcp_receive+0x172>
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013832:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801383c:	2b02      	cmp	r3, #2
 801383e:	d902      	bls.n	8013846 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013840:	6878      	ldr	r0, [r7, #4]
 8013842:	f001 fee7 	bl	8015614 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013848:	2b00      	cmp	r3, #0
 801384a:	f040 8161 	bne.w	8013b10 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	2200      	movs	r2, #0
 8013852:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013856:	e15b      	b.n	8013b10 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013858:	4b36      	ldr	r3, [pc, #216]	@ (8013934 <tcp_receive+0x270>)
 801385a:	681a      	ldr	r2, [r3, #0]
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013860:	1ad3      	subs	r3, r2, r3
 8013862:	3b01      	subs	r3, #1
 8013864:	2b00      	cmp	r3, #0
 8013866:	f2c0 814e 	blt.w	8013b06 <tcp_receive+0x442>
 801386a:	4b32      	ldr	r3, [pc, #200]	@ (8013934 <tcp_receive+0x270>)
 801386c:	681a      	ldr	r2, [r3, #0]
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013872:	1ad3      	subs	r3, r2, r3
 8013874:	2b00      	cmp	r3, #0
 8013876:	f300 8146 	bgt.w	8013b06 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	8b5b      	ldrh	r3, [r3, #26]
 801387e:	f003 0304 	and.w	r3, r3, #4
 8013882:	2b00      	cmp	r3, #0
 8013884:	d010      	beq.n	80138a8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	8b5b      	ldrh	r3, [r3, #26]
 801388a:	f023 0304 	bic.w	r3, r3, #4
 801388e:	b29a      	uxth	r2, r3
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2200      	movs	r2, #0
 80138a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	2200      	movs	r2, #0
 80138ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80138b6:	10db      	asrs	r3, r3, #3
 80138b8:	b21b      	sxth	r3, r3
 80138ba:	b29a      	uxth	r2, r3
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80138c2:	b29b      	uxth	r3, r3
 80138c4:	4413      	add	r3, r2
 80138c6:	b29b      	uxth	r3, r3
 80138c8:	b21a      	sxth	r2, r3
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80138d0:	4b18      	ldr	r3, [pc, #96]	@ (8013934 <tcp_receive+0x270>)
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	b29a      	uxth	r2, r3
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80138da:	b29b      	uxth	r3, r3
 80138dc:	1ad3      	subs	r3, r2, r3
 80138de:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2200      	movs	r2, #0
 80138e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80138e8:	4b12      	ldr	r3, [pc, #72]	@ (8013934 <tcp_receive+0x270>)
 80138ea:	681a      	ldr	r2, [r3, #0]
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	7d1b      	ldrb	r3, [r3, #20]
 80138f4:	2b03      	cmp	r3, #3
 80138f6:	f240 8097 	bls.w	8013a28 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013906:	429a      	cmp	r2, r3
 8013908:	d245      	bcs.n	8013996 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	8b5b      	ldrh	r3, [r3, #26]
 801390e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013912:	2b00      	cmp	r3, #0
 8013914:	d014      	beq.n	8013940 <tcp_receive+0x27c>
 8013916:	2301      	movs	r3, #1
 8013918:	e013      	b.n	8013942 <tcp_receive+0x27e>
 801391a:	bf00      	nop
 801391c:	0801cd94 	.word	0x0801cd94
 8013920:	0801d0c4 	.word	0x0801d0c4
 8013924:	0801cde0 	.word	0x0801cde0
 8013928:	0801d0e0 	.word	0x0801d0e0
 801392c:	24008250 	.word	0x24008250
 8013930:	24008244 	.word	0x24008244
 8013934:	24008248 	.word	0x24008248
 8013938:	24008234 	.word	0x24008234
 801393c:	2400824e 	.word	0x2400824e
 8013940:	2302      	movs	r3, #2
 8013942:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013946:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801394a:	b29a      	uxth	r2, r3
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013950:	fb12 f303 	smulbb	r3, r2, r3
 8013954:	b29b      	uxth	r3, r3
 8013956:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013958:	4293      	cmp	r3, r2
 801395a:	bf28      	it	cs
 801395c:	4613      	movcs	r3, r2
 801395e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013966:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013968:	4413      	add	r3, r2
 801396a:	b29a      	uxth	r2, r3
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013972:	429a      	cmp	r2, r3
 8013974:	d309      	bcc.n	801398a <tcp_receive+0x2c6>
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801397c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801397e:	4413      	add	r3, r2
 8013980:	b29a      	uxth	r2, r3
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013988:	e04e      	b.n	8013a28 <tcp_receive+0x364>
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013990:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013994:	e048      	b.n	8013a28 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801399c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801399e:	4413      	add	r3, r2
 80139a0:	b29a      	uxth	r2, r3
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80139a8:	429a      	cmp	r2, r3
 80139aa:	d309      	bcc.n	80139c0 <tcp_receive+0x2fc>
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80139b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80139b4:	4413      	add	r3, r2
 80139b6:	b29a      	uxth	r2, r3
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80139be:	e004      	b.n	80139ca <tcp_receive+0x306>
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80139c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80139d6:	429a      	cmp	r2, r3
 80139d8:	d326      	bcc.n	8013a28 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80139e6:	1ad3      	subs	r3, r2, r3
 80139e8:	b29a      	uxth	r2, r3
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80139fa:	4413      	add	r3, r2
 80139fc:	b29a      	uxth	r2, r3
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013a04:	429a      	cmp	r2, r3
 8013a06:	d30a      	bcc.n	8013a1e <tcp_receive+0x35a>
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013a12:	4413      	add	r3, r2
 8013a14:	b29a      	uxth	r2, r3
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013a1c:	e004      	b.n	8013a28 <tcp_receive+0x364>
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013a24:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013a30:	4a98      	ldr	r2, [pc, #608]	@ (8013c94 <tcp_receive+0x5d0>)
 8013a32:	6878      	ldr	r0, [r7, #4]
 8013a34:	f7ff fdca 	bl	80135cc <tcp_free_acked_segments>
 8013a38:	4602      	mov	r2, r0
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013a46:	4a94      	ldr	r2, [pc, #592]	@ (8013c98 <tcp_receive+0x5d4>)
 8013a48:	6878      	ldr	r0, [r7, #4]
 8013a4a:	f7ff fdbf 	bl	80135cc <tcp_free_acked_segments>
 8013a4e:	4602      	mov	r2, r0
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d104      	bne.n	8013a66 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013a62:	861a      	strh	r2, [r3, #48]	@ 0x30
 8013a64:	e002      	b.n	8013a6c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2200      	movs	r2, #0
 8013a6a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2200      	movs	r2, #0
 8013a70:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d103      	bne.n	8013a82 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8013a88:	4b84      	ldr	r3, [pc, #528]	@ (8013c9c <tcp_receive+0x5d8>)
 8013a8a:	881b      	ldrh	r3, [r3, #0]
 8013a8c:	4413      	add	r3, r2
 8013a8e:	b29a      	uxth	r2, r3
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	8b5b      	ldrh	r3, [r3, #26]
 8013a9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d035      	beq.n	8013b0e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d118      	bne.n	8013adc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d00c      	beq.n	8013acc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013aba:	68db      	ldr	r3, [r3, #12]
 8013abc:	685b      	ldr	r3, [r3, #4]
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f7fa fffa 	bl	800eab8 <lwip_htonl>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	dc20      	bgt.n	8013b0e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	8b5b      	ldrh	r3, [r3, #26]
 8013ad0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013ad4:	b29a      	uxth	r2, r3
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013ada:	e018      	b.n	8013b0e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ae4:	68db      	ldr	r3, [r3, #12]
 8013ae6:	685b      	ldr	r3, [r3, #4]
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f7fa ffe5 	bl	800eab8 <lwip_htonl>
 8013aee:	4603      	mov	r3, r0
 8013af0:	1ae3      	subs	r3, r4, r3
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	dc0b      	bgt.n	8013b0e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	8b5b      	ldrh	r3, [r3, #26]
 8013afa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013afe:	b29a      	uxth	r2, r3
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013b04:	e003      	b.n	8013b0e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013b06:	6878      	ldr	r0, [r7, #4]
 8013b08:	f001 ff70 	bl	80159ec <tcp_send_empty_ack>
 8013b0c:	e000      	b.n	8013b10 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013b0e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d05b      	beq.n	8013bd0 <tcp_receive+0x50c>
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013b1c:	4b60      	ldr	r3, [pc, #384]	@ (8013ca0 <tcp_receive+0x5dc>)
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	1ad3      	subs	r3, r2, r3
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	da54      	bge.n	8013bd0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013b26:	4b5f      	ldr	r3, [pc, #380]	@ (8013ca4 <tcp_receive+0x5e0>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	b29a      	uxth	r2, r3
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b30:	b29b      	uxth	r3, r3
 8013b32:	1ad3      	subs	r3, r2, r3
 8013b34:	b29b      	uxth	r3, r3
 8013b36:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013b3a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013b44:	10db      	asrs	r3, r3, #3
 8013b46:	b21b      	sxth	r3, r3
 8013b48:	b29b      	uxth	r3, r3
 8013b4a:	1ad3      	subs	r3, r2, r3
 8013b4c:	b29b      	uxth	r3, r3
 8013b4e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013b58:	b29a      	uxth	r2, r3
 8013b5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013b5e:	4413      	add	r3, r2
 8013b60:	b29b      	uxth	r3, r3
 8013b62:	b21a      	sxth	r2, r3
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8013b68:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	da05      	bge.n	8013b7c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8013b70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013b74:	425b      	negs	r3, r3
 8013b76:	b29b      	uxth	r3, r3
 8013b78:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013b7c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013b86:	109b      	asrs	r3, r3, #2
 8013b88:	b21b      	sxth	r3, r3
 8013b8a:	b29b      	uxth	r3, r3
 8013b8c:	1ad3      	subs	r3, r2, r3
 8013b8e:	b29b      	uxth	r3, r3
 8013b90:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013b9a:	b29a      	uxth	r2, r3
 8013b9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013ba0:	4413      	add	r3, r2
 8013ba2:	b29b      	uxth	r3, r3
 8013ba4:	b21a      	sxth	r2, r3
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013bb0:	10db      	asrs	r3, r3, #3
 8013bb2:	b21b      	sxth	r3, r3
 8013bb4:	b29a      	uxth	r2, r3
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013bbc:	b29b      	uxth	r3, r3
 8013bbe:	4413      	add	r3, r2
 8013bc0:	b29b      	uxth	r3, r3
 8013bc2:	b21a      	sxth	r2, r3
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2200      	movs	r2, #0
 8013bce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013bd0:	4b35      	ldr	r3, [pc, #212]	@ (8013ca8 <tcp_receive+0x5e4>)
 8013bd2:	881b      	ldrh	r3, [r3, #0]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	f000 84df 	beq.w	8014598 <tcp_receive+0xed4>
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	7d1b      	ldrb	r3, [r3, #20]
 8013bde:	2b06      	cmp	r3, #6
 8013be0:	f200 84da 	bhi.w	8014598 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013be8:	4b30      	ldr	r3, [pc, #192]	@ (8013cac <tcp_receive+0x5e8>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	1ad3      	subs	r3, r2, r3
 8013bee:	3b01      	subs	r3, #1
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	f2c0 808f 	blt.w	8013d14 <tcp_receive+0x650>
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8013ca8 <tcp_receive+0x5e4>)
 8013bfc:	881b      	ldrh	r3, [r3, #0]
 8013bfe:	4619      	mov	r1, r3
 8013c00:	4b2a      	ldr	r3, [pc, #168]	@ (8013cac <tcp_receive+0x5e8>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	440b      	add	r3, r1
 8013c06:	1ad3      	subs	r3, r2, r3
 8013c08:	3301      	adds	r3, #1
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	f300 8082 	bgt.w	8013d14 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013c10:	4b27      	ldr	r3, [pc, #156]	@ (8013cb0 <tcp_receive+0x5ec>)
 8013c12:	685b      	ldr	r3, [r3, #4]
 8013c14:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013c1a:	4b24      	ldr	r3, [pc, #144]	@ (8013cac <tcp_receive+0x5e8>)
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	1ad3      	subs	r3, r2, r3
 8013c20:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013c22:	4b23      	ldr	r3, [pc, #140]	@ (8013cb0 <tcp_receive+0x5ec>)
 8013c24:	685b      	ldr	r3, [r3, #4]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d106      	bne.n	8013c38 <tcp_receive+0x574>
 8013c2a:	4b22      	ldr	r3, [pc, #136]	@ (8013cb4 <tcp_receive+0x5f0>)
 8013c2c:	f240 5294 	movw	r2, #1428	@ 0x594
 8013c30:	4921      	ldr	r1, [pc, #132]	@ (8013cb8 <tcp_receive+0x5f4>)
 8013c32:	4822      	ldr	r0, [pc, #136]	@ (8013cbc <tcp_receive+0x5f8>)
 8013c34:	f005 fcd2 	bl	80195dc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c3a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8013c3e:	4293      	cmp	r3, r2
 8013c40:	d906      	bls.n	8013c50 <tcp_receive+0x58c>
 8013c42:	4b1c      	ldr	r3, [pc, #112]	@ (8013cb4 <tcp_receive+0x5f0>)
 8013c44:	f240 5295 	movw	r2, #1429	@ 0x595
 8013c48:	491d      	ldr	r1, [pc, #116]	@ (8013cc0 <tcp_receive+0x5fc>)
 8013c4a:	481c      	ldr	r0, [pc, #112]	@ (8013cbc <tcp_receive+0x5f8>)
 8013c4c:	f005 fcc6 	bl	80195dc <iprintf>
      off = (u16_t)off32;
 8013c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c52:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013c56:	4b16      	ldr	r3, [pc, #88]	@ (8013cb0 <tcp_receive+0x5ec>)
 8013c58:	685b      	ldr	r3, [r3, #4]
 8013c5a:	891b      	ldrh	r3, [r3, #8]
 8013c5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013c60:	429a      	cmp	r2, r3
 8013c62:	d906      	bls.n	8013c72 <tcp_receive+0x5ae>
 8013c64:	4b13      	ldr	r3, [pc, #76]	@ (8013cb4 <tcp_receive+0x5f0>)
 8013c66:	f240 5297 	movw	r2, #1431	@ 0x597
 8013c6a:	4916      	ldr	r1, [pc, #88]	@ (8013cc4 <tcp_receive+0x600>)
 8013c6c:	4813      	ldr	r0, [pc, #76]	@ (8013cbc <tcp_receive+0x5f8>)
 8013c6e:	f005 fcb5 	bl	80195dc <iprintf>
      inseg.len -= off;
 8013c72:	4b0f      	ldr	r3, [pc, #60]	@ (8013cb0 <tcp_receive+0x5ec>)
 8013c74:	891a      	ldrh	r2, [r3, #8]
 8013c76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013c7a:	1ad3      	subs	r3, r2, r3
 8013c7c:	b29a      	uxth	r2, r3
 8013c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8013cb0 <tcp_receive+0x5ec>)
 8013c80:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013c82:	4b0b      	ldr	r3, [pc, #44]	@ (8013cb0 <tcp_receive+0x5ec>)
 8013c84:	685b      	ldr	r3, [r3, #4]
 8013c86:	891a      	ldrh	r2, [r3, #8]
 8013c88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013c8c:	1ad3      	subs	r3, r2, r3
 8013c8e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8013c90:	e02a      	b.n	8013ce8 <tcp_receive+0x624>
 8013c92:	bf00      	nop
 8013c94:	0801d0fc 	.word	0x0801d0fc
 8013c98:	0801d104 	.word	0x0801d104
 8013c9c:	2400824c 	.word	0x2400824c
 8013ca0:	24008248 	.word	0x24008248
 8013ca4:	2400820c 	.word	0x2400820c
 8013ca8:	2400824e 	.word	0x2400824e
 8013cac:	24008244 	.word	0x24008244
 8013cb0:	24008224 	.word	0x24008224
 8013cb4:	0801cd94 	.word	0x0801cd94
 8013cb8:	0801d10c 	.word	0x0801d10c
 8013cbc:	0801cde0 	.word	0x0801cde0
 8013cc0:	0801d11c 	.word	0x0801d11c
 8013cc4:	0801d12c 	.word	0x0801d12c
        off -= p->len;
 8013cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013cca:	895b      	ldrh	r3, [r3, #10]
 8013ccc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013cd0:	1ad3      	subs	r3, r2, r3
 8013cd2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013cd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013cd8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013cda:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013cde:	2200      	movs	r2, #0
 8013ce0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013ce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8013ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013cea:	895b      	ldrh	r3, [r3, #10]
 8013cec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013cf0:	429a      	cmp	r2, r3
 8013cf2:	d8e9      	bhi.n	8013cc8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013cf4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013cf8:	4619      	mov	r1, r3
 8013cfa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013cfc:	f7fc fafa 	bl	80102f4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d04:	4a90      	ldr	r2, [pc, #576]	@ (8013f48 <tcp_receive+0x884>)
 8013d06:	6013      	str	r3, [r2, #0]
 8013d08:	4b90      	ldr	r3, [pc, #576]	@ (8013f4c <tcp_receive+0x888>)
 8013d0a:	68db      	ldr	r3, [r3, #12]
 8013d0c:	4a8e      	ldr	r2, [pc, #568]	@ (8013f48 <tcp_receive+0x884>)
 8013d0e:	6812      	ldr	r2, [r2, #0]
 8013d10:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013d12:	e00d      	b.n	8013d30 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013d14:	4b8c      	ldr	r3, [pc, #560]	@ (8013f48 <tcp_receive+0x884>)
 8013d16:	681a      	ldr	r2, [r3, #0]
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d1c:	1ad3      	subs	r3, r2, r3
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	da06      	bge.n	8013d30 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	8b5b      	ldrh	r3, [r3, #26]
 8013d26:	f043 0302 	orr.w	r3, r3, #2
 8013d2a:	b29a      	uxth	r2, r3
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013d30:	4b85      	ldr	r3, [pc, #532]	@ (8013f48 <tcp_receive+0x884>)
 8013d32:	681a      	ldr	r2, [r3, #0]
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d38:	1ad3      	subs	r3, r2, r3
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	f2c0 8427 	blt.w	801458e <tcp_receive+0xeca>
 8013d40:	4b81      	ldr	r3, [pc, #516]	@ (8013f48 <tcp_receive+0x884>)
 8013d42:	681a      	ldr	r2, [r3, #0]
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d48:	6879      	ldr	r1, [r7, #4]
 8013d4a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013d4c:	440b      	add	r3, r1
 8013d4e:	1ad3      	subs	r3, r2, r3
 8013d50:	3301      	adds	r3, #1
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	f300 841b 	bgt.w	801458e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013d5c:	4b7a      	ldr	r3, [pc, #488]	@ (8013f48 <tcp_receive+0x884>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	429a      	cmp	r2, r3
 8013d62:	f040 8298 	bne.w	8014296 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013d66:	4b79      	ldr	r3, [pc, #484]	@ (8013f4c <tcp_receive+0x888>)
 8013d68:	891c      	ldrh	r4, [r3, #8]
 8013d6a:	4b78      	ldr	r3, [pc, #480]	@ (8013f4c <tcp_receive+0x888>)
 8013d6c:	68db      	ldr	r3, [r3, #12]
 8013d6e:	899b      	ldrh	r3, [r3, #12]
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	4618      	mov	r0, r3
 8013d74:	f7fa fe8a 	bl	800ea8c <lwip_htons>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	b2db      	uxtb	r3, r3
 8013d7c:	f003 0303 	and.w	r3, r3, #3
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d001      	beq.n	8013d88 <tcp_receive+0x6c4>
 8013d84:	2301      	movs	r3, #1
 8013d86:	e000      	b.n	8013d8a <tcp_receive+0x6c6>
 8013d88:	2300      	movs	r3, #0
 8013d8a:	4423      	add	r3, r4
 8013d8c:	b29a      	uxth	r2, r3
 8013d8e:	4b70      	ldr	r3, [pc, #448]	@ (8013f50 <tcp_receive+0x88c>)
 8013d90:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013d96:	4b6e      	ldr	r3, [pc, #440]	@ (8013f50 <tcp_receive+0x88c>)
 8013d98:	881b      	ldrh	r3, [r3, #0]
 8013d9a:	429a      	cmp	r2, r3
 8013d9c:	d274      	bcs.n	8013e88 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013d9e:	4b6b      	ldr	r3, [pc, #428]	@ (8013f4c <tcp_receive+0x888>)
 8013da0:	68db      	ldr	r3, [r3, #12]
 8013da2:	899b      	ldrh	r3, [r3, #12]
 8013da4:	b29b      	uxth	r3, r3
 8013da6:	4618      	mov	r0, r3
 8013da8:	f7fa fe70 	bl	800ea8c <lwip_htons>
 8013dac:	4603      	mov	r3, r0
 8013dae:	b2db      	uxtb	r3, r3
 8013db0:	f003 0301 	and.w	r3, r3, #1
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d01e      	beq.n	8013df6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013db8:	4b64      	ldr	r3, [pc, #400]	@ (8013f4c <tcp_receive+0x888>)
 8013dba:	68db      	ldr	r3, [r3, #12]
 8013dbc:	899b      	ldrh	r3, [r3, #12]
 8013dbe:	b29b      	uxth	r3, r3
 8013dc0:	b21b      	sxth	r3, r3
 8013dc2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013dc6:	b21c      	sxth	r4, r3
 8013dc8:	4b60      	ldr	r3, [pc, #384]	@ (8013f4c <tcp_receive+0x888>)
 8013dca:	68db      	ldr	r3, [r3, #12]
 8013dcc:	899b      	ldrh	r3, [r3, #12]
 8013dce:	b29b      	uxth	r3, r3
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	f7fa fe5b 	bl	800ea8c <lwip_htons>
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	b2db      	uxtb	r3, r3
 8013dda:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8013dde:	b29b      	uxth	r3, r3
 8013de0:	4618      	mov	r0, r3
 8013de2:	f7fa fe53 	bl	800ea8c <lwip_htons>
 8013de6:	4603      	mov	r3, r0
 8013de8:	b21b      	sxth	r3, r3
 8013dea:	4323      	orrs	r3, r4
 8013dec:	b21a      	sxth	r2, r3
 8013dee:	4b57      	ldr	r3, [pc, #348]	@ (8013f4c <tcp_receive+0x888>)
 8013df0:	68db      	ldr	r3, [r3, #12]
 8013df2:	b292      	uxth	r2, r2
 8013df4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013dfa:	4b54      	ldr	r3, [pc, #336]	@ (8013f4c <tcp_receive+0x888>)
 8013dfc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013dfe:	4b53      	ldr	r3, [pc, #332]	@ (8013f4c <tcp_receive+0x888>)
 8013e00:	68db      	ldr	r3, [r3, #12]
 8013e02:	899b      	ldrh	r3, [r3, #12]
 8013e04:	b29b      	uxth	r3, r3
 8013e06:	4618      	mov	r0, r3
 8013e08:	f7fa fe40 	bl	800ea8c <lwip_htons>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	b2db      	uxtb	r3, r3
 8013e10:	f003 0302 	and.w	r3, r3, #2
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d005      	beq.n	8013e24 <tcp_receive+0x760>
            inseg.len -= 1;
 8013e18:	4b4c      	ldr	r3, [pc, #304]	@ (8013f4c <tcp_receive+0x888>)
 8013e1a:	891b      	ldrh	r3, [r3, #8]
 8013e1c:	3b01      	subs	r3, #1
 8013e1e:	b29a      	uxth	r2, r3
 8013e20:	4b4a      	ldr	r3, [pc, #296]	@ (8013f4c <tcp_receive+0x888>)
 8013e22:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013e24:	4b49      	ldr	r3, [pc, #292]	@ (8013f4c <tcp_receive+0x888>)
 8013e26:	685b      	ldr	r3, [r3, #4]
 8013e28:	4a48      	ldr	r2, [pc, #288]	@ (8013f4c <tcp_receive+0x888>)
 8013e2a:	8912      	ldrh	r2, [r2, #8]
 8013e2c:	4611      	mov	r1, r2
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f7fc f960 	bl	80100f4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013e34:	4b45      	ldr	r3, [pc, #276]	@ (8013f4c <tcp_receive+0x888>)
 8013e36:	891c      	ldrh	r4, [r3, #8]
 8013e38:	4b44      	ldr	r3, [pc, #272]	@ (8013f4c <tcp_receive+0x888>)
 8013e3a:	68db      	ldr	r3, [r3, #12]
 8013e3c:	899b      	ldrh	r3, [r3, #12]
 8013e3e:	b29b      	uxth	r3, r3
 8013e40:	4618      	mov	r0, r3
 8013e42:	f7fa fe23 	bl	800ea8c <lwip_htons>
 8013e46:	4603      	mov	r3, r0
 8013e48:	b2db      	uxtb	r3, r3
 8013e4a:	f003 0303 	and.w	r3, r3, #3
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d001      	beq.n	8013e56 <tcp_receive+0x792>
 8013e52:	2301      	movs	r3, #1
 8013e54:	e000      	b.n	8013e58 <tcp_receive+0x794>
 8013e56:	2300      	movs	r3, #0
 8013e58:	4423      	add	r3, r4
 8013e5a:	b29a      	uxth	r2, r3
 8013e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8013f50 <tcp_receive+0x88c>)
 8013e5e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013e60:	4b3b      	ldr	r3, [pc, #236]	@ (8013f50 <tcp_receive+0x88c>)
 8013e62:	881b      	ldrh	r3, [r3, #0]
 8013e64:	461a      	mov	r2, r3
 8013e66:	4b38      	ldr	r3, [pc, #224]	@ (8013f48 <tcp_receive+0x884>)
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	441a      	add	r2, r3
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e70:	6879      	ldr	r1, [r7, #4]
 8013e72:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013e74:	440b      	add	r3, r1
 8013e76:	429a      	cmp	r2, r3
 8013e78:	d006      	beq.n	8013e88 <tcp_receive+0x7c4>
 8013e7a:	4b36      	ldr	r3, [pc, #216]	@ (8013f54 <tcp_receive+0x890>)
 8013e7c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8013e80:	4935      	ldr	r1, [pc, #212]	@ (8013f58 <tcp_receive+0x894>)
 8013e82:	4836      	ldr	r0, [pc, #216]	@ (8013f5c <tcp_receive+0x898>)
 8013e84:	f005 fbaa 	bl	80195dc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	f000 80e6 	beq.w	801405e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013e92:	4b2e      	ldr	r3, [pc, #184]	@ (8013f4c <tcp_receive+0x888>)
 8013e94:	68db      	ldr	r3, [r3, #12]
 8013e96:	899b      	ldrh	r3, [r3, #12]
 8013e98:	b29b      	uxth	r3, r3
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f7fa fdf6 	bl	800ea8c <lwip_htons>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	b2db      	uxtb	r3, r3
 8013ea4:	f003 0301 	and.w	r3, r3, #1
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d010      	beq.n	8013ece <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013eac:	e00a      	b.n	8013ec4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013eb2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013eb8:	681a      	ldr	r2, [r3, #0]
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8013ebe:	68f8      	ldr	r0, [r7, #12]
 8013ec0:	f7fd fd93 	bl	80119ea <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d1f0      	bne.n	8013eae <tcp_receive+0x7ea>
 8013ecc:	e0c7      	b.n	801405e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013ed4:	e051      	b.n	8013f7a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ed8:	68db      	ldr	r3, [r3, #12]
 8013eda:	899b      	ldrh	r3, [r3, #12]
 8013edc:	b29b      	uxth	r3, r3
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f7fa fdd4 	bl	800ea8c <lwip_htons>
 8013ee4:	4603      	mov	r3, r0
 8013ee6:	b2db      	uxtb	r3, r3
 8013ee8:	f003 0301 	and.w	r3, r3, #1
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d03c      	beq.n	8013f6a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013ef0:	4b16      	ldr	r3, [pc, #88]	@ (8013f4c <tcp_receive+0x888>)
 8013ef2:	68db      	ldr	r3, [r3, #12]
 8013ef4:	899b      	ldrh	r3, [r3, #12]
 8013ef6:	b29b      	uxth	r3, r3
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f7fa fdc7 	bl	800ea8c <lwip_htons>
 8013efe:	4603      	mov	r3, r0
 8013f00:	b2db      	uxtb	r3, r3
 8013f02:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d12f      	bne.n	8013f6a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013f0a:	4b10      	ldr	r3, [pc, #64]	@ (8013f4c <tcp_receive+0x888>)
 8013f0c:	68db      	ldr	r3, [r3, #12]
 8013f0e:	899b      	ldrh	r3, [r3, #12]
 8013f10:	b29c      	uxth	r4, r3
 8013f12:	2001      	movs	r0, #1
 8013f14:	f7fa fdba 	bl	800ea8c <lwip_htons>
 8013f18:	4603      	mov	r3, r0
 8013f1a:	461a      	mov	r2, r3
 8013f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8013f4c <tcp_receive+0x888>)
 8013f1e:	68db      	ldr	r3, [r3, #12]
 8013f20:	4322      	orrs	r2, r4
 8013f22:	b292      	uxth	r2, r2
 8013f24:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013f26:	4b09      	ldr	r3, [pc, #36]	@ (8013f4c <tcp_receive+0x888>)
 8013f28:	891c      	ldrh	r4, [r3, #8]
 8013f2a:	4b08      	ldr	r3, [pc, #32]	@ (8013f4c <tcp_receive+0x888>)
 8013f2c:	68db      	ldr	r3, [r3, #12]
 8013f2e:	899b      	ldrh	r3, [r3, #12]
 8013f30:	b29b      	uxth	r3, r3
 8013f32:	4618      	mov	r0, r3
 8013f34:	f7fa fdaa 	bl	800ea8c <lwip_htons>
 8013f38:	4603      	mov	r3, r0
 8013f3a:	b2db      	uxtb	r3, r3
 8013f3c:	f003 0303 	and.w	r3, r3, #3
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d00d      	beq.n	8013f60 <tcp_receive+0x89c>
 8013f44:	2301      	movs	r3, #1
 8013f46:	e00c      	b.n	8013f62 <tcp_receive+0x89e>
 8013f48:	24008244 	.word	0x24008244
 8013f4c:	24008224 	.word	0x24008224
 8013f50:	2400824e 	.word	0x2400824e
 8013f54:	0801cd94 	.word	0x0801cd94
 8013f58:	0801d13c 	.word	0x0801d13c
 8013f5c:	0801cde0 	.word	0x0801cde0
 8013f60:	2300      	movs	r3, #0
 8013f62:	4423      	add	r3, r4
 8013f64:	b29a      	uxth	r2, r3
 8013f66:	4b98      	ldr	r3, [pc, #608]	@ (80141c8 <tcp_receive+0xb04>)
 8013f68:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f6c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8013f74:	6938      	ldr	r0, [r7, #16]
 8013f76:	f7fd fd38 	bl	80119ea <tcp_seg_free>
            while (next &&
 8013f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d00e      	beq.n	8013f9e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013f80:	4b91      	ldr	r3, [pc, #580]	@ (80141c8 <tcp_receive+0xb04>)
 8013f82:	881b      	ldrh	r3, [r3, #0]
 8013f84:	461a      	mov	r2, r3
 8013f86:	4b91      	ldr	r3, [pc, #580]	@ (80141cc <tcp_receive+0xb08>)
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	441a      	add	r2, r3
 8013f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f8e:	68db      	ldr	r3, [r3, #12]
 8013f90:	685b      	ldr	r3, [r3, #4]
 8013f92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013f94:	8909      	ldrh	r1, [r1, #8]
 8013f96:	440b      	add	r3, r1
 8013f98:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	da9b      	bge.n	8013ed6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d059      	beq.n	8014058 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8013fa4:	4b88      	ldr	r3, [pc, #544]	@ (80141c8 <tcp_receive+0xb04>)
 8013fa6:	881b      	ldrh	r3, [r3, #0]
 8013fa8:	461a      	mov	r2, r3
 8013faa:	4b88      	ldr	r3, [pc, #544]	@ (80141cc <tcp_receive+0xb08>)
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	441a      	add	r2, r3
 8013fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013fb2:	68db      	ldr	r3, [r3, #12]
 8013fb4:	685b      	ldr	r3, [r3, #4]
 8013fb6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	dd4d      	ble.n	8014058 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013fbe:	68db      	ldr	r3, [r3, #12]
 8013fc0:	685b      	ldr	r3, [r3, #4]
 8013fc2:	b29a      	uxth	r2, r3
 8013fc4:	4b81      	ldr	r3, [pc, #516]	@ (80141cc <tcp_receive+0xb08>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	b29b      	uxth	r3, r3
 8013fca:	1ad3      	subs	r3, r2, r3
 8013fcc:	b29a      	uxth	r2, r3
 8013fce:	4b80      	ldr	r3, [pc, #512]	@ (80141d0 <tcp_receive+0xb0c>)
 8013fd0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013fd2:	4b7f      	ldr	r3, [pc, #508]	@ (80141d0 <tcp_receive+0xb0c>)
 8013fd4:	68db      	ldr	r3, [r3, #12]
 8013fd6:	899b      	ldrh	r3, [r3, #12]
 8013fd8:	b29b      	uxth	r3, r3
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f7fa fd56 	bl	800ea8c <lwip_htons>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	b2db      	uxtb	r3, r3
 8013fe4:	f003 0302 	and.w	r3, r3, #2
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d005      	beq.n	8013ff8 <tcp_receive+0x934>
                inseg.len -= 1;
 8013fec:	4b78      	ldr	r3, [pc, #480]	@ (80141d0 <tcp_receive+0xb0c>)
 8013fee:	891b      	ldrh	r3, [r3, #8]
 8013ff0:	3b01      	subs	r3, #1
 8013ff2:	b29a      	uxth	r2, r3
 8013ff4:	4b76      	ldr	r3, [pc, #472]	@ (80141d0 <tcp_receive+0xb0c>)
 8013ff6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013ff8:	4b75      	ldr	r3, [pc, #468]	@ (80141d0 <tcp_receive+0xb0c>)
 8013ffa:	685b      	ldr	r3, [r3, #4]
 8013ffc:	4a74      	ldr	r2, [pc, #464]	@ (80141d0 <tcp_receive+0xb0c>)
 8013ffe:	8912      	ldrh	r2, [r2, #8]
 8014000:	4611      	mov	r1, r2
 8014002:	4618      	mov	r0, r3
 8014004:	f7fc f876 	bl	80100f4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014008:	4b71      	ldr	r3, [pc, #452]	@ (80141d0 <tcp_receive+0xb0c>)
 801400a:	891c      	ldrh	r4, [r3, #8]
 801400c:	4b70      	ldr	r3, [pc, #448]	@ (80141d0 <tcp_receive+0xb0c>)
 801400e:	68db      	ldr	r3, [r3, #12]
 8014010:	899b      	ldrh	r3, [r3, #12]
 8014012:	b29b      	uxth	r3, r3
 8014014:	4618      	mov	r0, r3
 8014016:	f7fa fd39 	bl	800ea8c <lwip_htons>
 801401a:	4603      	mov	r3, r0
 801401c:	b2db      	uxtb	r3, r3
 801401e:	f003 0303 	and.w	r3, r3, #3
 8014022:	2b00      	cmp	r3, #0
 8014024:	d001      	beq.n	801402a <tcp_receive+0x966>
 8014026:	2301      	movs	r3, #1
 8014028:	e000      	b.n	801402c <tcp_receive+0x968>
 801402a:	2300      	movs	r3, #0
 801402c:	4423      	add	r3, r4
 801402e:	b29a      	uxth	r2, r3
 8014030:	4b65      	ldr	r3, [pc, #404]	@ (80141c8 <tcp_receive+0xb04>)
 8014032:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014034:	4b64      	ldr	r3, [pc, #400]	@ (80141c8 <tcp_receive+0xb04>)
 8014036:	881b      	ldrh	r3, [r3, #0]
 8014038:	461a      	mov	r2, r3
 801403a:	4b64      	ldr	r3, [pc, #400]	@ (80141cc <tcp_receive+0xb08>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	441a      	add	r2, r3
 8014040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014042:	68db      	ldr	r3, [r3, #12]
 8014044:	685b      	ldr	r3, [r3, #4]
 8014046:	429a      	cmp	r2, r3
 8014048:	d006      	beq.n	8014058 <tcp_receive+0x994>
 801404a:	4b62      	ldr	r3, [pc, #392]	@ (80141d4 <tcp_receive+0xb10>)
 801404c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8014050:	4961      	ldr	r1, [pc, #388]	@ (80141d8 <tcp_receive+0xb14>)
 8014052:	4862      	ldr	r0, [pc, #392]	@ (80141dc <tcp_receive+0xb18>)
 8014054:	f005 fac2 	bl	80195dc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801405c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801405e:	4b5a      	ldr	r3, [pc, #360]	@ (80141c8 <tcp_receive+0xb04>)
 8014060:	881b      	ldrh	r3, [r3, #0]
 8014062:	461a      	mov	r2, r3
 8014064:	4b59      	ldr	r3, [pc, #356]	@ (80141cc <tcp_receive+0xb08>)
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	441a      	add	r2, r3
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014072:	4b55      	ldr	r3, [pc, #340]	@ (80141c8 <tcp_receive+0xb04>)
 8014074:	881b      	ldrh	r3, [r3, #0]
 8014076:	429a      	cmp	r2, r3
 8014078:	d206      	bcs.n	8014088 <tcp_receive+0x9c4>
 801407a:	4b56      	ldr	r3, [pc, #344]	@ (80141d4 <tcp_receive+0xb10>)
 801407c:	f240 6207 	movw	r2, #1543	@ 0x607
 8014080:	4957      	ldr	r1, [pc, #348]	@ (80141e0 <tcp_receive+0xb1c>)
 8014082:	4856      	ldr	r0, [pc, #344]	@ (80141dc <tcp_receive+0xb18>)
 8014084:	f005 faaa 	bl	80195dc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801408c:	4b4e      	ldr	r3, [pc, #312]	@ (80141c8 <tcp_receive+0xb04>)
 801408e:	881b      	ldrh	r3, [r3, #0]
 8014090:	1ad3      	subs	r3, r2, r3
 8014092:	b29a      	uxth	r2, r3
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014098:	6878      	ldr	r0, [r7, #4]
 801409a:	f7fc ffc5 	bl	8011028 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801409e:	4b4c      	ldr	r3, [pc, #304]	@ (80141d0 <tcp_receive+0xb0c>)
 80140a0:	685b      	ldr	r3, [r3, #4]
 80140a2:	891b      	ldrh	r3, [r3, #8]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d006      	beq.n	80140b6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80140a8:	4b49      	ldr	r3, [pc, #292]	@ (80141d0 <tcp_receive+0xb0c>)
 80140aa:	685b      	ldr	r3, [r3, #4]
 80140ac:	4a4d      	ldr	r2, [pc, #308]	@ (80141e4 <tcp_receive+0xb20>)
 80140ae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80140b0:	4b47      	ldr	r3, [pc, #284]	@ (80141d0 <tcp_receive+0xb0c>)
 80140b2:	2200      	movs	r2, #0
 80140b4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80140b6:	4b46      	ldr	r3, [pc, #280]	@ (80141d0 <tcp_receive+0xb0c>)
 80140b8:	68db      	ldr	r3, [r3, #12]
 80140ba:	899b      	ldrh	r3, [r3, #12]
 80140bc:	b29b      	uxth	r3, r3
 80140be:	4618      	mov	r0, r3
 80140c0:	f7fa fce4 	bl	800ea8c <lwip_htons>
 80140c4:	4603      	mov	r3, r0
 80140c6:	b2db      	uxtb	r3, r3
 80140c8:	f003 0301 	and.w	r3, r3, #1
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	f000 80b8 	beq.w	8014242 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80140d2:	4b45      	ldr	r3, [pc, #276]	@ (80141e8 <tcp_receive+0xb24>)
 80140d4:	781b      	ldrb	r3, [r3, #0]
 80140d6:	f043 0320 	orr.w	r3, r3, #32
 80140da:	b2da      	uxtb	r2, r3
 80140dc:	4b42      	ldr	r3, [pc, #264]	@ (80141e8 <tcp_receive+0xb24>)
 80140de:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80140e0:	e0af      	b.n	8014242 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80140e6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80140ec:	68db      	ldr	r3, [r3, #12]
 80140ee:	685b      	ldr	r3, [r3, #4]
 80140f0:	4a36      	ldr	r2, [pc, #216]	@ (80141cc <tcp_receive+0xb08>)
 80140f2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	891b      	ldrh	r3, [r3, #8]
 80140f8:	461c      	mov	r4, r3
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	68db      	ldr	r3, [r3, #12]
 80140fe:	899b      	ldrh	r3, [r3, #12]
 8014100:	b29b      	uxth	r3, r3
 8014102:	4618      	mov	r0, r3
 8014104:	f7fa fcc2 	bl	800ea8c <lwip_htons>
 8014108:	4603      	mov	r3, r0
 801410a:	b2db      	uxtb	r3, r3
 801410c:	f003 0303 	and.w	r3, r3, #3
 8014110:	2b00      	cmp	r3, #0
 8014112:	d001      	beq.n	8014118 <tcp_receive+0xa54>
 8014114:	2301      	movs	r3, #1
 8014116:	e000      	b.n	801411a <tcp_receive+0xa56>
 8014118:	2300      	movs	r3, #0
 801411a:	191a      	adds	r2, r3, r4
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014120:	441a      	add	r2, r3
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801412a:	461c      	mov	r4, r3
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	891b      	ldrh	r3, [r3, #8]
 8014130:	461d      	mov	r5, r3
 8014132:	68bb      	ldr	r3, [r7, #8]
 8014134:	68db      	ldr	r3, [r3, #12]
 8014136:	899b      	ldrh	r3, [r3, #12]
 8014138:	b29b      	uxth	r3, r3
 801413a:	4618      	mov	r0, r3
 801413c:	f7fa fca6 	bl	800ea8c <lwip_htons>
 8014140:	4603      	mov	r3, r0
 8014142:	b2db      	uxtb	r3, r3
 8014144:	f003 0303 	and.w	r3, r3, #3
 8014148:	2b00      	cmp	r3, #0
 801414a:	d001      	beq.n	8014150 <tcp_receive+0xa8c>
 801414c:	2301      	movs	r3, #1
 801414e:	e000      	b.n	8014152 <tcp_receive+0xa8e>
 8014150:	2300      	movs	r3, #0
 8014152:	442b      	add	r3, r5
 8014154:	429c      	cmp	r4, r3
 8014156:	d206      	bcs.n	8014166 <tcp_receive+0xaa2>
 8014158:	4b1e      	ldr	r3, [pc, #120]	@ (80141d4 <tcp_receive+0xb10>)
 801415a:	f240 622b 	movw	r2, #1579	@ 0x62b
 801415e:	4923      	ldr	r1, [pc, #140]	@ (80141ec <tcp_receive+0xb28>)
 8014160:	481e      	ldr	r0, [pc, #120]	@ (80141dc <tcp_receive+0xb18>)
 8014162:	f005 fa3b 	bl	80195dc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	891b      	ldrh	r3, [r3, #8]
 801416a:	461c      	mov	r4, r3
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	68db      	ldr	r3, [r3, #12]
 8014170:	899b      	ldrh	r3, [r3, #12]
 8014172:	b29b      	uxth	r3, r3
 8014174:	4618      	mov	r0, r3
 8014176:	f7fa fc89 	bl	800ea8c <lwip_htons>
 801417a:	4603      	mov	r3, r0
 801417c:	b2db      	uxtb	r3, r3
 801417e:	f003 0303 	and.w	r3, r3, #3
 8014182:	2b00      	cmp	r3, #0
 8014184:	d001      	beq.n	801418a <tcp_receive+0xac6>
 8014186:	2301      	movs	r3, #1
 8014188:	e000      	b.n	801418c <tcp_receive+0xac8>
 801418a:	2300      	movs	r3, #0
 801418c:	1919      	adds	r1, r3, r4
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014192:	b28b      	uxth	r3, r1
 8014194:	1ad3      	subs	r3, r2, r3
 8014196:	b29a      	uxth	r2, r3
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	f7fc ff43 	bl	8011028 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	685b      	ldr	r3, [r3, #4]
 80141a6:	891b      	ldrh	r3, [r3, #8]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d028      	beq.n	80141fe <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80141ac:	4b0d      	ldr	r3, [pc, #52]	@ (80141e4 <tcp_receive+0xb20>)
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d01d      	beq.n	80141f0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80141b4:	4b0b      	ldr	r3, [pc, #44]	@ (80141e4 <tcp_receive+0xb20>)
 80141b6:	681a      	ldr	r2, [r3, #0]
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	685b      	ldr	r3, [r3, #4]
 80141bc:	4619      	mov	r1, r3
 80141be:	4610      	mov	r0, r2
 80141c0:	f7fc f9ec 	bl	801059c <pbuf_cat>
 80141c4:	e018      	b.n	80141f8 <tcp_receive+0xb34>
 80141c6:	bf00      	nop
 80141c8:	2400824e 	.word	0x2400824e
 80141cc:	24008244 	.word	0x24008244
 80141d0:	24008224 	.word	0x24008224
 80141d4:	0801cd94 	.word	0x0801cd94
 80141d8:	0801d174 	.word	0x0801d174
 80141dc:	0801cde0 	.word	0x0801cde0
 80141e0:	0801d1b0 	.word	0x0801d1b0
 80141e4:	24008254 	.word	0x24008254
 80141e8:	24008251 	.word	0x24008251
 80141ec:	0801d1d0 	.word	0x0801d1d0
            } else {
              recv_data = cseg->p;
 80141f0:	68bb      	ldr	r3, [r7, #8]
 80141f2:	685b      	ldr	r3, [r3, #4]
 80141f4:	4a70      	ldr	r2, [pc, #448]	@ (80143b8 <tcp_receive+0xcf4>)
 80141f6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	2200      	movs	r2, #0
 80141fc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80141fe:	68bb      	ldr	r3, [r7, #8]
 8014200:	68db      	ldr	r3, [r3, #12]
 8014202:	899b      	ldrh	r3, [r3, #12]
 8014204:	b29b      	uxth	r3, r3
 8014206:	4618      	mov	r0, r3
 8014208:	f7fa fc40 	bl	800ea8c <lwip_htons>
 801420c:	4603      	mov	r3, r0
 801420e:	b2db      	uxtb	r3, r3
 8014210:	f003 0301 	and.w	r3, r3, #1
 8014214:	2b00      	cmp	r3, #0
 8014216:	d00d      	beq.n	8014234 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014218:	4b68      	ldr	r3, [pc, #416]	@ (80143bc <tcp_receive+0xcf8>)
 801421a:	781b      	ldrb	r3, [r3, #0]
 801421c:	f043 0320 	orr.w	r3, r3, #32
 8014220:	b2da      	uxtb	r2, r3
 8014222:	4b66      	ldr	r3, [pc, #408]	@ (80143bc <tcp_receive+0xcf8>)
 8014224:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	7d1b      	ldrb	r3, [r3, #20]
 801422a:	2b04      	cmp	r3, #4
 801422c:	d102      	bne.n	8014234 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	2207      	movs	r2, #7
 8014232:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014234:	68bb      	ldr	r3, [r7, #8]
 8014236:	681a      	ldr	r2, [r3, #0]
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801423c:	68b8      	ldr	r0, [r7, #8]
 801423e:	f7fd fbd4 	bl	80119ea <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014246:	2b00      	cmp	r3, #0
 8014248:	d008      	beq.n	801425c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801424e:	68db      	ldr	r3, [r3, #12]
 8014250:	685a      	ldr	r2, [r3, #4]
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8014256:	429a      	cmp	r2, r3
 8014258:	f43f af43 	beq.w	80140e2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	8b5b      	ldrh	r3, [r3, #26]
 8014260:	f003 0301 	and.w	r3, r3, #1
 8014264:	2b00      	cmp	r3, #0
 8014266:	d00e      	beq.n	8014286 <tcp_receive+0xbc2>
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	8b5b      	ldrh	r3, [r3, #26]
 801426c:	f023 0301 	bic.w	r3, r3, #1
 8014270:	b29a      	uxth	r2, r3
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	835a      	strh	r2, [r3, #26]
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	8b5b      	ldrh	r3, [r3, #26]
 801427a:	f043 0302 	orr.w	r3, r3, #2
 801427e:	b29a      	uxth	r2, r3
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014284:	e187      	b.n	8014596 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	8b5b      	ldrh	r3, [r3, #26]
 801428a:	f043 0301 	orr.w	r3, r3, #1
 801428e:	b29a      	uxth	r2, r3
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014294:	e17f      	b.n	8014596 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801429a:	2b00      	cmp	r3, #0
 801429c:	d106      	bne.n	80142ac <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801429e:	4848      	ldr	r0, [pc, #288]	@ (80143c0 <tcp_receive+0xcfc>)
 80142a0:	f7fd fbbc 	bl	8011a1c <tcp_seg_copy>
 80142a4:	4602      	mov	r2, r0
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	675a      	str	r2, [r3, #116]	@ 0x74
 80142aa:	e16c      	b.n	8014586 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80142ac:	2300      	movs	r3, #0
 80142ae:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80142b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80142b6:	e156      	b.n	8014566 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80142b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142ba:	68db      	ldr	r3, [r3, #12]
 80142bc:	685a      	ldr	r2, [r3, #4]
 80142be:	4b41      	ldr	r3, [pc, #260]	@ (80143c4 <tcp_receive+0xd00>)
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	429a      	cmp	r2, r3
 80142c4:	d11d      	bne.n	8014302 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80142c6:	4b3e      	ldr	r3, [pc, #248]	@ (80143c0 <tcp_receive+0xcfc>)
 80142c8:	891a      	ldrh	r2, [r3, #8]
 80142ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142cc:	891b      	ldrh	r3, [r3, #8]
 80142ce:	429a      	cmp	r2, r3
 80142d0:	f240 814e 	bls.w	8014570 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80142d4:	483a      	ldr	r0, [pc, #232]	@ (80143c0 <tcp_receive+0xcfc>)
 80142d6:	f7fd fba1 	bl	8011a1c <tcp_seg_copy>
 80142da:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80142dc:	697b      	ldr	r3, [r7, #20]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	f000 8148 	beq.w	8014574 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80142e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d003      	beq.n	80142f2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80142ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80142ec:	697a      	ldr	r2, [r7, #20]
 80142ee:	601a      	str	r2, [r3, #0]
 80142f0:	e002      	b.n	80142f8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	697a      	ldr	r2, [r7, #20]
 80142f6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80142f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80142fa:	6978      	ldr	r0, [r7, #20]
 80142fc:	f7ff f8de 	bl	80134bc <tcp_oos_insert_segment>
                }
                break;
 8014300:	e138      	b.n	8014574 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014304:	2b00      	cmp	r3, #0
 8014306:	d117      	bne.n	8014338 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014308:	4b2e      	ldr	r3, [pc, #184]	@ (80143c4 <tcp_receive+0xd00>)
 801430a:	681a      	ldr	r2, [r3, #0]
 801430c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801430e:	68db      	ldr	r3, [r3, #12]
 8014310:	685b      	ldr	r3, [r3, #4]
 8014312:	1ad3      	subs	r3, r2, r3
 8014314:	2b00      	cmp	r3, #0
 8014316:	da57      	bge.n	80143c8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014318:	4829      	ldr	r0, [pc, #164]	@ (80143c0 <tcp_receive+0xcfc>)
 801431a:	f7fd fb7f 	bl	8011a1c <tcp_seg_copy>
 801431e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014320:	69bb      	ldr	r3, [r7, #24]
 8014322:	2b00      	cmp	r3, #0
 8014324:	f000 8128 	beq.w	8014578 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	69ba      	ldr	r2, [r7, #24]
 801432c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801432e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014330:	69b8      	ldr	r0, [r7, #24]
 8014332:	f7ff f8c3 	bl	80134bc <tcp_oos_insert_segment>
                  }
                  break;
 8014336:	e11f      	b.n	8014578 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014338:	4b22      	ldr	r3, [pc, #136]	@ (80143c4 <tcp_receive+0xd00>)
 801433a:	681a      	ldr	r2, [r3, #0]
 801433c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801433e:	68db      	ldr	r3, [r3, #12]
 8014340:	685b      	ldr	r3, [r3, #4]
 8014342:	1ad3      	subs	r3, r2, r3
 8014344:	3b01      	subs	r3, #1
 8014346:	2b00      	cmp	r3, #0
 8014348:	db3e      	blt.n	80143c8 <tcp_receive+0xd04>
 801434a:	4b1e      	ldr	r3, [pc, #120]	@ (80143c4 <tcp_receive+0xd00>)
 801434c:	681a      	ldr	r2, [r3, #0]
 801434e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014350:	68db      	ldr	r3, [r3, #12]
 8014352:	685b      	ldr	r3, [r3, #4]
 8014354:	1ad3      	subs	r3, r2, r3
 8014356:	3301      	adds	r3, #1
 8014358:	2b00      	cmp	r3, #0
 801435a:	dc35      	bgt.n	80143c8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801435c:	4818      	ldr	r0, [pc, #96]	@ (80143c0 <tcp_receive+0xcfc>)
 801435e:	f7fd fb5d 	bl	8011a1c <tcp_seg_copy>
 8014362:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014364:	69fb      	ldr	r3, [r7, #28]
 8014366:	2b00      	cmp	r3, #0
 8014368:	f000 8108 	beq.w	801457c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801436c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801436e:	68db      	ldr	r3, [r3, #12]
 8014370:	685b      	ldr	r3, [r3, #4]
 8014372:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014374:	8912      	ldrh	r2, [r2, #8]
 8014376:	441a      	add	r2, r3
 8014378:	4b12      	ldr	r3, [pc, #72]	@ (80143c4 <tcp_receive+0xd00>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	1ad3      	subs	r3, r2, r3
 801437e:	2b00      	cmp	r3, #0
 8014380:	dd12      	ble.n	80143a8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014382:	4b10      	ldr	r3, [pc, #64]	@ (80143c4 <tcp_receive+0xd00>)
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	b29a      	uxth	r2, r3
 8014388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801438a:	68db      	ldr	r3, [r3, #12]
 801438c:	685b      	ldr	r3, [r3, #4]
 801438e:	b29b      	uxth	r3, r3
 8014390:	1ad3      	subs	r3, r2, r3
 8014392:	b29a      	uxth	r2, r3
 8014394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014396:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801439a:	685a      	ldr	r2, [r3, #4]
 801439c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801439e:	891b      	ldrh	r3, [r3, #8]
 80143a0:	4619      	mov	r1, r3
 80143a2:	4610      	mov	r0, r2
 80143a4:	f7fb fea6 	bl	80100f4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80143a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143aa:	69fa      	ldr	r2, [r7, #28]
 80143ac:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80143ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80143b0:	69f8      	ldr	r0, [r7, #28]
 80143b2:	f7ff f883 	bl	80134bc <tcp_oos_insert_segment>
                  }
                  break;
 80143b6:	e0e1      	b.n	801457c <tcp_receive+0xeb8>
 80143b8:	24008254 	.word	0x24008254
 80143bc:	24008251 	.word	0x24008251
 80143c0:	24008224 	.word	0x24008224
 80143c4:	24008244 	.word	0x24008244
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80143c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143ca:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80143cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	f040 80c5 	bne.w	8014560 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80143d6:	4b7f      	ldr	r3, [pc, #508]	@ (80145d4 <tcp_receive+0xf10>)
 80143d8:	681a      	ldr	r2, [r3, #0]
 80143da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143dc:	68db      	ldr	r3, [r3, #12]
 80143de:	685b      	ldr	r3, [r3, #4]
 80143e0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	f340 80bc 	ble.w	8014560 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80143e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143ea:	68db      	ldr	r3, [r3, #12]
 80143ec:	899b      	ldrh	r3, [r3, #12]
 80143ee:	b29b      	uxth	r3, r3
 80143f0:	4618      	mov	r0, r3
 80143f2:	f7fa fb4b 	bl	800ea8c <lwip_htons>
 80143f6:	4603      	mov	r3, r0
 80143f8:	b2db      	uxtb	r3, r3
 80143fa:	f003 0301 	and.w	r3, r3, #1
 80143fe:	2b00      	cmp	r3, #0
 8014400:	f040 80be 	bne.w	8014580 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014404:	4874      	ldr	r0, [pc, #464]	@ (80145d8 <tcp_receive+0xf14>)
 8014406:	f7fd fb09 	bl	8011a1c <tcp_seg_copy>
 801440a:	4602      	mov	r2, r0
 801440c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801440e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	2b00      	cmp	r3, #0
 8014416:	f000 80b5 	beq.w	8014584 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801441a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801441c:	68db      	ldr	r3, [r3, #12]
 801441e:	685b      	ldr	r3, [r3, #4]
 8014420:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014422:	8912      	ldrh	r2, [r2, #8]
 8014424:	441a      	add	r2, r3
 8014426:	4b6b      	ldr	r3, [pc, #428]	@ (80145d4 <tcp_receive+0xf10>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	1ad3      	subs	r3, r2, r3
 801442c:	2b00      	cmp	r3, #0
 801442e:	dd12      	ble.n	8014456 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014430:	4b68      	ldr	r3, [pc, #416]	@ (80145d4 <tcp_receive+0xf10>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	b29a      	uxth	r2, r3
 8014436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014438:	68db      	ldr	r3, [r3, #12]
 801443a:	685b      	ldr	r3, [r3, #4]
 801443c:	b29b      	uxth	r3, r3
 801443e:	1ad3      	subs	r3, r2, r3
 8014440:	b29a      	uxth	r2, r3
 8014442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014444:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014448:	685a      	ldr	r2, [r3, #4]
 801444a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801444c:	891b      	ldrh	r3, [r3, #8]
 801444e:	4619      	mov	r1, r3
 8014450:	4610      	mov	r0, r2
 8014452:	f7fb fe4f 	bl	80100f4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014456:	4b61      	ldr	r3, [pc, #388]	@ (80145dc <tcp_receive+0xf18>)
 8014458:	881b      	ldrh	r3, [r3, #0]
 801445a:	461a      	mov	r2, r3
 801445c:	4b5d      	ldr	r3, [pc, #372]	@ (80145d4 <tcp_receive+0xf10>)
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	441a      	add	r2, r3
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014466:	6879      	ldr	r1, [r7, #4]
 8014468:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801446a:	440b      	add	r3, r1
 801446c:	1ad3      	subs	r3, r2, r3
 801446e:	2b00      	cmp	r3, #0
 8014470:	f340 8088 	ble.w	8014584 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	68db      	ldr	r3, [r3, #12]
 801447a:	899b      	ldrh	r3, [r3, #12]
 801447c:	b29b      	uxth	r3, r3
 801447e:	4618      	mov	r0, r3
 8014480:	f7fa fb04 	bl	800ea8c <lwip_htons>
 8014484:	4603      	mov	r3, r0
 8014486:	b2db      	uxtb	r3, r3
 8014488:	f003 0301 	and.w	r3, r3, #1
 801448c:	2b00      	cmp	r3, #0
 801448e:	d021      	beq.n	80144d4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	68db      	ldr	r3, [r3, #12]
 8014496:	899b      	ldrh	r3, [r3, #12]
 8014498:	b29b      	uxth	r3, r3
 801449a:	b21b      	sxth	r3, r3
 801449c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80144a0:	b21c      	sxth	r4, r3
 80144a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	68db      	ldr	r3, [r3, #12]
 80144a8:	899b      	ldrh	r3, [r3, #12]
 80144aa:	b29b      	uxth	r3, r3
 80144ac:	4618      	mov	r0, r3
 80144ae:	f7fa faed 	bl	800ea8c <lwip_htons>
 80144b2:	4603      	mov	r3, r0
 80144b4:	b2db      	uxtb	r3, r3
 80144b6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80144ba:	b29b      	uxth	r3, r3
 80144bc:	4618      	mov	r0, r3
 80144be:	f7fa fae5 	bl	800ea8c <lwip_htons>
 80144c2:	4603      	mov	r3, r0
 80144c4:	b21b      	sxth	r3, r3
 80144c6:	4323      	orrs	r3, r4
 80144c8:	b21a      	sxth	r2, r3
 80144ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	68db      	ldr	r3, [r3, #12]
 80144d0:	b292      	uxth	r2, r2
 80144d2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144d8:	b29a      	uxth	r2, r3
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80144de:	4413      	add	r3, r2
 80144e0:	b299      	uxth	r1, r3
 80144e2:	4b3c      	ldr	r3, [pc, #240]	@ (80145d4 <tcp_receive+0xf10>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	b29a      	uxth	r2, r3
 80144e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	1a8a      	subs	r2, r1, r2
 80144ee:	b292      	uxth	r2, r2
 80144f0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80144f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	685a      	ldr	r2, [r3, #4]
 80144f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	891b      	ldrh	r3, [r3, #8]
 80144fe:	4619      	mov	r1, r3
 8014500:	4610      	mov	r0, r2
 8014502:	f7fb fdf7 	bl	80100f4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	891c      	ldrh	r4, [r3, #8]
 801450c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	68db      	ldr	r3, [r3, #12]
 8014512:	899b      	ldrh	r3, [r3, #12]
 8014514:	b29b      	uxth	r3, r3
 8014516:	4618      	mov	r0, r3
 8014518:	f7fa fab8 	bl	800ea8c <lwip_htons>
 801451c:	4603      	mov	r3, r0
 801451e:	b2db      	uxtb	r3, r3
 8014520:	f003 0303 	and.w	r3, r3, #3
 8014524:	2b00      	cmp	r3, #0
 8014526:	d001      	beq.n	801452c <tcp_receive+0xe68>
 8014528:	2301      	movs	r3, #1
 801452a:	e000      	b.n	801452e <tcp_receive+0xe6a>
 801452c:	2300      	movs	r3, #0
 801452e:	4423      	add	r3, r4
 8014530:	b29a      	uxth	r2, r3
 8014532:	4b2a      	ldr	r3, [pc, #168]	@ (80145dc <tcp_receive+0xf18>)
 8014534:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014536:	4b29      	ldr	r3, [pc, #164]	@ (80145dc <tcp_receive+0xf18>)
 8014538:	881b      	ldrh	r3, [r3, #0]
 801453a:	461a      	mov	r2, r3
 801453c:	4b25      	ldr	r3, [pc, #148]	@ (80145d4 <tcp_receive+0xf10>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	441a      	add	r2, r3
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014546:	6879      	ldr	r1, [r7, #4]
 8014548:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801454a:	440b      	add	r3, r1
 801454c:	429a      	cmp	r2, r3
 801454e:	d019      	beq.n	8014584 <tcp_receive+0xec0>
 8014550:	4b23      	ldr	r3, [pc, #140]	@ (80145e0 <tcp_receive+0xf1c>)
 8014552:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8014556:	4923      	ldr	r1, [pc, #140]	@ (80145e4 <tcp_receive+0xf20>)
 8014558:	4823      	ldr	r0, [pc, #140]	@ (80145e8 <tcp_receive+0xf24>)
 801455a:	f005 f83f 	bl	80195dc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801455e:	e011      	b.n	8014584 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014568:	2b00      	cmp	r3, #0
 801456a:	f47f aea5 	bne.w	80142b8 <tcp_receive+0xbf4>
 801456e:	e00a      	b.n	8014586 <tcp_receive+0xec2>
                break;
 8014570:	bf00      	nop
 8014572:	e008      	b.n	8014586 <tcp_receive+0xec2>
                break;
 8014574:	bf00      	nop
 8014576:	e006      	b.n	8014586 <tcp_receive+0xec2>
                  break;
 8014578:	bf00      	nop
 801457a:	e004      	b.n	8014586 <tcp_receive+0xec2>
                  break;
 801457c:	bf00      	nop
 801457e:	e002      	b.n	8014586 <tcp_receive+0xec2>
                  break;
 8014580:	bf00      	nop
 8014582:	e000      	b.n	8014586 <tcp_receive+0xec2>
                break;
 8014584:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	f001 fa30 	bl	80159ec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801458c:	e003      	b.n	8014596 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f001 fa2c 	bl	80159ec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014594:	e01a      	b.n	80145cc <tcp_receive+0xf08>
 8014596:	e019      	b.n	80145cc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014598:	4b0e      	ldr	r3, [pc, #56]	@ (80145d4 <tcp_receive+0xf10>)
 801459a:	681a      	ldr	r2, [r3, #0]
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145a0:	1ad3      	subs	r3, r2, r3
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	db0a      	blt.n	80145bc <tcp_receive+0xef8>
 80145a6:	4b0b      	ldr	r3, [pc, #44]	@ (80145d4 <tcp_receive+0xf10>)
 80145a8:	681a      	ldr	r2, [r3, #0]
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145ae:	6879      	ldr	r1, [r7, #4]
 80145b0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80145b2:	440b      	add	r3, r1
 80145b4:	1ad3      	subs	r3, r2, r3
 80145b6:	3301      	adds	r3, #1
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	dd07      	ble.n	80145cc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	8b5b      	ldrh	r3, [r3, #26]
 80145c0:	f043 0302 	orr.w	r3, r3, #2
 80145c4:	b29a      	uxth	r2, r3
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80145ca:	e7ff      	b.n	80145cc <tcp_receive+0xf08>
 80145cc:	bf00      	nop
 80145ce:	3750      	adds	r7, #80	@ 0x50
 80145d0:	46bd      	mov	sp, r7
 80145d2:	bdb0      	pop	{r4, r5, r7, pc}
 80145d4:	24008244 	.word	0x24008244
 80145d8:	24008224 	.word	0x24008224
 80145dc:	2400824e 	.word	0x2400824e
 80145e0:	0801cd94 	.word	0x0801cd94
 80145e4:	0801d13c 	.word	0x0801d13c
 80145e8:	0801cde0 	.word	0x0801cde0

080145ec <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80145ec:	b480      	push	{r7}
 80145ee:	b083      	sub	sp, #12
 80145f0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80145f2:	4b15      	ldr	r3, [pc, #84]	@ (8014648 <tcp_get_next_optbyte+0x5c>)
 80145f4:	881b      	ldrh	r3, [r3, #0]
 80145f6:	1c5a      	adds	r2, r3, #1
 80145f8:	b291      	uxth	r1, r2
 80145fa:	4a13      	ldr	r2, [pc, #76]	@ (8014648 <tcp_get_next_optbyte+0x5c>)
 80145fc:	8011      	strh	r1, [r2, #0]
 80145fe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014600:	4b12      	ldr	r3, [pc, #72]	@ (801464c <tcp_get_next_optbyte+0x60>)
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d004      	beq.n	8014612 <tcp_get_next_optbyte+0x26>
 8014608:	4b11      	ldr	r3, [pc, #68]	@ (8014650 <tcp_get_next_optbyte+0x64>)
 801460a:	881b      	ldrh	r3, [r3, #0]
 801460c:	88fa      	ldrh	r2, [r7, #6]
 801460e:	429a      	cmp	r2, r3
 8014610:	d208      	bcs.n	8014624 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014612:	4b10      	ldr	r3, [pc, #64]	@ (8014654 <tcp_get_next_optbyte+0x68>)
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	3314      	adds	r3, #20
 8014618:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801461a:	88fb      	ldrh	r3, [r7, #6]
 801461c:	683a      	ldr	r2, [r7, #0]
 801461e:	4413      	add	r3, r2
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	e00b      	b.n	801463c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014624:	88fb      	ldrh	r3, [r7, #6]
 8014626:	b2da      	uxtb	r2, r3
 8014628:	4b09      	ldr	r3, [pc, #36]	@ (8014650 <tcp_get_next_optbyte+0x64>)
 801462a:	881b      	ldrh	r3, [r3, #0]
 801462c:	b2db      	uxtb	r3, r3
 801462e:	1ad3      	subs	r3, r2, r3
 8014630:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014632:	4b06      	ldr	r3, [pc, #24]	@ (801464c <tcp_get_next_optbyte+0x60>)
 8014634:	681a      	ldr	r2, [r3, #0]
 8014636:	797b      	ldrb	r3, [r7, #5]
 8014638:	4413      	add	r3, r2
 801463a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801463c:	4618      	mov	r0, r3
 801463e:	370c      	adds	r7, #12
 8014640:	46bd      	mov	sp, r7
 8014642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014646:	4770      	bx	lr
 8014648:	24008240 	.word	0x24008240
 801464c:	2400823c 	.word	0x2400823c
 8014650:	2400823a 	.word	0x2400823a
 8014654:	24008234 	.word	0x24008234

08014658 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b084      	sub	sp, #16
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d106      	bne.n	8014674 <tcp_parseopt+0x1c>
 8014666:	4b32      	ldr	r3, [pc, #200]	@ (8014730 <tcp_parseopt+0xd8>)
 8014668:	f240 727d 	movw	r2, #1917	@ 0x77d
 801466c:	4931      	ldr	r1, [pc, #196]	@ (8014734 <tcp_parseopt+0xdc>)
 801466e:	4832      	ldr	r0, [pc, #200]	@ (8014738 <tcp_parseopt+0xe0>)
 8014670:	f004 ffb4 	bl	80195dc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014674:	4b31      	ldr	r3, [pc, #196]	@ (801473c <tcp_parseopt+0xe4>)
 8014676:	881b      	ldrh	r3, [r3, #0]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d056      	beq.n	801472a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801467c:	4b30      	ldr	r3, [pc, #192]	@ (8014740 <tcp_parseopt+0xe8>)
 801467e:	2200      	movs	r2, #0
 8014680:	801a      	strh	r2, [r3, #0]
 8014682:	e046      	b.n	8014712 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8014684:	f7ff ffb2 	bl	80145ec <tcp_get_next_optbyte>
 8014688:	4603      	mov	r3, r0
 801468a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801468c:	7bfb      	ldrb	r3, [r7, #15]
 801468e:	2b02      	cmp	r3, #2
 8014690:	d006      	beq.n	80146a0 <tcp_parseopt+0x48>
 8014692:	2b02      	cmp	r3, #2
 8014694:	dc2a      	bgt.n	80146ec <tcp_parseopt+0x94>
 8014696:	2b00      	cmp	r3, #0
 8014698:	d042      	beq.n	8014720 <tcp_parseopt+0xc8>
 801469a:	2b01      	cmp	r3, #1
 801469c:	d038      	beq.n	8014710 <tcp_parseopt+0xb8>
 801469e:	e025      	b.n	80146ec <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80146a0:	f7ff ffa4 	bl	80145ec <tcp_get_next_optbyte>
 80146a4:	4603      	mov	r3, r0
 80146a6:	2b04      	cmp	r3, #4
 80146a8:	d13c      	bne.n	8014724 <tcp_parseopt+0xcc>
 80146aa:	4b25      	ldr	r3, [pc, #148]	@ (8014740 <tcp_parseopt+0xe8>)
 80146ac:	881b      	ldrh	r3, [r3, #0]
 80146ae:	3301      	adds	r3, #1
 80146b0:	4a22      	ldr	r2, [pc, #136]	@ (801473c <tcp_parseopt+0xe4>)
 80146b2:	8812      	ldrh	r2, [r2, #0]
 80146b4:	4293      	cmp	r3, r2
 80146b6:	da35      	bge.n	8014724 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80146b8:	f7ff ff98 	bl	80145ec <tcp_get_next_optbyte>
 80146bc:	4603      	mov	r3, r0
 80146be:	021b      	lsls	r3, r3, #8
 80146c0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80146c2:	f7ff ff93 	bl	80145ec <tcp_get_next_optbyte>
 80146c6:	4603      	mov	r3, r0
 80146c8:	461a      	mov	r2, r3
 80146ca:	89bb      	ldrh	r3, [r7, #12]
 80146cc:	4313      	orrs	r3, r2
 80146ce:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80146d0:	89bb      	ldrh	r3, [r7, #12]
 80146d2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80146d6:	d804      	bhi.n	80146e2 <tcp_parseopt+0x8a>
 80146d8:	89bb      	ldrh	r3, [r7, #12]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d001      	beq.n	80146e2 <tcp_parseopt+0x8a>
 80146de:	89ba      	ldrh	r2, [r7, #12]
 80146e0:	e001      	b.n	80146e6 <tcp_parseopt+0x8e>
 80146e2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80146ea:	e012      	b.n	8014712 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80146ec:	f7ff ff7e 	bl	80145ec <tcp_get_next_optbyte>
 80146f0:	4603      	mov	r3, r0
 80146f2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80146f4:	7afb      	ldrb	r3, [r7, #11]
 80146f6:	2b01      	cmp	r3, #1
 80146f8:	d916      	bls.n	8014728 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80146fa:	7afb      	ldrb	r3, [r7, #11]
 80146fc:	b29a      	uxth	r2, r3
 80146fe:	4b10      	ldr	r3, [pc, #64]	@ (8014740 <tcp_parseopt+0xe8>)
 8014700:	881b      	ldrh	r3, [r3, #0]
 8014702:	4413      	add	r3, r2
 8014704:	b29b      	uxth	r3, r3
 8014706:	3b02      	subs	r3, #2
 8014708:	b29a      	uxth	r2, r3
 801470a:	4b0d      	ldr	r3, [pc, #52]	@ (8014740 <tcp_parseopt+0xe8>)
 801470c:	801a      	strh	r2, [r3, #0]
 801470e:	e000      	b.n	8014712 <tcp_parseopt+0xba>
          break;
 8014710:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014712:	4b0b      	ldr	r3, [pc, #44]	@ (8014740 <tcp_parseopt+0xe8>)
 8014714:	881a      	ldrh	r2, [r3, #0]
 8014716:	4b09      	ldr	r3, [pc, #36]	@ (801473c <tcp_parseopt+0xe4>)
 8014718:	881b      	ldrh	r3, [r3, #0]
 801471a:	429a      	cmp	r2, r3
 801471c:	d3b2      	bcc.n	8014684 <tcp_parseopt+0x2c>
 801471e:	e004      	b.n	801472a <tcp_parseopt+0xd2>
          return;
 8014720:	bf00      	nop
 8014722:	e002      	b.n	801472a <tcp_parseopt+0xd2>
            return;
 8014724:	bf00      	nop
 8014726:	e000      	b.n	801472a <tcp_parseopt+0xd2>
            return;
 8014728:	bf00      	nop
      }
    }
  }
}
 801472a:	3710      	adds	r7, #16
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}
 8014730:	0801cd94 	.word	0x0801cd94
 8014734:	0801d1f8 	.word	0x0801d1f8
 8014738:	0801cde0 	.word	0x0801cde0
 801473c:	24008238 	.word	0x24008238
 8014740:	24008240 	.word	0x24008240

08014744 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014744:	b480      	push	{r7}
 8014746:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014748:	4b05      	ldr	r3, [pc, #20]	@ (8014760 <tcp_trigger_input_pcb_close+0x1c>)
 801474a:	781b      	ldrb	r3, [r3, #0]
 801474c:	f043 0310 	orr.w	r3, r3, #16
 8014750:	b2da      	uxtb	r2, r3
 8014752:	4b03      	ldr	r3, [pc, #12]	@ (8014760 <tcp_trigger_input_pcb_close+0x1c>)
 8014754:	701a      	strb	r2, [r3, #0]
}
 8014756:	bf00      	nop
 8014758:	46bd      	mov	sp, r7
 801475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475e:	4770      	bx	lr
 8014760:	24008251 	.word	0x24008251

08014764 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b084      	sub	sp, #16
 8014768:	af00      	add	r7, sp, #0
 801476a:	60f8      	str	r0, [r7, #12]
 801476c:	60b9      	str	r1, [r7, #8]
 801476e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d00a      	beq.n	801478c <tcp_route+0x28>
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	7a1b      	ldrb	r3, [r3, #8]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d006      	beq.n	801478c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	7a1b      	ldrb	r3, [r3, #8]
 8014782:	4618      	mov	r0, r3
 8014784:	f7fb faae 	bl	800fce4 <netif_get_by_index>
 8014788:	4603      	mov	r3, r0
 801478a:	e003      	b.n	8014794 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801478c:	6878      	ldr	r0, [r7, #4]
 801478e:	f003 f9dd 	bl	8017b4c <ip4_route>
 8014792:	4603      	mov	r3, r0
  }
}
 8014794:	4618      	mov	r0, r3
 8014796:	3710      	adds	r7, #16
 8014798:	46bd      	mov	sp, r7
 801479a:	bd80      	pop	{r7, pc}

0801479c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801479c:	b590      	push	{r4, r7, lr}
 801479e:	b087      	sub	sp, #28
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	60f8      	str	r0, [r7, #12]
 80147a4:	60b9      	str	r1, [r7, #8]
 80147a6:	603b      	str	r3, [r7, #0]
 80147a8:	4613      	mov	r3, r2
 80147aa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d105      	bne.n	80147be <tcp_create_segment+0x22>
 80147b2:	4b43      	ldr	r3, [pc, #268]	@ (80148c0 <tcp_create_segment+0x124>)
 80147b4:	22a3      	movs	r2, #163	@ 0xa3
 80147b6:	4943      	ldr	r1, [pc, #268]	@ (80148c4 <tcp_create_segment+0x128>)
 80147b8:	4843      	ldr	r0, [pc, #268]	@ (80148c8 <tcp_create_segment+0x12c>)
 80147ba:	f004 ff0f 	bl	80195dc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80147be:	68bb      	ldr	r3, [r7, #8]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d105      	bne.n	80147d0 <tcp_create_segment+0x34>
 80147c4:	4b3e      	ldr	r3, [pc, #248]	@ (80148c0 <tcp_create_segment+0x124>)
 80147c6:	22a4      	movs	r2, #164	@ 0xa4
 80147c8:	4940      	ldr	r1, [pc, #256]	@ (80148cc <tcp_create_segment+0x130>)
 80147ca:	483f      	ldr	r0, [pc, #252]	@ (80148c8 <tcp_create_segment+0x12c>)
 80147cc:	f004 ff06 	bl	80195dc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80147d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80147d4:	009b      	lsls	r3, r3, #2
 80147d6:	b2db      	uxtb	r3, r3
 80147d8:	f003 0304 	and.w	r3, r3, #4
 80147dc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80147de:	2003      	movs	r0, #3
 80147e0:	f7fa fef4 	bl	800f5cc <memp_malloc>
 80147e4:	6138      	str	r0, [r7, #16]
 80147e6:	693b      	ldr	r3, [r7, #16]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d104      	bne.n	80147f6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80147ec:	68b8      	ldr	r0, [r7, #8]
 80147ee:	f7fb fe07 	bl	8010400 <pbuf_free>
    return NULL;
 80147f2:	2300      	movs	r3, #0
 80147f4:	e060      	b.n	80148b8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80147f6:	693b      	ldr	r3, [r7, #16]
 80147f8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80147fc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80147fe:	693b      	ldr	r3, [r7, #16]
 8014800:	2200      	movs	r2, #0
 8014802:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014804:	693b      	ldr	r3, [r7, #16]
 8014806:	68ba      	ldr	r2, [r7, #8]
 8014808:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801480a:	68bb      	ldr	r3, [r7, #8]
 801480c:	891a      	ldrh	r2, [r3, #8]
 801480e:	7dfb      	ldrb	r3, [r7, #23]
 8014810:	b29b      	uxth	r3, r3
 8014812:	429a      	cmp	r2, r3
 8014814:	d205      	bcs.n	8014822 <tcp_create_segment+0x86>
 8014816:	4b2a      	ldr	r3, [pc, #168]	@ (80148c0 <tcp_create_segment+0x124>)
 8014818:	22b0      	movs	r2, #176	@ 0xb0
 801481a:	492d      	ldr	r1, [pc, #180]	@ (80148d0 <tcp_create_segment+0x134>)
 801481c:	482a      	ldr	r0, [pc, #168]	@ (80148c8 <tcp_create_segment+0x12c>)
 801481e:	f004 fedd 	bl	80195dc <iprintf>
  seg->len = p->tot_len - optlen;
 8014822:	68bb      	ldr	r3, [r7, #8]
 8014824:	891a      	ldrh	r2, [r3, #8]
 8014826:	7dfb      	ldrb	r3, [r7, #23]
 8014828:	b29b      	uxth	r3, r3
 801482a:	1ad3      	subs	r3, r2, r3
 801482c:	b29a      	uxth	r2, r3
 801482e:	693b      	ldr	r3, [r7, #16]
 8014830:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014832:	2114      	movs	r1, #20
 8014834:	68b8      	ldr	r0, [r7, #8]
 8014836:	f7fb fd4d 	bl	80102d4 <pbuf_add_header>
 801483a:	4603      	mov	r3, r0
 801483c:	2b00      	cmp	r3, #0
 801483e:	d004      	beq.n	801484a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014840:	6938      	ldr	r0, [r7, #16]
 8014842:	f7fd f8d2 	bl	80119ea <tcp_seg_free>
    return NULL;
 8014846:	2300      	movs	r3, #0
 8014848:	e036      	b.n	80148b8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801484a:	693b      	ldr	r3, [r7, #16]
 801484c:	685b      	ldr	r3, [r3, #4]
 801484e:	685a      	ldr	r2, [r3, #4]
 8014850:	693b      	ldr	r3, [r7, #16]
 8014852:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	8ada      	ldrh	r2, [r3, #22]
 8014858:	693b      	ldr	r3, [r7, #16]
 801485a:	68dc      	ldr	r4, [r3, #12]
 801485c:	4610      	mov	r0, r2
 801485e:	f7fa f915 	bl	800ea8c <lwip_htons>
 8014862:	4603      	mov	r3, r0
 8014864:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	8b1a      	ldrh	r2, [r3, #24]
 801486a:	693b      	ldr	r3, [r7, #16]
 801486c:	68dc      	ldr	r4, [r3, #12]
 801486e:	4610      	mov	r0, r2
 8014870:	f7fa f90c 	bl	800ea8c <lwip_htons>
 8014874:	4603      	mov	r3, r0
 8014876:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014878:	693b      	ldr	r3, [r7, #16]
 801487a:	68dc      	ldr	r4, [r3, #12]
 801487c:	6838      	ldr	r0, [r7, #0]
 801487e:	f7fa f91b 	bl	800eab8 <lwip_htonl>
 8014882:	4603      	mov	r3, r0
 8014884:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014886:	7dfb      	ldrb	r3, [r7, #23]
 8014888:	089b      	lsrs	r3, r3, #2
 801488a:	b2db      	uxtb	r3, r3
 801488c:	3305      	adds	r3, #5
 801488e:	b29b      	uxth	r3, r3
 8014890:	031b      	lsls	r3, r3, #12
 8014892:	b29a      	uxth	r2, r3
 8014894:	79fb      	ldrb	r3, [r7, #7]
 8014896:	b29b      	uxth	r3, r3
 8014898:	4313      	orrs	r3, r2
 801489a:	b29a      	uxth	r2, r3
 801489c:	693b      	ldr	r3, [r7, #16]
 801489e:	68dc      	ldr	r4, [r3, #12]
 80148a0:	4610      	mov	r0, r2
 80148a2:	f7fa f8f3 	bl	800ea8c <lwip_htons>
 80148a6:	4603      	mov	r3, r0
 80148a8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80148aa:	693b      	ldr	r3, [r7, #16]
 80148ac:	68db      	ldr	r3, [r3, #12]
 80148ae:	2200      	movs	r2, #0
 80148b0:	749a      	strb	r2, [r3, #18]
 80148b2:	2200      	movs	r2, #0
 80148b4:	74da      	strb	r2, [r3, #19]
  return seg;
 80148b6:	693b      	ldr	r3, [r7, #16]
}
 80148b8:	4618      	mov	r0, r3
 80148ba:	371c      	adds	r7, #28
 80148bc:	46bd      	mov	sp, r7
 80148be:	bd90      	pop	{r4, r7, pc}
 80148c0:	0801d214 	.word	0x0801d214
 80148c4:	0801d248 	.word	0x0801d248
 80148c8:	0801d268 	.word	0x0801d268
 80148cc:	0801d290 	.word	0x0801d290
 80148d0:	0801d2b4 	.word	0x0801d2b4

080148d4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80148d4:	b590      	push	{r4, r7, lr}
 80148d6:	b08b      	sub	sp, #44	@ 0x2c
 80148d8:	af02      	add	r7, sp, #8
 80148da:	6078      	str	r0, [r7, #4]
 80148dc:	460b      	mov	r3, r1
 80148de:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80148e0:	2300      	movs	r3, #0
 80148e2:	61fb      	str	r3, [r7, #28]
 80148e4:	2300      	movs	r3, #0
 80148e6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80148e8:	2300      	movs	r3, #0
 80148ea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d106      	bne.n	8014900 <tcp_split_unsent_seg+0x2c>
 80148f2:	4b95      	ldr	r3, [pc, #596]	@ (8014b48 <tcp_split_unsent_seg+0x274>)
 80148f4:	f240 324b 	movw	r2, #843	@ 0x34b
 80148f8:	4994      	ldr	r1, [pc, #592]	@ (8014b4c <tcp_split_unsent_seg+0x278>)
 80148fa:	4895      	ldr	r0, [pc, #596]	@ (8014b50 <tcp_split_unsent_seg+0x27c>)
 80148fc:	f004 fe6e 	bl	80195dc <iprintf>

  useg = pcb->unsent;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014904:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014906:	697b      	ldr	r3, [r7, #20]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d102      	bne.n	8014912 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801490c:	f04f 33ff 	mov.w	r3, #4294967295
 8014910:	e116      	b.n	8014b40 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8014912:	887b      	ldrh	r3, [r7, #2]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d109      	bne.n	801492c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014918:	4b8b      	ldr	r3, [pc, #556]	@ (8014b48 <tcp_split_unsent_seg+0x274>)
 801491a:	f240 3253 	movw	r2, #851	@ 0x353
 801491e:	498d      	ldr	r1, [pc, #564]	@ (8014b54 <tcp_split_unsent_seg+0x280>)
 8014920:	488b      	ldr	r0, [pc, #556]	@ (8014b50 <tcp_split_unsent_seg+0x27c>)
 8014922:	f004 fe5b 	bl	80195dc <iprintf>
    return ERR_VAL;
 8014926:	f06f 0305 	mvn.w	r3, #5
 801492a:	e109      	b.n	8014b40 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801492c:	697b      	ldr	r3, [r7, #20]
 801492e:	891b      	ldrh	r3, [r3, #8]
 8014930:	887a      	ldrh	r2, [r7, #2]
 8014932:	429a      	cmp	r2, r3
 8014934:	d301      	bcc.n	801493a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014936:	2300      	movs	r3, #0
 8014938:	e102      	b.n	8014b40 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801493e:	887a      	ldrh	r2, [r7, #2]
 8014940:	429a      	cmp	r2, r3
 8014942:	d906      	bls.n	8014952 <tcp_split_unsent_seg+0x7e>
 8014944:	4b80      	ldr	r3, [pc, #512]	@ (8014b48 <tcp_split_unsent_seg+0x274>)
 8014946:	f240 325b 	movw	r2, #859	@ 0x35b
 801494a:	4983      	ldr	r1, [pc, #524]	@ (8014b58 <tcp_split_unsent_seg+0x284>)
 801494c:	4880      	ldr	r0, [pc, #512]	@ (8014b50 <tcp_split_unsent_seg+0x27c>)
 801494e:	f004 fe45 	bl	80195dc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014952:	697b      	ldr	r3, [r7, #20]
 8014954:	891b      	ldrh	r3, [r3, #8]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d106      	bne.n	8014968 <tcp_split_unsent_seg+0x94>
 801495a:	4b7b      	ldr	r3, [pc, #492]	@ (8014b48 <tcp_split_unsent_seg+0x274>)
 801495c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8014960:	497e      	ldr	r1, [pc, #504]	@ (8014b5c <tcp_split_unsent_seg+0x288>)
 8014962:	487b      	ldr	r0, [pc, #492]	@ (8014b50 <tcp_split_unsent_seg+0x27c>)
 8014964:	f004 fe3a 	bl	80195dc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014968:	697b      	ldr	r3, [r7, #20]
 801496a:	7a9b      	ldrb	r3, [r3, #10]
 801496c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801496e:	7bfb      	ldrb	r3, [r7, #15]
 8014970:	009b      	lsls	r3, r3, #2
 8014972:	b2db      	uxtb	r3, r3
 8014974:	f003 0304 	and.w	r3, r3, #4
 8014978:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801497a:	697b      	ldr	r3, [r7, #20]
 801497c:	891a      	ldrh	r2, [r3, #8]
 801497e:	887b      	ldrh	r3, [r7, #2]
 8014980:	1ad3      	subs	r3, r2, r3
 8014982:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014984:	7bbb      	ldrb	r3, [r7, #14]
 8014986:	b29a      	uxth	r2, r3
 8014988:	89bb      	ldrh	r3, [r7, #12]
 801498a:	4413      	add	r3, r2
 801498c:	b29b      	uxth	r3, r3
 801498e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014992:	4619      	mov	r1, r3
 8014994:	2036      	movs	r0, #54	@ 0x36
 8014996:	f7fb fa4f 	bl	800fe38 <pbuf_alloc>
 801499a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	f000 80b7 	beq.w	8014b12 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80149a4:	697b      	ldr	r3, [r7, #20]
 80149a6:	685b      	ldr	r3, [r3, #4]
 80149a8:	891a      	ldrh	r2, [r3, #8]
 80149aa:	697b      	ldr	r3, [r7, #20]
 80149ac:	891b      	ldrh	r3, [r3, #8]
 80149ae:	1ad3      	subs	r3, r2, r3
 80149b0:	b29a      	uxth	r2, r3
 80149b2:	887b      	ldrh	r3, [r7, #2]
 80149b4:	4413      	add	r3, r2
 80149b6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80149b8:	697b      	ldr	r3, [r7, #20]
 80149ba:	6858      	ldr	r0, [r3, #4]
 80149bc:	693b      	ldr	r3, [r7, #16]
 80149be:	685a      	ldr	r2, [r3, #4]
 80149c0:	7bbb      	ldrb	r3, [r7, #14]
 80149c2:	18d1      	adds	r1, r2, r3
 80149c4:	897b      	ldrh	r3, [r7, #10]
 80149c6:	89ba      	ldrh	r2, [r7, #12]
 80149c8:	f7fb ff20 	bl	801080c <pbuf_copy_partial>
 80149cc:	4603      	mov	r3, r0
 80149ce:	461a      	mov	r2, r3
 80149d0:	89bb      	ldrh	r3, [r7, #12]
 80149d2:	4293      	cmp	r3, r2
 80149d4:	f040 809f 	bne.w	8014b16 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80149d8:	697b      	ldr	r3, [r7, #20]
 80149da:	68db      	ldr	r3, [r3, #12]
 80149dc:	899b      	ldrh	r3, [r3, #12]
 80149de:	b29b      	uxth	r3, r3
 80149e0:	4618      	mov	r0, r3
 80149e2:	f7fa f853 	bl	800ea8c <lwip_htons>
 80149e6:	4603      	mov	r3, r0
 80149e8:	b2db      	uxtb	r3, r3
 80149ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80149ee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80149f0:	2300      	movs	r3, #0
 80149f2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80149f4:	7efb      	ldrb	r3, [r7, #27]
 80149f6:	f003 0308 	and.w	r3, r3, #8
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d007      	beq.n	8014a0e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80149fe:	7efb      	ldrb	r3, [r7, #27]
 8014a00:	f023 0308 	bic.w	r3, r3, #8
 8014a04:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014a06:	7ebb      	ldrb	r3, [r7, #26]
 8014a08:	f043 0308 	orr.w	r3, r3, #8
 8014a0c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014a0e:	7efb      	ldrb	r3, [r7, #27]
 8014a10:	f003 0301 	and.w	r3, r3, #1
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d007      	beq.n	8014a28 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014a18:	7efb      	ldrb	r3, [r7, #27]
 8014a1a:	f023 0301 	bic.w	r3, r3, #1
 8014a1e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014a20:	7ebb      	ldrb	r3, [r7, #26]
 8014a22:	f043 0301 	orr.w	r3, r3, #1
 8014a26:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014a28:	697b      	ldr	r3, [r7, #20]
 8014a2a:	68db      	ldr	r3, [r3, #12]
 8014a2c:	685b      	ldr	r3, [r3, #4]
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f7fa f842 	bl	800eab8 <lwip_htonl>
 8014a34:	4602      	mov	r2, r0
 8014a36:	887b      	ldrh	r3, [r7, #2]
 8014a38:	18d1      	adds	r1, r2, r3
 8014a3a:	7eba      	ldrb	r2, [r7, #26]
 8014a3c:	7bfb      	ldrb	r3, [r7, #15]
 8014a3e:	9300      	str	r3, [sp, #0]
 8014a40:	460b      	mov	r3, r1
 8014a42:	6939      	ldr	r1, [r7, #16]
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f7ff fea9 	bl	801479c <tcp_create_segment>
 8014a4a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014a4c:	69fb      	ldr	r3, [r7, #28]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d063      	beq.n	8014b1a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014a52:	697b      	ldr	r3, [r7, #20]
 8014a54:	685b      	ldr	r3, [r3, #4]
 8014a56:	4618      	mov	r0, r3
 8014a58:	f7fb fd60 	bl	801051c <pbuf_clen>
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	461a      	mov	r2, r3
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014a66:	1a9b      	subs	r3, r3, r2
 8014a68:	b29a      	uxth	r2, r3
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	6858      	ldr	r0, [r3, #4]
 8014a74:	697b      	ldr	r3, [r7, #20]
 8014a76:	685b      	ldr	r3, [r3, #4]
 8014a78:	891a      	ldrh	r2, [r3, #8]
 8014a7a:	89bb      	ldrh	r3, [r7, #12]
 8014a7c:	1ad3      	subs	r3, r2, r3
 8014a7e:	b29b      	uxth	r3, r3
 8014a80:	4619      	mov	r1, r3
 8014a82:	f7fb fb37 	bl	80100f4 <pbuf_realloc>
  useg->len -= remainder;
 8014a86:	697b      	ldr	r3, [r7, #20]
 8014a88:	891a      	ldrh	r2, [r3, #8]
 8014a8a:	89bb      	ldrh	r3, [r7, #12]
 8014a8c:	1ad3      	subs	r3, r2, r3
 8014a8e:	b29a      	uxth	r2, r3
 8014a90:	697b      	ldr	r3, [r7, #20]
 8014a92:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014a94:	697b      	ldr	r3, [r7, #20]
 8014a96:	68db      	ldr	r3, [r3, #12]
 8014a98:	899b      	ldrh	r3, [r3, #12]
 8014a9a:	b29c      	uxth	r4, r3
 8014a9c:	7efb      	ldrb	r3, [r7, #27]
 8014a9e:	b29b      	uxth	r3, r3
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	f7f9 fff3 	bl	800ea8c <lwip_htons>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	461a      	mov	r2, r3
 8014aaa:	697b      	ldr	r3, [r7, #20]
 8014aac:	68db      	ldr	r3, [r3, #12]
 8014aae:	4322      	orrs	r2, r4
 8014ab0:	b292      	uxth	r2, r2
 8014ab2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014ab4:	697b      	ldr	r3, [r7, #20]
 8014ab6:	685b      	ldr	r3, [r3, #4]
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f7fb fd2f 	bl	801051c <pbuf_clen>
 8014abe:	4603      	mov	r3, r0
 8014ac0:	461a      	mov	r2, r3
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014ac8:	4413      	add	r3, r2
 8014aca:	b29a      	uxth	r2, r3
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014ad2:	69fb      	ldr	r3, [r7, #28]
 8014ad4:	685b      	ldr	r3, [r3, #4]
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f7fb fd20 	bl	801051c <pbuf_clen>
 8014adc:	4603      	mov	r3, r0
 8014ade:	461a      	mov	r2, r3
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014ae6:	4413      	add	r3, r2
 8014ae8:	b29a      	uxth	r2, r3
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014af0:	697b      	ldr	r3, [r7, #20]
 8014af2:	681a      	ldr	r2, [r3, #0]
 8014af4:	69fb      	ldr	r3, [r7, #28]
 8014af6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014af8:	697b      	ldr	r3, [r7, #20]
 8014afa:	69fa      	ldr	r2, [r7, #28]
 8014afc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014afe:	69fb      	ldr	r3, [r7, #28]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d103      	bne.n	8014b0e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	2200      	movs	r2, #0
 8014b0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014b0e:	2300      	movs	r3, #0
 8014b10:	e016      	b.n	8014b40 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8014b12:	bf00      	nop
 8014b14:	e002      	b.n	8014b1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014b16:	bf00      	nop
 8014b18:	e000      	b.n	8014b1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014b1a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014b1c:	69fb      	ldr	r3, [r7, #28]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d006      	beq.n	8014b30 <tcp_split_unsent_seg+0x25c>
 8014b22:	4b09      	ldr	r3, [pc, #36]	@ (8014b48 <tcp_split_unsent_seg+0x274>)
 8014b24:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8014b28:	490d      	ldr	r1, [pc, #52]	@ (8014b60 <tcp_split_unsent_seg+0x28c>)
 8014b2a:	4809      	ldr	r0, [pc, #36]	@ (8014b50 <tcp_split_unsent_seg+0x27c>)
 8014b2c:	f004 fd56 	bl	80195dc <iprintf>
  if (p != NULL) {
 8014b30:	693b      	ldr	r3, [r7, #16]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d002      	beq.n	8014b3c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014b36:	6938      	ldr	r0, [r7, #16]
 8014b38:	f7fb fc62 	bl	8010400 <pbuf_free>
  }

  return ERR_MEM;
 8014b3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014b40:	4618      	mov	r0, r3
 8014b42:	3724      	adds	r7, #36	@ 0x24
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd90      	pop	{r4, r7, pc}
 8014b48:	0801d214 	.word	0x0801d214
 8014b4c:	0801d5a8 	.word	0x0801d5a8
 8014b50:	0801d268 	.word	0x0801d268
 8014b54:	0801d5cc 	.word	0x0801d5cc
 8014b58:	0801d5f0 	.word	0x0801d5f0
 8014b5c:	0801d600 	.word	0x0801d600
 8014b60:	0801d610 	.word	0x0801d610

08014b64 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014b64:	b590      	push	{r4, r7, lr}
 8014b66:	b085      	sub	sp, #20
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d106      	bne.n	8014b80 <tcp_send_fin+0x1c>
 8014b72:	4b21      	ldr	r3, [pc, #132]	@ (8014bf8 <tcp_send_fin+0x94>)
 8014b74:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8014b78:	4920      	ldr	r1, [pc, #128]	@ (8014bfc <tcp_send_fin+0x98>)
 8014b7a:	4821      	ldr	r0, [pc, #132]	@ (8014c00 <tcp_send_fin+0x9c>)
 8014b7c:	f004 fd2e 	bl	80195dc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d02e      	beq.n	8014be6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b8c:	60fb      	str	r3, [r7, #12]
 8014b8e:	e002      	b.n	8014b96 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d1f8      	bne.n	8014b90 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	68db      	ldr	r3, [r3, #12]
 8014ba2:	899b      	ldrh	r3, [r3, #12]
 8014ba4:	b29b      	uxth	r3, r3
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7f9 ff70 	bl	800ea8c <lwip_htons>
 8014bac:	4603      	mov	r3, r0
 8014bae:	b2db      	uxtb	r3, r3
 8014bb0:	f003 0307 	and.w	r3, r3, #7
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d116      	bne.n	8014be6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	68db      	ldr	r3, [r3, #12]
 8014bbc:	899b      	ldrh	r3, [r3, #12]
 8014bbe:	b29c      	uxth	r4, r3
 8014bc0:	2001      	movs	r0, #1
 8014bc2:	f7f9 ff63 	bl	800ea8c <lwip_htons>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	461a      	mov	r2, r3
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	68db      	ldr	r3, [r3, #12]
 8014bce:	4322      	orrs	r2, r4
 8014bd0:	b292      	uxth	r2, r2
 8014bd2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	8b5b      	ldrh	r3, [r3, #26]
 8014bd8:	f043 0320 	orr.w	r3, r3, #32
 8014bdc:	b29a      	uxth	r2, r3
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014be2:	2300      	movs	r3, #0
 8014be4:	e004      	b.n	8014bf0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014be6:	2101      	movs	r1, #1
 8014be8:	6878      	ldr	r0, [r7, #4]
 8014bea:	f000 f80b 	bl	8014c04 <tcp_enqueue_flags>
 8014bee:	4603      	mov	r3, r0
}
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	3714      	adds	r7, #20
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd90      	pop	{r4, r7, pc}
 8014bf8:	0801d214 	.word	0x0801d214
 8014bfc:	0801d61c 	.word	0x0801d61c
 8014c00:	0801d268 	.word	0x0801d268

08014c04 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b08a      	sub	sp, #40	@ 0x28
 8014c08:	af02      	add	r7, sp, #8
 8014c0a:	6078      	str	r0, [r7, #4]
 8014c0c:	460b      	mov	r3, r1
 8014c0e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014c10:	2300      	movs	r3, #0
 8014c12:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014c14:	2300      	movs	r3, #0
 8014c16:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014c18:	78fb      	ldrb	r3, [r7, #3]
 8014c1a:	f003 0303 	and.w	r3, r3, #3
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d106      	bne.n	8014c30 <tcp_enqueue_flags+0x2c>
 8014c22:	4b67      	ldr	r3, [pc, #412]	@ (8014dc0 <tcp_enqueue_flags+0x1bc>)
 8014c24:	f240 4211 	movw	r2, #1041	@ 0x411
 8014c28:	4966      	ldr	r1, [pc, #408]	@ (8014dc4 <tcp_enqueue_flags+0x1c0>)
 8014c2a:	4867      	ldr	r0, [pc, #412]	@ (8014dc8 <tcp_enqueue_flags+0x1c4>)
 8014c2c:	f004 fcd6 	bl	80195dc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d106      	bne.n	8014c44 <tcp_enqueue_flags+0x40>
 8014c36:	4b62      	ldr	r3, [pc, #392]	@ (8014dc0 <tcp_enqueue_flags+0x1bc>)
 8014c38:	f240 4213 	movw	r2, #1043	@ 0x413
 8014c3c:	4963      	ldr	r1, [pc, #396]	@ (8014dcc <tcp_enqueue_flags+0x1c8>)
 8014c3e:	4862      	ldr	r0, [pc, #392]	@ (8014dc8 <tcp_enqueue_flags+0x1c4>)
 8014c40:	f004 fccc 	bl	80195dc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014c44:	78fb      	ldrb	r3, [r7, #3]
 8014c46:	f003 0302 	and.w	r3, r3, #2
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d001      	beq.n	8014c52 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014c4e:	2301      	movs	r3, #1
 8014c50:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014c52:	7ffb      	ldrb	r3, [r7, #31]
 8014c54:	009b      	lsls	r3, r3, #2
 8014c56:	b2db      	uxtb	r3, r3
 8014c58:	f003 0304 	and.w	r3, r3, #4
 8014c5c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014c5e:	7dfb      	ldrb	r3, [r7, #23]
 8014c60:	b29b      	uxth	r3, r3
 8014c62:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014c66:	4619      	mov	r1, r3
 8014c68:	2036      	movs	r0, #54	@ 0x36
 8014c6a:	f7fb f8e5 	bl	800fe38 <pbuf_alloc>
 8014c6e:	6138      	str	r0, [r7, #16]
 8014c70:	693b      	ldr	r3, [r7, #16]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d109      	bne.n	8014c8a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	8b5b      	ldrh	r3, [r3, #26]
 8014c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014c7e:	b29a      	uxth	r2, r3
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014c84:	f04f 33ff 	mov.w	r3, #4294967295
 8014c88:	e095      	b.n	8014db6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014c8a:	693b      	ldr	r3, [r7, #16]
 8014c8c:	895a      	ldrh	r2, [r3, #10]
 8014c8e:	7dfb      	ldrb	r3, [r7, #23]
 8014c90:	b29b      	uxth	r3, r3
 8014c92:	429a      	cmp	r2, r3
 8014c94:	d206      	bcs.n	8014ca4 <tcp_enqueue_flags+0xa0>
 8014c96:	4b4a      	ldr	r3, [pc, #296]	@ (8014dc0 <tcp_enqueue_flags+0x1bc>)
 8014c98:	f240 4239 	movw	r2, #1081	@ 0x439
 8014c9c:	494c      	ldr	r1, [pc, #304]	@ (8014dd0 <tcp_enqueue_flags+0x1cc>)
 8014c9e:	484a      	ldr	r0, [pc, #296]	@ (8014dc8 <tcp_enqueue_flags+0x1c4>)
 8014ca0:	f004 fc9c 	bl	80195dc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8014ca8:	78fa      	ldrb	r2, [r7, #3]
 8014caa:	7ffb      	ldrb	r3, [r7, #31]
 8014cac:	9300      	str	r3, [sp, #0]
 8014cae:	460b      	mov	r3, r1
 8014cb0:	6939      	ldr	r1, [r7, #16]
 8014cb2:	6878      	ldr	r0, [r7, #4]
 8014cb4:	f7ff fd72 	bl	801479c <tcp_create_segment>
 8014cb8:	60f8      	str	r0, [r7, #12]
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d109      	bne.n	8014cd4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	8b5b      	ldrh	r3, [r3, #26]
 8014cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014cc8:	b29a      	uxth	r2, r3
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014cce:	f04f 33ff 	mov.w	r3, #4294967295
 8014cd2:	e070      	b.n	8014db6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	68db      	ldr	r3, [r3, #12]
 8014cd8:	f003 0303 	and.w	r3, r3, #3
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d006      	beq.n	8014cee <tcp_enqueue_flags+0xea>
 8014ce0:	4b37      	ldr	r3, [pc, #220]	@ (8014dc0 <tcp_enqueue_flags+0x1bc>)
 8014ce2:	f240 4242 	movw	r2, #1090	@ 0x442
 8014ce6:	493b      	ldr	r1, [pc, #236]	@ (8014dd4 <tcp_enqueue_flags+0x1d0>)
 8014ce8:	4837      	ldr	r0, [pc, #220]	@ (8014dc8 <tcp_enqueue_flags+0x1c4>)
 8014cea:	f004 fc77 	bl	80195dc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	891b      	ldrh	r3, [r3, #8]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d006      	beq.n	8014d04 <tcp_enqueue_flags+0x100>
 8014cf6:	4b32      	ldr	r3, [pc, #200]	@ (8014dc0 <tcp_enqueue_flags+0x1bc>)
 8014cf8:	f240 4243 	movw	r2, #1091	@ 0x443
 8014cfc:	4936      	ldr	r1, [pc, #216]	@ (8014dd8 <tcp_enqueue_flags+0x1d4>)
 8014cfe:	4832      	ldr	r0, [pc, #200]	@ (8014dc8 <tcp_enqueue_flags+0x1c4>)
 8014d00:	f004 fc6c 	bl	80195dc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d103      	bne.n	8014d14 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	68fa      	ldr	r2, [r7, #12]
 8014d10:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014d12:	e00d      	b.n	8014d30 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d18:	61bb      	str	r3, [r7, #24]
 8014d1a:	e002      	b.n	8014d22 <tcp_enqueue_flags+0x11e>
 8014d1c:	69bb      	ldr	r3, [r7, #24]
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	61bb      	str	r3, [r7, #24]
 8014d22:	69bb      	ldr	r3, [r7, #24]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d1f8      	bne.n	8014d1c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014d2a:	69bb      	ldr	r3, [r7, #24]
 8014d2c:	68fa      	ldr	r2, [r7, #12]
 8014d2e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	2200      	movs	r2, #0
 8014d34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014d38:	78fb      	ldrb	r3, [r7, #3]
 8014d3a:	f003 0302 	and.w	r3, r3, #2
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d104      	bne.n	8014d4c <tcp_enqueue_flags+0x148>
 8014d42:	78fb      	ldrb	r3, [r7, #3]
 8014d44:	f003 0301 	and.w	r3, r3, #1
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d004      	beq.n	8014d56 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d50:	1c5a      	adds	r2, r3, #1
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014d56:	78fb      	ldrb	r3, [r7, #3]
 8014d58:	f003 0301 	and.w	r3, r3, #1
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d006      	beq.n	8014d6e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	8b5b      	ldrh	r3, [r3, #26]
 8014d64:	f043 0320 	orr.w	r3, r3, #32
 8014d68:	b29a      	uxth	r2, r3
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	685b      	ldr	r3, [r3, #4]
 8014d72:	4618      	mov	r0, r3
 8014d74:	f7fb fbd2 	bl	801051c <pbuf_clen>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	461a      	mov	r2, r3
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014d82:	4413      	add	r3, r2
 8014d84:	b29a      	uxth	r2, r3
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d00e      	beq.n	8014db4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d10a      	bne.n	8014db4 <tcp_enqueue_flags+0x1b0>
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d106      	bne.n	8014db4 <tcp_enqueue_flags+0x1b0>
 8014da6:	4b06      	ldr	r3, [pc, #24]	@ (8014dc0 <tcp_enqueue_flags+0x1bc>)
 8014da8:	f240 4265 	movw	r2, #1125	@ 0x465
 8014dac:	490b      	ldr	r1, [pc, #44]	@ (8014ddc <tcp_enqueue_flags+0x1d8>)
 8014dae:	4806      	ldr	r0, [pc, #24]	@ (8014dc8 <tcp_enqueue_flags+0x1c4>)
 8014db0:	f004 fc14 	bl	80195dc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014db4:	2300      	movs	r3, #0
}
 8014db6:	4618      	mov	r0, r3
 8014db8:	3720      	adds	r7, #32
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	bd80      	pop	{r7, pc}
 8014dbe:	bf00      	nop
 8014dc0:	0801d214 	.word	0x0801d214
 8014dc4:	0801d638 	.word	0x0801d638
 8014dc8:	0801d268 	.word	0x0801d268
 8014dcc:	0801d690 	.word	0x0801d690
 8014dd0:	0801d6b0 	.word	0x0801d6b0
 8014dd4:	0801d6ec 	.word	0x0801d6ec
 8014dd8:	0801d704 	.word	0x0801d704
 8014ddc:	0801d730 	.word	0x0801d730

08014de0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014de0:	b5b0      	push	{r4, r5, r7, lr}
 8014de2:	b08a      	sub	sp, #40	@ 0x28
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d106      	bne.n	8014dfc <tcp_output+0x1c>
 8014dee:	4b8a      	ldr	r3, [pc, #552]	@ (8015018 <tcp_output+0x238>)
 8014df0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8014df4:	4989      	ldr	r1, [pc, #548]	@ (801501c <tcp_output+0x23c>)
 8014df6:	488a      	ldr	r0, [pc, #552]	@ (8015020 <tcp_output+0x240>)
 8014df8:	f004 fbf0 	bl	80195dc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	7d1b      	ldrb	r3, [r3, #20]
 8014e00:	2b01      	cmp	r3, #1
 8014e02:	d106      	bne.n	8014e12 <tcp_output+0x32>
 8014e04:	4b84      	ldr	r3, [pc, #528]	@ (8015018 <tcp_output+0x238>)
 8014e06:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8014e0a:	4986      	ldr	r1, [pc, #536]	@ (8015024 <tcp_output+0x244>)
 8014e0c:	4884      	ldr	r0, [pc, #528]	@ (8015020 <tcp_output+0x240>)
 8014e0e:	f004 fbe5 	bl	80195dc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014e12:	4b85      	ldr	r3, [pc, #532]	@ (8015028 <tcp_output+0x248>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	687a      	ldr	r2, [r7, #4]
 8014e18:	429a      	cmp	r2, r3
 8014e1a:	d101      	bne.n	8014e20 <tcp_output+0x40>
    return ERR_OK;
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	e1ce      	b.n	80151be <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014e2c:	4293      	cmp	r3, r2
 8014e2e:	bf28      	it	cs
 8014e30:	4613      	movcs	r3, r2
 8014e32:	b29b      	uxth	r3, r3
 8014e34:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e3a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8014e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d10b      	bne.n	8014e5a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	8b5b      	ldrh	r3, [r3, #26]
 8014e46:	f003 0302 	and.w	r3, r3, #2
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	f000 81aa 	beq.w	80151a4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014e50:	6878      	ldr	r0, [r7, #4]
 8014e52:	f000 fdcb 	bl	80159ec <tcp_send_empty_ack>
 8014e56:	4603      	mov	r3, r0
 8014e58:	e1b1      	b.n	80151be <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014e5a:	6879      	ldr	r1, [r7, #4]
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	3304      	adds	r3, #4
 8014e60:	461a      	mov	r2, r3
 8014e62:	6878      	ldr	r0, [r7, #4]
 8014e64:	f7ff fc7e 	bl	8014764 <tcp_route>
 8014e68:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014e6a:	697b      	ldr	r3, [r7, #20]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d102      	bne.n	8014e76 <tcp_output+0x96>
    return ERR_RTE;
 8014e70:	f06f 0303 	mvn.w	r3, #3
 8014e74:	e1a3      	b.n	80151be <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d003      	beq.n	8014e84 <tcp_output+0xa4>
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d111      	bne.n	8014ea8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014e84:	697b      	ldr	r3, [r7, #20]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d002      	beq.n	8014e90 <tcp_output+0xb0>
 8014e8a:	697b      	ldr	r3, [r7, #20]
 8014e8c:	3304      	adds	r3, #4
 8014e8e:	e000      	b.n	8014e92 <tcp_output+0xb2>
 8014e90:	2300      	movs	r3, #0
 8014e92:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014e94:	693b      	ldr	r3, [r7, #16]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d102      	bne.n	8014ea0 <tcp_output+0xc0>
      return ERR_RTE;
 8014e9a:	f06f 0303 	mvn.w	r3, #3
 8014e9e:	e18e      	b.n	80151be <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014ea0:	693b      	ldr	r3, [r7, #16]
 8014ea2:	681a      	ldr	r2, [r3, #0]
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014eaa:	68db      	ldr	r3, [r3, #12]
 8014eac:	685b      	ldr	r3, [r3, #4]
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f7f9 fe02 	bl	800eab8 <lwip_htonl>
 8014eb4:	4602      	mov	r2, r0
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014eba:	1ad3      	subs	r3, r2, r3
 8014ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ebe:	8912      	ldrh	r2, [r2, #8]
 8014ec0:	4413      	add	r3, r2
 8014ec2:	69ba      	ldr	r2, [r7, #24]
 8014ec4:	429a      	cmp	r2, r3
 8014ec6:	d227      	bcs.n	8014f18 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014ece:	461a      	mov	r2, r3
 8014ed0:	69bb      	ldr	r3, [r7, #24]
 8014ed2:	4293      	cmp	r3, r2
 8014ed4:	d114      	bne.n	8014f00 <tcp_output+0x120>
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d110      	bne.n	8014f00 <tcp_output+0x120>
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d10b      	bne.n	8014f00 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	2200      	movs	r2, #0
 8014eec:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	2201      	movs	r2, #1
 8014ef4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	2200      	movs	r2, #0
 8014efc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	8b5b      	ldrh	r3, [r3, #26]
 8014f04:	f003 0302 	and.w	r3, r3, #2
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	f000 814d 	beq.w	80151a8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8014f0e:	6878      	ldr	r0, [r7, #4]
 8014f10:	f000 fd6c 	bl	80159ec <tcp_send_empty_ack>
 8014f14:	4603      	mov	r3, r0
 8014f16:	e152      	b.n	80151be <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f24:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014f26:	6a3b      	ldr	r3, [r7, #32]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	f000 811c 	beq.w	8015166 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8014f2e:	e002      	b.n	8014f36 <tcp_output+0x156>
 8014f30:	6a3b      	ldr	r3, [r7, #32]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	623b      	str	r3, [r7, #32]
 8014f36:	6a3b      	ldr	r3, [r7, #32]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d1f8      	bne.n	8014f30 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014f3e:	e112      	b.n	8015166 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f42:	68db      	ldr	r3, [r3, #12]
 8014f44:	899b      	ldrh	r3, [r3, #12]
 8014f46:	b29b      	uxth	r3, r3
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f7f9 fd9f 	bl	800ea8c <lwip_htons>
 8014f4e:	4603      	mov	r3, r0
 8014f50:	b2db      	uxtb	r3, r3
 8014f52:	f003 0304 	and.w	r3, r3, #4
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d006      	beq.n	8014f68 <tcp_output+0x188>
 8014f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8015018 <tcp_output+0x238>)
 8014f5c:	f240 5236 	movw	r2, #1334	@ 0x536
 8014f60:	4932      	ldr	r1, [pc, #200]	@ (801502c <tcp_output+0x24c>)
 8014f62:	482f      	ldr	r0, [pc, #188]	@ (8015020 <tcp_output+0x240>)
 8014f64:	f004 fb3a 	bl	80195dc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d01f      	beq.n	8014fb0 <tcp_output+0x1d0>
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	8b5b      	ldrh	r3, [r3, #26]
 8014f74:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d119      	bne.n	8014fb0 <tcp_output+0x1d0>
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d00b      	beq.n	8014f9c <tcp_output+0x1bc>
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d110      	bne.n	8014fb0 <tcp_output+0x1d0>
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f92:	891a      	ldrh	r2, [r3, #8]
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f98:	429a      	cmp	r2, r3
 8014f9a:	d209      	bcs.n	8014fb0 <tcp_output+0x1d0>
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d004      	beq.n	8014fb0 <tcp_output+0x1d0>
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014fac:	2b08      	cmp	r3, #8
 8014fae:	d901      	bls.n	8014fb4 <tcp_output+0x1d4>
 8014fb0:	2301      	movs	r3, #1
 8014fb2:	e000      	b.n	8014fb6 <tcp_output+0x1d6>
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d106      	bne.n	8014fc8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	8b5b      	ldrh	r3, [r3, #26]
 8014fbe:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	f000 80e4 	beq.w	8015190 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	7d1b      	ldrb	r3, [r3, #20]
 8014fcc:	2b02      	cmp	r3, #2
 8014fce:	d00d      	beq.n	8014fec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fd2:	68db      	ldr	r3, [r3, #12]
 8014fd4:	899b      	ldrh	r3, [r3, #12]
 8014fd6:	b29c      	uxth	r4, r3
 8014fd8:	2010      	movs	r0, #16
 8014fda:	f7f9 fd57 	bl	800ea8c <lwip_htons>
 8014fde:	4603      	mov	r3, r0
 8014fe0:	461a      	mov	r2, r3
 8014fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fe4:	68db      	ldr	r3, [r3, #12]
 8014fe6:	4322      	orrs	r2, r4
 8014fe8:	b292      	uxth	r2, r2
 8014fea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014fec:	697a      	ldr	r2, [r7, #20]
 8014fee:	6879      	ldr	r1, [r7, #4]
 8014ff0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014ff2:	f000 f909 	bl	8015208 <tcp_output_segment>
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d016      	beq.n	8015030 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	8b5b      	ldrh	r3, [r3, #26]
 8015006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801500a:	b29a      	uxth	r2, r3
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	835a      	strh	r2, [r3, #26]
      return err;
 8015010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015014:	e0d3      	b.n	80151be <tcp_output+0x3de>
 8015016:	bf00      	nop
 8015018:	0801d214 	.word	0x0801d214
 801501c:	0801d758 	.word	0x0801d758
 8015020:	0801d268 	.word	0x0801d268
 8015024:	0801d770 	.word	0x0801d770
 8015028:	24008258 	.word	0x24008258
 801502c:	0801d798 	.word	0x0801d798
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015032:	681a      	ldr	r2, [r3, #0]
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	7d1b      	ldrb	r3, [r3, #20]
 801503c:	2b02      	cmp	r3, #2
 801503e:	d006      	beq.n	801504e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	8b5b      	ldrh	r3, [r3, #26]
 8015044:	f023 0303 	bic.w	r3, r3, #3
 8015048:	b29a      	uxth	r2, r3
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015050:	68db      	ldr	r3, [r3, #12]
 8015052:	685b      	ldr	r3, [r3, #4]
 8015054:	4618      	mov	r0, r3
 8015056:	f7f9 fd2f 	bl	800eab8 <lwip_htonl>
 801505a:	4604      	mov	r4, r0
 801505c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801505e:	891b      	ldrh	r3, [r3, #8]
 8015060:	461d      	mov	r5, r3
 8015062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015064:	68db      	ldr	r3, [r3, #12]
 8015066:	899b      	ldrh	r3, [r3, #12]
 8015068:	b29b      	uxth	r3, r3
 801506a:	4618      	mov	r0, r3
 801506c:	f7f9 fd0e 	bl	800ea8c <lwip_htons>
 8015070:	4603      	mov	r3, r0
 8015072:	b2db      	uxtb	r3, r3
 8015074:	f003 0303 	and.w	r3, r3, #3
 8015078:	2b00      	cmp	r3, #0
 801507a:	d001      	beq.n	8015080 <tcp_output+0x2a0>
 801507c:	2301      	movs	r3, #1
 801507e:	e000      	b.n	8015082 <tcp_output+0x2a2>
 8015080:	2300      	movs	r3, #0
 8015082:	442b      	add	r3, r5
 8015084:	4423      	add	r3, r4
 8015086:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	1ad3      	subs	r3, r2, r3
 8015090:	2b00      	cmp	r3, #0
 8015092:	da02      	bge.n	801509a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	68ba      	ldr	r2, [r7, #8]
 8015098:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801509c:	891b      	ldrh	r3, [r3, #8]
 801509e:	461c      	mov	r4, r3
 80150a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150a2:	68db      	ldr	r3, [r3, #12]
 80150a4:	899b      	ldrh	r3, [r3, #12]
 80150a6:	b29b      	uxth	r3, r3
 80150a8:	4618      	mov	r0, r3
 80150aa:	f7f9 fcef 	bl	800ea8c <lwip_htons>
 80150ae:	4603      	mov	r3, r0
 80150b0:	b2db      	uxtb	r3, r3
 80150b2:	f003 0303 	and.w	r3, r3, #3
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d001      	beq.n	80150be <tcp_output+0x2de>
 80150ba:	2301      	movs	r3, #1
 80150bc:	e000      	b.n	80150c0 <tcp_output+0x2e0>
 80150be:	2300      	movs	r3, #0
 80150c0:	4423      	add	r3, r4
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d049      	beq.n	801515a <tcp_output+0x37a>
      seg->next = NULL;
 80150c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150c8:	2200      	movs	r2, #0
 80150ca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d105      	bne.n	80150e0 <tcp_output+0x300>
        pcb->unacked = seg;
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80150d8:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80150da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150dc:	623b      	str	r3, [r7, #32]
 80150de:	e03f      	b.n	8015160 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80150e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150e2:	68db      	ldr	r3, [r3, #12]
 80150e4:	685b      	ldr	r3, [r3, #4]
 80150e6:	4618      	mov	r0, r3
 80150e8:	f7f9 fce6 	bl	800eab8 <lwip_htonl>
 80150ec:	4604      	mov	r4, r0
 80150ee:	6a3b      	ldr	r3, [r7, #32]
 80150f0:	68db      	ldr	r3, [r3, #12]
 80150f2:	685b      	ldr	r3, [r3, #4]
 80150f4:	4618      	mov	r0, r3
 80150f6:	f7f9 fcdf 	bl	800eab8 <lwip_htonl>
 80150fa:	4603      	mov	r3, r0
 80150fc:	1ae3      	subs	r3, r4, r3
 80150fe:	2b00      	cmp	r3, #0
 8015100:	da24      	bge.n	801514c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	3370      	adds	r3, #112	@ 0x70
 8015106:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015108:	e002      	b.n	8015110 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801510a:	69fb      	ldr	r3, [r7, #28]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015110:	69fb      	ldr	r3, [r7, #28]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d011      	beq.n	801513c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015118:	69fb      	ldr	r3, [r7, #28]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	68db      	ldr	r3, [r3, #12]
 801511e:	685b      	ldr	r3, [r3, #4]
 8015120:	4618      	mov	r0, r3
 8015122:	f7f9 fcc9 	bl	800eab8 <lwip_htonl>
 8015126:	4604      	mov	r4, r0
 8015128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801512a:	68db      	ldr	r3, [r3, #12]
 801512c:	685b      	ldr	r3, [r3, #4]
 801512e:	4618      	mov	r0, r3
 8015130:	f7f9 fcc2 	bl	800eab8 <lwip_htonl>
 8015134:	4603      	mov	r3, r0
 8015136:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015138:	2b00      	cmp	r3, #0
 801513a:	dbe6      	blt.n	801510a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801513c:	69fb      	ldr	r3, [r7, #28]
 801513e:	681a      	ldr	r2, [r3, #0]
 8015140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015142:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015144:	69fb      	ldr	r3, [r7, #28]
 8015146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015148:	601a      	str	r2, [r3, #0]
 801514a:	e009      	b.n	8015160 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801514c:	6a3b      	ldr	r3, [r7, #32]
 801514e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015150:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015152:	6a3b      	ldr	r3, [r7, #32]
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	623b      	str	r3, [r7, #32]
 8015158:	e002      	b.n	8015160 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801515a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801515c:	f7fc fc45 	bl	80119ea <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015164:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8015166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015168:	2b00      	cmp	r3, #0
 801516a:	d012      	beq.n	8015192 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801516c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801516e:	68db      	ldr	r3, [r3, #12]
 8015170:	685b      	ldr	r3, [r3, #4]
 8015172:	4618      	mov	r0, r3
 8015174:	f7f9 fca0 	bl	800eab8 <lwip_htonl>
 8015178:	4602      	mov	r2, r0
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801517e:	1ad3      	subs	r3, r2, r3
 8015180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015182:	8912      	ldrh	r2, [r2, #8]
 8015184:	4413      	add	r3, r2
  while (seg != NULL &&
 8015186:	69ba      	ldr	r2, [r7, #24]
 8015188:	429a      	cmp	r2, r3
 801518a:	f4bf aed9 	bcs.w	8014f40 <tcp_output+0x160>
 801518e:	e000      	b.n	8015192 <tcp_output+0x3b2>
      break;
 8015190:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015196:	2b00      	cmp	r3, #0
 8015198:	d108      	bne.n	80151ac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	2200      	movs	r2, #0
 801519e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80151a2:	e004      	b.n	80151ae <tcp_output+0x3ce>
    goto output_done;
 80151a4:	bf00      	nop
 80151a6:	e002      	b.n	80151ae <tcp_output+0x3ce>
    goto output_done;
 80151a8:	bf00      	nop
 80151aa:	e000      	b.n	80151ae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80151ac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	8b5b      	ldrh	r3, [r3, #26]
 80151b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80151b6:	b29a      	uxth	r2, r3
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80151bc:	2300      	movs	r3, #0
}
 80151be:	4618      	mov	r0, r3
 80151c0:	3728      	adds	r7, #40	@ 0x28
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bdb0      	pop	{r4, r5, r7, pc}
 80151c6:	bf00      	nop

080151c8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b082      	sub	sp, #8
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d106      	bne.n	80151e4 <tcp_output_segment_busy+0x1c>
 80151d6:	4b09      	ldr	r3, [pc, #36]	@ (80151fc <tcp_output_segment_busy+0x34>)
 80151d8:	f240 529a 	movw	r2, #1434	@ 0x59a
 80151dc:	4908      	ldr	r1, [pc, #32]	@ (8015200 <tcp_output_segment_busy+0x38>)
 80151de:	4809      	ldr	r0, [pc, #36]	@ (8015204 <tcp_output_segment_busy+0x3c>)
 80151e0:	f004 f9fc 	bl	80195dc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	685b      	ldr	r3, [r3, #4]
 80151e8:	7b9b      	ldrb	r3, [r3, #14]
 80151ea:	2b01      	cmp	r3, #1
 80151ec:	d001      	beq.n	80151f2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80151ee:	2301      	movs	r3, #1
 80151f0:	e000      	b.n	80151f4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80151f2:	2300      	movs	r3, #0
}
 80151f4:	4618      	mov	r0, r3
 80151f6:	3708      	adds	r7, #8
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bd80      	pop	{r7, pc}
 80151fc:	0801d214 	.word	0x0801d214
 8015200:	0801d7b0 	.word	0x0801d7b0
 8015204:	0801d268 	.word	0x0801d268

08015208 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015208:	b5b0      	push	{r4, r5, r7, lr}
 801520a:	b08c      	sub	sp, #48	@ 0x30
 801520c:	af04      	add	r7, sp, #16
 801520e:	60f8      	str	r0, [r7, #12]
 8015210:	60b9      	str	r1, [r7, #8]
 8015212:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d106      	bne.n	8015228 <tcp_output_segment+0x20>
 801521a:	4b64      	ldr	r3, [pc, #400]	@ (80153ac <tcp_output_segment+0x1a4>)
 801521c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8015220:	4963      	ldr	r1, [pc, #396]	@ (80153b0 <tcp_output_segment+0x1a8>)
 8015222:	4864      	ldr	r0, [pc, #400]	@ (80153b4 <tcp_output_segment+0x1ac>)
 8015224:	f004 f9da 	bl	80195dc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015228:	68bb      	ldr	r3, [r7, #8]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d106      	bne.n	801523c <tcp_output_segment+0x34>
 801522e:	4b5f      	ldr	r3, [pc, #380]	@ (80153ac <tcp_output_segment+0x1a4>)
 8015230:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8015234:	4960      	ldr	r1, [pc, #384]	@ (80153b8 <tcp_output_segment+0x1b0>)
 8015236:	485f      	ldr	r0, [pc, #380]	@ (80153b4 <tcp_output_segment+0x1ac>)
 8015238:	f004 f9d0 	bl	80195dc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d106      	bne.n	8015250 <tcp_output_segment+0x48>
 8015242:	4b5a      	ldr	r3, [pc, #360]	@ (80153ac <tcp_output_segment+0x1a4>)
 8015244:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8015248:	495c      	ldr	r1, [pc, #368]	@ (80153bc <tcp_output_segment+0x1b4>)
 801524a:	485a      	ldr	r0, [pc, #360]	@ (80153b4 <tcp_output_segment+0x1ac>)
 801524c:	f004 f9c6 	bl	80195dc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015250:	68f8      	ldr	r0, [r7, #12]
 8015252:	f7ff ffb9 	bl	80151c8 <tcp_output_segment_busy>
 8015256:	4603      	mov	r3, r0
 8015258:	2b00      	cmp	r3, #0
 801525a:	d001      	beq.n	8015260 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801525c:	2300      	movs	r3, #0
 801525e:	e0a1      	b.n	80153a4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015260:	68bb      	ldr	r3, [r7, #8]
 8015262:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	68dc      	ldr	r4, [r3, #12]
 8015268:	4610      	mov	r0, r2
 801526a:	f7f9 fc25 	bl	800eab8 <lwip_htonl>
 801526e:	4603      	mov	r3, r0
 8015270:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015272:	68bb      	ldr	r3, [r7, #8]
 8015274:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	68dc      	ldr	r4, [r3, #12]
 801527a:	4610      	mov	r0, r2
 801527c:	f7f9 fc06 	bl	800ea8c <lwip_htons>
 8015280:	4603      	mov	r3, r0
 8015282:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015288:	68ba      	ldr	r2, [r7, #8]
 801528a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801528c:	441a      	add	r2, r3
 801528e:	68bb      	ldr	r3, [r7, #8]
 8015290:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	68db      	ldr	r3, [r3, #12]
 8015296:	3314      	adds	r3, #20
 8015298:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	7a9b      	ldrb	r3, [r3, #10]
 801529e:	f003 0301 	and.w	r3, r3, #1
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d015      	beq.n	80152d2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80152a6:	68bb      	ldr	r3, [r7, #8]
 80152a8:	3304      	adds	r3, #4
 80152aa:	461a      	mov	r2, r3
 80152ac:	6879      	ldr	r1, [r7, #4]
 80152ae:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80152b2:	f7fc fe91 	bl	8011fd8 <tcp_eff_send_mss_netif>
 80152b6:	4603      	mov	r3, r0
 80152b8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80152ba:	8b7b      	ldrh	r3, [r7, #26]
 80152bc:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80152c0:	4618      	mov	r0, r3
 80152c2:	f7f9 fbf9 	bl	800eab8 <lwip_htonl>
 80152c6:	4602      	mov	r2, r0
 80152c8:	69fb      	ldr	r3, [r7, #28]
 80152ca:	601a      	str	r2, [r3, #0]
    opts += 1;
 80152cc:	69fb      	ldr	r3, [r7, #28]
 80152ce:	3304      	adds	r3, #4
 80152d0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80152d2:	68bb      	ldr	r3, [r7, #8]
 80152d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80152d8:	2b00      	cmp	r3, #0
 80152da:	da02      	bge.n	80152e2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80152dc:	68bb      	ldr	r3, [r7, #8]
 80152de:	2200      	movs	r2, #0
 80152e0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80152e2:	68bb      	ldr	r3, [r7, #8]
 80152e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d10c      	bne.n	8015304 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80152ea:	4b35      	ldr	r3, [pc, #212]	@ (80153c0 <tcp_output_segment+0x1b8>)
 80152ec:	681a      	ldr	r2, [r3, #0]
 80152ee:	68bb      	ldr	r3, [r7, #8]
 80152f0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	68db      	ldr	r3, [r3, #12]
 80152f6:	685b      	ldr	r3, [r3, #4]
 80152f8:	4618      	mov	r0, r3
 80152fa:	f7f9 fbdd 	bl	800eab8 <lwip_htonl>
 80152fe:	4602      	mov	r2, r0
 8015300:	68bb      	ldr	r3, [r7, #8]
 8015302:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	68da      	ldr	r2, [r3, #12]
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	685b      	ldr	r3, [r3, #4]
 801530c:	685b      	ldr	r3, [r3, #4]
 801530e:	1ad3      	subs	r3, r2, r3
 8015310:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	685b      	ldr	r3, [r3, #4]
 8015316:	8959      	ldrh	r1, [r3, #10]
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	685b      	ldr	r3, [r3, #4]
 801531c:	8b3a      	ldrh	r2, [r7, #24]
 801531e:	1a8a      	subs	r2, r1, r2
 8015320:	b292      	uxth	r2, r2
 8015322:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	685b      	ldr	r3, [r3, #4]
 8015328:	8919      	ldrh	r1, [r3, #8]
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	685b      	ldr	r3, [r3, #4]
 801532e:	8b3a      	ldrh	r2, [r7, #24]
 8015330:	1a8a      	subs	r2, r1, r2
 8015332:	b292      	uxth	r2, r2
 8015334:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	685b      	ldr	r3, [r3, #4]
 801533a:	68fa      	ldr	r2, [r7, #12]
 801533c:	68d2      	ldr	r2, [r2, #12]
 801533e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	68db      	ldr	r3, [r3, #12]
 8015344:	2200      	movs	r2, #0
 8015346:	741a      	strb	r2, [r3, #16]
 8015348:	2200      	movs	r2, #0
 801534a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	68da      	ldr	r2, [r3, #12]
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	7a9b      	ldrb	r3, [r3, #10]
 8015354:	f003 0301 	and.w	r3, r3, #1
 8015358:	2b00      	cmp	r3, #0
 801535a:	d001      	beq.n	8015360 <tcp_output_segment+0x158>
 801535c:	2318      	movs	r3, #24
 801535e:	e000      	b.n	8015362 <tcp_output_segment+0x15a>
 8015360:	2314      	movs	r3, #20
 8015362:	4413      	add	r3, r2
 8015364:	69fa      	ldr	r2, [r7, #28]
 8015366:	429a      	cmp	r2, r3
 8015368:	d006      	beq.n	8015378 <tcp_output_segment+0x170>
 801536a:	4b10      	ldr	r3, [pc, #64]	@ (80153ac <tcp_output_segment+0x1a4>)
 801536c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8015370:	4914      	ldr	r1, [pc, #80]	@ (80153c4 <tcp_output_segment+0x1bc>)
 8015372:	4810      	ldr	r0, [pc, #64]	@ (80153b4 <tcp_output_segment+0x1ac>)
 8015374:	f004 f932 	bl	80195dc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	6858      	ldr	r0, [r3, #4]
 801537c:	68b9      	ldr	r1, [r7, #8]
 801537e:	68bb      	ldr	r3, [r7, #8]
 8015380:	1d1c      	adds	r4, r3, #4
 8015382:	68bb      	ldr	r3, [r7, #8]
 8015384:	7add      	ldrb	r5, [r3, #11]
 8015386:	68bb      	ldr	r3, [r7, #8]
 8015388:	7a9b      	ldrb	r3, [r3, #10]
 801538a:	687a      	ldr	r2, [r7, #4]
 801538c:	9202      	str	r2, [sp, #8]
 801538e:	2206      	movs	r2, #6
 8015390:	9201      	str	r2, [sp, #4]
 8015392:	9300      	str	r3, [sp, #0]
 8015394:	462b      	mov	r3, r5
 8015396:	4622      	mov	r2, r4
 8015398:	f002 fd96 	bl	8017ec8 <ip4_output_if>
 801539c:	4603      	mov	r3, r0
 801539e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80153a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80153a4:	4618      	mov	r0, r3
 80153a6:	3720      	adds	r7, #32
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bdb0      	pop	{r4, r5, r7, pc}
 80153ac:	0801d214 	.word	0x0801d214
 80153b0:	0801d7d8 	.word	0x0801d7d8
 80153b4:	0801d268 	.word	0x0801d268
 80153b8:	0801d7f8 	.word	0x0801d7f8
 80153bc:	0801d818 	.word	0x0801d818
 80153c0:	2400820c 	.word	0x2400820c
 80153c4:	0801d83c 	.word	0x0801d83c

080153c8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80153c8:	b5b0      	push	{r4, r5, r7, lr}
 80153ca:	b084      	sub	sp, #16
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d106      	bne.n	80153e4 <tcp_rexmit_rto_prepare+0x1c>
 80153d6:	4b31      	ldr	r3, [pc, #196]	@ (801549c <tcp_rexmit_rto_prepare+0xd4>)
 80153d8:	f240 6263 	movw	r2, #1635	@ 0x663
 80153dc:	4930      	ldr	r1, [pc, #192]	@ (80154a0 <tcp_rexmit_rto_prepare+0xd8>)
 80153de:	4831      	ldr	r0, [pc, #196]	@ (80154a4 <tcp_rexmit_rto_prepare+0xdc>)
 80153e0:	f004 f8fc 	bl	80195dc <iprintf>

  if (pcb->unacked == NULL) {
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d102      	bne.n	80153f2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80153ec:	f06f 0305 	mvn.w	r3, #5
 80153f0:	e050      	b.n	8015494 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80153f6:	60fb      	str	r3, [r7, #12]
 80153f8:	e00b      	b.n	8015412 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80153fa:	68f8      	ldr	r0, [r7, #12]
 80153fc:	f7ff fee4 	bl	80151c8 <tcp_output_segment_busy>
 8015400:	4603      	mov	r3, r0
 8015402:	2b00      	cmp	r3, #0
 8015404:	d002      	beq.n	801540c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015406:	f06f 0305 	mvn.w	r3, #5
 801540a:	e043      	b.n	8015494 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	60fb      	str	r3, [r7, #12]
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d1ef      	bne.n	80153fa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801541a:	68f8      	ldr	r0, [r7, #12]
 801541c:	f7ff fed4 	bl	80151c8 <tcp_output_segment_busy>
 8015420:	4603      	mov	r3, r0
 8015422:	2b00      	cmp	r3, #0
 8015424:	d002      	beq.n	801542c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015426:	f06f 0305 	mvn.w	r3, #5
 801542a:	e033      	b.n	8015494 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	2200      	movs	r2, #0
 8015440:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	8b5b      	ldrh	r3, [r3, #26]
 8015446:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801544a:	b29a      	uxth	r2, r3
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	68db      	ldr	r3, [r3, #12]
 8015454:	685b      	ldr	r3, [r3, #4]
 8015456:	4618      	mov	r0, r3
 8015458:	f7f9 fb2e 	bl	800eab8 <lwip_htonl>
 801545c:	4604      	mov	r4, r0
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	891b      	ldrh	r3, [r3, #8]
 8015462:	461d      	mov	r5, r3
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	68db      	ldr	r3, [r3, #12]
 8015468:	899b      	ldrh	r3, [r3, #12]
 801546a:	b29b      	uxth	r3, r3
 801546c:	4618      	mov	r0, r3
 801546e:	f7f9 fb0d 	bl	800ea8c <lwip_htons>
 8015472:	4603      	mov	r3, r0
 8015474:	b2db      	uxtb	r3, r3
 8015476:	f003 0303 	and.w	r3, r3, #3
 801547a:	2b00      	cmp	r3, #0
 801547c:	d001      	beq.n	8015482 <tcp_rexmit_rto_prepare+0xba>
 801547e:	2301      	movs	r3, #1
 8015480:	e000      	b.n	8015484 <tcp_rexmit_rto_prepare+0xbc>
 8015482:	2300      	movs	r3, #0
 8015484:	442b      	add	r3, r5
 8015486:	18e2      	adds	r2, r4, r3
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	2200      	movs	r2, #0
 8015490:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8015492:	2300      	movs	r3, #0
}
 8015494:	4618      	mov	r0, r3
 8015496:	3710      	adds	r7, #16
 8015498:	46bd      	mov	sp, r7
 801549a:	bdb0      	pop	{r4, r5, r7, pc}
 801549c:	0801d214 	.word	0x0801d214
 80154a0:	0801d850 	.word	0x0801d850
 80154a4:	0801d268 	.word	0x0801d268

080154a8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b082      	sub	sp, #8
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d106      	bne.n	80154c4 <tcp_rexmit_rto_commit+0x1c>
 80154b6:	4b0d      	ldr	r3, [pc, #52]	@ (80154ec <tcp_rexmit_rto_commit+0x44>)
 80154b8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80154bc:	490c      	ldr	r1, [pc, #48]	@ (80154f0 <tcp_rexmit_rto_commit+0x48>)
 80154be:	480d      	ldr	r0, [pc, #52]	@ (80154f4 <tcp_rexmit_rto_commit+0x4c>)
 80154c0:	f004 f88c 	bl	80195dc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80154ca:	2bff      	cmp	r3, #255	@ 0xff
 80154cc:	d007      	beq.n	80154de <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80154d4:	3301      	adds	r3, #1
 80154d6:	b2da      	uxtb	r2, r3
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80154de:	6878      	ldr	r0, [r7, #4]
 80154e0:	f7ff fc7e 	bl	8014de0 <tcp_output>
}
 80154e4:	bf00      	nop
 80154e6:	3708      	adds	r7, #8
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}
 80154ec:	0801d214 	.word	0x0801d214
 80154f0:	0801d874 	.word	0x0801d874
 80154f4:	0801d268 	.word	0x0801d268

080154f8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b082      	sub	sp, #8
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d106      	bne.n	8015514 <tcp_rexmit_rto+0x1c>
 8015506:	4b0a      	ldr	r3, [pc, #40]	@ (8015530 <tcp_rexmit_rto+0x38>)
 8015508:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801550c:	4909      	ldr	r1, [pc, #36]	@ (8015534 <tcp_rexmit_rto+0x3c>)
 801550e:	480a      	ldr	r0, [pc, #40]	@ (8015538 <tcp_rexmit_rto+0x40>)
 8015510:	f004 f864 	bl	80195dc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015514:	6878      	ldr	r0, [r7, #4]
 8015516:	f7ff ff57 	bl	80153c8 <tcp_rexmit_rto_prepare>
 801551a:	4603      	mov	r3, r0
 801551c:	2b00      	cmp	r3, #0
 801551e:	d102      	bne.n	8015526 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015520:	6878      	ldr	r0, [r7, #4]
 8015522:	f7ff ffc1 	bl	80154a8 <tcp_rexmit_rto_commit>
  }
}
 8015526:	bf00      	nop
 8015528:	3708      	adds	r7, #8
 801552a:	46bd      	mov	sp, r7
 801552c:	bd80      	pop	{r7, pc}
 801552e:	bf00      	nop
 8015530:	0801d214 	.word	0x0801d214
 8015534:	0801d898 	.word	0x0801d898
 8015538:	0801d268 	.word	0x0801d268

0801553c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801553c:	b590      	push	{r4, r7, lr}
 801553e:	b085      	sub	sp, #20
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d106      	bne.n	8015558 <tcp_rexmit+0x1c>
 801554a:	4b2f      	ldr	r3, [pc, #188]	@ (8015608 <tcp_rexmit+0xcc>)
 801554c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8015550:	492e      	ldr	r1, [pc, #184]	@ (801560c <tcp_rexmit+0xd0>)
 8015552:	482f      	ldr	r0, [pc, #188]	@ (8015610 <tcp_rexmit+0xd4>)
 8015554:	f004 f842 	bl	80195dc <iprintf>

  if (pcb->unacked == NULL) {
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801555c:	2b00      	cmp	r3, #0
 801555e:	d102      	bne.n	8015566 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015560:	f06f 0305 	mvn.w	r3, #5
 8015564:	e04c      	b.n	8015600 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801556a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801556c:	68b8      	ldr	r0, [r7, #8]
 801556e:	f7ff fe2b 	bl	80151c8 <tcp_output_segment_busy>
 8015572:	4603      	mov	r3, r0
 8015574:	2b00      	cmp	r3, #0
 8015576:	d002      	beq.n	801557e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015578:	f06f 0305 	mvn.w	r3, #5
 801557c:	e040      	b.n	8015600 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801557e:	68bb      	ldr	r3, [r7, #8]
 8015580:	681a      	ldr	r2, [r3, #0]
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	336c      	adds	r3, #108	@ 0x6c
 801558a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801558c:	e002      	b.n	8015594 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	2b00      	cmp	r3, #0
 801559a:	d011      	beq.n	80155c0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	68db      	ldr	r3, [r3, #12]
 80155a2:	685b      	ldr	r3, [r3, #4]
 80155a4:	4618      	mov	r0, r3
 80155a6:	f7f9 fa87 	bl	800eab8 <lwip_htonl>
 80155aa:	4604      	mov	r4, r0
 80155ac:	68bb      	ldr	r3, [r7, #8]
 80155ae:	68db      	ldr	r3, [r3, #12]
 80155b0:	685b      	ldr	r3, [r3, #4]
 80155b2:	4618      	mov	r0, r3
 80155b4:	f7f9 fa80 	bl	800eab8 <lwip_htonl>
 80155b8:	4603      	mov	r3, r0
 80155ba:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80155bc:	2b00      	cmp	r3, #0
 80155be:	dbe6      	blt.n	801558e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	681a      	ldr	r2, [r3, #0]
 80155c4:	68bb      	ldr	r3, [r7, #8]
 80155c6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	68ba      	ldr	r2, [r7, #8]
 80155cc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80155ce:	68bb      	ldr	r3, [r7, #8]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d103      	bne.n	80155de <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	2200      	movs	r2, #0
 80155da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80155e4:	2bff      	cmp	r3, #255	@ 0xff
 80155e6:	d007      	beq.n	80155f8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80155ee:	3301      	adds	r3, #1
 80155f0:	b2da      	uxtb	r2, r3
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	2200      	movs	r2, #0
 80155fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80155fe:	2300      	movs	r3, #0
}
 8015600:	4618      	mov	r0, r3
 8015602:	3714      	adds	r7, #20
 8015604:	46bd      	mov	sp, r7
 8015606:	bd90      	pop	{r4, r7, pc}
 8015608:	0801d214 	.word	0x0801d214
 801560c:	0801d8b4 	.word	0x0801d8b4
 8015610:	0801d268 	.word	0x0801d268

08015614 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015614:	b580      	push	{r7, lr}
 8015616:	b082      	sub	sp, #8
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d106      	bne.n	8015630 <tcp_rexmit_fast+0x1c>
 8015622:	4b2a      	ldr	r3, [pc, #168]	@ (80156cc <tcp_rexmit_fast+0xb8>)
 8015624:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8015628:	4929      	ldr	r1, [pc, #164]	@ (80156d0 <tcp_rexmit_fast+0xbc>)
 801562a:	482a      	ldr	r0, [pc, #168]	@ (80156d4 <tcp_rexmit_fast+0xc0>)
 801562c:	f003 ffd6 	bl	80195dc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015634:	2b00      	cmp	r3, #0
 8015636:	d045      	beq.n	80156c4 <tcp_rexmit_fast+0xb0>
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	8b5b      	ldrh	r3, [r3, #26]
 801563c:	f003 0304 	and.w	r3, r3, #4
 8015640:	2b00      	cmp	r3, #0
 8015642:	d13f      	bne.n	80156c4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015644:	6878      	ldr	r0, [r7, #4]
 8015646:	f7ff ff79 	bl	801553c <tcp_rexmit>
 801564a:	4603      	mov	r3, r0
 801564c:	2b00      	cmp	r3, #0
 801564e:	d139      	bne.n	80156c4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801565c:	4293      	cmp	r3, r2
 801565e:	bf28      	it	cs
 8015660:	4613      	movcs	r3, r2
 8015662:	b29b      	uxth	r3, r3
 8015664:	2b00      	cmp	r3, #0
 8015666:	da00      	bge.n	801566a <tcp_rexmit_fast+0x56>
 8015668:	3301      	adds	r3, #1
 801566a:	105b      	asrs	r3, r3, #1
 801566c:	b29a      	uxth	r2, r3
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801567a:	461a      	mov	r2, r3
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015680:	005b      	lsls	r3, r3, #1
 8015682:	429a      	cmp	r2, r3
 8015684:	d206      	bcs.n	8015694 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801568a:	005b      	lsls	r3, r3, #1
 801568c:	b29a      	uxth	r2, r3
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801569e:	4619      	mov	r1, r3
 80156a0:	0049      	lsls	r1, r1, #1
 80156a2:	440b      	add	r3, r1
 80156a4:	b29b      	uxth	r3, r3
 80156a6:	4413      	add	r3, r2
 80156a8:	b29a      	uxth	r2, r3
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	8b5b      	ldrh	r3, [r3, #26]
 80156b4:	f043 0304 	orr.w	r3, r3, #4
 80156b8:	b29a      	uxth	r2, r3
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	2200      	movs	r2, #0
 80156c2:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80156c4:	bf00      	nop
 80156c6:	3708      	adds	r7, #8
 80156c8:	46bd      	mov	sp, r7
 80156ca:	bd80      	pop	{r7, pc}
 80156cc:	0801d214 	.word	0x0801d214
 80156d0:	0801d8cc 	.word	0x0801d8cc
 80156d4:	0801d268 	.word	0x0801d268

080156d8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b086      	sub	sp, #24
 80156dc:	af00      	add	r7, sp, #0
 80156de:	60f8      	str	r0, [r7, #12]
 80156e0:	607b      	str	r3, [r7, #4]
 80156e2:	460b      	mov	r3, r1
 80156e4:	817b      	strh	r3, [r7, #10]
 80156e6:	4613      	mov	r3, r2
 80156e8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80156ea:	897a      	ldrh	r2, [r7, #10]
 80156ec:	893b      	ldrh	r3, [r7, #8]
 80156ee:	4413      	add	r3, r2
 80156f0:	b29b      	uxth	r3, r3
 80156f2:	3314      	adds	r3, #20
 80156f4:	b29b      	uxth	r3, r3
 80156f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80156fa:	4619      	mov	r1, r3
 80156fc:	2022      	movs	r0, #34	@ 0x22
 80156fe:	f7fa fb9b 	bl	800fe38 <pbuf_alloc>
 8015702:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015704:	697b      	ldr	r3, [r7, #20]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d04d      	beq.n	80157a6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801570a:	897b      	ldrh	r3, [r7, #10]
 801570c:	3313      	adds	r3, #19
 801570e:	697a      	ldr	r2, [r7, #20]
 8015710:	8952      	ldrh	r2, [r2, #10]
 8015712:	4293      	cmp	r3, r2
 8015714:	db06      	blt.n	8015724 <tcp_output_alloc_header_common+0x4c>
 8015716:	4b26      	ldr	r3, [pc, #152]	@ (80157b0 <tcp_output_alloc_header_common+0xd8>)
 8015718:	f240 7223 	movw	r2, #1827	@ 0x723
 801571c:	4925      	ldr	r1, [pc, #148]	@ (80157b4 <tcp_output_alloc_header_common+0xdc>)
 801571e:	4826      	ldr	r0, [pc, #152]	@ (80157b8 <tcp_output_alloc_header_common+0xe0>)
 8015720:	f003 ff5c 	bl	80195dc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015724:	697b      	ldr	r3, [r7, #20]
 8015726:	685b      	ldr	r3, [r3, #4]
 8015728:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801572a:	8c3b      	ldrh	r3, [r7, #32]
 801572c:	4618      	mov	r0, r3
 801572e:	f7f9 f9ad 	bl	800ea8c <lwip_htons>
 8015732:	4603      	mov	r3, r0
 8015734:	461a      	mov	r2, r3
 8015736:	693b      	ldr	r3, [r7, #16]
 8015738:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801573a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801573c:	4618      	mov	r0, r3
 801573e:	f7f9 f9a5 	bl	800ea8c <lwip_htons>
 8015742:	4603      	mov	r3, r0
 8015744:	461a      	mov	r2, r3
 8015746:	693b      	ldr	r3, [r7, #16]
 8015748:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801574a:	693b      	ldr	r3, [r7, #16]
 801574c:	687a      	ldr	r2, [r7, #4]
 801574e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015750:	68f8      	ldr	r0, [r7, #12]
 8015752:	f7f9 f9b1 	bl	800eab8 <lwip_htonl>
 8015756:	4602      	mov	r2, r0
 8015758:	693b      	ldr	r3, [r7, #16]
 801575a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801575c:	897b      	ldrh	r3, [r7, #10]
 801575e:	089b      	lsrs	r3, r3, #2
 8015760:	b29b      	uxth	r3, r3
 8015762:	3305      	adds	r3, #5
 8015764:	b29b      	uxth	r3, r3
 8015766:	031b      	lsls	r3, r3, #12
 8015768:	b29a      	uxth	r2, r3
 801576a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801576e:	b29b      	uxth	r3, r3
 8015770:	4313      	orrs	r3, r2
 8015772:	b29b      	uxth	r3, r3
 8015774:	4618      	mov	r0, r3
 8015776:	f7f9 f989 	bl	800ea8c <lwip_htons>
 801577a:	4603      	mov	r3, r0
 801577c:	461a      	mov	r2, r3
 801577e:	693b      	ldr	r3, [r7, #16]
 8015780:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015782:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015784:	4618      	mov	r0, r3
 8015786:	f7f9 f981 	bl	800ea8c <lwip_htons>
 801578a:	4603      	mov	r3, r0
 801578c:	461a      	mov	r2, r3
 801578e:	693b      	ldr	r3, [r7, #16]
 8015790:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015792:	693b      	ldr	r3, [r7, #16]
 8015794:	2200      	movs	r2, #0
 8015796:	741a      	strb	r2, [r3, #16]
 8015798:	2200      	movs	r2, #0
 801579a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801579c:	693b      	ldr	r3, [r7, #16]
 801579e:	2200      	movs	r2, #0
 80157a0:	749a      	strb	r2, [r3, #18]
 80157a2:	2200      	movs	r2, #0
 80157a4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80157a6:	697b      	ldr	r3, [r7, #20]
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	3718      	adds	r7, #24
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}
 80157b0:	0801d214 	.word	0x0801d214
 80157b4:	0801d8ec 	.word	0x0801d8ec
 80157b8:	0801d268 	.word	0x0801d268

080157bc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80157bc:	b5b0      	push	{r4, r5, r7, lr}
 80157be:	b08a      	sub	sp, #40	@ 0x28
 80157c0:	af04      	add	r7, sp, #16
 80157c2:	60f8      	str	r0, [r7, #12]
 80157c4:	607b      	str	r3, [r7, #4]
 80157c6:	460b      	mov	r3, r1
 80157c8:	817b      	strh	r3, [r7, #10]
 80157ca:	4613      	mov	r3, r2
 80157cc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d106      	bne.n	80157e2 <tcp_output_alloc_header+0x26>
 80157d4:	4b15      	ldr	r3, [pc, #84]	@ (801582c <tcp_output_alloc_header+0x70>)
 80157d6:	f240 7242 	movw	r2, #1858	@ 0x742
 80157da:	4915      	ldr	r1, [pc, #84]	@ (8015830 <tcp_output_alloc_header+0x74>)
 80157dc:	4815      	ldr	r0, [pc, #84]	@ (8015834 <tcp_output_alloc_header+0x78>)
 80157de:	f003 fefd 	bl	80195dc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	8adb      	ldrh	r3, [r3, #22]
 80157ea:	68fa      	ldr	r2, [r7, #12]
 80157ec:	8b12      	ldrh	r2, [r2, #24]
 80157ee:	68f9      	ldr	r1, [r7, #12]
 80157f0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80157f2:	893d      	ldrh	r5, [r7, #8]
 80157f4:	897c      	ldrh	r4, [r7, #10]
 80157f6:	9103      	str	r1, [sp, #12]
 80157f8:	2110      	movs	r1, #16
 80157fa:	9102      	str	r1, [sp, #8]
 80157fc:	9201      	str	r2, [sp, #4]
 80157fe:	9300      	str	r3, [sp, #0]
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	462a      	mov	r2, r5
 8015804:	4621      	mov	r1, r4
 8015806:	f7ff ff67 	bl	80156d8 <tcp_output_alloc_header_common>
 801580a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801580c:	697b      	ldr	r3, [r7, #20]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d006      	beq.n	8015820 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015816:	68fa      	ldr	r2, [r7, #12]
 8015818:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801581a:	441a      	add	r2, r3
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8015820:	697b      	ldr	r3, [r7, #20]
}
 8015822:	4618      	mov	r0, r3
 8015824:	3718      	adds	r7, #24
 8015826:	46bd      	mov	sp, r7
 8015828:	bdb0      	pop	{r4, r5, r7, pc}
 801582a:	bf00      	nop
 801582c:	0801d214 	.word	0x0801d214
 8015830:	0801d91c 	.word	0x0801d91c
 8015834:	0801d268 	.word	0x0801d268

08015838 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b088      	sub	sp, #32
 801583c:	af00      	add	r7, sp, #0
 801583e:	60f8      	str	r0, [r7, #12]
 8015840:	60b9      	str	r1, [r7, #8]
 8015842:	4611      	mov	r1, r2
 8015844:	461a      	mov	r2, r3
 8015846:	460b      	mov	r3, r1
 8015848:	71fb      	strb	r3, [r7, #7]
 801584a:	4613      	mov	r3, r2
 801584c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801584e:	2300      	movs	r3, #0
 8015850:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015852:	68bb      	ldr	r3, [r7, #8]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d106      	bne.n	8015866 <tcp_output_fill_options+0x2e>
 8015858:	4b12      	ldr	r3, [pc, #72]	@ (80158a4 <tcp_output_fill_options+0x6c>)
 801585a:	f240 7256 	movw	r2, #1878	@ 0x756
 801585e:	4912      	ldr	r1, [pc, #72]	@ (80158a8 <tcp_output_fill_options+0x70>)
 8015860:	4812      	ldr	r0, [pc, #72]	@ (80158ac <tcp_output_fill_options+0x74>)
 8015862:	f003 febb 	bl	80195dc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015866:	68bb      	ldr	r3, [r7, #8]
 8015868:	685b      	ldr	r3, [r3, #4]
 801586a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801586c:	69bb      	ldr	r3, [r7, #24]
 801586e:	3314      	adds	r3, #20
 8015870:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015872:	8bfb      	ldrh	r3, [r7, #30]
 8015874:	009b      	lsls	r3, r3, #2
 8015876:	461a      	mov	r2, r3
 8015878:	79fb      	ldrb	r3, [r7, #7]
 801587a:	009b      	lsls	r3, r3, #2
 801587c:	f003 0304 	and.w	r3, r3, #4
 8015880:	4413      	add	r3, r2
 8015882:	3314      	adds	r3, #20
 8015884:	69ba      	ldr	r2, [r7, #24]
 8015886:	4413      	add	r3, r2
 8015888:	697a      	ldr	r2, [r7, #20]
 801588a:	429a      	cmp	r2, r3
 801588c:	d006      	beq.n	801589c <tcp_output_fill_options+0x64>
 801588e:	4b05      	ldr	r3, [pc, #20]	@ (80158a4 <tcp_output_fill_options+0x6c>)
 8015890:	f240 7275 	movw	r2, #1909	@ 0x775
 8015894:	4906      	ldr	r1, [pc, #24]	@ (80158b0 <tcp_output_fill_options+0x78>)
 8015896:	4805      	ldr	r0, [pc, #20]	@ (80158ac <tcp_output_fill_options+0x74>)
 8015898:	f003 fea0 	bl	80195dc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801589c:	bf00      	nop
 801589e:	3720      	adds	r7, #32
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd80      	pop	{r7, pc}
 80158a4:	0801d214 	.word	0x0801d214
 80158a8:	0801d944 	.word	0x0801d944
 80158ac:	0801d268 	.word	0x0801d268
 80158b0:	0801d83c 	.word	0x0801d83c

080158b4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b08a      	sub	sp, #40	@ 0x28
 80158b8:	af04      	add	r7, sp, #16
 80158ba:	60f8      	str	r0, [r7, #12]
 80158bc:	60b9      	str	r1, [r7, #8]
 80158be:	607a      	str	r2, [r7, #4]
 80158c0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80158c2:	68bb      	ldr	r3, [r7, #8]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d106      	bne.n	80158d6 <tcp_output_control_segment+0x22>
 80158c8:	4b1c      	ldr	r3, [pc, #112]	@ (801593c <tcp_output_control_segment+0x88>)
 80158ca:	f240 7287 	movw	r2, #1927	@ 0x787
 80158ce:	491c      	ldr	r1, [pc, #112]	@ (8015940 <tcp_output_control_segment+0x8c>)
 80158d0:	481c      	ldr	r0, [pc, #112]	@ (8015944 <tcp_output_control_segment+0x90>)
 80158d2:	f003 fe83 	bl	80195dc <iprintf>

  netif = tcp_route(pcb, src, dst);
 80158d6:	683a      	ldr	r2, [r7, #0]
 80158d8:	6879      	ldr	r1, [r7, #4]
 80158da:	68f8      	ldr	r0, [r7, #12]
 80158dc:	f7fe ff42 	bl	8014764 <tcp_route>
 80158e0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80158e2:	693b      	ldr	r3, [r7, #16]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d102      	bne.n	80158ee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80158e8:	23fc      	movs	r3, #252	@ 0xfc
 80158ea:	75fb      	strb	r3, [r7, #23]
 80158ec:	e01c      	b.n	8015928 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d006      	beq.n	8015902 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	7adb      	ldrb	r3, [r3, #11]
 80158f8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	7a9b      	ldrb	r3, [r3, #10]
 80158fe:	757b      	strb	r3, [r7, #21]
 8015900:	e003      	b.n	801590a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015902:	23ff      	movs	r3, #255	@ 0xff
 8015904:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015906:	2300      	movs	r3, #0
 8015908:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801590a:	7dba      	ldrb	r2, [r7, #22]
 801590c:	693b      	ldr	r3, [r7, #16]
 801590e:	9302      	str	r3, [sp, #8]
 8015910:	2306      	movs	r3, #6
 8015912:	9301      	str	r3, [sp, #4]
 8015914:	7d7b      	ldrb	r3, [r7, #21]
 8015916:	9300      	str	r3, [sp, #0]
 8015918:	4613      	mov	r3, r2
 801591a:	683a      	ldr	r2, [r7, #0]
 801591c:	6879      	ldr	r1, [r7, #4]
 801591e:	68b8      	ldr	r0, [r7, #8]
 8015920:	f002 fad2 	bl	8017ec8 <ip4_output_if>
 8015924:	4603      	mov	r3, r0
 8015926:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015928:	68b8      	ldr	r0, [r7, #8]
 801592a:	f7fa fd69 	bl	8010400 <pbuf_free>
  return err;
 801592e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015932:	4618      	mov	r0, r3
 8015934:	3718      	adds	r7, #24
 8015936:	46bd      	mov	sp, r7
 8015938:	bd80      	pop	{r7, pc}
 801593a:	bf00      	nop
 801593c:	0801d214 	.word	0x0801d214
 8015940:	0801d96c 	.word	0x0801d96c
 8015944:	0801d268 	.word	0x0801d268

08015948 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015948:	b590      	push	{r4, r7, lr}
 801594a:	b08b      	sub	sp, #44	@ 0x2c
 801594c:	af04      	add	r7, sp, #16
 801594e:	60f8      	str	r0, [r7, #12]
 8015950:	60b9      	str	r1, [r7, #8]
 8015952:	607a      	str	r2, [r7, #4]
 8015954:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015956:	683b      	ldr	r3, [r7, #0]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d106      	bne.n	801596a <tcp_rst+0x22>
 801595c:	4b1f      	ldr	r3, [pc, #124]	@ (80159dc <tcp_rst+0x94>)
 801595e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8015962:	491f      	ldr	r1, [pc, #124]	@ (80159e0 <tcp_rst+0x98>)
 8015964:	481f      	ldr	r0, [pc, #124]	@ (80159e4 <tcp_rst+0x9c>)
 8015966:	f003 fe39 	bl	80195dc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801596a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801596c:	2b00      	cmp	r3, #0
 801596e:	d106      	bne.n	801597e <tcp_rst+0x36>
 8015970:	4b1a      	ldr	r3, [pc, #104]	@ (80159dc <tcp_rst+0x94>)
 8015972:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8015976:	491c      	ldr	r1, [pc, #112]	@ (80159e8 <tcp_rst+0xa0>)
 8015978:	481a      	ldr	r0, [pc, #104]	@ (80159e4 <tcp_rst+0x9c>)
 801597a:	f003 fe2f 	bl	80195dc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801597e:	2300      	movs	r3, #0
 8015980:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015982:	f246 0308 	movw	r3, #24584	@ 0x6008
 8015986:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015988:	7dfb      	ldrb	r3, [r7, #23]
 801598a:	b29c      	uxth	r4, r3
 801598c:	68b8      	ldr	r0, [r7, #8]
 801598e:	f7f9 f893 	bl	800eab8 <lwip_htonl>
 8015992:	4602      	mov	r2, r0
 8015994:	8abb      	ldrh	r3, [r7, #20]
 8015996:	9303      	str	r3, [sp, #12]
 8015998:	2314      	movs	r3, #20
 801599a:	9302      	str	r3, [sp, #8]
 801599c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801599e:	9301      	str	r3, [sp, #4]
 80159a0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80159a2:	9300      	str	r3, [sp, #0]
 80159a4:	4613      	mov	r3, r2
 80159a6:	2200      	movs	r2, #0
 80159a8:	4621      	mov	r1, r4
 80159aa:	6878      	ldr	r0, [r7, #4]
 80159ac:	f7ff fe94 	bl	80156d8 <tcp_output_alloc_header_common>
 80159b0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80159b2:	693b      	ldr	r3, [r7, #16]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d00c      	beq.n	80159d2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80159b8:	7dfb      	ldrb	r3, [r7, #23]
 80159ba:	2200      	movs	r2, #0
 80159bc:	6939      	ldr	r1, [r7, #16]
 80159be:	68f8      	ldr	r0, [r7, #12]
 80159c0:	f7ff ff3a 	bl	8015838 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80159c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159c6:	683a      	ldr	r2, [r7, #0]
 80159c8:	6939      	ldr	r1, [r7, #16]
 80159ca:	68f8      	ldr	r0, [r7, #12]
 80159cc:	f7ff ff72 	bl	80158b4 <tcp_output_control_segment>
 80159d0:	e000      	b.n	80159d4 <tcp_rst+0x8c>
    return;
 80159d2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80159d4:	371c      	adds	r7, #28
 80159d6:	46bd      	mov	sp, r7
 80159d8:	bd90      	pop	{r4, r7, pc}
 80159da:	bf00      	nop
 80159dc:	0801d214 	.word	0x0801d214
 80159e0:	0801d998 	.word	0x0801d998
 80159e4:	0801d268 	.word	0x0801d268
 80159e8:	0801d9b4 	.word	0x0801d9b4

080159ec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80159ec:	b590      	push	{r4, r7, lr}
 80159ee:	b087      	sub	sp, #28
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80159f4:	2300      	movs	r3, #0
 80159f6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80159f8:	2300      	movs	r3, #0
 80159fa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d106      	bne.n	8015a10 <tcp_send_empty_ack+0x24>
 8015a02:	4b28      	ldr	r3, [pc, #160]	@ (8015aa4 <tcp_send_empty_ack+0xb8>)
 8015a04:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8015a08:	4927      	ldr	r1, [pc, #156]	@ (8015aa8 <tcp_send_empty_ack+0xbc>)
 8015a0a:	4828      	ldr	r0, [pc, #160]	@ (8015aac <tcp_send_empty_ack+0xc0>)
 8015a0c:	f003 fde6 	bl	80195dc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015a10:	7dfb      	ldrb	r3, [r7, #23]
 8015a12:	009b      	lsls	r3, r3, #2
 8015a14:	b2db      	uxtb	r3, r3
 8015a16:	f003 0304 	and.w	r3, r3, #4
 8015a1a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015a1c:	7d7b      	ldrb	r3, [r7, #21]
 8015a1e:	b29c      	uxth	r4, r3
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a24:	4618      	mov	r0, r3
 8015a26:	f7f9 f847 	bl	800eab8 <lwip_htonl>
 8015a2a:	4603      	mov	r3, r0
 8015a2c:	2200      	movs	r2, #0
 8015a2e:	4621      	mov	r1, r4
 8015a30:	6878      	ldr	r0, [r7, #4]
 8015a32:	f7ff fec3 	bl	80157bc <tcp_output_alloc_header>
 8015a36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015a38:	693b      	ldr	r3, [r7, #16]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d109      	bne.n	8015a52 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	8b5b      	ldrh	r3, [r3, #26]
 8015a42:	f043 0303 	orr.w	r3, r3, #3
 8015a46:	b29a      	uxth	r2, r3
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015a4c:	f06f 0301 	mvn.w	r3, #1
 8015a50:	e023      	b.n	8015a9a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015a52:	7dbb      	ldrb	r3, [r7, #22]
 8015a54:	7dfa      	ldrb	r2, [r7, #23]
 8015a56:	6939      	ldr	r1, [r7, #16]
 8015a58:	6878      	ldr	r0, [r7, #4]
 8015a5a:	f7ff feed 	bl	8015838 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015a5e:	687a      	ldr	r2, [r7, #4]
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	3304      	adds	r3, #4
 8015a64:	6939      	ldr	r1, [r7, #16]
 8015a66:	6878      	ldr	r0, [r7, #4]
 8015a68:	f7ff ff24 	bl	80158b4 <tcp_output_control_segment>
 8015a6c:	4603      	mov	r3, r0
 8015a6e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d007      	beq.n	8015a88 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	8b5b      	ldrh	r3, [r3, #26]
 8015a7c:	f043 0303 	orr.w	r3, r3, #3
 8015a80:	b29a      	uxth	r2, r3
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	835a      	strh	r2, [r3, #26]
 8015a86:	e006      	b.n	8015a96 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	8b5b      	ldrh	r3, [r3, #26]
 8015a8c:	f023 0303 	bic.w	r3, r3, #3
 8015a90:	b29a      	uxth	r2, r3
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	371c      	adds	r7, #28
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd90      	pop	{r4, r7, pc}
 8015aa2:	bf00      	nop
 8015aa4:	0801d214 	.word	0x0801d214
 8015aa8:	0801d9d0 	.word	0x0801d9d0
 8015aac:	0801d268 	.word	0x0801d268

08015ab0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015ab0:	b590      	push	{r4, r7, lr}
 8015ab2:	b087      	sub	sp, #28
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015ab8:	2300      	movs	r3, #0
 8015aba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d106      	bne.n	8015ad0 <tcp_keepalive+0x20>
 8015ac2:	4b18      	ldr	r3, [pc, #96]	@ (8015b24 <tcp_keepalive+0x74>)
 8015ac4:	f640 0224 	movw	r2, #2084	@ 0x824
 8015ac8:	4917      	ldr	r1, [pc, #92]	@ (8015b28 <tcp_keepalive+0x78>)
 8015aca:	4818      	ldr	r0, [pc, #96]	@ (8015b2c <tcp_keepalive+0x7c>)
 8015acc:	f003 fd86 	bl	80195dc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015ad0:	7dfb      	ldrb	r3, [r7, #23]
 8015ad2:	b29c      	uxth	r4, r3
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015ad8:	3b01      	subs	r3, #1
 8015ada:	4618      	mov	r0, r3
 8015adc:	f7f8 ffec 	bl	800eab8 <lwip_htonl>
 8015ae0:	4603      	mov	r3, r0
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	4621      	mov	r1, r4
 8015ae6:	6878      	ldr	r0, [r7, #4]
 8015ae8:	f7ff fe68 	bl	80157bc <tcp_output_alloc_header>
 8015aec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015aee:	693b      	ldr	r3, [r7, #16]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d102      	bne.n	8015afa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015af4:	f04f 33ff 	mov.w	r3, #4294967295
 8015af8:	e010      	b.n	8015b1c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015afa:	7dfb      	ldrb	r3, [r7, #23]
 8015afc:	2200      	movs	r2, #0
 8015afe:	6939      	ldr	r1, [r7, #16]
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f7ff fe99 	bl	8015838 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015b06:	687a      	ldr	r2, [r7, #4]
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	3304      	adds	r3, #4
 8015b0c:	6939      	ldr	r1, [r7, #16]
 8015b0e:	6878      	ldr	r0, [r7, #4]
 8015b10:	f7ff fed0 	bl	80158b4 <tcp_output_control_segment>
 8015b14:	4603      	mov	r3, r0
 8015b16:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	371c      	adds	r7, #28
 8015b20:	46bd      	mov	sp, r7
 8015b22:	bd90      	pop	{r4, r7, pc}
 8015b24:	0801d214 	.word	0x0801d214
 8015b28:	0801d9f0 	.word	0x0801d9f0
 8015b2c:	0801d268 	.word	0x0801d268

08015b30 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015b30:	b590      	push	{r4, r7, lr}
 8015b32:	b08b      	sub	sp, #44	@ 0x2c
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015b38:	2300      	movs	r3, #0
 8015b3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d106      	bne.n	8015b52 <tcp_zero_window_probe+0x22>
 8015b44:	4b4c      	ldr	r3, [pc, #304]	@ (8015c78 <tcp_zero_window_probe+0x148>)
 8015b46:	f640 024f 	movw	r2, #2127	@ 0x84f
 8015b4a:	494c      	ldr	r1, [pc, #304]	@ (8015c7c <tcp_zero_window_probe+0x14c>)
 8015b4c:	484c      	ldr	r0, [pc, #304]	@ (8015c80 <tcp_zero_window_probe+0x150>)
 8015b4e:	f003 fd45 	bl	80195dc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015b56:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015b58:	6a3b      	ldr	r3, [r7, #32]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d101      	bne.n	8015b62 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015b5e:	2300      	movs	r3, #0
 8015b60:	e086      	b.n	8015c70 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015b68:	2bff      	cmp	r3, #255	@ 0xff
 8015b6a:	d007      	beq.n	8015b7c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015b72:	3301      	adds	r3, #1
 8015b74:	b2da      	uxtb	r2, r3
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015b7c:	6a3b      	ldr	r3, [r7, #32]
 8015b7e:	68db      	ldr	r3, [r3, #12]
 8015b80:	899b      	ldrh	r3, [r3, #12]
 8015b82:	b29b      	uxth	r3, r3
 8015b84:	4618      	mov	r0, r3
 8015b86:	f7f8 ff81 	bl	800ea8c <lwip_htons>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	b2db      	uxtb	r3, r3
 8015b8e:	f003 0301 	and.w	r3, r3, #1
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d005      	beq.n	8015ba2 <tcp_zero_window_probe+0x72>
 8015b96:	6a3b      	ldr	r3, [r7, #32]
 8015b98:	891b      	ldrh	r3, [r3, #8]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d101      	bne.n	8015ba2 <tcp_zero_window_probe+0x72>
 8015b9e:	2301      	movs	r3, #1
 8015ba0:	e000      	b.n	8015ba4 <tcp_zero_window_probe+0x74>
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015ba6:	7ffb      	ldrb	r3, [r7, #31]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	bf0c      	ite	eq
 8015bac:	2301      	moveq	r3, #1
 8015bae:	2300      	movne	r3, #0
 8015bb0:	b2db      	uxtb	r3, r3
 8015bb2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015bb8:	b299      	uxth	r1, r3
 8015bba:	6a3b      	ldr	r3, [r7, #32]
 8015bbc:	68db      	ldr	r3, [r3, #12]
 8015bbe:	685b      	ldr	r3, [r3, #4]
 8015bc0:	8bba      	ldrh	r2, [r7, #28]
 8015bc2:	6878      	ldr	r0, [r7, #4]
 8015bc4:	f7ff fdfa 	bl	80157bc <tcp_output_alloc_header>
 8015bc8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015bca:	69bb      	ldr	r3, [r7, #24]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d102      	bne.n	8015bd6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8015bd4:	e04c      	b.n	8015c70 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015bd6:	69bb      	ldr	r3, [r7, #24]
 8015bd8:	685b      	ldr	r3, [r3, #4]
 8015bda:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015bdc:	7ffb      	ldrb	r3, [r7, #31]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d011      	beq.n	8015c06 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	899b      	ldrh	r3, [r3, #12]
 8015be6:	b29b      	uxth	r3, r3
 8015be8:	b21b      	sxth	r3, r3
 8015bea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015bee:	b21c      	sxth	r4, r3
 8015bf0:	2011      	movs	r0, #17
 8015bf2:	f7f8 ff4b 	bl	800ea8c <lwip_htons>
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	b21b      	sxth	r3, r3
 8015bfa:	4323      	orrs	r3, r4
 8015bfc:	b21b      	sxth	r3, r3
 8015bfe:	b29a      	uxth	r2, r3
 8015c00:	697b      	ldr	r3, [r7, #20]
 8015c02:	819a      	strh	r2, [r3, #12]
 8015c04:	e010      	b.n	8015c28 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015c06:	69bb      	ldr	r3, [r7, #24]
 8015c08:	685b      	ldr	r3, [r3, #4]
 8015c0a:	3314      	adds	r3, #20
 8015c0c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015c0e:	6a3b      	ldr	r3, [r7, #32]
 8015c10:	6858      	ldr	r0, [r3, #4]
 8015c12:	6a3b      	ldr	r3, [r7, #32]
 8015c14:	685b      	ldr	r3, [r3, #4]
 8015c16:	891a      	ldrh	r2, [r3, #8]
 8015c18:	6a3b      	ldr	r3, [r7, #32]
 8015c1a:	891b      	ldrh	r3, [r3, #8]
 8015c1c:	1ad3      	subs	r3, r2, r3
 8015c1e:	b29b      	uxth	r3, r3
 8015c20:	2201      	movs	r2, #1
 8015c22:	6939      	ldr	r1, [r7, #16]
 8015c24:	f7fa fdf2 	bl	801080c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015c28:	6a3b      	ldr	r3, [r7, #32]
 8015c2a:	68db      	ldr	r3, [r3, #12]
 8015c2c:	685b      	ldr	r3, [r3, #4]
 8015c2e:	4618      	mov	r0, r3
 8015c30:	f7f8 ff42 	bl	800eab8 <lwip_htonl>
 8015c34:	4603      	mov	r3, r0
 8015c36:	3301      	adds	r3, #1
 8015c38:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	1ad3      	subs	r3, r2, r3
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	da02      	bge.n	8015c4c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	68fa      	ldr	r2, [r7, #12]
 8015c4a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015c50:	2200      	movs	r2, #0
 8015c52:	69b9      	ldr	r1, [r7, #24]
 8015c54:	6878      	ldr	r0, [r7, #4]
 8015c56:	f7ff fdef 	bl	8015838 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015c5a:	687a      	ldr	r2, [r7, #4]
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	3304      	adds	r3, #4
 8015c60:	69b9      	ldr	r1, [r7, #24]
 8015c62:	6878      	ldr	r0, [r7, #4]
 8015c64:	f7ff fe26 	bl	80158b4 <tcp_output_control_segment>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015c6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015c70:	4618      	mov	r0, r3
 8015c72:	372c      	adds	r7, #44	@ 0x2c
 8015c74:	46bd      	mov	sp, r7
 8015c76:	bd90      	pop	{r4, r7, pc}
 8015c78:	0801d214 	.word	0x0801d214
 8015c7c:	0801da0c 	.word	0x0801da0c
 8015c80:	0801d268 	.word	0x0801d268

08015c84 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b082      	sub	sp, #8
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015c8c:	f7fa ff10 	bl	8010ab0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015c90:	4b0a      	ldr	r3, [pc, #40]	@ (8015cbc <tcpip_tcp_timer+0x38>)
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d103      	bne.n	8015ca0 <tcpip_tcp_timer+0x1c>
 8015c98:	4b09      	ldr	r3, [pc, #36]	@ (8015cc0 <tcpip_tcp_timer+0x3c>)
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d005      	beq.n	8015cac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	4908      	ldr	r1, [pc, #32]	@ (8015cc4 <tcpip_tcp_timer+0x40>)
 8015ca4:	20fa      	movs	r0, #250	@ 0xfa
 8015ca6:	f000 f8f3 	bl	8015e90 <sys_timeout>
 8015caa:	e003      	b.n	8015cb4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015cac:	4b06      	ldr	r3, [pc, #24]	@ (8015cc8 <tcpip_tcp_timer+0x44>)
 8015cae:	2200      	movs	r2, #0
 8015cb0:	601a      	str	r2, [r3, #0]
  }
}
 8015cb2:	bf00      	nop
 8015cb4:	bf00      	nop
 8015cb6:	3708      	adds	r7, #8
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}
 8015cbc:	24008218 	.word	0x24008218
 8015cc0:	2400821c 	.word	0x2400821c
 8015cc4:	08015c85 	.word	0x08015c85
 8015cc8:	24008264 	.word	0x24008264

08015ccc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8015cfc <tcp_timer_needed+0x30>)
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d10f      	bne.n	8015cf8 <tcp_timer_needed+0x2c>
 8015cd8:	4b09      	ldr	r3, [pc, #36]	@ (8015d00 <tcp_timer_needed+0x34>)
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d103      	bne.n	8015ce8 <tcp_timer_needed+0x1c>
 8015ce0:	4b08      	ldr	r3, [pc, #32]	@ (8015d04 <tcp_timer_needed+0x38>)
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d007      	beq.n	8015cf8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015ce8:	4b04      	ldr	r3, [pc, #16]	@ (8015cfc <tcp_timer_needed+0x30>)
 8015cea:	2201      	movs	r2, #1
 8015cec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015cee:	2200      	movs	r2, #0
 8015cf0:	4905      	ldr	r1, [pc, #20]	@ (8015d08 <tcp_timer_needed+0x3c>)
 8015cf2:	20fa      	movs	r0, #250	@ 0xfa
 8015cf4:	f000 f8cc 	bl	8015e90 <sys_timeout>
  }
}
 8015cf8:	bf00      	nop
 8015cfa:	bd80      	pop	{r7, pc}
 8015cfc:	24008264 	.word	0x24008264
 8015d00:	24008218 	.word	0x24008218
 8015d04:	2400821c 	.word	0x2400821c
 8015d08:	08015c85 	.word	0x08015c85

08015d0c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b086      	sub	sp, #24
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	60f8      	str	r0, [r7, #12]
 8015d14:	60b9      	str	r1, [r7, #8]
 8015d16:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015d18:	200a      	movs	r0, #10
 8015d1a:	f7f9 fc57 	bl	800f5cc <memp_malloc>
 8015d1e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015d20:	693b      	ldr	r3, [r7, #16]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d109      	bne.n	8015d3a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015d26:	693b      	ldr	r3, [r7, #16]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d151      	bne.n	8015dd0 <sys_timeout_abs+0xc4>
 8015d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8015dd8 <sys_timeout_abs+0xcc>)
 8015d2e:	22be      	movs	r2, #190	@ 0xbe
 8015d30:	492a      	ldr	r1, [pc, #168]	@ (8015ddc <sys_timeout_abs+0xd0>)
 8015d32:	482b      	ldr	r0, [pc, #172]	@ (8015de0 <sys_timeout_abs+0xd4>)
 8015d34:	f003 fc52 	bl	80195dc <iprintf>
    return;
 8015d38:	e04a      	b.n	8015dd0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	2200      	movs	r2, #0
 8015d3e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015d40:	693b      	ldr	r3, [r7, #16]
 8015d42:	68ba      	ldr	r2, [r7, #8]
 8015d44:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015d46:	693b      	ldr	r3, [r7, #16]
 8015d48:	687a      	ldr	r2, [r7, #4]
 8015d4a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015d4c:	693b      	ldr	r3, [r7, #16]
 8015d4e:	68fa      	ldr	r2, [r7, #12]
 8015d50:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015d52:	4b24      	ldr	r3, [pc, #144]	@ (8015de4 <sys_timeout_abs+0xd8>)
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d103      	bne.n	8015d62 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015d5a:	4a22      	ldr	r2, [pc, #136]	@ (8015de4 <sys_timeout_abs+0xd8>)
 8015d5c:	693b      	ldr	r3, [r7, #16]
 8015d5e:	6013      	str	r3, [r2, #0]
    return;
 8015d60:	e037      	b.n	8015dd2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015d62:	693b      	ldr	r3, [r7, #16]
 8015d64:	685a      	ldr	r2, [r3, #4]
 8015d66:	4b1f      	ldr	r3, [pc, #124]	@ (8015de4 <sys_timeout_abs+0xd8>)
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	685b      	ldr	r3, [r3, #4]
 8015d6c:	1ad3      	subs	r3, r2, r3
 8015d6e:	0fdb      	lsrs	r3, r3, #31
 8015d70:	f003 0301 	and.w	r3, r3, #1
 8015d74:	b2db      	uxtb	r3, r3
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d007      	beq.n	8015d8a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8015de4 <sys_timeout_abs+0xd8>)
 8015d7c:	681a      	ldr	r2, [r3, #0]
 8015d7e:	693b      	ldr	r3, [r7, #16]
 8015d80:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015d82:	4a18      	ldr	r2, [pc, #96]	@ (8015de4 <sys_timeout_abs+0xd8>)
 8015d84:	693b      	ldr	r3, [r7, #16]
 8015d86:	6013      	str	r3, [r2, #0]
 8015d88:	e023      	b.n	8015dd2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015d8a:	4b16      	ldr	r3, [pc, #88]	@ (8015de4 <sys_timeout_abs+0xd8>)
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	617b      	str	r3, [r7, #20]
 8015d90:	e01a      	b.n	8015dc8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015d92:	697b      	ldr	r3, [r7, #20]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d00b      	beq.n	8015db2 <sys_timeout_abs+0xa6>
 8015d9a:	693b      	ldr	r3, [r7, #16]
 8015d9c:	685a      	ldr	r2, [r3, #4]
 8015d9e:	697b      	ldr	r3, [r7, #20]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	685b      	ldr	r3, [r3, #4]
 8015da4:	1ad3      	subs	r3, r2, r3
 8015da6:	0fdb      	lsrs	r3, r3, #31
 8015da8:	f003 0301 	and.w	r3, r3, #1
 8015dac:	b2db      	uxtb	r3, r3
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d007      	beq.n	8015dc2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015db2:	697b      	ldr	r3, [r7, #20]
 8015db4:	681a      	ldr	r2, [r3, #0]
 8015db6:	693b      	ldr	r3, [r7, #16]
 8015db8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015dba:	697b      	ldr	r3, [r7, #20]
 8015dbc:	693a      	ldr	r2, [r7, #16]
 8015dbe:	601a      	str	r2, [r3, #0]
        break;
 8015dc0:	e007      	b.n	8015dd2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015dc2:	697b      	ldr	r3, [r7, #20]
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	617b      	str	r3, [r7, #20]
 8015dc8:	697b      	ldr	r3, [r7, #20]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d1e1      	bne.n	8015d92 <sys_timeout_abs+0x86>
 8015dce:	e000      	b.n	8015dd2 <sys_timeout_abs+0xc6>
    return;
 8015dd0:	bf00      	nop
      }
    }
  }
}
 8015dd2:	3718      	adds	r7, #24
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	bd80      	pop	{r7, pc}
 8015dd8:	0801da30 	.word	0x0801da30
 8015ddc:	0801da64 	.word	0x0801da64
 8015de0:	0801daa4 	.word	0x0801daa4
 8015de4:	2400825c 	.word	0x2400825c

08015de8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b086      	sub	sp, #24
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015df4:	697b      	ldr	r3, [r7, #20]
 8015df6:	685b      	ldr	r3, [r3, #4]
 8015df8:	4798      	blx	r3

  now = sys_now();
 8015dfa:	f7f4 f9cd 	bl	800a198 <sys_now>
 8015dfe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015e00:	697b      	ldr	r3, [r7, #20]
 8015e02:	681a      	ldr	r2, [r3, #0]
 8015e04:	4b0f      	ldr	r3, [pc, #60]	@ (8015e44 <lwip_cyclic_timer+0x5c>)
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	4413      	add	r3, r2
 8015e0a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015e0c:	68fa      	ldr	r2, [r7, #12]
 8015e0e:	693b      	ldr	r3, [r7, #16]
 8015e10:	1ad3      	subs	r3, r2, r3
 8015e12:	0fdb      	lsrs	r3, r3, #31
 8015e14:	f003 0301 	and.w	r3, r3, #1
 8015e18:	b2db      	uxtb	r3, r3
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d009      	beq.n	8015e32 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015e1e:	697b      	ldr	r3, [r7, #20]
 8015e20:	681a      	ldr	r2, [r3, #0]
 8015e22:	693b      	ldr	r3, [r7, #16]
 8015e24:	4413      	add	r3, r2
 8015e26:	687a      	ldr	r2, [r7, #4]
 8015e28:	4907      	ldr	r1, [pc, #28]	@ (8015e48 <lwip_cyclic_timer+0x60>)
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f7ff ff6e 	bl	8015d0c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015e30:	e004      	b.n	8015e3c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015e32:	687a      	ldr	r2, [r7, #4]
 8015e34:	4904      	ldr	r1, [pc, #16]	@ (8015e48 <lwip_cyclic_timer+0x60>)
 8015e36:	68f8      	ldr	r0, [r7, #12]
 8015e38:	f7ff ff68 	bl	8015d0c <sys_timeout_abs>
}
 8015e3c:	bf00      	nop
 8015e3e:	3718      	adds	r7, #24
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bd80      	pop	{r7, pc}
 8015e44:	24008260 	.word	0x24008260
 8015e48:	08015de9 	.word	0x08015de9

08015e4c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b082      	sub	sp, #8
 8015e50:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015e52:	2301      	movs	r3, #1
 8015e54:	607b      	str	r3, [r7, #4]
 8015e56:	e00e      	b.n	8015e76 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015e58:	4a0b      	ldr	r2, [pc, #44]	@ (8015e88 <sys_timeouts_init+0x3c>)
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	00db      	lsls	r3, r3, #3
 8015e64:	4a08      	ldr	r2, [pc, #32]	@ (8015e88 <sys_timeouts_init+0x3c>)
 8015e66:	4413      	add	r3, r2
 8015e68:	461a      	mov	r2, r3
 8015e6a:	4908      	ldr	r1, [pc, #32]	@ (8015e8c <sys_timeouts_init+0x40>)
 8015e6c:	f000 f810 	bl	8015e90 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	3301      	adds	r3, #1
 8015e74:	607b      	str	r3, [r7, #4]
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	2b02      	cmp	r3, #2
 8015e7a:	d9ed      	bls.n	8015e58 <sys_timeouts_init+0xc>
  }
}
 8015e7c:	bf00      	nop
 8015e7e:	bf00      	nop
 8015e80:	3708      	adds	r7, #8
 8015e82:	46bd      	mov	sp, r7
 8015e84:	bd80      	pop	{r7, pc}
 8015e86:	bf00      	nop
 8015e88:	0801e6ac 	.word	0x0801e6ac
 8015e8c:	08015de9 	.word	0x08015de9

08015e90 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b086      	sub	sp, #24
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	60f8      	str	r0, [r7, #12]
 8015e98:	60b9      	str	r1, [r7, #8]
 8015e9a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015ea2:	d306      	bcc.n	8015eb2 <sys_timeout+0x22>
 8015ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8015ed0 <sys_timeout+0x40>)
 8015ea6:	f240 1229 	movw	r2, #297	@ 0x129
 8015eaa:	490a      	ldr	r1, [pc, #40]	@ (8015ed4 <sys_timeout+0x44>)
 8015eac:	480a      	ldr	r0, [pc, #40]	@ (8015ed8 <sys_timeout+0x48>)
 8015eae:	f003 fb95 	bl	80195dc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015eb2:	f7f4 f971 	bl	800a198 <sys_now>
 8015eb6:	4602      	mov	r2, r0
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	4413      	add	r3, r2
 8015ebc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015ebe:	687a      	ldr	r2, [r7, #4]
 8015ec0:	68b9      	ldr	r1, [r7, #8]
 8015ec2:	6978      	ldr	r0, [r7, #20]
 8015ec4:	f7ff ff22 	bl	8015d0c <sys_timeout_abs>
#endif
}
 8015ec8:	bf00      	nop
 8015eca:	3718      	adds	r7, #24
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	bd80      	pop	{r7, pc}
 8015ed0:	0801da30 	.word	0x0801da30
 8015ed4:	0801dacc 	.word	0x0801dacc
 8015ed8:	0801daa4 	.word	0x0801daa4

08015edc <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b084      	sub	sp, #16
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
 8015ee4:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015ee6:	4b19      	ldr	r3, [pc, #100]	@ (8015f4c <sys_untimeout+0x70>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d029      	beq.n	8015f42 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8015eee:	4b17      	ldr	r3, [pc, #92]	@ (8015f4c <sys_untimeout+0x70>)
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	60bb      	str	r3, [r7, #8]
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	60fb      	str	r3, [r7, #12]
 8015ef8:	e01f      	b.n	8015f3a <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8015efa:	68bb      	ldr	r3, [r7, #8]
 8015efc:	689b      	ldr	r3, [r3, #8]
 8015efe:	687a      	ldr	r2, [r7, #4]
 8015f00:	429a      	cmp	r2, r3
 8015f02:	d115      	bne.n	8015f30 <sys_untimeout+0x54>
 8015f04:	68bb      	ldr	r3, [r7, #8]
 8015f06:	68db      	ldr	r3, [r3, #12]
 8015f08:	683a      	ldr	r2, [r7, #0]
 8015f0a:	429a      	cmp	r2, r3
 8015f0c:	d110      	bne.n	8015f30 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d104      	bne.n	8015f1e <sys_untimeout+0x42>
        next_timeout = t->next;
 8015f14:	68bb      	ldr	r3, [r7, #8]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	4a0c      	ldr	r2, [pc, #48]	@ (8015f4c <sys_untimeout+0x70>)
 8015f1a:	6013      	str	r3, [r2, #0]
 8015f1c:	e003      	b.n	8015f26 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8015f1e:	68bb      	ldr	r3, [r7, #8]
 8015f20:	681a      	ldr	r2, [r3, #0]
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8015f26:	68b9      	ldr	r1, [r7, #8]
 8015f28:	200a      	movs	r0, #10
 8015f2a:	f7f9 fbc5 	bl	800f6b8 <memp_free>
      return;
 8015f2e:	e009      	b.n	8015f44 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8015f30:	68bb      	ldr	r3, [r7, #8]
 8015f32:	60fb      	str	r3, [r7, #12]
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	60bb      	str	r3, [r7, #8]
 8015f3a:	68bb      	ldr	r3, [r7, #8]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d1dc      	bne.n	8015efa <sys_untimeout+0x1e>
    }
  }
  return;
 8015f40:	e000      	b.n	8015f44 <sys_untimeout+0x68>
    return;
 8015f42:	bf00      	nop
}
 8015f44:	3710      	adds	r7, #16
 8015f46:	46bd      	mov	sp, r7
 8015f48:	bd80      	pop	{r7, pc}
 8015f4a:	bf00      	nop
 8015f4c:	2400825c 	.word	0x2400825c

08015f50 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b084      	sub	sp, #16
 8015f54:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015f56:	f7f4 f91f 	bl	800a198 <sys_now>
 8015f5a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015f5c:	4b17      	ldr	r3, [pc, #92]	@ (8015fbc <sys_check_timeouts+0x6c>)
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8015f62:	68bb      	ldr	r3, [r7, #8]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d022      	beq.n	8015fae <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015f68:	68bb      	ldr	r3, [r7, #8]
 8015f6a:	685b      	ldr	r3, [r3, #4]
 8015f6c:	68fa      	ldr	r2, [r7, #12]
 8015f6e:	1ad3      	subs	r3, r2, r3
 8015f70:	0fdb      	lsrs	r3, r3, #31
 8015f72:	f003 0301 	and.w	r3, r3, #1
 8015f76:	b2db      	uxtb	r3, r3
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d11a      	bne.n	8015fb2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015f7c:	68bb      	ldr	r3, [r7, #8]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	4a0e      	ldr	r2, [pc, #56]	@ (8015fbc <sys_check_timeouts+0x6c>)
 8015f82:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015f84:	68bb      	ldr	r3, [r7, #8]
 8015f86:	689b      	ldr	r3, [r3, #8]
 8015f88:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015f8a:	68bb      	ldr	r3, [r7, #8]
 8015f8c:	68db      	ldr	r3, [r3, #12]
 8015f8e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015f90:	68bb      	ldr	r3, [r7, #8]
 8015f92:	685b      	ldr	r3, [r3, #4]
 8015f94:	4a0a      	ldr	r2, [pc, #40]	@ (8015fc0 <sys_check_timeouts+0x70>)
 8015f96:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015f98:	68b9      	ldr	r1, [r7, #8]
 8015f9a:	200a      	movs	r0, #10
 8015f9c:	f7f9 fb8c 	bl	800f6b8 <memp_free>
    if (handler != NULL) {
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d0da      	beq.n	8015f5c <sys_check_timeouts+0xc>
      handler(arg);
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	6838      	ldr	r0, [r7, #0]
 8015faa:	4798      	blx	r3
  do {
 8015fac:	e7d6      	b.n	8015f5c <sys_check_timeouts+0xc>
      return;
 8015fae:	bf00      	nop
 8015fb0:	e000      	b.n	8015fb4 <sys_check_timeouts+0x64>
      return;
 8015fb2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015fb4:	3710      	adds	r7, #16
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	bd80      	pop	{r7, pc}
 8015fba:	bf00      	nop
 8015fbc:	2400825c 	.word	0x2400825c
 8015fc0:	24008260 	.word	0x24008260

08015fc4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b082      	sub	sp, #8
 8015fc8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015fca:	4b16      	ldr	r3, [pc, #88]	@ (8016024 <sys_timeouts_sleeptime+0x60>)
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d102      	bne.n	8015fd8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8015fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8015fd6:	e020      	b.n	801601a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015fd8:	f7f4 f8de 	bl	800a198 <sys_now>
 8015fdc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015fde:	4b11      	ldr	r3, [pc, #68]	@ (8016024 <sys_timeouts_sleeptime+0x60>)
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	685a      	ldr	r2, [r3, #4]
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	1ad3      	subs	r3, r2, r3
 8015fe8:	0fdb      	lsrs	r3, r3, #31
 8015fea:	f003 0301 	and.w	r3, r3, #1
 8015fee:	b2db      	uxtb	r3, r3
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d001      	beq.n	8015ff8 <sys_timeouts_sleeptime+0x34>
    return 0;
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	e010      	b.n	801601a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8016024 <sys_timeouts_sleeptime+0x60>)
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	685a      	ldr	r2, [r3, #4]
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	1ad3      	subs	r3, r2, r3
 8016002:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8016004:	683b      	ldr	r3, [r7, #0]
 8016006:	2b00      	cmp	r3, #0
 8016008:	da06      	bge.n	8016018 <sys_timeouts_sleeptime+0x54>
 801600a:	4b07      	ldr	r3, [pc, #28]	@ (8016028 <sys_timeouts_sleeptime+0x64>)
 801600c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8016010:	4906      	ldr	r1, [pc, #24]	@ (801602c <sys_timeouts_sleeptime+0x68>)
 8016012:	4807      	ldr	r0, [pc, #28]	@ (8016030 <sys_timeouts_sleeptime+0x6c>)
 8016014:	f003 fae2 	bl	80195dc <iprintf>
    return ret;
 8016018:	683b      	ldr	r3, [r7, #0]
  }
}
 801601a:	4618      	mov	r0, r3
 801601c:	3708      	adds	r7, #8
 801601e:	46bd      	mov	sp, r7
 8016020:	bd80      	pop	{r7, pc}
 8016022:	bf00      	nop
 8016024:	2400825c 	.word	0x2400825c
 8016028:	0801da30 	.word	0x0801da30
 801602c:	0801db04 	.word	0x0801db04
 8016030:	0801daa4 	.word	0x0801daa4

08016034 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016034:	b580      	push	{r7, lr}
 8016036:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016038:	f003 f942 	bl	80192c0 <rand>
 801603c:	4603      	mov	r3, r0
 801603e:	b29b      	uxth	r3, r3
 8016040:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016044:	b29b      	uxth	r3, r3
 8016046:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801604a:	b29a      	uxth	r2, r3
 801604c:	4b01      	ldr	r3, [pc, #4]	@ (8016054 <udp_init+0x20>)
 801604e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016050:	bf00      	nop
 8016052:	bd80      	pop	{r7, pc}
 8016054:	24000034 	.word	0x24000034

08016058 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016058:	b480      	push	{r7}
 801605a:	b083      	sub	sp, #12
 801605c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801605e:	2300      	movs	r3, #0
 8016060:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8016062:	4b17      	ldr	r3, [pc, #92]	@ (80160c0 <udp_new_port+0x68>)
 8016064:	881b      	ldrh	r3, [r3, #0]
 8016066:	1c5a      	adds	r2, r3, #1
 8016068:	b291      	uxth	r1, r2
 801606a:	4a15      	ldr	r2, [pc, #84]	@ (80160c0 <udp_new_port+0x68>)
 801606c:	8011      	strh	r1, [r2, #0]
 801606e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016072:	4293      	cmp	r3, r2
 8016074:	d103      	bne.n	801607e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8016076:	4b12      	ldr	r3, [pc, #72]	@ (80160c0 <udp_new_port+0x68>)
 8016078:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801607c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801607e:	4b11      	ldr	r3, [pc, #68]	@ (80160c4 <udp_new_port+0x6c>)
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	603b      	str	r3, [r7, #0]
 8016084:	e011      	b.n	80160aa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8016086:	683b      	ldr	r3, [r7, #0]
 8016088:	8a5a      	ldrh	r2, [r3, #18]
 801608a:	4b0d      	ldr	r3, [pc, #52]	@ (80160c0 <udp_new_port+0x68>)
 801608c:	881b      	ldrh	r3, [r3, #0]
 801608e:	429a      	cmp	r2, r3
 8016090:	d108      	bne.n	80160a4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8016092:	88fb      	ldrh	r3, [r7, #6]
 8016094:	3301      	adds	r3, #1
 8016096:	80fb      	strh	r3, [r7, #6]
 8016098:	88fb      	ldrh	r3, [r7, #6]
 801609a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801609e:	d3e0      	bcc.n	8016062 <udp_new_port+0xa>
        return 0;
 80160a0:	2300      	movs	r3, #0
 80160a2:	e007      	b.n	80160b4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	68db      	ldr	r3, [r3, #12]
 80160a8:	603b      	str	r3, [r7, #0]
 80160aa:	683b      	ldr	r3, [r7, #0]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d1ea      	bne.n	8016086 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80160b0:	4b03      	ldr	r3, [pc, #12]	@ (80160c0 <udp_new_port+0x68>)
 80160b2:	881b      	ldrh	r3, [r3, #0]
}
 80160b4:	4618      	mov	r0, r3
 80160b6:	370c      	adds	r7, #12
 80160b8:	46bd      	mov	sp, r7
 80160ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160be:	4770      	bx	lr
 80160c0:	24000034 	.word	0x24000034
 80160c4:	24008268 	.word	0x24008268

080160c8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b084      	sub	sp, #16
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	60f8      	str	r0, [r7, #12]
 80160d0:	60b9      	str	r1, [r7, #8]
 80160d2:	4613      	mov	r3, r2
 80160d4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d105      	bne.n	80160e8 <udp_input_local_match+0x20>
 80160dc:	4b2a      	ldr	r3, [pc, #168]	@ (8016188 <udp_input_local_match+0xc0>)
 80160de:	2287      	movs	r2, #135	@ 0x87
 80160e0:	492a      	ldr	r1, [pc, #168]	@ (801618c <udp_input_local_match+0xc4>)
 80160e2:	482b      	ldr	r0, [pc, #172]	@ (8016190 <udp_input_local_match+0xc8>)
 80160e4:	f003 fa7a 	bl	80195dc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80160e8:	68bb      	ldr	r3, [r7, #8]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d105      	bne.n	80160fa <udp_input_local_match+0x32>
 80160ee:	4b26      	ldr	r3, [pc, #152]	@ (8016188 <udp_input_local_match+0xc0>)
 80160f0:	2288      	movs	r2, #136	@ 0x88
 80160f2:	4928      	ldr	r1, [pc, #160]	@ (8016194 <udp_input_local_match+0xcc>)
 80160f4:	4826      	ldr	r0, [pc, #152]	@ (8016190 <udp_input_local_match+0xc8>)
 80160f6:	f003 fa71 	bl	80195dc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	7a1b      	ldrb	r3, [r3, #8]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d00b      	beq.n	801611a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	7a1a      	ldrb	r2, [r3, #8]
 8016106:	4b24      	ldr	r3, [pc, #144]	@ (8016198 <udp_input_local_match+0xd0>)
 8016108:	685b      	ldr	r3, [r3, #4]
 801610a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801610e:	3301      	adds	r3, #1
 8016110:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016112:	429a      	cmp	r2, r3
 8016114:	d001      	beq.n	801611a <udp_input_local_match+0x52>
    return 0;
 8016116:	2300      	movs	r3, #0
 8016118:	e031      	b.n	801617e <udp_input_local_match+0xb6>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801611a:	79fb      	ldrb	r3, [r7, #7]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d01e      	beq.n	801615e <udp_input_local_match+0x96>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	7a5b      	ldrb	r3, [r3, #9]
 8016124:	f003 0320 	and.w	r3, r3, #32
 8016128:	2b00      	cmp	r3, #0
 801612a:	d027      	beq.n	801617c <udp_input_local_match+0xb4>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d013      	beq.n	801615a <udp_input_local_match+0x92>
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d00f      	beq.n	801615a <udp_input_local_match+0x92>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801613a:	4b17      	ldr	r3, [pc, #92]	@ (8016198 <udp_input_local_match+0xd0>)
 801613c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801613e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016142:	d00a      	beq.n	801615a <udp_input_local_match+0x92>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	681a      	ldr	r2, [r3, #0]
 8016148:	4b13      	ldr	r3, [pc, #76]	@ (8016198 <udp_input_local_match+0xd0>)
 801614a:	695b      	ldr	r3, [r3, #20]
 801614c:	405a      	eors	r2, r3
 801614e:	68bb      	ldr	r3, [r7, #8]
 8016150:	3308      	adds	r3, #8
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016156:	2b00      	cmp	r3, #0
 8016158:	d110      	bne.n	801617c <udp_input_local_match+0xb4>
          return 1;
 801615a:	2301      	movs	r3, #1
 801615c:	e00f      	b.n	801617e <udp_input_local_match+0xb6>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d009      	beq.n	8016178 <udp_input_local_match+0xb0>
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d005      	beq.n	8016178 <udp_input_local_match+0xb0>
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	681a      	ldr	r2, [r3, #0]
 8016170:	4b09      	ldr	r3, [pc, #36]	@ (8016198 <udp_input_local_match+0xd0>)
 8016172:	695b      	ldr	r3, [r3, #20]
 8016174:	429a      	cmp	r2, r3
 8016176:	d101      	bne.n	801617c <udp_input_local_match+0xb4>
        return 1;
 8016178:	2301      	movs	r3, #1
 801617a:	e000      	b.n	801617e <udp_input_local_match+0xb6>
      }
  }

  return 0;
 801617c:	2300      	movs	r3, #0
}
 801617e:	4618      	mov	r0, r3
 8016180:	3710      	adds	r7, #16
 8016182:	46bd      	mov	sp, r7
 8016184:	bd80      	pop	{r7, pc}
 8016186:	bf00      	nop
 8016188:	0801db18 	.word	0x0801db18
 801618c:	0801db48 	.word	0x0801db48
 8016190:	0801db6c 	.word	0x0801db6c
 8016194:	0801db94 	.word	0x0801db94
 8016198:	2400510c 	.word	0x2400510c

0801619c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801619c:	b590      	push	{r4, r7, lr}
 801619e:	b08d      	sub	sp, #52	@ 0x34
 80161a0:	af02      	add	r7, sp, #8
 80161a2:	6078      	str	r0, [r7, #4]
 80161a4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80161a6:	2300      	movs	r3, #0
 80161a8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d105      	bne.n	80161bc <udp_input+0x20>
 80161b0:	4b7c      	ldr	r3, [pc, #496]	@ (80163a4 <udp_input+0x208>)
 80161b2:	22cf      	movs	r2, #207	@ 0xcf
 80161b4:	497c      	ldr	r1, [pc, #496]	@ (80163a8 <udp_input+0x20c>)
 80161b6:	487d      	ldr	r0, [pc, #500]	@ (80163ac <udp_input+0x210>)
 80161b8:	f003 fa10 	bl	80195dc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80161bc:	683b      	ldr	r3, [r7, #0]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d105      	bne.n	80161ce <udp_input+0x32>
 80161c2:	4b78      	ldr	r3, [pc, #480]	@ (80163a4 <udp_input+0x208>)
 80161c4:	22d0      	movs	r2, #208	@ 0xd0
 80161c6:	497a      	ldr	r1, [pc, #488]	@ (80163b0 <udp_input+0x214>)
 80161c8:	4878      	ldr	r0, [pc, #480]	@ (80163ac <udp_input+0x210>)
 80161ca:	f003 fa07 	bl	80195dc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	895b      	ldrh	r3, [r3, #10]
 80161d2:	2b07      	cmp	r3, #7
 80161d4:	d803      	bhi.n	80161de <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80161d6:	6878      	ldr	r0, [r7, #4]
 80161d8:	f7fa f912 	bl	8010400 <pbuf_free>
    goto end;
 80161dc:	e0de      	b.n	801639c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	685b      	ldr	r3, [r3, #4]
 80161e2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80161e4:	4b73      	ldr	r3, [pc, #460]	@ (80163b4 <udp_input+0x218>)
 80161e6:	695b      	ldr	r3, [r3, #20]
 80161e8:	4a72      	ldr	r2, [pc, #456]	@ (80163b4 <udp_input+0x218>)
 80161ea:	6812      	ldr	r2, [r2, #0]
 80161ec:	4611      	mov	r1, r2
 80161ee:	4618      	mov	r0, r3
 80161f0:	f001 ff42 	bl	8018078 <ip4_addr_isbroadcast_u32>
 80161f4:	4603      	mov	r3, r0
 80161f6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80161f8:	697b      	ldr	r3, [r7, #20]
 80161fa:	881b      	ldrh	r3, [r3, #0]
 80161fc:	b29b      	uxth	r3, r3
 80161fe:	4618      	mov	r0, r3
 8016200:	f7f8 fc44 	bl	800ea8c <lwip_htons>
 8016204:	4603      	mov	r3, r0
 8016206:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016208:	697b      	ldr	r3, [r7, #20]
 801620a:	885b      	ldrh	r3, [r3, #2]
 801620c:	b29b      	uxth	r3, r3
 801620e:	4618      	mov	r0, r3
 8016210:	f7f8 fc3c 	bl	800ea8c <lwip_htons>
 8016214:	4603      	mov	r3, r0
 8016216:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016218:	2300      	movs	r3, #0
 801621a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801621c:	2300      	movs	r3, #0
 801621e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016220:	2300      	movs	r3, #0
 8016222:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016224:	4b64      	ldr	r3, [pc, #400]	@ (80163b8 <udp_input+0x21c>)
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	627b      	str	r3, [r7, #36]	@ 0x24
 801622a:	e054      	b.n	80162d6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801622e:	8a5b      	ldrh	r3, [r3, #18]
 8016230:	89fa      	ldrh	r2, [r7, #14]
 8016232:	429a      	cmp	r2, r3
 8016234:	d14a      	bne.n	80162cc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016236:	7cfb      	ldrb	r3, [r7, #19]
 8016238:	461a      	mov	r2, r3
 801623a:	6839      	ldr	r1, [r7, #0]
 801623c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801623e:	f7ff ff43 	bl	80160c8 <udp_input_local_match>
 8016242:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016244:	2b00      	cmp	r3, #0
 8016246:	d041      	beq.n	80162cc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801624a:	7c1b      	ldrb	r3, [r3, #16]
 801624c:	f003 0304 	and.w	r3, r3, #4
 8016250:	2b00      	cmp	r3, #0
 8016252:	d11d      	bne.n	8016290 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016254:	69fb      	ldr	r3, [r7, #28]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d102      	bne.n	8016260 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801625c:	61fb      	str	r3, [r7, #28]
 801625e:	e017      	b.n	8016290 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016260:	7cfb      	ldrb	r3, [r7, #19]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d014      	beq.n	8016290 <udp_input+0xf4>
 8016266:	4b53      	ldr	r3, [pc, #332]	@ (80163b4 <udp_input+0x218>)
 8016268:	695b      	ldr	r3, [r3, #20]
 801626a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801626e:	d10f      	bne.n	8016290 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016270:	69fb      	ldr	r3, [r7, #28]
 8016272:	681a      	ldr	r2, [r3, #0]
 8016274:	683b      	ldr	r3, [r7, #0]
 8016276:	3304      	adds	r3, #4
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	429a      	cmp	r2, r3
 801627c:	d008      	beq.n	8016290 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016280:	681a      	ldr	r2, [r3, #0]
 8016282:	683b      	ldr	r3, [r7, #0]
 8016284:	3304      	adds	r3, #4
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	429a      	cmp	r2, r3
 801628a:	d101      	bne.n	8016290 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801628e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016292:	8a9b      	ldrh	r3, [r3, #20]
 8016294:	8a3a      	ldrh	r2, [r7, #16]
 8016296:	429a      	cmp	r2, r3
 8016298:	d118      	bne.n	80162cc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801629c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d005      	beq.n	80162ae <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80162a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162a4:	685a      	ldr	r2, [r3, #4]
 80162a6:	4b43      	ldr	r3, [pc, #268]	@ (80163b4 <udp_input+0x218>)
 80162a8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80162aa:	429a      	cmp	r2, r3
 80162ac:	d10e      	bne.n	80162cc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80162ae:	6a3b      	ldr	r3, [r7, #32]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d014      	beq.n	80162de <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80162b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162b6:	68da      	ldr	r2, [r3, #12]
 80162b8:	6a3b      	ldr	r3, [r7, #32]
 80162ba:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80162bc:	4b3e      	ldr	r3, [pc, #248]	@ (80163b8 <udp_input+0x21c>)
 80162be:	681a      	ldr	r2, [r3, #0]
 80162c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162c2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80162c4:	4a3c      	ldr	r2, [pc, #240]	@ (80163b8 <udp_input+0x21c>)
 80162c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162c8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80162ca:	e008      	b.n	80162de <udp_input+0x142>
      }
    }

    prev = pcb;
 80162cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162ce:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80162d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162d2:	68db      	ldr	r3, [r3, #12]
 80162d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80162d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d1a7      	bne.n	801622c <udp_input+0x90>
 80162dc:	e000      	b.n	80162e0 <udp_input+0x144>
        break;
 80162de:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80162e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d101      	bne.n	80162ea <udp_input+0x14e>
    pcb = uncon_pcb;
 80162e6:	69fb      	ldr	r3, [r7, #28]
 80162e8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80162ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d002      	beq.n	80162f6 <udp_input+0x15a>
    for_us = 1;
 80162f0:	2301      	movs	r3, #1
 80162f2:	76fb      	strb	r3, [r7, #27]
 80162f4:	e00a      	b.n	801630c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80162f6:	683b      	ldr	r3, [r7, #0]
 80162f8:	3304      	adds	r3, #4
 80162fa:	681a      	ldr	r2, [r3, #0]
 80162fc:	4b2d      	ldr	r3, [pc, #180]	@ (80163b4 <udp_input+0x218>)
 80162fe:	695b      	ldr	r3, [r3, #20]
 8016300:	429a      	cmp	r2, r3
 8016302:	bf0c      	ite	eq
 8016304:	2301      	moveq	r3, #1
 8016306:	2300      	movne	r3, #0
 8016308:	b2db      	uxtb	r3, r3
 801630a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801630c:	7efb      	ldrb	r3, [r7, #27]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d041      	beq.n	8016396 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016312:	2108      	movs	r1, #8
 8016314:	6878      	ldr	r0, [r7, #4]
 8016316:	f7f9 ffed 	bl	80102f4 <pbuf_remove_header>
 801631a:	4603      	mov	r3, r0
 801631c:	2b00      	cmp	r3, #0
 801631e:	d00a      	beq.n	8016336 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016320:	4b20      	ldr	r3, [pc, #128]	@ (80163a4 <udp_input+0x208>)
 8016322:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8016326:	4925      	ldr	r1, [pc, #148]	@ (80163bc <udp_input+0x220>)
 8016328:	4820      	ldr	r0, [pc, #128]	@ (80163ac <udp_input+0x210>)
 801632a:	f003 f957 	bl	80195dc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	f7fa f866 	bl	8010400 <pbuf_free>
      goto end;
 8016334:	e032      	b.n	801639c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016338:	2b00      	cmp	r3, #0
 801633a:	d012      	beq.n	8016362 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801633e:	699b      	ldr	r3, [r3, #24]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d00a      	beq.n	801635a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016346:	699c      	ldr	r4, [r3, #24]
 8016348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801634a:	69d8      	ldr	r0, [r3, #28]
 801634c:	8a3b      	ldrh	r3, [r7, #16]
 801634e:	9300      	str	r3, [sp, #0]
 8016350:	4b1b      	ldr	r3, [pc, #108]	@ (80163c0 <udp_input+0x224>)
 8016352:	687a      	ldr	r2, [r7, #4]
 8016354:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016356:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016358:	e021      	b.n	801639e <udp_input+0x202>
        pbuf_free(p);
 801635a:	6878      	ldr	r0, [r7, #4]
 801635c:	f7fa f850 	bl	8010400 <pbuf_free>
        goto end;
 8016360:	e01c      	b.n	801639c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016362:	7cfb      	ldrb	r3, [r7, #19]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d112      	bne.n	801638e <udp_input+0x1f2>
 8016368:	4b12      	ldr	r3, [pc, #72]	@ (80163b4 <udp_input+0x218>)
 801636a:	695b      	ldr	r3, [r3, #20]
 801636c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016370:	2be0      	cmp	r3, #224	@ 0xe0
 8016372:	d00c      	beq.n	801638e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016374:	4b0f      	ldr	r3, [pc, #60]	@ (80163b4 <udp_input+0x218>)
 8016376:	899b      	ldrh	r3, [r3, #12]
 8016378:	3308      	adds	r3, #8
 801637a:	b29b      	uxth	r3, r3
 801637c:	b21b      	sxth	r3, r3
 801637e:	4619      	mov	r1, r3
 8016380:	6878      	ldr	r0, [r7, #4]
 8016382:	f7fa f82a 	bl	80103da <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016386:	2103      	movs	r1, #3
 8016388:	6878      	ldr	r0, [r7, #4]
 801638a:	f001 fb4b 	bl	8017a24 <icmp_dest_unreach>
      pbuf_free(p);
 801638e:	6878      	ldr	r0, [r7, #4]
 8016390:	f7fa f836 	bl	8010400 <pbuf_free>
  return;
 8016394:	e003      	b.n	801639e <udp_input+0x202>
    pbuf_free(p);
 8016396:	6878      	ldr	r0, [r7, #4]
 8016398:	f7fa f832 	bl	8010400 <pbuf_free>
  return;
 801639c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801639e:	372c      	adds	r7, #44	@ 0x2c
 80163a0:	46bd      	mov	sp, r7
 80163a2:	bd90      	pop	{r4, r7, pc}
 80163a4:	0801db18 	.word	0x0801db18
 80163a8:	0801dbbc 	.word	0x0801dbbc
 80163ac:	0801db6c 	.word	0x0801db6c
 80163b0:	0801dbd4 	.word	0x0801dbd4
 80163b4:	2400510c 	.word	0x2400510c
 80163b8:	24008268 	.word	0x24008268
 80163bc:	0801dbf0 	.word	0x0801dbf0
 80163c0:	2400511c 	.word	0x2400511c

080163c4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b088      	sub	sp, #32
 80163c8:	af02      	add	r7, sp, #8
 80163ca:	60f8      	str	r0, [r7, #12]
 80163cc:	60b9      	str	r1, [r7, #8]
 80163ce:	607a      	str	r2, [r7, #4]
 80163d0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d109      	bne.n	80163ec <udp_sendto+0x28>
 80163d8:	4b23      	ldr	r3, [pc, #140]	@ (8016468 <udp_sendto+0xa4>)
 80163da:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80163de:	4923      	ldr	r1, [pc, #140]	@ (801646c <udp_sendto+0xa8>)
 80163e0:	4823      	ldr	r0, [pc, #140]	@ (8016470 <udp_sendto+0xac>)
 80163e2:	f003 f8fb 	bl	80195dc <iprintf>
 80163e6:	f06f 030f 	mvn.w	r3, #15
 80163ea:	e038      	b.n	801645e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80163ec:	68bb      	ldr	r3, [r7, #8]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d109      	bne.n	8016406 <udp_sendto+0x42>
 80163f2:	4b1d      	ldr	r3, [pc, #116]	@ (8016468 <udp_sendto+0xa4>)
 80163f4:	f240 2219 	movw	r2, #537	@ 0x219
 80163f8:	491e      	ldr	r1, [pc, #120]	@ (8016474 <udp_sendto+0xb0>)
 80163fa:	481d      	ldr	r0, [pc, #116]	@ (8016470 <udp_sendto+0xac>)
 80163fc:	f003 f8ee 	bl	80195dc <iprintf>
 8016400:	f06f 030f 	mvn.w	r3, #15
 8016404:	e02b      	b.n	801645e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d109      	bne.n	8016420 <udp_sendto+0x5c>
 801640c:	4b16      	ldr	r3, [pc, #88]	@ (8016468 <udp_sendto+0xa4>)
 801640e:	f240 221a 	movw	r2, #538	@ 0x21a
 8016412:	4919      	ldr	r1, [pc, #100]	@ (8016478 <udp_sendto+0xb4>)
 8016414:	4816      	ldr	r0, [pc, #88]	@ (8016470 <udp_sendto+0xac>)
 8016416:	f003 f8e1 	bl	80195dc <iprintf>
 801641a:	f06f 030f 	mvn.w	r3, #15
 801641e:	e01e      	b.n	801645e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	7a1b      	ldrb	r3, [r3, #8]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d006      	beq.n	8016436 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	7a1b      	ldrb	r3, [r3, #8]
 801642c:	4618      	mov	r0, r3
 801642e:	f7f9 fc59 	bl	800fce4 <netif_get_by_index>
 8016432:	6178      	str	r0, [r7, #20]
 8016434:	e003      	b.n	801643e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8016436:	6878      	ldr	r0, [r7, #4]
 8016438:	f001 fb88 	bl	8017b4c <ip4_route>
 801643c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801643e:	697b      	ldr	r3, [r7, #20]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d102      	bne.n	801644a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8016444:	f06f 0303 	mvn.w	r3, #3
 8016448:	e009      	b.n	801645e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801644a:	887a      	ldrh	r2, [r7, #2]
 801644c:	697b      	ldr	r3, [r7, #20]
 801644e:	9300      	str	r3, [sp, #0]
 8016450:	4613      	mov	r3, r2
 8016452:	687a      	ldr	r2, [r7, #4]
 8016454:	68b9      	ldr	r1, [r7, #8]
 8016456:	68f8      	ldr	r0, [r7, #12]
 8016458:	f000 f810 	bl	801647c <udp_sendto_if>
 801645c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801645e:	4618      	mov	r0, r3
 8016460:	3718      	adds	r7, #24
 8016462:	46bd      	mov	sp, r7
 8016464:	bd80      	pop	{r7, pc}
 8016466:	bf00      	nop
 8016468:	0801db18 	.word	0x0801db18
 801646c:	0801dc3c 	.word	0x0801dc3c
 8016470:	0801db6c 	.word	0x0801db6c
 8016474:	0801dc54 	.word	0x0801dc54
 8016478:	0801dc70 	.word	0x0801dc70

0801647c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801647c:	b580      	push	{r7, lr}
 801647e:	b088      	sub	sp, #32
 8016480:	af02      	add	r7, sp, #8
 8016482:	60f8      	str	r0, [r7, #12]
 8016484:	60b9      	str	r1, [r7, #8]
 8016486:	607a      	str	r2, [r7, #4]
 8016488:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d109      	bne.n	80164a4 <udp_sendto_if+0x28>
 8016490:	4b2e      	ldr	r3, [pc, #184]	@ (801654c <udp_sendto_if+0xd0>)
 8016492:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016496:	492e      	ldr	r1, [pc, #184]	@ (8016550 <udp_sendto_if+0xd4>)
 8016498:	482e      	ldr	r0, [pc, #184]	@ (8016554 <udp_sendto_if+0xd8>)
 801649a:	f003 f89f 	bl	80195dc <iprintf>
 801649e:	f06f 030f 	mvn.w	r3, #15
 80164a2:	e04f      	b.n	8016544 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80164a4:	68bb      	ldr	r3, [r7, #8]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d109      	bne.n	80164be <udp_sendto_if+0x42>
 80164aa:	4b28      	ldr	r3, [pc, #160]	@ (801654c <udp_sendto_if+0xd0>)
 80164ac:	f240 2281 	movw	r2, #641	@ 0x281
 80164b0:	4929      	ldr	r1, [pc, #164]	@ (8016558 <udp_sendto_if+0xdc>)
 80164b2:	4828      	ldr	r0, [pc, #160]	@ (8016554 <udp_sendto_if+0xd8>)
 80164b4:	f003 f892 	bl	80195dc <iprintf>
 80164b8:	f06f 030f 	mvn.w	r3, #15
 80164bc:	e042      	b.n	8016544 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d109      	bne.n	80164d8 <udp_sendto_if+0x5c>
 80164c4:	4b21      	ldr	r3, [pc, #132]	@ (801654c <udp_sendto_if+0xd0>)
 80164c6:	f240 2282 	movw	r2, #642	@ 0x282
 80164ca:	4924      	ldr	r1, [pc, #144]	@ (801655c <udp_sendto_if+0xe0>)
 80164cc:	4821      	ldr	r0, [pc, #132]	@ (8016554 <udp_sendto_if+0xd8>)
 80164ce:	f003 f885 	bl	80195dc <iprintf>
 80164d2:	f06f 030f 	mvn.w	r3, #15
 80164d6:	e035      	b.n	8016544 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80164d8:	6a3b      	ldr	r3, [r7, #32]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d109      	bne.n	80164f2 <udp_sendto_if+0x76>
 80164de:	4b1b      	ldr	r3, [pc, #108]	@ (801654c <udp_sendto_if+0xd0>)
 80164e0:	f240 2283 	movw	r2, #643	@ 0x283
 80164e4:	491e      	ldr	r1, [pc, #120]	@ (8016560 <udp_sendto_if+0xe4>)
 80164e6:	481b      	ldr	r0, [pc, #108]	@ (8016554 <udp_sendto_if+0xd8>)
 80164e8:	f003 f878 	bl	80195dc <iprintf>
 80164ec:	f06f 030f 	mvn.w	r3, #15
 80164f0:	e028      	b.n	8016544 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d009      	beq.n	801650c <udp_sendto_if+0x90>
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d005      	beq.n	801650c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016508:	2be0      	cmp	r3, #224	@ 0xe0
 801650a:	d103      	bne.n	8016514 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801650c:	6a3b      	ldr	r3, [r7, #32]
 801650e:	3304      	adds	r3, #4
 8016510:	617b      	str	r3, [r7, #20]
 8016512:	e00b      	b.n	801652c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	681a      	ldr	r2, [r3, #0]
 8016518:	6a3b      	ldr	r3, [r7, #32]
 801651a:	3304      	adds	r3, #4
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	429a      	cmp	r2, r3
 8016520:	d002      	beq.n	8016528 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016522:	f06f 0303 	mvn.w	r3, #3
 8016526:	e00d      	b.n	8016544 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801652c:	887a      	ldrh	r2, [r7, #2]
 801652e:	697b      	ldr	r3, [r7, #20]
 8016530:	9301      	str	r3, [sp, #4]
 8016532:	6a3b      	ldr	r3, [r7, #32]
 8016534:	9300      	str	r3, [sp, #0]
 8016536:	4613      	mov	r3, r2
 8016538:	687a      	ldr	r2, [r7, #4]
 801653a:	68b9      	ldr	r1, [r7, #8]
 801653c:	68f8      	ldr	r0, [r7, #12]
 801653e:	f000 f811 	bl	8016564 <udp_sendto_if_src>
 8016542:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016544:	4618      	mov	r0, r3
 8016546:	3718      	adds	r7, #24
 8016548:	46bd      	mov	sp, r7
 801654a:	bd80      	pop	{r7, pc}
 801654c:	0801db18 	.word	0x0801db18
 8016550:	0801dc8c 	.word	0x0801dc8c
 8016554:	0801db6c 	.word	0x0801db6c
 8016558:	0801dca8 	.word	0x0801dca8
 801655c:	0801dcc4 	.word	0x0801dcc4
 8016560:	0801dce4 	.word	0x0801dce4

08016564 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b08c      	sub	sp, #48	@ 0x30
 8016568:	af04      	add	r7, sp, #16
 801656a:	60f8      	str	r0, [r7, #12]
 801656c:	60b9      	str	r1, [r7, #8]
 801656e:	607a      	str	r2, [r7, #4]
 8016570:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d109      	bne.n	801658c <udp_sendto_if_src+0x28>
 8016578:	4b6e      	ldr	r3, [pc, #440]	@ (8016734 <udp_sendto_if_src+0x1d0>)
 801657a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801657e:	496e      	ldr	r1, [pc, #440]	@ (8016738 <udp_sendto_if_src+0x1d4>)
 8016580:	486e      	ldr	r0, [pc, #440]	@ (801673c <udp_sendto_if_src+0x1d8>)
 8016582:	f003 f82b 	bl	80195dc <iprintf>
 8016586:	f06f 030f 	mvn.w	r3, #15
 801658a:	e0ce      	b.n	801672a <udp_sendto_if_src+0x1c6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801658c:	68bb      	ldr	r3, [r7, #8]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d109      	bne.n	80165a6 <udp_sendto_if_src+0x42>
 8016592:	4b68      	ldr	r3, [pc, #416]	@ (8016734 <udp_sendto_if_src+0x1d0>)
 8016594:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8016598:	4969      	ldr	r1, [pc, #420]	@ (8016740 <udp_sendto_if_src+0x1dc>)
 801659a:	4868      	ldr	r0, [pc, #416]	@ (801673c <udp_sendto_if_src+0x1d8>)
 801659c:	f003 f81e 	bl	80195dc <iprintf>
 80165a0:	f06f 030f 	mvn.w	r3, #15
 80165a4:	e0c1      	b.n	801672a <udp_sendto_if_src+0x1c6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d109      	bne.n	80165c0 <udp_sendto_if_src+0x5c>
 80165ac:	4b61      	ldr	r3, [pc, #388]	@ (8016734 <udp_sendto_if_src+0x1d0>)
 80165ae:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80165b2:	4964      	ldr	r1, [pc, #400]	@ (8016744 <udp_sendto_if_src+0x1e0>)
 80165b4:	4861      	ldr	r0, [pc, #388]	@ (801673c <udp_sendto_if_src+0x1d8>)
 80165b6:	f003 f811 	bl	80195dc <iprintf>
 80165ba:	f06f 030f 	mvn.w	r3, #15
 80165be:	e0b4      	b.n	801672a <udp_sendto_if_src+0x1c6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80165c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d109      	bne.n	80165da <udp_sendto_if_src+0x76>
 80165c6:	4b5b      	ldr	r3, [pc, #364]	@ (8016734 <udp_sendto_if_src+0x1d0>)
 80165c8:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80165cc:	495e      	ldr	r1, [pc, #376]	@ (8016748 <udp_sendto_if_src+0x1e4>)
 80165ce:	485b      	ldr	r0, [pc, #364]	@ (801673c <udp_sendto_if_src+0x1d8>)
 80165d0:	f003 f804 	bl	80195dc <iprintf>
 80165d4:	f06f 030f 	mvn.w	r3, #15
 80165d8:	e0a7      	b.n	801672a <udp_sendto_if_src+0x1c6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80165da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d109      	bne.n	80165f4 <udp_sendto_if_src+0x90>
 80165e0:	4b54      	ldr	r3, [pc, #336]	@ (8016734 <udp_sendto_if_src+0x1d0>)
 80165e2:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80165e6:	4959      	ldr	r1, [pc, #356]	@ (801674c <udp_sendto_if_src+0x1e8>)
 80165e8:	4854      	ldr	r0, [pc, #336]	@ (801673c <udp_sendto_if_src+0x1d8>)
 80165ea:	f002 fff7 	bl	80195dc <iprintf>
 80165ee:	f06f 030f 	mvn.w	r3, #15
 80165f2:	e09a      	b.n	801672a <udp_sendto_if_src+0x1c6>
    return ERR_VAL;
  }

#if LWIP_IPV4 && IP_SOF_BROADCAST
  /* broadcast filter? */
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	7a5b      	ldrb	r3, [r3, #9]
 80165f8:	f003 0320 	and.w	r3, r3, #32
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d10b      	bne.n	8016618 <udp_sendto_if_src+0xb4>
#if LWIP_IPV6
      IP_IS_V4(dst_ip) &&
#endif /* LWIP_IPV6 */
      ip_addr_isbroadcast(dst_ip, netif)) {
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016606:	4618      	mov	r0, r3
 8016608:	f001 fd36 	bl	8018078 <ip4_addr_isbroadcast_u32>
 801660c:	4603      	mov	r3, r0
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
 801660e:	2b00      	cmp	r3, #0
 8016610:	d002      	beq.n	8016618 <udp_sendto_if_src+0xb4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("udp_sendto_if: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
    return ERR_VAL;
 8016612:	f06f 0305 	mvn.w	r3, #5
 8016616:	e088      	b.n	801672a <udp_sendto_if_src+0x1c6>
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	8a5b      	ldrh	r3, [r3, #18]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d10f      	bne.n	8016640 <udp_sendto_if_src+0xdc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016620:	68f9      	ldr	r1, [r7, #12]
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	8a5b      	ldrh	r3, [r3, #18]
 8016626:	461a      	mov	r2, r3
 8016628:	68f8      	ldr	r0, [r7, #12]
 801662a:	f000 f893 	bl	8016754 <udp_bind>
 801662e:	4603      	mov	r3, r0
 8016630:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8016632:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d002      	beq.n	8016640 <udp_sendto_if_src+0xdc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801663a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801663e:	e074      	b.n	801672a <udp_sendto_if_src+0x1c6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8016640:	68bb      	ldr	r3, [r7, #8]
 8016642:	891b      	ldrh	r3, [r3, #8]
 8016644:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8016648:	4293      	cmp	r3, r2
 801664a:	d902      	bls.n	8016652 <udp_sendto_if_src+0xee>
    return ERR_MEM;
 801664c:	f04f 33ff 	mov.w	r3, #4294967295
 8016650:	e06b      	b.n	801672a <udp_sendto_if_src+0x1c6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8016652:	2108      	movs	r1, #8
 8016654:	68b8      	ldr	r0, [r7, #8]
 8016656:	f7f9 fe3d 	bl	80102d4 <pbuf_add_header>
 801665a:	4603      	mov	r3, r0
 801665c:	2b00      	cmp	r3, #0
 801665e:	d015      	beq.n	801668c <udp_sendto_if_src+0x128>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016660:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016664:	2108      	movs	r1, #8
 8016666:	2022      	movs	r0, #34	@ 0x22
 8016668:	f7f9 fbe6 	bl	800fe38 <pbuf_alloc>
 801666c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801666e:	69fb      	ldr	r3, [r7, #28]
 8016670:	2b00      	cmp	r3, #0
 8016672:	d102      	bne.n	801667a <udp_sendto_if_src+0x116>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016674:	f04f 33ff 	mov.w	r3, #4294967295
 8016678:	e057      	b.n	801672a <udp_sendto_if_src+0x1c6>
    }
    if (p->tot_len != 0) {
 801667a:	68bb      	ldr	r3, [r7, #8]
 801667c:	891b      	ldrh	r3, [r3, #8]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d006      	beq.n	8016690 <udp_sendto_if_src+0x12c>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8016682:	68b9      	ldr	r1, [r7, #8]
 8016684:	69f8      	ldr	r0, [r7, #28]
 8016686:	f7f9 ffdf 	bl	8010648 <pbuf_chain>
 801668a:	e001      	b.n	8016690 <udp_sendto_if_src+0x12c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801668c:	68bb      	ldr	r3, [r7, #8]
 801668e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016690:	69fb      	ldr	r3, [r7, #28]
 8016692:	895b      	ldrh	r3, [r3, #10]
 8016694:	2b07      	cmp	r3, #7
 8016696:	d806      	bhi.n	80166a6 <udp_sendto_if_src+0x142>
 8016698:	4b26      	ldr	r3, [pc, #152]	@ (8016734 <udp_sendto_if_src+0x1d0>)
 801669a:	f240 320d 	movw	r2, #781	@ 0x30d
 801669e:	492c      	ldr	r1, [pc, #176]	@ (8016750 <udp_sendto_if_src+0x1ec>)
 80166a0:	4826      	ldr	r0, [pc, #152]	@ (801673c <udp_sendto_if_src+0x1d8>)
 80166a2:	f002 ff9b 	bl	80195dc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80166a6:	69fb      	ldr	r3, [r7, #28]
 80166a8:	685b      	ldr	r3, [r3, #4]
 80166aa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	8a5b      	ldrh	r3, [r3, #18]
 80166b0:	4618      	mov	r0, r3
 80166b2:	f7f8 f9eb 	bl	800ea8c <lwip_htons>
 80166b6:	4603      	mov	r3, r0
 80166b8:	461a      	mov	r2, r3
 80166ba:	697b      	ldr	r3, [r7, #20]
 80166bc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80166be:	887b      	ldrh	r3, [r7, #2]
 80166c0:	4618      	mov	r0, r3
 80166c2:	f7f8 f9e3 	bl	800ea8c <lwip_htons>
 80166c6:	4603      	mov	r3, r0
 80166c8:	461a      	mov	r2, r3
 80166ca:	697b      	ldr	r3, [r7, #20]
 80166cc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80166ce:	697b      	ldr	r3, [r7, #20]
 80166d0:	2200      	movs	r2, #0
 80166d2:	719a      	strb	r2, [r3, #6]
 80166d4:	2200      	movs	r2, #0
 80166d6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80166d8:	69fb      	ldr	r3, [r7, #28]
 80166da:	891b      	ldrh	r3, [r3, #8]
 80166dc:	4618      	mov	r0, r3
 80166de:	f7f8 f9d5 	bl	800ea8c <lwip_htons>
 80166e2:	4603      	mov	r3, r0
 80166e4:	461a      	mov	r2, r3
 80166e6:	697b      	ldr	r3, [r7, #20]
 80166e8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80166ea:	2311      	movs	r3, #17
 80166ec:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	7adb      	ldrb	r3, [r3, #11]
 80166f2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	7a9b      	ldrb	r3, [r3, #10]
 80166f8:	7cb9      	ldrb	r1, [r7, #18]
 80166fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80166fc:	9202      	str	r2, [sp, #8]
 80166fe:	7cfa      	ldrb	r2, [r7, #19]
 8016700:	9201      	str	r2, [sp, #4]
 8016702:	9300      	str	r3, [sp, #0]
 8016704:	460b      	mov	r3, r1
 8016706:	687a      	ldr	r2, [r7, #4]
 8016708:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801670a:	69f8      	ldr	r0, [r7, #28]
 801670c:	f001 fc06 	bl	8017f1c <ip4_output_if_src>
 8016710:	4603      	mov	r3, r0
 8016712:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016714:	69fa      	ldr	r2, [r7, #28]
 8016716:	68bb      	ldr	r3, [r7, #8]
 8016718:	429a      	cmp	r2, r3
 801671a:	d004      	beq.n	8016726 <udp_sendto_if_src+0x1c2>
    /* free the header pbuf */
    pbuf_free(q);
 801671c:	69f8      	ldr	r0, [r7, #28]
 801671e:	f7f9 fe6f 	bl	8010400 <pbuf_free>
    q = NULL;
 8016722:	2300      	movs	r3, #0
 8016724:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016726:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801672a:	4618      	mov	r0, r3
 801672c:	3720      	adds	r7, #32
 801672e:	46bd      	mov	sp, r7
 8016730:	bd80      	pop	{r7, pc}
 8016732:	bf00      	nop
 8016734:	0801db18 	.word	0x0801db18
 8016738:	0801dd04 	.word	0x0801dd04
 801673c:	0801db6c 	.word	0x0801db6c
 8016740:	0801dd24 	.word	0x0801dd24
 8016744:	0801dd44 	.word	0x0801dd44
 8016748:	0801dd68 	.word	0x0801dd68
 801674c:	0801dd8c 	.word	0x0801dd8c
 8016750:	0801ddb0 	.word	0x0801ddb0

08016754 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b086      	sub	sp, #24
 8016758:	af00      	add	r7, sp, #0
 801675a:	60f8      	str	r0, [r7, #12]
 801675c:	60b9      	str	r1, [r7, #8]
 801675e:	4613      	mov	r3, r2
 8016760:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016762:	68bb      	ldr	r3, [r7, #8]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d101      	bne.n	801676c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016768:	4b39      	ldr	r3, [pc, #228]	@ (8016850 <udp_bind+0xfc>)
 801676a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d109      	bne.n	8016786 <udp_bind+0x32>
 8016772:	4b38      	ldr	r3, [pc, #224]	@ (8016854 <udp_bind+0x100>)
 8016774:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8016778:	4937      	ldr	r1, [pc, #220]	@ (8016858 <udp_bind+0x104>)
 801677a:	4838      	ldr	r0, [pc, #224]	@ (801685c <udp_bind+0x108>)
 801677c:	f002 ff2e 	bl	80195dc <iprintf>
 8016780:	f06f 030f 	mvn.w	r3, #15
 8016784:	e060      	b.n	8016848 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016786:	2300      	movs	r3, #0
 8016788:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801678a:	4b35      	ldr	r3, [pc, #212]	@ (8016860 <udp_bind+0x10c>)
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	617b      	str	r3, [r7, #20]
 8016790:	e009      	b.n	80167a6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016792:	68fa      	ldr	r2, [r7, #12]
 8016794:	697b      	ldr	r3, [r7, #20]
 8016796:	429a      	cmp	r2, r3
 8016798:	d102      	bne.n	80167a0 <udp_bind+0x4c>
      rebind = 1;
 801679a:	2301      	movs	r3, #1
 801679c:	74fb      	strb	r3, [r7, #19]
      break;
 801679e:	e005      	b.n	80167ac <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80167a0:	697b      	ldr	r3, [r7, #20]
 80167a2:	68db      	ldr	r3, [r3, #12]
 80167a4:	617b      	str	r3, [r7, #20]
 80167a6:	697b      	ldr	r3, [r7, #20]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d1f2      	bne.n	8016792 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80167ac:	88fb      	ldrh	r3, [r7, #6]
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d109      	bne.n	80167c6 <udp_bind+0x72>
    port = udp_new_port();
 80167b2:	f7ff fc51 	bl	8016058 <udp_new_port>
 80167b6:	4603      	mov	r3, r0
 80167b8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80167ba:	88fb      	ldrh	r3, [r7, #6]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d12c      	bne.n	801681a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80167c0:	f06f 0307 	mvn.w	r3, #7
 80167c4:	e040      	b.n	8016848 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80167c6:	4b26      	ldr	r3, [pc, #152]	@ (8016860 <udp_bind+0x10c>)
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	617b      	str	r3, [r7, #20]
 80167cc:	e022      	b.n	8016814 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80167ce:	68fa      	ldr	r2, [r7, #12]
 80167d0:	697b      	ldr	r3, [r7, #20]
 80167d2:	429a      	cmp	r2, r3
 80167d4:	d01b      	beq.n	801680e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80167d6:	697b      	ldr	r3, [r7, #20]
 80167d8:	8a5b      	ldrh	r3, [r3, #18]
 80167da:	88fa      	ldrh	r2, [r7, #6]
 80167dc:	429a      	cmp	r2, r3
 80167de:	d116      	bne.n	801680e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80167e0:	697b      	ldr	r3, [r7, #20]
 80167e2:	681a      	ldr	r2, [r3, #0]
 80167e4:	68bb      	ldr	r3, [r7, #8]
 80167e6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80167e8:	429a      	cmp	r2, r3
 80167ea:	d00d      	beq.n	8016808 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80167ec:	68bb      	ldr	r3, [r7, #8]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d00a      	beq.n	8016808 <udp_bind+0xb4>
 80167f2:	68bb      	ldr	r3, [r7, #8]
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d006      	beq.n	8016808 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80167fa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d003      	beq.n	8016808 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016800:	697b      	ldr	r3, [r7, #20]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d102      	bne.n	801680e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016808:	f06f 0307 	mvn.w	r3, #7
 801680c:	e01c      	b.n	8016848 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801680e:	697b      	ldr	r3, [r7, #20]
 8016810:	68db      	ldr	r3, [r3, #12]
 8016812:	617b      	str	r3, [r7, #20]
 8016814:	697b      	ldr	r3, [r7, #20]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d1d9      	bne.n	80167ce <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801681a:	68bb      	ldr	r3, [r7, #8]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d002      	beq.n	8016826 <udp_bind+0xd2>
 8016820:	68bb      	ldr	r3, [r7, #8]
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	e000      	b.n	8016828 <udp_bind+0xd4>
 8016826:	2300      	movs	r3, #0
 8016828:	68fa      	ldr	r2, [r7, #12]
 801682a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	88fa      	ldrh	r2, [r7, #6]
 8016830:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8016832:	7cfb      	ldrb	r3, [r7, #19]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d106      	bne.n	8016846 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016838:	4b09      	ldr	r3, [pc, #36]	@ (8016860 <udp_bind+0x10c>)
 801683a:	681a      	ldr	r2, [r3, #0]
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016840:	4a07      	ldr	r2, [pc, #28]	@ (8016860 <udp_bind+0x10c>)
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016846:	2300      	movs	r3, #0
}
 8016848:	4618      	mov	r0, r3
 801684a:	3718      	adds	r7, #24
 801684c:	46bd      	mov	sp, r7
 801684e:	bd80      	pop	{r7, pc}
 8016850:	0801e6c4 	.word	0x0801e6c4
 8016854:	0801db18 	.word	0x0801db18
 8016858:	0801dde0 	.word	0x0801dde0
 801685c:	0801db6c 	.word	0x0801db6c
 8016860:	24008268 	.word	0x24008268

08016864 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016864:	b580      	push	{r7, lr}
 8016866:	b084      	sub	sp, #16
 8016868:	af00      	add	r7, sp, #0
 801686a:	60f8      	str	r0, [r7, #12]
 801686c:	60b9      	str	r1, [r7, #8]
 801686e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	2b00      	cmp	r3, #0
 8016874:	d107      	bne.n	8016886 <udp_recv+0x22>
 8016876:	4b08      	ldr	r3, [pc, #32]	@ (8016898 <udp_recv+0x34>)
 8016878:	f240 428a 	movw	r2, #1162	@ 0x48a
 801687c:	4907      	ldr	r1, [pc, #28]	@ (801689c <udp_recv+0x38>)
 801687e:	4808      	ldr	r0, [pc, #32]	@ (80168a0 <udp_recv+0x3c>)
 8016880:	f002 feac 	bl	80195dc <iprintf>
 8016884:	e005      	b.n	8016892 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	68ba      	ldr	r2, [r7, #8]
 801688a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	687a      	ldr	r2, [r7, #4]
 8016890:	61da      	str	r2, [r3, #28]
}
 8016892:	3710      	adds	r7, #16
 8016894:	46bd      	mov	sp, r7
 8016896:	bd80      	pop	{r7, pc}
 8016898:	0801db18 	.word	0x0801db18
 801689c:	0801de4c 	.word	0x0801de4c
 80168a0:	0801db6c 	.word	0x0801db6c

080168a4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b082      	sub	sp, #8
 80168a8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80168aa:	2000      	movs	r0, #0
 80168ac:	f7f8 fe8e 	bl	800f5cc <memp_malloc>
 80168b0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d007      	beq.n	80168c8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80168b8:	2220      	movs	r2, #32
 80168ba:	2100      	movs	r1, #0
 80168bc:	6878      	ldr	r0, [r7, #4]
 80168be:	f002 ff89 	bl	80197d4 <memset>
    pcb->ttl = UDP_TTL;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	22ff      	movs	r2, #255	@ 0xff
 80168c6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80168c8:	687b      	ldr	r3, [r7, #4]
}
 80168ca:	4618      	mov	r0, r3
 80168cc:	3708      	adds	r7, #8
 80168ce:	46bd      	mov	sp, r7
 80168d0:	bd80      	pop	{r7, pc}

080168d2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80168d2:	b580      	push	{r7, lr}
 80168d4:	b084      	sub	sp, #16
 80168d6:	af00      	add	r7, sp, #0
 80168d8:	4603      	mov	r3, r0
 80168da:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80168dc:	f7ff ffe2 	bl	80168a4 <udp_new>
 80168e0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80168e2:	68fb      	ldr	r3, [r7, #12]
}
 80168e4:	4618      	mov	r0, r3
 80168e6:	3710      	adds	r7, #16
 80168e8:	46bd      	mov	sp, r7
 80168ea:	bd80      	pop	{r7, pc}

080168ec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80168ec:	b480      	push	{r7}
 80168ee:	b085      	sub	sp, #20
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]
 80168f4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d01e      	beq.n	801693a <udp_netif_ip_addr_changed+0x4e>
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d01a      	beq.n	801693a <udp_netif_ip_addr_changed+0x4e>
 8016904:	683b      	ldr	r3, [r7, #0]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d017      	beq.n	801693a <udp_netif_ip_addr_changed+0x4e>
 801690a:	683b      	ldr	r3, [r7, #0]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d013      	beq.n	801693a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016912:	4b0d      	ldr	r3, [pc, #52]	@ (8016948 <udp_netif_ip_addr_changed+0x5c>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	60fb      	str	r3, [r7, #12]
 8016918:	e00c      	b.n	8016934 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	681a      	ldr	r2, [r3, #0]
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	429a      	cmp	r2, r3
 8016924:	d103      	bne.n	801692e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016926:	683b      	ldr	r3, [r7, #0]
 8016928:	681a      	ldr	r2, [r3, #0]
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	68db      	ldr	r3, [r3, #12]
 8016932:	60fb      	str	r3, [r7, #12]
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d1ef      	bne.n	801691a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801693a:	bf00      	nop
 801693c:	3714      	adds	r7, #20
 801693e:	46bd      	mov	sp, r7
 8016940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016944:	4770      	bx	lr
 8016946:	bf00      	nop
 8016948:	24008268 	.word	0x24008268

0801694c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801694c:	b580      	push	{r7, lr}
 801694e:	b082      	sub	sp, #8
 8016950:	af00      	add	r7, sp, #0
 8016952:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016954:	4915      	ldr	r1, [pc, #84]	@ (80169ac <etharp_free_entry+0x60>)
 8016956:	687a      	ldr	r2, [r7, #4]
 8016958:	4613      	mov	r3, r2
 801695a:	005b      	lsls	r3, r3, #1
 801695c:	4413      	add	r3, r2
 801695e:	00db      	lsls	r3, r3, #3
 8016960:	440b      	add	r3, r1
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d013      	beq.n	8016990 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016968:	4910      	ldr	r1, [pc, #64]	@ (80169ac <etharp_free_entry+0x60>)
 801696a:	687a      	ldr	r2, [r7, #4]
 801696c:	4613      	mov	r3, r2
 801696e:	005b      	lsls	r3, r3, #1
 8016970:	4413      	add	r3, r2
 8016972:	00db      	lsls	r3, r3, #3
 8016974:	440b      	add	r3, r1
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	4618      	mov	r0, r3
 801697a:	f7f9 fd41 	bl	8010400 <pbuf_free>
    arp_table[i].q = NULL;
 801697e:	490b      	ldr	r1, [pc, #44]	@ (80169ac <etharp_free_entry+0x60>)
 8016980:	687a      	ldr	r2, [r7, #4]
 8016982:	4613      	mov	r3, r2
 8016984:	005b      	lsls	r3, r3, #1
 8016986:	4413      	add	r3, r2
 8016988:	00db      	lsls	r3, r3, #3
 801698a:	440b      	add	r3, r1
 801698c:	2200      	movs	r2, #0
 801698e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016990:	4906      	ldr	r1, [pc, #24]	@ (80169ac <etharp_free_entry+0x60>)
 8016992:	687a      	ldr	r2, [r7, #4]
 8016994:	4613      	mov	r3, r2
 8016996:	005b      	lsls	r3, r3, #1
 8016998:	4413      	add	r3, r2
 801699a:	00db      	lsls	r3, r3, #3
 801699c:	440b      	add	r3, r1
 801699e:	3314      	adds	r3, #20
 80169a0:	2200      	movs	r2, #0
 80169a2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80169a4:	bf00      	nop
 80169a6:	3708      	adds	r7, #8
 80169a8:	46bd      	mov	sp, r7
 80169aa:	bd80      	pop	{r7, pc}
 80169ac:	2400826c 	.word	0x2400826c

080169b0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b082      	sub	sp, #8
 80169b4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80169b6:	2300      	movs	r3, #0
 80169b8:	607b      	str	r3, [r7, #4]
 80169ba:	e096      	b.n	8016aea <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80169bc:	494f      	ldr	r1, [pc, #316]	@ (8016afc <etharp_tmr+0x14c>)
 80169be:	687a      	ldr	r2, [r7, #4]
 80169c0:	4613      	mov	r3, r2
 80169c2:	005b      	lsls	r3, r3, #1
 80169c4:	4413      	add	r3, r2
 80169c6:	00db      	lsls	r3, r3, #3
 80169c8:	440b      	add	r3, r1
 80169ca:	3314      	adds	r3, #20
 80169cc:	781b      	ldrb	r3, [r3, #0]
 80169ce:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80169d0:	78fb      	ldrb	r3, [r7, #3]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	f000 8086 	beq.w	8016ae4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80169d8:	4948      	ldr	r1, [pc, #288]	@ (8016afc <etharp_tmr+0x14c>)
 80169da:	687a      	ldr	r2, [r7, #4]
 80169dc:	4613      	mov	r3, r2
 80169de:	005b      	lsls	r3, r3, #1
 80169e0:	4413      	add	r3, r2
 80169e2:	00db      	lsls	r3, r3, #3
 80169e4:	440b      	add	r3, r1
 80169e6:	3312      	adds	r3, #18
 80169e8:	881b      	ldrh	r3, [r3, #0]
 80169ea:	3301      	adds	r3, #1
 80169ec:	b298      	uxth	r0, r3
 80169ee:	4943      	ldr	r1, [pc, #268]	@ (8016afc <etharp_tmr+0x14c>)
 80169f0:	687a      	ldr	r2, [r7, #4]
 80169f2:	4613      	mov	r3, r2
 80169f4:	005b      	lsls	r3, r3, #1
 80169f6:	4413      	add	r3, r2
 80169f8:	00db      	lsls	r3, r3, #3
 80169fa:	440b      	add	r3, r1
 80169fc:	3312      	adds	r3, #18
 80169fe:	4602      	mov	r2, r0
 8016a00:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016a02:	493e      	ldr	r1, [pc, #248]	@ (8016afc <etharp_tmr+0x14c>)
 8016a04:	687a      	ldr	r2, [r7, #4]
 8016a06:	4613      	mov	r3, r2
 8016a08:	005b      	lsls	r3, r3, #1
 8016a0a:	4413      	add	r3, r2
 8016a0c:	00db      	lsls	r3, r3, #3
 8016a0e:	440b      	add	r3, r1
 8016a10:	3312      	adds	r3, #18
 8016a12:	881b      	ldrh	r3, [r3, #0]
 8016a14:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8016a18:	d215      	bcs.n	8016a46 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016a1a:	4938      	ldr	r1, [pc, #224]	@ (8016afc <etharp_tmr+0x14c>)
 8016a1c:	687a      	ldr	r2, [r7, #4]
 8016a1e:	4613      	mov	r3, r2
 8016a20:	005b      	lsls	r3, r3, #1
 8016a22:	4413      	add	r3, r2
 8016a24:	00db      	lsls	r3, r3, #3
 8016a26:	440b      	add	r3, r1
 8016a28:	3314      	adds	r3, #20
 8016a2a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016a2c:	2b01      	cmp	r3, #1
 8016a2e:	d10e      	bne.n	8016a4e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016a30:	4932      	ldr	r1, [pc, #200]	@ (8016afc <etharp_tmr+0x14c>)
 8016a32:	687a      	ldr	r2, [r7, #4]
 8016a34:	4613      	mov	r3, r2
 8016a36:	005b      	lsls	r3, r3, #1
 8016a38:	4413      	add	r3, r2
 8016a3a:	00db      	lsls	r3, r3, #3
 8016a3c:	440b      	add	r3, r1
 8016a3e:	3312      	adds	r3, #18
 8016a40:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016a42:	2b04      	cmp	r3, #4
 8016a44:	d903      	bls.n	8016a4e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016a46:	6878      	ldr	r0, [r7, #4]
 8016a48:	f7ff ff80 	bl	801694c <etharp_free_entry>
 8016a4c:	e04a      	b.n	8016ae4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016a4e:	492b      	ldr	r1, [pc, #172]	@ (8016afc <etharp_tmr+0x14c>)
 8016a50:	687a      	ldr	r2, [r7, #4]
 8016a52:	4613      	mov	r3, r2
 8016a54:	005b      	lsls	r3, r3, #1
 8016a56:	4413      	add	r3, r2
 8016a58:	00db      	lsls	r3, r3, #3
 8016a5a:	440b      	add	r3, r1
 8016a5c:	3314      	adds	r3, #20
 8016a5e:	781b      	ldrb	r3, [r3, #0]
 8016a60:	2b03      	cmp	r3, #3
 8016a62:	d10a      	bne.n	8016a7a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016a64:	4925      	ldr	r1, [pc, #148]	@ (8016afc <etharp_tmr+0x14c>)
 8016a66:	687a      	ldr	r2, [r7, #4]
 8016a68:	4613      	mov	r3, r2
 8016a6a:	005b      	lsls	r3, r3, #1
 8016a6c:	4413      	add	r3, r2
 8016a6e:	00db      	lsls	r3, r3, #3
 8016a70:	440b      	add	r3, r1
 8016a72:	3314      	adds	r3, #20
 8016a74:	2204      	movs	r2, #4
 8016a76:	701a      	strb	r2, [r3, #0]
 8016a78:	e034      	b.n	8016ae4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016a7a:	4920      	ldr	r1, [pc, #128]	@ (8016afc <etharp_tmr+0x14c>)
 8016a7c:	687a      	ldr	r2, [r7, #4]
 8016a7e:	4613      	mov	r3, r2
 8016a80:	005b      	lsls	r3, r3, #1
 8016a82:	4413      	add	r3, r2
 8016a84:	00db      	lsls	r3, r3, #3
 8016a86:	440b      	add	r3, r1
 8016a88:	3314      	adds	r3, #20
 8016a8a:	781b      	ldrb	r3, [r3, #0]
 8016a8c:	2b04      	cmp	r3, #4
 8016a8e:	d10a      	bne.n	8016aa6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016a90:	491a      	ldr	r1, [pc, #104]	@ (8016afc <etharp_tmr+0x14c>)
 8016a92:	687a      	ldr	r2, [r7, #4]
 8016a94:	4613      	mov	r3, r2
 8016a96:	005b      	lsls	r3, r3, #1
 8016a98:	4413      	add	r3, r2
 8016a9a:	00db      	lsls	r3, r3, #3
 8016a9c:	440b      	add	r3, r1
 8016a9e:	3314      	adds	r3, #20
 8016aa0:	2202      	movs	r2, #2
 8016aa2:	701a      	strb	r2, [r3, #0]
 8016aa4:	e01e      	b.n	8016ae4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016aa6:	4915      	ldr	r1, [pc, #84]	@ (8016afc <etharp_tmr+0x14c>)
 8016aa8:	687a      	ldr	r2, [r7, #4]
 8016aaa:	4613      	mov	r3, r2
 8016aac:	005b      	lsls	r3, r3, #1
 8016aae:	4413      	add	r3, r2
 8016ab0:	00db      	lsls	r3, r3, #3
 8016ab2:	440b      	add	r3, r1
 8016ab4:	3314      	adds	r3, #20
 8016ab6:	781b      	ldrb	r3, [r3, #0]
 8016ab8:	2b01      	cmp	r3, #1
 8016aba:	d113      	bne.n	8016ae4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016abc:	490f      	ldr	r1, [pc, #60]	@ (8016afc <etharp_tmr+0x14c>)
 8016abe:	687a      	ldr	r2, [r7, #4]
 8016ac0:	4613      	mov	r3, r2
 8016ac2:	005b      	lsls	r3, r3, #1
 8016ac4:	4413      	add	r3, r2
 8016ac6:	00db      	lsls	r3, r3, #3
 8016ac8:	440b      	add	r3, r1
 8016aca:	3308      	adds	r3, #8
 8016acc:	6818      	ldr	r0, [r3, #0]
 8016ace:	687a      	ldr	r2, [r7, #4]
 8016ad0:	4613      	mov	r3, r2
 8016ad2:	005b      	lsls	r3, r3, #1
 8016ad4:	4413      	add	r3, r2
 8016ad6:	00db      	lsls	r3, r3, #3
 8016ad8:	4a08      	ldr	r2, [pc, #32]	@ (8016afc <etharp_tmr+0x14c>)
 8016ada:	4413      	add	r3, r2
 8016adc:	3304      	adds	r3, #4
 8016ade:	4619      	mov	r1, r3
 8016ae0:	f000 fe6e 	bl	80177c0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	3301      	adds	r3, #1
 8016ae8:	607b      	str	r3, [r7, #4]
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	2b09      	cmp	r3, #9
 8016aee:	f77f af65 	ble.w	80169bc <etharp_tmr+0xc>
      }
    }
  }
}
 8016af2:	bf00      	nop
 8016af4:	bf00      	nop
 8016af6:	3708      	adds	r7, #8
 8016af8:	46bd      	mov	sp, r7
 8016afa:	bd80      	pop	{r7, pc}
 8016afc:	2400826c 	.word	0x2400826c

08016b00 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016b00:	b580      	push	{r7, lr}
 8016b02:	b08a      	sub	sp, #40	@ 0x28
 8016b04:	af00      	add	r7, sp, #0
 8016b06:	60f8      	str	r0, [r7, #12]
 8016b08:	460b      	mov	r3, r1
 8016b0a:	607a      	str	r2, [r7, #4]
 8016b0c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016b0e:	230a      	movs	r3, #10
 8016b10:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8016b12:	230a      	movs	r3, #10
 8016b14:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016b16:	230a      	movs	r3, #10
 8016b18:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016b1e:	230a      	movs	r3, #10
 8016b20:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016b22:	2300      	movs	r3, #0
 8016b24:	83bb      	strh	r3, [r7, #28]
 8016b26:	2300      	movs	r3, #0
 8016b28:	837b      	strh	r3, [r7, #26]
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b2e:	2300      	movs	r3, #0
 8016b30:	843b      	strh	r3, [r7, #32]
 8016b32:	e0ae      	b.n	8016c92 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016b34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b38:	49a6      	ldr	r1, [pc, #664]	@ (8016dd4 <etharp_find_entry+0x2d4>)
 8016b3a:	4613      	mov	r3, r2
 8016b3c:	005b      	lsls	r3, r3, #1
 8016b3e:	4413      	add	r3, r2
 8016b40:	00db      	lsls	r3, r3, #3
 8016b42:	440b      	add	r3, r1
 8016b44:	3314      	adds	r3, #20
 8016b46:	781b      	ldrb	r3, [r3, #0]
 8016b48:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016b4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016b4e:	2b0a      	cmp	r3, #10
 8016b50:	d105      	bne.n	8016b5e <etharp_find_entry+0x5e>
 8016b52:	7dfb      	ldrb	r3, [r7, #23]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d102      	bne.n	8016b5e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016b58:	8c3b      	ldrh	r3, [r7, #32]
 8016b5a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8016b5c:	e095      	b.n	8016c8a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016b5e:	7dfb      	ldrb	r3, [r7, #23]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	f000 8092 	beq.w	8016c8a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016b66:	7dfb      	ldrb	r3, [r7, #23]
 8016b68:	2b01      	cmp	r3, #1
 8016b6a:	d009      	beq.n	8016b80 <etharp_find_entry+0x80>
 8016b6c:	7dfb      	ldrb	r3, [r7, #23]
 8016b6e:	2b01      	cmp	r3, #1
 8016b70:	d806      	bhi.n	8016b80 <etharp_find_entry+0x80>
 8016b72:	4b99      	ldr	r3, [pc, #612]	@ (8016dd8 <etharp_find_entry+0x2d8>)
 8016b74:	f240 1223 	movw	r2, #291	@ 0x123
 8016b78:	4998      	ldr	r1, [pc, #608]	@ (8016ddc <etharp_find_entry+0x2dc>)
 8016b7a:	4899      	ldr	r0, [pc, #612]	@ (8016de0 <etharp_find_entry+0x2e0>)
 8016b7c:	f002 fd2e 	bl	80195dc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d020      	beq.n	8016bc8 <etharp_find_entry+0xc8>
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	6819      	ldr	r1, [r3, #0]
 8016b8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b8e:	4891      	ldr	r0, [pc, #580]	@ (8016dd4 <etharp_find_entry+0x2d4>)
 8016b90:	4613      	mov	r3, r2
 8016b92:	005b      	lsls	r3, r3, #1
 8016b94:	4413      	add	r3, r2
 8016b96:	00db      	lsls	r3, r3, #3
 8016b98:	4403      	add	r3, r0
 8016b9a:	3304      	adds	r3, #4
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	4299      	cmp	r1, r3
 8016ba0:	d112      	bne.n	8016bc8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d00c      	beq.n	8016bc2 <etharp_find_entry+0xc2>
 8016ba8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016bac:	4989      	ldr	r1, [pc, #548]	@ (8016dd4 <etharp_find_entry+0x2d4>)
 8016bae:	4613      	mov	r3, r2
 8016bb0:	005b      	lsls	r3, r3, #1
 8016bb2:	4413      	add	r3, r2
 8016bb4:	00db      	lsls	r3, r3, #3
 8016bb6:	440b      	add	r3, r1
 8016bb8:	3308      	adds	r3, #8
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	687a      	ldr	r2, [r7, #4]
 8016bbe:	429a      	cmp	r2, r3
 8016bc0:	d102      	bne.n	8016bc8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016bc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016bc6:	e100      	b.n	8016dca <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016bc8:	7dfb      	ldrb	r3, [r7, #23]
 8016bca:	2b01      	cmp	r3, #1
 8016bcc:	d140      	bne.n	8016c50 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016bce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016bd2:	4980      	ldr	r1, [pc, #512]	@ (8016dd4 <etharp_find_entry+0x2d4>)
 8016bd4:	4613      	mov	r3, r2
 8016bd6:	005b      	lsls	r3, r3, #1
 8016bd8:	4413      	add	r3, r2
 8016bda:	00db      	lsls	r3, r3, #3
 8016bdc:	440b      	add	r3, r1
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d01a      	beq.n	8016c1a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016be4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016be8:	497a      	ldr	r1, [pc, #488]	@ (8016dd4 <etharp_find_entry+0x2d4>)
 8016bea:	4613      	mov	r3, r2
 8016bec:	005b      	lsls	r3, r3, #1
 8016bee:	4413      	add	r3, r2
 8016bf0:	00db      	lsls	r3, r3, #3
 8016bf2:	440b      	add	r3, r1
 8016bf4:	3312      	adds	r3, #18
 8016bf6:	881b      	ldrh	r3, [r3, #0]
 8016bf8:	8bba      	ldrh	r2, [r7, #28]
 8016bfa:	429a      	cmp	r2, r3
 8016bfc:	d845      	bhi.n	8016c8a <etharp_find_entry+0x18a>
            old_queue = i;
 8016bfe:	8c3b      	ldrh	r3, [r7, #32]
 8016c00:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016c02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c06:	4973      	ldr	r1, [pc, #460]	@ (8016dd4 <etharp_find_entry+0x2d4>)
 8016c08:	4613      	mov	r3, r2
 8016c0a:	005b      	lsls	r3, r3, #1
 8016c0c:	4413      	add	r3, r2
 8016c0e:	00db      	lsls	r3, r3, #3
 8016c10:	440b      	add	r3, r1
 8016c12:	3312      	adds	r3, #18
 8016c14:	881b      	ldrh	r3, [r3, #0]
 8016c16:	83bb      	strh	r3, [r7, #28]
 8016c18:	e037      	b.n	8016c8a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016c1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c1e:	496d      	ldr	r1, [pc, #436]	@ (8016dd4 <etharp_find_entry+0x2d4>)
 8016c20:	4613      	mov	r3, r2
 8016c22:	005b      	lsls	r3, r3, #1
 8016c24:	4413      	add	r3, r2
 8016c26:	00db      	lsls	r3, r3, #3
 8016c28:	440b      	add	r3, r1
 8016c2a:	3312      	adds	r3, #18
 8016c2c:	881b      	ldrh	r3, [r3, #0]
 8016c2e:	8b7a      	ldrh	r2, [r7, #26]
 8016c30:	429a      	cmp	r2, r3
 8016c32:	d82a      	bhi.n	8016c8a <etharp_find_entry+0x18a>
            old_pending = i;
 8016c34:	8c3b      	ldrh	r3, [r7, #32]
 8016c36:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8016c38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c3c:	4965      	ldr	r1, [pc, #404]	@ (8016dd4 <etharp_find_entry+0x2d4>)
 8016c3e:	4613      	mov	r3, r2
 8016c40:	005b      	lsls	r3, r3, #1
 8016c42:	4413      	add	r3, r2
 8016c44:	00db      	lsls	r3, r3, #3
 8016c46:	440b      	add	r3, r1
 8016c48:	3312      	adds	r3, #18
 8016c4a:	881b      	ldrh	r3, [r3, #0]
 8016c4c:	837b      	strh	r3, [r7, #26]
 8016c4e:	e01c      	b.n	8016c8a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016c50:	7dfb      	ldrb	r3, [r7, #23]
 8016c52:	2b01      	cmp	r3, #1
 8016c54:	d919      	bls.n	8016c8a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016c56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c5a:	495e      	ldr	r1, [pc, #376]	@ (8016dd4 <etharp_find_entry+0x2d4>)
 8016c5c:	4613      	mov	r3, r2
 8016c5e:	005b      	lsls	r3, r3, #1
 8016c60:	4413      	add	r3, r2
 8016c62:	00db      	lsls	r3, r3, #3
 8016c64:	440b      	add	r3, r1
 8016c66:	3312      	adds	r3, #18
 8016c68:	881b      	ldrh	r3, [r3, #0]
 8016c6a:	8b3a      	ldrh	r2, [r7, #24]
 8016c6c:	429a      	cmp	r2, r3
 8016c6e:	d80c      	bhi.n	8016c8a <etharp_find_entry+0x18a>
            old_stable = i;
 8016c70:	8c3b      	ldrh	r3, [r7, #32]
 8016c72:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8016c74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c78:	4956      	ldr	r1, [pc, #344]	@ (8016dd4 <etharp_find_entry+0x2d4>)
 8016c7a:	4613      	mov	r3, r2
 8016c7c:	005b      	lsls	r3, r3, #1
 8016c7e:	4413      	add	r3, r2
 8016c80:	00db      	lsls	r3, r3, #3
 8016c82:	440b      	add	r3, r1
 8016c84:	3312      	adds	r3, #18
 8016c86:	881b      	ldrh	r3, [r3, #0]
 8016c88:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016c8a:	8c3b      	ldrh	r3, [r7, #32]
 8016c8c:	3301      	adds	r3, #1
 8016c8e:	b29b      	uxth	r3, r3
 8016c90:	843b      	strh	r3, [r7, #32]
 8016c92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c96:	2b09      	cmp	r3, #9
 8016c98:	f77f af4c 	ble.w	8016b34 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016c9c:	7afb      	ldrb	r3, [r7, #11]
 8016c9e:	f003 0302 	and.w	r3, r3, #2
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d108      	bne.n	8016cb8 <etharp_find_entry+0x1b8>
 8016ca6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016caa:	2b0a      	cmp	r3, #10
 8016cac:	d107      	bne.n	8016cbe <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016cae:	7afb      	ldrb	r3, [r7, #11]
 8016cb0:	f003 0301 	and.w	r3, r3, #1
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d102      	bne.n	8016cbe <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8016cbc:	e085      	b.n	8016dca <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016cbe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016cc2:	2b09      	cmp	r3, #9
 8016cc4:	dc02      	bgt.n	8016ccc <etharp_find_entry+0x1cc>
    i = empty;
 8016cc6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016cc8:	843b      	strh	r3, [r7, #32]
 8016cca:	e039      	b.n	8016d40 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016ccc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8016cd0:	2b09      	cmp	r3, #9
 8016cd2:	dc14      	bgt.n	8016cfe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016cd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016cd6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016cd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cdc:	493d      	ldr	r1, [pc, #244]	@ (8016dd4 <etharp_find_entry+0x2d4>)
 8016cde:	4613      	mov	r3, r2
 8016ce0:	005b      	lsls	r3, r3, #1
 8016ce2:	4413      	add	r3, r2
 8016ce4:	00db      	lsls	r3, r3, #3
 8016ce6:	440b      	add	r3, r1
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d018      	beq.n	8016d20 <etharp_find_entry+0x220>
 8016cee:	4b3a      	ldr	r3, [pc, #232]	@ (8016dd8 <etharp_find_entry+0x2d8>)
 8016cf0:	f240 126d 	movw	r2, #365	@ 0x16d
 8016cf4:	493b      	ldr	r1, [pc, #236]	@ (8016de4 <etharp_find_entry+0x2e4>)
 8016cf6:	483a      	ldr	r0, [pc, #232]	@ (8016de0 <etharp_find_entry+0x2e0>)
 8016cf8:	f002 fc70 	bl	80195dc <iprintf>
 8016cfc:	e010      	b.n	8016d20 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016cfe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8016d02:	2b09      	cmp	r3, #9
 8016d04:	dc02      	bgt.n	8016d0c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016d06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016d08:	843b      	strh	r3, [r7, #32]
 8016d0a:	e009      	b.n	8016d20 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016d0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016d10:	2b09      	cmp	r3, #9
 8016d12:	dc02      	bgt.n	8016d1a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016d14:	8bfb      	ldrh	r3, [r7, #30]
 8016d16:	843b      	strh	r3, [r7, #32]
 8016d18:	e002      	b.n	8016d20 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8016d1e:	e054      	b.n	8016dca <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016d20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016d24:	2b09      	cmp	r3, #9
 8016d26:	dd06      	ble.n	8016d36 <etharp_find_entry+0x236>
 8016d28:	4b2b      	ldr	r3, [pc, #172]	@ (8016dd8 <etharp_find_entry+0x2d8>)
 8016d2a:	f240 127f 	movw	r2, #383	@ 0x17f
 8016d2e:	492e      	ldr	r1, [pc, #184]	@ (8016de8 <etharp_find_entry+0x2e8>)
 8016d30:	482b      	ldr	r0, [pc, #172]	@ (8016de0 <etharp_find_entry+0x2e0>)
 8016d32:	f002 fc53 	bl	80195dc <iprintf>
    etharp_free_entry(i);
 8016d36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f7ff fe06 	bl	801694c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016d40:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016d44:	2b09      	cmp	r3, #9
 8016d46:	dd06      	ble.n	8016d56 <etharp_find_entry+0x256>
 8016d48:	4b23      	ldr	r3, [pc, #140]	@ (8016dd8 <etharp_find_entry+0x2d8>)
 8016d4a:	f240 1283 	movw	r2, #387	@ 0x183
 8016d4e:	4926      	ldr	r1, [pc, #152]	@ (8016de8 <etharp_find_entry+0x2e8>)
 8016d50:	4823      	ldr	r0, [pc, #140]	@ (8016de0 <etharp_find_entry+0x2e0>)
 8016d52:	f002 fc43 	bl	80195dc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016d56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d5a:	491e      	ldr	r1, [pc, #120]	@ (8016dd4 <etharp_find_entry+0x2d4>)
 8016d5c:	4613      	mov	r3, r2
 8016d5e:	005b      	lsls	r3, r3, #1
 8016d60:	4413      	add	r3, r2
 8016d62:	00db      	lsls	r3, r3, #3
 8016d64:	440b      	add	r3, r1
 8016d66:	3314      	adds	r3, #20
 8016d68:	781b      	ldrb	r3, [r3, #0]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d006      	beq.n	8016d7c <etharp_find_entry+0x27c>
 8016d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8016dd8 <etharp_find_entry+0x2d8>)
 8016d70:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8016d74:	491d      	ldr	r1, [pc, #116]	@ (8016dec <etharp_find_entry+0x2ec>)
 8016d76:	481a      	ldr	r0, [pc, #104]	@ (8016de0 <etharp_find_entry+0x2e0>)
 8016d78:	f002 fc30 	bl	80195dc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d00b      	beq.n	8016d9a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016d82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	6819      	ldr	r1, [r3, #0]
 8016d8a:	4812      	ldr	r0, [pc, #72]	@ (8016dd4 <etharp_find_entry+0x2d4>)
 8016d8c:	4613      	mov	r3, r2
 8016d8e:	005b      	lsls	r3, r3, #1
 8016d90:	4413      	add	r3, r2
 8016d92:	00db      	lsls	r3, r3, #3
 8016d94:	4403      	add	r3, r0
 8016d96:	3304      	adds	r3, #4
 8016d98:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016d9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d9e:	490d      	ldr	r1, [pc, #52]	@ (8016dd4 <etharp_find_entry+0x2d4>)
 8016da0:	4613      	mov	r3, r2
 8016da2:	005b      	lsls	r3, r3, #1
 8016da4:	4413      	add	r3, r2
 8016da6:	00db      	lsls	r3, r3, #3
 8016da8:	440b      	add	r3, r1
 8016daa:	3312      	adds	r3, #18
 8016dac:	2200      	movs	r2, #0
 8016dae:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016db0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016db4:	4907      	ldr	r1, [pc, #28]	@ (8016dd4 <etharp_find_entry+0x2d4>)
 8016db6:	4613      	mov	r3, r2
 8016db8:	005b      	lsls	r3, r3, #1
 8016dba:	4413      	add	r3, r2
 8016dbc:	00db      	lsls	r3, r3, #3
 8016dbe:	440b      	add	r3, r1
 8016dc0:	3308      	adds	r3, #8
 8016dc2:	687a      	ldr	r2, [r7, #4]
 8016dc4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016dc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016dca:	4618      	mov	r0, r3
 8016dcc:	3728      	adds	r7, #40	@ 0x28
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	bd80      	pop	{r7, pc}
 8016dd2:	bf00      	nop
 8016dd4:	2400826c 	.word	0x2400826c
 8016dd8:	0801de7c 	.word	0x0801de7c
 8016ddc:	0801deb4 	.word	0x0801deb4
 8016de0:	0801def4 	.word	0x0801def4
 8016de4:	0801df1c 	.word	0x0801df1c
 8016de8:	0801df34 	.word	0x0801df34
 8016dec:	0801df48 	.word	0x0801df48

08016df0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b088      	sub	sp, #32
 8016df4:	af02      	add	r7, sp, #8
 8016df6:	60f8      	str	r0, [r7, #12]
 8016df8:	60b9      	str	r1, [r7, #8]
 8016dfa:	607a      	str	r2, [r7, #4]
 8016dfc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016e04:	2b06      	cmp	r3, #6
 8016e06:	d006      	beq.n	8016e16 <etharp_update_arp_entry+0x26>
 8016e08:	4b48      	ldr	r3, [pc, #288]	@ (8016f2c <etharp_update_arp_entry+0x13c>)
 8016e0a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8016e0e:	4948      	ldr	r1, [pc, #288]	@ (8016f30 <etharp_update_arp_entry+0x140>)
 8016e10:	4848      	ldr	r0, [pc, #288]	@ (8016f34 <etharp_update_arp_entry+0x144>)
 8016e12:	f002 fbe3 	bl	80195dc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016e16:	68bb      	ldr	r3, [r7, #8]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d012      	beq.n	8016e42 <etharp_update_arp_entry+0x52>
 8016e1c:	68bb      	ldr	r3, [r7, #8]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d00e      	beq.n	8016e42 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016e24:	68bb      	ldr	r3, [r7, #8]
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	68f9      	ldr	r1, [r7, #12]
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f001 f924 	bl	8018078 <ip4_addr_isbroadcast_u32>
 8016e30:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d105      	bne.n	8016e42 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016e36:	68bb      	ldr	r3, [r7, #8]
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016e3e:	2be0      	cmp	r3, #224	@ 0xe0
 8016e40:	d102      	bne.n	8016e48 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016e42:	f06f 030f 	mvn.w	r3, #15
 8016e46:	e06c      	b.n	8016f22 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016e48:	78fb      	ldrb	r3, [r7, #3]
 8016e4a:	68fa      	ldr	r2, [r7, #12]
 8016e4c:	4619      	mov	r1, r3
 8016e4e:	68b8      	ldr	r0, [r7, #8]
 8016e50:	f7ff fe56 	bl	8016b00 <etharp_find_entry>
 8016e54:	4603      	mov	r3, r0
 8016e56:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016e58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	da02      	bge.n	8016e66 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016e60:	8afb      	ldrh	r3, [r7, #22]
 8016e62:	b25b      	sxtb	r3, r3
 8016e64:	e05d      	b.n	8016f22 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016e66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016e6a:	4933      	ldr	r1, [pc, #204]	@ (8016f38 <etharp_update_arp_entry+0x148>)
 8016e6c:	4613      	mov	r3, r2
 8016e6e:	005b      	lsls	r3, r3, #1
 8016e70:	4413      	add	r3, r2
 8016e72:	00db      	lsls	r3, r3, #3
 8016e74:	440b      	add	r3, r1
 8016e76:	3314      	adds	r3, #20
 8016e78:	2202      	movs	r2, #2
 8016e7a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016e7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016e80:	492d      	ldr	r1, [pc, #180]	@ (8016f38 <etharp_update_arp_entry+0x148>)
 8016e82:	4613      	mov	r3, r2
 8016e84:	005b      	lsls	r3, r3, #1
 8016e86:	4413      	add	r3, r2
 8016e88:	00db      	lsls	r3, r3, #3
 8016e8a:	440b      	add	r3, r1
 8016e8c:	3308      	adds	r3, #8
 8016e8e:	68fa      	ldr	r2, [r7, #12]
 8016e90:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016e92:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016e96:	4613      	mov	r3, r2
 8016e98:	005b      	lsls	r3, r3, #1
 8016e9a:	4413      	add	r3, r2
 8016e9c:	00db      	lsls	r3, r3, #3
 8016e9e:	3308      	adds	r3, #8
 8016ea0:	4a25      	ldr	r2, [pc, #148]	@ (8016f38 <etharp_update_arp_entry+0x148>)
 8016ea2:	4413      	add	r3, r2
 8016ea4:	3304      	adds	r3, #4
 8016ea6:	2206      	movs	r2, #6
 8016ea8:	6879      	ldr	r1, [r7, #4]
 8016eaa:	4618      	mov	r0, r3
 8016eac:	f003 fbcf 	bl	801a64e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016eb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016eb4:	4920      	ldr	r1, [pc, #128]	@ (8016f38 <etharp_update_arp_entry+0x148>)
 8016eb6:	4613      	mov	r3, r2
 8016eb8:	005b      	lsls	r3, r3, #1
 8016eba:	4413      	add	r3, r2
 8016ebc:	00db      	lsls	r3, r3, #3
 8016ebe:	440b      	add	r3, r1
 8016ec0:	3312      	adds	r3, #18
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016ec6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016eca:	491b      	ldr	r1, [pc, #108]	@ (8016f38 <etharp_update_arp_entry+0x148>)
 8016ecc:	4613      	mov	r3, r2
 8016ece:	005b      	lsls	r3, r3, #1
 8016ed0:	4413      	add	r3, r2
 8016ed2:	00db      	lsls	r3, r3, #3
 8016ed4:	440b      	add	r3, r1
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d021      	beq.n	8016f20 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016edc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ee0:	4915      	ldr	r1, [pc, #84]	@ (8016f38 <etharp_update_arp_entry+0x148>)
 8016ee2:	4613      	mov	r3, r2
 8016ee4:	005b      	lsls	r3, r3, #1
 8016ee6:	4413      	add	r3, r2
 8016ee8:	00db      	lsls	r3, r3, #3
 8016eea:	440b      	add	r3, r1
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016ef0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ef4:	4910      	ldr	r1, [pc, #64]	@ (8016f38 <etharp_update_arp_entry+0x148>)
 8016ef6:	4613      	mov	r3, r2
 8016ef8:	005b      	lsls	r3, r3, #1
 8016efa:	4413      	add	r3, r2
 8016efc:	00db      	lsls	r3, r3, #3
 8016efe:	440b      	add	r3, r1
 8016f00:	2200      	movs	r2, #0
 8016f02:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8016f0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016f0e:	9300      	str	r3, [sp, #0]
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	6939      	ldr	r1, [r7, #16]
 8016f14:	68f8      	ldr	r0, [r7, #12]
 8016f16:	f001 ffbd 	bl	8018e94 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016f1a:	6938      	ldr	r0, [r7, #16]
 8016f1c:	f7f9 fa70 	bl	8010400 <pbuf_free>
  }
  return ERR_OK;
 8016f20:	2300      	movs	r3, #0
}
 8016f22:	4618      	mov	r0, r3
 8016f24:	3718      	adds	r7, #24
 8016f26:	46bd      	mov	sp, r7
 8016f28:	bd80      	pop	{r7, pc}
 8016f2a:	bf00      	nop
 8016f2c:	0801de7c 	.word	0x0801de7c
 8016f30:	0801df74 	.word	0x0801df74
 8016f34:	0801def4 	.word	0x0801def4
 8016f38:	2400826c 	.word	0x2400826c

08016f3c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b084      	sub	sp, #16
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016f44:	2300      	movs	r3, #0
 8016f46:	60fb      	str	r3, [r7, #12]
 8016f48:	e01e      	b.n	8016f88 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016f4a:	4913      	ldr	r1, [pc, #76]	@ (8016f98 <etharp_cleanup_netif+0x5c>)
 8016f4c:	68fa      	ldr	r2, [r7, #12]
 8016f4e:	4613      	mov	r3, r2
 8016f50:	005b      	lsls	r3, r3, #1
 8016f52:	4413      	add	r3, r2
 8016f54:	00db      	lsls	r3, r3, #3
 8016f56:	440b      	add	r3, r1
 8016f58:	3314      	adds	r3, #20
 8016f5a:	781b      	ldrb	r3, [r3, #0]
 8016f5c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016f5e:	7afb      	ldrb	r3, [r7, #11]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d00e      	beq.n	8016f82 <etharp_cleanup_netif+0x46>
 8016f64:	490c      	ldr	r1, [pc, #48]	@ (8016f98 <etharp_cleanup_netif+0x5c>)
 8016f66:	68fa      	ldr	r2, [r7, #12]
 8016f68:	4613      	mov	r3, r2
 8016f6a:	005b      	lsls	r3, r3, #1
 8016f6c:	4413      	add	r3, r2
 8016f6e:	00db      	lsls	r3, r3, #3
 8016f70:	440b      	add	r3, r1
 8016f72:	3308      	adds	r3, #8
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	687a      	ldr	r2, [r7, #4]
 8016f78:	429a      	cmp	r2, r3
 8016f7a:	d102      	bne.n	8016f82 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016f7c:	68f8      	ldr	r0, [r7, #12]
 8016f7e:	f7ff fce5 	bl	801694c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	3301      	adds	r3, #1
 8016f86:	60fb      	str	r3, [r7, #12]
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	2b09      	cmp	r3, #9
 8016f8c:	dddd      	ble.n	8016f4a <etharp_cleanup_netif+0xe>
    }
  }
}
 8016f8e:	bf00      	nop
 8016f90:	bf00      	nop
 8016f92:	3710      	adds	r7, #16
 8016f94:	46bd      	mov	sp, r7
 8016f96:	bd80      	pop	{r7, pc}
 8016f98:	2400826c 	.word	0x2400826c

08016f9c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016f9c:	b5b0      	push	{r4, r5, r7, lr}
 8016f9e:	b08a      	sub	sp, #40	@ 0x28
 8016fa0:	af04      	add	r7, sp, #16
 8016fa2:	6078      	str	r0, [r7, #4]
 8016fa4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016fa6:	683b      	ldr	r3, [r7, #0]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d107      	bne.n	8016fbc <etharp_input+0x20>
 8016fac:	4b3d      	ldr	r3, [pc, #244]	@ (80170a4 <etharp_input+0x108>)
 8016fae:	f240 228a 	movw	r2, #650	@ 0x28a
 8016fb2:	493d      	ldr	r1, [pc, #244]	@ (80170a8 <etharp_input+0x10c>)
 8016fb4:	483d      	ldr	r0, [pc, #244]	@ (80170ac <etharp_input+0x110>)
 8016fb6:	f002 fb11 	bl	80195dc <iprintf>
 8016fba:	e06f      	b.n	801709c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	685b      	ldr	r3, [r3, #4]
 8016fc0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016fc2:	693b      	ldr	r3, [r7, #16]
 8016fc4:	881b      	ldrh	r3, [r3, #0]
 8016fc6:	b29b      	uxth	r3, r3
 8016fc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016fcc:	d10c      	bne.n	8016fe8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016fce:	693b      	ldr	r3, [r7, #16]
 8016fd0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016fd2:	2b06      	cmp	r3, #6
 8016fd4:	d108      	bne.n	8016fe8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016fd6:	693b      	ldr	r3, [r7, #16]
 8016fd8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016fda:	2b04      	cmp	r3, #4
 8016fdc:	d104      	bne.n	8016fe8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016fde:	693b      	ldr	r3, [r7, #16]
 8016fe0:	885b      	ldrh	r3, [r3, #2]
 8016fe2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016fe4:	2b08      	cmp	r3, #8
 8016fe6:	d003      	beq.n	8016ff0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016fe8:	6878      	ldr	r0, [r7, #4]
 8016fea:	f7f9 fa09 	bl	8010400 <pbuf_free>
    return;
 8016fee:	e055      	b.n	801709c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016ff0:	693b      	ldr	r3, [r7, #16]
 8016ff2:	330e      	adds	r3, #14
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016ff8:	693b      	ldr	r3, [r7, #16]
 8016ffa:	3318      	adds	r3, #24
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017000:	683b      	ldr	r3, [r7, #0]
 8017002:	3304      	adds	r3, #4
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	2b00      	cmp	r3, #0
 8017008:	d102      	bne.n	8017010 <etharp_input+0x74>
    for_us = 0;
 801700a:	2300      	movs	r3, #0
 801700c:	75fb      	strb	r3, [r7, #23]
 801700e:	e009      	b.n	8017024 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017010:	68ba      	ldr	r2, [r7, #8]
 8017012:	683b      	ldr	r3, [r7, #0]
 8017014:	3304      	adds	r3, #4
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	429a      	cmp	r2, r3
 801701a:	bf0c      	ite	eq
 801701c:	2301      	moveq	r3, #1
 801701e:	2300      	movne	r3, #0
 8017020:	b2db      	uxtb	r3, r3
 8017022:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017024:	693b      	ldr	r3, [r7, #16]
 8017026:	f103 0208 	add.w	r2, r3, #8
 801702a:	7dfb      	ldrb	r3, [r7, #23]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d001      	beq.n	8017034 <etharp_input+0x98>
 8017030:	2301      	movs	r3, #1
 8017032:	e000      	b.n	8017036 <etharp_input+0x9a>
 8017034:	2302      	movs	r3, #2
 8017036:	f107 010c 	add.w	r1, r7, #12
 801703a:	6838      	ldr	r0, [r7, #0]
 801703c:	f7ff fed8 	bl	8016df0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017040:	693b      	ldr	r3, [r7, #16]
 8017042:	88db      	ldrh	r3, [r3, #6]
 8017044:	b29b      	uxth	r3, r3
 8017046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801704a:	d003      	beq.n	8017054 <etharp_input+0xb8>
 801704c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017050:	d01e      	beq.n	8017090 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017052:	e020      	b.n	8017096 <etharp_input+0xfa>
      if (for_us) {
 8017054:	7dfb      	ldrb	r3, [r7, #23]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d01c      	beq.n	8017094 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801705a:	683b      	ldr	r3, [r7, #0]
 801705c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8017060:	693b      	ldr	r3, [r7, #16]
 8017062:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017066:	683b      	ldr	r3, [r7, #0]
 8017068:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801706c:	683b      	ldr	r3, [r7, #0]
 801706e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017070:	693a      	ldr	r2, [r7, #16]
 8017072:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017074:	2102      	movs	r1, #2
 8017076:	9103      	str	r1, [sp, #12]
 8017078:	f107 010c 	add.w	r1, r7, #12
 801707c:	9102      	str	r1, [sp, #8]
 801707e:	9201      	str	r2, [sp, #4]
 8017080:	9300      	str	r3, [sp, #0]
 8017082:	462b      	mov	r3, r5
 8017084:	4622      	mov	r2, r4
 8017086:	4601      	mov	r1, r0
 8017088:	6838      	ldr	r0, [r7, #0]
 801708a:	f000 faeb 	bl	8017664 <etharp_raw>
      break;
 801708e:	e001      	b.n	8017094 <etharp_input+0xf8>
      break;
 8017090:	bf00      	nop
 8017092:	e000      	b.n	8017096 <etharp_input+0xfa>
      break;
 8017094:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017096:	6878      	ldr	r0, [r7, #4]
 8017098:	f7f9 f9b2 	bl	8010400 <pbuf_free>
}
 801709c:	3718      	adds	r7, #24
 801709e:	46bd      	mov	sp, r7
 80170a0:	bdb0      	pop	{r4, r5, r7, pc}
 80170a2:	bf00      	nop
 80170a4:	0801de7c 	.word	0x0801de7c
 80170a8:	0801dfcc 	.word	0x0801dfcc
 80170ac:	0801def4 	.word	0x0801def4

080170b0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80170b0:	b580      	push	{r7, lr}
 80170b2:	b086      	sub	sp, #24
 80170b4:	af02      	add	r7, sp, #8
 80170b6:	60f8      	str	r0, [r7, #12]
 80170b8:	60b9      	str	r1, [r7, #8]
 80170ba:	4613      	mov	r3, r2
 80170bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80170be:	79fa      	ldrb	r2, [r7, #7]
 80170c0:	4944      	ldr	r1, [pc, #272]	@ (80171d4 <etharp_output_to_arp_index+0x124>)
 80170c2:	4613      	mov	r3, r2
 80170c4:	005b      	lsls	r3, r3, #1
 80170c6:	4413      	add	r3, r2
 80170c8:	00db      	lsls	r3, r3, #3
 80170ca:	440b      	add	r3, r1
 80170cc:	3314      	adds	r3, #20
 80170ce:	781b      	ldrb	r3, [r3, #0]
 80170d0:	2b01      	cmp	r3, #1
 80170d2:	d806      	bhi.n	80170e2 <etharp_output_to_arp_index+0x32>
 80170d4:	4b40      	ldr	r3, [pc, #256]	@ (80171d8 <etharp_output_to_arp_index+0x128>)
 80170d6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80170da:	4940      	ldr	r1, [pc, #256]	@ (80171dc <etharp_output_to_arp_index+0x12c>)
 80170dc:	4840      	ldr	r0, [pc, #256]	@ (80171e0 <etharp_output_to_arp_index+0x130>)
 80170de:	f002 fa7d 	bl	80195dc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80170e2:	79fa      	ldrb	r2, [r7, #7]
 80170e4:	493b      	ldr	r1, [pc, #236]	@ (80171d4 <etharp_output_to_arp_index+0x124>)
 80170e6:	4613      	mov	r3, r2
 80170e8:	005b      	lsls	r3, r3, #1
 80170ea:	4413      	add	r3, r2
 80170ec:	00db      	lsls	r3, r3, #3
 80170ee:	440b      	add	r3, r1
 80170f0:	3314      	adds	r3, #20
 80170f2:	781b      	ldrb	r3, [r3, #0]
 80170f4:	2b02      	cmp	r3, #2
 80170f6:	d153      	bne.n	80171a0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80170f8:	79fa      	ldrb	r2, [r7, #7]
 80170fa:	4936      	ldr	r1, [pc, #216]	@ (80171d4 <etharp_output_to_arp_index+0x124>)
 80170fc:	4613      	mov	r3, r2
 80170fe:	005b      	lsls	r3, r3, #1
 8017100:	4413      	add	r3, r2
 8017102:	00db      	lsls	r3, r3, #3
 8017104:	440b      	add	r3, r1
 8017106:	3312      	adds	r3, #18
 8017108:	881b      	ldrh	r3, [r3, #0]
 801710a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801710e:	d919      	bls.n	8017144 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017110:	79fa      	ldrb	r2, [r7, #7]
 8017112:	4613      	mov	r3, r2
 8017114:	005b      	lsls	r3, r3, #1
 8017116:	4413      	add	r3, r2
 8017118:	00db      	lsls	r3, r3, #3
 801711a:	4a2e      	ldr	r2, [pc, #184]	@ (80171d4 <etharp_output_to_arp_index+0x124>)
 801711c:	4413      	add	r3, r2
 801711e:	3304      	adds	r3, #4
 8017120:	4619      	mov	r1, r3
 8017122:	68f8      	ldr	r0, [r7, #12]
 8017124:	f000 fb4c 	bl	80177c0 <etharp_request>
 8017128:	4603      	mov	r3, r0
 801712a:	2b00      	cmp	r3, #0
 801712c:	d138      	bne.n	80171a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801712e:	79fa      	ldrb	r2, [r7, #7]
 8017130:	4928      	ldr	r1, [pc, #160]	@ (80171d4 <etharp_output_to_arp_index+0x124>)
 8017132:	4613      	mov	r3, r2
 8017134:	005b      	lsls	r3, r3, #1
 8017136:	4413      	add	r3, r2
 8017138:	00db      	lsls	r3, r3, #3
 801713a:	440b      	add	r3, r1
 801713c:	3314      	adds	r3, #20
 801713e:	2203      	movs	r2, #3
 8017140:	701a      	strb	r2, [r3, #0]
 8017142:	e02d      	b.n	80171a0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017144:	79fa      	ldrb	r2, [r7, #7]
 8017146:	4923      	ldr	r1, [pc, #140]	@ (80171d4 <etharp_output_to_arp_index+0x124>)
 8017148:	4613      	mov	r3, r2
 801714a:	005b      	lsls	r3, r3, #1
 801714c:	4413      	add	r3, r2
 801714e:	00db      	lsls	r3, r3, #3
 8017150:	440b      	add	r3, r1
 8017152:	3312      	adds	r3, #18
 8017154:	881b      	ldrh	r3, [r3, #0]
 8017156:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801715a:	d321      	bcc.n	80171a0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801715c:	79fa      	ldrb	r2, [r7, #7]
 801715e:	4613      	mov	r3, r2
 8017160:	005b      	lsls	r3, r3, #1
 8017162:	4413      	add	r3, r2
 8017164:	00db      	lsls	r3, r3, #3
 8017166:	4a1b      	ldr	r2, [pc, #108]	@ (80171d4 <etharp_output_to_arp_index+0x124>)
 8017168:	4413      	add	r3, r2
 801716a:	1d19      	adds	r1, r3, #4
 801716c:	79fa      	ldrb	r2, [r7, #7]
 801716e:	4613      	mov	r3, r2
 8017170:	005b      	lsls	r3, r3, #1
 8017172:	4413      	add	r3, r2
 8017174:	00db      	lsls	r3, r3, #3
 8017176:	3308      	adds	r3, #8
 8017178:	4a16      	ldr	r2, [pc, #88]	@ (80171d4 <etharp_output_to_arp_index+0x124>)
 801717a:	4413      	add	r3, r2
 801717c:	3304      	adds	r3, #4
 801717e:	461a      	mov	r2, r3
 8017180:	68f8      	ldr	r0, [r7, #12]
 8017182:	f000 fafb 	bl	801777c <etharp_request_dst>
 8017186:	4603      	mov	r3, r0
 8017188:	2b00      	cmp	r3, #0
 801718a:	d109      	bne.n	80171a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801718c:	79fa      	ldrb	r2, [r7, #7]
 801718e:	4911      	ldr	r1, [pc, #68]	@ (80171d4 <etharp_output_to_arp_index+0x124>)
 8017190:	4613      	mov	r3, r2
 8017192:	005b      	lsls	r3, r3, #1
 8017194:	4413      	add	r3, r2
 8017196:	00db      	lsls	r3, r3, #3
 8017198:	440b      	add	r3, r1
 801719a:	3314      	adds	r3, #20
 801719c:	2203      	movs	r2, #3
 801719e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80171a6:	79fa      	ldrb	r2, [r7, #7]
 80171a8:	4613      	mov	r3, r2
 80171aa:	005b      	lsls	r3, r3, #1
 80171ac:	4413      	add	r3, r2
 80171ae:	00db      	lsls	r3, r3, #3
 80171b0:	3308      	adds	r3, #8
 80171b2:	4a08      	ldr	r2, [pc, #32]	@ (80171d4 <etharp_output_to_arp_index+0x124>)
 80171b4:	4413      	add	r3, r2
 80171b6:	3304      	adds	r3, #4
 80171b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80171bc:	9200      	str	r2, [sp, #0]
 80171be:	460a      	mov	r2, r1
 80171c0:	68b9      	ldr	r1, [r7, #8]
 80171c2:	68f8      	ldr	r0, [r7, #12]
 80171c4:	f001 fe66 	bl	8018e94 <ethernet_output>
 80171c8:	4603      	mov	r3, r0
}
 80171ca:	4618      	mov	r0, r3
 80171cc:	3710      	adds	r7, #16
 80171ce:	46bd      	mov	sp, r7
 80171d0:	bd80      	pop	{r7, pc}
 80171d2:	bf00      	nop
 80171d4:	2400826c 	.word	0x2400826c
 80171d8:	0801de7c 	.word	0x0801de7c
 80171dc:	0801dfec 	.word	0x0801dfec
 80171e0:	0801def4 	.word	0x0801def4

080171e4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	b08a      	sub	sp, #40	@ 0x28
 80171e8:	af02      	add	r7, sp, #8
 80171ea:	60f8      	str	r0, [r7, #12]
 80171ec:	60b9      	str	r1, [r7, #8]
 80171ee:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d106      	bne.n	8017208 <etharp_output+0x24>
 80171fa:	4b73      	ldr	r3, [pc, #460]	@ (80173c8 <etharp_output+0x1e4>)
 80171fc:	f240 321e 	movw	r2, #798	@ 0x31e
 8017200:	4972      	ldr	r1, [pc, #456]	@ (80173cc <etharp_output+0x1e8>)
 8017202:	4873      	ldr	r0, [pc, #460]	@ (80173d0 <etharp_output+0x1ec>)
 8017204:	f002 f9ea 	bl	80195dc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017208:	68bb      	ldr	r3, [r7, #8]
 801720a:	2b00      	cmp	r3, #0
 801720c:	d106      	bne.n	801721c <etharp_output+0x38>
 801720e:	4b6e      	ldr	r3, [pc, #440]	@ (80173c8 <etharp_output+0x1e4>)
 8017210:	f240 321f 	movw	r2, #799	@ 0x31f
 8017214:	496f      	ldr	r1, [pc, #444]	@ (80173d4 <etharp_output+0x1f0>)
 8017216:	486e      	ldr	r0, [pc, #440]	@ (80173d0 <etharp_output+0x1ec>)
 8017218:	f002 f9e0 	bl	80195dc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	2b00      	cmp	r3, #0
 8017220:	d106      	bne.n	8017230 <etharp_output+0x4c>
 8017222:	4b69      	ldr	r3, [pc, #420]	@ (80173c8 <etharp_output+0x1e4>)
 8017224:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8017228:	496b      	ldr	r1, [pc, #428]	@ (80173d8 <etharp_output+0x1f4>)
 801722a:	4869      	ldr	r0, [pc, #420]	@ (80173d0 <etharp_output+0x1ec>)
 801722c:	f002 f9d6 	bl	80195dc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	68f9      	ldr	r1, [r7, #12]
 8017236:	4618      	mov	r0, r3
 8017238:	f000 ff1e 	bl	8018078 <ip4_addr_isbroadcast_u32>
 801723c:	4603      	mov	r3, r0
 801723e:	2b00      	cmp	r3, #0
 8017240:	d002      	beq.n	8017248 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017242:	4b66      	ldr	r3, [pc, #408]	@ (80173dc <etharp_output+0x1f8>)
 8017244:	61fb      	str	r3, [r7, #28]
 8017246:	e0af      	b.n	80173a8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017250:	2be0      	cmp	r3, #224	@ 0xe0
 8017252:	d118      	bne.n	8017286 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017254:	2301      	movs	r3, #1
 8017256:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017258:	2300      	movs	r3, #0
 801725a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801725c:	235e      	movs	r3, #94	@ 0x5e
 801725e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	3301      	adds	r3, #1
 8017264:	781b      	ldrb	r3, [r3, #0]
 8017266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801726a:	b2db      	uxtb	r3, r3
 801726c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	3302      	adds	r3, #2
 8017272:	781b      	ldrb	r3, [r3, #0]
 8017274:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	3303      	adds	r3, #3
 801727a:	781b      	ldrb	r3, [r3, #0]
 801727c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801727e:	f107 0310 	add.w	r3, r7, #16
 8017282:	61fb      	str	r3, [r7, #28]
 8017284:	e090      	b.n	80173a8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	681a      	ldr	r2, [r3, #0]
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	3304      	adds	r3, #4
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	405a      	eors	r2, r3
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	3308      	adds	r3, #8
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	4013      	ands	r3, r2
 801729a:	2b00      	cmp	r3, #0
 801729c:	d012      	beq.n	80172c4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80172a4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80172a8:	4293      	cmp	r3, r2
 80172aa:	d00b      	beq.n	80172c4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	330c      	adds	r3, #12
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d003      	beq.n	80172be <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	330c      	adds	r3, #12
 80172ba:	61bb      	str	r3, [r7, #24]
 80172bc:	e002      	b.n	80172c4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80172be:	f06f 0303 	mvn.w	r3, #3
 80172c2:	e07d      	b.n	80173c0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80172c4:	4b46      	ldr	r3, [pc, #280]	@ (80173e0 <etharp_output+0x1fc>)
 80172c6:	781b      	ldrb	r3, [r3, #0]
 80172c8:	4619      	mov	r1, r3
 80172ca:	4a46      	ldr	r2, [pc, #280]	@ (80173e4 <etharp_output+0x200>)
 80172cc:	460b      	mov	r3, r1
 80172ce:	005b      	lsls	r3, r3, #1
 80172d0:	440b      	add	r3, r1
 80172d2:	00db      	lsls	r3, r3, #3
 80172d4:	4413      	add	r3, r2
 80172d6:	3314      	adds	r3, #20
 80172d8:	781b      	ldrb	r3, [r3, #0]
 80172da:	2b01      	cmp	r3, #1
 80172dc:	d925      	bls.n	801732a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80172de:	4b40      	ldr	r3, [pc, #256]	@ (80173e0 <etharp_output+0x1fc>)
 80172e0:	781b      	ldrb	r3, [r3, #0]
 80172e2:	4619      	mov	r1, r3
 80172e4:	4a3f      	ldr	r2, [pc, #252]	@ (80173e4 <etharp_output+0x200>)
 80172e6:	460b      	mov	r3, r1
 80172e8:	005b      	lsls	r3, r3, #1
 80172ea:	440b      	add	r3, r1
 80172ec:	00db      	lsls	r3, r3, #3
 80172ee:	4413      	add	r3, r2
 80172f0:	3308      	adds	r3, #8
 80172f2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80172f4:	68fa      	ldr	r2, [r7, #12]
 80172f6:	429a      	cmp	r2, r3
 80172f8:	d117      	bne.n	801732a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80172fa:	69bb      	ldr	r3, [r7, #24]
 80172fc:	681a      	ldr	r2, [r3, #0]
 80172fe:	4b38      	ldr	r3, [pc, #224]	@ (80173e0 <etharp_output+0x1fc>)
 8017300:	781b      	ldrb	r3, [r3, #0]
 8017302:	4618      	mov	r0, r3
 8017304:	4937      	ldr	r1, [pc, #220]	@ (80173e4 <etharp_output+0x200>)
 8017306:	4603      	mov	r3, r0
 8017308:	005b      	lsls	r3, r3, #1
 801730a:	4403      	add	r3, r0
 801730c:	00db      	lsls	r3, r3, #3
 801730e:	440b      	add	r3, r1
 8017310:	3304      	adds	r3, #4
 8017312:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017314:	429a      	cmp	r2, r3
 8017316:	d108      	bne.n	801732a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017318:	4b31      	ldr	r3, [pc, #196]	@ (80173e0 <etharp_output+0x1fc>)
 801731a:	781b      	ldrb	r3, [r3, #0]
 801731c:	461a      	mov	r2, r3
 801731e:	68b9      	ldr	r1, [r7, #8]
 8017320:	68f8      	ldr	r0, [r7, #12]
 8017322:	f7ff fec5 	bl	80170b0 <etharp_output_to_arp_index>
 8017326:	4603      	mov	r3, r0
 8017328:	e04a      	b.n	80173c0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801732a:	2300      	movs	r3, #0
 801732c:	75fb      	strb	r3, [r7, #23]
 801732e:	e031      	b.n	8017394 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017330:	7dfa      	ldrb	r2, [r7, #23]
 8017332:	492c      	ldr	r1, [pc, #176]	@ (80173e4 <etharp_output+0x200>)
 8017334:	4613      	mov	r3, r2
 8017336:	005b      	lsls	r3, r3, #1
 8017338:	4413      	add	r3, r2
 801733a:	00db      	lsls	r3, r3, #3
 801733c:	440b      	add	r3, r1
 801733e:	3314      	adds	r3, #20
 8017340:	781b      	ldrb	r3, [r3, #0]
 8017342:	2b01      	cmp	r3, #1
 8017344:	d923      	bls.n	801738e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8017346:	7dfa      	ldrb	r2, [r7, #23]
 8017348:	4926      	ldr	r1, [pc, #152]	@ (80173e4 <etharp_output+0x200>)
 801734a:	4613      	mov	r3, r2
 801734c:	005b      	lsls	r3, r3, #1
 801734e:	4413      	add	r3, r2
 8017350:	00db      	lsls	r3, r3, #3
 8017352:	440b      	add	r3, r1
 8017354:	3308      	adds	r3, #8
 8017356:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017358:	68fa      	ldr	r2, [r7, #12]
 801735a:	429a      	cmp	r2, r3
 801735c:	d117      	bne.n	801738e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801735e:	69bb      	ldr	r3, [r7, #24]
 8017360:	6819      	ldr	r1, [r3, #0]
 8017362:	7dfa      	ldrb	r2, [r7, #23]
 8017364:	481f      	ldr	r0, [pc, #124]	@ (80173e4 <etharp_output+0x200>)
 8017366:	4613      	mov	r3, r2
 8017368:	005b      	lsls	r3, r3, #1
 801736a:	4413      	add	r3, r2
 801736c:	00db      	lsls	r3, r3, #3
 801736e:	4403      	add	r3, r0
 8017370:	3304      	adds	r3, #4
 8017372:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017374:	4299      	cmp	r1, r3
 8017376:	d10a      	bne.n	801738e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017378:	4a19      	ldr	r2, [pc, #100]	@ (80173e0 <etharp_output+0x1fc>)
 801737a:	7dfb      	ldrb	r3, [r7, #23]
 801737c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801737e:	7dfb      	ldrb	r3, [r7, #23]
 8017380:	461a      	mov	r2, r3
 8017382:	68b9      	ldr	r1, [r7, #8]
 8017384:	68f8      	ldr	r0, [r7, #12]
 8017386:	f7ff fe93 	bl	80170b0 <etharp_output_to_arp_index>
 801738a:	4603      	mov	r3, r0
 801738c:	e018      	b.n	80173c0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801738e:	7dfb      	ldrb	r3, [r7, #23]
 8017390:	3301      	adds	r3, #1
 8017392:	75fb      	strb	r3, [r7, #23]
 8017394:	7dfb      	ldrb	r3, [r7, #23]
 8017396:	2b09      	cmp	r3, #9
 8017398:	d9ca      	bls.n	8017330 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801739a:	68ba      	ldr	r2, [r7, #8]
 801739c:	69b9      	ldr	r1, [r7, #24]
 801739e:	68f8      	ldr	r0, [r7, #12]
 80173a0:	f000 f822 	bl	80173e8 <etharp_query>
 80173a4:	4603      	mov	r3, r0
 80173a6:	e00b      	b.n	80173c0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80173ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80173b2:	9300      	str	r3, [sp, #0]
 80173b4:	69fb      	ldr	r3, [r7, #28]
 80173b6:	68b9      	ldr	r1, [r7, #8]
 80173b8:	68f8      	ldr	r0, [r7, #12]
 80173ba:	f001 fd6b 	bl	8018e94 <ethernet_output>
 80173be:	4603      	mov	r3, r0
}
 80173c0:	4618      	mov	r0, r3
 80173c2:	3720      	adds	r7, #32
 80173c4:	46bd      	mov	sp, r7
 80173c6:	bd80      	pop	{r7, pc}
 80173c8:	0801de7c 	.word	0x0801de7c
 80173cc:	0801dfcc 	.word	0x0801dfcc
 80173d0:	0801def4 	.word	0x0801def4
 80173d4:	0801e01c 	.word	0x0801e01c
 80173d8:	0801dfbc 	.word	0x0801dfbc
 80173dc:	0801e6c8 	.word	0x0801e6c8
 80173e0:	2400835c 	.word	0x2400835c
 80173e4:	2400826c 	.word	0x2400826c

080173e8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80173e8:	b580      	push	{r7, lr}
 80173ea:	b08c      	sub	sp, #48	@ 0x30
 80173ec:	af02      	add	r7, sp, #8
 80173ee:	60f8      	str	r0, [r7, #12]
 80173f0:	60b9      	str	r1, [r7, #8]
 80173f2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	3326      	adds	r3, #38	@ 0x26
 80173f8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80173fa:	23ff      	movs	r3, #255	@ 0xff
 80173fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8017400:	2300      	movs	r3, #0
 8017402:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017404:	68bb      	ldr	r3, [r7, #8]
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	68f9      	ldr	r1, [r7, #12]
 801740a:	4618      	mov	r0, r3
 801740c:	f000 fe34 	bl	8018078 <ip4_addr_isbroadcast_u32>
 8017410:	4603      	mov	r3, r0
 8017412:	2b00      	cmp	r3, #0
 8017414:	d10c      	bne.n	8017430 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017416:	68bb      	ldr	r3, [r7, #8]
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801741e:	2be0      	cmp	r3, #224	@ 0xe0
 8017420:	d006      	beq.n	8017430 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017422:	68bb      	ldr	r3, [r7, #8]
 8017424:	2b00      	cmp	r3, #0
 8017426:	d003      	beq.n	8017430 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017428:	68bb      	ldr	r3, [r7, #8]
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d102      	bne.n	8017436 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017430:	f06f 030f 	mvn.w	r3, #15
 8017434:	e101      	b.n	801763a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017436:	68fa      	ldr	r2, [r7, #12]
 8017438:	2101      	movs	r1, #1
 801743a:	68b8      	ldr	r0, [r7, #8]
 801743c:	f7ff fb60 	bl	8016b00 <etharp_find_entry>
 8017440:	4603      	mov	r3, r0
 8017442:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017444:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017448:	2b00      	cmp	r3, #0
 801744a:	da02      	bge.n	8017452 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801744c:	8a7b      	ldrh	r3, [r7, #18]
 801744e:	b25b      	sxtb	r3, r3
 8017450:	e0f3      	b.n	801763a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017452:	8a7b      	ldrh	r3, [r7, #18]
 8017454:	2b7e      	cmp	r3, #126	@ 0x7e
 8017456:	d906      	bls.n	8017466 <etharp_query+0x7e>
 8017458:	4b7a      	ldr	r3, [pc, #488]	@ (8017644 <etharp_query+0x25c>)
 801745a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801745e:	497a      	ldr	r1, [pc, #488]	@ (8017648 <etharp_query+0x260>)
 8017460:	487a      	ldr	r0, [pc, #488]	@ (801764c <etharp_query+0x264>)
 8017462:	f002 f8bb 	bl	80195dc <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017466:	8a7b      	ldrh	r3, [r7, #18]
 8017468:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801746a:	7c7a      	ldrb	r2, [r7, #17]
 801746c:	4978      	ldr	r1, [pc, #480]	@ (8017650 <etharp_query+0x268>)
 801746e:	4613      	mov	r3, r2
 8017470:	005b      	lsls	r3, r3, #1
 8017472:	4413      	add	r3, r2
 8017474:	00db      	lsls	r3, r3, #3
 8017476:	440b      	add	r3, r1
 8017478:	3314      	adds	r3, #20
 801747a:	781b      	ldrb	r3, [r3, #0]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d115      	bne.n	80174ac <etharp_query+0xc4>
    is_new_entry = 1;
 8017480:	2301      	movs	r3, #1
 8017482:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017484:	7c7a      	ldrb	r2, [r7, #17]
 8017486:	4972      	ldr	r1, [pc, #456]	@ (8017650 <etharp_query+0x268>)
 8017488:	4613      	mov	r3, r2
 801748a:	005b      	lsls	r3, r3, #1
 801748c:	4413      	add	r3, r2
 801748e:	00db      	lsls	r3, r3, #3
 8017490:	440b      	add	r3, r1
 8017492:	3314      	adds	r3, #20
 8017494:	2201      	movs	r2, #1
 8017496:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017498:	7c7a      	ldrb	r2, [r7, #17]
 801749a:	496d      	ldr	r1, [pc, #436]	@ (8017650 <etharp_query+0x268>)
 801749c:	4613      	mov	r3, r2
 801749e:	005b      	lsls	r3, r3, #1
 80174a0:	4413      	add	r3, r2
 80174a2:	00db      	lsls	r3, r3, #3
 80174a4:	440b      	add	r3, r1
 80174a6:	3308      	adds	r3, #8
 80174a8:	68fa      	ldr	r2, [r7, #12]
 80174aa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80174ac:	7c7a      	ldrb	r2, [r7, #17]
 80174ae:	4968      	ldr	r1, [pc, #416]	@ (8017650 <etharp_query+0x268>)
 80174b0:	4613      	mov	r3, r2
 80174b2:	005b      	lsls	r3, r3, #1
 80174b4:	4413      	add	r3, r2
 80174b6:	00db      	lsls	r3, r3, #3
 80174b8:	440b      	add	r3, r1
 80174ba:	3314      	adds	r3, #20
 80174bc:	781b      	ldrb	r3, [r3, #0]
 80174be:	2b01      	cmp	r3, #1
 80174c0:	d011      	beq.n	80174e6 <etharp_query+0xfe>
 80174c2:	7c7a      	ldrb	r2, [r7, #17]
 80174c4:	4962      	ldr	r1, [pc, #392]	@ (8017650 <etharp_query+0x268>)
 80174c6:	4613      	mov	r3, r2
 80174c8:	005b      	lsls	r3, r3, #1
 80174ca:	4413      	add	r3, r2
 80174cc:	00db      	lsls	r3, r3, #3
 80174ce:	440b      	add	r3, r1
 80174d0:	3314      	adds	r3, #20
 80174d2:	781b      	ldrb	r3, [r3, #0]
 80174d4:	2b01      	cmp	r3, #1
 80174d6:	d806      	bhi.n	80174e6 <etharp_query+0xfe>
 80174d8:	4b5a      	ldr	r3, [pc, #360]	@ (8017644 <etharp_query+0x25c>)
 80174da:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80174de:	495d      	ldr	r1, [pc, #372]	@ (8017654 <etharp_query+0x26c>)
 80174e0:	485a      	ldr	r0, [pc, #360]	@ (801764c <etharp_query+0x264>)
 80174e2:	f002 f87b 	bl	80195dc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80174e6:	6a3b      	ldr	r3, [r7, #32]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d102      	bne.n	80174f2 <etharp_query+0x10a>
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d10c      	bne.n	801750c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80174f2:	68b9      	ldr	r1, [r7, #8]
 80174f4:	68f8      	ldr	r0, [r7, #12]
 80174f6:	f000 f963 	bl	80177c0 <etharp_request>
 80174fa:	4603      	mov	r3, r0
 80174fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d102      	bne.n	801750c <etharp_query+0x124>
      return result;
 8017506:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801750a:	e096      	b.n	801763a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d106      	bne.n	8017520 <etharp_query+0x138>
 8017512:	4b4c      	ldr	r3, [pc, #304]	@ (8017644 <etharp_query+0x25c>)
 8017514:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8017518:	494f      	ldr	r1, [pc, #316]	@ (8017658 <etharp_query+0x270>)
 801751a:	484c      	ldr	r0, [pc, #304]	@ (801764c <etharp_query+0x264>)
 801751c:	f002 f85e 	bl	80195dc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017520:	7c7a      	ldrb	r2, [r7, #17]
 8017522:	494b      	ldr	r1, [pc, #300]	@ (8017650 <etharp_query+0x268>)
 8017524:	4613      	mov	r3, r2
 8017526:	005b      	lsls	r3, r3, #1
 8017528:	4413      	add	r3, r2
 801752a:	00db      	lsls	r3, r3, #3
 801752c:	440b      	add	r3, r1
 801752e:	3314      	adds	r3, #20
 8017530:	781b      	ldrb	r3, [r3, #0]
 8017532:	2b01      	cmp	r3, #1
 8017534:	d917      	bls.n	8017566 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017536:	4a49      	ldr	r2, [pc, #292]	@ (801765c <etharp_query+0x274>)
 8017538:	7c7b      	ldrb	r3, [r7, #17]
 801753a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801753c:	7c7a      	ldrb	r2, [r7, #17]
 801753e:	4613      	mov	r3, r2
 8017540:	005b      	lsls	r3, r3, #1
 8017542:	4413      	add	r3, r2
 8017544:	00db      	lsls	r3, r3, #3
 8017546:	3308      	adds	r3, #8
 8017548:	4a41      	ldr	r2, [pc, #260]	@ (8017650 <etharp_query+0x268>)
 801754a:	4413      	add	r3, r2
 801754c:	3304      	adds	r3, #4
 801754e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017552:	9200      	str	r2, [sp, #0]
 8017554:	697a      	ldr	r2, [r7, #20]
 8017556:	6879      	ldr	r1, [r7, #4]
 8017558:	68f8      	ldr	r0, [r7, #12]
 801755a:	f001 fc9b 	bl	8018e94 <ethernet_output>
 801755e:	4603      	mov	r3, r0
 8017560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017564:	e067      	b.n	8017636 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017566:	7c7a      	ldrb	r2, [r7, #17]
 8017568:	4939      	ldr	r1, [pc, #228]	@ (8017650 <etharp_query+0x268>)
 801756a:	4613      	mov	r3, r2
 801756c:	005b      	lsls	r3, r3, #1
 801756e:	4413      	add	r3, r2
 8017570:	00db      	lsls	r3, r3, #3
 8017572:	440b      	add	r3, r1
 8017574:	3314      	adds	r3, #20
 8017576:	781b      	ldrb	r3, [r3, #0]
 8017578:	2b01      	cmp	r3, #1
 801757a:	d15c      	bne.n	8017636 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801757c:	2300      	movs	r3, #0
 801757e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017584:	e01c      	b.n	80175c0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017586:	69fb      	ldr	r3, [r7, #28]
 8017588:	895a      	ldrh	r2, [r3, #10]
 801758a:	69fb      	ldr	r3, [r7, #28]
 801758c:	891b      	ldrh	r3, [r3, #8]
 801758e:	429a      	cmp	r2, r3
 8017590:	d10a      	bne.n	80175a8 <etharp_query+0x1c0>
 8017592:	69fb      	ldr	r3, [r7, #28]
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d006      	beq.n	80175a8 <etharp_query+0x1c0>
 801759a:	4b2a      	ldr	r3, [pc, #168]	@ (8017644 <etharp_query+0x25c>)
 801759c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80175a0:	492f      	ldr	r1, [pc, #188]	@ (8017660 <etharp_query+0x278>)
 80175a2:	482a      	ldr	r0, [pc, #168]	@ (801764c <etharp_query+0x264>)
 80175a4:	f002 f81a 	bl	80195dc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80175a8:	69fb      	ldr	r3, [r7, #28]
 80175aa:	7b1b      	ldrb	r3, [r3, #12]
 80175ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d002      	beq.n	80175ba <etharp_query+0x1d2>
        copy_needed = 1;
 80175b4:	2301      	movs	r3, #1
 80175b6:	61bb      	str	r3, [r7, #24]
        break;
 80175b8:	e005      	b.n	80175c6 <etharp_query+0x1de>
      }
      p = p->next;
 80175ba:	69fb      	ldr	r3, [r7, #28]
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	61fb      	str	r3, [r7, #28]
    while (p) {
 80175c0:	69fb      	ldr	r3, [r7, #28]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d1df      	bne.n	8017586 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80175c6:	69bb      	ldr	r3, [r7, #24]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d007      	beq.n	80175dc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80175cc:	687a      	ldr	r2, [r7, #4]
 80175ce:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80175d2:	200e      	movs	r0, #14
 80175d4:	f7f9 f9b6 	bl	8010944 <pbuf_clone>
 80175d8:	61f8      	str	r0, [r7, #28]
 80175da:	e004      	b.n	80175e6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80175e0:	69f8      	ldr	r0, [r7, #28]
 80175e2:	f7f8 ffb3 	bl	801054c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80175e6:	69fb      	ldr	r3, [r7, #28]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d021      	beq.n	8017630 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80175ec:	7c7a      	ldrb	r2, [r7, #17]
 80175ee:	4918      	ldr	r1, [pc, #96]	@ (8017650 <etharp_query+0x268>)
 80175f0:	4613      	mov	r3, r2
 80175f2:	005b      	lsls	r3, r3, #1
 80175f4:	4413      	add	r3, r2
 80175f6:	00db      	lsls	r3, r3, #3
 80175f8:	440b      	add	r3, r1
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d00a      	beq.n	8017616 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017600:	7c7a      	ldrb	r2, [r7, #17]
 8017602:	4913      	ldr	r1, [pc, #76]	@ (8017650 <etharp_query+0x268>)
 8017604:	4613      	mov	r3, r2
 8017606:	005b      	lsls	r3, r3, #1
 8017608:	4413      	add	r3, r2
 801760a:	00db      	lsls	r3, r3, #3
 801760c:	440b      	add	r3, r1
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	4618      	mov	r0, r3
 8017612:	f7f8 fef5 	bl	8010400 <pbuf_free>
      }
      arp_table[i].q = p;
 8017616:	7c7a      	ldrb	r2, [r7, #17]
 8017618:	490d      	ldr	r1, [pc, #52]	@ (8017650 <etharp_query+0x268>)
 801761a:	4613      	mov	r3, r2
 801761c:	005b      	lsls	r3, r3, #1
 801761e:	4413      	add	r3, r2
 8017620:	00db      	lsls	r3, r3, #3
 8017622:	440b      	add	r3, r1
 8017624:	69fa      	ldr	r2, [r7, #28]
 8017626:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017628:	2300      	movs	r3, #0
 801762a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801762e:	e002      	b.n	8017636 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017630:	23ff      	movs	r3, #255	@ 0xff
 8017632:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8017636:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801763a:	4618      	mov	r0, r3
 801763c:	3728      	adds	r7, #40	@ 0x28
 801763e:	46bd      	mov	sp, r7
 8017640:	bd80      	pop	{r7, pc}
 8017642:	bf00      	nop
 8017644:	0801de7c 	.word	0x0801de7c
 8017648:	0801e028 	.word	0x0801e028
 801764c:	0801def4 	.word	0x0801def4
 8017650:	2400826c 	.word	0x2400826c
 8017654:	0801e038 	.word	0x0801e038
 8017658:	0801e01c 	.word	0x0801e01c
 801765c:	2400835c 	.word	0x2400835c
 8017660:	0801e060 	.word	0x0801e060

08017664 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b08a      	sub	sp, #40	@ 0x28
 8017668:	af02      	add	r7, sp, #8
 801766a:	60f8      	str	r0, [r7, #12]
 801766c:	60b9      	str	r1, [r7, #8]
 801766e:	607a      	str	r2, [r7, #4]
 8017670:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017672:	2300      	movs	r3, #0
 8017674:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d106      	bne.n	801768a <etharp_raw+0x26>
 801767c:	4b3a      	ldr	r3, [pc, #232]	@ (8017768 <etharp_raw+0x104>)
 801767e:	f240 4257 	movw	r2, #1111	@ 0x457
 8017682:	493a      	ldr	r1, [pc, #232]	@ (801776c <etharp_raw+0x108>)
 8017684:	483a      	ldr	r0, [pc, #232]	@ (8017770 <etharp_raw+0x10c>)
 8017686:	f001 ffa9 	bl	80195dc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801768a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801768e:	211c      	movs	r1, #28
 8017690:	200e      	movs	r0, #14
 8017692:	f7f8 fbd1 	bl	800fe38 <pbuf_alloc>
 8017696:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017698:	69bb      	ldr	r3, [r7, #24]
 801769a:	2b00      	cmp	r3, #0
 801769c:	d102      	bne.n	80176a4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801769e:	f04f 33ff 	mov.w	r3, #4294967295
 80176a2:	e05d      	b.n	8017760 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80176a4:	69bb      	ldr	r3, [r7, #24]
 80176a6:	895b      	ldrh	r3, [r3, #10]
 80176a8:	2b1b      	cmp	r3, #27
 80176aa:	d806      	bhi.n	80176ba <etharp_raw+0x56>
 80176ac:	4b2e      	ldr	r3, [pc, #184]	@ (8017768 <etharp_raw+0x104>)
 80176ae:	f240 4262 	movw	r2, #1122	@ 0x462
 80176b2:	4930      	ldr	r1, [pc, #192]	@ (8017774 <etharp_raw+0x110>)
 80176b4:	482e      	ldr	r0, [pc, #184]	@ (8017770 <etharp_raw+0x10c>)
 80176b6:	f001 ff91 	bl	80195dc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80176ba:	69bb      	ldr	r3, [r7, #24]
 80176bc:	685b      	ldr	r3, [r3, #4]
 80176be:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80176c0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80176c2:	4618      	mov	r0, r3
 80176c4:	f7f7 f9e2 	bl	800ea8c <lwip_htons>
 80176c8:	4603      	mov	r3, r0
 80176ca:	461a      	mov	r2, r3
 80176cc:	697b      	ldr	r3, [r7, #20]
 80176ce:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80176d6:	2b06      	cmp	r3, #6
 80176d8:	d006      	beq.n	80176e8 <etharp_raw+0x84>
 80176da:	4b23      	ldr	r3, [pc, #140]	@ (8017768 <etharp_raw+0x104>)
 80176dc:	f240 4269 	movw	r2, #1129	@ 0x469
 80176e0:	4925      	ldr	r1, [pc, #148]	@ (8017778 <etharp_raw+0x114>)
 80176e2:	4823      	ldr	r0, [pc, #140]	@ (8017770 <etharp_raw+0x10c>)
 80176e4:	f001 ff7a 	bl	80195dc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80176e8:	697b      	ldr	r3, [r7, #20]
 80176ea:	3308      	adds	r3, #8
 80176ec:	2206      	movs	r2, #6
 80176ee:	6839      	ldr	r1, [r7, #0]
 80176f0:	4618      	mov	r0, r3
 80176f2:	f002 ffac 	bl	801a64e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80176f6:	697b      	ldr	r3, [r7, #20]
 80176f8:	3312      	adds	r3, #18
 80176fa:	2206      	movs	r2, #6
 80176fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80176fe:	4618      	mov	r0, r3
 8017700:	f002 ffa5 	bl	801a64e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017704:	697b      	ldr	r3, [r7, #20]
 8017706:	330e      	adds	r3, #14
 8017708:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801770a:	6812      	ldr	r2, [r2, #0]
 801770c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801770e:	697b      	ldr	r3, [r7, #20]
 8017710:	3318      	adds	r3, #24
 8017712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017714:	6812      	ldr	r2, [r2, #0]
 8017716:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017718:	697b      	ldr	r3, [r7, #20]
 801771a:	2200      	movs	r2, #0
 801771c:	701a      	strb	r2, [r3, #0]
 801771e:	2200      	movs	r2, #0
 8017720:	f042 0201 	orr.w	r2, r2, #1
 8017724:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017726:	697b      	ldr	r3, [r7, #20]
 8017728:	2200      	movs	r2, #0
 801772a:	f042 0208 	orr.w	r2, r2, #8
 801772e:	709a      	strb	r2, [r3, #2]
 8017730:	2200      	movs	r2, #0
 8017732:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017734:	697b      	ldr	r3, [r7, #20]
 8017736:	2206      	movs	r2, #6
 8017738:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801773a:	697b      	ldr	r3, [r7, #20]
 801773c:	2204      	movs	r2, #4
 801773e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017740:	f640 0306 	movw	r3, #2054	@ 0x806
 8017744:	9300      	str	r3, [sp, #0]
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	68ba      	ldr	r2, [r7, #8]
 801774a:	69b9      	ldr	r1, [r7, #24]
 801774c:	68f8      	ldr	r0, [r7, #12]
 801774e:	f001 fba1 	bl	8018e94 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017752:	69b8      	ldr	r0, [r7, #24]
 8017754:	f7f8 fe54 	bl	8010400 <pbuf_free>
  p = NULL;
 8017758:	2300      	movs	r3, #0
 801775a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801775c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017760:	4618      	mov	r0, r3
 8017762:	3720      	adds	r7, #32
 8017764:	46bd      	mov	sp, r7
 8017766:	bd80      	pop	{r7, pc}
 8017768:	0801de7c 	.word	0x0801de7c
 801776c:	0801dfcc 	.word	0x0801dfcc
 8017770:	0801def4 	.word	0x0801def4
 8017774:	0801e07c 	.word	0x0801e07c
 8017778:	0801e0b0 	.word	0x0801e0b0

0801777c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801777c:	b580      	push	{r7, lr}
 801777e:	b088      	sub	sp, #32
 8017780:	af04      	add	r7, sp, #16
 8017782:	60f8      	str	r0, [r7, #12]
 8017784:	60b9      	str	r1, [r7, #8]
 8017786:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017798:	2201      	movs	r2, #1
 801779a:	9203      	str	r2, [sp, #12]
 801779c:	68ba      	ldr	r2, [r7, #8]
 801779e:	9202      	str	r2, [sp, #8]
 80177a0:	4a06      	ldr	r2, [pc, #24]	@ (80177bc <etharp_request_dst+0x40>)
 80177a2:	9201      	str	r2, [sp, #4]
 80177a4:	9300      	str	r3, [sp, #0]
 80177a6:	4603      	mov	r3, r0
 80177a8:	687a      	ldr	r2, [r7, #4]
 80177aa:	68f8      	ldr	r0, [r7, #12]
 80177ac:	f7ff ff5a 	bl	8017664 <etharp_raw>
 80177b0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80177b2:	4618      	mov	r0, r3
 80177b4:	3710      	adds	r7, #16
 80177b6:	46bd      	mov	sp, r7
 80177b8:	bd80      	pop	{r7, pc}
 80177ba:	bf00      	nop
 80177bc:	0801e6d0 	.word	0x0801e6d0

080177c0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80177c0:	b580      	push	{r7, lr}
 80177c2:	b082      	sub	sp, #8
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	6078      	str	r0, [r7, #4]
 80177c8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80177ca:	4a05      	ldr	r2, [pc, #20]	@ (80177e0 <etharp_request+0x20>)
 80177cc:	6839      	ldr	r1, [r7, #0]
 80177ce:	6878      	ldr	r0, [r7, #4]
 80177d0:	f7ff ffd4 	bl	801777c <etharp_request_dst>
 80177d4:	4603      	mov	r3, r0
}
 80177d6:	4618      	mov	r0, r3
 80177d8:	3708      	adds	r7, #8
 80177da:	46bd      	mov	sp, r7
 80177dc:	bd80      	pop	{r7, pc}
 80177de:	bf00      	nop
 80177e0:	0801e6c8 	.word	0x0801e6c8

080177e4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b08e      	sub	sp, #56	@ 0x38
 80177e8:	af04      	add	r7, sp, #16
 80177ea:	6078      	str	r0, [r7, #4]
 80177ec:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80177ee:	4b87      	ldr	r3, [pc, #540]	@ (8017a0c <icmp_input+0x228>)
 80177f0:	689b      	ldr	r3, [r3, #8]
 80177f2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80177f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177f6:	781b      	ldrb	r3, [r3, #0]
 80177f8:	f003 030f 	and.w	r3, r3, #15
 80177fc:	b2db      	uxtb	r3, r3
 80177fe:	009b      	lsls	r3, r3, #2
 8017800:	b2db      	uxtb	r3, r3
 8017802:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8017804:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017806:	2b13      	cmp	r3, #19
 8017808:	f240 80e8 	bls.w	80179dc <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	895b      	ldrh	r3, [r3, #10]
 8017810:	2b03      	cmp	r3, #3
 8017812:	f240 80e5 	bls.w	80179e0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	685b      	ldr	r3, [r3, #4]
 801781a:	781b      	ldrb	r3, [r3, #0]
 801781c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017820:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8017824:	2b00      	cmp	r3, #0
 8017826:	f000 80d2 	beq.w	80179ce <icmp_input+0x1ea>
 801782a:	2b08      	cmp	r3, #8
 801782c:	f040 80d2 	bne.w	80179d4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017830:	4b77      	ldr	r3, [pc, #476]	@ (8017a10 <icmp_input+0x22c>)
 8017832:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017834:	4b75      	ldr	r3, [pc, #468]	@ (8017a0c <icmp_input+0x228>)
 8017836:	695b      	ldr	r3, [r3, #20]
 8017838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801783c:	2be0      	cmp	r3, #224	@ 0xe0
 801783e:	f000 80d6 	beq.w	80179ee <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017842:	4b72      	ldr	r3, [pc, #456]	@ (8017a0c <icmp_input+0x228>)
 8017844:	695b      	ldr	r3, [r3, #20]
 8017846:	4a71      	ldr	r2, [pc, #452]	@ (8017a0c <icmp_input+0x228>)
 8017848:	6812      	ldr	r2, [r2, #0]
 801784a:	4611      	mov	r1, r2
 801784c:	4618      	mov	r0, r3
 801784e:	f000 fc13 	bl	8018078 <ip4_addr_isbroadcast_u32>
 8017852:	4603      	mov	r3, r0
 8017854:	2b00      	cmp	r3, #0
 8017856:	f040 80cc 	bne.w	80179f2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	891b      	ldrh	r3, [r3, #8]
 801785e:	2b07      	cmp	r3, #7
 8017860:	f240 80c0 	bls.w	80179e4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8017864:	6878      	ldr	r0, [r7, #4]
 8017866:	f7f7 f9af 	bl	800ebc8 <inet_chksum_pbuf>
 801786a:	4603      	mov	r3, r0
 801786c:	2b00      	cmp	r3, #0
 801786e:	d003      	beq.n	8017878 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8017870:	6878      	ldr	r0, [r7, #4]
 8017872:	f7f8 fdc5 	bl	8010400 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8017876:	e0c5      	b.n	8017a04 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017878:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801787a:	330e      	adds	r3, #14
 801787c:	4619      	mov	r1, r3
 801787e:	6878      	ldr	r0, [r7, #4]
 8017880:	f7f8 fd28 	bl	80102d4 <pbuf_add_header>
 8017884:	4603      	mov	r3, r0
 8017886:	2b00      	cmp	r3, #0
 8017888:	d04b      	beq.n	8017922 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	891a      	ldrh	r2, [r3, #8]
 801788e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017890:	4413      	add	r3, r2
 8017892:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	891b      	ldrh	r3, [r3, #8]
 8017898:	8b7a      	ldrh	r2, [r7, #26]
 801789a:	429a      	cmp	r2, r3
 801789c:	f0c0 80ab 	bcc.w	80179f6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80178a0:	8b7b      	ldrh	r3, [r7, #26]
 80178a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80178a6:	4619      	mov	r1, r3
 80178a8:	200e      	movs	r0, #14
 80178aa:	f7f8 fac5 	bl	800fe38 <pbuf_alloc>
 80178ae:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80178b0:	697b      	ldr	r3, [r7, #20]
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	f000 80a1 	beq.w	80179fa <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80178b8:	697b      	ldr	r3, [r7, #20]
 80178ba:	895b      	ldrh	r3, [r3, #10]
 80178bc:	461a      	mov	r2, r3
 80178be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80178c0:	3308      	adds	r3, #8
 80178c2:	429a      	cmp	r2, r3
 80178c4:	d203      	bcs.n	80178ce <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80178c6:	6978      	ldr	r0, [r7, #20]
 80178c8:	f7f8 fd9a 	bl	8010400 <pbuf_free>
          goto icmperr;
 80178cc:	e096      	b.n	80179fc <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80178ce:	697b      	ldr	r3, [r7, #20]
 80178d0:	685b      	ldr	r3, [r3, #4]
 80178d2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80178d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80178d6:	4618      	mov	r0, r3
 80178d8:	f002 feb9 	bl	801a64e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80178dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80178de:	4619      	mov	r1, r3
 80178e0:	6978      	ldr	r0, [r7, #20]
 80178e2:	f7f8 fd07 	bl	80102f4 <pbuf_remove_header>
 80178e6:	4603      	mov	r3, r0
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d009      	beq.n	8017900 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80178ec:	4b49      	ldr	r3, [pc, #292]	@ (8017a14 <icmp_input+0x230>)
 80178ee:	22b6      	movs	r2, #182	@ 0xb6
 80178f0:	4949      	ldr	r1, [pc, #292]	@ (8017a18 <icmp_input+0x234>)
 80178f2:	484a      	ldr	r0, [pc, #296]	@ (8017a1c <icmp_input+0x238>)
 80178f4:	f001 fe72 	bl	80195dc <iprintf>
          pbuf_free(r);
 80178f8:	6978      	ldr	r0, [r7, #20]
 80178fa:	f7f8 fd81 	bl	8010400 <pbuf_free>
          goto icmperr;
 80178fe:	e07d      	b.n	80179fc <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017900:	6879      	ldr	r1, [r7, #4]
 8017902:	6978      	ldr	r0, [r7, #20]
 8017904:	f7f8 feb0 	bl	8010668 <pbuf_copy>
 8017908:	4603      	mov	r3, r0
 801790a:	2b00      	cmp	r3, #0
 801790c:	d003      	beq.n	8017916 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801790e:	6978      	ldr	r0, [r7, #20]
 8017910:	f7f8 fd76 	bl	8010400 <pbuf_free>
          goto icmperr;
 8017914:	e072      	b.n	80179fc <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8017916:	6878      	ldr	r0, [r7, #4]
 8017918:	f7f8 fd72 	bl	8010400 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801791c:	697b      	ldr	r3, [r7, #20]
 801791e:	607b      	str	r3, [r7, #4]
 8017920:	e00f      	b.n	8017942 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017922:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017924:	330e      	adds	r3, #14
 8017926:	4619      	mov	r1, r3
 8017928:	6878      	ldr	r0, [r7, #4]
 801792a:	f7f8 fce3 	bl	80102f4 <pbuf_remove_header>
 801792e:	4603      	mov	r3, r0
 8017930:	2b00      	cmp	r3, #0
 8017932:	d006      	beq.n	8017942 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017934:	4b37      	ldr	r3, [pc, #220]	@ (8017a14 <icmp_input+0x230>)
 8017936:	22c7      	movs	r2, #199	@ 0xc7
 8017938:	4939      	ldr	r1, [pc, #228]	@ (8017a20 <icmp_input+0x23c>)
 801793a:	4838      	ldr	r0, [pc, #224]	@ (8017a1c <icmp_input+0x238>)
 801793c:	f001 fe4e 	bl	80195dc <iprintf>
          goto icmperr;
 8017940:	e05c      	b.n	80179fc <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	685b      	ldr	r3, [r3, #4]
 8017946:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017948:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801794a:	4619      	mov	r1, r3
 801794c:	6878      	ldr	r0, [r7, #4]
 801794e:	f7f8 fcc1 	bl	80102d4 <pbuf_add_header>
 8017952:	4603      	mov	r3, r0
 8017954:	2b00      	cmp	r3, #0
 8017956:	d13c      	bne.n	80179d2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	685b      	ldr	r3, [r3, #4]
 801795c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801795e:	69fb      	ldr	r3, [r7, #28]
 8017960:	681a      	ldr	r2, [r3, #0]
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017966:	4b29      	ldr	r3, [pc, #164]	@ (8017a0c <icmp_input+0x228>)
 8017968:	691a      	ldr	r2, [r3, #16]
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801796e:	693b      	ldr	r3, [r7, #16]
 8017970:	2200      	movs	r2, #0
 8017972:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8017974:	693b      	ldr	r3, [r7, #16]
 8017976:	885b      	ldrh	r3, [r3, #2]
 8017978:	b29b      	uxth	r3, r3
 801797a:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801797e:	4293      	cmp	r3, r2
 8017980:	d907      	bls.n	8017992 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8017982:	693b      	ldr	r3, [r7, #16]
 8017984:	885b      	ldrh	r3, [r3, #2]
 8017986:	b29b      	uxth	r3, r3
 8017988:	3309      	adds	r3, #9
 801798a:	b29a      	uxth	r2, r3
 801798c:	693b      	ldr	r3, [r7, #16]
 801798e:	805a      	strh	r2, [r3, #2]
 8017990:	e006      	b.n	80179a0 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8017992:	693b      	ldr	r3, [r7, #16]
 8017994:	885b      	ldrh	r3, [r3, #2]
 8017996:	b29b      	uxth	r3, r3
 8017998:	3308      	adds	r3, #8
 801799a:	b29a      	uxth	r2, r3
 801799c:	693b      	ldr	r3, [r7, #16]
 801799e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	22ff      	movs	r2, #255	@ 0xff
 80179a4:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	2200      	movs	r2, #0
 80179aa:	729a      	strb	r2, [r3, #10]
 80179ac:	2200      	movs	r2, #0
 80179ae:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80179b0:	683b      	ldr	r3, [r7, #0]
 80179b2:	9302      	str	r3, [sp, #8]
 80179b4:	2301      	movs	r3, #1
 80179b6:	9301      	str	r3, [sp, #4]
 80179b8:	2300      	movs	r3, #0
 80179ba:	9300      	str	r3, [sp, #0]
 80179bc:	23ff      	movs	r3, #255	@ 0xff
 80179be:	2200      	movs	r2, #0
 80179c0:	69f9      	ldr	r1, [r7, #28]
 80179c2:	6878      	ldr	r0, [r7, #4]
 80179c4:	f000 fa80 	bl	8017ec8 <ip4_output_if>
 80179c8:	4603      	mov	r3, r0
 80179ca:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80179cc:	e001      	b.n	80179d2 <icmp_input+0x1ee>
      break;
 80179ce:	bf00      	nop
 80179d0:	e000      	b.n	80179d4 <icmp_input+0x1f0>
      break;
 80179d2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80179d4:	6878      	ldr	r0, [r7, #4]
 80179d6:	f7f8 fd13 	bl	8010400 <pbuf_free>
  return;
 80179da:	e013      	b.n	8017a04 <icmp_input+0x220>
    goto lenerr;
 80179dc:	bf00      	nop
 80179de:	e002      	b.n	80179e6 <icmp_input+0x202>
    goto lenerr;
 80179e0:	bf00      	nop
 80179e2:	e000      	b.n	80179e6 <icmp_input+0x202>
        goto lenerr;
 80179e4:	bf00      	nop
lenerr:
  pbuf_free(p);
 80179e6:	6878      	ldr	r0, [r7, #4]
 80179e8:	f7f8 fd0a 	bl	8010400 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80179ec:	e00a      	b.n	8017a04 <icmp_input+0x220>
        goto icmperr;
 80179ee:	bf00      	nop
 80179f0:	e004      	b.n	80179fc <icmp_input+0x218>
        goto icmperr;
 80179f2:	bf00      	nop
 80179f4:	e002      	b.n	80179fc <icmp_input+0x218>
          goto icmperr;
 80179f6:	bf00      	nop
 80179f8:	e000      	b.n	80179fc <icmp_input+0x218>
          goto icmperr;
 80179fa:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80179fc:	6878      	ldr	r0, [r7, #4]
 80179fe:	f7f8 fcff 	bl	8010400 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017a02:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017a04:	3728      	adds	r7, #40	@ 0x28
 8017a06:	46bd      	mov	sp, r7
 8017a08:	bd80      	pop	{r7, pc}
 8017a0a:	bf00      	nop
 8017a0c:	2400510c 	.word	0x2400510c
 8017a10:	24005120 	.word	0x24005120
 8017a14:	0801e0f4 	.word	0x0801e0f4
 8017a18:	0801e12c 	.word	0x0801e12c
 8017a1c:	0801e164 	.word	0x0801e164
 8017a20:	0801e18c 	.word	0x0801e18c

08017a24 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017a24:	b580      	push	{r7, lr}
 8017a26:	b082      	sub	sp, #8
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
 8017a2c:	460b      	mov	r3, r1
 8017a2e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017a30:	78fb      	ldrb	r3, [r7, #3]
 8017a32:	461a      	mov	r2, r3
 8017a34:	2103      	movs	r1, #3
 8017a36:	6878      	ldr	r0, [r7, #4]
 8017a38:	f000 f814 	bl	8017a64 <icmp_send_response>
}
 8017a3c:	bf00      	nop
 8017a3e:	3708      	adds	r7, #8
 8017a40:	46bd      	mov	sp, r7
 8017a42:	bd80      	pop	{r7, pc}

08017a44 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b082      	sub	sp, #8
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	6078      	str	r0, [r7, #4]
 8017a4c:	460b      	mov	r3, r1
 8017a4e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017a50:	78fb      	ldrb	r3, [r7, #3]
 8017a52:	461a      	mov	r2, r3
 8017a54:	210b      	movs	r1, #11
 8017a56:	6878      	ldr	r0, [r7, #4]
 8017a58:	f000 f804 	bl	8017a64 <icmp_send_response>
}
 8017a5c:	bf00      	nop
 8017a5e:	3708      	adds	r7, #8
 8017a60:	46bd      	mov	sp, r7
 8017a62:	bd80      	pop	{r7, pc}

08017a64 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	b08c      	sub	sp, #48	@ 0x30
 8017a68:	af04      	add	r7, sp, #16
 8017a6a:	6078      	str	r0, [r7, #4]
 8017a6c:	460b      	mov	r3, r1
 8017a6e:	70fb      	strb	r3, [r7, #3]
 8017a70:	4613      	mov	r3, r2
 8017a72:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017a74:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017a78:	2124      	movs	r1, #36	@ 0x24
 8017a7a:	2022      	movs	r0, #34	@ 0x22
 8017a7c:	f7f8 f9dc 	bl	800fe38 <pbuf_alloc>
 8017a80:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017a82:	69fb      	ldr	r3, [r7, #28]
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d056      	beq.n	8017b36 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017a88:	69fb      	ldr	r3, [r7, #28]
 8017a8a:	895b      	ldrh	r3, [r3, #10]
 8017a8c:	2b23      	cmp	r3, #35	@ 0x23
 8017a8e:	d806      	bhi.n	8017a9e <icmp_send_response+0x3a>
 8017a90:	4b2b      	ldr	r3, [pc, #172]	@ (8017b40 <icmp_send_response+0xdc>)
 8017a92:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8017a96:	492b      	ldr	r1, [pc, #172]	@ (8017b44 <icmp_send_response+0xe0>)
 8017a98:	482b      	ldr	r0, [pc, #172]	@ (8017b48 <icmp_send_response+0xe4>)
 8017a9a:	f001 fd9f 	bl	80195dc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	685b      	ldr	r3, [r3, #4]
 8017aa2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017aa4:	69fb      	ldr	r3, [r7, #28]
 8017aa6:	685b      	ldr	r3, [r3, #4]
 8017aa8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017aaa:	697b      	ldr	r3, [r7, #20]
 8017aac:	78fa      	ldrb	r2, [r7, #3]
 8017aae:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017ab0:	697b      	ldr	r3, [r7, #20]
 8017ab2:	78ba      	ldrb	r2, [r7, #2]
 8017ab4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017ab6:	697b      	ldr	r3, [r7, #20]
 8017ab8:	2200      	movs	r2, #0
 8017aba:	711a      	strb	r2, [r3, #4]
 8017abc:	2200      	movs	r2, #0
 8017abe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017ac0:	697b      	ldr	r3, [r7, #20]
 8017ac2:	2200      	movs	r2, #0
 8017ac4:	719a      	strb	r2, [r3, #6]
 8017ac6:	2200      	movs	r2, #0
 8017ac8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017aca:	69fb      	ldr	r3, [r7, #28]
 8017acc:	685b      	ldr	r3, [r3, #4]
 8017ace:	f103 0008 	add.w	r0, r3, #8
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	685b      	ldr	r3, [r3, #4]
 8017ad6:	221c      	movs	r2, #28
 8017ad8:	4619      	mov	r1, r3
 8017ada:	f002 fdb8 	bl	801a64e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017ade:	69bb      	ldr	r3, [r7, #24]
 8017ae0:	68db      	ldr	r3, [r3, #12]
 8017ae2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017ae4:	f107 030c 	add.w	r3, r7, #12
 8017ae8:	4618      	mov	r0, r3
 8017aea:	f000 f82f 	bl	8017b4c <ip4_route>
 8017aee:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017af0:	693b      	ldr	r3, [r7, #16]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d01b      	beq.n	8017b2e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017af6:	697b      	ldr	r3, [r7, #20]
 8017af8:	2200      	movs	r2, #0
 8017afa:	709a      	strb	r2, [r3, #2]
 8017afc:	2200      	movs	r2, #0
 8017afe:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8017b00:	69fb      	ldr	r3, [r7, #28]
 8017b02:	895b      	ldrh	r3, [r3, #10]
 8017b04:	4619      	mov	r1, r3
 8017b06:	6978      	ldr	r0, [r7, #20]
 8017b08:	f7f7 f84c 	bl	800eba4 <inet_chksum>
 8017b0c:	4603      	mov	r3, r0
 8017b0e:	461a      	mov	r2, r3
 8017b10:	697b      	ldr	r3, [r7, #20]
 8017b12:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017b14:	f107 020c 	add.w	r2, r7, #12
 8017b18:	693b      	ldr	r3, [r7, #16]
 8017b1a:	9302      	str	r3, [sp, #8]
 8017b1c:	2301      	movs	r3, #1
 8017b1e:	9301      	str	r3, [sp, #4]
 8017b20:	2300      	movs	r3, #0
 8017b22:	9300      	str	r3, [sp, #0]
 8017b24:	23ff      	movs	r3, #255	@ 0xff
 8017b26:	2100      	movs	r1, #0
 8017b28:	69f8      	ldr	r0, [r7, #28]
 8017b2a:	f000 f9cd 	bl	8017ec8 <ip4_output_if>
  }
  pbuf_free(q);
 8017b2e:	69f8      	ldr	r0, [r7, #28]
 8017b30:	f7f8 fc66 	bl	8010400 <pbuf_free>
 8017b34:	e000      	b.n	8017b38 <icmp_send_response+0xd4>
    return;
 8017b36:	bf00      	nop
}
 8017b38:	3720      	adds	r7, #32
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	bd80      	pop	{r7, pc}
 8017b3e:	bf00      	nop
 8017b40:	0801e0f4 	.word	0x0801e0f4
 8017b44:	0801e1c0 	.word	0x0801e1c0
 8017b48:	0801e164 	.word	0x0801e164

08017b4c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017b4c:	b480      	push	{r7}
 8017b4e:	b085      	sub	sp, #20
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017b54:	4b33      	ldr	r3, [pc, #204]	@ (8017c24 <ip4_route+0xd8>)
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	60fb      	str	r3, [r7, #12]
 8017b5a:	e036      	b.n	8017bca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017b62:	f003 0301 	and.w	r3, r3, #1
 8017b66:	b2db      	uxtb	r3, r3
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d02b      	beq.n	8017bc4 <ip4_route+0x78>
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017b72:	089b      	lsrs	r3, r3, #2
 8017b74:	f003 0301 	and.w	r3, r3, #1
 8017b78:	b2db      	uxtb	r3, r3
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d022      	beq.n	8017bc4 <ip4_route+0x78>
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	3304      	adds	r3, #4
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d01d      	beq.n	8017bc4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	681a      	ldr	r2, [r3, #0]
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	3304      	adds	r3, #4
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	405a      	eors	r2, r3
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	3308      	adds	r3, #8
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	4013      	ands	r3, r2
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d101      	bne.n	8017ba4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	e038      	b.n	8017c16 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017baa:	f003 0302 	and.w	r3, r3, #2
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d108      	bne.n	8017bc4 <ip4_route+0x78>
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	681a      	ldr	r2, [r3, #0]
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	330c      	adds	r3, #12
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	429a      	cmp	r2, r3
 8017bbe:	d101      	bne.n	8017bc4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	e028      	b.n	8017c16 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	60fb      	str	r3, [r7, #12]
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d1c5      	bne.n	8017b5c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017bd0:	4b15      	ldr	r3, [pc, #84]	@ (8017c28 <ip4_route+0xdc>)
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d01a      	beq.n	8017c0e <ip4_route+0xc2>
 8017bd8:	4b13      	ldr	r3, [pc, #76]	@ (8017c28 <ip4_route+0xdc>)
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017be0:	f003 0301 	and.w	r3, r3, #1
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d012      	beq.n	8017c0e <ip4_route+0xc2>
 8017be8:	4b0f      	ldr	r3, [pc, #60]	@ (8017c28 <ip4_route+0xdc>)
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017bf0:	f003 0304 	and.w	r3, r3, #4
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d00a      	beq.n	8017c0e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8017c28 <ip4_route+0xdc>)
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	3304      	adds	r3, #4
 8017bfe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d004      	beq.n	8017c0e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	b2db      	uxtb	r3, r3
 8017c0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8017c0c:	d101      	bne.n	8017c12 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	e001      	b.n	8017c16 <ip4_route+0xca>
  }

  return netif_default;
 8017c12:	4b05      	ldr	r3, [pc, #20]	@ (8017c28 <ip4_route+0xdc>)
 8017c14:	681b      	ldr	r3, [r3, #0]
}
 8017c16:	4618      	mov	r0, r3
 8017c18:	3714      	adds	r7, #20
 8017c1a:	46bd      	mov	sp, r7
 8017c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c20:	4770      	bx	lr
 8017c22:	bf00      	nop
 8017c24:	24008200 	.word	0x24008200
 8017c28:	24008204 	.word	0x24008204

08017c2c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017c2c:	b580      	push	{r7, lr}
 8017c2e:	b082      	sub	sp, #8
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017c3a:	f003 0301 	and.w	r3, r3, #1
 8017c3e:	b2db      	uxtb	r3, r3
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d016      	beq.n	8017c72 <ip4_input_accept+0x46>
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	3304      	adds	r3, #4
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d011      	beq.n	8017c72 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8017c7c <ip4_input_accept+0x50>)
 8017c50:	695a      	ldr	r2, [r3, #20]
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	3304      	adds	r3, #4
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	429a      	cmp	r2, r3
 8017c5a:	d008      	beq.n	8017c6e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017c5c:	4b07      	ldr	r3, [pc, #28]	@ (8017c7c <ip4_input_accept+0x50>)
 8017c5e:	695b      	ldr	r3, [r3, #20]
 8017c60:	6879      	ldr	r1, [r7, #4]
 8017c62:	4618      	mov	r0, r3
 8017c64:	f000 fa08 	bl	8018078 <ip4_addr_isbroadcast_u32>
 8017c68:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d001      	beq.n	8017c72 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017c6e:	2301      	movs	r3, #1
 8017c70:	e000      	b.n	8017c74 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017c72:	2300      	movs	r3, #0
}
 8017c74:	4618      	mov	r0, r3
 8017c76:	3708      	adds	r7, #8
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	bd80      	pop	{r7, pc}
 8017c7c:	2400510c 	.word	0x2400510c

08017c80 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b086      	sub	sp, #24
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
 8017c88:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	685b      	ldr	r3, [r3, #4]
 8017c8e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017c90:	697b      	ldr	r3, [r7, #20]
 8017c92:	781b      	ldrb	r3, [r3, #0]
 8017c94:	091b      	lsrs	r3, r3, #4
 8017c96:	b2db      	uxtb	r3, r3
 8017c98:	2b04      	cmp	r3, #4
 8017c9a:	d004      	beq.n	8017ca6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017c9c:	6878      	ldr	r0, [r7, #4]
 8017c9e:	f7f8 fbaf 	bl	8010400 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	e107      	b.n	8017eb6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017ca6:	697b      	ldr	r3, [r7, #20]
 8017ca8:	781b      	ldrb	r3, [r3, #0]
 8017caa:	f003 030f 	and.w	r3, r3, #15
 8017cae:	b2db      	uxtb	r3, r3
 8017cb0:	009b      	lsls	r3, r3, #2
 8017cb2:	b2db      	uxtb	r3, r3
 8017cb4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017cb6:	697b      	ldr	r3, [r7, #20]
 8017cb8:	885b      	ldrh	r3, [r3, #2]
 8017cba:	b29b      	uxth	r3, r3
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	f7f6 fee5 	bl	800ea8c <lwip_htons>
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	891b      	ldrh	r3, [r3, #8]
 8017cca:	89ba      	ldrh	r2, [r7, #12]
 8017ccc:	429a      	cmp	r2, r3
 8017cce:	d204      	bcs.n	8017cda <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017cd0:	89bb      	ldrh	r3, [r7, #12]
 8017cd2:	4619      	mov	r1, r3
 8017cd4:	6878      	ldr	r0, [r7, #4]
 8017cd6:	f7f8 fa0d 	bl	80100f4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	895b      	ldrh	r3, [r3, #10]
 8017cde:	89fa      	ldrh	r2, [r7, #14]
 8017ce0:	429a      	cmp	r2, r3
 8017ce2:	d807      	bhi.n	8017cf4 <ip4_input+0x74>
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	891b      	ldrh	r3, [r3, #8]
 8017ce8:	89ba      	ldrh	r2, [r7, #12]
 8017cea:	429a      	cmp	r2, r3
 8017cec:	d802      	bhi.n	8017cf4 <ip4_input+0x74>
 8017cee:	89fb      	ldrh	r3, [r7, #14]
 8017cf0:	2b13      	cmp	r3, #19
 8017cf2:	d804      	bhi.n	8017cfe <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017cf4:	6878      	ldr	r0, [r7, #4]
 8017cf6:	f7f8 fb83 	bl	8010400 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	e0db      	b.n	8017eb6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017cfe:	697b      	ldr	r3, [r7, #20]
 8017d00:	691b      	ldr	r3, [r3, #16]
 8017d02:	4a6f      	ldr	r2, [pc, #444]	@ (8017ec0 <ip4_input+0x240>)
 8017d04:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017d06:	697b      	ldr	r3, [r7, #20]
 8017d08:	68db      	ldr	r3, [r3, #12]
 8017d0a:	4a6d      	ldr	r2, [pc, #436]	@ (8017ec0 <ip4_input+0x240>)
 8017d0c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017d0e:	4b6c      	ldr	r3, [pc, #432]	@ (8017ec0 <ip4_input+0x240>)
 8017d10:	695b      	ldr	r3, [r3, #20]
 8017d12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017d16:	2be0      	cmp	r3, #224	@ 0xe0
 8017d18:	d112      	bne.n	8017d40 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017d1a:	683b      	ldr	r3, [r7, #0]
 8017d1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017d20:	f003 0301 	and.w	r3, r3, #1
 8017d24:	b2db      	uxtb	r3, r3
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d007      	beq.n	8017d3a <ip4_input+0xba>
 8017d2a:	683b      	ldr	r3, [r7, #0]
 8017d2c:	3304      	adds	r3, #4
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d002      	beq.n	8017d3a <ip4_input+0xba>
      netif = inp;
 8017d34:	683b      	ldr	r3, [r7, #0]
 8017d36:	613b      	str	r3, [r7, #16]
 8017d38:	e02a      	b.n	8017d90 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	613b      	str	r3, [r7, #16]
 8017d3e:	e027      	b.n	8017d90 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017d40:	6838      	ldr	r0, [r7, #0]
 8017d42:	f7ff ff73 	bl	8017c2c <ip4_input_accept>
 8017d46:	4603      	mov	r3, r0
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d002      	beq.n	8017d52 <ip4_input+0xd2>
      netif = inp;
 8017d4c:	683b      	ldr	r3, [r7, #0]
 8017d4e:	613b      	str	r3, [r7, #16]
 8017d50:	e01e      	b.n	8017d90 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017d52:	2300      	movs	r3, #0
 8017d54:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017d56:	4b5a      	ldr	r3, [pc, #360]	@ (8017ec0 <ip4_input+0x240>)
 8017d58:	695b      	ldr	r3, [r3, #20]
 8017d5a:	b2db      	uxtb	r3, r3
 8017d5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8017d5e:	d017      	beq.n	8017d90 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017d60:	4b58      	ldr	r3, [pc, #352]	@ (8017ec4 <ip4_input+0x244>)
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	613b      	str	r3, [r7, #16]
 8017d66:	e00e      	b.n	8017d86 <ip4_input+0x106>
          if (netif == inp) {
 8017d68:	693a      	ldr	r2, [r7, #16]
 8017d6a:	683b      	ldr	r3, [r7, #0]
 8017d6c:	429a      	cmp	r2, r3
 8017d6e:	d006      	beq.n	8017d7e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017d70:	6938      	ldr	r0, [r7, #16]
 8017d72:	f7ff ff5b 	bl	8017c2c <ip4_input_accept>
 8017d76:	4603      	mov	r3, r0
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d108      	bne.n	8017d8e <ip4_input+0x10e>
 8017d7c:	e000      	b.n	8017d80 <ip4_input+0x100>
            continue;
 8017d7e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017d80:	693b      	ldr	r3, [r7, #16]
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	613b      	str	r3, [r7, #16]
 8017d86:	693b      	ldr	r3, [r7, #16]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d1ed      	bne.n	8017d68 <ip4_input+0xe8>
 8017d8c:	e000      	b.n	8017d90 <ip4_input+0x110>
            break;
 8017d8e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017d90:	4b4b      	ldr	r3, [pc, #300]	@ (8017ec0 <ip4_input+0x240>)
 8017d92:	691b      	ldr	r3, [r3, #16]
 8017d94:	6839      	ldr	r1, [r7, #0]
 8017d96:	4618      	mov	r0, r3
 8017d98:	f000 f96e 	bl	8018078 <ip4_addr_isbroadcast_u32>
 8017d9c:	4603      	mov	r3, r0
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d105      	bne.n	8017dae <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017da2:	4b47      	ldr	r3, [pc, #284]	@ (8017ec0 <ip4_input+0x240>)
 8017da4:	691b      	ldr	r3, [r3, #16]
 8017da6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017daa:	2be0      	cmp	r3, #224	@ 0xe0
 8017dac:	d104      	bne.n	8017db8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017dae:	6878      	ldr	r0, [r7, #4]
 8017db0:	f7f8 fb26 	bl	8010400 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017db4:	2300      	movs	r3, #0
 8017db6:	e07e      	b.n	8017eb6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017db8:	693b      	ldr	r3, [r7, #16]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d104      	bne.n	8017dc8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017dbe:	6878      	ldr	r0, [r7, #4]
 8017dc0:	f7f8 fb1e 	bl	8010400 <pbuf_free>
    return ERR_OK;
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	e076      	b.n	8017eb6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017dc8:	697b      	ldr	r3, [r7, #20]
 8017dca:	88db      	ldrh	r3, [r3, #6]
 8017dcc:	b29b      	uxth	r3, r3
 8017dce:	461a      	mov	r2, r3
 8017dd0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8017dd4:	4013      	ands	r3, r2
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d00b      	beq.n	8017df2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017dda:	6878      	ldr	r0, [r7, #4]
 8017ddc:	f000 fc92 	bl	8018704 <ip4_reass>
 8017de0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d101      	bne.n	8017dec <ip4_input+0x16c>
      return ERR_OK;
 8017de8:	2300      	movs	r3, #0
 8017dea:	e064      	b.n	8017eb6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	685b      	ldr	r3, [r3, #4]
 8017df0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017df2:	4a33      	ldr	r2, [pc, #204]	@ (8017ec0 <ip4_input+0x240>)
 8017df4:	693b      	ldr	r3, [r7, #16]
 8017df6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017df8:	4a31      	ldr	r2, [pc, #196]	@ (8017ec0 <ip4_input+0x240>)
 8017dfa:	683b      	ldr	r3, [r7, #0]
 8017dfc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017dfe:	4a30      	ldr	r2, [pc, #192]	@ (8017ec0 <ip4_input+0x240>)
 8017e00:	697b      	ldr	r3, [r7, #20]
 8017e02:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017e04:	697b      	ldr	r3, [r7, #20]
 8017e06:	781b      	ldrb	r3, [r3, #0]
 8017e08:	f003 030f 	and.w	r3, r3, #15
 8017e0c:	b2db      	uxtb	r3, r3
 8017e0e:	009b      	lsls	r3, r3, #2
 8017e10:	b2db      	uxtb	r3, r3
 8017e12:	461a      	mov	r2, r3
 8017e14:	4b2a      	ldr	r3, [pc, #168]	@ (8017ec0 <ip4_input+0x240>)
 8017e16:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017e18:	89fb      	ldrh	r3, [r7, #14]
 8017e1a:	4619      	mov	r1, r3
 8017e1c:	6878      	ldr	r0, [r7, #4]
 8017e1e:	f7f8 fa69 	bl	80102f4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017e22:	697b      	ldr	r3, [r7, #20]
 8017e24:	7a5b      	ldrb	r3, [r3, #9]
 8017e26:	2b11      	cmp	r3, #17
 8017e28:	d006      	beq.n	8017e38 <ip4_input+0x1b8>
 8017e2a:	2b11      	cmp	r3, #17
 8017e2c:	dc13      	bgt.n	8017e56 <ip4_input+0x1d6>
 8017e2e:	2b01      	cmp	r3, #1
 8017e30:	d00c      	beq.n	8017e4c <ip4_input+0x1cc>
 8017e32:	2b06      	cmp	r3, #6
 8017e34:	d005      	beq.n	8017e42 <ip4_input+0x1c2>
 8017e36:	e00e      	b.n	8017e56 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017e38:	6839      	ldr	r1, [r7, #0]
 8017e3a:	6878      	ldr	r0, [r7, #4]
 8017e3c:	f7fe f9ae 	bl	801619c <udp_input>
        break;
 8017e40:	e026      	b.n	8017e90 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017e42:	6839      	ldr	r1, [r7, #0]
 8017e44:	6878      	ldr	r0, [r7, #4]
 8017e46:	f7fa f985 	bl	8012154 <tcp_input>
        break;
 8017e4a:	e021      	b.n	8017e90 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017e4c:	6839      	ldr	r1, [r7, #0]
 8017e4e:	6878      	ldr	r0, [r7, #4]
 8017e50:	f7ff fcc8 	bl	80177e4 <icmp_input>
        break;
 8017e54:	e01c      	b.n	8017e90 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017e56:	4b1a      	ldr	r3, [pc, #104]	@ (8017ec0 <ip4_input+0x240>)
 8017e58:	695b      	ldr	r3, [r3, #20]
 8017e5a:	6939      	ldr	r1, [r7, #16]
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	f000 f90b 	bl	8018078 <ip4_addr_isbroadcast_u32>
 8017e62:	4603      	mov	r3, r0
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d10f      	bne.n	8017e88 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017e68:	4b15      	ldr	r3, [pc, #84]	@ (8017ec0 <ip4_input+0x240>)
 8017e6a:	695b      	ldr	r3, [r3, #20]
 8017e6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017e70:	2be0      	cmp	r3, #224	@ 0xe0
 8017e72:	d009      	beq.n	8017e88 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017e74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017e78:	4619      	mov	r1, r3
 8017e7a:	6878      	ldr	r0, [r7, #4]
 8017e7c:	f7f8 faad 	bl	80103da <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017e80:	2102      	movs	r1, #2
 8017e82:	6878      	ldr	r0, [r7, #4]
 8017e84:	f7ff fdce 	bl	8017a24 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017e88:	6878      	ldr	r0, [r7, #4]
 8017e8a:	f7f8 fab9 	bl	8010400 <pbuf_free>
        break;
 8017e8e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017e90:	4b0b      	ldr	r3, [pc, #44]	@ (8017ec0 <ip4_input+0x240>)
 8017e92:	2200      	movs	r2, #0
 8017e94:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017e96:	4b0a      	ldr	r3, [pc, #40]	@ (8017ec0 <ip4_input+0x240>)
 8017e98:	2200      	movs	r2, #0
 8017e9a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017e9c:	4b08      	ldr	r3, [pc, #32]	@ (8017ec0 <ip4_input+0x240>)
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017ea2:	4b07      	ldr	r3, [pc, #28]	@ (8017ec0 <ip4_input+0x240>)
 8017ea4:	2200      	movs	r2, #0
 8017ea6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017ea8:	4b05      	ldr	r3, [pc, #20]	@ (8017ec0 <ip4_input+0x240>)
 8017eaa:	2200      	movs	r2, #0
 8017eac:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017eae:	4b04      	ldr	r3, [pc, #16]	@ (8017ec0 <ip4_input+0x240>)
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017eb4:	2300      	movs	r3, #0
}
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	3718      	adds	r7, #24
 8017eba:	46bd      	mov	sp, r7
 8017ebc:	bd80      	pop	{r7, pc}
 8017ebe:	bf00      	nop
 8017ec0:	2400510c 	.word	0x2400510c
 8017ec4:	24008200 	.word	0x24008200

08017ec8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017ec8:	b580      	push	{r7, lr}
 8017eca:	b08a      	sub	sp, #40	@ 0x28
 8017ecc:	af04      	add	r7, sp, #16
 8017ece:	60f8      	str	r0, [r7, #12]
 8017ed0:	60b9      	str	r1, [r7, #8]
 8017ed2:	607a      	str	r2, [r7, #4]
 8017ed4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017ed6:	68bb      	ldr	r3, [r7, #8]
 8017ed8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d009      	beq.n	8017ef4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017ee0:	68bb      	ldr	r3, [r7, #8]
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d003      	beq.n	8017eee <ip4_output_if+0x26>
 8017ee6:	68bb      	ldr	r3, [r7, #8]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d102      	bne.n	8017ef4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ef0:	3304      	adds	r3, #4
 8017ef2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017ef4:	78fa      	ldrb	r2, [r7, #3]
 8017ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ef8:	9302      	str	r3, [sp, #8]
 8017efa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017efe:	9301      	str	r3, [sp, #4]
 8017f00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017f04:	9300      	str	r3, [sp, #0]
 8017f06:	4613      	mov	r3, r2
 8017f08:	687a      	ldr	r2, [r7, #4]
 8017f0a:	6979      	ldr	r1, [r7, #20]
 8017f0c:	68f8      	ldr	r0, [r7, #12]
 8017f0e:	f000 f805 	bl	8017f1c <ip4_output_if_src>
 8017f12:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017f14:	4618      	mov	r0, r3
 8017f16:	3718      	adds	r7, #24
 8017f18:	46bd      	mov	sp, r7
 8017f1a:	bd80      	pop	{r7, pc}

08017f1c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b088      	sub	sp, #32
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	60f8      	str	r0, [r7, #12]
 8017f24:	60b9      	str	r1, [r7, #8]
 8017f26:	607a      	str	r2, [r7, #4]
 8017f28:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	7b9b      	ldrb	r3, [r3, #14]
 8017f2e:	2b01      	cmp	r3, #1
 8017f30:	d006      	beq.n	8017f40 <ip4_output_if_src+0x24>
 8017f32:	4b4b      	ldr	r3, [pc, #300]	@ (8018060 <ip4_output_if_src+0x144>)
 8017f34:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8017f38:	494a      	ldr	r1, [pc, #296]	@ (8018064 <ip4_output_if_src+0x148>)
 8017f3a:	484b      	ldr	r0, [pc, #300]	@ (8018068 <ip4_output_if_src+0x14c>)
 8017f3c:	f001 fb4e 	bl	80195dc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d060      	beq.n	8018008 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017f46:	2314      	movs	r3, #20
 8017f48:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017f4a:	2114      	movs	r1, #20
 8017f4c:	68f8      	ldr	r0, [r7, #12]
 8017f4e:	f7f8 f9c1 	bl	80102d4 <pbuf_add_header>
 8017f52:	4603      	mov	r3, r0
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d002      	beq.n	8017f5e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017f58:	f06f 0301 	mvn.w	r3, #1
 8017f5c:	e07c      	b.n	8018058 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	685b      	ldr	r3, [r3, #4]
 8017f62:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	895b      	ldrh	r3, [r3, #10]
 8017f68:	2b13      	cmp	r3, #19
 8017f6a:	d806      	bhi.n	8017f7a <ip4_output_if_src+0x5e>
 8017f6c:	4b3c      	ldr	r3, [pc, #240]	@ (8018060 <ip4_output_if_src+0x144>)
 8017f6e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8017f72:	493e      	ldr	r1, [pc, #248]	@ (801806c <ip4_output_if_src+0x150>)
 8017f74:	483c      	ldr	r0, [pc, #240]	@ (8018068 <ip4_output_if_src+0x14c>)
 8017f76:	f001 fb31 	bl	80195dc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017f7a:	69fb      	ldr	r3, [r7, #28]
 8017f7c:	78fa      	ldrb	r2, [r7, #3]
 8017f7e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017f80:	69fb      	ldr	r3, [r7, #28]
 8017f82:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017f86:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	681a      	ldr	r2, [r3, #0]
 8017f8c:	69fb      	ldr	r3, [r7, #28]
 8017f8e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017f90:	8b7b      	ldrh	r3, [r7, #26]
 8017f92:	089b      	lsrs	r3, r3, #2
 8017f94:	b29b      	uxth	r3, r3
 8017f96:	b2db      	uxtb	r3, r3
 8017f98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017f9c:	b2da      	uxtb	r2, r3
 8017f9e:	69fb      	ldr	r3, [r7, #28]
 8017fa0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017fa2:	69fb      	ldr	r3, [r7, #28]
 8017fa4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017fa8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	891b      	ldrh	r3, [r3, #8]
 8017fae:	4618      	mov	r0, r3
 8017fb0:	f7f6 fd6c 	bl	800ea8c <lwip_htons>
 8017fb4:	4603      	mov	r3, r0
 8017fb6:	461a      	mov	r2, r3
 8017fb8:	69fb      	ldr	r3, [r7, #28]
 8017fba:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017fbc:	69fb      	ldr	r3, [r7, #28]
 8017fbe:	2200      	movs	r2, #0
 8017fc0:	719a      	strb	r2, [r3, #6]
 8017fc2:	2200      	movs	r2, #0
 8017fc4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8018070 <ip4_output_if_src+0x154>)
 8017fc8:	881b      	ldrh	r3, [r3, #0]
 8017fca:	4618      	mov	r0, r3
 8017fcc:	f7f6 fd5e 	bl	800ea8c <lwip_htons>
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	461a      	mov	r2, r3
 8017fd4:	69fb      	ldr	r3, [r7, #28]
 8017fd6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017fd8:	4b25      	ldr	r3, [pc, #148]	@ (8018070 <ip4_output_if_src+0x154>)
 8017fda:	881b      	ldrh	r3, [r3, #0]
 8017fdc:	3301      	adds	r3, #1
 8017fde:	b29a      	uxth	r2, r3
 8017fe0:	4b23      	ldr	r3, [pc, #140]	@ (8018070 <ip4_output_if_src+0x154>)
 8017fe2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017fe4:	68bb      	ldr	r3, [r7, #8]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d104      	bne.n	8017ff4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017fea:	4b22      	ldr	r3, [pc, #136]	@ (8018074 <ip4_output_if_src+0x158>)
 8017fec:	681a      	ldr	r2, [r3, #0]
 8017fee:	69fb      	ldr	r3, [r7, #28]
 8017ff0:	60da      	str	r2, [r3, #12]
 8017ff2:	e003      	b.n	8017ffc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017ff4:	68bb      	ldr	r3, [r7, #8]
 8017ff6:	681a      	ldr	r2, [r3, #0]
 8017ff8:	69fb      	ldr	r3, [r7, #28]
 8017ffa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017ffc:	69fb      	ldr	r3, [r7, #28]
 8017ffe:	2200      	movs	r2, #0
 8018000:	729a      	strb	r2, [r3, #10]
 8018002:	2200      	movs	r2, #0
 8018004:	72da      	strb	r2, [r3, #11]
 8018006:	e00f      	b.n	8018028 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	895b      	ldrh	r3, [r3, #10]
 801800c:	2b13      	cmp	r3, #19
 801800e:	d802      	bhi.n	8018016 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018010:	f06f 0301 	mvn.w	r3, #1
 8018014:	e020      	b.n	8018058 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	685b      	ldr	r3, [r3, #4]
 801801a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801801c:	69fb      	ldr	r3, [r7, #28]
 801801e:	691b      	ldr	r3, [r3, #16]
 8018020:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018022:	f107 0314 	add.w	r3, r7, #20
 8018026:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801802a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801802c:	2b00      	cmp	r3, #0
 801802e:	d00c      	beq.n	801804a <ip4_output_if_src+0x12e>
 8018030:	68fb      	ldr	r3, [r7, #12]
 8018032:	891a      	ldrh	r2, [r3, #8]
 8018034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018036:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018038:	429a      	cmp	r2, r3
 801803a:	d906      	bls.n	801804a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801803c:	687a      	ldr	r2, [r7, #4]
 801803e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018040:	68f8      	ldr	r0, [r7, #12]
 8018042:	f000 fd53 	bl	8018aec <ip4_frag>
 8018046:	4603      	mov	r3, r0
 8018048:	e006      	b.n	8018058 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801804a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801804c:	695b      	ldr	r3, [r3, #20]
 801804e:	687a      	ldr	r2, [r7, #4]
 8018050:	68f9      	ldr	r1, [r7, #12]
 8018052:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018054:	4798      	blx	r3
 8018056:	4603      	mov	r3, r0
}
 8018058:	4618      	mov	r0, r3
 801805a:	3720      	adds	r7, #32
 801805c:	46bd      	mov	sp, r7
 801805e:	bd80      	pop	{r7, pc}
 8018060:	0801e1ec 	.word	0x0801e1ec
 8018064:	0801e220 	.word	0x0801e220
 8018068:	0801e22c 	.word	0x0801e22c
 801806c:	0801e254 	.word	0x0801e254
 8018070:	2400835e 	.word	0x2400835e
 8018074:	0801e6c4 	.word	0x0801e6c4

08018078 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018078:	b480      	push	{r7}
 801807a:	b085      	sub	sp, #20
 801807c:	af00      	add	r7, sp, #0
 801807e:	6078      	str	r0, [r7, #4]
 8018080:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	f1b3 3fff 	cmp.w	r3, #4294967295
 801808c:	d002      	beq.n	8018094 <ip4_addr_isbroadcast_u32+0x1c>
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	2b00      	cmp	r3, #0
 8018092:	d101      	bne.n	8018098 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018094:	2301      	movs	r3, #1
 8018096:	e02a      	b.n	80180ee <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018098:	683b      	ldr	r3, [r7, #0]
 801809a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801809e:	f003 0302 	and.w	r3, r3, #2
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d101      	bne.n	80180aa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80180a6:	2300      	movs	r3, #0
 80180a8:	e021      	b.n	80180ee <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80180aa:	683b      	ldr	r3, [r7, #0]
 80180ac:	3304      	adds	r3, #4
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	687a      	ldr	r2, [r7, #4]
 80180b2:	429a      	cmp	r2, r3
 80180b4:	d101      	bne.n	80180ba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80180b6:	2300      	movs	r3, #0
 80180b8:	e019      	b.n	80180ee <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80180ba:	68fa      	ldr	r2, [r7, #12]
 80180bc:	683b      	ldr	r3, [r7, #0]
 80180be:	3304      	adds	r3, #4
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	405a      	eors	r2, r3
 80180c4:	683b      	ldr	r3, [r7, #0]
 80180c6:	3308      	adds	r3, #8
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	4013      	ands	r3, r2
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d10d      	bne.n	80180ec <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80180d0:	683b      	ldr	r3, [r7, #0]
 80180d2:	3308      	adds	r3, #8
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	43da      	mvns	r2, r3
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80180dc:	683b      	ldr	r3, [r7, #0]
 80180de:	3308      	adds	r3, #8
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80180e4:	429a      	cmp	r2, r3
 80180e6:	d101      	bne.n	80180ec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80180e8:	2301      	movs	r3, #1
 80180ea:	e000      	b.n	80180ee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80180ec:	2300      	movs	r3, #0
  }
}
 80180ee:	4618      	mov	r0, r3
 80180f0:	3714      	adds	r7, #20
 80180f2:	46bd      	mov	sp, r7
 80180f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f8:	4770      	bx	lr
	...

080180fc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80180fc:	b580      	push	{r7, lr}
 80180fe:	b084      	sub	sp, #16
 8018100:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018102:	2300      	movs	r3, #0
 8018104:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018106:	4b12      	ldr	r3, [pc, #72]	@ (8018150 <ip_reass_tmr+0x54>)
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801810c:	e018      	b.n	8018140 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	7fdb      	ldrb	r3, [r3, #31]
 8018112:	2b00      	cmp	r3, #0
 8018114:	d00b      	beq.n	801812e <ip_reass_tmr+0x32>
      r->timer--;
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	7fdb      	ldrb	r3, [r3, #31]
 801811a:	3b01      	subs	r3, #1
 801811c:	b2da      	uxtb	r2, r3
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	60fb      	str	r3, [r7, #12]
 801812c:	e008      	b.n	8018140 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018138:	68b9      	ldr	r1, [r7, #8]
 801813a:	6878      	ldr	r0, [r7, #4]
 801813c:	f000 f80a 	bl	8018154 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	2b00      	cmp	r3, #0
 8018144:	d1e3      	bne.n	801810e <ip_reass_tmr+0x12>
    }
  }
}
 8018146:	bf00      	nop
 8018148:	bf00      	nop
 801814a:	3710      	adds	r7, #16
 801814c:	46bd      	mov	sp, r7
 801814e:	bd80      	pop	{r7, pc}
 8018150:	24008360 	.word	0x24008360

08018154 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b088      	sub	sp, #32
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
 801815c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801815e:	2300      	movs	r3, #0
 8018160:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018162:	683a      	ldr	r2, [r7, #0]
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	429a      	cmp	r2, r3
 8018168:	d105      	bne.n	8018176 <ip_reass_free_complete_datagram+0x22>
 801816a:	4b45      	ldr	r3, [pc, #276]	@ (8018280 <ip_reass_free_complete_datagram+0x12c>)
 801816c:	22ab      	movs	r2, #171	@ 0xab
 801816e:	4945      	ldr	r1, [pc, #276]	@ (8018284 <ip_reass_free_complete_datagram+0x130>)
 8018170:	4845      	ldr	r0, [pc, #276]	@ (8018288 <ip_reass_free_complete_datagram+0x134>)
 8018172:	f001 fa33 	bl	80195dc <iprintf>
  if (prev != NULL) {
 8018176:	683b      	ldr	r3, [r7, #0]
 8018178:	2b00      	cmp	r3, #0
 801817a:	d00a      	beq.n	8018192 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801817c:	683b      	ldr	r3, [r7, #0]
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	687a      	ldr	r2, [r7, #4]
 8018182:	429a      	cmp	r2, r3
 8018184:	d005      	beq.n	8018192 <ip_reass_free_complete_datagram+0x3e>
 8018186:	4b3e      	ldr	r3, [pc, #248]	@ (8018280 <ip_reass_free_complete_datagram+0x12c>)
 8018188:	22ad      	movs	r2, #173	@ 0xad
 801818a:	4940      	ldr	r1, [pc, #256]	@ (801828c <ip_reass_free_complete_datagram+0x138>)
 801818c:	483e      	ldr	r0, [pc, #248]	@ (8018288 <ip_reass_free_complete_datagram+0x134>)
 801818e:	f001 fa25 	bl	80195dc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	685b      	ldr	r3, [r3, #4]
 8018196:	685b      	ldr	r3, [r3, #4]
 8018198:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801819a:	697b      	ldr	r3, [r7, #20]
 801819c:	889b      	ldrh	r3, [r3, #4]
 801819e:	b29b      	uxth	r3, r3
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d12a      	bne.n	80181fa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	685b      	ldr	r3, [r3, #4]
 80181a8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80181aa:	697b      	ldr	r3, [r7, #20]
 80181ac:	681a      	ldr	r2, [r3, #0]
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80181b2:	69bb      	ldr	r3, [r7, #24]
 80181b4:	6858      	ldr	r0, [r3, #4]
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	3308      	adds	r3, #8
 80181ba:	2214      	movs	r2, #20
 80181bc:	4619      	mov	r1, r3
 80181be:	f002 fa46 	bl	801a64e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80181c2:	2101      	movs	r1, #1
 80181c4:	69b8      	ldr	r0, [r7, #24]
 80181c6:	f7ff fc3d 	bl	8017a44 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80181ca:	69b8      	ldr	r0, [r7, #24]
 80181cc:	f7f8 f9a6 	bl	801051c <pbuf_clen>
 80181d0:	4603      	mov	r3, r0
 80181d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80181d4:	8bfa      	ldrh	r2, [r7, #30]
 80181d6:	8a7b      	ldrh	r3, [r7, #18]
 80181d8:	4413      	add	r3, r2
 80181da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80181de:	db05      	blt.n	80181ec <ip_reass_free_complete_datagram+0x98>
 80181e0:	4b27      	ldr	r3, [pc, #156]	@ (8018280 <ip_reass_free_complete_datagram+0x12c>)
 80181e2:	22bc      	movs	r2, #188	@ 0xbc
 80181e4:	492a      	ldr	r1, [pc, #168]	@ (8018290 <ip_reass_free_complete_datagram+0x13c>)
 80181e6:	4828      	ldr	r0, [pc, #160]	@ (8018288 <ip_reass_free_complete_datagram+0x134>)
 80181e8:	f001 f9f8 	bl	80195dc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80181ec:	8bfa      	ldrh	r2, [r7, #30]
 80181ee:	8a7b      	ldrh	r3, [r7, #18]
 80181f0:	4413      	add	r3, r2
 80181f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80181f4:	69b8      	ldr	r0, [r7, #24]
 80181f6:	f7f8 f903 	bl	8010400 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	685b      	ldr	r3, [r3, #4]
 80181fe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018200:	e01f      	b.n	8018242 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018202:	69bb      	ldr	r3, [r7, #24]
 8018204:	685b      	ldr	r3, [r3, #4]
 8018206:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018208:	69bb      	ldr	r3, [r7, #24]
 801820a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801820c:	697b      	ldr	r3, [r7, #20]
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018212:	68f8      	ldr	r0, [r7, #12]
 8018214:	f7f8 f982 	bl	801051c <pbuf_clen>
 8018218:	4603      	mov	r3, r0
 801821a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801821c:	8bfa      	ldrh	r2, [r7, #30]
 801821e:	8a7b      	ldrh	r3, [r7, #18]
 8018220:	4413      	add	r3, r2
 8018222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018226:	db05      	blt.n	8018234 <ip_reass_free_complete_datagram+0xe0>
 8018228:	4b15      	ldr	r3, [pc, #84]	@ (8018280 <ip_reass_free_complete_datagram+0x12c>)
 801822a:	22cc      	movs	r2, #204	@ 0xcc
 801822c:	4918      	ldr	r1, [pc, #96]	@ (8018290 <ip_reass_free_complete_datagram+0x13c>)
 801822e:	4816      	ldr	r0, [pc, #88]	@ (8018288 <ip_reass_free_complete_datagram+0x134>)
 8018230:	f001 f9d4 	bl	80195dc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018234:	8bfa      	ldrh	r2, [r7, #30]
 8018236:	8a7b      	ldrh	r3, [r7, #18]
 8018238:	4413      	add	r3, r2
 801823a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801823c:	68f8      	ldr	r0, [r7, #12]
 801823e:	f7f8 f8df 	bl	8010400 <pbuf_free>
  while (p != NULL) {
 8018242:	69bb      	ldr	r3, [r7, #24]
 8018244:	2b00      	cmp	r3, #0
 8018246:	d1dc      	bne.n	8018202 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018248:	6839      	ldr	r1, [r7, #0]
 801824a:	6878      	ldr	r0, [r7, #4]
 801824c:	f000 f8c2 	bl	80183d4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018250:	4b10      	ldr	r3, [pc, #64]	@ (8018294 <ip_reass_free_complete_datagram+0x140>)
 8018252:	881b      	ldrh	r3, [r3, #0]
 8018254:	8bfa      	ldrh	r2, [r7, #30]
 8018256:	429a      	cmp	r2, r3
 8018258:	d905      	bls.n	8018266 <ip_reass_free_complete_datagram+0x112>
 801825a:	4b09      	ldr	r3, [pc, #36]	@ (8018280 <ip_reass_free_complete_datagram+0x12c>)
 801825c:	22d2      	movs	r2, #210	@ 0xd2
 801825e:	490e      	ldr	r1, [pc, #56]	@ (8018298 <ip_reass_free_complete_datagram+0x144>)
 8018260:	4809      	ldr	r0, [pc, #36]	@ (8018288 <ip_reass_free_complete_datagram+0x134>)
 8018262:	f001 f9bb 	bl	80195dc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018266:	4b0b      	ldr	r3, [pc, #44]	@ (8018294 <ip_reass_free_complete_datagram+0x140>)
 8018268:	881a      	ldrh	r2, [r3, #0]
 801826a:	8bfb      	ldrh	r3, [r7, #30]
 801826c:	1ad3      	subs	r3, r2, r3
 801826e:	b29a      	uxth	r2, r3
 8018270:	4b08      	ldr	r3, [pc, #32]	@ (8018294 <ip_reass_free_complete_datagram+0x140>)
 8018272:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018274:	8bfb      	ldrh	r3, [r7, #30]
}
 8018276:	4618      	mov	r0, r3
 8018278:	3720      	adds	r7, #32
 801827a:	46bd      	mov	sp, r7
 801827c:	bd80      	pop	{r7, pc}
 801827e:	bf00      	nop
 8018280:	0801e284 	.word	0x0801e284
 8018284:	0801e2c0 	.word	0x0801e2c0
 8018288:	0801e2cc 	.word	0x0801e2cc
 801828c:	0801e2f4 	.word	0x0801e2f4
 8018290:	0801e308 	.word	0x0801e308
 8018294:	24008364 	.word	0x24008364
 8018298:	0801e328 	.word	0x0801e328

0801829c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801829c:	b580      	push	{r7, lr}
 801829e:	b08a      	sub	sp, #40	@ 0x28
 80182a0:	af00      	add	r7, sp, #0
 80182a2:	6078      	str	r0, [r7, #4]
 80182a4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80182a6:	2300      	movs	r3, #0
 80182a8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80182aa:	2300      	movs	r3, #0
 80182ac:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80182ae:	2300      	movs	r3, #0
 80182b0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80182b2:	2300      	movs	r3, #0
 80182b4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80182b6:	2300      	movs	r3, #0
 80182b8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80182ba:	4b28      	ldr	r3, [pc, #160]	@ (801835c <ip_reass_remove_oldest_datagram+0xc0>)
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80182c0:	e030      	b.n	8018324 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80182c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182c4:	695a      	ldr	r2, [r3, #20]
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	68db      	ldr	r3, [r3, #12]
 80182ca:	429a      	cmp	r2, r3
 80182cc:	d10c      	bne.n	80182e8 <ip_reass_remove_oldest_datagram+0x4c>
 80182ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182d0:	699a      	ldr	r2, [r3, #24]
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	691b      	ldr	r3, [r3, #16]
 80182d6:	429a      	cmp	r2, r3
 80182d8:	d106      	bne.n	80182e8 <ip_reass_remove_oldest_datagram+0x4c>
 80182da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182dc:	899a      	ldrh	r2, [r3, #12]
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	889b      	ldrh	r3, [r3, #4]
 80182e2:	b29b      	uxth	r3, r3
 80182e4:	429a      	cmp	r2, r3
 80182e6:	d014      	beq.n	8018312 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80182e8:	693b      	ldr	r3, [r7, #16]
 80182ea:	3301      	adds	r3, #1
 80182ec:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80182ee:	6a3b      	ldr	r3, [r7, #32]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d104      	bne.n	80182fe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80182f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182f6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80182f8:	69fb      	ldr	r3, [r7, #28]
 80182fa:	61bb      	str	r3, [r7, #24]
 80182fc:	e009      	b.n	8018312 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80182fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018300:	7fda      	ldrb	r2, [r3, #31]
 8018302:	6a3b      	ldr	r3, [r7, #32]
 8018304:	7fdb      	ldrb	r3, [r3, #31]
 8018306:	429a      	cmp	r2, r3
 8018308:	d803      	bhi.n	8018312 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801830c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801830e:	69fb      	ldr	r3, [r7, #28]
 8018310:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	2b00      	cmp	r3, #0
 8018318:	d001      	beq.n	801831e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801831a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801831c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801831e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8018324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018326:	2b00      	cmp	r3, #0
 8018328:	d1cb      	bne.n	80182c2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801832a:	6a3b      	ldr	r3, [r7, #32]
 801832c:	2b00      	cmp	r3, #0
 801832e:	d008      	beq.n	8018342 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018330:	69b9      	ldr	r1, [r7, #24]
 8018332:	6a38      	ldr	r0, [r7, #32]
 8018334:	f7ff ff0e 	bl	8018154 <ip_reass_free_complete_datagram>
 8018338:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801833a:	697a      	ldr	r2, [r7, #20]
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	4413      	add	r3, r2
 8018340:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018342:	697a      	ldr	r2, [r7, #20]
 8018344:	683b      	ldr	r3, [r7, #0]
 8018346:	429a      	cmp	r2, r3
 8018348:	da02      	bge.n	8018350 <ip_reass_remove_oldest_datagram+0xb4>
 801834a:	693b      	ldr	r3, [r7, #16]
 801834c:	2b01      	cmp	r3, #1
 801834e:	dcac      	bgt.n	80182aa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018350:	697b      	ldr	r3, [r7, #20]
}
 8018352:	4618      	mov	r0, r3
 8018354:	3728      	adds	r7, #40	@ 0x28
 8018356:	46bd      	mov	sp, r7
 8018358:	bd80      	pop	{r7, pc}
 801835a:	bf00      	nop
 801835c:	24008360 	.word	0x24008360

08018360 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018360:	b580      	push	{r7, lr}
 8018362:	b084      	sub	sp, #16
 8018364:	af00      	add	r7, sp, #0
 8018366:	6078      	str	r0, [r7, #4]
 8018368:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801836a:	2004      	movs	r0, #4
 801836c:	f7f7 f92e 	bl	800f5cc <memp_malloc>
 8018370:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	2b00      	cmp	r3, #0
 8018376:	d110      	bne.n	801839a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018378:	6839      	ldr	r1, [r7, #0]
 801837a:	6878      	ldr	r0, [r7, #4]
 801837c:	f7ff ff8e 	bl	801829c <ip_reass_remove_oldest_datagram>
 8018380:	4602      	mov	r2, r0
 8018382:	683b      	ldr	r3, [r7, #0]
 8018384:	4293      	cmp	r3, r2
 8018386:	dc03      	bgt.n	8018390 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018388:	2004      	movs	r0, #4
 801838a:	f7f7 f91f 	bl	800f5cc <memp_malloc>
 801838e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	2b00      	cmp	r3, #0
 8018394:	d101      	bne.n	801839a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018396:	2300      	movs	r3, #0
 8018398:	e016      	b.n	80183c8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801839a:	2220      	movs	r2, #32
 801839c:	2100      	movs	r1, #0
 801839e:	68f8      	ldr	r0, [r7, #12]
 80183a0:	f001 fa18 	bl	80197d4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	220f      	movs	r2, #15
 80183a8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80183aa:	4b09      	ldr	r3, [pc, #36]	@ (80183d0 <ip_reass_enqueue_new_datagram+0x70>)
 80183ac:	681a      	ldr	r2, [r3, #0]
 80183ae:	68fb      	ldr	r3, [r7, #12]
 80183b0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80183b2:	4a07      	ldr	r2, [pc, #28]	@ (80183d0 <ip_reass_enqueue_new_datagram+0x70>)
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	3308      	adds	r3, #8
 80183bc:	2214      	movs	r2, #20
 80183be:	6879      	ldr	r1, [r7, #4]
 80183c0:	4618      	mov	r0, r3
 80183c2:	f002 f944 	bl	801a64e <memcpy>
  return ipr;
 80183c6:	68fb      	ldr	r3, [r7, #12]
}
 80183c8:	4618      	mov	r0, r3
 80183ca:	3710      	adds	r7, #16
 80183cc:	46bd      	mov	sp, r7
 80183ce:	bd80      	pop	{r7, pc}
 80183d0:	24008360 	.word	0x24008360

080183d4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80183d4:	b580      	push	{r7, lr}
 80183d6:	b082      	sub	sp, #8
 80183d8:	af00      	add	r7, sp, #0
 80183da:	6078      	str	r0, [r7, #4]
 80183dc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80183de:	4b10      	ldr	r3, [pc, #64]	@ (8018420 <ip_reass_dequeue_datagram+0x4c>)
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	687a      	ldr	r2, [r7, #4]
 80183e4:	429a      	cmp	r2, r3
 80183e6:	d104      	bne.n	80183f2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	4a0c      	ldr	r2, [pc, #48]	@ (8018420 <ip_reass_dequeue_datagram+0x4c>)
 80183ee:	6013      	str	r3, [r2, #0]
 80183f0:	e00d      	b.n	801840e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80183f2:	683b      	ldr	r3, [r7, #0]
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d106      	bne.n	8018406 <ip_reass_dequeue_datagram+0x32>
 80183f8:	4b0a      	ldr	r3, [pc, #40]	@ (8018424 <ip_reass_dequeue_datagram+0x50>)
 80183fa:	f240 1245 	movw	r2, #325	@ 0x145
 80183fe:	490a      	ldr	r1, [pc, #40]	@ (8018428 <ip_reass_dequeue_datagram+0x54>)
 8018400:	480a      	ldr	r0, [pc, #40]	@ (801842c <ip_reass_dequeue_datagram+0x58>)
 8018402:	f001 f8eb 	bl	80195dc <iprintf>
    prev->next = ipr->next;
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	681a      	ldr	r2, [r3, #0]
 801840a:	683b      	ldr	r3, [r7, #0]
 801840c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801840e:	6879      	ldr	r1, [r7, #4]
 8018410:	2004      	movs	r0, #4
 8018412:	f7f7 f951 	bl	800f6b8 <memp_free>
}
 8018416:	bf00      	nop
 8018418:	3708      	adds	r7, #8
 801841a:	46bd      	mov	sp, r7
 801841c:	bd80      	pop	{r7, pc}
 801841e:	bf00      	nop
 8018420:	24008360 	.word	0x24008360
 8018424:	0801e284 	.word	0x0801e284
 8018428:	0801e34c 	.word	0x0801e34c
 801842c:	0801e2cc 	.word	0x0801e2cc

08018430 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018430:	b580      	push	{r7, lr}
 8018432:	b08c      	sub	sp, #48	@ 0x30
 8018434:	af00      	add	r7, sp, #0
 8018436:	60f8      	str	r0, [r7, #12]
 8018438:	60b9      	str	r1, [r7, #8]
 801843a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801843c:	2300      	movs	r3, #0
 801843e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018440:	2301      	movs	r3, #1
 8018442:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018444:	68bb      	ldr	r3, [r7, #8]
 8018446:	685b      	ldr	r3, [r3, #4]
 8018448:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801844a:	69fb      	ldr	r3, [r7, #28]
 801844c:	885b      	ldrh	r3, [r3, #2]
 801844e:	b29b      	uxth	r3, r3
 8018450:	4618      	mov	r0, r3
 8018452:	f7f6 fb1b 	bl	800ea8c <lwip_htons>
 8018456:	4603      	mov	r3, r0
 8018458:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801845a:	69fb      	ldr	r3, [r7, #28]
 801845c:	781b      	ldrb	r3, [r3, #0]
 801845e:	f003 030f 	and.w	r3, r3, #15
 8018462:	b2db      	uxtb	r3, r3
 8018464:	009b      	lsls	r3, r3, #2
 8018466:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018468:	7e7b      	ldrb	r3, [r7, #25]
 801846a:	b29b      	uxth	r3, r3
 801846c:	8b7a      	ldrh	r2, [r7, #26]
 801846e:	429a      	cmp	r2, r3
 8018470:	d202      	bcs.n	8018478 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018472:	f04f 33ff 	mov.w	r3, #4294967295
 8018476:	e135      	b.n	80186e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018478:	7e7b      	ldrb	r3, [r7, #25]
 801847a:	b29b      	uxth	r3, r3
 801847c:	8b7a      	ldrh	r2, [r7, #26]
 801847e:	1ad3      	subs	r3, r2, r3
 8018480:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018482:	69fb      	ldr	r3, [r7, #28]
 8018484:	88db      	ldrh	r3, [r3, #6]
 8018486:	b29b      	uxth	r3, r3
 8018488:	4618      	mov	r0, r3
 801848a:	f7f6 faff 	bl	800ea8c <lwip_htons>
 801848e:	4603      	mov	r3, r0
 8018490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018494:	b29b      	uxth	r3, r3
 8018496:	00db      	lsls	r3, r3, #3
 8018498:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801849a:	68bb      	ldr	r3, [r7, #8]
 801849c:	685b      	ldr	r3, [r3, #4]
 801849e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80184a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184a2:	2200      	movs	r2, #0
 80184a4:	701a      	strb	r2, [r3, #0]
 80184a6:	2200      	movs	r2, #0
 80184a8:	705a      	strb	r2, [r3, #1]
 80184aa:	2200      	movs	r2, #0
 80184ac:	709a      	strb	r2, [r3, #2]
 80184ae:	2200      	movs	r2, #0
 80184b0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80184b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184b4:	8afa      	ldrh	r2, [r7, #22]
 80184b6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80184b8:	8afa      	ldrh	r2, [r7, #22]
 80184ba:	8b7b      	ldrh	r3, [r7, #26]
 80184bc:	4413      	add	r3, r2
 80184be:	b29a      	uxth	r2, r3
 80184c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184c2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80184c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184c6:	88db      	ldrh	r3, [r3, #6]
 80184c8:	b29b      	uxth	r3, r3
 80184ca:	8afa      	ldrh	r2, [r7, #22]
 80184cc:	429a      	cmp	r2, r3
 80184ce:	d902      	bls.n	80184d6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80184d0:	f04f 33ff 	mov.w	r3, #4294967295
 80184d4:	e106      	b.n	80186e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	685b      	ldr	r3, [r3, #4]
 80184da:	627b      	str	r3, [r7, #36]	@ 0x24
 80184dc:	e068      	b.n	80185b0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80184de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184e0:	685b      	ldr	r3, [r3, #4]
 80184e2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80184e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184e6:	889b      	ldrh	r3, [r3, #4]
 80184e8:	b29a      	uxth	r2, r3
 80184ea:	693b      	ldr	r3, [r7, #16]
 80184ec:	889b      	ldrh	r3, [r3, #4]
 80184ee:	b29b      	uxth	r3, r3
 80184f0:	429a      	cmp	r2, r3
 80184f2:	d235      	bcs.n	8018560 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80184f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80184f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80184fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d020      	beq.n	8018542 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018502:	889b      	ldrh	r3, [r3, #4]
 8018504:	b29a      	uxth	r2, r3
 8018506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018508:	88db      	ldrh	r3, [r3, #6]
 801850a:	b29b      	uxth	r3, r3
 801850c:	429a      	cmp	r2, r3
 801850e:	d307      	bcc.n	8018520 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018512:	88db      	ldrh	r3, [r3, #6]
 8018514:	b29a      	uxth	r2, r3
 8018516:	693b      	ldr	r3, [r7, #16]
 8018518:	889b      	ldrh	r3, [r3, #4]
 801851a:	b29b      	uxth	r3, r3
 801851c:	429a      	cmp	r2, r3
 801851e:	d902      	bls.n	8018526 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018520:	f04f 33ff 	mov.w	r3, #4294967295
 8018524:	e0de      	b.n	80186e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018528:	68ba      	ldr	r2, [r7, #8]
 801852a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801852c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801852e:	88db      	ldrh	r3, [r3, #6]
 8018530:	b29a      	uxth	r2, r3
 8018532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018534:	889b      	ldrh	r3, [r3, #4]
 8018536:	b29b      	uxth	r3, r3
 8018538:	429a      	cmp	r2, r3
 801853a:	d03d      	beq.n	80185b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801853c:	2300      	movs	r3, #0
 801853e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018540:	e03a      	b.n	80185b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018544:	88db      	ldrh	r3, [r3, #6]
 8018546:	b29a      	uxth	r2, r3
 8018548:	693b      	ldr	r3, [r7, #16]
 801854a:	889b      	ldrh	r3, [r3, #4]
 801854c:	b29b      	uxth	r3, r3
 801854e:	429a      	cmp	r2, r3
 8018550:	d902      	bls.n	8018558 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018552:	f04f 33ff 	mov.w	r3, #4294967295
 8018556:	e0c5      	b.n	80186e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	68ba      	ldr	r2, [r7, #8]
 801855c:	605a      	str	r2, [r3, #4]
      break;
 801855e:	e02b      	b.n	80185b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018562:	889b      	ldrh	r3, [r3, #4]
 8018564:	b29a      	uxth	r2, r3
 8018566:	693b      	ldr	r3, [r7, #16]
 8018568:	889b      	ldrh	r3, [r3, #4]
 801856a:	b29b      	uxth	r3, r3
 801856c:	429a      	cmp	r2, r3
 801856e:	d102      	bne.n	8018576 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018570:	f04f 33ff 	mov.w	r3, #4294967295
 8018574:	e0b6      	b.n	80186e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018578:	889b      	ldrh	r3, [r3, #4]
 801857a:	b29a      	uxth	r2, r3
 801857c:	693b      	ldr	r3, [r7, #16]
 801857e:	88db      	ldrh	r3, [r3, #6]
 8018580:	b29b      	uxth	r3, r3
 8018582:	429a      	cmp	r2, r3
 8018584:	d202      	bcs.n	801858c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018586:	f04f 33ff 	mov.w	r3, #4294967295
 801858a:	e0ab      	b.n	80186e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801858c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801858e:	2b00      	cmp	r3, #0
 8018590:	d009      	beq.n	80185a6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018594:	88db      	ldrh	r3, [r3, #6]
 8018596:	b29a      	uxth	r2, r3
 8018598:	693b      	ldr	r3, [r7, #16]
 801859a:	889b      	ldrh	r3, [r3, #4]
 801859c:	b29b      	uxth	r3, r3
 801859e:	429a      	cmp	r2, r3
 80185a0:	d001      	beq.n	80185a6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80185a2:	2300      	movs	r3, #0
 80185a4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80185a6:	693b      	ldr	r3, [r7, #16]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80185ac:	693b      	ldr	r3, [r7, #16]
 80185ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80185b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d193      	bne.n	80184de <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80185b6:	e000      	b.n	80185ba <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80185b8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80185ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d12d      	bne.n	801861c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80185c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d01c      	beq.n	8018600 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80185c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185c8:	88db      	ldrh	r3, [r3, #6]
 80185ca:	b29a      	uxth	r2, r3
 80185cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185ce:	889b      	ldrh	r3, [r3, #4]
 80185d0:	b29b      	uxth	r3, r3
 80185d2:	429a      	cmp	r2, r3
 80185d4:	d906      	bls.n	80185e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80185d6:	4b45      	ldr	r3, [pc, #276]	@ (80186ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80185d8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80185dc:	4944      	ldr	r1, [pc, #272]	@ (80186f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80185de:	4845      	ldr	r0, [pc, #276]	@ (80186f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80185e0:	f000 fffc 	bl	80195dc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80185e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185e6:	68ba      	ldr	r2, [r7, #8]
 80185e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80185ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185ec:	88db      	ldrh	r3, [r3, #6]
 80185ee:	b29a      	uxth	r2, r3
 80185f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185f2:	889b      	ldrh	r3, [r3, #4]
 80185f4:	b29b      	uxth	r3, r3
 80185f6:	429a      	cmp	r2, r3
 80185f8:	d010      	beq.n	801861c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80185fa:	2300      	movs	r3, #0
 80185fc:	623b      	str	r3, [r7, #32]
 80185fe:	e00d      	b.n	801861c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	685b      	ldr	r3, [r3, #4]
 8018604:	2b00      	cmp	r3, #0
 8018606:	d006      	beq.n	8018616 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018608:	4b38      	ldr	r3, [pc, #224]	@ (80186ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801860a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801860e:	493a      	ldr	r1, [pc, #232]	@ (80186f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018610:	4838      	ldr	r0, [pc, #224]	@ (80186f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018612:	f000 ffe3 	bl	80195dc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	68ba      	ldr	r2, [r7, #8]
 801861a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	2b00      	cmp	r3, #0
 8018620:	d105      	bne.n	801862e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	7f9b      	ldrb	r3, [r3, #30]
 8018626:	f003 0301 	and.w	r3, r3, #1
 801862a:	2b00      	cmp	r3, #0
 801862c:	d059      	beq.n	80186e2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801862e:	6a3b      	ldr	r3, [r7, #32]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d04f      	beq.n	80186d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	685b      	ldr	r3, [r3, #4]
 8018638:	2b00      	cmp	r3, #0
 801863a:	d006      	beq.n	801864a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801863c:	68fb      	ldr	r3, [r7, #12]
 801863e:	685b      	ldr	r3, [r3, #4]
 8018640:	685b      	ldr	r3, [r3, #4]
 8018642:	889b      	ldrh	r3, [r3, #4]
 8018644:	b29b      	uxth	r3, r3
 8018646:	2b00      	cmp	r3, #0
 8018648:	d002      	beq.n	8018650 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801864a:	2300      	movs	r3, #0
 801864c:	623b      	str	r3, [r7, #32]
 801864e:	e041      	b.n	80186d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018652:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8018654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801865a:	e012      	b.n	8018682 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801865c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801865e:	685b      	ldr	r3, [r3, #4]
 8018660:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8018662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018664:	88db      	ldrh	r3, [r3, #6]
 8018666:	b29a      	uxth	r2, r3
 8018668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801866a:	889b      	ldrh	r3, [r3, #4]
 801866c:	b29b      	uxth	r3, r3
 801866e:	429a      	cmp	r2, r3
 8018670:	d002      	beq.n	8018678 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018672:	2300      	movs	r3, #0
 8018674:	623b      	str	r3, [r7, #32]
            break;
 8018676:	e007      	b.n	8018688 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801867a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801867c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8018682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018684:	2b00      	cmp	r3, #0
 8018686:	d1e9      	bne.n	801865c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018688:	6a3b      	ldr	r3, [r7, #32]
 801868a:	2b00      	cmp	r3, #0
 801868c:	d022      	beq.n	80186d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	685b      	ldr	r3, [r3, #4]
 8018692:	2b00      	cmp	r3, #0
 8018694:	d106      	bne.n	80186a4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018696:	4b15      	ldr	r3, [pc, #84]	@ (80186ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018698:	f240 12df 	movw	r2, #479	@ 0x1df
 801869c:	4917      	ldr	r1, [pc, #92]	@ (80186fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801869e:	4815      	ldr	r0, [pc, #84]	@ (80186f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80186a0:	f000 ff9c 	bl	80195dc <iprintf>
          LWIP_ASSERT("sanity check",
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	685b      	ldr	r3, [r3, #4]
 80186a8:	685b      	ldr	r3, [r3, #4]
 80186aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80186ac:	429a      	cmp	r2, r3
 80186ae:	d106      	bne.n	80186be <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80186b0:	4b0e      	ldr	r3, [pc, #56]	@ (80186ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80186b2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80186b6:	4911      	ldr	r1, [pc, #68]	@ (80186fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80186b8:	480e      	ldr	r0, [pc, #56]	@ (80186f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80186ba:	f000 ff8f 	bl	80195dc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80186be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d006      	beq.n	80186d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80186c6:	4b09      	ldr	r3, [pc, #36]	@ (80186ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80186c8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80186cc:	490c      	ldr	r1, [pc, #48]	@ (8018700 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80186ce:	4809      	ldr	r0, [pc, #36]	@ (80186f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80186d0:	f000 ff84 	bl	80195dc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80186d4:	6a3b      	ldr	r3, [r7, #32]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	bf14      	ite	ne
 80186da:	2301      	movne	r3, #1
 80186dc:	2300      	moveq	r3, #0
 80186de:	b2db      	uxtb	r3, r3
 80186e0:	e000      	b.n	80186e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80186e2:	2300      	movs	r3, #0
}
 80186e4:	4618      	mov	r0, r3
 80186e6:	3730      	adds	r7, #48	@ 0x30
 80186e8:	46bd      	mov	sp, r7
 80186ea:	bd80      	pop	{r7, pc}
 80186ec:	0801e284 	.word	0x0801e284
 80186f0:	0801e368 	.word	0x0801e368
 80186f4:	0801e2cc 	.word	0x0801e2cc
 80186f8:	0801e388 	.word	0x0801e388
 80186fc:	0801e3c0 	.word	0x0801e3c0
 8018700:	0801e3d0 	.word	0x0801e3d0

08018704 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018704:	b580      	push	{r7, lr}
 8018706:	b08e      	sub	sp, #56	@ 0x38
 8018708:	af00      	add	r7, sp, #0
 801870a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	685b      	ldr	r3, [r3, #4]
 8018710:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018714:	781b      	ldrb	r3, [r3, #0]
 8018716:	f003 030f 	and.w	r3, r3, #15
 801871a:	b2db      	uxtb	r3, r3
 801871c:	009b      	lsls	r3, r3, #2
 801871e:	b2db      	uxtb	r3, r3
 8018720:	2b14      	cmp	r3, #20
 8018722:	f040 8171 	bne.w	8018a08 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018728:	88db      	ldrh	r3, [r3, #6]
 801872a:	b29b      	uxth	r3, r3
 801872c:	4618      	mov	r0, r3
 801872e:	f7f6 f9ad 	bl	800ea8c <lwip_htons>
 8018732:	4603      	mov	r3, r0
 8018734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018738:	b29b      	uxth	r3, r3
 801873a:	00db      	lsls	r3, r3, #3
 801873c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801873e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018740:	885b      	ldrh	r3, [r3, #2]
 8018742:	b29b      	uxth	r3, r3
 8018744:	4618      	mov	r0, r3
 8018746:	f7f6 f9a1 	bl	800ea8c <lwip_htons>
 801874a:	4603      	mov	r3, r0
 801874c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801874e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018750:	781b      	ldrb	r3, [r3, #0]
 8018752:	f003 030f 	and.w	r3, r3, #15
 8018756:	b2db      	uxtb	r3, r3
 8018758:	009b      	lsls	r3, r3, #2
 801875a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801875e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018762:	b29b      	uxth	r3, r3
 8018764:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018766:	429a      	cmp	r2, r3
 8018768:	f0c0 8150 	bcc.w	8018a0c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801876c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018770:	b29b      	uxth	r3, r3
 8018772:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018774:	1ad3      	subs	r3, r2, r3
 8018776:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018778:	6878      	ldr	r0, [r7, #4]
 801877a:	f7f7 fecf 	bl	801051c <pbuf_clen>
 801877e:	4603      	mov	r3, r0
 8018780:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018782:	4b8c      	ldr	r3, [pc, #560]	@ (80189b4 <ip4_reass+0x2b0>)
 8018784:	881b      	ldrh	r3, [r3, #0]
 8018786:	461a      	mov	r2, r3
 8018788:	8c3b      	ldrh	r3, [r7, #32]
 801878a:	4413      	add	r3, r2
 801878c:	2b0a      	cmp	r3, #10
 801878e:	dd10      	ble.n	80187b2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018790:	8c3b      	ldrh	r3, [r7, #32]
 8018792:	4619      	mov	r1, r3
 8018794:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018796:	f7ff fd81 	bl	801829c <ip_reass_remove_oldest_datagram>
 801879a:	4603      	mov	r3, r0
 801879c:	2b00      	cmp	r3, #0
 801879e:	f000 8137 	beq.w	8018a10 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80187a2:	4b84      	ldr	r3, [pc, #528]	@ (80189b4 <ip4_reass+0x2b0>)
 80187a4:	881b      	ldrh	r3, [r3, #0]
 80187a6:	461a      	mov	r2, r3
 80187a8:	8c3b      	ldrh	r3, [r7, #32]
 80187aa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80187ac:	2b0a      	cmp	r3, #10
 80187ae:	f300 812f 	bgt.w	8018a10 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80187b2:	4b81      	ldr	r3, [pc, #516]	@ (80189b8 <ip4_reass+0x2b4>)
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80187b8:	e015      	b.n	80187e6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80187ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187bc:	695a      	ldr	r2, [r3, #20]
 80187be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187c0:	68db      	ldr	r3, [r3, #12]
 80187c2:	429a      	cmp	r2, r3
 80187c4:	d10c      	bne.n	80187e0 <ip4_reass+0xdc>
 80187c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187c8:	699a      	ldr	r2, [r3, #24]
 80187ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187cc:	691b      	ldr	r3, [r3, #16]
 80187ce:	429a      	cmp	r2, r3
 80187d0:	d106      	bne.n	80187e0 <ip4_reass+0xdc>
 80187d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187d4:	899a      	ldrh	r2, [r3, #12]
 80187d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187d8:	889b      	ldrh	r3, [r3, #4]
 80187da:	b29b      	uxth	r3, r3
 80187dc:	429a      	cmp	r2, r3
 80187de:	d006      	beq.n	80187ee <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80187e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80187e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d1e6      	bne.n	80187ba <ip4_reass+0xb6>
 80187ec:	e000      	b.n	80187f0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80187ee:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80187f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d109      	bne.n	801880a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80187f6:	8c3b      	ldrh	r3, [r7, #32]
 80187f8:	4619      	mov	r1, r3
 80187fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80187fc:	f7ff fdb0 	bl	8018360 <ip_reass_enqueue_new_datagram>
 8018800:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018804:	2b00      	cmp	r3, #0
 8018806:	d11c      	bne.n	8018842 <ip4_reass+0x13e>
      goto nullreturn;
 8018808:	e105      	b.n	8018a16 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801880a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801880c:	88db      	ldrh	r3, [r3, #6]
 801880e:	b29b      	uxth	r3, r3
 8018810:	4618      	mov	r0, r3
 8018812:	f7f6 f93b 	bl	800ea8c <lwip_htons>
 8018816:	4603      	mov	r3, r0
 8018818:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801881c:	2b00      	cmp	r3, #0
 801881e:	d110      	bne.n	8018842 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018822:	89db      	ldrh	r3, [r3, #14]
 8018824:	4618      	mov	r0, r3
 8018826:	f7f6 f931 	bl	800ea8c <lwip_htons>
 801882a:	4603      	mov	r3, r0
 801882c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018830:	2b00      	cmp	r3, #0
 8018832:	d006      	beq.n	8018842 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018836:	3308      	adds	r3, #8
 8018838:	2214      	movs	r2, #20
 801883a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801883c:	4618      	mov	r0, r3
 801883e:	f001 ff06 	bl	801a64e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018844:	88db      	ldrh	r3, [r3, #6]
 8018846:	b29b      	uxth	r3, r3
 8018848:	f003 0320 	and.w	r3, r3, #32
 801884c:	2b00      	cmp	r3, #0
 801884e:	bf0c      	ite	eq
 8018850:	2301      	moveq	r3, #1
 8018852:	2300      	movne	r3, #0
 8018854:	b2db      	uxtb	r3, r3
 8018856:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018858:	69fb      	ldr	r3, [r7, #28]
 801885a:	2b00      	cmp	r3, #0
 801885c:	d00e      	beq.n	801887c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801885e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018860:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018862:	4413      	add	r3, r2
 8018864:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018866:	8b7a      	ldrh	r2, [r7, #26]
 8018868:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801886a:	429a      	cmp	r2, r3
 801886c:	f0c0 80a0 	bcc.w	80189b0 <ip4_reass+0x2ac>
 8018870:	8b7b      	ldrh	r3, [r7, #26]
 8018872:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8018876:	4293      	cmp	r3, r2
 8018878:	f200 809a 	bhi.w	80189b0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801887c:	69fa      	ldr	r2, [r7, #28]
 801887e:	6879      	ldr	r1, [r7, #4]
 8018880:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018882:	f7ff fdd5 	bl	8018430 <ip_reass_chain_frag_into_datagram_and_validate>
 8018886:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018888:	697b      	ldr	r3, [r7, #20]
 801888a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801888e:	f000 809b 	beq.w	80189c8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018892:	4b48      	ldr	r3, [pc, #288]	@ (80189b4 <ip4_reass+0x2b0>)
 8018894:	881a      	ldrh	r2, [r3, #0]
 8018896:	8c3b      	ldrh	r3, [r7, #32]
 8018898:	4413      	add	r3, r2
 801889a:	b29a      	uxth	r2, r3
 801889c:	4b45      	ldr	r3, [pc, #276]	@ (80189b4 <ip4_reass+0x2b0>)
 801889e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80188a0:	69fb      	ldr	r3, [r7, #28]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d00d      	beq.n	80188c2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80188a6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80188a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80188aa:	4413      	add	r3, r2
 80188ac:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80188ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188b0:	8a7a      	ldrh	r2, [r7, #18]
 80188b2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80188b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188b6:	7f9b      	ldrb	r3, [r3, #30]
 80188b8:	f043 0301 	orr.w	r3, r3, #1
 80188bc:	b2da      	uxtb	r2, r3
 80188be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188c0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80188c2:	697b      	ldr	r3, [r7, #20]
 80188c4:	2b01      	cmp	r3, #1
 80188c6:	d171      	bne.n	80189ac <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80188c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188ca:	8b9b      	ldrh	r3, [r3, #28]
 80188cc:	3314      	adds	r3, #20
 80188ce:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80188d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188d2:	685b      	ldr	r3, [r3, #4]
 80188d4:	685b      	ldr	r3, [r3, #4]
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80188da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188dc:	685b      	ldr	r3, [r3, #4]
 80188de:	685b      	ldr	r3, [r3, #4]
 80188e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80188e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188e4:	3308      	adds	r3, #8
 80188e6:	2214      	movs	r2, #20
 80188e8:	4619      	mov	r1, r3
 80188ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80188ec:	f001 feaf 	bl	801a64e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80188f0:	8a3b      	ldrh	r3, [r7, #16]
 80188f2:	4618      	mov	r0, r3
 80188f4:	f7f6 f8ca 	bl	800ea8c <lwip_htons>
 80188f8:	4603      	mov	r3, r0
 80188fa:	461a      	mov	r2, r3
 80188fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188fe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018902:	2200      	movs	r2, #0
 8018904:	719a      	strb	r2, [r3, #6]
 8018906:	2200      	movs	r2, #0
 8018908:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801890a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801890c:	2200      	movs	r2, #0
 801890e:	729a      	strb	r2, [r3, #10]
 8018910:	2200      	movs	r2, #0
 8018912:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018916:	685b      	ldr	r3, [r3, #4]
 8018918:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801891a:	e00d      	b.n	8018938 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801891c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801891e:	685b      	ldr	r3, [r3, #4]
 8018920:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018922:	2114      	movs	r1, #20
 8018924:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8018926:	f7f7 fce5 	bl	80102f4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801892a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801892c:	6878      	ldr	r0, [r7, #4]
 801892e:	f7f7 fe35 	bl	801059c <pbuf_cat>
      r = iprh->next_pbuf;
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8018938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801893a:	2b00      	cmp	r3, #0
 801893c:	d1ee      	bne.n	801891c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801893e:	4b1e      	ldr	r3, [pc, #120]	@ (80189b8 <ip4_reass+0x2b4>)
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018944:	429a      	cmp	r2, r3
 8018946:	d102      	bne.n	801894e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018948:	2300      	movs	r3, #0
 801894a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801894c:	e010      	b.n	8018970 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801894e:	4b1a      	ldr	r3, [pc, #104]	@ (80189b8 <ip4_reass+0x2b4>)
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018954:	e007      	b.n	8018966 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801895c:	429a      	cmp	r2, r3
 801895e:	d006      	beq.n	801896e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018968:	2b00      	cmp	r3, #0
 801896a:	d1f4      	bne.n	8018956 <ip4_reass+0x252>
 801896c:	e000      	b.n	8018970 <ip4_reass+0x26c>
          break;
 801896e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018970:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018972:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018974:	f7ff fd2e 	bl	80183d4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018978:	6878      	ldr	r0, [r7, #4]
 801897a:	f7f7 fdcf 	bl	801051c <pbuf_clen>
 801897e:	4603      	mov	r3, r0
 8018980:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018982:	4b0c      	ldr	r3, [pc, #48]	@ (80189b4 <ip4_reass+0x2b0>)
 8018984:	881b      	ldrh	r3, [r3, #0]
 8018986:	8c3a      	ldrh	r2, [r7, #32]
 8018988:	429a      	cmp	r2, r3
 801898a:	d906      	bls.n	801899a <ip4_reass+0x296>
 801898c:	4b0b      	ldr	r3, [pc, #44]	@ (80189bc <ip4_reass+0x2b8>)
 801898e:	f240 229b 	movw	r2, #667	@ 0x29b
 8018992:	490b      	ldr	r1, [pc, #44]	@ (80189c0 <ip4_reass+0x2bc>)
 8018994:	480b      	ldr	r0, [pc, #44]	@ (80189c4 <ip4_reass+0x2c0>)
 8018996:	f000 fe21 	bl	80195dc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801899a:	4b06      	ldr	r3, [pc, #24]	@ (80189b4 <ip4_reass+0x2b0>)
 801899c:	881a      	ldrh	r2, [r3, #0]
 801899e:	8c3b      	ldrh	r3, [r7, #32]
 80189a0:	1ad3      	subs	r3, r2, r3
 80189a2:	b29a      	uxth	r2, r3
 80189a4:	4b03      	ldr	r3, [pc, #12]	@ (80189b4 <ip4_reass+0x2b0>)
 80189a6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	e038      	b.n	8018a1e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80189ac:	2300      	movs	r3, #0
 80189ae:	e036      	b.n	8018a1e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80189b0:	bf00      	nop
 80189b2:	e00a      	b.n	80189ca <ip4_reass+0x2c6>
 80189b4:	24008364 	.word	0x24008364
 80189b8:	24008360 	.word	0x24008360
 80189bc:	0801e284 	.word	0x0801e284
 80189c0:	0801e3f4 	.word	0x0801e3f4
 80189c4:	0801e2cc 	.word	0x0801e2cc
    goto nullreturn_ipr;
 80189c8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80189ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d106      	bne.n	80189de <ip4_reass+0x2da>
 80189d0:	4b15      	ldr	r3, [pc, #84]	@ (8018a28 <ip4_reass+0x324>)
 80189d2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80189d6:	4915      	ldr	r1, [pc, #84]	@ (8018a2c <ip4_reass+0x328>)
 80189d8:	4815      	ldr	r0, [pc, #84]	@ (8018a30 <ip4_reass+0x32c>)
 80189da:	f000 fdff 	bl	80195dc <iprintf>
  if (ipr->p == NULL) {
 80189de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80189e0:	685b      	ldr	r3, [r3, #4]
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d116      	bne.n	8018a14 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80189e6:	4b13      	ldr	r3, [pc, #76]	@ (8018a34 <ip4_reass+0x330>)
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80189ec:	429a      	cmp	r2, r3
 80189ee:	d006      	beq.n	80189fe <ip4_reass+0x2fa>
 80189f0:	4b0d      	ldr	r3, [pc, #52]	@ (8018a28 <ip4_reass+0x324>)
 80189f2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80189f6:	4910      	ldr	r1, [pc, #64]	@ (8018a38 <ip4_reass+0x334>)
 80189f8:	480d      	ldr	r0, [pc, #52]	@ (8018a30 <ip4_reass+0x32c>)
 80189fa:	f000 fdef 	bl	80195dc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80189fe:	2100      	movs	r1, #0
 8018a00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018a02:	f7ff fce7 	bl	80183d4 <ip_reass_dequeue_datagram>
 8018a06:	e006      	b.n	8018a16 <ip4_reass+0x312>
    goto nullreturn;
 8018a08:	bf00      	nop
 8018a0a:	e004      	b.n	8018a16 <ip4_reass+0x312>
    goto nullreturn;
 8018a0c:	bf00      	nop
 8018a0e:	e002      	b.n	8018a16 <ip4_reass+0x312>
      goto nullreturn;
 8018a10:	bf00      	nop
 8018a12:	e000      	b.n	8018a16 <ip4_reass+0x312>
  }

nullreturn:
 8018a14:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018a16:	6878      	ldr	r0, [r7, #4]
 8018a18:	f7f7 fcf2 	bl	8010400 <pbuf_free>
  return NULL;
 8018a1c:	2300      	movs	r3, #0
}
 8018a1e:	4618      	mov	r0, r3
 8018a20:	3738      	adds	r7, #56	@ 0x38
 8018a22:	46bd      	mov	sp, r7
 8018a24:	bd80      	pop	{r7, pc}
 8018a26:	bf00      	nop
 8018a28:	0801e284 	.word	0x0801e284
 8018a2c:	0801e410 	.word	0x0801e410
 8018a30:	0801e2cc 	.word	0x0801e2cc
 8018a34:	24008360 	.word	0x24008360
 8018a38:	0801e41c 	.word	0x0801e41c

08018a3c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018a40:	2005      	movs	r0, #5
 8018a42:	f7f6 fdc3 	bl	800f5cc <memp_malloc>
 8018a46:	4603      	mov	r3, r0
}
 8018a48:	4618      	mov	r0, r3
 8018a4a:	bd80      	pop	{r7, pc}

08018a4c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	b082      	sub	sp, #8
 8018a50:	af00      	add	r7, sp, #0
 8018a52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d106      	bne.n	8018a68 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018a5a:	4b07      	ldr	r3, [pc, #28]	@ (8018a78 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018a5c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8018a60:	4906      	ldr	r1, [pc, #24]	@ (8018a7c <ip_frag_free_pbuf_custom_ref+0x30>)
 8018a62:	4807      	ldr	r0, [pc, #28]	@ (8018a80 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018a64:	f000 fdba 	bl	80195dc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018a68:	6879      	ldr	r1, [r7, #4]
 8018a6a:	2005      	movs	r0, #5
 8018a6c:	f7f6 fe24 	bl	800f6b8 <memp_free>
}
 8018a70:	bf00      	nop
 8018a72:	3708      	adds	r7, #8
 8018a74:	46bd      	mov	sp, r7
 8018a76:	bd80      	pop	{r7, pc}
 8018a78:	0801e284 	.word	0x0801e284
 8018a7c:	0801e43c 	.word	0x0801e43c
 8018a80:	0801e2cc 	.word	0x0801e2cc

08018a84 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018a84:	b580      	push	{r7, lr}
 8018a86:	b084      	sub	sp, #16
 8018a88:	af00      	add	r7, sp, #0
 8018a8a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d106      	bne.n	8018aa4 <ipfrag_free_pbuf_custom+0x20>
 8018a96:	4b11      	ldr	r3, [pc, #68]	@ (8018adc <ipfrag_free_pbuf_custom+0x58>)
 8018a98:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8018a9c:	4910      	ldr	r1, [pc, #64]	@ (8018ae0 <ipfrag_free_pbuf_custom+0x5c>)
 8018a9e:	4811      	ldr	r0, [pc, #68]	@ (8018ae4 <ipfrag_free_pbuf_custom+0x60>)
 8018aa0:	f000 fd9c 	bl	80195dc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018aa4:	68fa      	ldr	r2, [r7, #12]
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	429a      	cmp	r2, r3
 8018aaa:	d006      	beq.n	8018aba <ipfrag_free_pbuf_custom+0x36>
 8018aac:	4b0b      	ldr	r3, [pc, #44]	@ (8018adc <ipfrag_free_pbuf_custom+0x58>)
 8018aae:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8018ab2:	490d      	ldr	r1, [pc, #52]	@ (8018ae8 <ipfrag_free_pbuf_custom+0x64>)
 8018ab4:	480b      	ldr	r0, [pc, #44]	@ (8018ae4 <ipfrag_free_pbuf_custom+0x60>)
 8018ab6:	f000 fd91 	bl	80195dc <iprintf>
  if (pcr->original != NULL) {
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	695b      	ldr	r3, [r3, #20]
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d004      	beq.n	8018acc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	695b      	ldr	r3, [r3, #20]
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	f7f7 fc9a 	bl	8010400 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018acc:	68f8      	ldr	r0, [r7, #12]
 8018ace:	f7ff ffbd 	bl	8018a4c <ip_frag_free_pbuf_custom_ref>
}
 8018ad2:	bf00      	nop
 8018ad4:	3710      	adds	r7, #16
 8018ad6:	46bd      	mov	sp, r7
 8018ad8:	bd80      	pop	{r7, pc}
 8018ada:	bf00      	nop
 8018adc:	0801e284 	.word	0x0801e284
 8018ae0:	0801e448 	.word	0x0801e448
 8018ae4:	0801e2cc 	.word	0x0801e2cc
 8018ae8:	0801e454 	.word	0x0801e454

08018aec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018aec:	b580      	push	{r7, lr}
 8018aee:	b094      	sub	sp, #80	@ 0x50
 8018af0:	af02      	add	r7, sp, #8
 8018af2:	60f8      	str	r0, [r7, #12]
 8018af4:	60b9      	str	r1, [r7, #8]
 8018af6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018af8:	2300      	movs	r3, #0
 8018afa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018afe:	68bb      	ldr	r3, [r7, #8]
 8018b00:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018b02:	3b14      	subs	r3, #20
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	da00      	bge.n	8018b0a <ip4_frag+0x1e>
 8018b08:	3307      	adds	r3, #7
 8018b0a:	10db      	asrs	r3, r3, #3
 8018b0c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018b0e:	2314      	movs	r3, #20
 8018b10:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	685b      	ldr	r3, [r3, #4]
 8018b16:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8018b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b1e:	781b      	ldrb	r3, [r3, #0]
 8018b20:	f003 030f 	and.w	r3, r3, #15
 8018b24:	b2db      	uxtb	r3, r3
 8018b26:	009b      	lsls	r3, r3, #2
 8018b28:	b2db      	uxtb	r3, r3
 8018b2a:	2b14      	cmp	r3, #20
 8018b2c:	d002      	beq.n	8018b34 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018b2e:	f06f 0305 	mvn.w	r3, #5
 8018b32:	e110      	b.n	8018d56 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	895b      	ldrh	r3, [r3, #10]
 8018b38:	2b13      	cmp	r3, #19
 8018b3a:	d809      	bhi.n	8018b50 <ip4_frag+0x64>
 8018b3c:	4b88      	ldr	r3, [pc, #544]	@ (8018d60 <ip4_frag+0x274>)
 8018b3e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8018b42:	4988      	ldr	r1, [pc, #544]	@ (8018d64 <ip4_frag+0x278>)
 8018b44:	4888      	ldr	r0, [pc, #544]	@ (8018d68 <ip4_frag+0x27c>)
 8018b46:	f000 fd49 	bl	80195dc <iprintf>
 8018b4a:	f06f 0305 	mvn.w	r3, #5
 8018b4e:	e102      	b.n	8018d56 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b52:	88db      	ldrh	r3, [r3, #6]
 8018b54:	b29b      	uxth	r3, r3
 8018b56:	4618      	mov	r0, r3
 8018b58:	f7f5 ff98 	bl	800ea8c <lwip_htons>
 8018b5c:	4603      	mov	r3, r0
 8018b5e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8018b60:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018b62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018b66:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018b6a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018b6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018b70:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	891b      	ldrh	r3, [r3, #8]
 8018b76:	3b14      	subs	r3, #20
 8018b78:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8018b7c:	e0e1      	b.n	8018d42 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018b7e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018b80:	00db      	lsls	r3, r3, #3
 8018b82:	b29b      	uxth	r3, r3
 8018b84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018b88:	4293      	cmp	r3, r2
 8018b8a:	bf28      	it	cs
 8018b8c:	4613      	movcs	r3, r2
 8018b8e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018b90:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018b94:	2114      	movs	r1, #20
 8018b96:	200e      	movs	r0, #14
 8018b98:	f7f7 f94e 	bl	800fe38 <pbuf_alloc>
 8018b9c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8018b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	f000 80d5 	beq.w	8018d50 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ba8:	895b      	ldrh	r3, [r3, #10]
 8018baa:	2b13      	cmp	r3, #19
 8018bac:	d806      	bhi.n	8018bbc <ip4_frag+0xd0>
 8018bae:	4b6c      	ldr	r3, [pc, #432]	@ (8018d60 <ip4_frag+0x274>)
 8018bb0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8018bb4:	496d      	ldr	r1, [pc, #436]	@ (8018d6c <ip4_frag+0x280>)
 8018bb6:	486c      	ldr	r0, [pc, #432]	@ (8018d68 <ip4_frag+0x27c>)
 8018bb8:	f000 fd10 	bl	80195dc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bbe:	685b      	ldr	r3, [r3, #4]
 8018bc0:	2214      	movs	r2, #20
 8018bc2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018bc4:	4618      	mov	r0, r3
 8018bc6:	f001 fd42 	bl	801a64e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bcc:	685b      	ldr	r3, [r3, #4]
 8018bce:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8018bd0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018bd2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8018bd6:	e064      	b.n	8018ca2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	895a      	ldrh	r2, [r3, #10]
 8018bdc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018bde:	1ad3      	subs	r3, r2, r3
 8018be0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	895b      	ldrh	r3, [r3, #10]
 8018be6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018be8:	429a      	cmp	r2, r3
 8018bea:	d906      	bls.n	8018bfa <ip4_frag+0x10e>
 8018bec:	4b5c      	ldr	r3, [pc, #368]	@ (8018d60 <ip4_frag+0x274>)
 8018bee:	f240 322d 	movw	r2, #813	@ 0x32d
 8018bf2:	495f      	ldr	r1, [pc, #380]	@ (8018d70 <ip4_frag+0x284>)
 8018bf4:	485c      	ldr	r0, [pc, #368]	@ (8018d68 <ip4_frag+0x27c>)
 8018bf6:	f000 fcf1 	bl	80195dc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018bfa:	8bfa      	ldrh	r2, [r7, #30]
 8018bfc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018c00:	4293      	cmp	r3, r2
 8018c02:	bf28      	it	cs
 8018c04:	4613      	movcs	r3, r2
 8018c06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018c0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d105      	bne.n	8018c1e <ip4_frag+0x132>
        poff = 0;
 8018c12:	2300      	movs	r3, #0
 8018c14:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018c16:	68fb      	ldr	r3, [r7, #12]
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	60fb      	str	r3, [r7, #12]
        continue;
 8018c1c:	e041      	b.n	8018ca2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018c1e:	f7ff ff0d 	bl	8018a3c <ip_frag_alloc_pbuf_custom_ref>
 8018c22:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018c24:	69bb      	ldr	r3, [r7, #24]
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d103      	bne.n	8018c32 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018c2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018c2c:	f7f7 fbe8 	bl	8010400 <pbuf_free>
        goto memerr;
 8018c30:	e08f      	b.n	8018d52 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018c32:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018c34:	68fb      	ldr	r3, [r7, #12]
 8018c36:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018c38:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018c3a:	4413      	add	r3, r2
 8018c3c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8018c40:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8018c44:	9201      	str	r2, [sp, #4]
 8018c46:	9300      	str	r3, [sp, #0]
 8018c48:	4603      	mov	r3, r0
 8018c4a:	2241      	movs	r2, #65	@ 0x41
 8018c4c:	2000      	movs	r0, #0
 8018c4e:	f7f7 fa1d 	bl	801008c <pbuf_alloced_custom>
 8018c52:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018c54:	697b      	ldr	r3, [r7, #20]
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d106      	bne.n	8018c68 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018c5a:	69b8      	ldr	r0, [r7, #24]
 8018c5c:	f7ff fef6 	bl	8018a4c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018c60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018c62:	f7f7 fbcd 	bl	8010400 <pbuf_free>
        goto memerr;
 8018c66:	e074      	b.n	8018d52 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018c68:	68f8      	ldr	r0, [r7, #12]
 8018c6a:	f7f7 fc6f 	bl	801054c <pbuf_ref>
      pcr->original = p;
 8018c6e:	69bb      	ldr	r3, [r7, #24]
 8018c70:	68fa      	ldr	r2, [r7, #12]
 8018c72:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018c74:	69bb      	ldr	r3, [r7, #24]
 8018c76:	4a3f      	ldr	r2, [pc, #252]	@ (8018d74 <ip4_frag+0x288>)
 8018c78:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018c7a:	6979      	ldr	r1, [r7, #20]
 8018c7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018c7e:	f7f7 fc8d 	bl	801059c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018c82:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8018c86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018c8a:	1ad3      	subs	r3, r2, r3
 8018c8c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8018c90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d004      	beq.n	8018ca2 <ip4_frag+0x1b6>
        poff = 0;
 8018c98:	2300      	movs	r3, #0
 8018c9a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018ca2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d196      	bne.n	8018bd8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018caa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018cac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018cb0:	4413      	add	r3, r2
 8018cb2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018cb4:	68bb      	ldr	r3, [r7, #8]
 8018cb6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018cb8:	f1a3 0213 	sub.w	r2, r3, #19
 8018cbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018cc0:	429a      	cmp	r2, r3
 8018cc2:	bfcc      	ite	gt
 8018cc4:	2301      	movgt	r3, #1
 8018cc6:	2300      	movle	r3, #0
 8018cc8:	b2db      	uxtb	r3, r3
 8018cca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018ccc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018cd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018cd4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8018cd6:	6a3b      	ldr	r3, [r7, #32]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d002      	beq.n	8018ce2 <ip4_frag+0x1f6>
 8018cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d003      	beq.n	8018cea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018ce2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018ce4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8018ce8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018cea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018cec:	4618      	mov	r0, r3
 8018cee:	f7f5 fecd 	bl	800ea8c <lwip_htons>
 8018cf2:	4603      	mov	r3, r0
 8018cf4:	461a      	mov	r2, r3
 8018cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018cf8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018cfa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018cfc:	3314      	adds	r3, #20
 8018cfe:	b29b      	uxth	r3, r3
 8018d00:	4618      	mov	r0, r3
 8018d02:	f7f5 fec3 	bl	800ea8c <lwip_htons>
 8018d06:	4603      	mov	r3, r0
 8018d08:	461a      	mov	r2, r3
 8018d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d0c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d10:	2200      	movs	r2, #0
 8018d12:	729a      	strb	r2, [r3, #10]
 8018d14:	2200      	movs	r2, #0
 8018d16:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018d18:	68bb      	ldr	r3, [r7, #8]
 8018d1a:	695b      	ldr	r3, [r3, #20]
 8018d1c:	687a      	ldr	r2, [r7, #4]
 8018d1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018d20:	68b8      	ldr	r0, [r7, #8]
 8018d22:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018d24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018d26:	f7f7 fb6b 	bl	8010400 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018d2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018d2e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018d30:	1ad3      	subs	r3, r2, r3
 8018d32:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8018d36:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8018d3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018d3c:	4413      	add	r3, r2
 8018d3e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8018d42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	f47f af19 	bne.w	8018b7e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018d4c:	2300      	movs	r3, #0
 8018d4e:	e002      	b.n	8018d56 <ip4_frag+0x26a>
      goto memerr;
 8018d50:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018d56:	4618      	mov	r0, r3
 8018d58:	3748      	adds	r7, #72	@ 0x48
 8018d5a:	46bd      	mov	sp, r7
 8018d5c:	bd80      	pop	{r7, pc}
 8018d5e:	bf00      	nop
 8018d60:	0801e284 	.word	0x0801e284
 8018d64:	0801e460 	.word	0x0801e460
 8018d68:	0801e2cc 	.word	0x0801e2cc
 8018d6c:	0801e47c 	.word	0x0801e47c
 8018d70:	0801e49c 	.word	0x0801e49c
 8018d74:	08018a85 	.word	0x08018a85

08018d78 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b086      	sub	sp, #24
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
 8018d80:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018d82:	230e      	movs	r3, #14
 8018d84:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	895b      	ldrh	r3, [r3, #10]
 8018d8a:	2b0e      	cmp	r3, #14
 8018d8c:	d96e      	bls.n	8018e6c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	7bdb      	ldrb	r3, [r3, #15]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d106      	bne.n	8018da4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018d96:	683b      	ldr	r3, [r7, #0]
 8018d98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018d9c:	3301      	adds	r3, #1
 8018d9e:	b2da      	uxtb	r2, r3
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	685b      	ldr	r3, [r3, #4]
 8018da8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018daa:	693b      	ldr	r3, [r7, #16]
 8018dac:	7b1a      	ldrb	r2, [r3, #12]
 8018dae:	7b5b      	ldrb	r3, [r3, #13]
 8018db0:	021b      	lsls	r3, r3, #8
 8018db2:	4313      	orrs	r3, r2
 8018db4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018db6:	693b      	ldr	r3, [r7, #16]
 8018db8:	781b      	ldrb	r3, [r3, #0]
 8018dba:	f003 0301 	and.w	r3, r3, #1
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d023      	beq.n	8018e0a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018dc2:	693b      	ldr	r3, [r7, #16]
 8018dc4:	781b      	ldrb	r3, [r3, #0]
 8018dc6:	2b01      	cmp	r3, #1
 8018dc8:	d10f      	bne.n	8018dea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018dca:	693b      	ldr	r3, [r7, #16]
 8018dcc:	785b      	ldrb	r3, [r3, #1]
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d11b      	bne.n	8018e0a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018dd2:	693b      	ldr	r3, [r7, #16]
 8018dd4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018dd6:	2b5e      	cmp	r3, #94	@ 0x5e
 8018dd8:	d117      	bne.n	8018e0a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	7b5b      	ldrb	r3, [r3, #13]
 8018dde:	f043 0310 	orr.w	r3, r3, #16
 8018de2:	b2da      	uxtb	r2, r3
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	735a      	strb	r2, [r3, #13]
 8018de8:	e00f      	b.n	8018e0a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018dea:	693b      	ldr	r3, [r7, #16]
 8018dec:	2206      	movs	r2, #6
 8018dee:	4928      	ldr	r1, [pc, #160]	@ (8018e90 <ethernet_input+0x118>)
 8018df0:	4618      	mov	r0, r3
 8018df2:	f000 fcdf 	bl	80197b4 <memcmp>
 8018df6:	4603      	mov	r3, r0
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d106      	bne.n	8018e0a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	7b5b      	ldrb	r3, [r3, #13]
 8018e00:	f043 0308 	orr.w	r3, r3, #8
 8018e04:	b2da      	uxtb	r2, r3
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018e0a:	89fb      	ldrh	r3, [r7, #14]
 8018e0c:	2b08      	cmp	r3, #8
 8018e0e:	d003      	beq.n	8018e18 <ethernet_input+0xa0>
 8018e10:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8018e14:	d014      	beq.n	8018e40 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018e16:	e032      	b.n	8018e7e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018e18:	683b      	ldr	r3, [r7, #0]
 8018e1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018e1e:	f003 0308 	and.w	r3, r3, #8
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d024      	beq.n	8018e70 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018e26:	8afb      	ldrh	r3, [r7, #22]
 8018e28:	4619      	mov	r1, r3
 8018e2a:	6878      	ldr	r0, [r7, #4]
 8018e2c:	f7f7 fa62 	bl	80102f4 <pbuf_remove_header>
 8018e30:	4603      	mov	r3, r0
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d11e      	bne.n	8018e74 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018e36:	6839      	ldr	r1, [r7, #0]
 8018e38:	6878      	ldr	r0, [r7, #4]
 8018e3a:	f7fe ff21 	bl	8017c80 <ip4_input>
      break;
 8018e3e:	e013      	b.n	8018e68 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018e40:	683b      	ldr	r3, [r7, #0]
 8018e42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018e46:	f003 0308 	and.w	r3, r3, #8
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d014      	beq.n	8018e78 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018e4e:	8afb      	ldrh	r3, [r7, #22]
 8018e50:	4619      	mov	r1, r3
 8018e52:	6878      	ldr	r0, [r7, #4]
 8018e54:	f7f7 fa4e 	bl	80102f4 <pbuf_remove_header>
 8018e58:	4603      	mov	r3, r0
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d10e      	bne.n	8018e7c <ethernet_input+0x104>
        etharp_input(p, netif);
 8018e5e:	6839      	ldr	r1, [r7, #0]
 8018e60:	6878      	ldr	r0, [r7, #4]
 8018e62:	f7fe f89b 	bl	8016f9c <etharp_input>
      break;
 8018e66:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018e68:	2300      	movs	r3, #0
 8018e6a:	e00c      	b.n	8018e86 <ethernet_input+0x10e>
    goto free_and_return;
 8018e6c:	bf00      	nop
 8018e6e:	e006      	b.n	8018e7e <ethernet_input+0x106>
        goto free_and_return;
 8018e70:	bf00      	nop
 8018e72:	e004      	b.n	8018e7e <ethernet_input+0x106>
        goto free_and_return;
 8018e74:	bf00      	nop
 8018e76:	e002      	b.n	8018e7e <ethernet_input+0x106>
        goto free_and_return;
 8018e78:	bf00      	nop
 8018e7a:	e000      	b.n	8018e7e <ethernet_input+0x106>
        goto free_and_return;
 8018e7c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018e7e:	6878      	ldr	r0, [r7, #4]
 8018e80:	f7f7 fabe 	bl	8010400 <pbuf_free>
  return ERR_OK;
 8018e84:	2300      	movs	r3, #0
}
 8018e86:	4618      	mov	r0, r3
 8018e88:	3718      	adds	r7, #24
 8018e8a:	46bd      	mov	sp, r7
 8018e8c:	bd80      	pop	{r7, pc}
 8018e8e:	bf00      	nop
 8018e90:	0801e6c8 	.word	0x0801e6c8

08018e94 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018e94:	b580      	push	{r7, lr}
 8018e96:	b086      	sub	sp, #24
 8018e98:	af00      	add	r7, sp, #0
 8018e9a:	60f8      	str	r0, [r7, #12]
 8018e9c:	60b9      	str	r1, [r7, #8]
 8018e9e:	607a      	str	r2, [r7, #4]
 8018ea0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018ea2:	8c3b      	ldrh	r3, [r7, #32]
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	f7f5 fdf1 	bl	800ea8c <lwip_htons>
 8018eaa:	4603      	mov	r3, r0
 8018eac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018eae:	210e      	movs	r1, #14
 8018eb0:	68b8      	ldr	r0, [r7, #8]
 8018eb2:	f7f7 fa0f 	bl	80102d4 <pbuf_add_header>
 8018eb6:	4603      	mov	r3, r0
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d125      	bne.n	8018f08 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018ebc:	68bb      	ldr	r3, [r7, #8]
 8018ebe:	685b      	ldr	r3, [r3, #4]
 8018ec0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018ec2:	693b      	ldr	r3, [r7, #16]
 8018ec4:	8afa      	ldrh	r2, [r7, #22]
 8018ec6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018ec8:	693b      	ldr	r3, [r7, #16]
 8018eca:	2206      	movs	r2, #6
 8018ecc:	6839      	ldr	r1, [r7, #0]
 8018ece:	4618      	mov	r0, r3
 8018ed0:	f001 fbbd 	bl	801a64e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018ed4:	693b      	ldr	r3, [r7, #16]
 8018ed6:	3306      	adds	r3, #6
 8018ed8:	2206      	movs	r2, #6
 8018eda:	6879      	ldr	r1, [r7, #4]
 8018edc:	4618      	mov	r0, r3
 8018ede:	f001 fbb6 	bl	801a64e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018ee2:	68fb      	ldr	r3, [r7, #12]
 8018ee4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018ee8:	2b06      	cmp	r3, #6
 8018eea:	d006      	beq.n	8018efa <ethernet_output+0x66>
 8018eec:	4b0a      	ldr	r3, [pc, #40]	@ (8018f18 <ethernet_output+0x84>)
 8018eee:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8018ef2:	490a      	ldr	r1, [pc, #40]	@ (8018f1c <ethernet_output+0x88>)
 8018ef4:	480a      	ldr	r0, [pc, #40]	@ (8018f20 <ethernet_output+0x8c>)
 8018ef6:	f000 fb71 	bl	80195dc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018efa:	68fb      	ldr	r3, [r7, #12]
 8018efc:	699b      	ldr	r3, [r3, #24]
 8018efe:	68b9      	ldr	r1, [r7, #8]
 8018f00:	68f8      	ldr	r0, [r7, #12]
 8018f02:	4798      	blx	r3
 8018f04:	4603      	mov	r3, r0
 8018f06:	e002      	b.n	8018f0e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018f08:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018f0a:	f06f 0301 	mvn.w	r3, #1
}
 8018f0e:	4618      	mov	r0, r3
 8018f10:	3718      	adds	r7, #24
 8018f12:	46bd      	mov	sp, r7
 8018f14:	bd80      	pop	{r7, pc}
 8018f16:	bf00      	nop
 8018f18:	0801e4ac 	.word	0x0801e4ac
 8018f1c:	0801e4e4 	.word	0x0801e4e4
 8018f20:	0801e518 	.word	0x0801e518

08018f24 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b082      	sub	sp, #8
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	6078      	str	r0, [r7, #4]
 8018f2c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8018f2e:	683b      	ldr	r3, [r7, #0]
 8018f30:	2200      	movs	r2, #0
 8018f32:	2104      	movs	r1, #4
 8018f34:	4618      	mov	r0, r3
 8018f36:	f7f1 fee9 	bl	800ad0c <osMessageQueueNew>
 8018f3a:	4602      	mov	r2, r0
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d102      	bne.n	8018f4e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8018f48:	f04f 33ff 	mov.w	r3, #4294967295
 8018f4c:	e000      	b.n	8018f50 <sys_mbox_new+0x2c>

  return ERR_OK;
 8018f4e:	2300      	movs	r3, #0
}
 8018f50:	4618      	mov	r0, r3
 8018f52:	3708      	adds	r7, #8
 8018f54:	46bd      	mov	sp, r7
 8018f56:	bd80      	pop	{r7, pc}

08018f58 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018f58:	b580      	push	{r7, lr}
 8018f5a:	b084      	sub	sp, #16
 8018f5c:	af00      	add	r7, sp, #0
 8018f5e:	6078      	str	r0, [r7, #4]
 8018f60:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	6818      	ldr	r0, [r3, #0]
 8018f66:	4639      	mov	r1, r7
 8018f68:	2300      	movs	r3, #0
 8018f6a:	2200      	movs	r2, #0
 8018f6c:	f7f1 ff42 	bl	800adf4 <osMessageQueuePut>
 8018f70:	4603      	mov	r3, r0
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d102      	bne.n	8018f7c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8018f76:	2300      	movs	r3, #0
 8018f78:	73fb      	strb	r3, [r7, #15]
 8018f7a:	e001      	b.n	8018f80 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018f7c:	23ff      	movs	r3, #255	@ 0xff
 8018f7e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018f84:	4618      	mov	r0, r3
 8018f86:	3710      	adds	r7, #16
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	bd80      	pop	{r7, pc}

08018f8c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	b086      	sub	sp, #24
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	60f8      	str	r0, [r7, #12]
 8018f94:	60b9      	str	r1, [r7, #8]
 8018f96:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8018f98:	f7f1 fbc8 	bl	800a72c <osKernelGetTickCount>
 8018f9c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d013      	beq.n	8018fcc <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8018fa4:	68fb      	ldr	r3, [r7, #12]
 8018fa6:	6818      	ldr	r0, [r3, #0]
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	2200      	movs	r2, #0
 8018fac:	68b9      	ldr	r1, [r7, #8]
 8018fae:	f7f1 ff81 	bl	800aeb4 <osMessageQueueGet>
 8018fb2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8018fb4:	693b      	ldr	r3, [r7, #16]
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d105      	bne.n	8018fc6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8018fba:	f7f1 fbb7 	bl	800a72c <osKernelGetTickCount>
 8018fbe:	4602      	mov	r2, r0
 8018fc0:	697b      	ldr	r3, [r7, #20]
 8018fc2:	1ad3      	subs	r3, r2, r3
 8018fc4:	e00f      	b.n	8018fe6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8018fca:	e00c      	b.n	8018fe6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8018fcc:	68fb      	ldr	r3, [r7, #12]
 8018fce:	6818      	ldr	r0, [r3, #0]
 8018fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	68b9      	ldr	r1, [r7, #8]
 8018fd8:	f7f1 ff6c 	bl	800aeb4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8018fdc:	f7f1 fba6 	bl	800a72c <osKernelGetTickCount>
 8018fe0:	4602      	mov	r2, r0
 8018fe2:	697b      	ldr	r3, [r7, #20]
 8018fe4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	3718      	adds	r7, #24
 8018fea:	46bd      	mov	sp, r7
 8018fec:	bd80      	pop	{r7, pc}

08018fee <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018fee:	b480      	push	{r7}
 8018ff0:	b083      	sub	sp, #12
 8018ff2:	af00      	add	r7, sp, #0
 8018ff4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d101      	bne.n	8019002 <sys_mbox_valid+0x14>
    return 0;
 8018ffe:	2300      	movs	r3, #0
 8019000:	e000      	b.n	8019004 <sys_mbox_valid+0x16>
  else
    return 1;
 8019002:	2301      	movs	r3, #1
}
 8019004:	4618      	mov	r0, r3
 8019006:	370c      	adds	r7, #12
 8019008:	46bd      	mov	sp, r7
 801900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801900e:	4770      	bx	lr

08019010 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019010:	b580      	push	{r7, lr}
 8019012:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8019014:	2000      	movs	r0, #0
 8019016:	f7f1 fc4b 	bl	800a8b0 <osMutexNew>
 801901a:	4603      	mov	r3, r0
 801901c:	4a01      	ldr	r2, [pc, #4]	@ (8019024 <sys_init+0x14>)
 801901e:	6013      	str	r3, [r2, #0]
#endif
}
 8019020:	bf00      	nop
 8019022:	bd80      	pop	{r7, pc}
 8019024:	24008368 	.word	0x24008368

08019028 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019028:	b580      	push	{r7, lr}
 801902a:	b082      	sub	sp, #8
 801902c:	af00      	add	r7, sp, #0
 801902e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8019030:	2000      	movs	r0, #0
 8019032:	f7f1 fc3d 	bl	800a8b0 <osMutexNew>
 8019036:	4602      	mov	r2, r0
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	2b00      	cmp	r3, #0
 8019042:	d102      	bne.n	801904a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019044:	f04f 33ff 	mov.w	r3, #4294967295
 8019048:	e000      	b.n	801904c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801904a:	2300      	movs	r3, #0
}
 801904c:	4618      	mov	r0, r3
 801904e:	3708      	adds	r7, #8
 8019050:	46bd      	mov	sp, r7
 8019052:	bd80      	pop	{r7, pc}

08019054 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019054:	b580      	push	{r7, lr}
 8019056:	b082      	sub	sp, #8
 8019058:	af00      	add	r7, sp, #0
 801905a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	f04f 31ff 	mov.w	r1, #4294967295
 8019064:	4618      	mov	r0, r3
 8019066:	f7f1 fca9 	bl	800a9bc <osMutexAcquire>
#endif
}
 801906a:	bf00      	nop
 801906c:	3708      	adds	r7, #8
 801906e:	46bd      	mov	sp, r7
 8019070:	bd80      	pop	{r7, pc}

08019072 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019072:	b580      	push	{r7, lr}
 8019074:	b082      	sub	sp, #8
 8019076:	af00      	add	r7, sp, #0
 8019078:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	4618      	mov	r0, r3
 8019080:	f7f1 fce7 	bl	800aa52 <osMutexRelease>
}
 8019084:	bf00      	nop
 8019086:	3708      	adds	r7, #8
 8019088:	46bd      	mov	sp, r7
 801908a:	bd80      	pop	{r7, pc}

0801908c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801908c:	b580      	push	{r7, lr}
 801908e:	b08e      	sub	sp, #56	@ 0x38
 8019090:	af00      	add	r7, sp, #0
 8019092:	60f8      	str	r0, [r7, #12]
 8019094:	60b9      	str	r1, [r7, #8]
 8019096:	607a      	str	r2, [r7, #4]
 8019098:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801909a:	f107 0314 	add.w	r3, r7, #20
 801909e:	2224      	movs	r2, #36	@ 0x24
 80190a0:	2100      	movs	r1, #0
 80190a2:	4618      	mov	r0, r3
 80190a4:	f000 fb96 	bl	80197d4 <memset>
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	617b      	str	r3, [r7, #20]
 80190ac:	683b      	ldr	r3, [r7, #0]
 80190ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80190b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80190b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80190b4:	f107 0314 	add.w	r3, r7, #20
 80190b8:	461a      	mov	r2, r3
 80190ba:	6879      	ldr	r1, [r7, #4]
 80190bc:	68b8      	ldr	r0, [r7, #8]
 80190be:	f7f1 fb4a 	bl	800a756 <osThreadNew>
 80190c2:	4603      	mov	r3, r0
#endif
}
 80190c4:	4618      	mov	r0, r3
 80190c6:	3738      	adds	r7, #56	@ 0x38
 80190c8:	46bd      	mov	sp, r7
 80190ca:	bd80      	pop	{r7, pc}

080190cc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80190d0:	4b04      	ldr	r3, [pc, #16]	@ (80190e4 <sys_arch_protect+0x18>)
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	f04f 31ff 	mov.w	r1, #4294967295
 80190d8:	4618      	mov	r0, r3
 80190da:	f7f1 fc6f 	bl	800a9bc <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80190de:	2301      	movs	r3, #1
}
 80190e0:	4618      	mov	r0, r3
 80190e2:	bd80      	pop	{r7, pc}
 80190e4:	24008368 	.word	0x24008368

080190e8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80190e8:	b580      	push	{r7, lr}
 80190ea:	b082      	sub	sp, #8
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80190f0:	4b04      	ldr	r3, [pc, #16]	@ (8019104 <sys_arch_unprotect+0x1c>)
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	4618      	mov	r0, r3
 80190f6:	f7f1 fcac 	bl	800aa52 <osMutexRelease>
}
 80190fa:	bf00      	nop
 80190fc:	3708      	adds	r7, #8
 80190fe:	46bd      	mov	sp, r7
 8019100:	bd80      	pop	{r7, pc}
 8019102:	bf00      	nop
 8019104:	24008368 	.word	0x24008368

08019108 <__assert_func>:
 8019108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801910a:	4614      	mov	r4, r2
 801910c:	461a      	mov	r2, r3
 801910e:	4b09      	ldr	r3, [pc, #36]	@ (8019134 <__assert_func+0x2c>)
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	4605      	mov	r5, r0
 8019114:	68d8      	ldr	r0, [r3, #12]
 8019116:	b14c      	cbz	r4, 801912c <__assert_func+0x24>
 8019118:	4b07      	ldr	r3, [pc, #28]	@ (8019138 <__assert_func+0x30>)
 801911a:	9100      	str	r1, [sp, #0]
 801911c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019120:	4906      	ldr	r1, [pc, #24]	@ (801913c <__assert_func+0x34>)
 8019122:	462b      	mov	r3, r5
 8019124:	f000 fa2a 	bl	801957c <fiprintf>
 8019128:	f001 fa9f 	bl	801a66a <abort>
 801912c:	4b04      	ldr	r3, [pc, #16]	@ (8019140 <__assert_func+0x38>)
 801912e:	461c      	mov	r4, r3
 8019130:	e7f3      	b.n	801911a <__assert_func+0x12>
 8019132:	bf00      	nop
 8019134:	2400004c 	.word	0x2400004c
 8019138:	0801e6d6 	.word	0x0801e6d6
 801913c:	0801e6e3 	.word	0x0801e6e3
 8019140:	0801e711 	.word	0x0801e711

08019144 <malloc>:
 8019144:	4b02      	ldr	r3, [pc, #8]	@ (8019150 <malloc+0xc>)
 8019146:	4601      	mov	r1, r0
 8019148:	6818      	ldr	r0, [r3, #0]
 801914a:	f000 b82d 	b.w	80191a8 <_malloc_r>
 801914e:	bf00      	nop
 8019150:	2400004c 	.word	0x2400004c

08019154 <free>:
 8019154:	4b02      	ldr	r3, [pc, #8]	@ (8019160 <free+0xc>)
 8019156:	4601      	mov	r1, r0
 8019158:	6818      	ldr	r0, [r3, #0]
 801915a:	f001 ba95 	b.w	801a688 <_free_r>
 801915e:	bf00      	nop
 8019160:	2400004c 	.word	0x2400004c

08019164 <sbrk_aligned>:
 8019164:	b570      	push	{r4, r5, r6, lr}
 8019166:	4e0f      	ldr	r6, [pc, #60]	@ (80191a4 <sbrk_aligned+0x40>)
 8019168:	460c      	mov	r4, r1
 801916a:	6831      	ldr	r1, [r6, #0]
 801916c:	4605      	mov	r5, r0
 801916e:	b911      	cbnz	r1, 8019176 <sbrk_aligned+0x12>
 8019170:	f001 fa14 	bl	801a59c <_sbrk_r>
 8019174:	6030      	str	r0, [r6, #0]
 8019176:	4621      	mov	r1, r4
 8019178:	4628      	mov	r0, r5
 801917a:	f001 fa0f 	bl	801a59c <_sbrk_r>
 801917e:	1c43      	adds	r3, r0, #1
 8019180:	d103      	bne.n	801918a <sbrk_aligned+0x26>
 8019182:	f04f 34ff 	mov.w	r4, #4294967295
 8019186:	4620      	mov	r0, r4
 8019188:	bd70      	pop	{r4, r5, r6, pc}
 801918a:	1cc4      	adds	r4, r0, #3
 801918c:	f024 0403 	bic.w	r4, r4, #3
 8019190:	42a0      	cmp	r0, r4
 8019192:	d0f8      	beq.n	8019186 <sbrk_aligned+0x22>
 8019194:	1a21      	subs	r1, r4, r0
 8019196:	4628      	mov	r0, r5
 8019198:	f001 fa00 	bl	801a59c <_sbrk_r>
 801919c:	3001      	adds	r0, #1
 801919e:	d1f2      	bne.n	8019186 <sbrk_aligned+0x22>
 80191a0:	e7ef      	b.n	8019182 <sbrk_aligned+0x1e>
 80191a2:	bf00      	nop
 80191a4:	2400836c 	.word	0x2400836c

080191a8 <_malloc_r>:
 80191a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191ac:	1ccd      	adds	r5, r1, #3
 80191ae:	f025 0503 	bic.w	r5, r5, #3
 80191b2:	3508      	adds	r5, #8
 80191b4:	2d0c      	cmp	r5, #12
 80191b6:	bf38      	it	cc
 80191b8:	250c      	movcc	r5, #12
 80191ba:	2d00      	cmp	r5, #0
 80191bc:	4606      	mov	r6, r0
 80191be:	db01      	blt.n	80191c4 <_malloc_r+0x1c>
 80191c0:	42a9      	cmp	r1, r5
 80191c2:	d904      	bls.n	80191ce <_malloc_r+0x26>
 80191c4:	230c      	movs	r3, #12
 80191c6:	6033      	str	r3, [r6, #0]
 80191c8:	2000      	movs	r0, #0
 80191ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80191ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80192a4 <_malloc_r+0xfc>
 80191d2:	f000 f869 	bl	80192a8 <__malloc_lock>
 80191d6:	f8d8 3000 	ldr.w	r3, [r8]
 80191da:	461c      	mov	r4, r3
 80191dc:	bb44      	cbnz	r4, 8019230 <_malloc_r+0x88>
 80191de:	4629      	mov	r1, r5
 80191e0:	4630      	mov	r0, r6
 80191e2:	f7ff ffbf 	bl	8019164 <sbrk_aligned>
 80191e6:	1c43      	adds	r3, r0, #1
 80191e8:	4604      	mov	r4, r0
 80191ea:	d158      	bne.n	801929e <_malloc_r+0xf6>
 80191ec:	f8d8 4000 	ldr.w	r4, [r8]
 80191f0:	4627      	mov	r7, r4
 80191f2:	2f00      	cmp	r7, #0
 80191f4:	d143      	bne.n	801927e <_malloc_r+0xd6>
 80191f6:	2c00      	cmp	r4, #0
 80191f8:	d04b      	beq.n	8019292 <_malloc_r+0xea>
 80191fa:	6823      	ldr	r3, [r4, #0]
 80191fc:	4639      	mov	r1, r7
 80191fe:	4630      	mov	r0, r6
 8019200:	eb04 0903 	add.w	r9, r4, r3
 8019204:	f001 f9ca 	bl	801a59c <_sbrk_r>
 8019208:	4581      	cmp	r9, r0
 801920a:	d142      	bne.n	8019292 <_malloc_r+0xea>
 801920c:	6821      	ldr	r1, [r4, #0]
 801920e:	1a6d      	subs	r5, r5, r1
 8019210:	4629      	mov	r1, r5
 8019212:	4630      	mov	r0, r6
 8019214:	f7ff ffa6 	bl	8019164 <sbrk_aligned>
 8019218:	3001      	adds	r0, #1
 801921a:	d03a      	beq.n	8019292 <_malloc_r+0xea>
 801921c:	6823      	ldr	r3, [r4, #0]
 801921e:	442b      	add	r3, r5
 8019220:	6023      	str	r3, [r4, #0]
 8019222:	f8d8 3000 	ldr.w	r3, [r8]
 8019226:	685a      	ldr	r2, [r3, #4]
 8019228:	bb62      	cbnz	r2, 8019284 <_malloc_r+0xdc>
 801922a:	f8c8 7000 	str.w	r7, [r8]
 801922e:	e00f      	b.n	8019250 <_malloc_r+0xa8>
 8019230:	6822      	ldr	r2, [r4, #0]
 8019232:	1b52      	subs	r2, r2, r5
 8019234:	d420      	bmi.n	8019278 <_malloc_r+0xd0>
 8019236:	2a0b      	cmp	r2, #11
 8019238:	d917      	bls.n	801926a <_malloc_r+0xc2>
 801923a:	1961      	adds	r1, r4, r5
 801923c:	42a3      	cmp	r3, r4
 801923e:	6025      	str	r5, [r4, #0]
 8019240:	bf18      	it	ne
 8019242:	6059      	strne	r1, [r3, #4]
 8019244:	6863      	ldr	r3, [r4, #4]
 8019246:	bf08      	it	eq
 8019248:	f8c8 1000 	streq.w	r1, [r8]
 801924c:	5162      	str	r2, [r4, r5]
 801924e:	604b      	str	r3, [r1, #4]
 8019250:	4630      	mov	r0, r6
 8019252:	f000 f82f 	bl	80192b4 <__malloc_unlock>
 8019256:	f104 000b 	add.w	r0, r4, #11
 801925a:	1d23      	adds	r3, r4, #4
 801925c:	f020 0007 	bic.w	r0, r0, #7
 8019260:	1ac2      	subs	r2, r0, r3
 8019262:	bf1c      	itt	ne
 8019264:	1a1b      	subne	r3, r3, r0
 8019266:	50a3      	strne	r3, [r4, r2]
 8019268:	e7af      	b.n	80191ca <_malloc_r+0x22>
 801926a:	6862      	ldr	r2, [r4, #4]
 801926c:	42a3      	cmp	r3, r4
 801926e:	bf0c      	ite	eq
 8019270:	f8c8 2000 	streq.w	r2, [r8]
 8019274:	605a      	strne	r2, [r3, #4]
 8019276:	e7eb      	b.n	8019250 <_malloc_r+0xa8>
 8019278:	4623      	mov	r3, r4
 801927a:	6864      	ldr	r4, [r4, #4]
 801927c:	e7ae      	b.n	80191dc <_malloc_r+0x34>
 801927e:	463c      	mov	r4, r7
 8019280:	687f      	ldr	r7, [r7, #4]
 8019282:	e7b6      	b.n	80191f2 <_malloc_r+0x4a>
 8019284:	461a      	mov	r2, r3
 8019286:	685b      	ldr	r3, [r3, #4]
 8019288:	42a3      	cmp	r3, r4
 801928a:	d1fb      	bne.n	8019284 <_malloc_r+0xdc>
 801928c:	2300      	movs	r3, #0
 801928e:	6053      	str	r3, [r2, #4]
 8019290:	e7de      	b.n	8019250 <_malloc_r+0xa8>
 8019292:	230c      	movs	r3, #12
 8019294:	6033      	str	r3, [r6, #0]
 8019296:	4630      	mov	r0, r6
 8019298:	f000 f80c 	bl	80192b4 <__malloc_unlock>
 801929c:	e794      	b.n	80191c8 <_malloc_r+0x20>
 801929e:	6005      	str	r5, [r0, #0]
 80192a0:	e7d6      	b.n	8019250 <_malloc_r+0xa8>
 80192a2:	bf00      	nop
 80192a4:	24008370 	.word	0x24008370

080192a8 <__malloc_lock>:
 80192a8:	4801      	ldr	r0, [pc, #4]	@ (80192b0 <__malloc_lock+0x8>)
 80192aa:	f001 b9c5 	b.w	801a638 <__retarget_lock_acquire_recursive>
 80192ae:	bf00      	nop
 80192b0:	240084da 	.word	0x240084da

080192b4 <__malloc_unlock>:
 80192b4:	4801      	ldr	r0, [pc, #4]	@ (80192bc <__malloc_unlock+0x8>)
 80192b6:	f001 b9c1 	b.w	801a63c <__retarget_lock_release_recursive>
 80192ba:	bf00      	nop
 80192bc:	240084da 	.word	0x240084da

080192c0 <rand>:
 80192c0:	4b16      	ldr	r3, [pc, #88]	@ (801931c <rand+0x5c>)
 80192c2:	b510      	push	{r4, lr}
 80192c4:	681c      	ldr	r4, [r3, #0]
 80192c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80192c8:	b9b3      	cbnz	r3, 80192f8 <rand+0x38>
 80192ca:	2018      	movs	r0, #24
 80192cc:	f7ff ff3a 	bl	8019144 <malloc>
 80192d0:	4602      	mov	r2, r0
 80192d2:	6320      	str	r0, [r4, #48]	@ 0x30
 80192d4:	b920      	cbnz	r0, 80192e0 <rand+0x20>
 80192d6:	4b12      	ldr	r3, [pc, #72]	@ (8019320 <rand+0x60>)
 80192d8:	4812      	ldr	r0, [pc, #72]	@ (8019324 <rand+0x64>)
 80192da:	2152      	movs	r1, #82	@ 0x52
 80192dc:	f7ff ff14 	bl	8019108 <__assert_func>
 80192e0:	4911      	ldr	r1, [pc, #68]	@ (8019328 <rand+0x68>)
 80192e2:	4b12      	ldr	r3, [pc, #72]	@ (801932c <rand+0x6c>)
 80192e4:	e9c0 1300 	strd	r1, r3, [r0]
 80192e8:	4b11      	ldr	r3, [pc, #68]	@ (8019330 <rand+0x70>)
 80192ea:	6083      	str	r3, [r0, #8]
 80192ec:	230b      	movs	r3, #11
 80192ee:	8183      	strh	r3, [r0, #12]
 80192f0:	2100      	movs	r1, #0
 80192f2:	2001      	movs	r0, #1
 80192f4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80192f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80192fa:	480e      	ldr	r0, [pc, #56]	@ (8019334 <rand+0x74>)
 80192fc:	690b      	ldr	r3, [r1, #16]
 80192fe:	694c      	ldr	r4, [r1, #20]
 8019300:	4a0d      	ldr	r2, [pc, #52]	@ (8019338 <rand+0x78>)
 8019302:	4358      	muls	r0, r3
 8019304:	fb02 0004 	mla	r0, r2, r4, r0
 8019308:	fba3 3202 	umull	r3, r2, r3, r2
 801930c:	3301      	adds	r3, #1
 801930e:	eb40 0002 	adc.w	r0, r0, r2
 8019312:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019316:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801931a:	bd10      	pop	{r4, pc}
 801931c:	2400004c 	.word	0x2400004c
 8019320:	0801e712 	.word	0x0801e712
 8019324:	0801e729 	.word	0x0801e729
 8019328:	abcd330e 	.word	0xabcd330e
 801932c:	e66d1234 	.word	0xe66d1234
 8019330:	0005deec 	.word	0x0005deec
 8019334:	5851f42d 	.word	0x5851f42d
 8019338:	4c957f2d 	.word	0x4c957f2d

0801933c <_strtol_l.isra.0>:
 801933c:	2b24      	cmp	r3, #36	@ 0x24
 801933e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019342:	4686      	mov	lr, r0
 8019344:	4690      	mov	r8, r2
 8019346:	d801      	bhi.n	801934c <_strtol_l.isra.0+0x10>
 8019348:	2b01      	cmp	r3, #1
 801934a:	d106      	bne.n	801935a <_strtol_l.isra.0+0x1e>
 801934c:	f001 f948 	bl	801a5e0 <__errno>
 8019350:	2316      	movs	r3, #22
 8019352:	6003      	str	r3, [r0, #0]
 8019354:	2000      	movs	r0, #0
 8019356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801935a:	4834      	ldr	r0, [pc, #208]	@ (801942c <_strtol_l.isra.0+0xf0>)
 801935c:	460d      	mov	r5, r1
 801935e:	462a      	mov	r2, r5
 8019360:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019364:	5d06      	ldrb	r6, [r0, r4]
 8019366:	f016 0608 	ands.w	r6, r6, #8
 801936a:	d1f8      	bne.n	801935e <_strtol_l.isra.0+0x22>
 801936c:	2c2d      	cmp	r4, #45	@ 0x2d
 801936e:	d110      	bne.n	8019392 <_strtol_l.isra.0+0x56>
 8019370:	782c      	ldrb	r4, [r5, #0]
 8019372:	2601      	movs	r6, #1
 8019374:	1c95      	adds	r5, r2, #2
 8019376:	f033 0210 	bics.w	r2, r3, #16
 801937a:	d115      	bne.n	80193a8 <_strtol_l.isra.0+0x6c>
 801937c:	2c30      	cmp	r4, #48	@ 0x30
 801937e:	d10d      	bne.n	801939c <_strtol_l.isra.0+0x60>
 8019380:	782a      	ldrb	r2, [r5, #0]
 8019382:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019386:	2a58      	cmp	r2, #88	@ 0x58
 8019388:	d108      	bne.n	801939c <_strtol_l.isra.0+0x60>
 801938a:	786c      	ldrb	r4, [r5, #1]
 801938c:	3502      	adds	r5, #2
 801938e:	2310      	movs	r3, #16
 8019390:	e00a      	b.n	80193a8 <_strtol_l.isra.0+0x6c>
 8019392:	2c2b      	cmp	r4, #43	@ 0x2b
 8019394:	bf04      	itt	eq
 8019396:	782c      	ldrbeq	r4, [r5, #0]
 8019398:	1c95      	addeq	r5, r2, #2
 801939a:	e7ec      	b.n	8019376 <_strtol_l.isra.0+0x3a>
 801939c:	2b00      	cmp	r3, #0
 801939e:	d1f6      	bne.n	801938e <_strtol_l.isra.0+0x52>
 80193a0:	2c30      	cmp	r4, #48	@ 0x30
 80193a2:	bf14      	ite	ne
 80193a4:	230a      	movne	r3, #10
 80193a6:	2308      	moveq	r3, #8
 80193a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80193ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 80193b0:	2200      	movs	r2, #0
 80193b2:	fbbc f9f3 	udiv	r9, ip, r3
 80193b6:	4610      	mov	r0, r2
 80193b8:	fb03 ca19 	mls	sl, r3, r9, ip
 80193bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80193c0:	2f09      	cmp	r7, #9
 80193c2:	d80f      	bhi.n	80193e4 <_strtol_l.isra.0+0xa8>
 80193c4:	463c      	mov	r4, r7
 80193c6:	42a3      	cmp	r3, r4
 80193c8:	dd1b      	ble.n	8019402 <_strtol_l.isra.0+0xc6>
 80193ca:	1c57      	adds	r7, r2, #1
 80193cc:	d007      	beq.n	80193de <_strtol_l.isra.0+0xa2>
 80193ce:	4581      	cmp	r9, r0
 80193d0:	d314      	bcc.n	80193fc <_strtol_l.isra.0+0xc0>
 80193d2:	d101      	bne.n	80193d8 <_strtol_l.isra.0+0x9c>
 80193d4:	45a2      	cmp	sl, r4
 80193d6:	db11      	blt.n	80193fc <_strtol_l.isra.0+0xc0>
 80193d8:	fb00 4003 	mla	r0, r0, r3, r4
 80193dc:	2201      	movs	r2, #1
 80193de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80193e2:	e7eb      	b.n	80193bc <_strtol_l.isra.0+0x80>
 80193e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80193e8:	2f19      	cmp	r7, #25
 80193ea:	d801      	bhi.n	80193f0 <_strtol_l.isra.0+0xb4>
 80193ec:	3c37      	subs	r4, #55	@ 0x37
 80193ee:	e7ea      	b.n	80193c6 <_strtol_l.isra.0+0x8a>
 80193f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80193f4:	2f19      	cmp	r7, #25
 80193f6:	d804      	bhi.n	8019402 <_strtol_l.isra.0+0xc6>
 80193f8:	3c57      	subs	r4, #87	@ 0x57
 80193fa:	e7e4      	b.n	80193c6 <_strtol_l.isra.0+0x8a>
 80193fc:	f04f 32ff 	mov.w	r2, #4294967295
 8019400:	e7ed      	b.n	80193de <_strtol_l.isra.0+0xa2>
 8019402:	1c53      	adds	r3, r2, #1
 8019404:	d108      	bne.n	8019418 <_strtol_l.isra.0+0xdc>
 8019406:	2322      	movs	r3, #34	@ 0x22
 8019408:	f8ce 3000 	str.w	r3, [lr]
 801940c:	4660      	mov	r0, ip
 801940e:	f1b8 0f00 	cmp.w	r8, #0
 8019412:	d0a0      	beq.n	8019356 <_strtol_l.isra.0+0x1a>
 8019414:	1e69      	subs	r1, r5, #1
 8019416:	e006      	b.n	8019426 <_strtol_l.isra.0+0xea>
 8019418:	b106      	cbz	r6, 801941c <_strtol_l.isra.0+0xe0>
 801941a:	4240      	negs	r0, r0
 801941c:	f1b8 0f00 	cmp.w	r8, #0
 8019420:	d099      	beq.n	8019356 <_strtol_l.isra.0+0x1a>
 8019422:	2a00      	cmp	r2, #0
 8019424:	d1f6      	bne.n	8019414 <_strtol_l.isra.0+0xd8>
 8019426:	f8c8 1000 	str.w	r1, [r8]
 801942a:	e794      	b.n	8019356 <_strtol_l.isra.0+0x1a>
 801942c:	0801e876 	.word	0x0801e876

08019430 <_strtol_r>:
 8019430:	f7ff bf84 	b.w	801933c <_strtol_l.isra.0>

08019434 <std>:
 8019434:	2300      	movs	r3, #0
 8019436:	b510      	push	{r4, lr}
 8019438:	4604      	mov	r4, r0
 801943a:	e9c0 3300 	strd	r3, r3, [r0]
 801943e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019442:	6083      	str	r3, [r0, #8]
 8019444:	8181      	strh	r1, [r0, #12]
 8019446:	6643      	str	r3, [r0, #100]	@ 0x64
 8019448:	81c2      	strh	r2, [r0, #14]
 801944a:	6183      	str	r3, [r0, #24]
 801944c:	4619      	mov	r1, r3
 801944e:	2208      	movs	r2, #8
 8019450:	305c      	adds	r0, #92	@ 0x5c
 8019452:	f000 f9bf 	bl	80197d4 <memset>
 8019456:	4b0d      	ldr	r3, [pc, #52]	@ (801948c <std+0x58>)
 8019458:	6263      	str	r3, [r4, #36]	@ 0x24
 801945a:	4b0d      	ldr	r3, [pc, #52]	@ (8019490 <std+0x5c>)
 801945c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801945e:	4b0d      	ldr	r3, [pc, #52]	@ (8019494 <std+0x60>)
 8019460:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019462:	4b0d      	ldr	r3, [pc, #52]	@ (8019498 <std+0x64>)
 8019464:	6323      	str	r3, [r4, #48]	@ 0x30
 8019466:	4b0d      	ldr	r3, [pc, #52]	@ (801949c <std+0x68>)
 8019468:	6224      	str	r4, [r4, #32]
 801946a:	429c      	cmp	r4, r3
 801946c:	d006      	beq.n	801947c <std+0x48>
 801946e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019472:	4294      	cmp	r4, r2
 8019474:	d002      	beq.n	801947c <std+0x48>
 8019476:	33d0      	adds	r3, #208	@ 0xd0
 8019478:	429c      	cmp	r4, r3
 801947a:	d105      	bne.n	8019488 <std+0x54>
 801947c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019484:	f001 b8d6 	b.w	801a634 <__retarget_lock_init_recursive>
 8019488:	bd10      	pop	{r4, pc}
 801948a:	bf00      	nop
 801948c:	08019601 	.word	0x08019601
 8019490:	08019627 	.word	0x08019627
 8019494:	0801965f 	.word	0x0801965f
 8019498:	08019683 	.word	0x08019683
 801949c:	24008374 	.word	0x24008374

080194a0 <stdio_exit_handler>:
 80194a0:	4a02      	ldr	r2, [pc, #8]	@ (80194ac <stdio_exit_handler+0xc>)
 80194a2:	4903      	ldr	r1, [pc, #12]	@ (80194b0 <stdio_exit_handler+0x10>)
 80194a4:	4803      	ldr	r0, [pc, #12]	@ (80194b4 <stdio_exit_handler+0x14>)
 80194a6:	f000 b87b 	b.w	80195a0 <_fwalk_sglue>
 80194aa:	bf00      	nop
 80194ac:	24000038 	.word	0x24000038
 80194b0:	0801af3d 	.word	0x0801af3d
 80194b4:	24000050 	.word	0x24000050

080194b8 <cleanup_stdio>:
 80194b8:	6841      	ldr	r1, [r0, #4]
 80194ba:	4b0c      	ldr	r3, [pc, #48]	@ (80194ec <cleanup_stdio+0x34>)
 80194bc:	4299      	cmp	r1, r3
 80194be:	b510      	push	{r4, lr}
 80194c0:	4604      	mov	r4, r0
 80194c2:	d001      	beq.n	80194c8 <cleanup_stdio+0x10>
 80194c4:	f001 fd3a 	bl	801af3c <_fflush_r>
 80194c8:	68a1      	ldr	r1, [r4, #8]
 80194ca:	4b09      	ldr	r3, [pc, #36]	@ (80194f0 <cleanup_stdio+0x38>)
 80194cc:	4299      	cmp	r1, r3
 80194ce:	d002      	beq.n	80194d6 <cleanup_stdio+0x1e>
 80194d0:	4620      	mov	r0, r4
 80194d2:	f001 fd33 	bl	801af3c <_fflush_r>
 80194d6:	68e1      	ldr	r1, [r4, #12]
 80194d8:	4b06      	ldr	r3, [pc, #24]	@ (80194f4 <cleanup_stdio+0x3c>)
 80194da:	4299      	cmp	r1, r3
 80194dc:	d004      	beq.n	80194e8 <cleanup_stdio+0x30>
 80194de:	4620      	mov	r0, r4
 80194e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194e4:	f001 bd2a 	b.w	801af3c <_fflush_r>
 80194e8:	bd10      	pop	{r4, pc}
 80194ea:	bf00      	nop
 80194ec:	24008374 	.word	0x24008374
 80194f0:	240083dc 	.word	0x240083dc
 80194f4:	24008444 	.word	0x24008444

080194f8 <global_stdio_init.part.0>:
 80194f8:	b510      	push	{r4, lr}
 80194fa:	4b0b      	ldr	r3, [pc, #44]	@ (8019528 <global_stdio_init.part.0+0x30>)
 80194fc:	4c0b      	ldr	r4, [pc, #44]	@ (801952c <global_stdio_init.part.0+0x34>)
 80194fe:	4a0c      	ldr	r2, [pc, #48]	@ (8019530 <global_stdio_init.part.0+0x38>)
 8019500:	601a      	str	r2, [r3, #0]
 8019502:	4620      	mov	r0, r4
 8019504:	2200      	movs	r2, #0
 8019506:	2104      	movs	r1, #4
 8019508:	f7ff ff94 	bl	8019434 <std>
 801950c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019510:	2201      	movs	r2, #1
 8019512:	2109      	movs	r1, #9
 8019514:	f7ff ff8e 	bl	8019434 <std>
 8019518:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801951c:	2202      	movs	r2, #2
 801951e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019522:	2112      	movs	r1, #18
 8019524:	f7ff bf86 	b.w	8019434 <std>
 8019528:	240084ac 	.word	0x240084ac
 801952c:	24008374 	.word	0x24008374
 8019530:	080194a1 	.word	0x080194a1

08019534 <__sfp_lock_acquire>:
 8019534:	4801      	ldr	r0, [pc, #4]	@ (801953c <__sfp_lock_acquire+0x8>)
 8019536:	f001 b87f 	b.w	801a638 <__retarget_lock_acquire_recursive>
 801953a:	bf00      	nop
 801953c:	240084db 	.word	0x240084db

08019540 <__sfp_lock_release>:
 8019540:	4801      	ldr	r0, [pc, #4]	@ (8019548 <__sfp_lock_release+0x8>)
 8019542:	f001 b87b 	b.w	801a63c <__retarget_lock_release_recursive>
 8019546:	bf00      	nop
 8019548:	240084db 	.word	0x240084db

0801954c <__sinit>:
 801954c:	b510      	push	{r4, lr}
 801954e:	4604      	mov	r4, r0
 8019550:	f7ff fff0 	bl	8019534 <__sfp_lock_acquire>
 8019554:	6a23      	ldr	r3, [r4, #32]
 8019556:	b11b      	cbz	r3, 8019560 <__sinit+0x14>
 8019558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801955c:	f7ff bff0 	b.w	8019540 <__sfp_lock_release>
 8019560:	4b04      	ldr	r3, [pc, #16]	@ (8019574 <__sinit+0x28>)
 8019562:	6223      	str	r3, [r4, #32]
 8019564:	4b04      	ldr	r3, [pc, #16]	@ (8019578 <__sinit+0x2c>)
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	2b00      	cmp	r3, #0
 801956a:	d1f5      	bne.n	8019558 <__sinit+0xc>
 801956c:	f7ff ffc4 	bl	80194f8 <global_stdio_init.part.0>
 8019570:	e7f2      	b.n	8019558 <__sinit+0xc>
 8019572:	bf00      	nop
 8019574:	080194b9 	.word	0x080194b9
 8019578:	240084ac 	.word	0x240084ac

0801957c <fiprintf>:
 801957c:	b40e      	push	{r1, r2, r3}
 801957e:	b503      	push	{r0, r1, lr}
 8019580:	4601      	mov	r1, r0
 8019582:	ab03      	add	r3, sp, #12
 8019584:	4805      	ldr	r0, [pc, #20]	@ (801959c <fiprintf+0x20>)
 8019586:	f853 2b04 	ldr.w	r2, [r3], #4
 801958a:	6800      	ldr	r0, [r0, #0]
 801958c:	9301      	str	r3, [sp, #4]
 801958e:	f001 f9ad 	bl	801a8ec <_vfiprintf_r>
 8019592:	b002      	add	sp, #8
 8019594:	f85d eb04 	ldr.w	lr, [sp], #4
 8019598:	b003      	add	sp, #12
 801959a:	4770      	bx	lr
 801959c:	2400004c 	.word	0x2400004c

080195a0 <_fwalk_sglue>:
 80195a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195a4:	4607      	mov	r7, r0
 80195a6:	4688      	mov	r8, r1
 80195a8:	4614      	mov	r4, r2
 80195aa:	2600      	movs	r6, #0
 80195ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80195b0:	f1b9 0901 	subs.w	r9, r9, #1
 80195b4:	d505      	bpl.n	80195c2 <_fwalk_sglue+0x22>
 80195b6:	6824      	ldr	r4, [r4, #0]
 80195b8:	2c00      	cmp	r4, #0
 80195ba:	d1f7      	bne.n	80195ac <_fwalk_sglue+0xc>
 80195bc:	4630      	mov	r0, r6
 80195be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195c2:	89ab      	ldrh	r3, [r5, #12]
 80195c4:	2b01      	cmp	r3, #1
 80195c6:	d907      	bls.n	80195d8 <_fwalk_sglue+0x38>
 80195c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80195cc:	3301      	adds	r3, #1
 80195ce:	d003      	beq.n	80195d8 <_fwalk_sglue+0x38>
 80195d0:	4629      	mov	r1, r5
 80195d2:	4638      	mov	r0, r7
 80195d4:	47c0      	blx	r8
 80195d6:	4306      	orrs	r6, r0
 80195d8:	3568      	adds	r5, #104	@ 0x68
 80195da:	e7e9      	b.n	80195b0 <_fwalk_sglue+0x10>

080195dc <iprintf>:
 80195dc:	b40f      	push	{r0, r1, r2, r3}
 80195de:	b507      	push	{r0, r1, r2, lr}
 80195e0:	4906      	ldr	r1, [pc, #24]	@ (80195fc <iprintf+0x20>)
 80195e2:	ab04      	add	r3, sp, #16
 80195e4:	6808      	ldr	r0, [r1, #0]
 80195e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80195ea:	6881      	ldr	r1, [r0, #8]
 80195ec:	9301      	str	r3, [sp, #4]
 80195ee:	f001 f97d 	bl	801a8ec <_vfiprintf_r>
 80195f2:	b003      	add	sp, #12
 80195f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80195f8:	b004      	add	sp, #16
 80195fa:	4770      	bx	lr
 80195fc:	2400004c 	.word	0x2400004c

08019600 <__sread>:
 8019600:	b510      	push	{r4, lr}
 8019602:	460c      	mov	r4, r1
 8019604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019608:	f000 ffb6 	bl	801a578 <_read_r>
 801960c:	2800      	cmp	r0, #0
 801960e:	bfab      	itete	ge
 8019610:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019612:	89a3      	ldrhlt	r3, [r4, #12]
 8019614:	181b      	addge	r3, r3, r0
 8019616:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801961a:	bfac      	ite	ge
 801961c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801961e:	81a3      	strhlt	r3, [r4, #12]
 8019620:	bd10      	pop	{r4, pc}

08019622 <__seofread>:
 8019622:	2000      	movs	r0, #0
 8019624:	4770      	bx	lr

08019626 <__swrite>:
 8019626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801962a:	461f      	mov	r7, r3
 801962c:	898b      	ldrh	r3, [r1, #12]
 801962e:	05db      	lsls	r3, r3, #23
 8019630:	4605      	mov	r5, r0
 8019632:	460c      	mov	r4, r1
 8019634:	4616      	mov	r6, r2
 8019636:	d505      	bpl.n	8019644 <__swrite+0x1e>
 8019638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801963c:	2302      	movs	r3, #2
 801963e:	2200      	movs	r2, #0
 8019640:	f000 ff88 	bl	801a554 <_lseek_r>
 8019644:	89a3      	ldrh	r3, [r4, #12]
 8019646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801964a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801964e:	81a3      	strh	r3, [r4, #12]
 8019650:	4632      	mov	r2, r6
 8019652:	463b      	mov	r3, r7
 8019654:	4628      	mov	r0, r5
 8019656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801965a:	f000 bfaf 	b.w	801a5bc <_write_r>

0801965e <__sseek>:
 801965e:	b510      	push	{r4, lr}
 8019660:	460c      	mov	r4, r1
 8019662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019666:	f000 ff75 	bl	801a554 <_lseek_r>
 801966a:	1c43      	adds	r3, r0, #1
 801966c:	89a3      	ldrh	r3, [r4, #12]
 801966e:	bf15      	itete	ne
 8019670:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019672:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019676:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801967a:	81a3      	strheq	r3, [r4, #12]
 801967c:	bf18      	it	ne
 801967e:	81a3      	strhne	r3, [r4, #12]
 8019680:	bd10      	pop	{r4, pc}

08019682 <__sclose>:
 8019682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019686:	f000 bef7 	b.w	801a478 <_close_r>

0801968a <__swbuf_r>:
 801968a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801968c:	460e      	mov	r6, r1
 801968e:	4614      	mov	r4, r2
 8019690:	4605      	mov	r5, r0
 8019692:	b118      	cbz	r0, 801969c <__swbuf_r+0x12>
 8019694:	6a03      	ldr	r3, [r0, #32]
 8019696:	b90b      	cbnz	r3, 801969c <__swbuf_r+0x12>
 8019698:	f7ff ff58 	bl	801954c <__sinit>
 801969c:	69a3      	ldr	r3, [r4, #24]
 801969e:	60a3      	str	r3, [r4, #8]
 80196a0:	89a3      	ldrh	r3, [r4, #12]
 80196a2:	071a      	lsls	r2, r3, #28
 80196a4:	d501      	bpl.n	80196aa <__swbuf_r+0x20>
 80196a6:	6923      	ldr	r3, [r4, #16]
 80196a8:	b943      	cbnz	r3, 80196bc <__swbuf_r+0x32>
 80196aa:	4621      	mov	r1, r4
 80196ac:	4628      	mov	r0, r5
 80196ae:	f000 f82b 	bl	8019708 <__swsetup_r>
 80196b2:	b118      	cbz	r0, 80196bc <__swbuf_r+0x32>
 80196b4:	f04f 37ff 	mov.w	r7, #4294967295
 80196b8:	4638      	mov	r0, r7
 80196ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196bc:	6823      	ldr	r3, [r4, #0]
 80196be:	6922      	ldr	r2, [r4, #16]
 80196c0:	1a98      	subs	r0, r3, r2
 80196c2:	6963      	ldr	r3, [r4, #20]
 80196c4:	b2f6      	uxtb	r6, r6
 80196c6:	4283      	cmp	r3, r0
 80196c8:	4637      	mov	r7, r6
 80196ca:	dc05      	bgt.n	80196d8 <__swbuf_r+0x4e>
 80196cc:	4621      	mov	r1, r4
 80196ce:	4628      	mov	r0, r5
 80196d0:	f001 fc34 	bl	801af3c <_fflush_r>
 80196d4:	2800      	cmp	r0, #0
 80196d6:	d1ed      	bne.n	80196b4 <__swbuf_r+0x2a>
 80196d8:	68a3      	ldr	r3, [r4, #8]
 80196da:	3b01      	subs	r3, #1
 80196dc:	60a3      	str	r3, [r4, #8]
 80196de:	6823      	ldr	r3, [r4, #0]
 80196e0:	1c5a      	adds	r2, r3, #1
 80196e2:	6022      	str	r2, [r4, #0]
 80196e4:	701e      	strb	r6, [r3, #0]
 80196e6:	6962      	ldr	r2, [r4, #20]
 80196e8:	1c43      	adds	r3, r0, #1
 80196ea:	429a      	cmp	r2, r3
 80196ec:	d004      	beq.n	80196f8 <__swbuf_r+0x6e>
 80196ee:	89a3      	ldrh	r3, [r4, #12]
 80196f0:	07db      	lsls	r3, r3, #31
 80196f2:	d5e1      	bpl.n	80196b8 <__swbuf_r+0x2e>
 80196f4:	2e0a      	cmp	r6, #10
 80196f6:	d1df      	bne.n	80196b8 <__swbuf_r+0x2e>
 80196f8:	4621      	mov	r1, r4
 80196fa:	4628      	mov	r0, r5
 80196fc:	f001 fc1e 	bl	801af3c <_fflush_r>
 8019700:	2800      	cmp	r0, #0
 8019702:	d0d9      	beq.n	80196b8 <__swbuf_r+0x2e>
 8019704:	e7d6      	b.n	80196b4 <__swbuf_r+0x2a>
	...

08019708 <__swsetup_r>:
 8019708:	b538      	push	{r3, r4, r5, lr}
 801970a:	4b29      	ldr	r3, [pc, #164]	@ (80197b0 <__swsetup_r+0xa8>)
 801970c:	4605      	mov	r5, r0
 801970e:	6818      	ldr	r0, [r3, #0]
 8019710:	460c      	mov	r4, r1
 8019712:	b118      	cbz	r0, 801971c <__swsetup_r+0x14>
 8019714:	6a03      	ldr	r3, [r0, #32]
 8019716:	b90b      	cbnz	r3, 801971c <__swsetup_r+0x14>
 8019718:	f7ff ff18 	bl	801954c <__sinit>
 801971c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019720:	0719      	lsls	r1, r3, #28
 8019722:	d422      	bmi.n	801976a <__swsetup_r+0x62>
 8019724:	06da      	lsls	r2, r3, #27
 8019726:	d407      	bmi.n	8019738 <__swsetup_r+0x30>
 8019728:	2209      	movs	r2, #9
 801972a:	602a      	str	r2, [r5, #0]
 801972c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019730:	81a3      	strh	r3, [r4, #12]
 8019732:	f04f 30ff 	mov.w	r0, #4294967295
 8019736:	e033      	b.n	80197a0 <__swsetup_r+0x98>
 8019738:	0758      	lsls	r0, r3, #29
 801973a:	d512      	bpl.n	8019762 <__swsetup_r+0x5a>
 801973c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801973e:	b141      	cbz	r1, 8019752 <__swsetup_r+0x4a>
 8019740:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019744:	4299      	cmp	r1, r3
 8019746:	d002      	beq.n	801974e <__swsetup_r+0x46>
 8019748:	4628      	mov	r0, r5
 801974a:	f000 ff9d 	bl	801a688 <_free_r>
 801974e:	2300      	movs	r3, #0
 8019750:	6363      	str	r3, [r4, #52]	@ 0x34
 8019752:	89a3      	ldrh	r3, [r4, #12]
 8019754:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019758:	81a3      	strh	r3, [r4, #12]
 801975a:	2300      	movs	r3, #0
 801975c:	6063      	str	r3, [r4, #4]
 801975e:	6923      	ldr	r3, [r4, #16]
 8019760:	6023      	str	r3, [r4, #0]
 8019762:	89a3      	ldrh	r3, [r4, #12]
 8019764:	f043 0308 	orr.w	r3, r3, #8
 8019768:	81a3      	strh	r3, [r4, #12]
 801976a:	6923      	ldr	r3, [r4, #16]
 801976c:	b94b      	cbnz	r3, 8019782 <__swsetup_r+0x7a>
 801976e:	89a3      	ldrh	r3, [r4, #12]
 8019770:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019774:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019778:	d003      	beq.n	8019782 <__swsetup_r+0x7a>
 801977a:	4621      	mov	r1, r4
 801977c:	4628      	mov	r0, r5
 801977e:	f001 fc2b 	bl	801afd8 <__smakebuf_r>
 8019782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019786:	f013 0201 	ands.w	r2, r3, #1
 801978a:	d00a      	beq.n	80197a2 <__swsetup_r+0x9a>
 801978c:	2200      	movs	r2, #0
 801978e:	60a2      	str	r2, [r4, #8]
 8019790:	6962      	ldr	r2, [r4, #20]
 8019792:	4252      	negs	r2, r2
 8019794:	61a2      	str	r2, [r4, #24]
 8019796:	6922      	ldr	r2, [r4, #16]
 8019798:	b942      	cbnz	r2, 80197ac <__swsetup_r+0xa4>
 801979a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801979e:	d1c5      	bne.n	801972c <__swsetup_r+0x24>
 80197a0:	bd38      	pop	{r3, r4, r5, pc}
 80197a2:	0799      	lsls	r1, r3, #30
 80197a4:	bf58      	it	pl
 80197a6:	6962      	ldrpl	r2, [r4, #20]
 80197a8:	60a2      	str	r2, [r4, #8]
 80197aa:	e7f4      	b.n	8019796 <__swsetup_r+0x8e>
 80197ac:	2000      	movs	r0, #0
 80197ae:	e7f7      	b.n	80197a0 <__swsetup_r+0x98>
 80197b0:	2400004c 	.word	0x2400004c

080197b4 <memcmp>:
 80197b4:	b510      	push	{r4, lr}
 80197b6:	3901      	subs	r1, #1
 80197b8:	4402      	add	r2, r0
 80197ba:	4290      	cmp	r0, r2
 80197bc:	d101      	bne.n	80197c2 <memcmp+0xe>
 80197be:	2000      	movs	r0, #0
 80197c0:	e005      	b.n	80197ce <memcmp+0x1a>
 80197c2:	7803      	ldrb	r3, [r0, #0]
 80197c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80197c8:	42a3      	cmp	r3, r4
 80197ca:	d001      	beq.n	80197d0 <memcmp+0x1c>
 80197cc:	1b18      	subs	r0, r3, r4
 80197ce:	bd10      	pop	{r4, pc}
 80197d0:	3001      	adds	r0, #1
 80197d2:	e7f2      	b.n	80197ba <memcmp+0x6>

080197d4 <memset>:
 80197d4:	4402      	add	r2, r0
 80197d6:	4603      	mov	r3, r0
 80197d8:	4293      	cmp	r3, r2
 80197da:	d100      	bne.n	80197de <memset+0xa>
 80197dc:	4770      	bx	lr
 80197de:	f803 1b01 	strb.w	r1, [r3], #1
 80197e2:	e7f9      	b.n	80197d8 <memset+0x4>

080197e4 <strncmp>:
 80197e4:	b510      	push	{r4, lr}
 80197e6:	b16a      	cbz	r2, 8019804 <strncmp+0x20>
 80197e8:	3901      	subs	r1, #1
 80197ea:	1884      	adds	r4, r0, r2
 80197ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80197f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80197f4:	429a      	cmp	r2, r3
 80197f6:	d103      	bne.n	8019800 <strncmp+0x1c>
 80197f8:	42a0      	cmp	r0, r4
 80197fa:	d001      	beq.n	8019800 <strncmp+0x1c>
 80197fc:	2a00      	cmp	r2, #0
 80197fe:	d1f5      	bne.n	80197ec <strncmp+0x8>
 8019800:	1ad0      	subs	r0, r2, r3
 8019802:	bd10      	pop	{r4, pc}
 8019804:	4610      	mov	r0, r2
 8019806:	e7fc      	b.n	8019802 <strncmp+0x1e>

08019808 <gmtime>:
 8019808:	b538      	push	{r3, r4, r5, lr}
 801980a:	4b0b      	ldr	r3, [pc, #44]	@ (8019838 <gmtime+0x30>)
 801980c:	681d      	ldr	r5, [r3, #0]
 801980e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8019810:	4604      	mov	r4, r0
 8019812:	b953      	cbnz	r3, 801982a <gmtime+0x22>
 8019814:	2024      	movs	r0, #36	@ 0x24
 8019816:	f7ff fc95 	bl	8019144 <malloc>
 801981a:	4602      	mov	r2, r0
 801981c:	6368      	str	r0, [r5, #52]	@ 0x34
 801981e:	b920      	cbnz	r0, 801982a <gmtime+0x22>
 8019820:	4b06      	ldr	r3, [pc, #24]	@ (801983c <gmtime+0x34>)
 8019822:	4807      	ldr	r0, [pc, #28]	@ (8019840 <gmtime+0x38>)
 8019824:	213d      	movs	r1, #61	@ 0x3d
 8019826:	f7ff fc6f 	bl	8019108 <__assert_func>
 801982a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801982c:	4620      	mov	r0, r4
 801982e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019832:	f000 b807 	b.w	8019844 <gmtime_r>
 8019836:	bf00      	nop
 8019838:	2400004c 	.word	0x2400004c
 801983c:	0801e712 	.word	0x0801e712
 8019840:	0801e781 	.word	0x0801e781

08019844 <gmtime_r>:
 8019844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019848:	4a4d      	ldr	r2, [pc, #308]	@ (8019980 <gmtime_r+0x13c>)
 801984a:	460c      	mov	r4, r1
 801984c:	2300      	movs	r3, #0
 801984e:	e9d0 0100 	ldrd	r0, r1, [r0]
 8019852:	f7e6 ff81 	bl	8000758 <__aeabi_ldivmod>
 8019856:	2a00      	cmp	r2, #0
 8019858:	bfbc      	itt	lt
 801985a:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 801985e:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 8019862:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8019866:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 801986a:	fbb2 f3f1 	udiv	r3, r2, r1
 801986e:	fb01 2213 	mls	r2, r1, r3, r2
 8019872:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 8019876:	bfac      	ite	ge
 8019878:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 801987c:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 8019880:	60a3      	str	r3, [r4, #8]
 8019882:	fbb2 f3f1 	udiv	r3, r2, r1
 8019886:	fb01 2213 	mls	r2, r1, r3, r2
 801988a:	6063      	str	r3, [r4, #4]
 801988c:	6022      	str	r2, [r4, #0]
 801988e:	1cc3      	adds	r3, r0, #3
 8019890:	2207      	movs	r2, #7
 8019892:	fb93 f2f2 	sdiv	r2, r3, r2
 8019896:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801989a:	1a9b      	subs	r3, r3, r2
 801989c:	4939      	ldr	r1, [pc, #228]	@ (8019984 <gmtime_r+0x140>)
 801989e:	d555      	bpl.n	801994c <gmtime_r+0x108>
 80198a0:	3307      	adds	r3, #7
 80198a2:	61a3      	str	r3, [r4, #24]
 80198a4:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 80198a8:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80198ac:	fb93 f1f1 	sdiv	r1, r3, r1
 80198b0:	4b35      	ldr	r3, [pc, #212]	@ (8019988 <gmtime_r+0x144>)
 80198b2:	fb03 0001 	mla	r0, r3, r1, r0
 80198b6:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 80198ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80198be:	4403      	add	r3, r0
 80198c0:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 80198c4:	fbb0 f2fc 	udiv	r2, r0, ip
 80198c8:	1a9b      	subs	r3, r3, r2
 80198ca:	f240 176d 	movw	r7, #365	@ 0x16d
 80198ce:	4a2f      	ldr	r2, [pc, #188]	@ (801998c <gmtime_r+0x148>)
 80198d0:	fbb0 f2f2 	udiv	r2, r0, r2
 80198d4:	2664      	movs	r6, #100	@ 0x64
 80198d6:	1a9b      	subs	r3, r3, r2
 80198d8:	fbb3 f2f7 	udiv	r2, r3, r7
 80198dc:	fbb3 f3fc 	udiv	r3, r3, ip
 80198e0:	fbb2 f5f6 	udiv	r5, r2, r6
 80198e4:	1aeb      	subs	r3, r5, r3
 80198e6:	4403      	add	r3, r0
 80198e8:	fb07 3312 	mls	r3, r7, r2, r3
 80198ec:	2099      	movs	r0, #153	@ 0x99
 80198ee:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80198f2:	3702      	adds	r7, #2
 80198f4:	f103 0e01 	add.w	lr, r3, #1
 80198f8:	fbb7 fcf0 	udiv	ip, r7, r0
 80198fc:	fb00 f00c 	mul.w	r0, r0, ip
 8019900:	3002      	adds	r0, #2
 8019902:	f04f 0805 	mov.w	r8, #5
 8019906:	fbb0 f0f8 	udiv	r0, r0, r8
 801990a:	ebae 0000 	sub.w	r0, lr, r0
 801990e:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8019912:	4577      	cmp	r7, lr
 8019914:	bf8c      	ite	hi
 8019916:	f06f 0709 	mvnhi.w	r7, #9
 801991a:	2702      	movls	r7, #2
 801991c:	4467      	add	r7, ip
 801991e:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8019922:	fb0c 2101 	mla	r1, ip, r1, r2
 8019926:	2f01      	cmp	r7, #1
 8019928:	bf98      	it	ls
 801992a:	3101      	addls	r1, #1
 801992c:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8019930:	d312      	bcc.n	8019958 <gmtime_r+0x114>
 8019932:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8019936:	61e3      	str	r3, [r4, #28]
 8019938:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 801993c:	2300      	movs	r3, #0
 801993e:	60e0      	str	r0, [r4, #12]
 8019940:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8019944:	6223      	str	r3, [r4, #32]
 8019946:	4620      	mov	r0, r4
 8019948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801994c:	2800      	cmp	r0, #0
 801994e:	61a3      	str	r3, [r4, #24]
 8019950:	dba8      	blt.n	80198a4 <gmtime_r+0x60>
 8019952:	fb90 f1f1 	sdiv	r1, r0, r1
 8019956:	e7ab      	b.n	80198b0 <gmtime_r+0x6c>
 8019958:	f012 0f03 	tst.w	r2, #3
 801995c:	d102      	bne.n	8019964 <gmtime_r+0x120>
 801995e:	fb06 2515 	mls	r5, r6, r5, r2
 8019962:	b95d      	cbnz	r5, 801997c <gmtime_r+0x138>
 8019964:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8019968:	fbb2 f6f5 	udiv	r6, r2, r5
 801996c:	fb05 2216 	mls	r2, r5, r6, r2
 8019970:	fab2 f282 	clz	r2, r2
 8019974:	0952      	lsrs	r2, r2, #5
 8019976:	333b      	adds	r3, #59	@ 0x3b
 8019978:	4413      	add	r3, r2
 801997a:	e7dc      	b.n	8019936 <gmtime_r+0xf2>
 801997c:	2201      	movs	r2, #1
 801997e:	e7fa      	b.n	8019976 <gmtime_r+0x132>
 8019980:	00015180 	.word	0x00015180
 8019984:	00023ab1 	.word	0x00023ab1
 8019988:	fffdc54f 	.word	0xfffdc54f
 801998c:	00023ab0 	.word	0x00023ab0

08019990 <validate_structure>:
 8019990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019992:	6801      	ldr	r1, [r0, #0]
 8019994:	293b      	cmp	r1, #59	@ 0x3b
 8019996:	4604      	mov	r4, r0
 8019998:	d911      	bls.n	80199be <validate_structure+0x2e>
 801999a:	223c      	movs	r2, #60	@ 0x3c
 801999c:	4668      	mov	r0, sp
 801999e:	f000 fe6b 	bl	801a678 <div>
 80199a2:	9a01      	ldr	r2, [sp, #4]
 80199a4:	6863      	ldr	r3, [r4, #4]
 80199a6:	9900      	ldr	r1, [sp, #0]
 80199a8:	2a00      	cmp	r2, #0
 80199aa:	440b      	add	r3, r1
 80199ac:	6063      	str	r3, [r4, #4]
 80199ae:	bfbb      	ittet	lt
 80199b0:	323c      	addlt	r2, #60	@ 0x3c
 80199b2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80199b6:	6022      	strge	r2, [r4, #0]
 80199b8:	6022      	strlt	r2, [r4, #0]
 80199ba:	bfb8      	it	lt
 80199bc:	6063      	strlt	r3, [r4, #4]
 80199be:	6861      	ldr	r1, [r4, #4]
 80199c0:	293b      	cmp	r1, #59	@ 0x3b
 80199c2:	d911      	bls.n	80199e8 <validate_structure+0x58>
 80199c4:	223c      	movs	r2, #60	@ 0x3c
 80199c6:	4668      	mov	r0, sp
 80199c8:	f000 fe56 	bl	801a678 <div>
 80199cc:	9a01      	ldr	r2, [sp, #4]
 80199ce:	68a3      	ldr	r3, [r4, #8]
 80199d0:	9900      	ldr	r1, [sp, #0]
 80199d2:	2a00      	cmp	r2, #0
 80199d4:	440b      	add	r3, r1
 80199d6:	60a3      	str	r3, [r4, #8]
 80199d8:	bfbb      	ittet	lt
 80199da:	323c      	addlt	r2, #60	@ 0x3c
 80199dc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80199e0:	6062      	strge	r2, [r4, #4]
 80199e2:	6062      	strlt	r2, [r4, #4]
 80199e4:	bfb8      	it	lt
 80199e6:	60a3      	strlt	r3, [r4, #8]
 80199e8:	68a1      	ldr	r1, [r4, #8]
 80199ea:	2917      	cmp	r1, #23
 80199ec:	d911      	bls.n	8019a12 <validate_structure+0x82>
 80199ee:	2218      	movs	r2, #24
 80199f0:	4668      	mov	r0, sp
 80199f2:	f000 fe41 	bl	801a678 <div>
 80199f6:	9a01      	ldr	r2, [sp, #4]
 80199f8:	68e3      	ldr	r3, [r4, #12]
 80199fa:	9900      	ldr	r1, [sp, #0]
 80199fc:	2a00      	cmp	r2, #0
 80199fe:	440b      	add	r3, r1
 8019a00:	60e3      	str	r3, [r4, #12]
 8019a02:	bfbb      	ittet	lt
 8019a04:	3218      	addlt	r2, #24
 8019a06:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8019a0a:	60a2      	strge	r2, [r4, #8]
 8019a0c:	60a2      	strlt	r2, [r4, #8]
 8019a0e:	bfb8      	it	lt
 8019a10:	60e3      	strlt	r3, [r4, #12]
 8019a12:	6921      	ldr	r1, [r4, #16]
 8019a14:	290b      	cmp	r1, #11
 8019a16:	d911      	bls.n	8019a3c <validate_structure+0xac>
 8019a18:	220c      	movs	r2, #12
 8019a1a:	4668      	mov	r0, sp
 8019a1c:	f000 fe2c 	bl	801a678 <div>
 8019a20:	9a01      	ldr	r2, [sp, #4]
 8019a22:	6963      	ldr	r3, [r4, #20]
 8019a24:	9900      	ldr	r1, [sp, #0]
 8019a26:	2a00      	cmp	r2, #0
 8019a28:	440b      	add	r3, r1
 8019a2a:	6163      	str	r3, [r4, #20]
 8019a2c:	bfbb      	ittet	lt
 8019a2e:	320c      	addlt	r2, #12
 8019a30:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8019a34:	6122      	strge	r2, [r4, #16]
 8019a36:	6122      	strlt	r2, [r4, #16]
 8019a38:	bfb8      	it	lt
 8019a3a:	6163      	strlt	r3, [r4, #20]
 8019a3c:	6963      	ldr	r3, [r4, #20]
 8019a3e:	079a      	lsls	r2, r3, #30
 8019a40:	d11c      	bne.n	8019a7c <validate_structure+0xec>
 8019a42:	2164      	movs	r1, #100	@ 0x64
 8019a44:	fb93 f2f1 	sdiv	r2, r3, r1
 8019a48:	fb01 3212 	mls	r2, r1, r2, r3
 8019a4c:	b9c2      	cbnz	r2, 8019a80 <validate_structure+0xf0>
 8019a4e:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8019a52:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8019a56:	fb93 f1f2 	sdiv	r1, r3, r2
 8019a5a:	fb02 3311 	mls	r3, r2, r1, r3
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	bf0c      	ite	eq
 8019a62:	231d      	moveq	r3, #29
 8019a64:	231c      	movne	r3, #28
 8019a66:	68e2      	ldr	r2, [r4, #12]
 8019a68:	2a00      	cmp	r2, #0
 8019a6a:	dc0b      	bgt.n	8019a84 <validate_structure+0xf4>
 8019a6c:	4d31      	ldr	r5, [pc, #196]	@ (8019b34 <validate_structure+0x1a4>)
 8019a6e:	200b      	movs	r0, #11
 8019a70:	2164      	movs	r1, #100	@ 0x64
 8019a72:	68e6      	ldr	r6, [r4, #12]
 8019a74:	2e00      	cmp	r6, #0
 8019a76:	dd30      	ble.n	8019ada <validate_structure+0x14a>
 8019a78:	b003      	add	sp, #12
 8019a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a7c:	231c      	movs	r3, #28
 8019a7e:	e7f2      	b.n	8019a66 <validate_structure+0xd6>
 8019a80:	231d      	movs	r3, #29
 8019a82:	e7f0      	b.n	8019a66 <validate_structure+0xd6>
 8019a84:	4d2b      	ldr	r5, [pc, #172]	@ (8019b34 <validate_structure+0x1a4>)
 8019a86:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8019a8a:	2a01      	cmp	r2, #1
 8019a8c:	bf14      	ite	ne
 8019a8e:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 8019a92:	4618      	moveq	r0, r3
 8019a94:	4281      	cmp	r1, r0
 8019a96:	ddef      	ble.n	8019a78 <validate_structure+0xe8>
 8019a98:	3201      	adds	r2, #1
 8019a9a:	1a09      	subs	r1, r1, r0
 8019a9c:	2a0c      	cmp	r2, #12
 8019a9e:	60e1      	str	r1, [r4, #12]
 8019aa0:	6122      	str	r2, [r4, #16]
 8019aa2:	d1f0      	bne.n	8019a86 <validate_structure+0xf6>
 8019aa4:	6963      	ldr	r3, [r4, #20]
 8019aa6:	2100      	movs	r1, #0
 8019aa8:	1c5a      	adds	r2, r3, #1
 8019aaa:	6121      	str	r1, [r4, #16]
 8019aac:	0791      	lsls	r1, r2, #30
 8019aae:	6162      	str	r2, [r4, #20]
 8019ab0:	d13c      	bne.n	8019b2c <validate_structure+0x19c>
 8019ab2:	2164      	movs	r1, #100	@ 0x64
 8019ab4:	fb92 f0f1 	sdiv	r0, r2, r1
 8019ab8:	fb01 2210 	mls	r2, r1, r0, r2
 8019abc:	2a00      	cmp	r2, #0
 8019abe:	d137      	bne.n	8019b30 <validate_structure+0x1a0>
 8019ac0:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8019ac4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8019ac8:	fb93 f1f2 	sdiv	r1, r3, r2
 8019acc:	fb02 3311 	mls	r3, r2, r1, r3
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	bf0c      	ite	eq
 8019ad4:	231d      	moveq	r3, #29
 8019ad6:	231c      	movne	r3, #28
 8019ad8:	e7d5      	b.n	8019a86 <validate_structure+0xf6>
 8019ada:	6922      	ldr	r2, [r4, #16]
 8019adc:	3a01      	subs	r2, #1
 8019ade:	6122      	str	r2, [r4, #16]
 8019ae0:	3201      	adds	r2, #1
 8019ae2:	d116      	bne.n	8019b12 <validate_structure+0x182>
 8019ae4:	6963      	ldr	r3, [r4, #20]
 8019ae6:	1e5a      	subs	r2, r3, #1
 8019ae8:	0797      	lsls	r7, r2, #30
 8019aea:	e9c4 0204 	strd	r0, r2, [r4, #16]
 8019aee:	d119      	bne.n	8019b24 <validate_structure+0x194>
 8019af0:	fb92 f7f1 	sdiv	r7, r2, r1
 8019af4:	fb01 2217 	mls	r2, r1, r7, r2
 8019af8:	b9b2      	cbnz	r2, 8019b28 <validate_structure+0x198>
 8019afa:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8019afe:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8019b02:	fb93 f7f2 	sdiv	r7, r3, r2
 8019b06:	fb02 3317 	mls	r3, r2, r7, r3
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	bf0c      	ite	eq
 8019b0e:	231d      	moveq	r3, #29
 8019b10:	231c      	movne	r3, #28
 8019b12:	6922      	ldr	r2, [r4, #16]
 8019b14:	2a01      	cmp	r2, #1
 8019b16:	bf14      	ite	ne
 8019b18:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8019b1c:	461a      	moveq	r2, r3
 8019b1e:	4432      	add	r2, r6
 8019b20:	60e2      	str	r2, [r4, #12]
 8019b22:	e7a6      	b.n	8019a72 <validate_structure+0xe2>
 8019b24:	231c      	movs	r3, #28
 8019b26:	e7f4      	b.n	8019b12 <validate_structure+0x182>
 8019b28:	231d      	movs	r3, #29
 8019b2a:	e7f2      	b.n	8019b12 <validate_structure+0x182>
 8019b2c:	231c      	movs	r3, #28
 8019b2e:	e7aa      	b.n	8019a86 <validate_structure+0xf6>
 8019b30:	231d      	movs	r3, #29
 8019b32:	e7a8      	b.n	8019a86 <validate_structure+0xf6>
 8019b34:	0801e9a8 	.word	0x0801e9a8

08019b38 <mktime>:
 8019b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b3c:	b085      	sub	sp, #20
 8019b3e:	4607      	mov	r7, r0
 8019b40:	f001 fae2 	bl	801b108 <__gettzinfo>
 8019b44:	4681      	mov	r9, r0
 8019b46:	4638      	mov	r0, r7
 8019b48:	f7ff ff22 	bl	8019990 <validate_structure>
 8019b4c:	e9d7 4300 	ldrd	r4, r3, [r7]
 8019b50:	223c      	movs	r2, #60	@ 0x3c
 8019b52:	fb02 4403 	mla	r4, r2, r3, r4
 8019b56:	68bb      	ldr	r3, [r7, #8]
 8019b58:	697d      	ldr	r5, [r7, #20]
 8019b5a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8019b5e:	fb02 4403 	mla	r4, r2, r3, r4
 8019b62:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8019b66:	4ac3      	ldr	r2, [pc, #780]	@ (8019e74 <mktime+0x33c>)
 8019b68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8019b6c:	3e01      	subs	r6, #1
 8019b6e:	2b01      	cmp	r3, #1
 8019b70:	4416      	add	r6, r2
 8019b72:	dd11      	ble.n	8019b98 <mktime+0x60>
 8019b74:	07a9      	lsls	r1, r5, #30
 8019b76:	d10f      	bne.n	8019b98 <mktime+0x60>
 8019b78:	2264      	movs	r2, #100	@ 0x64
 8019b7a:	fb95 f3f2 	sdiv	r3, r5, r2
 8019b7e:	fb02 5313 	mls	r3, r2, r3, r5
 8019b82:	b943      	cbnz	r3, 8019b96 <mktime+0x5e>
 8019b84:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8019b88:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8019b8c:	fb93 f1f2 	sdiv	r1, r3, r2
 8019b90:	fb02 3311 	mls	r3, r2, r1, r3
 8019b94:	b903      	cbnz	r3, 8019b98 <mktime+0x60>
 8019b96:	3601      	adds	r6, #1
 8019b98:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8019b9c:	3310      	adds	r3, #16
 8019b9e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8019ba2:	4293      	cmp	r3, r2
 8019ba4:	61fe      	str	r6, [r7, #28]
 8019ba6:	f200 8170 	bhi.w	8019e8a <mktime+0x352>
 8019baa:	2d46      	cmp	r5, #70	@ 0x46
 8019bac:	f340 80b6 	ble.w	8019d1c <mktime+0x1e4>
 8019bb0:	2346      	movs	r3, #70	@ 0x46
 8019bb2:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8019bb6:	2164      	movs	r1, #100	@ 0x64
 8019bb8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8019bbc:	079a      	lsls	r2, r3, #30
 8019bbe:	f040 80a7 	bne.w	8019d10 <mktime+0x1d8>
 8019bc2:	fb93 f2f1 	sdiv	r2, r3, r1
 8019bc6:	fb01 3212 	mls	r2, r1, r2, r3
 8019bca:	2a00      	cmp	r2, #0
 8019bcc:	f040 80a3 	bne.w	8019d16 <mktime+0x1de>
 8019bd0:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8019bd4:	fb92 fef0 	sdiv	lr, r2, r0
 8019bd8:	fb00 221e 	mls	r2, r0, lr, r2
 8019bdc:	2a00      	cmp	r2, #0
 8019bde:	bf0c      	ite	eq
 8019be0:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8019be4:	4662      	movne	r2, ip
 8019be6:	3301      	adds	r3, #1
 8019be8:	429d      	cmp	r5, r3
 8019bea:	4416      	add	r6, r2
 8019bec:	d1e6      	bne.n	8019bbc <mktime+0x84>
 8019bee:	4ba2      	ldr	r3, [pc, #648]	@ (8019e78 <mktime+0x340>)
 8019bf0:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8019bf4:	fbc6 4803 	smlal	r4, r8, r6, r3
 8019bf8:	f000 fa0a 	bl	801a010 <__tz_lock>
 8019bfc:	f000 fa14 	bl	801a028 <_tzset_unlocked>
 8019c00:	4b9e      	ldr	r3, [pc, #632]	@ (8019e7c <mktime+0x344>)
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	f000 8147 	beq.w	8019e98 <mktime+0x360>
 8019c0a:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8019c0e:	6978      	ldr	r0, [r7, #20]
 8019c10:	4653      	mov	r3, sl
 8019c12:	2b01      	cmp	r3, #1
 8019c14:	bfa8      	it	ge
 8019c16:	2301      	movge	r3, #1
 8019c18:	9301      	str	r3, [sp, #4]
 8019c1a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019c1e:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8019c22:	4283      	cmp	r3, r0
 8019c24:	f040 80bd 	bne.w	8019da2 <mktime+0x26a>
 8019c28:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8019c2c:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8019c30:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8019c34:	1a13      	subs	r3, r2, r0
 8019c36:	9303      	str	r3, [sp, #12]
 8019c38:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8019c3c:	9302      	str	r3, [sp, #8]
 8019c3e:	9a02      	ldr	r2, [sp, #8]
 8019c40:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8019c44:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8019c48:	ebb2 0e03 	subs.w	lr, r2, r3
 8019c4c:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8019c50:	4574      	cmp	r4, lr
 8019c52:	eb78 0201 	sbcs.w	r2, r8, r1
 8019c56:	f280 80c7 	bge.w	8019de8 <mktime+0x2b0>
 8019c5a:	f8d9 2000 	ldr.w	r2, [r9]
 8019c5e:	2a00      	cmp	r2, #0
 8019c60:	f000 80d0 	beq.w	8019e04 <mktime+0x2cc>
 8019c64:	9a03      	ldr	r2, [sp, #12]
 8019c66:	4294      	cmp	r4, r2
 8019c68:	eb78 020b 	sbcs.w	r2, r8, fp
 8019c6c:	f2c0 8111 	blt.w	8019e92 <mktime+0x35a>
 8019c70:	4574      	cmp	r4, lr
 8019c72:	eb78 0101 	sbcs.w	r1, r8, r1
 8019c76:	bfb4      	ite	lt
 8019c78:	f04f 0b01 	movlt.w	fp, #1
 8019c7c:	f04f 0b00 	movge.w	fp, #0
 8019c80:	f1ba 0f00 	cmp.w	sl, #0
 8019c84:	f2c0 8094 	blt.w	8019db0 <mktime+0x278>
 8019c88:	9a01      	ldr	r2, [sp, #4]
 8019c8a:	ea82 0a0b 	eor.w	sl, r2, fp
 8019c8e:	f1ba 0f01 	cmp.w	sl, #1
 8019c92:	f040 808d 	bne.w	8019db0 <mktime+0x278>
 8019c96:	f1bb 0f00 	cmp.w	fp, #0
 8019c9a:	f000 80c2 	beq.w	8019e22 <mktime+0x2ea>
 8019c9e:	1a1b      	subs	r3, r3, r0
 8019ca0:	683a      	ldr	r2, [r7, #0]
 8019ca2:	441a      	add	r2, r3
 8019ca4:	191c      	adds	r4, r3, r4
 8019ca6:	603a      	str	r2, [r7, #0]
 8019ca8:	4638      	mov	r0, r7
 8019caa:	68fa      	ldr	r2, [r7, #12]
 8019cac:	9201      	str	r2, [sp, #4]
 8019cae:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8019cb2:	f7ff fe6d 	bl	8019990 <validate_structure>
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	9a01      	ldr	r2, [sp, #4]
 8019cba:	1a9b      	subs	r3, r3, r2
 8019cbc:	d078      	beq.n	8019db0 <mktime+0x278>
 8019cbe:	2b01      	cmp	r3, #1
 8019cc0:	f300 80b1 	bgt.w	8019e26 <mktime+0x2ee>
 8019cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019cc8:	bfa8      	it	ge
 8019cca:	469a      	movge	sl, r3
 8019ccc:	69fb      	ldr	r3, [r7, #28]
 8019cce:	eb1a 0303 	adds.w	r3, sl, r3
 8019cd2:	4456      	add	r6, sl
 8019cd4:	f140 80b0 	bpl.w	8019e38 <mktime+0x300>
 8019cd8:	1e6b      	subs	r3, r5, #1
 8019cda:	0799      	lsls	r1, r3, #30
 8019cdc:	f040 80a6 	bne.w	8019e2c <mktime+0x2f4>
 8019ce0:	2264      	movs	r2, #100	@ 0x64
 8019ce2:	fb93 f1f2 	sdiv	r1, r3, r2
 8019ce6:	fb02 3311 	mls	r3, r2, r1, r3
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	f040 80a1 	bne.w	8019e32 <mktime+0x2fa>
 8019cf0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8019cf4:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8019cf8:	fb95 f2f3 	sdiv	r2, r5, r3
 8019cfc:	fb03 5512 	mls	r5, r3, r2, r5
 8019d00:	2d00      	cmp	r5, #0
 8019d02:	f240 136d 	movw	r3, #365	@ 0x16d
 8019d06:	bf18      	it	ne
 8019d08:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8019d0c:	61fb      	str	r3, [r7, #28]
 8019d0e:	e04f      	b.n	8019db0 <mktime+0x278>
 8019d10:	f240 126d 	movw	r2, #365	@ 0x16d
 8019d14:	e767      	b.n	8019be6 <mktime+0xae>
 8019d16:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8019d1a:	e764      	b.n	8019be6 <mktime+0xae>
 8019d1c:	f43f af67 	beq.w	8019bee <mktime+0xb6>
 8019d20:	2345      	movs	r3, #69	@ 0x45
 8019d22:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8019d26:	2164      	movs	r1, #100	@ 0x64
 8019d28:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8019d2c:	e012      	b.n	8019d54 <mktime+0x21c>
 8019d2e:	bb62      	cbnz	r2, 8019d8a <mktime+0x252>
 8019d30:	fb93 f2f1 	sdiv	r2, r3, r1
 8019d34:	fb01 3212 	mls	r2, r1, r2, r3
 8019d38:	bb52      	cbnz	r2, 8019d90 <mktime+0x258>
 8019d3a:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8019d3e:	fb92 fef0 	sdiv	lr, r2, r0
 8019d42:	fb00 221e 	mls	r2, r0, lr, r2
 8019d46:	2a00      	cmp	r2, #0
 8019d48:	bf0c      	ite	eq
 8019d4a:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8019d4e:	4662      	movne	r2, ip
 8019d50:	1ab6      	subs	r6, r6, r2
 8019d52:	3b01      	subs	r3, #1
 8019d54:	429d      	cmp	r5, r3
 8019d56:	f003 0203 	and.w	r2, r3, #3
 8019d5a:	dbe8      	blt.n	8019d2e <mktime+0x1f6>
 8019d5c:	b9da      	cbnz	r2, 8019d96 <mktime+0x25e>
 8019d5e:	2264      	movs	r2, #100	@ 0x64
 8019d60:	fb95 f3f2 	sdiv	r3, r5, r2
 8019d64:	fb02 5313 	mls	r3, r2, r3, r5
 8019d68:	b9c3      	cbnz	r3, 8019d9c <mktime+0x264>
 8019d6a:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8019d6e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8019d72:	fb93 f1f2 	sdiv	r1, r3, r2
 8019d76:	fb02 3311 	mls	r3, r2, r1, r3
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	f240 136d 	movw	r3, #365	@ 0x16d
 8019d80:	bf08      	it	eq
 8019d82:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 8019d86:	1af6      	subs	r6, r6, r3
 8019d88:	e731      	b.n	8019bee <mktime+0xb6>
 8019d8a:	f240 126d 	movw	r2, #365	@ 0x16d
 8019d8e:	e7df      	b.n	8019d50 <mktime+0x218>
 8019d90:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8019d94:	e7dc      	b.n	8019d50 <mktime+0x218>
 8019d96:	f240 136d 	movw	r3, #365	@ 0x16d
 8019d9a:	e7f4      	b.n	8019d86 <mktime+0x24e>
 8019d9c:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8019da0:	e7f1      	b.n	8019d86 <mktime+0x24e>
 8019da2:	f000 f881 	bl	8019ea8 <__tzcalc_limits>
 8019da6:	2800      	cmp	r0, #0
 8019da8:	f47f af3e 	bne.w	8019c28 <mktime+0xf0>
 8019dac:	f8dd b004 	ldr.w	fp, [sp, #4]
 8019db0:	f1bb 0f01 	cmp.w	fp, #1
 8019db4:	d172      	bne.n	8019e9c <mktime+0x364>
 8019db6:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 8019dba:	191c      	adds	r4, r3, r4
 8019dbc:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8019dc0:	f04f 0b01 	mov.w	fp, #1
 8019dc4:	f000 f92a 	bl	801a01c <__tz_unlock>
 8019dc8:	3604      	adds	r6, #4
 8019dca:	2307      	movs	r3, #7
 8019dcc:	fb96 f3f3 	sdiv	r3, r6, r3
 8019dd0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8019dd4:	1af6      	subs	r6, r6, r3
 8019dd6:	d456      	bmi.n	8019e86 <mktime+0x34e>
 8019dd8:	f8c7 b020 	str.w	fp, [r7, #32]
 8019ddc:	61be      	str	r6, [r7, #24]
 8019dde:	4620      	mov	r0, r4
 8019de0:	4641      	mov	r1, r8
 8019de2:	b005      	add	sp, #20
 8019de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019de8:	9a02      	ldr	r2, [sp, #8]
 8019dea:	1a12      	subs	r2, r2, r0
 8019dec:	9202      	str	r2, [sp, #8]
 8019dee:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8019df2:	eb6c 0c02 	sbc.w	ip, ip, r2
 8019df6:	9a02      	ldr	r2, [sp, #8]
 8019df8:	4294      	cmp	r4, r2
 8019dfa:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8019dfe:	f6bf af2c 	bge.w	8019c5a <mktime+0x122>
 8019e02:	e7d3      	b.n	8019dac <mktime+0x274>
 8019e04:	9a03      	ldr	r2, [sp, #12]
 8019e06:	4294      	cmp	r4, r2
 8019e08:	eb78 020b 	sbcs.w	r2, r8, fp
 8019e0c:	f6ff af30 	blt.w	8019c70 <mktime+0x138>
 8019e10:	f1ba 0f00 	cmp.w	sl, #0
 8019e14:	dbcf      	blt.n	8019db6 <mktime+0x27e>
 8019e16:	f04f 0b01 	mov.w	fp, #1
 8019e1a:	e735      	b.n	8019c88 <mktime+0x150>
 8019e1c:	f04f 0b00 	mov.w	fp, #0
 8019e20:	e732      	b.n	8019c88 <mktime+0x150>
 8019e22:	1ac3      	subs	r3, r0, r3
 8019e24:	e73c      	b.n	8019ca0 <mktime+0x168>
 8019e26:	f04f 3aff 	mov.w	sl, #4294967295
 8019e2a:	e74f      	b.n	8019ccc <mktime+0x194>
 8019e2c:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8019e30:	e76c      	b.n	8019d0c <mktime+0x1d4>
 8019e32:	f240 136d 	movw	r3, #365	@ 0x16d
 8019e36:	e769      	b.n	8019d0c <mktime+0x1d4>
 8019e38:	07aa      	lsls	r2, r5, #30
 8019e3a:	d117      	bne.n	8019e6c <mktime+0x334>
 8019e3c:	2164      	movs	r1, #100	@ 0x64
 8019e3e:	fb95 f2f1 	sdiv	r2, r5, r1
 8019e42:	fb01 5212 	mls	r2, r1, r2, r5
 8019e46:	b9da      	cbnz	r2, 8019e80 <mktime+0x348>
 8019e48:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8019e4c:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 8019e50:	fb95 f1f2 	sdiv	r1, r5, r2
 8019e54:	fb02 5511 	mls	r5, r2, r1, r5
 8019e58:	2d00      	cmp	r5, #0
 8019e5a:	f240 126d 	movw	r2, #365	@ 0x16d
 8019e5e:	bf08      	it	eq
 8019e60:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8019e64:	4293      	cmp	r3, r2
 8019e66:	bfa8      	it	ge
 8019e68:	1a9b      	subge	r3, r3, r2
 8019e6a:	e74f      	b.n	8019d0c <mktime+0x1d4>
 8019e6c:	f240 126d 	movw	r2, #365	@ 0x16d
 8019e70:	e7f8      	b.n	8019e64 <mktime+0x32c>
 8019e72:	bf00      	nop
 8019e74:	0801e978 	.word	0x0801e978
 8019e78:	00015180 	.word	0x00015180
 8019e7c:	240084d0 	.word	0x240084d0
 8019e80:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8019e84:	e7ee      	b.n	8019e64 <mktime+0x32c>
 8019e86:	3607      	adds	r6, #7
 8019e88:	e7a6      	b.n	8019dd8 <mktime+0x2a0>
 8019e8a:	f04f 34ff 	mov.w	r4, #4294967295
 8019e8e:	46a0      	mov	r8, r4
 8019e90:	e7a5      	b.n	8019dde <mktime+0x2a6>
 8019e92:	f1ba 0f00 	cmp.w	sl, #0
 8019e96:	dac1      	bge.n	8019e1c <mktime+0x2e4>
 8019e98:	f04f 0b00 	mov.w	fp, #0
 8019e9c:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8019ea0:	191c      	adds	r4, r3, r4
 8019ea2:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8019ea6:	e78d      	b.n	8019dc4 <mktime+0x28c>

08019ea8 <__tzcalc_limits>:
 8019ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019eac:	4604      	mov	r4, r0
 8019eae:	f001 f92b 	bl	801b108 <__gettzinfo>
 8019eb2:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8019eb6:	429c      	cmp	r4, r3
 8019eb8:	f340 80a3 	ble.w	801a002 <__tzcalc_limits+0x15a>
 8019ebc:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 8019ec0:	1865      	adds	r5, r4, r1
 8019ec2:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8019ec6:	f240 126d 	movw	r2, #365	@ 0x16d
 8019eca:	10ad      	asrs	r5, r5, #2
 8019ecc:	fb02 5503 	mla	r5, r2, r3, r5
 8019ed0:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 8019ed4:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8019ed8:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8019edc:	fb93 f3f2 	sdiv	r3, r3, r2
 8019ee0:	441d      	add	r5, r3
 8019ee2:	19a3      	adds	r3, r4, r6
 8019ee4:	4e48      	ldr	r6, [pc, #288]	@ (801a008 <__tzcalc_limits+0x160>)
 8019ee6:	6044      	str	r4, [r0, #4]
 8019ee8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8019eec:	4601      	mov	r1, r0
 8019eee:	fbb3 f3f2 	udiv	r3, r3, r2
 8019ef2:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 8019ef6:	441d      	add	r5, r3
 8019ef8:	7a0b      	ldrb	r3, [r1, #8]
 8019efa:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8019efe:	2b4a      	cmp	r3, #74	@ 0x4a
 8019f00:	d138      	bne.n	8019f74 <__tzcalc_limits+0xcc>
 8019f02:	07a2      	lsls	r2, r4, #30
 8019f04:	eb05 030c 	add.w	r3, r5, ip
 8019f08:	d106      	bne.n	8019f18 <__tzcalc_limits+0x70>
 8019f0a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8019f0e:	fb94 f2fe 	sdiv	r2, r4, lr
 8019f12:	fb0e 4212 	mls	r2, lr, r2, r4
 8019f16:	b932      	cbnz	r2, 8019f26 <__tzcalc_limits+0x7e>
 8019f18:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8019f1c:	fb94 f2fe 	sdiv	r2, r4, lr
 8019f20:	fb0e 4212 	mls	r2, lr, r2, r4
 8019f24:	bb1a      	cbnz	r2, 8019f6e <__tzcalc_limits+0xc6>
 8019f26:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 8019f2a:	bfd4      	ite	le
 8019f2c:	f04f 0c00 	movle.w	ip, #0
 8019f30:	f04f 0c01 	movgt.w	ip, #1
 8019f34:	4463      	add	r3, ip
 8019f36:	3b01      	subs	r3, #1
 8019f38:	698a      	ldr	r2, [r1, #24]
 8019f3a:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8019f3e:	fbc3 2c06 	smlal	r2, ip, r3, r6
 8019f42:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8019f44:	18d2      	adds	r2, r2, r3
 8019f46:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 8019f4a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8019f4e:	3128      	adds	r1, #40	@ 0x28
 8019f50:	428f      	cmp	r7, r1
 8019f52:	d1d1      	bne.n	8019ef8 <__tzcalc_limits+0x50>
 8019f54:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8019f58:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8019f5c:	428c      	cmp	r4, r1
 8019f5e:	4193      	sbcs	r3, r2
 8019f60:	bfb4      	ite	lt
 8019f62:	2301      	movlt	r3, #1
 8019f64:	2300      	movge	r3, #0
 8019f66:	6003      	str	r3, [r0, #0]
 8019f68:	2001      	movs	r0, #1
 8019f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f6e:	f04f 0c00 	mov.w	ip, #0
 8019f72:	e7df      	b.n	8019f34 <__tzcalc_limits+0x8c>
 8019f74:	2b44      	cmp	r3, #68	@ 0x44
 8019f76:	d102      	bne.n	8019f7e <__tzcalc_limits+0xd6>
 8019f78:	eb05 030c 	add.w	r3, r5, ip
 8019f7c:	e7dc      	b.n	8019f38 <__tzcalc_limits+0x90>
 8019f7e:	07a3      	lsls	r3, r4, #30
 8019f80:	d105      	bne.n	8019f8e <__tzcalc_limits+0xe6>
 8019f82:	2264      	movs	r2, #100	@ 0x64
 8019f84:	fb94 f3f2 	sdiv	r3, r4, r2
 8019f88:	fb02 4313 	mls	r3, r2, r3, r4
 8019f8c:	bb93      	cbnz	r3, 8019ff4 <__tzcalc_limits+0x14c>
 8019f8e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8019f92:	fb94 f3f2 	sdiv	r3, r4, r2
 8019f96:	fb02 4313 	mls	r3, r2, r3, r4
 8019f9a:	fab3 f383 	clz	r3, r3
 8019f9e:	095b      	lsrs	r3, r3, #5
 8019fa0:	f8df e068 	ldr.w	lr, [pc, #104]	@ 801a00c <__tzcalc_limits+0x164>
 8019fa4:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8019fa8:	425b      	negs	r3, r3
 8019faa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8019fae:	462a      	mov	r2, r5
 8019fb0:	f04f 0800 	mov.w	r8, #0
 8019fb4:	4473      	add	r3, lr
 8019fb6:	f108 0801 	add.w	r8, r8, #1
 8019fba:	45c1      	cmp	r9, r8
 8019fbc:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 8019fc0:	dc1a      	bgt.n	8019ff8 <__tzcalc_limits+0x150>
 8019fc2:	f102 0804 	add.w	r8, r2, #4
 8019fc6:	2307      	movs	r3, #7
 8019fc8:	fb98 f3f3 	sdiv	r3, r8, r3
 8019fcc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8019fd0:	eba8 0303 	sub.w	r3, r8, r3
 8019fd4:	ebbc 0c03 	subs.w	ip, ip, r3
 8019fd8:	690b      	ldr	r3, [r1, #16]
 8019fda:	f103 33ff 	add.w	r3, r3, #4294967295
 8019fde:	bf48      	it	mi
 8019fe0:	f10c 0c07 	addmi.w	ip, ip, #7
 8019fe4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8019fe8:	449c      	add	ip, r3
 8019fea:	45f4      	cmp	ip, lr
 8019fec:	da06      	bge.n	8019ffc <__tzcalc_limits+0x154>
 8019fee:	eb02 030c 	add.w	r3, r2, ip
 8019ff2:	e7a1      	b.n	8019f38 <__tzcalc_limits+0x90>
 8019ff4:	2301      	movs	r3, #1
 8019ff6:	e7d3      	b.n	8019fa0 <__tzcalc_limits+0xf8>
 8019ff8:	4472      	add	r2, lr
 8019ffa:	e7dc      	b.n	8019fb6 <__tzcalc_limits+0x10e>
 8019ffc:	f1ac 0c07 	sub.w	ip, ip, #7
 801a000:	e7f3      	b.n	8019fea <__tzcalc_limits+0x142>
 801a002:	2000      	movs	r0, #0
 801a004:	e7b1      	b.n	8019f6a <__tzcalc_limits+0xc2>
 801a006:	bf00      	nop
 801a008:	00015180 	.word	0x00015180
 801a00c:	0801e9d4 	.word	0x0801e9d4

0801a010 <__tz_lock>:
 801a010:	4801      	ldr	r0, [pc, #4]	@ (801a018 <__tz_lock+0x8>)
 801a012:	f000 bb10 	b.w	801a636 <__retarget_lock_acquire>
 801a016:	bf00      	nop
 801a018:	240084d8 	.word	0x240084d8

0801a01c <__tz_unlock>:
 801a01c:	4801      	ldr	r0, [pc, #4]	@ (801a024 <__tz_unlock+0x8>)
 801a01e:	f000 bb0c 	b.w	801a63a <__retarget_lock_release>
 801a022:	bf00      	nop
 801a024:	240084d8 	.word	0x240084d8

0801a028 <_tzset_unlocked>:
 801a028:	4b01      	ldr	r3, [pc, #4]	@ (801a030 <_tzset_unlocked+0x8>)
 801a02a:	6818      	ldr	r0, [r3, #0]
 801a02c:	f000 b802 	b.w	801a034 <_tzset_unlocked_r>
 801a030:	2400004c 	.word	0x2400004c

0801a034 <_tzset_unlocked_r>:
 801a034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a038:	b08d      	sub	sp, #52	@ 0x34
 801a03a:	4607      	mov	r7, r0
 801a03c:	f001 f864 	bl	801b108 <__gettzinfo>
 801a040:	49bc      	ldr	r1, [pc, #752]	@ (801a334 <_tzset_unlocked_r+0x300>)
 801a042:	4dbd      	ldr	r5, [pc, #756]	@ (801a338 <_tzset_unlocked_r+0x304>)
 801a044:	4604      	mov	r4, r0
 801a046:	4638      	mov	r0, r7
 801a048:	f000 fba4 	bl	801a794 <_getenv_r>
 801a04c:	4606      	mov	r6, r0
 801a04e:	bb10      	cbnz	r0, 801a096 <_tzset_unlocked_r+0x62>
 801a050:	4bba      	ldr	r3, [pc, #744]	@ (801a33c <_tzset_unlocked_r+0x308>)
 801a052:	4abb      	ldr	r2, [pc, #748]	@ (801a340 <_tzset_unlocked_r+0x30c>)
 801a054:	6018      	str	r0, [r3, #0]
 801a056:	4bbb      	ldr	r3, [pc, #748]	@ (801a344 <_tzset_unlocked_r+0x310>)
 801a058:	62a0      	str	r0, [r4, #40]	@ 0x28
 801a05a:	6018      	str	r0, [r3, #0]
 801a05c:	4bba      	ldr	r3, [pc, #744]	@ (801a348 <_tzset_unlocked_r+0x314>)
 801a05e:	6520      	str	r0, [r4, #80]	@ 0x50
 801a060:	e9c3 2200 	strd	r2, r2, [r3]
 801a064:	214a      	movs	r1, #74	@ 0x4a
 801a066:	2200      	movs	r2, #0
 801a068:	2300      	movs	r3, #0
 801a06a:	e9c4 0003 	strd	r0, r0, [r4, #12]
 801a06e:	e9c4 0005 	strd	r0, r0, [r4, #20]
 801a072:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 801a076:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 801a07a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801a07e:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 801a082:	6828      	ldr	r0, [r5, #0]
 801a084:	7221      	strb	r1, [r4, #8]
 801a086:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 801a08a:	f7ff f863 	bl	8019154 <free>
 801a08e:	602e      	str	r6, [r5, #0]
 801a090:	b00d      	add	sp, #52	@ 0x34
 801a092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a096:	6829      	ldr	r1, [r5, #0]
 801a098:	2900      	cmp	r1, #0
 801a09a:	f040 808e 	bne.w	801a1ba <_tzset_unlocked_r+0x186>
 801a09e:	6828      	ldr	r0, [r5, #0]
 801a0a0:	f7ff f858 	bl	8019154 <free>
 801a0a4:	4630      	mov	r0, r6
 801a0a6:	f7e6 f93d 	bl	8000324 <strlen>
 801a0aa:	1c41      	adds	r1, r0, #1
 801a0ac:	4638      	mov	r0, r7
 801a0ae:	f7ff f87b 	bl	80191a8 <_malloc_r>
 801a0b2:	6028      	str	r0, [r5, #0]
 801a0b4:	2800      	cmp	r0, #0
 801a0b6:	f040 8086 	bne.w	801a1c6 <_tzset_unlocked_r+0x192>
 801a0ba:	4aa2      	ldr	r2, [pc, #648]	@ (801a344 <_tzset_unlocked_r+0x310>)
 801a0bc:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 801a348 <_tzset_unlocked_r+0x314>
 801a0c0:	f8df a278 	ldr.w	sl, [pc, #632]	@ 801a33c <_tzset_unlocked_r+0x308>
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	6013      	str	r3, [r2, #0]
 801a0c8:	4aa0      	ldr	r2, [pc, #640]	@ (801a34c <_tzset_unlocked_r+0x318>)
 801a0ca:	f8ca 3000 	str.w	r3, [sl]
 801a0ce:	2000      	movs	r0, #0
 801a0d0:	2100      	movs	r1, #0
 801a0d2:	e9c8 2200 	strd	r2, r2, [r8]
 801a0d6:	e9c4 3303 	strd	r3, r3, [r4, #12]
 801a0da:	e9c4 3305 	strd	r3, r3, [r4, #20]
 801a0de:	e9c4 0108 	strd	r0, r1, [r4, #32]
 801a0e2:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 801a0e6:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 801a0ea:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 801a0ee:	224a      	movs	r2, #74	@ 0x4a
 801a0f0:	7222      	strb	r2, [r4, #8]
 801a0f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a0f4:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 801a0f8:	6523      	str	r3, [r4, #80]	@ 0x50
 801a0fa:	7833      	ldrb	r3, [r6, #0]
 801a0fc:	2b3a      	cmp	r3, #58	@ 0x3a
 801a0fe:	bf08      	it	eq
 801a100:	3601      	addeq	r6, #1
 801a102:	7833      	ldrb	r3, [r6, #0]
 801a104:	2b3c      	cmp	r3, #60	@ 0x3c
 801a106:	d162      	bne.n	801a1ce <_tzset_unlocked_r+0x19a>
 801a108:	1c75      	adds	r5, r6, #1
 801a10a:	4a91      	ldr	r2, [pc, #580]	@ (801a350 <_tzset_unlocked_r+0x31c>)
 801a10c:	4991      	ldr	r1, [pc, #580]	@ (801a354 <_tzset_unlocked_r+0x320>)
 801a10e:	ab0a      	add	r3, sp, #40	@ 0x28
 801a110:	4628      	mov	r0, r5
 801a112:	f000 ff9d 	bl	801b050 <siscanf>
 801a116:	2800      	cmp	r0, #0
 801a118:	ddba      	ble.n	801a090 <_tzset_unlocked_r+0x5c>
 801a11a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a11c:	1eda      	subs	r2, r3, #3
 801a11e:	2a07      	cmp	r2, #7
 801a120:	d8b6      	bhi.n	801a090 <_tzset_unlocked_r+0x5c>
 801a122:	5ceb      	ldrb	r3, [r5, r3]
 801a124:	2b3e      	cmp	r3, #62	@ 0x3e
 801a126:	d1b3      	bne.n	801a090 <_tzset_unlocked_r+0x5c>
 801a128:	3602      	adds	r6, #2
 801a12a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a12c:	18f5      	adds	r5, r6, r3
 801a12e:	5cf3      	ldrb	r3, [r6, r3]
 801a130:	2b2d      	cmp	r3, #45	@ 0x2d
 801a132:	d15a      	bne.n	801a1ea <_tzset_unlocked_r+0x1b6>
 801a134:	3501      	adds	r5, #1
 801a136:	f04f 39ff 	mov.w	r9, #4294967295
 801a13a:	2300      	movs	r3, #0
 801a13c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a140:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a144:	af08      	add	r7, sp, #32
 801a146:	ab0a      	add	r3, sp, #40	@ 0x28
 801a148:	e9cd 3701 	strd	r3, r7, [sp, #4]
 801a14c:	9303      	str	r3, [sp, #12]
 801a14e:	f10d 031e 	add.w	r3, sp, #30
 801a152:	9300      	str	r3, [sp, #0]
 801a154:	4980      	ldr	r1, [pc, #512]	@ (801a358 <_tzset_unlocked_r+0x324>)
 801a156:	ab0a      	add	r3, sp, #40	@ 0x28
 801a158:	aa07      	add	r2, sp, #28
 801a15a:	4628      	mov	r0, r5
 801a15c:	f000 ff78 	bl	801b050 <siscanf>
 801a160:	2800      	cmp	r0, #0
 801a162:	dd95      	ble.n	801a090 <_tzset_unlocked_r+0x5c>
 801a164:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801a168:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 801a16c:	223c      	movs	r2, #60	@ 0x3c
 801a16e:	fb02 6603 	mla	r6, r2, r3, r6
 801a172:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801a176:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 801a17a:	fb02 6603 	mla	r6, r2, r3, r6
 801a17e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a180:	fb09 f606 	mul.w	r6, r9, r6
 801a184:	eb05 0903 	add.w	r9, r5, r3
 801a188:	5ceb      	ldrb	r3, [r5, r3]
 801a18a:	2b3c      	cmp	r3, #60	@ 0x3c
 801a18c:	f040 80ee 	bne.w	801a36c <_tzset_unlocked_r+0x338>
 801a190:	f109 0501 	add.w	r5, r9, #1
 801a194:	4a71      	ldr	r2, [pc, #452]	@ (801a35c <_tzset_unlocked_r+0x328>)
 801a196:	496f      	ldr	r1, [pc, #444]	@ (801a354 <_tzset_unlocked_r+0x320>)
 801a198:	ab0a      	add	r3, sp, #40	@ 0x28
 801a19a:	4628      	mov	r0, r5
 801a19c:	f000 ff58 	bl	801b050 <siscanf>
 801a1a0:	2800      	cmp	r0, #0
 801a1a2:	dc28      	bgt.n	801a1f6 <_tzset_unlocked_r+0x1c2>
 801a1a4:	f899 3001 	ldrb.w	r3, [r9, #1]
 801a1a8:	2b3e      	cmp	r3, #62	@ 0x3e
 801a1aa:	d124      	bne.n	801a1f6 <_tzset_unlocked_r+0x1c2>
 801a1ac:	4b68      	ldr	r3, [pc, #416]	@ (801a350 <_tzset_unlocked_r+0x31c>)
 801a1ae:	62a6      	str	r6, [r4, #40]	@ 0x28
 801a1b0:	e9c8 3300 	strd	r3, r3, [r8]
 801a1b4:	f8ca 6000 	str.w	r6, [sl]
 801a1b8:	e76a      	b.n	801a090 <_tzset_unlocked_r+0x5c>
 801a1ba:	f7e6 f8a9 	bl	8000310 <strcmp>
 801a1be:	2800      	cmp	r0, #0
 801a1c0:	f47f af6d 	bne.w	801a09e <_tzset_unlocked_r+0x6a>
 801a1c4:	e764      	b.n	801a090 <_tzset_unlocked_r+0x5c>
 801a1c6:	4631      	mov	r1, r6
 801a1c8:	f000 fa39 	bl	801a63e <strcpy>
 801a1cc:	e775      	b.n	801a0ba <_tzset_unlocked_r+0x86>
 801a1ce:	4a60      	ldr	r2, [pc, #384]	@ (801a350 <_tzset_unlocked_r+0x31c>)
 801a1d0:	4963      	ldr	r1, [pc, #396]	@ (801a360 <_tzset_unlocked_r+0x32c>)
 801a1d2:	ab0a      	add	r3, sp, #40	@ 0x28
 801a1d4:	4630      	mov	r0, r6
 801a1d6:	f000 ff3b 	bl	801b050 <siscanf>
 801a1da:	2800      	cmp	r0, #0
 801a1dc:	f77f af58 	ble.w	801a090 <_tzset_unlocked_r+0x5c>
 801a1e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a1e2:	3b03      	subs	r3, #3
 801a1e4:	2b07      	cmp	r3, #7
 801a1e6:	d9a0      	bls.n	801a12a <_tzset_unlocked_r+0xf6>
 801a1e8:	e752      	b.n	801a090 <_tzset_unlocked_r+0x5c>
 801a1ea:	2b2b      	cmp	r3, #43	@ 0x2b
 801a1ec:	bf08      	it	eq
 801a1ee:	3501      	addeq	r5, #1
 801a1f0:	f04f 0901 	mov.w	r9, #1
 801a1f4:	e7a1      	b.n	801a13a <_tzset_unlocked_r+0x106>
 801a1f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a1f8:	1eda      	subs	r2, r3, #3
 801a1fa:	2a07      	cmp	r2, #7
 801a1fc:	f63f af48 	bhi.w	801a090 <_tzset_unlocked_r+0x5c>
 801a200:	5ceb      	ldrb	r3, [r5, r3]
 801a202:	2b3e      	cmp	r3, #62	@ 0x3e
 801a204:	f47f af44 	bne.w	801a090 <_tzset_unlocked_r+0x5c>
 801a208:	f109 0902 	add.w	r9, r9, #2
 801a20c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a20e:	eb09 0503 	add.w	r5, r9, r3
 801a212:	f819 3003 	ldrb.w	r3, [r9, r3]
 801a216:	2b2d      	cmp	r3, #45	@ 0x2d
 801a218:	f040 80b7 	bne.w	801a38a <_tzset_unlocked_r+0x356>
 801a21c:	3501      	adds	r5, #1
 801a21e:	f04f 39ff 	mov.w	r9, #4294967295
 801a222:	2300      	movs	r3, #0
 801a224:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a228:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a22c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a230:	930a      	str	r3, [sp, #40]	@ 0x28
 801a232:	ab0a      	add	r3, sp, #40	@ 0x28
 801a234:	e9cd 7302 	strd	r7, r3, [sp, #8]
 801a238:	9301      	str	r3, [sp, #4]
 801a23a:	f10d 031e 	add.w	r3, sp, #30
 801a23e:	9300      	str	r3, [sp, #0]
 801a240:	4945      	ldr	r1, [pc, #276]	@ (801a358 <_tzset_unlocked_r+0x324>)
 801a242:	ab0a      	add	r3, sp, #40	@ 0x28
 801a244:	aa07      	add	r2, sp, #28
 801a246:	4628      	mov	r0, r5
 801a248:	f000 ff02 	bl	801b050 <siscanf>
 801a24c:	2800      	cmp	r0, #0
 801a24e:	f300 80a2 	bgt.w	801a396 <_tzset_unlocked_r+0x362>
 801a252:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 801a256:	9304      	str	r3, [sp, #16]
 801a258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a25a:	4627      	mov	r7, r4
 801a25c:	441d      	add	r5, r3
 801a25e:	f04f 0b00 	mov.w	fp, #0
 801a262:	782b      	ldrb	r3, [r5, #0]
 801a264:	2b2c      	cmp	r3, #44	@ 0x2c
 801a266:	bf08      	it	eq
 801a268:	3501      	addeq	r5, #1
 801a26a:	f895 9000 	ldrb.w	r9, [r5]
 801a26e:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 801a272:	f040 80a3 	bne.w	801a3bc <_tzset_unlocked_r+0x388>
 801a276:	ab0a      	add	r3, sp, #40	@ 0x28
 801a278:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 801a27c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801a280:	aa09      	add	r2, sp, #36	@ 0x24
 801a282:	9200      	str	r2, [sp, #0]
 801a284:	4937      	ldr	r1, [pc, #220]	@ (801a364 <_tzset_unlocked_r+0x330>)
 801a286:	9303      	str	r3, [sp, #12]
 801a288:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 801a28c:	4628      	mov	r0, r5
 801a28e:	f000 fedf 	bl	801b050 <siscanf>
 801a292:	2803      	cmp	r0, #3
 801a294:	f47f aefc 	bne.w	801a090 <_tzset_unlocked_r+0x5c>
 801a298:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801a29c:	1e4b      	subs	r3, r1, #1
 801a29e:	2b0b      	cmp	r3, #11
 801a2a0:	f63f aef6 	bhi.w	801a090 <_tzset_unlocked_r+0x5c>
 801a2a4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 801a2a8:	1e53      	subs	r3, r2, #1
 801a2aa:	2b04      	cmp	r3, #4
 801a2ac:	f63f aef0 	bhi.w	801a090 <_tzset_unlocked_r+0x5c>
 801a2b0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 801a2b4:	2b06      	cmp	r3, #6
 801a2b6:	f63f aeeb 	bhi.w	801a090 <_tzset_unlocked_r+0x5c>
 801a2ba:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801a2be:	f887 9008 	strb.w	r9, [r7, #8]
 801a2c2:	617b      	str	r3, [r7, #20]
 801a2c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a2c6:	eb05 0903 	add.w	r9, r5, r3
 801a2ca:	2500      	movs	r5, #0
 801a2cc:	f04f 0302 	mov.w	r3, #2
 801a2d0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a2d4:	f8ad 501e 	strh.w	r5, [sp, #30]
 801a2d8:	f8ad 5020 	strh.w	r5, [sp, #32]
 801a2dc:	950a      	str	r5, [sp, #40]	@ 0x28
 801a2de:	f899 3000 	ldrb.w	r3, [r9]
 801a2e2:	2b2f      	cmp	r3, #47	@ 0x2f
 801a2e4:	f040 8096 	bne.w	801a414 <_tzset_unlocked_r+0x3e0>
 801a2e8:	ab0a      	add	r3, sp, #40	@ 0x28
 801a2ea:	aa08      	add	r2, sp, #32
 801a2ec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801a2f0:	f10d 021e 	add.w	r2, sp, #30
 801a2f4:	9200      	str	r2, [sp, #0]
 801a2f6:	491c      	ldr	r1, [pc, #112]	@ (801a368 <_tzset_unlocked_r+0x334>)
 801a2f8:	9303      	str	r3, [sp, #12]
 801a2fa:	aa07      	add	r2, sp, #28
 801a2fc:	4648      	mov	r0, r9
 801a2fe:	f000 fea7 	bl	801b050 <siscanf>
 801a302:	42a8      	cmp	r0, r5
 801a304:	f300 8086 	bgt.w	801a414 <_tzset_unlocked_r+0x3e0>
 801a308:	214a      	movs	r1, #74	@ 0x4a
 801a30a:	2200      	movs	r2, #0
 801a30c:	2300      	movs	r3, #0
 801a30e:	e9c4 5503 	strd	r5, r5, [r4, #12]
 801a312:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801a316:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801a31a:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 801a31e:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 801a322:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 801a326:	7221      	strb	r1, [r4, #8]
 801a328:	62a5      	str	r5, [r4, #40]	@ 0x28
 801a32a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 801a32e:	6525      	str	r5, [r4, #80]	@ 0x50
 801a330:	e6ae      	b.n	801a090 <_tzset_unlocked_r+0x5c>
 801a332:	bf00      	nop
 801a334:	0801e7d9 	.word	0x0801e7d9
 801a338:	240084b0 	.word	0x240084b0
 801a33c:	240084cc 	.word	0x240084cc
 801a340:	0801e7dc 	.word	0x0801e7dc
 801a344:	240084d0 	.word	0x240084d0
 801a348:	24000044 	.word	0x24000044
 801a34c:	0801e711 	.word	0x0801e711
 801a350:	240084c0 	.word	0x240084c0
 801a354:	0801e7e0 	.word	0x0801e7e0
 801a358:	0801e815 	.word	0x0801e815
 801a35c:	240084b4 	.word	0x240084b4
 801a360:	0801e7f3 	.word	0x0801e7f3
 801a364:	0801e801 	.word	0x0801e801
 801a368:	0801e814 	.word	0x0801e814
 801a36c:	4a3e      	ldr	r2, [pc, #248]	@ (801a468 <_tzset_unlocked_r+0x434>)
 801a36e:	493f      	ldr	r1, [pc, #252]	@ (801a46c <_tzset_unlocked_r+0x438>)
 801a370:	ab0a      	add	r3, sp, #40	@ 0x28
 801a372:	4648      	mov	r0, r9
 801a374:	f000 fe6c 	bl	801b050 <siscanf>
 801a378:	2800      	cmp	r0, #0
 801a37a:	f77f af17 	ble.w	801a1ac <_tzset_unlocked_r+0x178>
 801a37e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a380:	3b03      	subs	r3, #3
 801a382:	2b07      	cmp	r3, #7
 801a384:	f67f af42 	bls.w	801a20c <_tzset_unlocked_r+0x1d8>
 801a388:	e682      	b.n	801a090 <_tzset_unlocked_r+0x5c>
 801a38a:	2b2b      	cmp	r3, #43	@ 0x2b
 801a38c:	bf08      	it	eq
 801a38e:	3501      	addeq	r5, #1
 801a390:	f04f 0901 	mov.w	r9, #1
 801a394:	e745      	b.n	801a222 <_tzset_unlocked_r+0x1ee>
 801a396:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801a39a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a39e:	213c      	movs	r1, #60	@ 0x3c
 801a3a0:	fb01 3302 	mla	r3, r1, r2, r3
 801a3a4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801a3a8:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801a3ac:	fb01 3302 	mla	r3, r1, r2, r3
 801a3b0:	fb09 f303 	mul.w	r3, r9, r3
 801a3b4:	e74f      	b.n	801a256 <_tzset_unlocked_r+0x222>
 801a3b6:	f04f 0b01 	mov.w	fp, #1
 801a3ba:	e752      	b.n	801a262 <_tzset_unlocked_r+0x22e>
 801a3bc:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 801a3c0:	bf06      	itte	eq
 801a3c2:	3501      	addeq	r5, #1
 801a3c4:	464b      	moveq	r3, r9
 801a3c6:	2344      	movne	r3, #68	@ 0x44
 801a3c8:	220a      	movs	r2, #10
 801a3ca:	a90b      	add	r1, sp, #44	@ 0x2c
 801a3cc:	4628      	mov	r0, r5
 801a3ce:	9305      	str	r3, [sp, #20]
 801a3d0:	f000 fa58 	bl	801a884 <strtoul>
 801a3d4:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 801a3d8:	9b05      	ldr	r3, [sp, #20]
 801a3da:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 801a3de:	45a9      	cmp	r9, r5
 801a3e0:	d114      	bne.n	801a40c <_tzset_unlocked_r+0x3d8>
 801a3e2:	234d      	movs	r3, #77	@ 0x4d
 801a3e4:	f1bb 0f00 	cmp.w	fp, #0
 801a3e8:	d107      	bne.n	801a3fa <_tzset_unlocked_r+0x3c6>
 801a3ea:	7223      	strb	r3, [r4, #8]
 801a3ec:	2103      	movs	r1, #3
 801a3ee:	2302      	movs	r3, #2
 801a3f0:	e9c4 1303 	strd	r1, r3, [r4, #12]
 801a3f4:	f8c4 b014 	str.w	fp, [r4, #20]
 801a3f8:	e767      	b.n	801a2ca <_tzset_unlocked_r+0x296>
 801a3fa:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 801a3fe:	220b      	movs	r2, #11
 801a400:	2301      	movs	r3, #1
 801a402:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 801a406:	2300      	movs	r3, #0
 801a408:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801a40a:	e75e      	b.n	801a2ca <_tzset_unlocked_r+0x296>
 801a40c:	b280      	uxth	r0, r0
 801a40e:	723b      	strb	r3, [r7, #8]
 801a410:	6178      	str	r0, [r7, #20]
 801a412:	e75a      	b.n	801a2ca <_tzset_unlocked_r+0x296>
 801a414:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801a418:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a41c:	213c      	movs	r1, #60	@ 0x3c
 801a41e:	fb01 3302 	mla	r3, r1, r2, r3
 801a422:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801a426:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801a42a:	fb01 3302 	mla	r3, r1, r2, r3
 801a42e:	61bb      	str	r3, [r7, #24]
 801a430:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801a432:	3728      	adds	r7, #40	@ 0x28
 801a434:	444d      	add	r5, r9
 801a436:	f1bb 0f00 	cmp.w	fp, #0
 801a43a:	d0bc      	beq.n	801a3b6 <_tzset_unlocked_r+0x382>
 801a43c:	9b04      	ldr	r3, [sp, #16]
 801a43e:	6523      	str	r3, [r4, #80]	@ 0x50
 801a440:	4b0b      	ldr	r3, [pc, #44]	@ (801a470 <_tzset_unlocked_r+0x43c>)
 801a442:	f8c8 3000 	str.w	r3, [r8]
 801a446:	6860      	ldr	r0, [r4, #4]
 801a448:	4b07      	ldr	r3, [pc, #28]	@ (801a468 <_tzset_unlocked_r+0x434>)
 801a44a:	62a6      	str	r6, [r4, #40]	@ 0x28
 801a44c:	f8c8 3004 	str.w	r3, [r8, #4]
 801a450:	f7ff fd2a 	bl	8019ea8 <__tzcalc_limits>
 801a454:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801a456:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801a458:	f8ca 2000 	str.w	r2, [sl]
 801a45c:	1a9b      	subs	r3, r3, r2
 801a45e:	4a05      	ldr	r2, [pc, #20]	@ (801a474 <_tzset_unlocked_r+0x440>)
 801a460:	bf18      	it	ne
 801a462:	2301      	movne	r3, #1
 801a464:	6013      	str	r3, [r2, #0]
 801a466:	e613      	b.n	801a090 <_tzset_unlocked_r+0x5c>
 801a468:	240084b4 	.word	0x240084b4
 801a46c:	0801e7f3 	.word	0x0801e7f3
 801a470:	240084c0 	.word	0x240084c0
 801a474:	240084d0 	.word	0x240084d0

0801a478 <_close_r>:
 801a478:	b538      	push	{r3, r4, r5, lr}
 801a47a:	4d06      	ldr	r5, [pc, #24]	@ (801a494 <_close_r+0x1c>)
 801a47c:	2300      	movs	r3, #0
 801a47e:	4604      	mov	r4, r0
 801a480:	4608      	mov	r0, r1
 801a482:	602b      	str	r3, [r5, #0]
 801a484:	f7e7 ff3a 	bl	80022fc <_close>
 801a488:	1c43      	adds	r3, r0, #1
 801a48a:	d102      	bne.n	801a492 <_close_r+0x1a>
 801a48c:	682b      	ldr	r3, [r5, #0]
 801a48e:	b103      	cbz	r3, 801a492 <_close_r+0x1a>
 801a490:	6023      	str	r3, [r4, #0]
 801a492:	bd38      	pop	{r3, r4, r5, pc}
 801a494:	240084d4 	.word	0x240084d4

0801a498 <_reclaim_reent>:
 801a498:	4b2d      	ldr	r3, [pc, #180]	@ (801a550 <_reclaim_reent+0xb8>)
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	4283      	cmp	r3, r0
 801a49e:	b570      	push	{r4, r5, r6, lr}
 801a4a0:	4604      	mov	r4, r0
 801a4a2:	d053      	beq.n	801a54c <_reclaim_reent+0xb4>
 801a4a4:	69c3      	ldr	r3, [r0, #28]
 801a4a6:	b31b      	cbz	r3, 801a4f0 <_reclaim_reent+0x58>
 801a4a8:	68db      	ldr	r3, [r3, #12]
 801a4aa:	b163      	cbz	r3, 801a4c6 <_reclaim_reent+0x2e>
 801a4ac:	2500      	movs	r5, #0
 801a4ae:	69e3      	ldr	r3, [r4, #28]
 801a4b0:	68db      	ldr	r3, [r3, #12]
 801a4b2:	5959      	ldr	r1, [r3, r5]
 801a4b4:	b9b1      	cbnz	r1, 801a4e4 <_reclaim_reent+0x4c>
 801a4b6:	3504      	adds	r5, #4
 801a4b8:	2d80      	cmp	r5, #128	@ 0x80
 801a4ba:	d1f8      	bne.n	801a4ae <_reclaim_reent+0x16>
 801a4bc:	69e3      	ldr	r3, [r4, #28]
 801a4be:	4620      	mov	r0, r4
 801a4c0:	68d9      	ldr	r1, [r3, #12]
 801a4c2:	f000 f8e1 	bl	801a688 <_free_r>
 801a4c6:	69e3      	ldr	r3, [r4, #28]
 801a4c8:	6819      	ldr	r1, [r3, #0]
 801a4ca:	b111      	cbz	r1, 801a4d2 <_reclaim_reent+0x3a>
 801a4cc:	4620      	mov	r0, r4
 801a4ce:	f000 f8db 	bl	801a688 <_free_r>
 801a4d2:	69e3      	ldr	r3, [r4, #28]
 801a4d4:	689d      	ldr	r5, [r3, #8]
 801a4d6:	b15d      	cbz	r5, 801a4f0 <_reclaim_reent+0x58>
 801a4d8:	4629      	mov	r1, r5
 801a4da:	4620      	mov	r0, r4
 801a4dc:	682d      	ldr	r5, [r5, #0]
 801a4de:	f000 f8d3 	bl	801a688 <_free_r>
 801a4e2:	e7f8      	b.n	801a4d6 <_reclaim_reent+0x3e>
 801a4e4:	680e      	ldr	r6, [r1, #0]
 801a4e6:	4620      	mov	r0, r4
 801a4e8:	f000 f8ce 	bl	801a688 <_free_r>
 801a4ec:	4631      	mov	r1, r6
 801a4ee:	e7e1      	b.n	801a4b4 <_reclaim_reent+0x1c>
 801a4f0:	6961      	ldr	r1, [r4, #20]
 801a4f2:	b111      	cbz	r1, 801a4fa <_reclaim_reent+0x62>
 801a4f4:	4620      	mov	r0, r4
 801a4f6:	f000 f8c7 	bl	801a688 <_free_r>
 801a4fa:	69e1      	ldr	r1, [r4, #28]
 801a4fc:	b111      	cbz	r1, 801a504 <_reclaim_reent+0x6c>
 801a4fe:	4620      	mov	r0, r4
 801a500:	f000 f8c2 	bl	801a688 <_free_r>
 801a504:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a506:	b111      	cbz	r1, 801a50e <_reclaim_reent+0x76>
 801a508:	4620      	mov	r0, r4
 801a50a:	f000 f8bd 	bl	801a688 <_free_r>
 801a50e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a510:	b111      	cbz	r1, 801a518 <_reclaim_reent+0x80>
 801a512:	4620      	mov	r0, r4
 801a514:	f000 f8b8 	bl	801a688 <_free_r>
 801a518:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801a51a:	b111      	cbz	r1, 801a522 <_reclaim_reent+0x8a>
 801a51c:	4620      	mov	r0, r4
 801a51e:	f000 f8b3 	bl	801a688 <_free_r>
 801a522:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801a524:	b111      	cbz	r1, 801a52c <_reclaim_reent+0x94>
 801a526:	4620      	mov	r0, r4
 801a528:	f000 f8ae 	bl	801a688 <_free_r>
 801a52c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801a52e:	b111      	cbz	r1, 801a536 <_reclaim_reent+0x9e>
 801a530:	4620      	mov	r0, r4
 801a532:	f000 f8a9 	bl	801a688 <_free_r>
 801a536:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801a538:	b111      	cbz	r1, 801a540 <_reclaim_reent+0xa8>
 801a53a:	4620      	mov	r0, r4
 801a53c:	f000 f8a4 	bl	801a688 <_free_r>
 801a540:	6a23      	ldr	r3, [r4, #32]
 801a542:	b11b      	cbz	r3, 801a54c <_reclaim_reent+0xb4>
 801a544:	4620      	mov	r0, r4
 801a546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a54a:	4718      	bx	r3
 801a54c:	bd70      	pop	{r4, r5, r6, pc}
 801a54e:	bf00      	nop
 801a550:	2400004c 	.word	0x2400004c

0801a554 <_lseek_r>:
 801a554:	b538      	push	{r3, r4, r5, lr}
 801a556:	4d07      	ldr	r5, [pc, #28]	@ (801a574 <_lseek_r+0x20>)
 801a558:	4604      	mov	r4, r0
 801a55a:	4608      	mov	r0, r1
 801a55c:	4611      	mov	r1, r2
 801a55e:	2200      	movs	r2, #0
 801a560:	602a      	str	r2, [r5, #0]
 801a562:	461a      	mov	r2, r3
 801a564:	f7e7 fef1 	bl	800234a <_lseek>
 801a568:	1c43      	adds	r3, r0, #1
 801a56a:	d102      	bne.n	801a572 <_lseek_r+0x1e>
 801a56c:	682b      	ldr	r3, [r5, #0]
 801a56e:	b103      	cbz	r3, 801a572 <_lseek_r+0x1e>
 801a570:	6023      	str	r3, [r4, #0]
 801a572:	bd38      	pop	{r3, r4, r5, pc}
 801a574:	240084d4 	.word	0x240084d4

0801a578 <_read_r>:
 801a578:	b538      	push	{r3, r4, r5, lr}
 801a57a:	4d07      	ldr	r5, [pc, #28]	@ (801a598 <_read_r+0x20>)
 801a57c:	4604      	mov	r4, r0
 801a57e:	4608      	mov	r0, r1
 801a580:	4611      	mov	r1, r2
 801a582:	2200      	movs	r2, #0
 801a584:	602a      	str	r2, [r5, #0]
 801a586:	461a      	mov	r2, r3
 801a588:	f7e7 fe7f 	bl	800228a <_read>
 801a58c:	1c43      	adds	r3, r0, #1
 801a58e:	d102      	bne.n	801a596 <_read_r+0x1e>
 801a590:	682b      	ldr	r3, [r5, #0]
 801a592:	b103      	cbz	r3, 801a596 <_read_r+0x1e>
 801a594:	6023      	str	r3, [r4, #0]
 801a596:	bd38      	pop	{r3, r4, r5, pc}
 801a598:	240084d4 	.word	0x240084d4

0801a59c <_sbrk_r>:
 801a59c:	b538      	push	{r3, r4, r5, lr}
 801a59e:	4d06      	ldr	r5, [pc, #24]	@ (801a5b8 <_sbrk_r+0x1c>)
 801a5a0:	2300      	movs	r3, #0
 801a5a2:	4604      	mov	r4, r0
 801a5a4:	4608      	mov	r0, r1
 801a5a6:	602b      	str	r3, [r5, #0]
 801a5a8:	f7e7 fedc 	bl	8002364 <_sbrk>
 801a5ac:	1c43      	adds	r3, r0, #1
 801a5ae:	d102      	bne.n	801a5b6 <_sbrk_r+0x1a>
 801a5b0:	682b      	ldr	r3, [r5, #0]
 801a5b2:	b103      	cbz	r3, 801a5b6 <_sbrk_r+0x1a>
 801a5b4:	6023      	str	r3, [r4, #0]
 801a5b6:	bd38      	pop	{r3, r4, r5, pc}
 801a5b8:	240084d4 	.word	0x240084d4

0801a5bc <_write_r>:
 801a5bc:	b538      	push	{r3, r4, r5, lr}
 801a5be:	4d07      	ldr	r5, [pc, #28]	@ (801a5dc <_write_r+0x20>)
 801a5c0:	4604      	mov	r4, r0
 801a5c2:	4608      	mov	r0, r1
 801a5c4:	4611      	mov	r1, r2
 801a5c6:	2200      	movs	r2, #0
 801a5c8:	602a      	str	r2, [r5, #0]
 801a5ca:	461a      	mov	r2, r3
 801a5cc:	f7e7 fe7a 	bl	80022c4 <_write>
 801a5d0:	1c43      	adds	r3, r0, #1
 801a5d2:	d102      	bne.n	801a5da <_write_r+0x1e>
 801a5d4:	682b      	ldr	r3, [r5, #0]
 801a5d6:	b103      	cbz	r3, 801a5da <_write_r+0x1e>
 801a5d8:	6023      	str	r3, [r4, #0]
 801a5da:	bd38      	pop	{r3, r4, r5, pc}
 801a5dc:	240084d4 	.word	0x240084d4

0801a5e0 <__errno>:
 801a5e0:	4b01      	ldr	r3, [pc, #4]	@ (801a5e8 <__errno+0x8>)
 801a5e2:	6818      	ldr	r0, [r3, #0]
 801a5e4:	4770      	bx	lr
 801a5e6:	bf00      	nop
 801a5e8:	2400004c 	.word	0x2400004c

0801a5ec <__libc_init_array>:
 801a5ec:	b570      	push	{r4, r5, r6, lr}
 801a5ee:	4d0d      	ldr	r5, [pc, #52]	@ (801a624 <__libc_init_array+0x38>)
 801a5f0:	4c0d      	ldr	r4, [pc, #52]	@ (801a628 <__libc_init_array+0x3c>)
 801a5f2:	1b64      	subs	r4, r4, r5
 801a5f4:	10a4      	asrs	r4, r4, #2
 801a5f6:	2600      	movs	r6, #0
 801a5f8:	42a6      	cmp	r6, r4
 801a5fa:	d109      	bne.n	801a610 <__libc_init_array+0x24>
 801a5fc:	4d0b      	ldr	r5, [pc, #44]	@ (801a62c <__libc_init_array+0x40>)
 801a5fe:	4c0c      	ldr	r4, [pc, #48]	@ (801a630 <__libc_init_array+0x44>)
 801a600:	f001 f990 	bl	801b924 <_init>
 801a604:	1b64      	subs	r4, r4, r5
 801a606:	10a4      	asrs	r4, r4, #2
 801a608:	2600      	movs	r6, #0
 801a60a:	42a6      	cmp	r6, r4
 801a60c:	d105      	bne.n	801a61a <__libc_init_array+0x2e>
 801a60e:	bd70      	pop	{r4, r5, r6, pc}
 801a610:	f855 3b04 	ldr.w	r3, [r5], #4
 801a614:	4798      	blx	r3
 801a616:	3601      	adds	r6, #1
 801a618:	e7ee      	b.n	801a5f8 <__libc_init_array+0xc>
 801a61a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a61e:	4798      	blx	r3
 801a620:	3601      	adds	r6, #1
 801a622:	e7f2      	b.n	801a60a <__libc_init_array+0x1e>
 801a624:	0801ea40 	.word	0x0801ea40
 801a628:	0801ea40 	.word	0x0801ea40
 801a62c:	0801ea40 	.word	0x0801ea40
 801a630:	0801ea44 	.word	0x0801ea44

0801a634 <__retarget_lock_init_recursive>:
 801a634:	4770      	bx	lr

0801a636 <__retarget_lock_acquire>:
 801a636:	4770      	bx	lr

0801a638 <__retarget_lock_acquire_recursive>:
 801a638:	4770      	bx	lr

0801a63a <__retarget_lock_release>:
 801a63a:	4770      	bx	lr

0801a63c <__retarget_lock_release_recursive>:
 801a63c:	4770      	bx	lr

0801a63e <strcpy>:
 801a63e:	4603      	mov	r3, r0
 801a640:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a644:	f803 2b01 	strb.w	r2, [r3], #1
 801a648:	2a00      	cmp	r2, #0
 801a64a:	d1f9      	bne.n	801a640 <strcpy+0x2>
 801a64c:	4770      	bx	lr

0801a64e <memcpy>:
 801a64e:	440a      	add	r2, r1
 801a650:	4291      	cmp	r1, r2
 801a652:	f100 33ff 	add.w	r3, r0, #4294967295
 801a656:	d100      	bne.n	801a65a <memcpy+0xc>
 801a658:	4770      	bx	lr
 801a65a:	b510      	push	{r4, lr}
 801a65c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a660:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a664:	4291      	cmp	r1, r2
 801a666:	d1f9      	bne.n	801a65c <memcpy+0xe>
 801a668:	bd10      	pop	{r4, pc}

0801a66a <abort>:
 801a66a:	b508      	push	{r3, lr}
 801a66c:	2006      	movs	r0, #6
 801a66e:	f000 fd43 	bl	801b0f8 <raise>
 801a672:	2001      	movs	r0, #1
 801a674:	f7e7 fdfe 	bl	8002274 <_exit>

0801a678 <div>:
 801a678:	b510      	push	{r4, lr}
 801a67a:	fb91 f4f2 	sdiv	r4, r1, r2
 801a67e:	fb02 1114 	mls	r1, r2, r4, r1
 801a682:	6004      	str	r4, [r0, #0]
 801a684:	6041      	str	r1, [r0, #4]
 801a686:	bd10      	pop	{r4, pc}

0801a688 <_free_r>:
 801a688:	b538      	push	{r3, r4, r5, lr}
 801a68a:	4605      	mov	r5, r0
 801a68c:	2900      	cmp	r1, #0
 801a68e:	d041      	beq.n	801a714 <_free_r+0x8c>
 801a690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a694:	1f0c      	subs	r4, r1, #4
 801a696:	2b00      	cmp	r3, #0
 801a698:	bfb8      	it	lt
 801a69a:	18e4      	addlt	r4, r4, r3
 801a69c:	f7fe fe04 	bl	80192a8 <__malloc_lock>
 801a6a0:	4a1d      	ldr	r2, [pc, #116]	@ (801a718 <_free_r+0x90>)
 801a6a2:	6813      	ldr	r3, [r2, #0]
 801a6a4:	b933      	cbnz	r3, 801a6b4 <_free_r+0x2c>
 801a6a6:	6063      	str	r3, [r4, #4]
 801a6a8:	6014      	str	r4, [r2, #0]
 801a6aa:	4628      	mov	r0, r5
 801a6ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a6b0:	f7fe be00 	b.w	80192b4 <__malloc_unlock>
 801a6b4:	42a3      	cmp	r3, r4
 801a6b6:	d908      	bls.n	801a6ca <_free_r+0x42>
 801a6b8:	6820      	ldr	r0, [r4, #0]
 801a6ba:	1821      	adds	r1, r4, r0
 801a6bc:	428b      	cmp	r3, r1
 801a6be:	bf01      	itttt	eq
 801a6c0:	6819      	ldreq	r1, [r3, #0]
 801a6c2:	685b      	ldreq	r3, [r3, #4]
 801a6c4:	1809      	addeq	r1, r1, r0
 801a6c6:	6021      	streq	r1, [r4, #0]
 801a6c8:	e7ed      	b.n	801a6a6 <_free_r+0x1e>
 801a6ca:	461a      	mov	r2, r3
 801a6cc:	685b      	ldr	r3, [r3, #4]
 801a6ce:	b10b      	cbz	r3, 801a6d4 <_free_r+0x4c>
 801a6d0:	42a3      	cmp	r3, r4
 801a6d2:	d9fa      	bls.n	801a6ca <_free_r+0x42>
 801a6d4:	6811      	ldr	r1, [r2, #0]
 801a6d6:	1850      	adds	r0, r2, r1
 801a6d8:	42a0      	cmp	r0, r4
 801a6da:	d10b      	bne.n	801a6f4 <_free_r+0x6c>
 801a6dc:	6820      	ldr	r0, [r4, #0]
 801a6de:	4401      	add	r1, r0
 801a6e0:	1850      	adds	r0, r2, r1
 801a6e2:	4283      	cmp	r3, r0
 801a6e4:	6011      	str	r1, [r2, #0]
 801a6e6:	d1e0      	bne.n	801a6aa <_free_r+0x22>
 801a6e8:	6818      	ldr	r0, [r3, #0]
 801a6ea:	685b      	ldr	r3, [r3, #4]
 801a6ec:	6053      	str	r3, [r2, #4]
 801a6ee:	4408      	add	r0, r1
 801a6f0:	6010      	str	r0, [r2, #0]
 801a6f2:	e7da      	b.n	801a6aa <_free_r+0x22>
 801a6f4:	d902      	bls.n	801a6fc <_free_r+0x74>
 801a6f6:	230c      	movs	r3, #12
 801a6f8:	602b      	str	r3, [r5, #0]
 801a6fa:	e7d6      	b.n	801a6aa <_free_r+0x22>
 801a6fc:	6820      	ldr	r0, [r4, #0]
 801a6fe:	1821      	adds	r1, r4, r0
 801a700:	428b      	cmp	r3, r1
 801a702:	bf04      	itt	eq
 801a704:	6819      	ldreq	r1, [r3, #0]
 801a706:	685b      	ldreq	r3, [r3, #4]
 801a708:	6063      	str	r3, [r4, #4]
 801a70a:	bf04      	itt	eq
 801a70c:	1809      	addeq	r1, r1, r0
 801a70e:	6021      	streq	r1, [r4, #0]
 801a710:	6054      	str	r4, [r2, #4]
 801a712:	e7ca      	b.n	801a6aa <_free_r+0x22>
 801a714:	bd38      	pop	{r3, r4, r5, pc}
 801a716:	bf00      	nop
 801a718:	24008370 	.word	0x24008370

0801a71c <_findenv_r>:
 801a71c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a720:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801a790 <_findenv_r+0x74>
 801a724:	4606      	mov	r6, r0
 801a726:	4689      	mov	r9, r1
 801a728:	4617      	mov	r7, r2
 801a72a:	f000 fd27 	bl	801b17c <__env_lock>
 801a72e:	f8da 4000 	ldr.w	r4, [sl]
 801a732:	b134      	cbz	r4, 801a742 <_findenv_r+0x26>
 801a734:	464b      	mov	r3, r9
 801a736:	4698      	mov	r8, r3
 801a738:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a73c:	b13a      	cbz	r2, 801a74e <_findenv_r+0x32>
 801a73e:	2a3d      	cmp	r2, #61	@ 0x3d
 801a740:	d1f9      	bne.n	801a736 <_findenv_r+0x1a>
 801a742:	4630      	mov	r0, r6
 801a744:	f000 fd20 	bl	801b188 <__env_unlock>
 801a748:	2000      	movs	r0, #0
 801a74a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a74e:	eba8 0809 	sub.w	r8, r8, r9
 801a752:	46a3      	mov	fp, r4
 801a754:	f854 0b04 	ldr.w	r0, [r4], #4
 801a758:	2800      	cmp	r0, #0
 801a75a:	d0f2      	beq.n	801a742 <_findenv_r+0x26>
 801a75c:	4642      	mov	r2, r8
 801a75e:	4649      	mov	r1, r9
 801a760:	f7ff f840 	bl	80197e4 <strncmp>
 801a764:	2800      	cmp	r0, #0
 801a766:	d1f4      	bne.n	801a752 <_findenv_r+0x36>
 801a768:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801a76c:	eb03 0508 	add.w	r5, r3, r8
 801a770:	f813 3008 	ldrb.w	r3, [r3, r8]
 801a774:	2b3d      	cmp	r3, #61	@ 0x3d
 801a776:	d1ec      	bne.n	801a752 <_findenv_r+0x36>
 801a778:	f8da 3000 	ldr.w	r3, [sl]
 801a77c:	ebab 0303 	sub.w	r3, fp, r3
 801a780:	109b      	asrs	r3, r3, #2
 801a782:	4630      	mov	r0, r6
 801a784:	603b      	str	r3, [r7, #0]
 801a786:	f000 fcff 	bl	801b188 <__env_unlock>
 801a78a:	1c68      	adds	r0, r5, #1
 801a78c:	e7dd      	b.n	801a74a <_findenv_r+0x2e>
 801a78e:	bf00      	nop
 801a790:	24000000 	.word	0x24000000

0801a794 <_getenv_r>:
 801a794:	b507      	push	{r0, r1, r2, lr}
 801a796:	aa01      	add	r2, sp, #4
 801a798:	f7ff ffc0 	bl	801a71c <_findenv_r>
 801a79c:	b003      	add	sp, #12
 801a79e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801a7a4 <_strtoul_l.isra.0>:
 801a7a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a7a8:	4e34      	ldr	r6, [pc, #208]	@ (801a87c <_strtoul_l.isra.0+0xd8>)
 801a7aa:	4686      	mov	lr, r0
 801a7ac:	460d      	mov	r5, r1
 801a7ae:	4628      	mov	r0, r5
 801a7b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a7b4:	5d37      	ldrb	r7, [r6, r4]
 801a7b6:	f017 0708 	ands.w	r7, r7, #8
 801a7ba:	d1f8      	bne.n	801a7ae <_strtoul_l.isra.0+0xa>
 801a7bc:	2c2d      	cmp	r4, #45	@ 0x2d
 801a7be:	d110      	bne.n	801a7e2 <_strtoul_l.isra.0+0x3e>
 801a7c0:	782c      	ldrb	r4, [r5, #0]
 801a7c2:	2701      	movs	r7, #1
 801a7c4:	1c85      	adds	r5, r0, #2
 801a7c6:	f033 0010 	bics.w	r0, r3, #16
 801a7ca:	d115      	bne.n	801a7f8 <_strtoul_l.isra.0+0x54>
 801a7cc:	2c30      	cmp	r4, #48	@ 0x30
 801a7ce:	d10d      	bne.n	801a7ec <_strtoul_l.isra.0+0x48>
 801a7d0:	7828      	ldrb	r0, [r5, #0]
 801a7d2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801a7d6:	2858      	cmp	r0, #88	@ 0x58
 801a7d8:	d108      	bne.n	801a7ec <_strtoul_l.isra.0+0x48>
 801a7da:	786c      	ldrb	r4, [r5, #1]
 801a7dc:	3502      	adds	r5, #2
 801a7de:	2310      	movs	r3, #16
 801a7e0:	e00a      	b.n	801a7f8 <_strtoul_l.isra.0+0x54>
 801a7e2:	2c2b      	cmp	r4, #43	@ 0x2b
 801a7e4:	bf04      	itt	eq
 801a7e6:	782c      	ldrbeq	r4, [r5, #0]
 801a7e8:	1c85      	addeq	r5, r0, #2
 801a7ea:	e7ec      	b.n	801a7c6 <_strtoul_l.isra.0+0x22>
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d1f6      	bne.n	801a7de <_strtoul_l.isra.0+0x3a>
 801a7f0:	2c30      	cmp	r4, #48	@ 0x30
 801a7f2:	bf14      	ite	ne
 801a7f4:	230a      	movne	r3, #10
 801a7f6:	2308      	moveq	r3, #8
 801a7f8:	f04f 38ff 	mov.w	r8, #4294967295
 801a7fc:	2600      	movs	r6, #0
 801a7fe:	fbb8 f8f3 	udiv	r8, r8, r3
 801a802:	fb03 f908 	mul.w	r9, r3, r8
 801a806:	ea6f 0909 	mvn.w	r9, r9
 801a80a:	4630      	mov	r0, r6
 801a80c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801a810:	f1bc 0f09 	cmp.w	ip, #9
 801a814:	d810      	bhi.n	801a838 <_strtoul_l.isra.0+0x94>
 801a816:	4664      	mov	r4, ip
 801a818:	42a3      	cmp	r3, r4
 801a81a:	dd1e      	ble.n	801a85a <_strtoul_l.isra.0+0xb6>
 801a81c:	f1b6 3fff 	cmp.w	r6, #4294967295
 801a820:	d007      	beq.n	801a832 <_strtoul_l.isra.0+0x8e>
 801a822:	4580      	cmp	r8, r0
 801a824:	d316      	bcc.n	801a854 <_strtoul_l.isra.0+0xb0>
 801a826:	d101      	bne.n	801a82c <_strtoul_l.isra.0+0x88>
 801a828:	45a1      	cmp	r9, r4
 801a82a:	db13      	blt.n	801a854 <_strtoul_l.isra.0+0xb0>
 801a82c:	fb00 4003 	mla	r0, r0, r3, r4
 801a830:	2601      	movs	r6, #1
 801a832:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a836:	e7e9      	b.n	801a80c <_strtoul_l.isra.0+0x68>
 801a838:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801a83c:	f1bc 0f19 	cmp.w	ip, #25
 801a840:	d801      	bhi.n	801a846 <_strtoul_l.isra.0+0xa2>
 801a842:	3c37      	subs	r4, #55	@ 0x37
 801a844:	e7e8      	b.n	801a818 <_strtoul_l.isra.0+0x74>
 801a846:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801a84a:	f1bc 0f19 	cmp.w	ip, #25
 801a84e:	d804      	bhi.n	801a85a <_strtoul_l.isra.0+0xb6>
 801a850:	3c57      	subs	r4, #87	@ 0x57
 801a852:	e7e1      	b.n	801a818 <_strtoul_l.isra.0+0x74>
 801a854:	f04f 36ff 	mov.w	r6, #4294967295
 801a858:	e7eb      	b.n	801a832 <_strtoul_l.isra.0+0x8e>
 801a85a:	1c73      	adds	r3, r6, #1
 801a85c:	d106      	bne.n	801a86c <_strtoul_l.isra.0+0xc8>
 801a85e:	2322      	movs	r3, #34	@ 0x22
 801a860:	f8ce 3000 	str.w	r3, [lr]
 801a864:	4630      	mov	r0, r6
 801a866:	b932      	cbnz	r2, 801a876 <_strtoul_l.isra.0+0xd2>
 801a868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a86c:	b107      	cbz	r7, 801a870 <_strtoul_l.isra.0+0xcc>
 801a86e:	4240      	negs	r0, r0
 801a870:	2a00      	cmp	r2, #0
 801a872:	d0f9      	beq.n	801a868 <_strtoul_l.isra.0+0xc4>
 801a874:	b106      	cbz	r6, 801a878 <_strtoul_l.isra.0+0xd4>
 801a876:	1e69      	subs	r1, r5, #1
 801a878:	6011      	str	r1, [r2, #0]
 801a87a:	e7f5      	b.n	801a868 <_strtoul_l.isra.0+0xc4>
 801a87c:	0801e876 	.word	0x0801e876

0801a880 <_strtoul_r>:
 801a880:	f7ff bf90 	b.w	801a7a4 <_strtoul_l.isra.0>

0801a884 <strtoul>:
 801a884:	4613      	mov	r3, r2
 801a886:	460a      	mov	r2, r1
 801a888:	4601      	mov	r1, r0
 801a88a:	4802      	ldr	r0, [pc, #8]	@ (801a894 <strtoul+0x10>)
 801a88c:	6800      	ldr	r0, [r0, #0]
 801a88e:	f7ff bf89 	b.w	801a7a4 <_strtoul_l.isra.0>
 801a892:	bf00      	nop
 801a894:	2400004c 	.word	0x2400004c

0801a898 <__sfputc_r>:
 801a898:	6893      	ldr	r3, [r2, #8]
 801a89a:	3b01      	subs	r3, #1
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	b410      	push	{r4}
 801a8a0:	6093      	str	r3, [r2, #8]
 801a8a2:	da08      	bge.n	801a8b6 <__sfputc_r+0x1e>
 801a8a4:	6994      	ldr	r4, [r2, #24]
 801a8a6:	42a3      	cmp	r3, r4
 801a8a8:	db01      	blt.n	801a8ae <__sfputc_r+0x16>
 801a8aa:	290a      	cmp	r1, #10
 801a8ac:	d103      	bne.n	801a8b6 <__sfputc_r+0x1e>
 801a8ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a8b2:	f7fe beea 	b.w	801968a <__swbuf_r>
 801a8b6:	6813      	ldr	r3, [r2, #0]
 801a8b8:	1c58      	adds	r0, r3, #1
 801a8ba:	6010      	str	r0, [r2, #0]
 801a8bc:	7019      	strb	r1, [r3, #0]
 801a8be:	4608      	mov	r0, r1
 801a8c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a8c4:	4770      	bx	lr

0801a8c6 <__sfputs_r>:
 801a8c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8c8:	4606      	mov	r6, r0
 801a8ca:	460f      	mov	r7, r1
 801a8cc:	4614      	mov	r4, r2
 801a8ce:	18d5      	adds	r5, r2, r3
 801a8d0:	42ac      	cmp	r4, r5
 801a8d2:	d101      	bne.n	801a8d8 <__sfputs_r+0x12>
 801a8d4:	2000      	movs	r0, #0
 801a8d6:	e007      	b.n	801a8e8 <__sfputs_r+0x22>
 801a8d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a8dc:	463a      	mov	r2, r7
 801a8de:	4630      	mov	r0, r6
 801a8e0:	f7ff ffda 	bl	801a898 <__sfputc_r>
 801a8e4:	1c43      	adds	r3, r0, #1
 801a8e6:	d1f3      	bne.n	801a8d0 <__sfputs_r+0xa>
 801a8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a8ec <_vfiprintf_r>:
 801a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8f0:	460d      	mov	r5, r1
 801a8f2:	b09d      	sub	sp, #116	@ 0x74
 801a8f4:	4614      	mov	r4, r2
 801a8f6:	4698      	mov	r8, r3
 801a8f8:	4606      	mov	r6, r0
 801a8fa:	b118      	cbz	r0, 801a904 <_vfiprintf_r+0x18>
 801a8fc:	6a03      	ldr	r3, [r0, #32]
 801a8fe:	b90b      	cbnz	r3, 801a904 <_vfiprintf_r+0x18>
 801a900:	f7fe fe24 	bl	801954c <__sinit>
 801a904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a906:	07d9      	lsls	r1, r3, #31
 801a908:	d405      	bmi.n	801a916 <_vfiprintf_r+0x2a>
 801a90a:	89ab      	ldrh	r3, [r5, #12]
 801a90c:	059a      	lsls	r2, r3, #22
 801a90e:	d402      	bmi.n	801a916 <_vfiprintf_r+0x2a>
 801a910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a912:	f7ff fe91 	bl	801a638 <__retarget_lock_acquire_recursive>
 801a916:	89ab      	ldrh	r3, [r5, #12]
 801a918:	071b      	lsls	r3, r3, #28
 801a91a:	d501      	bpl.n	801a920 <_vfiprintf_r+0x34>
 801a91c:	692b      	ldr	r3, [r5, #16]
 801a91e:	b99b      	cbnz	r3, 801a948 <_vfiprintf_r+0x5c>
 801a920:	4629      	mov	r1, r5
 801a922:	4630      	mov	r0, r6
 801a924:	f7fe fef0 	bl	8019708 <__swsetup_r>
 801a928:	b170      	cbz	r0, 801a948 <_vfiprintf_r+0x5c>
 801a92a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a92c:	07dc      	lsls	r4, r3, #31
 801a92e:	d504      	bpl.n	801a93a <_vfiprintf_r+0x4e>
 801a930:	f04f 30ff 	mov.w	r0, #4294967295
 801a934:	b01d      	add	sp, #116	@ 0x74
 801a936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a93a:	89ab      	ldrh	r3, [r5, #12]
 801a93c:	0598      	lsls	r0, r3, #22
 801a93e:	d4f7      	bmi.n	801a930 <_vfiprintf_r+0x44>
 801a940:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a942:	f7ff fe7b 	bl	801a63c <__retarget_lock_release_recursive>
 801a946:	e7f3      	b.n	801a930 <_vfiprintf_r+0x44>
 801a948:	2300      	movs	r3, #0
 801a94a:	9309      	str	r3, [sp, #36]	@ 0x24
 801a94c:	2320      	movs	r3, #32
 801a94e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a952:	f8cd 800c 	str.w	r8, [sp, #12]
 801a956:	2330      	movs	r3, #48	@ 0x30
 801a958:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ab08 <_vfiprintf_r+0x21c>
 801a95c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a960:	f04f 0901 	mov.w	r9, #1
 801a964:	4623      	mov	r3, r4
 801a966:	469a      	mov	sl, r3
 801a968:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a96c:	b10a      	cbz	r2, 801a972 <_vfiprintf_r+0x86>
 801a96e:	2a25      	cmp	r2, #37	@ 0x25
 801a970:	d1f9      	bne.n	801a966 <_vfiprintf_r+0x7a>
 801a972:	ebba 0b04 	subs.w	fp, sl, r4
 801a976:	d00b      	beq.n	801a990 <_vfiprintf_r+0xa4>
 801a978:	465b      	mov	r3, fp
 801a97a:	4622      	mov	r2, r4
 801a97c:	4629      	mov	r1, r5
 801a97e:	4630      	mov	r0, r6
 801a980:	f7ff ffa1 	bl	801a8c6 <__sfputs_r>
 801a984:	3001      	adds	r0, #1
 801a986:	f000 80a7 	beq.w	801aad8 <_vfiprintf_r+0x1ec>
 801a98a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a98c:	445a      	add	r2, fp
 801a98e:	9209      	str	r2, [sp, #36]	@ 0x24
 801a990:	f89a 3000 	ldrb.w	r3, [sl]
 801a994:	2b00      	cmp	r3, #0
 801a996:	f000 809f 	beq.w	801aad8 <_vfiprintf_r+0x1ec>
 801a99a:	2300      	movs	r3, #0
 801a99c:	f04f 32ff 	mov.w	r2, #4294967295
 801a9a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a9a4:	f10a 0a01 	add.w	sl, sl, #1
 801a9a8:	9304      	str	r3, [sp, #16]
 801a9aa:	9307      	str	r3, [sp, #28]
 801a9ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a9b0:	931a      	str	r3, [sp, #104]	@ 0x68
 801a9b2:	4654      	mov	r4, sl
 801a9b4:	2205      	movs	r2, #5
 801a9b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9ba:	4853      	ldr	r0, [pc, #332]	@ (801ab08 <_vfiprintf_r+0x21c>)
 801a9bc:	f7e5 fcc0 	bl	8000340 <memchr>
 801a9c0:	9a04      	ldr	r2, [sp, #16]
 801a9c2:	b9d8      	cbnz	r0, 801a9fc <_vfiprintf_r+0x110>
 801a9c4:	06d1      	lsls	r1, r2, #27
 801a9c6:	bf44      	itt	mi
 801a9c8:	2320      	movmi	r3, #32
 801a9ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a9ce:	0713      	lsls	r3, r2, #28
 801a9d0:	bf44      	itt	mi
 801a9d2:	232b      	movmi	r3, #43	@ 0x2b
 801a9d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a9d8:	f89a 3000 	ldrb.w	r3, [sl]
 801a9dc:	2b2a      	cmp	r3, #42	@ 0x2a
 801a9de:	d015      	beq.n	801aa0c <_vfiprintf_r+0x120>
 801a9e0:	9a07      	ldr	r2, [sp, #28]
 801a9e2:	4654      	mov	r4, sl
 801a9e4:	2000      	movs	r0, #0
 801a9e6:	f04f 0c0a 	mov.w	ip, #10
 801a9ea:	4621      	mov	r1, r4
 801a9ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a9f0:	3b30      	subs	r3, #48	@ 0x30
 801a9f2:	2b09      	cmp	r3, #9
 801a9f4:	d94b      	bls.n	801aa8e <_vfiprintf_r+0x1a2>
 801a9f6:	b1b0      	cbz	r0, 801aa26 <_vfiprintf_r+0x13a>
 801a9f8:	9207      	str	r2, [sp, #28]
 801a9fa:	e014      	b.n	801aa26 <_vfiprintf_r+0x13a>
 801a9fc:	eba0 0308 	sub.w	r3, r0, r8
 801aa00:	fa09 f303 	lsl.w	r3, r9, r3
 801aa04:	4313      	orrs	r3, r2
 801aa06:	9304      	str	r3, [sp, #16]
 801aa08:	46a2      	mov	sl, r4
 801aa0a:	e7d2      	b.n	801a9b2 <_vfiprintf_r+0xc6>
 801aa0c:	9b03      	ldr	r3, [sp, #12]
 801aa0e:	1d19      	adds	r1, r3, #4
 801aa10:	681b      	ldr	r3, [r3, #0]
 801aa12:	9103      	str	r1, [sp, #12]
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	bfbb      	ittet	lt
 801aa18:	425b      	neglt	r3, r3
 801aa1a:	f042 0202 	orrlt.w	r2, r2, #2
 801aa1e:	9307      	strge	r3, [sp, #28]
 801aa20:	9307      	strlt	r3, [sp, #28]
 801aa22:	bfb8      	it	lt
 801aa24:	9204      	strlt	r2, [sp, #16]
 801aa26:	7823      	ldrb	r3, [r4, #0]
 801aa28:	2b2e      	cmp	r3, #46	@ 0x2e
 801aa2a:	d10a      	bne.n	801aa42 <_vfiprintf_r+0x156>
 801aa2c:	7863      	ldrb	r3, [r4, #1]
 801aa2e:	2b2a      	cmp	r3, #42	@ 0x2a
 801aa30:	d132      	bne.n	801aa98 <_vfiprintf_r+0x1ac>
 801aa32:	9b03      	ldr	r3, [sp, #12]
 801aa34:	1d1a      	adds	r2, r3, #4
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	9203      	str	r2, [sp, #12]
 801aa3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801aa3e:	3402      	adds	r4, #2
 801aa40:	9305      	str	r3, [sp, #20]
 801aa42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ab18 <_vfiprintf_r+0x22c>
 801aa46:	7821      	ldrb	r1, [r4, #0]
 801aa48:	2203      	movs	r2, #3
 801aa4a:	4650      	mov	r0, sl
 801aa4c:	f7e5 fc78 	bl	8000340 <memchr>
 801aa50:	b138      	cbz	r0, 801aa62 <_vfiprintf_r+0x176>
 801aa52:	9b04      	ldr	r3, [sp, #16]
 801aa54:	eba0 000a 	sub.w	r0, r0, sl
 801aa58:	2240      	movs	r2, #64	@ 0x40
 801aa5a:	4082      	lsls	r2, r0
 801aa5c:	4313      	orrs	r3, r2
 801aa5e:	3401      	adds	r4, #1
 801aa60:	9304      	str	r3, [sp, #16]
 801aa62:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa66:	4829      	ldr	r0, [pc, #164]	@ (801ab0c <_vfiprintf_r+0x220>)
 801aa68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801aa6c:	2206      	movs	r2, #6
 801aa6e:	f7e5 fc67 	bl	8000340 <memchr>
 801aa72:	2800      	cmp	r0, #0
 801aa74:	d03f      	beq.n	801aaf6 <_vfiprintf_r+0x20a>
 801aa76:	4b26      	ldr	r3, [pc, #152]	@ (801ab10 <_vfiprintf_r+0x224>)
 801aa78:	bb1b      	cbnz	r3, 801aac2 <_vfiprintf_r+0x1d6>
 801aa7a:	9b03      	ldr	r3, [sp, #12]
 801aa7c:	3307      	adds	r3, #7
 801aa7e:	f023 0307 	bic.w	r3, r3, #7
 801aa82:	3308      	adds	r3, #8
 801aa84:	9303      	str	r3, [sp, #12]
 801aa86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa88:	443b      	add	r3, r7
 801aa8a:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa8c:	e76a      	b.n	801a964 <_vfiprintf_r+0x78>
 801aa8e:	fb0c 3202 	mla	r2, ip, r2, r3
 801aa92:	460c      	mov	r4, r1
 801aa94:	2001      	movs	r0, #1
 801aa96:	e7a8      	b.n	801a9ea <_vfiprintf_r+0xfe>
 801aa98:	2300      	movs	r3, #0
 801aa9a:	3401      	adds	r4, #1
 801aa9c:	9305      	str	r3, [sp, #20]
 801aa9e:	4619      	mov	r1, r3
 801aaa0:	f04f 0c0a 	mov.w	ip, #10
 801aaa4:	4620      	mov	r0, r4
 801aaa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aaaa:	3a30      	subs	r2, #48	@ 0x30
 801aaac:	2a09      	cmp	r2, #9
 801aaae:	d903      	bls.n	801aab8 <_vfiprintf_r+0x1cc>
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d0c6      	beq.n	801aa42 <_vfiprintf_r+0x156>
 801aab4:	9105      	str	r1, [sp, #20]
 801aab6:	e7c4      	b.n	801aa42 <_vfiprintf_r+0x156>
 801aab8:	fb0c 2101 	mla	r1, ip, r1, r2
 801aabc:	4604      	mov	r4, r0
 801aabe:	2301      	movs	r3, #1
 801aac0:	e7f0      	b.n	801aaa4 <_vfiprintf_r+0x1b8>
 801aac2:	ab03      	add	r3, sp, #12
 801aac4:	9300      	str	r3, [sp, #0]
 801aac6:	462a      	mov	r2, r5
 801aac8:	4b12      	ldr	r3, [pc, #72]	@ (801ab14 <_vfiprintf_r+0x228>)
 801aaca:	a904      	add	r1, sp, #16
 801aacc:	4630      	mov	r0, r6
 801aace:	f3af 8000 	nop.w
 801aad2:	4607      	mov	r7, r0
 801aad4:	1c78      	adds	r0, r7, #1
 801aad6:	d1d6      	bne.n	801aa86 <_vfiprintf_r+0x19a>
 801aad8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801aada:	07d9      	lsls	r1, r3, #31
 801aadc:	d405      	bmi.n	801aaea <_vfiprintf_r+0x1fe>
 801aade:	89ab      	ldrh	r3, [r5, #12]
 801aae0:	059a      	lsls	r2, r3, #22
 801aae2:	d402      	bmi.n	801aaea <_vfiprintf_r+0x1fe>
 801aae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801aae6:	f7ff fda9 	bl	801a63c <__retarget_lock_release_recursive>
 801aaea:	89ab      	ldrh	r3, [r5, #12]
 801aaec:	065b      	lsls	r3, r3, #25
 801aaee:	f53f af1f 	bmi.w	801a930 <_vfiprintf_r+0x44>
 801aaf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aaf4:	e71e      	b.n	801a934 <_vfiprintf_r+0x48>
 801aaf6:	ab03      	add	r3, sp, #12
 801aaf8:	9300      	str	r3, [sp, #0]
 801aafa:	462a      	mov	r2, r5
 801aafc:	4b05      	ldr	r3, [pc, #20]	@ (801ab14 <_vfiprintf_r+0x228>)
 801aafe:	a904      	add	r1, sp, #16
 801ab00:	4630      	mov	r0, r6
 801ab02:	f000 f879 	bl	801abf8 <_printf_i>
 801ab06:	e7e4      	b.n	801aad2 <_vfiprintf_r+0x1e6>
 801ab08:	0801e827 	.word	0x0801e827
 801ab0c:	0801e831 	.word	0x0801e831
 801ab10:	00000000 	.word	0x00000000
 801ab14:	0801a8c7 	.word	0x0801a8c7
 801ab18:	0801e82d 	.word	0x0801e82d

0801ab1c <_printf_common>:
 801ab1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab20:	4616      	mov	r6, r2
 801ab22:	4698      	mov	r8, r3
 801ab24:	688a      	ldr	r2, [r1, #8]
 801ab26:	690b      	ldr	r3, [r1, #16]
 801ab28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ab2c:	4293      	cmp	r3, r2
 801ab2e:	bfb8      	it	lt
 801ab30:	4613      	movlt	r3, r2
 801ab32:	6033      	str	r3, [r6, #0]
 801ab34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ab38:	4607      	mov	r7, r0
 801ab3a:	460c      	mov	r4, r1
 801ab3c:	b10a      	cbz	r2, 801ab42 <_printf_common+0x26>
 801ab3e:	3301      	adds	r3, #1
 801ab40:	6033      	str	r3, [r6, #0]
 801ab42:	6823      	ldr	r3, [r4, #0]
 801ab44:	0699      	lsls	r1, r3, #26
 801ab46:	bf42      	ittt	mi
 801ab48:	6833      	ldrmi	r3, [r6, #0]
 801ab4a:	3302      	addmi	r3, #2
 801ab4c:	6033      	strmi	r3, [r6, #0]
 801ab4e:	6825      	ldr	r5, [r4, #0]
 801ab50:	f015 0506 	ands.w	r5, r5, #6
 801ab54:	d106      	bne.n	801ab64 <_printf_common+0x48>
 801ab56:	f104 0a19 	add.w	sl, r4, #25
 801ab5a:	68e3      	ldr	r3, [r4, #12]
 801ab5c:	6832      	ldr	r2, [r6, #0]
 801ab5e:	1a9b      	subs	r3, r3, r2
 801ab60:	42ab      	cmp	r3, r5
 801ab62:	dc26      	bgt.n	801abb2 <_printf_common+0x96>
 801ab64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ab68:	6822      	ldr	r2, [r4, #0]
 801ab6a:	3b00      	subs	r3, #0
 801ab6c:	bf18      	it	ne
 801ab6e:	2301      	movne	r3, #1
 801ab70:	0692      	lsls	r2, r2, #26
 801ab72:	d42b      	bmi.n	801abcc <_printf_common+0xb0>
 801ab74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ab78:	4641      	mov	r1, r8
 801ab7a:	4638      	mov	r0, r7
 801ab7c:	47c8      	blx	r9
 801ab7e:	3001      	adds	r0, #1
 801ab80:	d01e      	beq.n	801abc0 <_printf_common+0xa4>
 801ab82:	6823      	ldr	r3, [r4, #0]
 801ab84:	6922      	ldr	r2, [r4, #16]
 801ab86:	f003 0306 	and.w	r3, r3, #6
 801ab8a:	2b04      	cmp	r3, #4
 801ab8c:	bf02      	ittt	eq
 801ab8e:	68e5      	ldreq	r5, [r4, #12]
 801ab90:	6833      	ldreq	r3, [r6, #0]
 801ab92:	1aed      	subeq	r5, r5, r3
 801ab94:	68a3      	ldr	r3, [r4, #8]
 801ab96:	bf0c      	ite	eq
 801ab98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ab9c:	2500      	movne	r5, #0
 801ab9e:	4293      	cmp	r3, r2
 801aba0:	bfc4      	itt	gt
 801aba2:	1a9b      	subgt	r3, r3, r2
 801aba4:	18ed      	addgt	r5, r5, r3
 801aba6:	2600      	movs	r6, #0
 801aba8:	341a      	adds	r4, #26
 801abaa:	42b5      	cmp	r5, r6
 801abac:	d11a      	bne.n	801abe4 <_printf_common+0xc8>
 801abae:	2000      	movs	r0, #0
 801abb0:	e008      	b.n	801abc4 <_printf_common+0xa8>
 801abb2:	2301      	movs	r3, #1
 801abb4:	4652      	mov	r2, sl
 801abb6:	4641      	mov	r1, r8
 801abb8:	4638      	mov	r0, r7
 801abba:	47c8      	blx	r9
 801abbc:	3001      	adds	r0, #1
 801abbe:	d103      	bne.n	801abc8 <_printf_common+0xac>
 801abc0:	f04f 30ff 	mov.w	r0, #4294967295
 801abc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abc8:	3501      	adds	r5, #1
 801abca:	e7c6      	b.n	801ab5a <_printf_common+0x3e>
 801abcc:	18e1      	adds	r1, r4, r3
 801abce:	1c5a      	adds	r2, r3, #1
 801abd0:	2030      	movs	r0, #48	@ 0x30
 801abd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801abd6:	4422      	add	r2, r4
 801abd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801abdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801abe0:	3302      	adds	r3, #2
 801abe2:	e7c7      	b.n	801ab74 <_printf_common+0x58>
 801abe4:	2301      	movs	r3, #1
 801abe6:	4622      	mov	r2, r4
 801abe8:	4641      	mov	r1, r8
 801abea:	4638      	mov	r0, r7
 801abec:	47c8      	blx	r9
 801abee:	3001      	adds	r0, #1
 801abf0:	d0e6      	beq.n	801abc0 <_printf_common+0xa4>
 801abf2:	3601      	adds	r6, #1
 801abf4:	e7d9      	b.n	801abaa <_printf_common+0x8e>
	...

0801abf8 <_printf_i>:
 801abf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801abfc:	7e0f      	ldrb	r7, [r1, #24]
 801abfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ac00:	2f78      	cmp	r7, #120	@ 0x78
 801ac02:	4691      	mov	r9, r2
 801ac04:	4680      	mov	r8, r0
 801ac06:	460c      	mov	r4, r1
 801ac08:	469a      	mov	sl, r3
 801ac0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ac0e:	d807      	bhi.n	801ac20 <_printf_i+0x28>
 801ac10:	2f62      	cmp	r7, #98	@ 0x62
 801ac12:	d80a      	bhi.n	801ac2a <_printf_i+0x32>
 801ac14:	2f00      	cmp	r7, #0
 801ac16:	f000 80d1 	beq.w	801adbc <_printf_i+0x1c4>
 801ac1a:	2f58      	cmp	r7, #88	@ 0x58
 801ac1c:	f000 80b8 	beq.w	801ad90 <_printf_i+0x198>
 801ac20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ac24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ac28:	e03a      	b.n	801aca0 <_printf_i+0xa8>
 801ac2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ac2e:	2b15      	cmp	r3, #21
 801ac30:	d8f6      	bhi.n	801ac20 <_printf_i+0x28>
 801ac32:	a101      	add	r1, pc, #4	@ (adr r1, 801ac38 <_printf_i+0x40>)
 801ac34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ac38:	0801ac91 	.word	0x0801ac91
 801ac3c:	0801aca5 	.word	0x0801aca5
 801ac40:	0801ac21 	.word	0x0801ac21
 801ac44:	0801ac21 	.word	0x0801ac21
 801ac48:	0801ac21 	.word	0x0801ac21
 801ac4c:	0801ac21 	.word	0x0801ac21
 801ac50:	0801aca5 	.word	0x0801aca5
 801ac54:	0801ac21 	.word	0x0801ac21
 801ac58:	0801ac21 	.word	0x0801ac21
 801ac5c:	0801ac21 	.word	0x0801ac21
 801ac60:	0801ac21 	.word	0x0801ac21
 801ac64:	0801ada3 	.word	0x0801ada3
 801ac68:	0801accf 	.word	0x0801accf
 801ac6c:	0801ad5d 	.word	0x0801ad5d
 801ac70:	0801ac21 	.word	0x0801ac21
 801ac74:	0801ac21 	.word	0x0801ac21
 801ac78:	0801adc5 	.word	0x0801adc5
 801ac7c:	0801ac21 	.word	0x0801ac21
 801ac80:	0801accf 	.word	0x0801accf
 801ac84:	0801ac21 	.word	0x0801ac21
 801ac88:	0801ac21 	.word	0x0801ac21
 801ac8c:	0801ad65 	.word	0x0801ad65
 801ac90:	6833      	ldr	r3, [r6, #0]
 801ac92:	1d1a      	adds	r2, r3, #4
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	6032      	str	r2, [r6, #0]
 801ac98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ac9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801aca0:	2301      	movs	r3, #1
 801aca2:	e09c      	b.n	801adde <_printf_i+0x1e6>
 801aca4:	6833      	ldr	r3, [r6, #0]
 801aca6:	6820      	ldr	r0, [r4, #0]
 801aca8:	1d19      	adds	r1, r3, #4
 801acaa:	6031      	str	r1, [r6, #0]
 801acac:	0606      	lsls	r6, r0, #24
 801acae:	d501      	bpl.n	801acb4 <_printf_i+0xbc>
 801acb0:	681d      	ldr	r5, [r3, #0]
 801acb2:	e003      	b.n	801acbc <_printf_i+0xc4>
 801acb4:	0645      	lsls	r5, r0, #25
 801acb6:	d5fb      	bpl.n	801acb0 <_printf_i+0xb8>
 801acb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801acbc:	2d00      	cmp	r5, #0
 801acbe:	da03      	bge.n	801acc8 <_printf_i+0xd0>
 801acc0:	232d      	movs	r3, #45	@ 0x2d
 801acc2:	426d      	negs	r5, r5
 801acc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801acc8:	4858      	ldr	r0, [pc, #352]	@ (801ae2c <_printf_i+0x234>)
 801acca:	230a      	movs	r3, #10
 801accc:	e011      	b.n	801acf2 <_printf_i+0xfa>
 801acce:	6821      	ldr	r1, [r4, #0]
 801acd0:	6833      	ldr	r3, [r6, #0]
 801acd2:	0608      	lsls	r0, r1, #24
 801acd4:	f853 5b04 	ldr.w	r5, [r3], #4
 801acd8:	d402      	bmi.n	801ace0 <_printf_i+0xe8>
 801acda:	0649      	lsls	r1, r1, #25
 801acdc:	bf48      	it	mi
 801acde:	b2ad      	uxthmi	r5, r5
 801ace0:	2f6f      	cmp	r7, #111	@ 0x6f
 801ace2:	4852      	ldr	r0, [pc, #328]	@ (801ae2c <_printf_i+0x234>)
 801ace4:	6033      	str	r3, [r6, #0]
 801ace6:	bf14      	ite	ne
 801ace8:	230a      	movne	r3, #10
 801acea:	2308      	moveq	r3, #8
 801acec:	2100      	movs	r1, #0
 801acee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801acf2:	6866      	ldr	r6, [r4, #4]
 801acf4:	60a6      	str	r6, [r4, #8]
 801acf6:	2e00      	cmp	r6, #0
 801acf8:	db05      	blt.n	801ad06 <_printf_i+0x10e>
 801acfa:	6821      	ldr	r1, [r4, #0]
 801acfc:	432e      	orrs	r6, r5
 801acfe:	f021 0104 	bic.w	r1, r1, #4
 801ad02:	6021      	str	r1, [r4, #0]
 801ad04:	d04b      	beq.n	801ad9e <_printf_i+0x1a6>
 801ad06:	4616      	mov	r6, r2
 801ad08:	fbb5 f1f3 	udiv	r1, r5, r3
 801ad0c:	fb03 5711 	mls	r7, r3, r1, r5
 801ad10:	5dc7      	ldrb	r7, [r0, r7]
 801ad12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ad16:	462f      	mov	r7, r5
 801ad18:	42bb      	cmp	r3, r7
 801ad1a:	460d      	mov	r5, r1
 801ad1c:	d9f4      	bls.n	801ad08 <_printf_i+0x110>
 801ad1e:	2b08      	cmp	r3, #8
 801ad20:	d10b      	bne.n	801ad3a <_printf_i+0x142>
 801ad22:	6823      	ldr	r3, [r4, #0]
 801ad24:	07df      	lsls	r7, r3, #31
 801ad26:	d508      	bpl.n	801ad3a <_printf_i+0x142>
 801ad28:	6923      	ldr	r3, [r4, #16]
 801ad2a:	6861      	ldr	r1, [r4, #4]
 801ad2c:	4299      	cmp	r1, r3
 801ad2e:	bfde      	ittt	le
 801ad30:	2330      	movle	r3, #48	@ 0x30
 801ad32:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ad36:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ad3a:	1b92      	subs	r2, r2, r6
 801ad3c:	6122      	str	r2, [r4, #16]
 801ad3e:	f8cd a000 	str.w	sl, [sp]
 801ad42:	464b      	mov	r3, r9
 801ad44:	aa03      	add	r2, sp, #12
 801ad46:	4621      	mov	r1, r4
 801ad48:	4640      	mov	r0, r8
 801ad4a:	f7ff fee7 	bl	801ab1c <_printf_common>
 801ad4e:	3001      	adds	r0, #1
 801ad50:	d14a      	bne.n	801ade8 <_printf_i+0x1f0>
 801ad52:	f04f 30ff 	mov.w	r0, #4294967295
 801ad56:	b004      	add	sp, #16
 801ad58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad5c:	6823      	ldr	r3, [r4, #0]
 801ad5e:	f043 0320 	orr.w	r3, r3, #32
 801ad62:	6023      	str	r3, [r4, #0]
 801ad64:	4832      	ldr	r0, [pc, #200]	@ (801ae30 <_printf_i+0x238>)
 801ad66:	2778      	movs	r7, #120	@ 0x78
 801ad68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ad6c:	6823      	ldr	r3, [r4, #0]
 801ad6e:	6831      	ldr	r1, [r6, #0]
 801ad70:	061f      	lsls	r7, r3, #24
 801ad72:	f851 5b04 	ldr.w	r5, [r1], #4
 801ad76:	d402      	bmi.n	801ad7e <_printf_i+0x186>
 801ad78:	065f      	lsls	r7, r3, #25
 801ad7a:	bf48      	it	mi
 801ad7c:	b2ad      	uxthmi	r5, r5
 801ad7e:	6031      	str	r1, [r6, #0]
 801ad80:	07d9      	lsls	r1, r3, #31
 801ad82:	bf44      	itt	mi
 801ad84:	f043 0320 	orrmi.w	r3, r3, #32
 801ad88:	6023      	strmi	r3, [r4, #0]
 801ad8a:	b11d      	cbz	r5, 801ad94 <_printf_i+0x19c>
 801ad8c:	2310      	movs	r3, #16
 801ad8e:	e7ad      	b.n	801acec <_printf_i+0xf4>
 801ad90:	4826      	ldr	r0, [pc, #152]	@ (801ae2c <_printf_i+0x234>)
 801ad92:	e7e9      	b.n	801ad68 <_printf_i+0x170>
 801ad94:	6823      	ldr	r3, [r4, #0]
 801ad96:	f023 0320 	bic.w	r3, r3, #32
 801ad9a:	6023      	str	r3, [r4, #0]
 801ad9c:	e7f6      	b.n	801ad8c <_printf_i+0x194>
 801ad9e:	4616      	mov	r6, r2
 801ada0:	e7bd      	b.n	801ad1e <_printf_i+0x126>
 801ada2:	6833      	ldr	r3, [r6, #0]
 801ada4:	6825      	ldr	r5, [r4, #0]
 801ada6:	6961      	ldr	r1, [r4, #20]
 801ada8:	1d18      	adds	r0, r3, #4
 801adaa:	6030      	str	r0, [r6, #0]
 801adac:	062e      	lsls	r6, r5, #24
 801adae:	681b      	ldr	r3, [r3, #0]
 801adb0:	d501      	bpl.n	801adb6 <_printf_i+0x1be>
 801adb2:	6019      	str	r1, [r3, #0]
 801adb4:	e002      	b.n	801adbc <_printf_i+0x1c4>
 801adb6:	0668      	lsls	r0, r5, #25
 801adb8:	d5fb      	bpl.n	801adb2 <_printf_i+0x1ba>
 801adba:	8019      	strh	r1, [r3, #0]
 801adbc:	2300      	movs	r3, #0
 801adbe:	6123      	str	r3, [r4, #16]
 801adc0:	4616      	mov	r6, r2
 801adc2:	e7bc      	b.n	801ad3e <_printf_i+0x146>
 801adc4:	6833      	ldr	r3, [r6, #0]
 801adc6:	1d1a      	adds	r2, r3, #4
 801adc8:	6032      	str	r2, [r6, #0]
 801adca:	681e      	ldr	r6, [r3, #0]
 801adcc:	6862      	ldr	r2, [r4, #4]
 801adce:	2100      	movs	r1, #0
 801add0:	4630      	mov	r0, r6
 801add2:	f7e5 fab5 	bl	8000340 <memchr>
 801add6:	b108      	cbz	r0, 801addc <_printf_i+0x1e4>
 801add8:	1b80      	subs	r0, r0, r6
 801adda:	6060      	str	r0, [r4, #4]
 801addc:	6863      	ldr	r3, [r4, #4]
 801adde:	6123      	str	r3, [r4, #16]
 801ade0:	2300      	movs	r3, #0
 801ade2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ade6:	e7aa      	b.n	801ad3e <_printf_i+0x146>
 801ade8:	6923      	ldr	r3, [r4, #16]
 801adea:	4632      	mov	r2, r6
 801adec:	4649      	mov	r1, r9
 801adee:	4640      	mov	r0, r8
 801adf0:	47d0      	blx	sl
 801adf2:	3001      	adds	r0, #1
 801adf4:	d0ad      	beq.n	801ad52 <_printf_i+0x15a>
 801adf6:	6823      	ldr	r3, [r4, #0]
 801adf8:	079b      	lsls	r3, r3, #30
 801adfa:	d413      	bmi.n	801ae24 <_printf_i+0x22c>
 801adfc:	68e0      	ldr	r0, [r4, #12]
 801adfe:	9b03      	ldr	r3, [sp, #12]
 801ae00:	4298      	cmp	r0, r3
 801ae02:	bfb8      	it	lt
 801ae04:	4618      	movlt	r0, r3
 801ae06:	e7a6      	b.n	801ad56 <_printf_i+0x15e>
 801ae08:	2301      	movs	r3, #1
 801ae0a:	4632      	mov	r2, r6
 801ae0c:	4649      	mov	r1, r9
 801ae0e:	4640      	mov	r0, r8
 801ae10:	47d0      	blx	sl
 801ae12:	3001      	adds	r0, #1
 801ae14:	d09d      	beq.n	801ad52 <_printf_i+0x15a>
 801ae16:	3501      	adds	r5, #1
 801ae18:	68e3      	ldr	r3, [r4, #12]
 801ae1a:	9903      	ldr	r1, [sp, #12]
 801ae1c:	1a5b      	subs	r3, r3, r1
 801ae1e:	42ab      	cmp	r3, r5
 801ae20:	dcf2      	bgt.n	801ae08 <_printf_i+0x210>
 801ae22:	e7eb      	b.n	801adfc <_printf_i+0x204>
 801ae24:	2500      	movs	r5, #0
 801ae26:	f104 0619 	add.w	r6, r4, #25
 801ae2a:	e7f5      	b.n	801ae18 <_printf_i+0x220>
 801ae2c:	0801e838 	.word	0x0801e838
 801ae30:	0801e849 	.word	0x0801e849

0801ae34 <__sflush_r>:
 801ae34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ae38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae3c:	0716      	lsls	r6, r2, #28
 801ae3e:	4605      	mov	r5, r0
 801ae40:	460c      	mov	r4, r1
 801ae42:	d454      	bmi.n	801aeee <__sflush_r+0xba>
 801ae44:	684b      	ldr	r3, [r1, #4]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	dc02      	bgt.n	801ae50 <__sflush_r+0x1c>
 801ae4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	dd48      	ble.n	801aee2 <__sflush_r+0xae>
 801ae50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ae52:	2e00      	cmp	r6, #0
 801ae54:	d045      	beq.n	801aee2 <__sflush_r+0xae>
 801ae56:	2300      	movs	r3, #0
 801ae58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ae5c:	682f      	ldr	r7, [r5, #0]
 801ae5e:	6a21      	ldr	r1, [r4, #32]
 801ae60:	602b      	str	r3, [r5, #0]
 801ae62:	d030      	beq.n	801aec6 <__sflush_r+0x92>
 801ae64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ae66:	89a3      	ldrh	r3, [r4, #12]
 801ae68:	0759      	lsls	r1, r3, #29
 801ae6a:	d505      	bpl.n	801ae78 <__sflush_r+0x44>
 801ae6c:	6863      	ldr	r3, [r4, #4]
 801ae6e:	1ad2      	subs	r2, r2, r3
 801ae70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ae72:	b10b      	cbz	r3, 801ae78 <__sflush_r+0x44>
 801ae74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ae76:	1ad2      	subs	r2, r2, r3
 801ae78:	2300      	movs	r3, #0
 801ae7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ae7c:	6a21      	ldr	r1, [r4, #32]
 801ae7e:	4628      	mov	r0, r5
 801ae80:	47b0      	blx	r6
 801ae82:	1c43      	adds	r3, r0, #1
 801ae84:	89a3      	ldrh	r3, [r4, #12]
 801ae86:	d106      	bne.n	801ae96 <__sflush_r+0x62>
 801ae88:	6829      	ldr	r1, [r5, #0]
 801ae8a:	291d      	cmp	r1, #29
 801ae8c:	d82b      	bhi.n	801aee6 <__sflush_r+0xb2>
 801ae8e:	4a2a      	ldr	r2, [pc, #168]	@ (801af38 <__sflush_r+0x104>)
 801ae90:	40ca      	lsrs	r2, r1
 801ae92:	07d6      	lsls	r6, r2, #31
 801ae94:	d527      	bpl.n	801aee6 <__sflush_r+0xb2>
 801ae96:	2200      	movs	r2, #0
 801ae98:	6062      	str	r2, [r4, #4]
 801ae9a:	04d9      	lsls	r1, r3, #19
 801ae9c:	6922      	ldr	r2, [r4, #16]
 801ae9e:	6022      	str	r2, [r4, #0]
 801aea0:	d504      	bpl.n	801aeac <__sflush_r+0x78>
 801aea2:	1c42      	adds	r2, r0, #1
 801aea4:	d101      	bne.n	801aeaa <__sflush_r+0x76>
 801aea6:	682b      	ldr	r3, [r5, #0]
 801aea8:	b903      	cbnz	r3, 801aeac <__sflush_r+0x78>
 801aeaa:	6560      	str	r0, [r4, #84]	@ 0x54
 801aeac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801aeae:	602f      	str	r7, [r5, #0]
 801aeb0:	b1b9      	cbz	r1, 801aee2 <__sflush_r+0xae>
 801aeb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801aeb6:	4299      	cmp	r1, r3
 801aeb8:	d002      	beq.n	801aec0 <__sflush_r+0x8c>
 801aeba:	4628      	mov	r0, r5
 801aebc:	f7ff fbe4 	bl	801a688 <_free_r>
 801aec0:	2300      	movs	r3, #0
 801aec2:	6363      	str	r3, [r4, #52]	@ 0x34
 801aec4:	e00d      	b.n	801aee2 <__sflush_r+0xae>
 801aec6:	2301      	movs	r3, #1
 801aec8:	4628      	mov	r0, r5
 801aeca:	47b0      	blx	r6
 801aecc:	4602      	mov	r2, r0
 801aece:	1c50      	adds	r0, r2, #1
 801aed0:	d1c9      	bne.n	801ae66 <__sflush_r+0x32>
 801aed2:	682b      	ldr	r3, [r5, #0]
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d0c6      	beq.n	801ae66 <__sflush_r+0x32>
 801aed8:	2b1d      	cmp	r3, #29
 801aeda:	d001      	beq.n	801aee0 <__sflush_r+0xac>
 801aedc:	2b16      	cmp	r3, #22
 801aede:	d11e      	bne.n	801af1e <__sflush_r+0xea>
 801aee0:	602f      	str	r7, [r5, #0]
 801aee2:	2000      	movs	r0, #0
 801aee4:	e022      	b.n	801af2c <__sflush_r+0xf8>
 801aee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aeea:	b21b      	sxth	r3, r3
 801aeec:	e01b      	b.n	801af26 <__sflush_r+0xf2>
 801aeee:	690f      	ldr	r7, [r1, #16]
 801aef0:	2f00      	cmp	r7, #0
 801aef2:	d0f6      	beq.n	801aee2 <__sflush_r+0xae>
 801aef4:	0793      	lsls	r3, r2, #30
 801aef6:	680e      	ldr	r6, [r1, #0]
 801aef8:	bf08      	it	eq
 801aefa:	694b      	ldreq	r3, [r1, #20]
 801aefc:	600f      	str	r7, [r1, #0]
 801aefe:	bf18      	it	ne
 801af00:	2300      	movne	r3, #0
 801af02:	eba6 0807 	sub.w	r8, r6, r7
 801af06:	608b      	str	r3, [r1, #8]
 801af08:	f1b8 0f00 	cmp.w	r8, #0
 801af0c:	dde9      	ble.n	801aee2 <__sflush_r+0xae>
 801af0e:	6a21      	ldr	r1, [r4, #32]
 801af10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801af12:	4643      	mov	r3, r8
 801af14:	463a      	mov	r2, r7
 801af16:	4628      	mov	r0, r5
 801af18:	47b0      	blx	r6
 801af1a:	2800      	cmp	r0, #0
 801af1c:	dc08      	bgt.n	801af30 <__sflush_r+0xfc>
 801af1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801af22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801af26:	81a3      	strh	r3, [r4, #12]
 801af28:	f04f 30ff 	mov.w	r0, #4294967295
 801af2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af30:	4407      	add	r7, r0
 801af32:	eba8 0800 	sub.w	r8, r8, r0
 801af36:	e7e7      	b.n	801af08 <__sflush_r+0xd4>
 801af38:	20400001 	.word	0x20400001

0801af3c <_fflush_r>:
 801af3c:	b538      	push	{r3, r4, r5, lr}
 801af3e:	690b      	ldr	r3, [r1, #16]
 801af40:	4605      	mov	r5, r0
 801af42:	460c      	mov	r4, r1
 801af44:	b913      	cbnz	r3, 801af4c <_fflush_r+0x10>
 801af46:	2500      	movs	r5, #0
 801af48:	4628      	mov	r0, r5
 801af4a:	bd38      	pop	{r3, r4, r5, pc}
 801af4c:	b118      	cbz	r0, 801af56 <_fflush_r+0x1a>
 801af4e:	6a03      	ldr	r3, [r0, #32]
 801af50:	b90b      	cbnz	r3, 801af56 <_fflush_r+0x1a>
 801af52:	f7fe fafb 	bl	801954c <__sinit>
 801af56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	d0f3      	beq.n	801af46 <_fflush_r+0xa>
 801af5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801af60:	07d0      	lsls	r0, r2, #31
 801af62:	d404      	bmi.n	801af6e <_fflush_r+0x32>
 801af64:	0599      	lsls	r1, r3, #22
 801af66:	d402      	bmi.n	801af6e <_fflush_r+0x32>
 801af68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801af6a:	f7ff fb65 	bl	801a638 <__retarget_lock_acquire_recursive>
 801af6e:	4628      	mov	r0, r5
 801af70:	4621      	mov	r1, r4
 801af72:	f7ff ff5f 	bl	801ae34 <__sflush_r>
 801af76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801af78:	07da      	lsls	r2, r3, #31
 801af7a:	4605      	mov	r5, r0
 801af7c:	d4e4      	bmi.n	801af48 <_fflush_r+0xc>
 801af7e:	89a3      	ldrh	r3, [r4, #12]
 801af80:	059b      	lsls	r3, r3, #22
 801af82:	d4e1      	bmi.n	801af48 <_fflush_r+0xc>
 801af84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801af86:	f7ff fb59 	bl	801a63c <__retarget_lock_release_recursive>
 801af8a:	e7dd      	b.n	801af48 <_fflush_r+0xc>

0801af8c <__swhatbuf_r>:
 801af8c:	b570      	push	{r4, r5, r6, lr}
 801af8e:	460c      	mov	r4, r1
 801af90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af94:	2900      	cmp	r1, #0
 801af96:	b096      	sub	sp, #88	@ 0x58
 801af98:	4615      	mov	r5, r2
 801af9a:	461e      	mov	r6, r3
 801af9c:	da0d      	bge.n	801afba <__swhatbuf_r+0x2e>
 801af9e:	89a3      	ldrh	r3, [r4, #12]
 801afa0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801afa4:	f04f 0100 	mov.w	r1, #0
 801afa8:	bf14      	ite	ne
 801afaa:	2340      	movne	r3, #64	@ 0x40
 801afac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801afb0:	2000      	movs	r0, #0
 801afb2:	6031      	str	r1, [r6, #0]
 801afb4:	602b      	str	r3, [r5, #0]
 801afb6:	b016      	add	sp, #88	@ 0x58
 801afb8:	bd70      	pop	{r4, r5, r6, pc}
 801afba:	466a      	mov	r2, sp
 801afbc:	f000 f8a8 	bl	801b110 <_fstat_r>
 801afc0:	2800      	cmp	r0, #0
 801afc2:	dbec      	blt.n	801af9e <__swhatbuf_r+0x12>
 801afc4:	9901      	ldr	r1, [sp, #4]
 801afc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801afca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801afce:	4259      	negs	r1, r3
 801afd0:	4159      	adcs	r1, r3
 801afd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801afd6:	e7eb      	b.n	801afb0 <__swhatbuf_r+0x24>

0801afd8 <__smakebuf_r>:
 801afd8:	898b      	ldrh	r3, [r1, #12]
 801afda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801afdc:	079d      	lsls	r5, r3, #30
 801afde:	4606      	mov	r6, r0
 801afe0:	460c      	mov	r4, r1
 801afe2:	d507      	bpl.n	801aff4 <__smakebuf_r+0x1c>
 801afe4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801afe8:	6023      	str	r3, [r4, #0]
 801afea:	6123      	str	r3, [r4, #16]
 801afec:	2301      	movs	r3, #1
 801afee:	6163      	str	r3, [r4, #20]
 801aff0:	b003      	add	sp, #12
 801aff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aff4:	ab01      	add	r3, sp, #4
 801aff6:	466a      	mov	r2, sp
 801aff8:	f7ff ffc8 	bl	801af8c <__swhatbuf_r>
 801affc:	9f00      	ldr	r7, [sp, #0]
 801affe:	4605      	mov	r5, r0
 801b000:	4639      	mov	r1, r7
 801b002:	4630      	mov	r0, r6
 801b004:	f7fe f8d0 	bl	80191a8 <_malloc_r>
 801b008:	b948      	cbnz	r0, 801b01e <__smakebuf_r+0x46>
 801b00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b00e:	059a      	lsls	r2, r3, #22
 801b010:	d4ee      	bmi.n	801aff0 <__smakebuf_r+0x18>
 801b012:	f023 0303 	bic.w	r3, r3, #3
 801b016:	f043 0302 	orr.w	r3, r3, #2
 801b01a:	81a3      	strh	r3, [r4, #12]
 801b01c:	e7e2      	b.n	801afe4 <__smakebuf_r+0xc>
 801b01e:	89a3      	ldrh	r3, [r4, #12]
 801b020:	6020      	str	r0, [r4, #0]
 801b022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b026:	81a3      	strh	r3, [r4, #12]
 801b028:	9b01      	ldr	r3, [sp, #4]
 801b02a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b02e:	b15b      	cbz	r3, 801b048 <__smakebuf_r+0x70>
 801b030:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b034:	4630      	mov	r0, r6
 801b036:	f000 f87d 	bl	801b134 <_isatty_r>
 801b03a:	b128      	cbz	r0, 801b048 <__smakebuf_r+0x70>
 801b03c:	89a3      	ldrh	r3, [r4, #12]
 801b03e:	f023 0303 	bic.w	r3, r3, #3
 801b042:	f043 0301 	orr.w	r3, r3, #1
 801b046:	81a3      	strh	r3, [r4, #12]
 801b048:	89a3      	ldrh	r3, [r4, #12]
 801b04a:	431d      	orrs	r5, r3
 801b04c:	81a5      	strh	r5, [r4, #12]
 801b04e:	e7cf      	b.n	801aff0 <__smakebuf_r+0x18>

0801b050 <siscanf>:
 801b050:	b40e      	push	{r1, r2, r3}
 801b052:	b570      	push	{r4, r5, r6, lr}
 801b054:	b09d      	sub	sp, #116	@ 0x74
 801b056:	ac21      	add	r4, sp, #132	@ 0x84
 801b058:	2500      	movs	r5, #0
 801b05a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801b05e:	f854 6b04 	ldr.w	r6, [r4], #4
 801b062:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b066:	951b      	str	r5, [sp, #108]	@ 0x6c
 801b068:	9002      	str	r0, [sp, #8]
 801b06a:	9006      	str	r0, [sp, #24]
 801b06c:	f7e5 f95a 	bl	8000324 <strlen>
 801b070:	4b0b      	ldr	r3, [pc, #44]	@ (801b0a0 <siscanf+0x50>)
 801b072:	9003      	str	r0, [sp, #12]
 801b074:	9007      	str	r0, [sp, #28]
 801b076:	480b      	ldr	r0, [pc, #44]	@ (801b0a4 <siscanf+0x54>)
 801b078:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b07a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b07e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b082:	4632      	mov	r2, r6
 801b084:	4623      	mov	r3, r4
 801b086:	a902      	add	r1, sp, #8
 801b088:	6800      	ldr	r0, [r0, #0]
 801b08a:	950f      	str	r5, [sp, #60]	@ 0x3c
 801b08c:	9514      	str	r5, [sp, #80]	@ 0x50
 801b08e:	9401      	str	r4, [sp, #4]
 801b090:	f000 f908 	bl	801b2a4 <__ssvfiscanf_r>
 801b094:	b01d      	add	sp, #116	@ 0x74
 801b096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b09a:	b003      	add	sp, #12
 801b09c:	4770      	bx	lr
 801b09e:	bf00      	nop
 801b0a0:	08019623 	.word	0x08019623
 801b0a4:	2400004c 	.word	0x2400004c

0801b0a8 <_raise_r>:
 801b0a8:	291f      	cmp	r1, #31
 801b0aa:	b538      	push	{r3, r4, r5, lr}
 801b0ac:	4605      	mov	r5, r0
 801b0ae:	460c      	mov	r4, r1
 801b0b0:	d904      	bls.n	801b0bc <_raise_r+0x14>
 801b0b2:	2316      	movs	r3, #22
 801b0b4:	6003      	str	r3, [r0, #0]
 801b0b6:	f04f 30ff 	mov.w	r0, #4294967295
 801b0ba:	bd38      	pop	{r3, r4, r5, pc}
 801b0bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b0be:	b112      	cbz	r2, 801b0c6 <_raise_r+0x1e>
 801b0c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b0c4:	b94b      	cbnz	r3, 801b0da <_raise_r+0x32>
 801b0c6:	4628      	mov	r0, r5
 801b0c8:	f000 f856 	bl	801b178 <_getpid_r>
 801b0cc:	4622      	mov	r2, r4
 801b0ce:	4601      	mov	r1, r0
 801b0d0:	4628      	mov	r0, r5
 801b0d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b0d6:	f000 b83d 	b.w	801b154 <_kill_r>
 801b0da:	2b01      	cmp	r3, #1
 801b0dc:	d00a      	beq.n	801b0f4 <_raise_r+0x4c>
 801b0de:	1c59      	adds	r1, r3, #1
 801b0e0:	d103      	bne.n	801b0ea <_raise_r+0x42>
 801b0e2:	2316      	movs	r3, #22
 801b0e4:	6003      	str	r3, [r0, #0]
 801b0e6:	2001      	movs	r0, #1
 801b0e8:	e7e7      	b.n	801b0ba <_raise_r+0x12>
 801b0ea:	2100      	movs	r1, #0
 801b0ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b0f0:	4620      	mov	r0, r4
 801b0f2:	4798      	blx	r3
 801b0f4:	2000      	movs	r0, #0
 801b0f6:	e7e0      	b.n	801b0ba <_raise_r+0x12>

0801b0f8 <raise>:
 801b0f8:	4b02      	ldr	r3, [pc, #8]	@ (801b104 <raise+0xc>)
 801b0fa:	4601      	mov	r1, r0
 801b0fc:	6818      	ldr	r0, [r3, #0]
 801b0fe:	f7ff bfd3 	b.w	801b0a8 <_raise_r>
 801b102:	bf00      	nop
 801b104:	2400004c 	.word	0x2400004c

0801b108 <__gettzinfo>:
 801b108:	4800      	ldr	r0, [pc, #0]	@ (801b10c <__gettzinfo+0x4>)
 801b10a:	4770      	bx	lr
 801b10c:	240000a0 	.word	0x240000a0

0801b110 <_fstat_r>:
 801b110:	b538      	push	{r3, r4, r5, lr}
 801b112:	4d07      	ldr	r5, [pc, #28]	@ (801b130 <_fstat_r+0x20>)
 801b114:	2300      	movs	r3, #0
 801b116:	4604      	mov	r4, r0
 801b118:	4608      	mov	r0, r1
 801b11a:	4611      	mov	r1, r2
 801b11c:	602b      	str	r3, [r5, #0]
 801b11e:	f7e7 f8f9 	bl	8002314 <_fstat>
 801b122:	1c43      	adds	r3, r0, #1
 801b124:	d102      	bne.n	801b12c <_fstat_r+0x1c>
 801b126:	682b      	ldr	r3, [r5, #0]
 801b128:	b103      	cbz	r3, 801b12c <_fstat_r+0x1c>
 801b12a:	6023      	str	r3, [r4, #0]
 801b12c:	bd38      	pop	{r3, r4, r5, pc}
 801b12e:	bf00      	nop
 801b130:	240084d4 	.word	0x240084d4

0801b134 <_isatty_r>:
 801b134:	b538      	push	{r3, r4, r5, lr}
 801b136:	4d06      	ldr	r5, [pc, #24]	@ (801b150 <_isatty_r+0x1c>)
 801b138:	2300      	movs	r3, #0
 801b13a:	4604      	mov	r4, r0
 801b13c:	4608      	mov	r0, r1
 801b13e:	602b      	str	r3, [r5, #0]
 801b140:	f7e7 f8f8 	bl	8002334 <_isatty>
 801b144:	1c43      	adds	r3, r0, #1
 801b146:	d102      	bne.n	801b14e <_isatty_r+0x1a>
 801b148:	682b      	ldr	r3, [r5, #0]
 801b14a:	b103      	cbz	r3, 801b14e <_isatty_r+0x1a>
 801b14c:	6023      	str	r3, [r4, #0]
 801b14e:	bd38      	pop	{r3, r4, r5, pc}
 801b150:	240084d4 	.word	0x240084d4

0801b154 <_kill_r>:
 801b154:	b538      	push	{r3, r4, r5, lr}
 801b156:	4d07      	ldr	r5, [pc, #28]	@ (801b174 <_kill_r+0x20>)
 801b158:	2300      	movs	r3, #0
 801b15a:	4604      	mov	r4, r0
 801b15c:	4608      	mov	r0, r1
 801b15e:	4611      	mov	r1, r2
 801b160:	602b      	str	r3, [r5, #0]
 801b162:	f7e7 f875 	bl	8002250 <_kill>
 801b166:	1c43      	adds	r3, r0, #1
 801b168:	d102      	bne.n	801b170 <_kill_r+0x1c>
 801b16a:	682b      	ldr	r3, [r5, #0]
 801b16c:	b103      	cbz	r3, 801b170 <_kill_r+0x1c>
 801b16e:	6023      	str	r3, [r4, #0]
 801b170:	bd38      	pop	{r3, r4, r5, pc}
 801b172:	bf00      	nop
 801b174:	240084d4 	.word	0x240084d4

0801b178 <_getpid_r>:
 801b178:	f7e7 b862 	b.w	8002240 <_getpid>

0801b17c <__env_lock>:
 801b17c:	4801      	ldr	r0, [pc, #4]	@ (801b184 <__env_lock+0x8>)
 801b17e:	f7ff ba5b 	b.w	801a638 <__retarget_lock_acquire_recursive>
 801b182:	bf00      	nop
 801b184:	240084d9 	.word	0x240084d9

0801b188 <__env_unlock>:
 801b188:	4801      	ldr	r0, [pc, #4]	@ (801b190 <__env_unlock+0x8>)
 801b18a:	f7ff ba57 	b.w	801a63c <__retarget_lock_release_recursive>
 801b18e:	bf00      	nop
 801b190:	240084d9 	.word	0x240084d9

0801b194 <_realloc_r>:
 801b194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b198:	4607      	mov	r7, r0
 801b19a:	4614      	mov	r4, r2
 801b19c:	460d      	mov	r5, r1
 801b19e:	b921      	cbnz	r1, 801b1aa <_realloc_r+0x16>
 801b1a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b1a4:	4611      	mov	r1, r2
 801b1a6:	f7fd bfff 	b.w	80191a8 <_malloc_r>
 801b1aa:	b92a      	cbnz	r2, 801b1b8 <_realloc_r+0x24>
 801b1ac:	f7ff fa6c 	bl	801a688 <_free_r>
 801b1b0:	4625      	mov	r5, r4
 801b1b2:	4628      	mov	r0, r5
 801b1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1b8:	f000 fbab 	bl	801b912 <_malloc_usable_size_r>
 801b1bc:	4284      	cmp	r4, r0
 801b1be:	4606      	mov	r6, r0
 801b1c0:	d802      	bhi.n	801b1c8 <_realloc_r+0x34>
 801b1c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b1c6:	d8f4      	bhi.n	801b1b2 <_realloc_r+0x1e>
 801b1c8:	4621      	mov	r1, r4
 801b1ca:	4638      	mov	r0, r7
 801b1cc:	f7fd ffec 	bl	80191a8 <_malloc_r>
 801b1d0:	4680      	mov	r8, r0
 801b1d2:	b908      	cbnz	r0, 801b1d8 <_realloc_r+0x44>
 801b1d4:	4645      	mov	r5, r8
 801b1d6:	e7ec      	b.n	801b1b2 <_realloc_r+0x1e>
 801b1d8:	42b4      	cmp	r4, r6
 801b1da:	4622      	mov	r2, r4
 801b1dc:	4629      	mov	r1, r5
 801b1de:	bf28      	it	cs
 801b1e0:	4632      	movcs	r2, r6
 801b1e2:	f7ff fa34 	bl	801a64e <memcpy>
 801b1e6:	4629      	mov	r1, r5
 801b1e8:	4638      	mov	r0, r7
 801b1ea:	f7ff fa4d 	bl	801a688 <_free_r>
 801b1ee:	e7f1      	b.n	801b1d4 <_realloc_r+0x40>

0801b1f0 <_sungetc_r>:
 801b1f0:	b538      	push	{r3, r4, r5, lr}
 801b1f2:	1c4b      	adds	r3, r1, #1
 801b1f4:	4614      	mov	r4, r2
 801b1f6:	d103      	bne.n	801b200 <_sungetc_r+0x10>
 801b1f8:	f04f 35ff 	mov.w	r5, #4294967295
 801b1fc:	4628      	mov	r0, r5
 801b1fe:	bd38      	pop	{r3, r4, r5, pc}
 801b200:	8993      	ldrh	r3, [r2, #12]
 801b202:	f023 0320 	bic.w	r3, r3, #32
 801b206:	8193      	strh	r3, [r2, #12]
 801b208:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b20a:	6852      	ldr	r2, [r2, #4]
 801b20c:	b2cd      	uxtb	r5, r1
 801b20e:	b18b      	cbz	r3, 801b234 <_sungetc_r+0x44>
 801b210:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801b212:	4293      	cmp	r3, r2
 801b214:	dd08      	ble.n	801b228 <_sungetc_r+0x38>
 801b216:	6823      	ldr	r3, [r4, #0]
 801b218:	1e5a      	subs	r2, r3, #1
 801b21a:	6022      	str	r2, [r4, #0]
 801b21c:	f803 5c01 	strb.w	r5, [r3, #-1]
 801b220:	6863      	ldr	r3, [r4, #4]
 801b222:	3301      	adds	r3, #1
 801b224:	6063      	str	r3, [r4, #4]
 801b226:	e7e9      	b.n	801b1fc <_sungetc_r+0xc>
 801b228:	4621      	mov	r1, r4
 801b22a:	f000 fb38 	bl	801b89e <__submore>
 801b22e:	2800      	cmp	r0, #0
 801b230:	d0f1      	beq.n	801b216 <_sungetc_r+0x26>
 801b232:	e7e1      	b.n	801b1f8 <_sungetc_r+0x8>
 801b234:	6921      	ldr	r1, [r4, #16]
 801b236:	6823      	ldr	r3, [r4, #0]
 801b238:	b151      	cbz	r1, 801b250 <_sungetc_r+0x60>
 801b23a:	4299      	cmp	r1, r3
 801b23c:	d208      	bcs.n	801b250 <_sungetc_r+0x60>
 801b23e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801b242:	42a9      	cmp	r1, r5
 801b244:	d104      	bne.n	801b250 <_sungetc_r+0x60>
 801b246:	3b01      	subs	r3, #1
 801b248:	3201      	adds	r2, #1
 801b24a:	6023      	str	r3, [r4, #0]
 801b24c:	6062      	str	r2, [r4, #4]
 801b24e:	e7d5      	b.n	801b1fc <_sungetc_r+0xc>
 801b250:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801b254:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b258:	6363      	str	r3, [r4, #52]	@ 0x34
 801b25a:	2303      	movs	r3, #3
 801b25c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801b25e:	4623      	mov	r3, r4
 801b260:	f803 5f46 	strb.w	r5, [r3, #70]!
 801b264:	6023      	str	r3, [r4, #0]
 801b266:	2301      	movs	r3, #1
 801b268:	e7dc      	b.n	801b224 <_sungetc_r+0x34>

0801b26a <__ssrefill_r>:
 801b26a:	b510      	push	{r4, lr}
 801b26c:	460c      	mov	r4, r1
 801b26e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801b270:	b169      	cbz	r1, 801b28e <__ssrefill_r+0x24>
 801b272:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b276:	4299      	cmp	r1, r3
 801b278:	d001      	beq.n	801b27e <__ssrefill_r+0x14>
 801b27a:	f7ff fa05 	bl	801a688 <_free_r>
 801b27e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b280:	6063      	str	r3, [r4, #4]
 801b282:	2000      	movs	r0, #0
 801b284:	6360      	str	r0, [r4, #52]	@ 0x34
 801b286:	b113      	cbz	r3, 801b28e <__ssrefill_r+0x24>
 801b288:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801b28a:	6023      	str	r3, [r4, #0]
 801b28c:	bd10      	pop	{r4, pc}
 801b28e:	6923      	ldr	r3, [r4, #16]
 801b290:	6023      	str	r3, [r4, #0]
 801b292:	2300      	movs	r3, #0
 801b294:	6063      	str	r3, [r4, #4]
 801b296:	89a3      	ldrh	r3, [r4, #12]
 801b298:	f043 0320 	orr.w	r3, r3, #32
 801b29c:	81a3      	strh	r3, [r4, #12]
 801b29e:	f04f 30ff 	mov.w	r0, #4294967295
 801b2a2:	e7f3      	b.n	801b28c <__ssrefill_r+0x22>

0801b2a4 <__ssvfiscanf_r>:
 801b2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2a8:	460c      	mov	r4, r1
 801b2aa:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801b2ae:	2100      	movs	r1, #0
 801b2b0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801b2b4:	49a6      	ldr	r1, [pc, #664]	@ (801b550 <__ssvfiscanf_r+0x2ac>)
 801b2b6:	91a0      	str	r1, [sp, #640]	@ 0x280
 801b2b8:	f10d 0804 	add.w	r8, sp, #4
 801b2bc:	49a5      	ldr	r1, [pc, #660]	@ (801b554 <__ssvfiscanf_r+0x2b0>)
 801b2be:	4fa6      	ldr	r7, [pc, #664]	@ (801b558 <__ssvfiscanf_r+0x2b4>)
 801b2c0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801b2c4:	4606      	mov	r6, r0
 801b2c6:	91a1      	str	r1, [sp, #644]	@ 0x284
 801b2c8:	9300      	str	r3, [sp, #0]
 801b2ca:	f892 9000 	ldrb.w	r9, [r2]
 801b2ce:	f1b9 0f00 	cmp.w	r9, #0
 801b2d2:	f000 8158 	beq.w	801b586 <__ssvfiscanf_r+0x2e2>
 801b2d6:	f817 3009 	ldrb.w	r3, [r7, r9]
 801b2da:	f013 0308 	ands.w	r3, r3, #8
 801b2de:	f102 0501 	add.w	r5, r2, #1
 801b2e2:	d019      	beq.n	801b318 <__ssvfiscanf_r+0x74>
 801b2e4:	6863      	ldr	r3, [r4, #4]
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	dd0f      	ble.n	801b30a <__ssvfiscanf_r+0x66>
 801b2ea:	6823      	ldr	r3, [r4, #0]
 801b2ec:	781a      	ldrb	r2, [r3, #0]
 801b2ee:	5cba      	ldrb	r2, [r7, r2]
 801b2f0:	0712      	lsls	r2, r2, #28
 801b2f2:	d401      	bmi.n	801b2f8 <__ssvfiscanf_r+0x54>
 801b2f4:	462a      	mov	r2, r5
 801b2f6:	e7e8      	b.n	801b2ca <__ssvfiscanf_r+0x26>
 801b2f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801b2fa:	3201      	adds	r2, #1
 801b2fc:	9245      	str	r2, [sp, #276]	@ 0x114
 801b2fe:	6862      	ldr	r2, [r4, #4]
 801b300:	3301      	adds	r3, #1
 801b302:	3a01      	subs	r2, #1
 801b304:	6062      	str	r2, [r4, #4]
 801b306:	6023      	str	r3, [r4, #0]
 801b308:	e7ec      	b.n	801b2e4 <__ssvfiscanf_r+0x40>
 801b30a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801b30c:	4621      	mov	r1, r4
 801b30e:	4630      	mov	r0, r6
 801b310:	4798      	blx	r3
 801b312:	2800      	cmp	r0, #0
 801b314:	d0e9      	beq.n	801b2ea <__ssvfiscanf_r+0x46>
 801b316:	e7ed      	b.n	801b2f4 <__ssvfiscanf_r+0x50>
 801b318:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801b31c:	f040 8085 	bne.w	801b42a <__ssvfiscanf_r+0x186>
 801b320:	9341      	str	r3, [sp, #260]	@ 0x104
 801b322:	9343      	str	r3, [sp, #268]	@ 0x10c
 801b324:	7853      	ldrb	r3, [r2, #1]
 801b326:	2b2a      	cmp	r3, #42	@ 0x2a
 801b328:	bf02      	ittt	eq
 801b32a:	2310      	moveq	r3, #16
 801b32c:	1c95      	addeq	r5, r2, #2
 801b32e:	9341      	streq	r3, [sp, #260]	@ 0x104
 801b330:	220a      	movs	r2, #10
 801b332:	46aa      	mov	sl, r5
 801b334:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801b338:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801b33c:	2b09      	cmp	r3, #9
 801b33e:	d91e      	bls.n	801b37e <__ssvfiscanf_r+0xda>
 801b340:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801b55c <__ssvfiscanf_r+0x2b8>
 801b344:	2203      	movs	r2, #3
 801b346:	4658      	mov	r0, fp
 801b348:	f7e4 fffa 	bl	8000340 <memchr>
 801b34c:	b138      	cbz	r0, 801b35e <__ssvfiscanf_r+0xba>
 801b34e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801b350:	eba0 000b 	sub.w	r0, r0, fp
 801b354:	2301      	movs	r3, #1
 801b356:	4083      	lsls	r3, r0
 801b358:	4313      	orrs	r3, r2
 801b35a:	9341      	str	r3, [sp, #260]	@ 0x104
 801b35c:	4655      	mov	r5, sl
 801b35e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b362:	2b78      	cmp	r3, #120	@ 0x78
 801b364:	d806      	bhi.n	801b374 <__ssvfiscanf_r+0xd0>
 801b366:	2b57      	cmp	r3, #87	@ 0x57
 801b368:	d810      	bhi.n	801b38c <__ssvfiscanf_r+0xe8>
 801b36a:	2b25      	cmp	r3, #37	@ 0x25
 801b36c:	d05d      	beq.n	801b42a <__ssvfiscanf_r+0x186>
 801b36e:	d857      	bhi.n	801b420 <__ssvfiscanf_r+0x17c>
 801b370:	2b00      	cmp	r3, #0
 801b372:	d075      	beq.n	801b460 <__ssvfiscanf_r+0x1bc>
 801b374:	2303      	movs	r3, #3
 801b376:	9347      	str	r3, [sp, #284]	@ 0x11c
 801b378:	230a      	movs	r3, #10
 801b37a:	9342      	str	r3, [sp, #264]	@ 0x108
 801b37c:	e088      	b.n	801b490 <__ssvfiscanf_r+0x1ec>
 801b37e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801b380:	fb02 1103 	mla	r1, r2, r3, r1
 801b384:	3930      	subs	r1, #48	@ 0x30
 801b386:	9143      	str	r1, [sp, #268]	@ 0x10c
 801b388:	4655      	mov	r5, sl
 801b38a:	e7d2      	b.n	801b332 <__ssvfiscanf_r+0x8e>
 801b38c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801b390:	2a20      	cmp	r2, #32
 801b392:	d8ef      	bhi.n	801b374 <__ssvfiscanf_r+0xd0>
 801b394:	a101      	add	r1, pc, #4	@ (adr r1, 801b39c <__ssvfiscanf_r+0xf8>)
 801b396:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b39a:	bf00      	nop
 801b39c:	0801b46f 	.word	0x0801b46f
 801b3a0:	0801b375 	.word	0x0801b375
 801b3a4:	0801b375 	.word	0x0801b375
 801b3a8:	0801b4c9 	.word	0x0801b4c9
 801b3ac:	0801b375 	.word	0x0801b375
 801b3b0:	0801b375 	.word	0x0801b375
 801b3b4:	0801b375 	.word	0x0801b375
 801b3b8:	0801b375 	.word	0x0801b375
 801b3bc:	0801b375 	.word	0x0801b375
 801b3c0:	0801b375 	.word	0x0801b375
 801b3c4:	0801b375 	.word	0x0801b375
 801b3c8:	0801b4df 	.word	0x0801b4df
 801b3cc:	0801b4c5 	.word	0x0801b4c5
 801b3d0:	0801b427 	.word	0x0801b427
 801b3d4:	0801b427 	.word	0x0801b427
 801b3d8:	0801b427 	.word	0x0801b427
 801b3dc:	0801b375 	.word	0x0801b375
 801b3e0:	0801b481 	.word	0x0801b481
 801b3e4:	0801b375 	.word	0x0801b375
 801b3e8:	0801b375 	.word	0x0801b375
 801b3ec:	0801b375 	.word	0x0801b375
 801b3f0:	0801b375 	.word	0x0801b375
 801b3f4:	0801b4ef 	.word	0x0801b4ef
 801b3f8:	0801b489 	.word	0x0801b489
 801b3fc:	0801b467 	.word	0x0801b467
 801b400:	0801b375 	.word	0x0801b375
 801b404:	0801b375 	.word	0x0801b375
 801b408:	0801b4eb 	.word	0x0801b4eb
 801b40c:	0801b375 	.word	0x0801b375
 801b410:	0801b4c5 	.word	0x0801b4c5
 801b414:	0801b375 	.word	0x0801b375
 801b418:	0801b375 	.word	0x0801b375
 801b41c:	0801b46f 	.word	0x0801b46f
 801b420:	3b45      	subs	r3, #69	@ 0x45
 801b422:	2b02      	cmp	r3, #2
 801b424:	d8a6      	bhi.n	801b374 <__ssvfiscanf_r+0xd0>
 801b426:	2305      	movs	r3, #5
 801b428:	e031      	b.n	801b48e <__ssvfiscanf_r+0x1ea>
 801b42a:	6863      	ldr	r3, [r4, #4]
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	dd0d      	ble.n	801b44c <__ssvfiscanf_r+0x1a8>
 801b430:	6823      	ldr	r3, [r4, #0]
 801b432:	781a      	ldrb	r2, [r3, #0]
 801b434:	454a      	cmp	r2, r9
 801b436:	f040 80a6 	bne.w	801b586 <__ssvfiscanf_r+0x2e2>
 801b43a:	3301      	adds	r3, #1
 801b43c:	6862      	ldr	r2, [r4, #4]
 801b43e:	6023      	str	r3, [r4, #0]
 801b440:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801b442:	3a01      	subs	r2, #1
 801b444:	3301      	adds	r3, #1
 801b446:	6062      	str	r2, [r4, #4]
 801b448:	9345      	str	r3, [sp, #276]	@ 0x114
 801b44a:	e753      	b.n	801b2f4 <__ssvfiscanf_r+0x50>
 801b44c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801b44e:	4621      	mov	r1, r4
 801b450:	4630      	mov	r0, r6
 801b452:	4798      	blx	r3
 801b454:	2800      	cmp	r0, #0
 801b456:	d0eb      	beq.n	801b430 <__ssvfiscanf_r+0x18c>
 801b458:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801b45a:	2800      	cmp	r0, #0
 801b45c:	f040 808b 	bne.w	801b576 <__ssvfiscanf_r+0x2d2>
 801b460:	f04f 30ff 	mov.w	r0, #4294967295
 801b464:	e08b      	b.n	801b57e <__ssvfiscanf_r+0x2da>
 801b466:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801b468:	f042 0220 	orr.w	r2, r2, #32
 801b46c:	9241      	str	r2, [sp, #260]	@ 0x104
 801b46e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801b470:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801b474:	9241      	str	r2, [sp, #260]	@ 0x104
 801b476:	2210      	movs	r2, #16
 801b478:	2b6e      	cmp	r3, #110	@ 0x6e
 801b47a:	9242      	str	r2, [sp, #264]	@ 0x108
 801b47c:	d902      	bls.n	801b484 <__ssvfiscanf_r+0x1e0>
 801b47e:	e005      	b.n	801b48c <__ssvfiscanf_r+0x1e8>
 801b480:	2300      	movs	r3, #0
 801b482:	9342      	str	r3, [sp, #264]	@ 0x108
 801b484:	2303      	movs	r3, #3
 801b486:	e002      	b.n	801b48e <__ssvfiscanf_r+0x1ea>
 801b488:	2308      	movs	r3, #8
 801b48a:	9342      	str	r3, [sp, #264]	@ 0x108
 801b48c:	2304      	movs	r3, #4
 801b48e:	9347      	str	r3, [sp, #284]	@ 0x11c
 801b490:	6863      	ldr	r3, [r4, #4]
 801b492:	2b00      	cmp	r3, #0
 801b494:	dd39      	ble.n	801b50a <__ssvfiscanf_r+0x266>
 801b496:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801b498:	0659      	lsls	r1, r3, #25
 801b49a:	d404      	bmi.n	801b4a6 <__ssvfiscanf_r+0x202>
 801b49c:	6823      	ldr	r3, [r4, #0]
 801b49e:	781a      	ldrb	r2, [r3, #0]
 801b4a0:	5cba      	ldrb	r2, [r7, r2]
 801b4a2:	0712      	lsls	r2, r2, #28
 801b4a4:	d438      	bmi.n	801b518 <__ssvfiscanf_r+0x274>
 801b4a6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801b4a8:	2b02      	cmp	r3, #2
 801b4aa:	dc47      	bgt.n	801b53c <__ssvfiscanf_r+0x298>
 801b4ac:	466b      	mov	r3, sp
 801b4ae:	4622      	mov	r2, r4
 801b4b0:	a941      	add	r1, sp, #260	@ 0x104
 801b4b2:	4630      	mov	r0, r6
 801b4b4:	f000 f86c 	bl	801b590 <_scanf_chars>
 801b4b8:	2801      	cmp	r0, #1
 801b4ba:	d064      	beq.n	801b586 <__ssvfiscanf_r+0x2e2>
 801b4bc:	2802      	cmp	r0, #2
 801b4be:	f47f af19 	bne.w	801b2f4 <__ssvfiscanf_r+0x50>
 801b4c2:	e7c9      	b.n	801b458 <__ssvfiscanf_r+0x1b4>
 801b4c4:	220a      	movs	r2, #10
 801b4c6:	e7d7      	b.n	801b478 <__ssvfiscanf_r+0x1d4>
 801b4c8:	4629      	mov	r1, r5
 801b4ca:	4640      	mov	r0, r8
 801b4cc:	f000 f9ae 	bl	801b82c <__sccl>
 801b4d0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801b4d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b4d6:	9341      	str	r3, [sp, #260]	@ 0x104
 801b4d8:	4605      	mov	r5, r0
 801b4da:	2301      	movs	r3, #1
 801b4dc:	e7d7      	b.n	801b48e <__ssvfiscanf_r+0x1ea>
 801b4de:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801b4e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b4e4:	9341      	str	r3, [sp, #260]	@ 0x104
 801b4e6:	2300      	movs	r3, #0
 801b4e8:	e7d1      	b.n	801b48e <__ssvfiscanf_r+0x1ea>
 801b4ea:	2302      	movs	r3, #2
 801b4ec:	e7cf      	b.n	801b48e <__ssvfiscanf_r+0x1ea>
 801b4ee:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801b4f0:	06c3      	lsls	r3, r0, #27
 801b4f2:	f53f aeff 	bmi.w	801b2f4 <__ssvfiscanf_r+0x50>
 801b4f6:	9b00      	ldr	r3, [sp, #0]
 801b4f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801b4fa:	1d19      	adds	r1, r3, #4
 801b4fc:	9100      	str	r1, [sp, #0]
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	07c0      	lsls	r0, r0, #31
 801b502:	bf4c      	ite	mi
 801b504:	801a      	strhmi	r2, [r3, #0]
 801b506:	601a      	strpl	r2, [r3, #0]
 801b508:	e6f4      	b.n	801b2f4 <__ssvfiscanf_r+0x50>
 801b50a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801b50c:	4621      	mov	r1, r4
 801b50e:	4630      	mov	r0, r6
 801b510:	4798      	blx	r3
 801b512:	2800      	cmp	r0, #0
 801b514:	d0bf      	beq.n	801b496 <__ssvfiscanf_r+0x1f2>
 801b516:	e79f      	b.n	801b458 <__ssvfiscanf_r+0x1b4>
 801b518:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801b51a:	3201      	adds	r2, #1
 801b51c:	9245      	str	r2, [sp, #276]	@ 0x114
 801b51e:	6862      	ldr	r2, [r4, #4]
 801b520:	3a01      	subs	r2, #1
 801b522:	2a00      	cmp	r2, #0
 801b524:	6062      	str	r2, [r4, #4]
 801b526:	dd02      	ble.n	801b52e <__ssvfiscanf_r+0x28a>
 801b528:	3301      	adds	r3, #1
 801b52a:	6023      	str	r3, [r4, #0]
 801b52c:	e7b6      	b.n	801b49c <__ssvfiscanf_r+0x1f8>
 801b52e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801b530:	4621      	mov	r1, r4
 801b532:	4630      	mov	r0, r6
 801b534:	4798      	blx	r3
 801b536:	2800      	cmp	r0, #0
 801b538:	d0b0      	beq.n	801b49c <__ssvfiscanf_r+0x1f8>
 801b53a:	e78d      	b.n	801b458 <__ssvfiscanf_r+0x1b4>
 801b53c:	2b04      	cmp	r3, #4
 801b53e:	dc0f      	bgt.n	801b560 <__ssvfiscanf_r+0x2bc>
 801b540:	466b      	mov	r3, sp
 801b542:	4622      	mov	r2, r4
 801b544:	a941      	add	r1, sp, #260	@ 0x104
 801b546:	4630      	mov	r0, r6
 801b548:	f000 f87c 	bl	801b644 <_scanf_i>
 801b54c:	e7b4      	b.n	801b4b8 <__ssvfiscanf_r+0x214>
 801b54e:	bf00      	nop
 801b550:	0801b1f1 	.word	0x0801b1f1
 801b554:	0801b26b 	.word	0x0801b26b
 801b558:	0801e876 	.word	0x0801e876
 801b55c:	0801e82d 	.word	0x0801e82d
 801b560:	4b0a      	ldr	r3, [pc, #40]	@ (801b58c <__ssvfiscanf_r+0x2e8>)
 801b562:	2b00      	cmp	r3, #0
 801b564:	f43f aec6 	beq.w	801b2f4 <__ssvfiscanf_r+0x50>
 801b568:	466b      	mov	r3, sp
 801b56a:	4622      	mov	r2, r4
 801b56c:	a941      	add	r1, sp, #260	@ 0x104
 801b56e:	4630      	mov	r0, r6
 801b570:	f3af 8000 	nop.w
 801b574:	e7a0      	b.n	801b4b8 <__ssvfiscanf_r+0x214>
 801b576:	89a3      	ldrh	r3, [r4, #12]
 801b578:	065b      	lsls	r3, r3, #25
 801b57a:	f53f af71 	bmi.w	801b460 <__ssvfiscanf_r+0x1bc>
 801b57e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801b582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b586:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801b588:	e7f9      	b.n	801b57e <__ssvfiscanf_r+0x2da>
 801b58a:	bf00      	nop
 801b58c:	00000000 	.word	0x00000000

0801b590 <_scanf_chars>:
 801b590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b594:	4615      	mov	r5, r2
 801b596:	688a      	ldr	r2, [r1, #8]
 801b598:	4680      	mov	r8, r0
 801b59a:	460c      	mov	r4, r1
 801b59c:	b932      	cbnz	r2, 801b5ac <_scanf_chars+0x1c>
 801b59e:	698a      	ldr	r2, [r1, #24]
 801b5a0:	2a00      	cmp	r2, #0
 801b5a2:	bf14      	ite	ne
 801b5a4:	f04f 32ff 	movne.w	r2, #4294967295
 801b5a8:	2201      	moveq	r2, #1
 801b5aa:	608a      	str	r2, [r1, #8]
 801b5ac:	6822      	ldr	r2, [r4, #0]
 801b5ae:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801b640 <_scanf_chars+0xb0>
 801b5b2:	06d1      	lsls	r1, r2, #27
 801b5b4:	bf5f      	itttt	pl
 801b5b6:	681a      	ldrpl	r2, [r3, #0]
 801b5b8:	1d11      	addpl	r1, r2, #4
 801b5ba:	6019      	strpl	r1, [r3, #0]
 801b5bc:	6816      	ldrpl	r6, [r2, #0]
 801b5be:	2700      	movs	r7, #0
 801b5c0:	69a0      	ldr	r0, [r4, #24]
 801b5c2:	b188      	cbz	r0, 801b5e8 <_scanf_chars+0x58>
 801b5c4:	2801      	cmp	r0, #1
 801b5c6:	d107      	bne.n	801b5d8 <_scanf_chars+0x48>
 801b5c8:	682b      	ldr	r3, [r5, #0]
 801b5ca:	781a      	ldrb	r2, [r3, #0]
 801b5cc:	6963      	ldr	r3, [r4, #20]
 801b5ce:	5c9b      	ldrb	r3, [r3, r2]
 801b5d0:	b953      	cbnz	r3, 801b5e8 <_scanf_chars+0x58>
 801b5d2:	2f00      	cmp	r7, #0
 801b5d4:	d031      	beq.n	801b63a <_scanf_chars+0xaa>
 801b5d6:	e022      	b.n	801b61e <_scanf_chars+0x8e>
 801b5d8:	2802      	cmp	r0, #2
 801b5da:	d120      	bne.n	801b61e <_scanf_chars+0x8e>
 801b5dc:	682b      	ldr	r3, [r5, #0]
 801b5de:	781b      	ldrb	r3, [r3, #0]
 801b5e0:	f819 3003 	ldrb.w	r3, [r9, r3]
 801b5e4:	071b      	lsls	r3, r3, #28
 801b5e6:	d41a      	bmi.n	801b61e <_scanf_chars+0x8e>
 801b5e8:	6823      	ldr	r3, [r4, #0]
 801b5ea:	06da      	lsls	r2, r3, #27
 801b5ec:	bf5e      	ittt	pl
 801b5ee:	682b      	ldrpl	r3, [r5, #0]
 801b5f0:	781b      	ldrbpl	r3, [r3, #0]
 801b5f2:	f806 3b01 	strbpl.w	r3, [r6], #1
 801b5f6:	682a      	ldr	r2, [r5, #0]
 801b5f8:	686b      	ldr	r3, [r5, #4]
 801b5fa:	3201      	adds	r2, #1
 801b5fc:	602a      	str	r2, [r5, #0]
 801b5fe:	68a2      	ldr	r2, [r4, #8]
 801b600:	3b01      	subs	r3, #1
 801b602:	3a01      	subs	r2, #1
 801b604:	606b      	str	r3, [r5, #4]
 801b606:	3701      	adds	r7, #1
 801b608:	60a2      	str	r2, [r4, #8]
 801b60a:	b142      	cbz	r2, 801b61e <_scanf_chars+0x8e>
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	dcd7      	bgt.n	801b5c0 <_scanf_chars+0x30>
 801b610:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801b614:	4629      	mov	r1, r5
 801b616:	4640      	mov	r0, r8
 801b618:	4798      	blx	r3
 801b61a:	2800      	cmp	r0, #0
 801b61c:	d0d0      	beq.n	801b5c0 <_scanf_chars+0x30>
 801b61e:	6823      	ldr	r3, [r4, #0]
 801b620:	f013 0310 	ands.w	r3, r3, #16
 801b624:	d105      	bne.n	801b632 <_scanf_chars+0xa2>
 801b626:	68e2      	ldr	r2, [r4, #12]
 801b628:	3201      	adds	r2, #1
 801b62a:	60e2      	str	r2, [r4, #12]
 801b62c:	69a2      	ldr	r2, [r4, #24]
 801b62e:	b102      	cbz	r2, 801b632 <_scanf_chars+0xa2>
 801b630:	7033      	strb	r3, [r6, #0]
 801b632:	6923      	ldr	r3, [r4, #16]
 801b634:	443b      	add	r3, r7
 801b636:	6123      	str	r3, [r4, #16]
 801b638:	2000      	movs	r0, #0
 801b63a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b63e:	bf00      	nop
 801b640:	0801e876 	.word	0x0801e876

0801b644 <_scanf_i>:
 801b644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b648:	4698      	mov	r8, r3
 801b64a:	4b74      	ldr	r3, [pc, #464]	@ (801b81c <_scanf_i+0x1d8>)
 801b64c:	460c      	mov	r4, r1
 801b64e:	4682      	mov	sl, r0
 801b650:	4616      	mov	r6, r2
 801b652:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b656:	b087      	sub	sp, #28
 801b658:	ab03      	add	r3, sp, #12
 801b65a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801b65e:	4b70      	ldr	r3, [pc, #448]	@ (801b820 <_scanf_i+0x1dc>)
 801b660:	69a1      	ldr	r1, [r4, #24]
 801b662:	4a70      	ldr	r2, [pc, #448]	@ (801b824 <_scanf_i+0x1e0>)
 801b664:	2903      	cmp	r1, #3
 801b666:	bf08      	it	eq
 801b668:	461a      	moveq	r2, r3
 801b66a:	68a3      	ldr	r3, [r4, #8]
 801b66c:	9201      	str	r2, [sp, #4]
 801b66e:	1e5a      	subs	r2, r3, #1
 801b670:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801b674:	bf88      	it	hi
 801b676:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801b67a:	4627      	mov	r7, r4
 801b67c:	bf82      	ittt	hi
 801b67e:	eb03 0905 	addhi.w	r9, r3, r5
 801b682:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801b686:	60a3      	strhi	r3, [r4, #8]
 801b688:	f857 3b1c 	ldr.w	r3, [r7], #28
 801b68c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801b690:	bf98      	it	ls
 801b692:	f04f 0900 	movls.w	r9, #0
 801b696:	6023      	str	r3, [r4, #0]
 801b698:	463d      	mov	r5, r7
 801b69a:	f04f 0b00 	mov.w	fp, #0
 801b69e:	6831      	ldr	r1, [r6, #0]
 801b6a0:	ab03      	add	r3, sp, #12
 801b6a2:	7809      	ldrb	r1, [r1, #0]
 801b6a4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801b6a8:	2202      	movs	r2, #2
 801b6aa:	f7e4 fe49 	bl	8000340 <memchr>
 801b6ae:	b328      	cbz	r0, 801b6fc <_scanf_i+0xb8>
 801b6b0:	f1bb 0f01 	cmp.w	fp, #1
 801b6b4:	d159      	bne.n	801b76a <_scanf_i+0x126>
 801b6b6:	6862      	ldr	r2, [r4, #4]
 801b6b8:	b92a      	cbnz	r2, 801b6c6 <_scanf_i+0x82>
 801b6ba:	6822      	ldr	r2, [r4, #0]
 801b6bc:	2108      	movs	r1, #8
 801b6be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801b6c2:	6061      	str	r1, [r4, #4]
 801b6c4:	6022      	str	r2, [r4, #0]
 801b6c6:	6822      	ldr	r2, [r4, #0]
 801b6c8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801b6cc:	6022      	str	r2, [r4, #0]
 801b6ce:	68a2      	ldr	r2, [r4, #8]
 801b6d0:	1e51      	subs	r1, r2, #1
 801b6d2:	60a1      	str	r1, [r4, #8]
 801b6d4:	b192      	cbz	r2, 801b6fc <_scanf_i+0xb8>
 801b6d6:	6832      	ldr	r2, [r6, #0]
 801b6d8:	1c51      	adds	r1, r2, #1
 801b6da:	6031      	str	r1, [r6, #0]
 801b6dc:	7812      	ldrb	r2, [r2, #0]
 801b6de:	f805 2b01 	strb.w	r2, [r5], #1
 801b6e2:	6872      	ldr	r2, [r6, #4]
 801b6e4:	3a01      	subs	r2, #1
 801b6e6:	2a00      	cmp	r2, #0
 801b6e8:	6072      	str	r2, [r6, #4]
 801b6ea:	dc07      	bgt.n	801b6fc <_scanf_i+0xb8>
 801b6ec:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801b6f0:	4631      	mov	r1, r6
 801b6f2:	4650      	mov	r0, sl
 801b6f4:	4790      	blx	r2
 801b6f6:	2800      	cmp	r0, #0
 801b6f8:	f040 8085 	bne.w	801b806 <_scanf_i+0x1c2>
 801b6fc:	f10b 0b01 	add.w	fp, fp, #1
 801b700:	f1bb 0f03 	cmp.w	fp, #3
 801b704:	d1cb      	bne.n	801b69e <_scanf_i+0x5a>
 801b706:	6863      	ldr	r3, [r4, #4]
 801b708:	b90b      	cbnz	r3, 801b70e <_scanf_i+0xca>
 801b70a:	230a      	movs	r3, #10
 801b70c:	6063      	str	r3, [r4, #4]
 801b70e:	6863      	ldr	r3, [r4, #4]
 801b710:	4945      	ldr	r1, [pc, #276]	@ (801b828 <_scanf_i+0x1e4>)
 801b712:	6960      	ldr	r0, [r4, #20]
 801b714:	1ac9      	subs	r1, r1, r3
 801b716:	f000 f889 	bl	801b82c <__sccl>
 801b71a:	f04f 0b00 	mov.w	fp, #0
 801b71e:	68a3      	ldr	r3, [r4, #8]
 801b720:	6822      	ldr	r2, [r4, #0]
 801b722:	2b00      	cmp	r3, #0
 801b724:	d03d      	beq.n	801b7a2 <_scanf_i+0x15e>
 801b726:	6831      	ldr	r1, [r6, #0]
 801b728:	6960      	ldr	r0, [r4, #20]
 801b72a:	f891 c000 	ldrb.w	ip, [r1]
 801b72e:	f810 000c 	ldrb.w	r0, [r0, ip]
 801b732:	2800      	cmp	r0, #0
 801b734:	d035      	beq.n	801b7a2 <_scanf_i+0x15e>
 801b736:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801b73a:	d124      	bne.n	801b786 <_scanf_i+0x142>
 801b73c:	0510      	lsls	r0, r2, #20
 801b73e:	d522      	bpl.n	801b786 <_scanf_i+0x142>
 801b740:	f10b 0b01 	add.w	fp, fp, #1
 801b744:	f1b9 0f00 	cmp.w	r9, #0
 801b748:	d003      	beq.n	801b752 <_scanf_i+0x10e>
 801b74a:	3301      	adds	r3, #1
 801b74c:	f109 39ff 	add.w	r9, r9, #4294967295
 801b750:	60a3      	str	r3, [r4, #8]
 801b752:	6873      	ldr	r3, [r6, #4]
 801b754:	3b01      	subs	r3, #1
 801b756:	2b00      	cmp	r3, #0
 801b758:	6073      	str	r3, [r6, #4]
 801b75a:	dd1b      	ble.n	801b794 <_scanf_i+0x150>
 801b75c:	6833      	ldr	r3, [r6, #0]
 801b75e:	3301      	adds	r3, #1
 801b760:	6033      	str	r3, [r6, #0]
 801b762:	68a3      	ldr	r3, [r4, #8]
 801b764:	3b01      	subs	r3, #1
 801b766:	60a3      	str	r3, [r4, #8]
 801b768:	e7d9      	b.n	801b71e <_scanf_i+0xda>
 801b76a:	f1bb 0f02 	cmp.w	fp, #2
 801b76e:	d1ae      	bne.n	801b6ce <_scanf_i+0x8a>
 801b770:	6822      	ldr	r2, [r4, #0]
 801b772:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801b776:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801b77a:	d1c4      	bne.n	801b706 <_scanf_i+0xc2>
 801b77c:	2110      	movs	r1, #16
 801b77e:	6061      	str	r1, [r4, #4]
 801b780:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801b784:	e7a2      	b.n	801b6cc <_scanf_i+0x88>
 801b786:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801b78a:	6022      	str	r2, [r4, #0]
 801b78c:	780b      	ldrb	r3, [r1, #0]
 801b78e:	f805 3b01 	strb.w	r3, [r5], #1
 801b792:	e7de      	b.n	801b752 <_scanf_i+0x10e>
 801b794:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801b798:	4631      	mov	r1, r6
 801b79a:	4650      	mov	r0, sl
 801b79c:	4798      	blx	r3
 801b79e:	2800      	cmp	r0, #0
 801b7a0:	d0df      	beq.n	801b762 <_scanf_i+0x11e>
 801b7a2:	6823      	ldr	r3, [r4, #0]
 801b7a4:	05d9      	lsls	r1, r3, #23
 801b7a6:	d50d      	bpl.n	801b7c4 <_scanf_i+0x180>
 801b7a8:	42bd      	cmp	r5, r7
 801b7aa:	d909      	bls.n	801b7c0 <_scanf_i+0x17c>
 801b7ac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801b7b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b7b4:	4632      	mov	r2, r6
 801b7b6:	4650      	mov	r0, sl
 801b7b8:	4798      	blx	r3
 801b7ba:	f105 39ff 	add.w	r9, r5, #4294967295
 801b7be:	464d      	mov	r5, r9
 801b7c0:	42bd      	cmp	r5, r7
 801b7c2:	d028      	beq.n	801b816 <_scanf_i+0x1d2>
 801b7c4:	6822      	ldr	r2, [r4, #0]
 801b7c6:	f012 0210 	ands.w	r2, r2, #16
 801b7ca:	d113      	bne.n	801b7f4 <_scanf_i+0x1b0>
 801b7cc:	702a      	strb	r2, [r5, #0]
 801b7ce:	6863      	ldr	r3, [r4, #4]
 801b7d0:	9e01      	ldr	r6, [sp, #4]
 801b7d2:	4639      	mov	r1, r7
 801b7d4:	4650      	mov	r0, sl
 801b7d6:	47b0      	blx	r6
 801b7d8:	f8d8 3000 	ldr.w	r3, [r8]
 801b7dc:	6821      	ldr	r1, [r4, #0]
 801b7de:	1d1a      	adds	r2, r3, #4
 801b7e0:	f8c8 2000 	str.w	r2, [r8]
 801b7e4:	f011 0f20 	tst.w	r1, #32
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	d00f      	beq.n	801b80c <_scanf_i+0x1c8>
 801b7ec:	6018      	str	r0, [r3, #0]
 801b7ee:	68e3      	ldr	r3, [r4, #12]
 801b7f0:	3301      	adds	r3, #1
 801b7f2:	60e3      	str	r3, [r4, #12]
 801b7f4:	6923      	ldr	r3, [r4, #16]
 801b7f6:	1bed      	subs	r5, r5, r7
 801b7f8:	445d      	add	r5, fp
 801b7fa:	442b      	add	r3, r5
 801b7fc:	6123      	str	r3, [r4, #16]
 801b7fe:	2000      	movs	r0, #0
 801b800:	b007      	add	sp, #28
 801b802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b806:	f04f 0b00 	mov.w	fp, #0
 801b80a:	e7ca      	b.n	801b7a2 <_scanf_i+0x15e>
 801b80c:	07ca      	lsls	r2, r1, #31
 801b80e:	bf4c      	ite	mi
 801b810:	8018      	strhmi	r0, [r3, #0]
 801b812:	6018      	strpl	r0, [r3, #0]
 801b814:	e7eb      	b.n	801b7ee <_scanf_i+0x1aa>
 801b816:	2001      	movs	r0, #1
 801b818:	e7f2      	b.n	801b800 <_scanf_i+0x1bc>
 801b81a:	bf00      	nop
 801b81c:	0801e540 	.word	0x0801e540
 801b820:	08019431 	.word	0x08019431
 801b824:	0801a881 	.word	0x0801a881
 801b828:	0801e86a 	.word	0x0801e86a

0801b82c <__sccl>:
 801b82c:	b570      	push	{r4, r5, r6, lr}
 801b82e:	780b      	ldrb	r3, [r1, #0]
 801b830:	4604      	mov	r4, r0
 801b832:	2b5e      	cmp	r3, #94	@ 0x5e
 801b834:	bf0b      	itete	eq
 801b836:	784b      	ldrbeq	r3, [r1, #1]
 801b838:	1c4a      	addne	r2, r1, #1
 801b83a:	1c8a      	addeq	r2, r1, #2
 801b83c:	2100      	movne	r1, #0
 801b83e:	bf08      	it	eq
 801b840:	2101      	moveq	r1, #1
 801b842:	3801      	subs	r0, #1
 801b844:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801b848:	f800 1f01 	strb.w	r1, [r0, #1]!
 801b84c:	42a8      	cmp	r0, r5
 801b84e:	d1fb      	bne.n	801b848 <__sccl+0x1c>
 801b850:	b90b      	cbnz	r3, 801b856 <__sccl+0x2a>
 801b852:	1e50      	subs	r0, r2, #1
 801b854:	bd70      	pop	{r4, r5, r6, pc}
 801b856:	f081 0101 	eor.w	r1, r1, #1
 801b85a:	54e1      	strb	r1, [r4, r3]
 801b85c:	4610      	mov	r0, r2
 801b85e:	4602      	mov	r2, r0
 801b860:	f812 5b01 	ldrb.w	r5, [r2], #1
 801b864:	2d2d      	cmp	r5, #45	@ 0x2d
 801b866:	d005      	beq.n	801b874 <__sccl+0x48>
 801b868:	2d5d      	cmp	r5, #93	@ 0x5d
 801b86a:	d016      	beq.n	801b89a <__sccl+0x6e>
 801b86c:	2d00      	cmp	r5, #0
 801b86e:	d0f1      	beq.n	801b854 <__sccl+0x28>
 801b870:	462b      	mov	r3, r5
 801b872:	e7f2      	b.n	801b85a <__sccl+0x2e>
 801b874:	7846      	ldrb	r6, [r0, #1]
 801b876:	2e5d      	cmp	r6, #93	@ 0x5d
 801b878:	d0fa      	beq.n	801b870 <__sccl+0x44>
 801b87a:	42b3      	cmp	r3, r6
 801b87c:	dcf8      	bgt.n	801b870 <__sccl+0x44>
 801b87e:	3002      	adds	r0, #2
 801b880:	461a      	mov	r2, r3
 801b882:	3201      	adds	r2, #1
 801b884:	4296      	cmp	r6, r2
 801b886:	54a1      	strb	r1, [r4, r2]
 801b888:	dcfb      	bgt.n	801b882 <__sccl+0x56>
 801b88a:	1af2      	subs	r2, r6, r3
 801b88c:	3a01      	subs	r2, #1
 801b88e:	1c5d      	adds	r5, r3, #1
 801b890:	42b3      	cmp	r3, r6
 801b892:	bfa8      	it	ge
 801b894:	2200      	movge	r2, #0
 801b896:	18ab      	adds	r3, r5, r2
 801b898:	e7e1      	b.n	801b85e <__sccl+0x32>
 801b89a:	4610      	mov	r0, r2
 801b89c:	e7da      	b.n	801b854 <__sccl+0x28>

0801b89e <__submore>:
 801b89e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8a2:	460c      	mov	r4, r1
 801b8a4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801b8a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b8aa:	4299      	cmp	r1, r3
 801b8ac:	d11d      	bne.n	801b8ea <__submore+0x4c>
 801b8ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801b8b2:	f7fd fc79 	bl	80191a8 <_malloc_r>
 801b8b6:	b918      	cbnz	r0, 801b8c0 <__submore+0x22>
 801b8b8:	f04f 30ff 	mov.w	r0, #4294967295
 801b8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b8c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b8c4:	63a3      	str	r3, [r4, #56]	@ 0x38
 801b8c6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801b8ca:	6360      	str	r0, [r4, #52]	@ 0x34
 801b8cc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801b8d0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801b8d4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801b8d8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801b8dc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801b8e0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801b8e4:	6020      	str	r0, [r4, #0]
 801b8e6:	2000      	movs	r0, #0
 801b8e8:	e7e8      	b.n	801b8bc <__submore+0x1e>
 801b8ea:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801b8ec:	0077      	lsls	r7, r6, #1
 801b8ee:	463a      	mov	r2, r7
 801b8f0:	f7ff fc50 	bl	801b194 <_realloc_r>
 801b8f4:	4605      	mov	r5, r0
 801b8f6:	2800      	cmp	r0, #0
 801b8f8:	d0de      	beq.n	801b8b8 <__submore+0x1a>
 801b8fa:	eb00 0806 	add.w	r8, r0, r6
 801b8fe:	4601      	mov	r1, r0
 801b900:	4632      	mov	r2, r6
 801b902:	4640      	mov	r0, r8
 801b904:	f7fe fea3 	bl	801a64e <memcpy>
 801b908:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801b90c:	f8c4 8000 	str.w	r8, [r4]
 801b910:	e7e9      	b.n	801b8e6 <__submore+0x48>

0801b912 <_malloc_usable_size_r>:
 801b912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b916:	1f18      	subs	r0, r3, #4
 801b918:	2b00      	cmp	r3, #0
 801b91a:	bfbc      	itt	lt
 801b91c:	580b      	ldrlt	r3, [r1, r0]
 801b91e:	18c0      	addlt	r0, r0, r3
 801b920:	4770      	bx	lr
	...

0801b924 <_init>:
 801b924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b926:	bf00      	nop
 801b928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b92a:	bc08      	pop	{r3}
 801b92c:	469e      	mov	lr, r3
 801b92e:	4770      	bx	lr

0801b930 <_fini>:
 801b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b932:	bf00      	nop
 801b934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b936:	bc08      	pop	{r3}
 801b938:	469e      	mov	lr, r3
 801b93a:	4770      	bx	lr
