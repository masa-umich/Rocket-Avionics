
limestone-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c498  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004658  0801c768  0801c768  0001d768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020dc0  08020dc0  00021dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020dc8  08020dc8  00021dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020dcc  08020dcc  00021dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  24000000  08020dd0  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000cd34  24000090  08020e60  00022090  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400cdc4  08020e60  00022dc4  2**0
                  ALLOC
  9 .lwip_sec     00000160  30000000  30000000  00023000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00022090  2**0
                  CONTENTS, READONLY
 11 .debug_info   000435e8  00000000  00000000  000220be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000912f  00000000  00000000  000656a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ed8  00000000  00000000  0006e7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000250b  00000000  00000000  000716b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004782f  00000000  00000000  00073bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004933b  00000000  00000000  000bb3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00182c08  00000000  00000000  00104725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0028732d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000d074  00000000  00000000  00287370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006d  00000000  00000000  002943e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000090 	.word	0x24000090
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801c750 	.word	0x0801c750

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000094 	.word	0x24000094
 800030c:	0801c750 	.word	0x0801c750

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b988 	b.w	80006d8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	468e      	mov	lr, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	4688      	mov	r8, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d962      	bls.n	80004bc <__udivmoddi4+0xdc>
 80003f6:	fab2 f682 	clz	r6, r2
 80003fa:	b14e      	cbz	r6, 8000410 <__udivmoddi4+0x30>
 80003fc:	f1c6 0320 	rsb	r3, r6, #32
 8000400:	fa01 f806 	lsl.w	r8, r1, r6
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	40b7      	lsls	r7, r6
 800040a:	ea43 0808 	orr.w	r8, r3, r8
 800040e:	40b4      	lsls	r4, r6
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fbb8 f1fe 	udiv	r1, r8, lr
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fb01 f20c 	mul.w	r2, r1, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x62>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f101 30ff 	add.w	r0, r1, #4294967295
 8000434:	f080 80ea 	bcs.w	800060c <__udivmoddi4+0x22c>
 8000438:	429a      	cmp	r2, r3
 800043a:	f240 80e7 	bls.w	800060c <__udivmoddi4+0x22c>
 800043e:	3902      	subs	r1, #2
 8000440:	443b      	add	r3, r7
 8000442:	1a9a      	subs	r2, r3, r2
 8000444:	b2a3      	uxth	r3, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb00 fc0c 	mul.w	ip, r0, ip
 8000456:	459c      	cmp	ip, r3
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x8e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	f080 80d6 	bcs.w	8000610 <__udivmoddi4+0x230>
 8000464:	459c      	cmp	ip, r3
 8000466:	f240 80d3 	bls.w	8000610 <__udivmoddi4+0x230>
 800046a:	443b      	add	r3, r7
 800046c:	3802      	subs	r0, #2
 800046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000472:	eba3 030c 	sub.w	r3, r3, ip
 8000476:	2100      	movs	r1, #0
 8000478:	b11d      	cbz	r5, 8000482 <__udivmoddi4+0xa2>
 800047a:	40f3      	lsrs	r3, r6
 800047c:	2200      	movs	r2, #0
 800047e:	e9c5 3200 	strd	r3, r2, [r5]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d905      	bls.n	8000496 <__udivmoddi4+0xb6>
 800048a:	b10d      	cbz	r5, 8000490 <__udivmoddi4+0xb0>
 800048c:	e9c5 0100 	strd	r0, r1, [r5]
 8000490:	2100      	movs	r1, #0
 8000492:	4608      	mov	r0, r1
 8000494:	e7f5      	b.n	8000482 <__udivmoddi4+0xa2>
 8000496:	fab3 f183 	clz	r1, r3
 800049a:	2900      	cmp	r1, #0
 800049c:	d146      	bne.n	800052c <__udivmoddi4+0x14c>
 800049e:	4573      	cmp	r3, lr
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xc8>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 8105 	bhi.w	80006b2 <__udivmoddi4+0x2d2>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	4690      	mov	r8, r2
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e5      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004b6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ba:	e7e2      	b.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f000 8090 	beq.w	80005e2 <__udivmoddi4+0x202>
 80004c2:	fab2 f682 	clz	r6, r2
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	f040 80a4 	bne.w	8000614 <__udivmoddi4+0x234>
 80004cc:	1a8a      	subs	r2, r1, r2
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	2101      	movs	r1, #1
 80004da:	fbb2 fcfe 	udiv	ip, r2, lr
 80004de:	fb0e 221c 	mls	r2, lr, ip, r2
 80004e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x11e>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x11c>
 80004f6:	429a      	cmp	r2, r3
 80004f8:	f200 80e0 	bhi.w	80006bc <__udivmoddi4+0x2dc>
 80004fc:	46c4      	mov	ip, r8
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	fbb3 f2fe 	udiv	r2, r3, lr
 8000504:	fb0e 3312 	mls	r3, lr, r2, r3
 8000508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800050c:	fb02 f404 	mul.w	r4, r2, r4
 8000510:	429c      	cmp	r4, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x144>
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	f102 30ff 	add.w	r0, r2, #4294967295
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x142>
 800051c:	429c      	cmp	r4, r3
 800051e:	f200 80ca 	bhi.w	80006b6 <__udivmoddi4+0x2d6>
 8000522:	4602      	mov	r2, r0
 8000524:	1b1b      	subs	r3, r3, r4
 8000526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800052a:	e7a5      	b.n	8000478 <__udivmoddi4+0x98>
 800052c:	f1c1 0620 	rsb	r6, r1, #32
 8000530:	408b      	lsls	r3, r1
 8000532:	fa22 f706 	lsr.w	r7, r2, r6
 8000536:	431f      	orrs	r7, r3
 8000538:	fa0e f401 	lsl.w	r4, lr, r1
 800053c:	fa20 f306 	lsr.w	r3, r0, r6
 8000540:	fa2e fe06 	lsr.w	lr, lr, r6
 8000544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000548:	4323      	orrs	r3, r4
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	fa1f fc87 	uxth.w	ip, r7
 8000552:	fbbe f0f9 	udiv	r0, lr, r9
 8000556:	0c1c      	lsrs	r4, r3, #16
 8000558:	fb09 ee10 	mls	lr, r9, r0, lr
 800055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000560:	fb00 fe0c 	mul.w	lr, r0, ip
 8000564:	45a6      	cmp	lr, r4
 8000566:	fa02 f201 	lsl.w	r2, r2, r1
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x1a0>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000572:	f080 809c 	bcs.w	80006ae <__udivmoddi4+0x2ce>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f240 8099 	bls.w	80006ae <__udivmoddi4+0x2ce>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 040e 	sub.w	r4, r4, lr
 8000584:	fa1f fe83 	uxth.w	lr, r3
 8000588:	fbb4 f3f9 	udiv	r3, r4, r9
 800058c:	fb09 4413 	mls	r4, r9, r3, r4
 8000590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000594:	fb03 fc0c 	mul.w	ip, r3, ip
 8000598:	45a4      	cmp	ip, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1ce>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f103 3eff 	add.w	lr, r3, #4294967295
 80005a2:	f080 8082 	bcs.w	80006aa <__udivmoddi4+0x2ca>
 80005a6:	45a4      	cmp	ip, r4
 80005a8:	d97f      	bls.n	80006aa <__udivmoddi4+0x2ca>
 80005aa:	3b02      	subs	r3, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005b2:	eba4 040c 	sub.w	r4, r4, ip
 80005b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ba:	4564      	cmp	r4, ip
 80005bc:	4673      	mov	r3, lr
 80005be:	46e1      	mov	r9, ip
 80005c0:	d362      	bcc.n	8000688 <__udivmoddi4+0x2a8>
 80005c2:	d05f      	beq.n	8000684 <__udivmoddi4+0x2a4>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x1fe>
 80005c6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ca:	eb64 0409 	sbc.w	r4, r4, r9
 80005ce:	fa04 f606 	lsl.w	r6, r4, r6
 80005d2:	fa22 f301 	lsr.w	r3, r2, r1
 80005d6:	431e      	orrs	r6, r3
 80005d8:	40cc      	lsrs	r4, r1
 80005da:	e9c5 6400 	strd	r6, r4, [r5]
 80005de:	2100      	movs	r1, #0
 80005e0:	e74f      	b.n	8000482 <__udivmoddi4+0xa2>
 80005e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005e6:	0c01      	lsrs	r1, r0, #16
 80005e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ec:	b280      	uxth	r0, r0
 80005ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005f2:	463b      	mov	r3, r7
 80005f4:	4638      	mov	r0, r7
 80005f6:	463c      	mov	r4, r7
 80005f8:	46b8      	mov	r8, r7
 80005fa:	46be      	mov	lr, r7
 80005fc:	2620      	movs	r6, #32
 80005fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000602:	eba2 0208 	sub.w	r2, r2, r8
 8000606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800060a:	e766      	b.n	80004da <__udivmoddi4+0xfa>
 800060c:	4601      	mov	r1, r0
 800060e:	e718      	b.n	8000442 <__udivmoddi4+0x62>
 8000610:	4610      	mov	r0, r2
 8000612:	e72c      	b.n	800046e <__udivmoddi4+0x8e>
 8000614:	f1c6 0220 	rsb	r2, r6, #32
 8000618:	fa2e f302 	lsr.w	r3, lr, r2
 800061c:	40b7      	lsls	r7, r6
 800061e:	40b1      	lsls	r1, r6
 8000620:	fa20 f202 	lsr.w	r2, r0, r2
 8000624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000628:	430a      	orrs	r2, r1
 800062a:	fbb3 f8fe 	udiv	r8, r3, lr
 800062e:	b2bc      	uxth	r4, r7
 8000630:	fb0e 3318 	mls	r3, lr, r8, r3
 8000634:	0c11      	lsrs	r1, r2, #16
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb08 f904 	mul.w	r9, r8, r4
 800063e:	40b0      	lsls	r0, r6
 8000640:	4589      	cmp	r9, r1
 8000642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000646:	b280      	uxth	r0, r0
 8000648:	d93e      	bls.n	80006c8 <__udivmoddi4+0x2e8>
 800064a:	1879      	adds	r1, r7, r1
 800064c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000650:	d201      	bcs.n	8000656 <__udivmoddi4+0x276>
 8000652:	4589      	cmp	r9, r1
 8000654:	d81f      	bhi.n	8000696 <__udivmoddi4+0x2b6>
 8000656:	eba1 0109 	sub.w	r1, r1, r9
 800065a:	fbb1 f9fe 	udiv	r9, r1, lr
 800065e:	fb09 f804 	mul.w	r8, r9, r4
 8000662:	fb0e 1119 	mls	r1, lr, r9, r1
 8000666:	b292      	uxth	r2, r2
 8000668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800066c:	4542      	cmp	r2, r8
 800066e:	d229      	bcs.n	80006c4 <__udivmoddi4+0x2e4>
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	f109 31ff 	add.w	r1, r9, #4294967295
 8000676:	d2c4      	bcs.n	8000602 <__udivmoddi4+0x222>
 8000678:	4542      	cmp	r2, r8
 800067a:	d2c2      	bcs.n	8000602 <__udivmoddi4+0x222>
 800067c:	f1a9 0102 	sub.w	r1, r9, #2
 8000680:	443a      	add	r2, r7
 8000682:	e7be      	b.n	8000602 <__udivmoddi4+0x222>
 8000684:	45f0      	cmp	r8, lr
 8000686:	d29d      	bcs.n	80005c4 <__udivmoddi4+0x1e4>
 8000688:	ebbe 0302 	subs.w	r3, lr, r2
 800068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000690:	3801      	subs	r0, #1
 8000692:	46e1      	mov	r9, ip
 8000694:	e796      	b.n	80005c4 <__udivmoddi4+0x1e4>
 8000696:	eba7 0909 	sub.w	r9, r7, r9
 800069a:	4449      	add	r1, r9
 800069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80006a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a4:	fb09 f804 	mul.w	r8, r9, r4
 80006a8:	e7db      	b.n	8000662 <__udivmoddi4+0x282>
 80006aa:	4673      	mov	r3, lr
 80006ac:	e77f      	b.n	80005ae <__udivmoddi4+0x1ce>
 80006ae:	4650      	mov	r0, sl
 80006b0:	e766      	b.n	8000580 <__udivmoddi4+0x1a0>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e6fd      	b.n	80004b2 <__udivmoddi4+0xd2>
 80006b6:	443b      	add	r3, r7
 80006b8:	3a02      	subs	r2, #2
 80006ba:	e733      	b.n	8000524 <__udivmoddi4+0x144>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	443b      	add	r3, r7
 80006c2:	e71c      	b.n	80004fe <__udivmoddi4+0x11e>
 80006c4:	4649      	mov	r1, r9
 80006c6:	e79c      	b.n	8000602 <__udivmoddi4+0x222>
 80006c8:	eba1 0109 	sub.w	r1, r1, r9
 80006cc:	46c4      	mov	ip, r8
 80006ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d2:	fb09 f804 	mul.w	r8, r9, r4
 80006d6:	e7c4      	b.n	8000662 <__udivmoddi4+0x282>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <delay_us>:
#include "ADS1120.h"
//#include "semphr.h"

extern uint64_t getTimestamp(void);

void delay_us(uint32_t us) { // I found this online - why is it so difficult to delay less than a millisecond?
 80006dc:	b480      	push	{r7}
 80006de:	b087      	sub	sp, #28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
    uint32_t start = SysTick->VAL;
 80006e4:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <delay_us+0x80>)
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	617b      	str	r3, [r7, #20]
    uint32_t cycles = us * (SystemCoreClock / 1000000);
 80006ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <delay_us+0x84>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a1d      	ldr	r2, [pc, #116]	@ (8000764 <delay_us+0x88>)
 80006f0:	fba2 2303 	umull	r2, r3, r2, r3
 80006f4:	0c9a      	lsrs	r2, r3, #18
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	fb02 f303 	mul.w	r3, r2, r3
 80006fc:	613b      	str	r3, [r7, #16]

    if(start > cycles) {
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	429a      	cmp	r2, r3
 8000704:	d90d      	bls.n	8000722 <delay_us+0x46>
    	while(SysTick->VAL > start - cycles && SysTick->VAL <= start);
 8000706:	bf00      	nop
 8000708:	4b14      	ldr	r3, [pc, #80]	@ (800075c <delay_us+0x80>)
 800070a:	689a      	ldr	r2, [r3, #8]
 800070c:	6979      	ldr	r1, [r7, #20]
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	1acb      	subs	r3, r1, r3
 8000712:	429a      	cmp	r2, r3
 8000714:	d91c      	bls.n	8000750 <delay_us+0x74>
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <delay_us+0x80>)
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	697a      	ldr	r2, [r7, #20]
 800071c:	429a      	cmp	r2, r3
 800071e:	d2f3      	bcs.n	8000708 <delay_us+0x2c>
    }
    else {
    	uint32_t end = ((SystemCoreClock/1000) - 1) - (cycles - start);
    	while(SysTick->VAL <= start || SysTick->VAL > end);
    }
}
 8000720:	e016      	b.n	8000750 <delay_us+0x74>
    	uint32_t end = ((SystemCoreClock/1000) - 1) - (cycles - start);
 8000722:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <delay_us+0x84>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a10      	ldr	r2, [pc, #64]	@ (8000768 <delay_us+0x8c>)
 8000728:	fba2 2303 	umull	r2, r3, r2, r3
 800072c:	099a      	lsrs	r2, r3, #6
 800072e:	6979      	ldr	r1, [r7, #20]
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	1acb      	subs	r3, r1, r3
 8000734:	4413      	add	r3, r2
 8000736:	3b01      	subs	r3, #1
 8000738:	60fb      	str	r3, [r7, #12]
    	while(SysTick->VAL <= start || SysTick->VAL > end);
 800073a:	bf00      	nop
 800073c:	4b07      	ldr	r3, [pc, #28]	@ (800075c <delay_us+0x80>)
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	697a      	ldr	r2, [r7, #20]
 8000742:	429a      	cmp	r2, r3
 8000744:	d2fa      	bcs.n	800073c <delay_us+0x60>
 8000746:	4b05      	ldr	r3, [pc, #20]	@ (800075c <delay_us+0x80>)
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	429a      	cmp	r2, r3
 800074e:	d3f5      	bcc.n	800073c <delay_us+0x60>
}
 8000750:	bf00      	nop
 8000752:	371c      	adds	r7, #28
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000e010 	.word	0xe000e010
 8000760:	24000000 	.word	0x24000000
 8000764:	431bde83 	.word	0x431bde83
 8000768:	10624dd3 	.word	0x10624dd3

0800076c <ADS_convertRawToMicrovolts>:

double ADS_convertRawToMicrovolts(ADS_TC_t *ADS, int16_t raw) {
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	807b      	strh	r3, [r7, #2]
	//double stepSize = 1e3 / (0x0001 << (4 + (ADS->gain >> 1))); // I got carried away optimizing this, I don't know why. Only works for a reference voltage of 2.048V
	return ADS->step_size * raw;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	ed93 6b06 	vldr	d6, [r3, #24]
 800077e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000782:	ee07 3a90 	vmov	s15, r3
 8000786:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800078a:	ee26 7b07 	vmul.f64	d7, d6, d7
}
 800078e:	eeb0 0b47 	vmov.f64	d0, d7
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	0000      	movs	r0, r0
	...

080007a0 <ADS_polyMicrovoltsToTemp>:

float ADS_polyMicrovoltsToTemp(double microvolts) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	ed2d 8b02 	vpush	{d8}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	ed87 0b00 	vstr	d0, [r7]
	if(microvolts < 0) {
 80007ae:	ed97 7b00 	vldr	d7, [r7]
 80007b2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80007b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ba:	d560      	bpl.n	800087e <ADS_polyMicrovoltsToTemp+0xde>
		double temp = microvolts * ADS_POLY_INV_NEG_C1 +
 80007bc:	ed97 7b00 	vldr	d7, [r7]
 80007c0:	ed9f 6b5b 	vldr	d6, [pc, #364]	@ 8000930 <ADS_polyMicrovoltsToTemp+0x190>
 80007c4:	ee27 8b06 	vmul.f64	d8, d7, d6
				pow(microvolts, 2) * ADS_POLY_INV_NEG_C2 +
 80007c8:	eeb0 1b00 	vmov.f64	d1, #0	@ 0x40000000  2.0
 80007cc:	ed97 0b00 	vldr	d0, [r7]
 80007d0:	f01b fcfa 	bl	801c1c8 <pow>
 80007d4:	eeb0 7b40 	vmov.f64	d7, d0
 80007d8:	ed9f 6b57 	vldr	d6, [pc, #348]	@ 8000938 <ADS_polyMicrovoltsToTemp+0x198>
 80007dc:	ee27 7b06 	vmul.f64	d7, d7, d6
		double temp = microvolts * ADS_POLY_INV_NEG_C1 +
 80007e0:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(microvolts, 3) * ADS_POLY_INV_NEG_C3 +
 80007e4:	eeb0 1b08 	vmov.f64	d1, #8	@ 0x40400000  3.0
 80007e8:	ed97 0b00 	vldr	d0, [r7]
 80007ec:	f01b fcec 	bl	801c1c8 <pow>
 80007f0:	eeb0 7b40 	vmov.f64	d7, d0
 80007f4:	ed9f 6b52 	vldr	d6, [pc, #328]	@ 8000940 <ADS_polyMicrovoltsToTemp+0x1a0>
 80007f8:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(microvolts, 2) * ADS_POLY_INV_NEG_C2 +
 80007fc:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(microvolts, 4) * ADS_POLY_INV_NEG_C4 +
 8000800:	eeb1 1b00 	vmov.f64	d1, #16	@ 0x40800000  4.0
 8000804:	ed97 0b00 	vldr	d0, [r7]
 8000808:	f01b fcde 	bl	801c1c8 <pow>
 800080c:	eeb0 7b40 	vmov.f64	d7, d0
 8000810:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 8000948 <ADS_polyMicrovoltsToTemp+0x1a8>
 8000814:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(microvolts, 3) * ADS_POLY_INV_NEG_C3 +
 8000818:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(microvolts, 5) * ADS_POLY_INV_NEG_C5 +
 800081c:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 8000820:	ed97 0b00 	vldr	d0, [r7]
 8000824:	f01b fcd0 	bl	801c1c8 <pow>
 8000828:	eeb0 7b40 	vmov.f64	d7, d0
 800082c:	ed9f 6b48 	vldr	d6, [pc, #288]	@ 8000950 <ADS_polyMicrovoltsToTemp+0x1b0>
 8000830:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(microvolts, 4) * ADS_POLY_INV_NEG_C4 +
 8000834:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(microvolts, 6) * ADS_POLY_INV_NEG_C6 +
 8000838:	eeb1 1b08 	vmov.f64	d1, #24	@ 0x40c00000  6.0
 800083c:	ed97 0b00 	vldr	d0, [r7]
 8000840:	f01b fcc2 	bl	801c1c8 <pow>
 8000844:	eeb0 7b40 	vmov.f64	d7, d0
 8000848:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 8000958 <ADS_polyMicrovoltsToTemp+0x1b8>
 800084c:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(microvolts, 5) * ADS_POLY_INV_NEG_C5 +
 8000850:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(microvolts, 7) * ADS_POLY_INV_NEG_C7;
 8000854:	eeb1 1b0c 	vmov.f64	d1, #28	@ 0x40e00000  7.0
 8000858:	ed97 0b00 	vldr	d0, [r7]
 800085c:	f01b fcb4 	bl	801c1c8 <pow>
 8000860:	eeb0 7b40 	vmov.f64	d7, d0
 8000864:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8000960 <ADS_polyMicrovoltsToTemp+0x1c0>
 8000868:	ee27 7b06 	vmul.f64	d7, d7, d6
		double temp = microvolts * ADS_POLY_INV_NEG_C1 +
 800086c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000870:	ed87 7b02 	vstr	d7, [r7, #8]
		return (float)temp;
 8000874:	ed97 7b02 	vldr	d7, [r7, #8]
 8000878:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800087c:	e051      	b.n	8000922 <ADS_polyMicrovoltsToTemp+0x182>

	}
	else {
		double temp = microvolts * ADS_POLY_INV_POS_C1 +
 800087e:	ed97 7b00 	vldr	d7, [r7]
 8000882:	ed9f 6b39 	vldr	d6, [pc, #228]	@ 8000968 <ADS_polyMicrovoltsToTemp+0x1c8>
 8000886:	ee27 8b06 	vmul.f64	d8, d7, d6
				pow(microvolts, 2) * ADS_POLY_INV_POS_C2 +
 800088a:	eeb0 1b00 	vmov.f64	d1, #0	@ 0x40000000  2.0
 800088e:	ed97 0b00 	vldr	d0, [r7]
 8000892:	f01b fc99 	bl	801c1c8 <pow>
 8000896:	eeb0 7b40 	vmov.f64	d7, d0
 800089a:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 8000970 <ADS_polyMicrovoltsToTemp+0x1d0>
 800089e:	ee27 7b06 	vmul.f64	d7, d7, d6
		double temp = microvolts * ADS_POLY_INV_POS_C1 +
 80008a2:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(microvolts, 3) * ADS_POLY_INV_POS_C3 +
 80008a6:	eeb0 1b08 	vmov.f64	d1, #8	@ 0x40400000  3.0
 80008aa:	ed97 0b00 	vldr	d0, [r7]
 80008ae:	f01b fc8b 	bl	801c1c8 <pow>
 80008b2:	eeb0 7b40 	vmov.f64	d7, d0
 80008b6:	ed9f 6b30 	vldr	d6, [pc, #192]	@ 8000978 <ADS_polyMicrovoltsToTemp+0x1d8>
 80008ba:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(microvolts, 2) * ADS_POLY_INV_POS_C2 +
 80008be:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(microvolts, 4) * ADS_POLY_INV_POS_C4 +
 80008c2:	eeb1 1b00 	vmov.f64	d1, #16	@ 0x40800000  4.0
 80008c6:	ed97 0b00 	vldr	d0, [r7]
 80008ca:	f01b fc7d 	bl	801c1c8 <pow>
 80008ce:	eeb0 7b40 	vmov.f64	d7, d0
 80008d2:	ed9f 6b2b 	vldr	d6, [pc, #172]	@ 8000980 <ADS_polyMicrovoltsToTemp+0x1e0>
 80008d6:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(microvolts, 3) * ADS_POLY_INV_POS_C3 +
 80008da:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(microvolts, 5) * ADS_POLY_INV_POS_C5 +
 80008de:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 80008e2:	ed97 0b00 	vldr	d0, [r7]
 80008e6:	f01b fc6f 	bl	801c1c8 <pow>
 80008ea:	eeb0 7b40 	vmov.f64	d7, d0
 80008ee:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8000988 <ADS_polyMicrovoltsToTemp+0x1e8>
 80008f2:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(microvolts, 4) * ADS_POLY_INV_POS_C4 +
 80008f6:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(microvolts, 6) * ADS_POLY_INV_POS_C6;
 80008fa:	eeb1 1b08 	vmov.f64	d1, #24	@ 0x40c00000  6.0
 80008fe:	ed97 0b00 	vldr	d0, [r7]
 8000902:	f01b fc61 	bl	801c1c8 <pow>
 8000906:	eeb0 7b40 	vmov.f64	d7, d0
 800090a:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 8000990 <ADS_polyMicrovoltsToTemp+0x1f0>
 800090e:	ee27 7b06 	vmul.f64	d7, d7, d6
		double temp = microvolts * ADS_POLY_INV_POS_C1 +
 8000912:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000916:	ed87 7b04 	vstr	d7, [r7, #16]
		return (float)temp;
 800091a:	ed97 7b04 	vldr	d7, [r7, #16]
 800091e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	}
}
 8000922:	eeb0 0a67 	vmov.f32	s0, s15
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	ecbd 8b02 	vpop	{d8}
 800092e:	bd80      	pop	{r7, pc}
 8000930:	9e9b5883 	.word	0x9e9b5883
 8000934:	3f9a8d2e 	.word	0x3f9a8d2e
 8000938:	3f3078f7 	.word	0x3f3078f7
 800093c:	be8c9c74 	.word	0xbe8c9c74
 8000940:	c25d0ffb 	.word	0xc25d0ffb
 8000944:	3e0b268e 	.word	0x3e0b268e
 8000948:	8bbd486f 	.word	0x8bbd486f
 800094c:	3d5ded1f 	.word	0x3d5ded1f
 8000950:	f28574d7 	.word	0xf28574d7
 8000954:	3ca32c7b 	.word	0x3ca32c7b
 8000958:	074d8c97 	.word	0x074d8c97
 800095c:	3bd7e59a 	.word	0x3bd7e59a
 8000960:	750ab0f3 	.word	0x750ab0f3
 8000964:	3af880f9 	.word	0x3af880f9
 8000968:	a033e78e 	.word	0xa033e78e
 800096c:	3f9a8cde 	.word	0x3f9a8cde
 8000970:	ce14d6f8 	.word	0xce14d6f8
 8000974:	bea982e4 	.word	0xbea982e4
 8000978:	4e38c5c1 	.word	0x4e38c5c1
 800097c:	3dc97f1c 	.word	0x3dc97f1c
 8000980:	0187a29d 	.word	0x0187a29d
 8000984:	bce3810f 	.word	0xbce3810f
 8000988:	30d6aaeb 	.word	0x30d6aaeb
 800098c:	3bf1d9d9 	.word	0x3bf1d9d9
 8000990:	27bb6b90 	.word	0x27bb6b90
 8000994:	baec370e 	.word	0xbaec370e

08000998 <ADS_polyTempToMicrovolts>:

double ADS_polyTempToMicrovolts(float temp) {
 8000998:	b580      	push	{r7, lr}
 800099a:	ed2d 8b02 	vpush	{d8}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	ed87 0a01 	vstr	s0, [r7, #4]
	if(temp < 0) {
 80009a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80009aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009b2:	f140 80f3 	bpl.w	8000b9c <ADS_polyTempToMicrovolts+0x204>
		return temp * ADS_POLY_NEG_C1 +
 80009b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80009ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009be:	ed9f 6bbe 	vldr	d6, [pc, #760]	@ 8000cb8 <ADS_polyTempToMicrovolts+0x320>
 80009c2:	ee27 8b06 	vmul.f64	d8, d7, d6
				pow(temp, 2) * ADS_POLY_NEG_C2 +
 80009c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80009ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009ce:	eeb0 1b00 	vmov.f64	d1, #0	@ 0x40000000  2.0
 80009d2:	eeb0 0b47 	vmov.f64	d0, d7
 80009d6:	f01b fbf7 	bl	801c1c8 <pow>
 80009da:	eeb0 7b40 	vmov.f64	d7, d0
 80009de:	ed9f 6bb8 	vldr	d6, [pc, #736]	@ 8000cc0 <ADS_polyTempToMicrovolts+0x328>
 80009e2:	ee27 7b06 	vmul.f64	d7, d7, d6
		return temp * ADS_POLY_NEG_C1 +
 80009e6:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(temp, 3) * ADS_POLY_NEG_C3 +
 80009ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80009ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009f2:	eeb0 1b08 	vmov.f64	d1, #8	@ 0x40400000  3.0
 80009f6:	eeb0 0b47 	vmov.f64	d0, d7
 80009fa:	f01b fbe5 	bl	801c1c8 <pow>
 80009fe:	eeb0 7b40 	vmov.f64	d7, d0
 8000a02:	ed9f 6bb1 	vldr	d6, [pc, #708]	@ 8000cc8 <ADS_polyTempToMicrovolts+0x330>
 8000a06:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(temp, 2) * ADS_POLY_NEG_C2 +
 8000a0a:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(temp, 4) * ADS_POLY_NEG_C4 +
 8000a0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a16:	eeb1 1b00 	vmov.f64	d1, #16	@ 0x40800000  4.0
 8000a1a:	eeb0 0b47 	vmov.f64	d0, d7
 8000a1e:	f01b fbd3 	bl	801c1c8 <pow>
 8000a22:	eeb0 7b40 	vmov.f64	d7, d0
 8000a26:	ed9f 6baa 	vldr	d6, [pc, #680]	@ 8000cd0 <ADS_polyTempToMicrovolts+0x338>
 8000a2a:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(temp, 3) * ADS_POLY_NEG_C3 +
 8000a2e:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(temp, 5) * ADS_POLY_NEG_C5 +
 8000a32:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a3a:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 8000a3e:	eeb0 0b47 	vmov.f64	d0, d7
 8000a42:	f01b fbc1 	bl	801c1c8 <pow>
 8000a46:	eeb0 7b40 	vmov.f64	d7, d0
 8000a4a:	ed9f 6ba3 	vldr	d6, [pc, #652]	@ 8000cd8 <ADS_polyTempToMicrovolts+0x340>
 8000a4e:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(temp, 4) * ADS_POLY_NEG_C4 +
 8000a52:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(temp, 6) * ADS_POLY_NEG_C6 +
 8000a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a5e:	eeb1 1b08 	vmov.f64	d1, #24	@ 0x40c00000  6.0
 8000a62:	eeb0 0b47 	vmov.f64	d0, d7
 8000a66:	f01b fbaf 	bl	801c1c8 <pow>
 8000a6a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a6e:	ed9f 6b9c 	vldr	d6, [pc, #624]	@ 8000ce0 <ADS_polyTempToMicrovolts+0x348>
 8000a72:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(temp, 5) * ADS_POLY_NEG_C5 +
 8000a76:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(temp, 7) * ADS_POLY_NEG_C7 +
 8000a7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a82:	eeb1 1b0c 	vmov.f64	d1, #28	@ 0x40e00000  7.0
 8000a86:	eeb0 0b47 	vmov.f64	d0, d7
 8000a8a:	f01b fb9d 	bl	801c1c8 <pow>
 8000a8e:	eeb0 7b40 	vmov.f64	d7, d0
 8000a92:	ed9f 6b95 	vldr	d6, [pc, #596]	@ 8000ce8 <ADS_polyTempToMicrovolts+0x350>
 8000a96:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(temp, 6) * ADS_POLY_NEG_C6 +
 8000a9a:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(temp, 8) * ADS_POLY_NEG_C8 +
 8000a9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aa2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aa6:	eeb2 1b00 	vmov.f64	d1, #32	@ 0x41000000  8.0
 8000aaa:	eeb0 0b47 	vmov.f64	d0, d7
 8000aae:	f01b fb8b 	bl	801c1c8 <pow>
 8000ab2:	eeb0 7b40 	vmov.f64	d7, d0
 8000ab6:	ed9f 6b8e 	vldr	d6, [pc, #568]	@ 8000cf0 <ADS_polyTempToMicrovolts+0x358>
 8000aba:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(temp, 7) * ADS_POLY_NEG_C7 +
 8000abe:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(temp, 9) * ADS_POLY_NEG_C9 +
 8000ac2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ac6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aca:	eeb2 1b02 	vmov.f64	d1, #34	@ 0x41100000  9.0
 8000ace:	eeb0 0b47 	vmov.f64	d0, d7
 8000ad2:	f01b fb79 	bl	801c1c8 <pow>
 8000ad6:	eeb0 7b40 	vmov.f64	d7, d0
 8000ada:	ed9f 6b87 	vldr	d6, [pc, #540]	@ 8000cf8 <ADS_polyTempToMicrovolts+0x360>
 8000ade:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(temp, 8) * ADS_POLY_NEG_C8 +
 8000ae2:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(temp, 10) * ADS_POLY_NEG_C10 +
 8000ae6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aee:	eeb2 1b04 	vmov.f64	d1, #36	@ 0x41200000  10.0
 8000af2:	eeb0 0b47 	vmov.f64	d0, d7
 8000af6:	f01b fb67 	bl	801c1c8 <pow>
 8000afa:	eeb0 7b40 	vmov.f64	d7, d0
 8000afe:	ed9f 6b80 	vldr	d6, [pc, #512]	@ 8000d00 <ADS_polyTempToMicrovolts+0x368>
 8000b02:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(temp, 9) * ADS_POLY_NEG_C9 +
 8000b06:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(temp, 11) * ADS_POLY_NEG_C11 +
 8000b0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b12:	eeb2 1b06 	vmov.f64	d1, #38	@ 0x41300000  11.0
 8000b16:	eeb0 0b47 	vmov.f64	d0, d7
 8000b1a:	f01b fb55 	bl	801c1c8 <pow>
 8000b1e:	eeb0 7b40 	vmov.f64	d7, d0
 8000b22:	ed9f 6b79 	vldr	d6, [pc, #484]	@ 8000d08 <ADS_polyTempToMicrovolts+0x370>
 8000b26:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(temp, 10) * ADS_POLY_NEG_C10 +
 8000b2a:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(temp, 12) * ADS_POLY_NEG_C12 +
 8000b2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b36:	eeb2 1b08 	vmov.f64	d1, #40	@ 0x41400000  12.0
 8000b3a:	eeb0 0b47 	vmov.f64	d0, d7
 8000b3e:	f01b fb43 	bl	801c1c8 <pow>
 8000b42:	eeb0 7b40 	vmov.f64	d7, d0
 8000b46:	ed9f 6b72 	vldr	d6, [pc, #456]	@ 8000d10 <ADS_polyTempToMicrovolts+0x378>
 8000b4a:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(temp, 11) * ADS_POLY_NEG_C11 +
 8000b4e:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(temp, 13) * ADS_POLY_NEG_C13 +
 8000b52:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b5a:	eeb2 1b0a 	vmov.f64	d1, #42	@ 0x41500000  13.0
 8000b5e:	eeb0 0b47 	vmov.f64	d0, d7
 8000b62:	f01b fb31 	bl	801c1c8 <pow>
 8000b66:	eeb0 7b40 	vmov.f64	d7, d0
 8000b6a:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8000d18 <ADS_polyTempToMicrovolts+0x380>
 8000b6e:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(temp, 12) * ADS_POLY_NEG_C12 +
 8000b72:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(temp, 14) * ADS_POLY_NEG_C14;
 8000b76:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b7e:	eeb2 1b0c 	vmov.f64	d1, #44	@ 0x41600000  14.0
 8000b82:	eeb0 0b47 	vmov.f64	d0, d7
 8000b86:	f01b fb1f 	bl	801c1c8 <pow>
 8000b8a:	eeb0 7b40 	vmov.f64	d7, d0
 8000b8e:	ed9f 6b64 	vldr	d6, [pc, #400]	@ 8000d20 <ADS_polyTempToMicrovolts+0x388>
 8000b92:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(temp, 13) * ADS_POLY_NEG_C13 +
 8000b96:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000b9a:	e085      	b.n	8000ca8 <ADS_polyTempToMicrovolts+0x310>
	}
	else {
		return temp * ADS_POLY_POS_C1 +
 8000b9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ba0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ba4:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 8000cb8 <ADS_polyTempToMicrovolts+0x320>
 8000ba8:	ee27 8b06 	vmul.f64	d8, d7, d6
				pow(temp, 2) * ADS_POLY_POS_C2 +
 8000bac:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bb4:	eeb0 1b00 	vmov.f64	d1, #0	@ 0x40000000  2.0
 8000bb8:	eeb0 0b47 	vmov.f64	d0, d7
 8000bbc:	f01b fb04 	bl	801c1c8 <pow>
 8000bc0:	eeb0 7b40 	vmov.f64	d7, d0
 8000bc4:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8000d28 <ADS_polyTempToMicrovolts+0x390>
 8000bc8:	ee27 7b06 	vmul.f64	d7, d7, d6
		return temp * ADS_POLY_POS_C1 +
 8000bcc:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(temp, 3) * ADS_POLY_POS_C3 +
 8000bd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd8:	eeb0 1b08 	vmov.f64	d1, #8	@ 0x40400000  3.0
 8000bdc:	eeb0 0b47 	vmov.f64	d0, d7
 8000be0:	f01b faf2 	bl	801c1c8 <pow>
 8000be4:	eeb0 7b40 	vmov.f64	d7, d0
 8000be8:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8000d30 <ADS_polyTempToMicrovolts+0x398>
 8000bec:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(temp, 2) * ADS_POLY_POS_C2 +
 8000bf0:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(temp, 4) * ADS_POLY_POS_C4 +
 8000bf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bf8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bfc:	eeb1 1b00 	vmov.f64	d1, #16	@ 0x40800000  4.0
 8000c00:	eeb0 0b47 	vmov.f64	d0, d7
 8000c04:	f01b fae0 	bl	801c1c8 <pow>
 8000c08:	eeb0 7b40 	vmov.f64	d7, d0
 8000c0c:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8000d38 <ADS_polyTempToMicrovolts+0x3a0>
 8000c10:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(temp, 3) * ADS_POLY_POS_C3 +
 8000c14:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(temp, 5) * ADS_POLY_POS_C5 +
 8000c18:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c20:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 8000c24:	eeb0 0b47 	vmov.f64	d0, d7
 8000c28:	f01b face 	bl	801c1c8 <pow>
 8000c2c:	eeb0 7b40 	vmov.f64	d7, d0
 8000c30:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 8000d40 <ADS_polyTempToMicrovolts+0x3a8>
 8000c34:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(temp, 4) * ADS_POLY_POS_C4 +
 8000c38:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(temp, 6) * ADS_POLY_POS_C6 +
 8000c3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c44:	eeb1 1b08 	vmov.f64	d1, #24	@ 0x40c00000  6.0
 8000c48:	eeb0 0b47 	vmov.f64	d0, d7
 8000c4c:	f01b fabc 	bl	801c1c8 <pow>
 8000c50:	eeb0 7b40 	vmov.f64	d7, d0
 8000c54:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 8000d48 <ADS_polyTempToMicrovolts+0x3b0>
 8000c58:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(temp, 5) * ADS_POLY_POS_C5 +
 8000c5c:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(temp, 7) * ADS_POLY_POS_C7 +
 8000c60:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c68:	eeb1 1b0c 	vmov.f64	d1, #28	@ 0x40e00000  7.0
 8000c6c:	eeb0 0b47 	vmov.f64	d0, d7
 8000c70:	f01b faaa 	bl	801c1c8 <pow>
 8000c74:	eeb0 7b40 	vmov.f64	d7, d0
 8000c78:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 8000d50 <ADS_polyTempToMicrovolts+0x3b8>
 8000c7c:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(temp, 6) * ADS_POLY_POS_C6 +
 8000c80:	ee38 8b07 	vadd.f64	d8, d8, d7
				pow(temp, 8) * ADS_POLY_POS_C8;
 8000c84:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c8c:	eeb2 1b00 	vmov.f64	d1, #32	@ 0x41000000  8.0
 8000c90:	eeb0 0b47 	vmov.f64	d0, d7
 8000c94:	f01b fa98 	bl	801c1c8 <pow>
 8000c98:	eeb0 7b40 	vmov.f64	d7, d0
 8000c9c:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8000d58 <ADS_polyTempToMicrovolts+0x3c0>
 8000ca0:	ee27 7b06 	vmul.f64	d7, d7, d6
				pow(temp, 7) * ADS_POLY_POS_C7 +
 8000ca4:	ee38 7b07 	vadd.f64	d7, d8, d7
	}
}
 8000ca8:	eeb0 0b47 	vmov.f64	d0, d7
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	ecbd 8b02 	vpop	{d8}
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	f307a79d 	.word	0xf307a79d
 8000cbc:	40435fc1 	.word	0x40435fc1
 8000cc0:	245f04e2 	.word	0x245f04e2
 8000cc4:	3fa6a0a7 	.word	0x3fa6a0a7
 8000cc8:	3715559b 	.word	0x3715559b
 8000ccc:	3f1f0c97 	.word	0x3f1f0c97
 8000cd0:	75c8eadb 	.word	0x75c8eadb
 8000cd4:	3ef5018f 	.word	0x3ef5018f
 8000cd8:	031f4dfa 	.word	0x031f4dfa
 8000cdc:	3eae3ecc 	.word	0x3eae3ecc
 8000ce0:	719125bf 	.word	0x719125bf
 8000ce4:	3e58524d 	.word	0x3e58524d
 8000ce8:	5dca1250 	.word	0x5dca1250
 8000cec:	3df8c9b4 	.word	0x3df8c9b4
 8000cf0:	46f6d4d1 	.word	0x46f6d4d1
 8000cf4:	3d90ee08 	.word	0x3d90ee08
 8000cf8:	79359570 	.word	0x79359570
 8000cfc:	3d1fc3fe 	.word	0x3d1fc3fe
 8000d00:	11faf910 	.word	0x11faf910
 8000d04:	3ca489e9 	.word	0x3ca489e9
 8000d08:	e687f83b 	.word	0xe687f83b
 8000d0c:	3c21fe11 	.word	0x3c21fe11
 8000d10:	07e29426 	.word	0x07e29426
 8000d14:	3b946467 	.word	0x3b946467
 8000d18:	3149ede1 	.word	0x3149ede1
 8000d1c:	3afaf93e 	.word	0x3afaf93e
 8000d20:	a2a3803a 	.word	0xa2a3803a
 8000d24:	3a4f9c30 	.word	0x3a4f9c30
 8000d28:	cbe941b4 	.word	0xcbe941b4
 8000d2c:	3fa10bad 	.word	0x3fa10bad
 8000d30:	9f571c59 	.word	0x9f571c59
 8000d34:	3f2b0655 	.word	0x3f2b0655
 8000d38:	cace230a 	.word	0xcace230a
 8000d3c:	bec25b2d 	.word	0xbec25b2d
 8000d40:	66cbefd2 	.word	0x66cbefd2
 8000d44:	3e479d99 	.word	0x3e479d99
 8000d48:	b7c08b66 	.word	0xb7c08b66
 8000d4c:	bdc0f0ee 	.word	0xbdc0f0ee
 8000d50:	f053a7dd 	.word	0xf053a7dd
 8000d54:	3d299a3b 	.word	0x3d299a3b
 8000d58:	1347b6b5 	.word	0x1347b6b5
 8000d5c:	bc7fb860 	.word	0xbc7fb860

08000d60 <ADSTC_chipRelease>:

void ADSTC_chipSelect(ADS_TC_t *ADS) {
	HAL_GPIO_WritePin(ADS->CS_GPIO_Port, ADS->CS_GPIO_Pin, 0);
}

void ADSTC_chipRelease(ADS_TC_t *ADS) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ADS->CS_GPIO_Port, ADS->CS_GPIO_Pin, 1);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68d8      	ldr	r0, [r3, #12]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	8a1b      	ldrh	r3, [r3, #16]
 8000d70:	2201      	movs	r2, #1
 8000d72:	4619      	mov	r1, r3
 8000d74:	f004 ff30 	bl	8005bd8 <HAL_GPIO_WritePin>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <ADS_configTC>:

void ADS_configTC(ADS_TC_t *ADSTC, SPI_HandleTypeDef* hspi, GPIO_TypeDef *DOUT_GPIO_Port, uint16_t DOUT_GPIO_Pin, uint16_t SPI_TIMEOUT, GPIO_TypeDef *CS_GPIO_Port, uint16_t CS_GPIO_Pin, uint8_t mux, uint8_t gain, uint8_t rate) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	807b      	strh	r3, [r7, #2]
	ADSTC->hspi = hspi;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	68ba      	ldr	r2, [r7, #8]
 8000d92:	601a      	str	r2, [r3, #0]
	ADSTC->DOUT_GPIO_Port = DOUT_GPIO_Port;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	605a      	str	r2, [r3, #4]
	ADSTC->DOUT_GPIO_Pin = DOUT_GPIO_Pin;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	887a      	ldrh	r2, [r7, #2]
 8000d9e:	811a      	strh	r2, [r3, #8]
	ADSTC->SPI_TIMEOUT = SPI_TIMEOUT;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	8b3a      	ldrh	r2, [r7, #24]
 8000da4:	815a      	strh	r2, [r3, #10]
	ADSTC->CS_GPIO_Port = CS_GPIO_Port;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	69fa      	ldr	r2, [r7, #28]
 8000daa:	60da      	str	r2, [r3, #12]
	ADSTC->CS_GPIO_Pin = CS_GPIO_Pin;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	8c3a      	ldrh	r2, [r7, #32]
 8000db0:	821a      	strh	r2, [r3, #16]
	ADSTC->mux = mux;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000db8:	749a      	strb	r2, [r3, #18]
	ADSTC->gain = gain;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000dc0:	74da      	strb	r2, [r3, #19]
	ADSTC->rate = rate;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000dc8:	751a      	strb	r2, [r3, #20]
	ADSTC->step_size = (double)(1e3 / (0x0001 << (4 + (gain >> 1))));
 8000dca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000dce:	085b      	lsrs	r3, r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	3304      	adds	r3, #4
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	ee07 3a90 	vmov	s15, r3
 8000dde:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000de2:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8000e28 <ADS_configTC+0xa8>
 8000de6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	ed83 7b06 	vstr	d7, [r3, #24]
	ADSTC->current_raw = 0;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2200      	movs	r2, #0
 8000df4:	841a      	strh	r2, [r3, #32]
	ADSTC->reading_semaphore = xSemaphoreCreateBinary();
 8000df6:	2203      	movs	r2, #3
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f00c ff99 	bl	800dd32 <xQueueGenericCreate>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	631a      	str	r2, [r3, #48]	@ 0x30
	xSemaphoreGive(ADSTC->reading_semaphore);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	f00d f914 	bl	800e03c <xQueueGenericSend>

	ADSTC_chipRelease(ADSTC); // In case something weird happened
 8000e14:	68f8      	ldr	r0, [r7, #12]
 8000e16:	f7ff ffa3 	bl	8000d60 <ADSTC_chipRelease>
}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	f3af 8000 	nop.w
 8000e28:	00000000 	.word	0x00000000
 8000e2c:	408f4000 	.word	0x408f4000

08000e30 <ADS_init>:
	ADS->cold_junction_voltage = ADS_polyTempToMicrovolts(cold_junction_temp);

	return ADS_configureChip(ADS, 1);
}*/

int ADS_init(ADS_Main_t *ADSMain, ADS_TC_t *TCs, uint8_t num_TCs) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	71fb      	strb	r3, [r7, #7]
	ADSMain->TCs = TCs;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	68ba      	ldr	r2, [r7, #8]
 8000e42:	605a      	str	r2, [r3, #4]
	ADSMain->TC_count = num_TCs;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	79fa      	ldrb	r2, [r7, #7]
 8000e48:	721a      	strb	r2, [r3, #8]
	ADSMain->raw_temp = 0;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	815a      	strh	r2, [r3, #10]
	ADSMain->last_temp = 0;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
	ADSMain->temp_semaphore = xSemaphoreCreateBinary();
 8000e56:	2203      	movs	r2, #3
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f00c ff69 	bl	800dd32 <xQueueGenericCreate>
 8000e60:	4602      	mov	r2, r0
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	60da      	str	r2, [r3, #12]
	xSemaphoreGive(ADSMain->temp_semaphore);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	68d8      	ldr	r0, [r3, #12]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	f00d f8e4 	bl	800e03c <xQueueGenericSend>

	ADSMain->tc_task = NULL;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
	BaseType_t state = xTaskCreate(vTCTask, "Thermocouple measurement task", 1024, (void *)ADSMain, TC_TASK_PRIORITY, &(ADSMain->tc_task)); //TODO figure out correct stack size
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e88:	4907      	ldr	r1, [pc, #28]	@ (8000ea8 <ADS_init+0x78>)
 8000e8a:	4808      	ldr	r0, [pc, #32]	@ (8000eac <ADS_init+0x7c>)
 8000e8c:	f00d ffae 	bl	800edec <xTaskCreate>
 8000e90:	6178      	str	r0, [r7, #20]
	return state != pdPASS;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	bf14      	ite	ne
 8000e98:	2301      	movne	r3, #1
 8000e9a:	2300      	moveq	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	0801c768 	.word	0x0801c768
 8000eac:	08000f75 	.word	0x08000f75

08000eb0 <ADS_timerStatus>:

// returns 0 if nothing should be done, returns 1 if dout should be checked, returns 2 if reading should be taken and moved on, basically a timeout
uint8_t ADS_timerStatus(ADS_Chip *ADS) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	uint32_t delta_time = HAL_GetTick() - ADS->last_tick;
 8000eb8:	f002 fdd8 	bl	8003a6c <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a1b      	ldr	r3, [r3, #32]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	613b      	str	r3, [r7, #16]
	uint32_t total_time = HAL_GetTick() - ADS->timer_start;
 8000ec6:	f002 fdd1 	bl	8003a6c <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	60fb      	str	r3, [r7, #12]
	uint8_t datarate = 0x00;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	75fb      	strb	r3, [r7, #23]
	if(ADS->current_mux == 2) {
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7f9b      	ldrb	r3, [r3, #30]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d102      	bne.n	8000ee6 <ADS_timerStatus+0x36>
		datarate = ADS_INTERNAL_TEMP_RATE;
 8000ee0:	2360      	movs	r3, #96	@ 0x60
 8000ee2:	75fb      	strb	r3, [r7, #23]
 8000ee4:	e008      	b.n	8000ef8 <ADS_timerStatus+0x48>
	}
	else {
		datarate = ADS->muxes[ADS->current_mux]->rate;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7f9b      	ldrb	r3, [r3, #30]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	3304      	adds	r3, #4
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	7d1b      	ldrb	r3, [r3, #20]
 8000ef6:	75fb      	strb	r3, [r7, #23]
	}
	uint8_t rate_delay = 3;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	75bb      	strb	r3, [r7, #22]
	if(datarate == ADS_DATA_RATE_20) {
 8000efc:	7dfb      	ldrb	r3, [r7, #23]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d102      	bne.n	8000f08 <ADS_timerStatus+0x58>
		rate_delay = 65;
 8000f02:	2341      	movs	r3, #65	@ 0x41
 8000f04:	75bb      	strb	r3, [r7, #22]
 8000f06:	e01c      	b.n	8000f42 <ADS_timerStatus+0x92>
	}
	else if(datarate == ADS_DATA_RATE_45) {
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	2b20      	cmp	r3, #32
 8000f0c:	d102      	bne.n	8000f14 <ADS_timerStatus+0x64>
		rate_delay = 30;
 8000f0e:	231e      	movs	r3, #30
 8000f10:	75bb      	strb	r3, [r7, #22]
 8000f12:	e016      	b.n	8000f42 <ADS_timerStatus+0x92>
	}
	else if(datarate == ADS_DATA_RATE_90) {
 8000f14:	7dfb      	ldrb	r3, [r7, #23]
 8000f16:	2b40      	cmp	r3, #64	@ 0x40
 8000f18:	d102      	bne.n	8000f20 <ADS_timerStatus+0x70>
		rate_delay = 20;
 8000f1a:	2314      	movs	r3, #20
 8000f1c:	75bb      	strb	r3, [r7, #22]
 8000f1e:	e010      	b.n	8000f42 <ADS_timerStatus+0x92>
	}
	else if(datarate == ADS_DATA_RATE_175) {
 8000f20:	7dfb      	ldrb	r3, [r7, #23]
 8000f22:	2b60      	cmp	r3, #96	@ 0x60
 8000f24:	d102      	bne.n	8000f2c <ADS_timerStatus+0x7c>
		rate_delay = 15;
 8000f26:	230f      	movs	r3, #15
 8000f28:	75bb      	strb	r3, [r7, #22]
 8000f2a:	e00a      	b.n	8000f42 <ADS_timerStatus+0x92>
	}
	else if(datarate == ADS_DATA_RATE_330) {
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
 8000f2e:	2b80      	cmp	r3, #128	@ 0x80
 8000f30:	d102      	bne.n	8000f38 <ADS_timerStatus+0x88>
		rate_delay = 10;
 8000f32:	230a      	movs	r3, #10
 8000f34:	75bb      	strb	r3, [r7, #22]
 8000f36:	e004      	b.n	8000f42 <ADS_timerStatus+0x92>
	}
	else if(datarate == ADS_DATA_RATE_600) {
 8000f38:	7dfb      	ldrb	r3, [r7, #23]
 8000f3a:	2ba0      	cmp	r3, #160	@ 0xa0
 8000f3c:	d101      	bne.n	8000f42 <ADS_timerStatus+0x92>
		rate_delay = 5;
 8000f3e:	2305      	movs	r3, #5
 8000f40:	75bb      	strb	r3, [r7, #22]
	}

	if(total_time >= rate_delay + 10) {
 8000f42:	7dbb      	ldrb	r3, [r7, #22]
 8000f44:	330a      	adds	r3, #10
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d301      	bcc.n	8000f52 <ADS_timerStatus+0xa2>
		return 2;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e00b      	b.n	8000f6a <ADS_timerStatus+0xba>
	}
	else if(total_time >= rate_delay) {
 8000f52:	7dbb      	ldrb	r3, [r7, #22]
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d306      	bcc.n	8000f68 <ADS_timerStatus+0xb8>
		return delta_time > 0;
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	bf14      	ite	ne
 8000f60:	2301      	movne	r3, #1
 8000f62:	2300      	moveq	r3, #0
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	e000      	b.n	8000f6a <ADS_timerStatus+0xba>
	}
	return 0;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <vTCTask>:

void vTCTask(void *pvParameters) {
 8000f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f78:	b09f      	sub	sp, #124	@ 0x7c
 8000f7a:	af02      	add	r7, sp, #8
 8000f7c:	60f8      	str	r0, [r7, #12]
	ADS_Main_t *ADS_main = (ADS_Main_t *)pvParameters;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	63bb      	str	r3, [r7, #56]	@ 0x38
	//loop through each tc struct, if its a new chip create a new chip struct, if its a existing chip but a new mux, add the new mux to the chip struct.
	//whenever you make a new chip struct, initialize all the spi fields and mux_count = 0 or 1
	size_t chip_count = 1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	66fb      	str	r3, [r7, #108]	@ 0x6c
	for(int s = 0;s < ADS_main->TC_count - 1;s++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000f8a:	e056      	b.n	800103a <vTCTask+0xc6>
		for(int ss = s+1; ss < ADS_main->TC_count;ss++) {
 8000f8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f8e:	3301      	adds	r3, #1
 8000f90:	667b      	str	r3, [r7, #100]	@ 0x64
 8000f92:	e047      	b.n	8001024 <vTCTask+0xb0>
			if(ADS_main->TCs[s].hspi == ADS_main->TCs[ss].hspi && ADS_main->TCs[s].CS_GPIO_Port == ADS_main->TCs[ss].CS_GPIO_Port && ADS_main->TCs[s].CS_GPIO_Pin == ADS_main->TCs[ss].CS_GPIO_Pin) {
 8000f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f96:	6859      	ldr	r1, [r3, #4]
 8000f98:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	1a9b      	subs	r3, r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	440b      	add	r3, r1
 8000fa4:	6819      	ldr	r1, [r3, #0]
 8000fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fa8:	6858      	ldr	r0, [r3, #4]
 8000faa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000fac:	4613      	mov	r3, r2
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	1a9b      	subs	r3, r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	4403      	add	r3, r0
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d127      	bne.n	800100c <vTCTask+0x98>
 8000fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fbe:	6859      	ldr	r1, [r3, #4]
 8000fc0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	1a9b      	subs	r3, r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	440b      	add	r3, r1
 8000fcc:	68d9      	ldr	r1, [r3, #12]
 8000fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fd0:	6858      	ldr	r0, [r3, #4]
 8000fd2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	1a9b      	subs	r3, r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	4403      	add	r3, r0
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	4299      	cmp	r1, r3
 8000fe2:	d113      	bne.n	800100c <vTCTask+0x98>
 8000fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fe6:	6859      	ldr	r1, [r3, #4]
 8000fe8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000fea:	4613      	mov	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	1a9b      	subs	r3, r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	440b      	add	r3, r1
 8000ff4:	8a19      	ldrh	r1, [r3, #16]
 8000ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ff8:	6858      	ldr	r0, [r3, #4]
 8000ffa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	1a9b      	subs	r3, r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	4403      	add	r3, r0
 8001006:	8a1b      	ldrh	r3, [r3, #16]
 8001008:	4299      	cmp	r1, r3
 800100a:	d012      	beq.n	8001032 <vTCTask+0xbe>
				break;
			}
			if(ss == ADS_main->TC_count - 1) {
 800100c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800100e:	7a1b      	ldrb	r3, [r3, #8]
 8001010:	3b01      	subs	r3, #1
 8001012:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001014:	429a      	cmp	r2, r3
 8001016:	d102      	bne.n	800101e <vTCTask+0xaa>
				chip_count++;
 8001018:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800101a:	3301      	adds	r3, #1
 800101c:	66fb      	str	r3, [r7, #108]	@ 0x6c
		for(int ss = s+1; ss < ADS_main->TC_count;ss++) {
 800101e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001020:	3301      	adds	r3, #1
 8001022:	667b      	str	r3, [r7, #100]	@ 0x64
 8001024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001026:	7a1b      	ldrb	r3, [r3, #8]
 8001028:	461a      	mov	r2, r3
 800102a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800102c:	4293      	cmp	r3, r2
 800102e:	dbb1      	blt.n	8000f94 <vTCTask+0x20>
 8001030:	e000      	b.n	8001034 <vTCTask+0xc0>
				break;
 8001032:	bf00      	nop
	for(int s = 0;s < ADS_main->TC_count - 1;s++) {
 8001034:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001036:	3301      	adds	r3, #1
 8001038:	66bb      	str	r3, [r7, #104]	@ 0x68
 800103a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800103c:	7a1b      	ldrb	r3, [r3, #8]
 800103e:	3b01      	subs	r3, #1
 8001040:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001042:	429a      	cmp	r2, r3
 8001044:	dba2      	blt.n	8000f8c <vTCTask+0x18>
			}
		}
	}
	ADS_Chip connected_chips[chip_count];
 8001046:	6efe      	ldr	r6, [r7, #108]	@ 0x6c
 8001048:	4633      	mov	r3, r6
 800104a:	3b01      	subs	r3, #1
 800104c:	637b      	str	r3, [r7, #52]	@ 0x34
 800104e:	2300      	movs	r3, #0
 8001050:	603e      	str	r6, [r7, #0]
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001058:	f04f 0000 	mov.w	r0, #0
 800105c:	f04f 0100 	mov.w	r1, #0
 8001060:	0099      	lsls	r1, r3, #2
 8001062:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001066:	0090      	lsls	r0, r2, #2
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	6839      	ldr	r1, [r7, #0]
 800106e:	eb12 0801 	adds.w	r8, r2, r1
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	eb43 0901 	adc.w	r9, r3, r1
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001084:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001088:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800108c:	2300      	movs	r3, #0
 800108e:	46b2      	mov	sl, r6
 8001090:	469b      	mov	fp, r3
 8001092:	4652      	mov	r2, sl
 8001094:	465b      	mov	r3, fp
 8001096:	f04f 0000 	mov.w	r0, #0
 800109a:	f04f 0100 	mov.w	r1, #0
 800109e:	0099      	lsls	r1, r3, #2
 80010a0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80010a4:	0090      	lsls	r0, r2, #2
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	eb12 040a 	adds.w	r4, r2, sl
 80010ae:	eb43 050b 	adc.w	r5, r3, fp
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	f04f 0300 	mov.w	r3, #0
 80010ba:	01ab      	lsls	r3, r5, #6
 80010bc:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80010c0:	01a2      	lsls	r2, r4, #6
 80010c2:	4633      	mov	r3, r6
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4433      	add	r3, r6
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	3307      	adds	r3, #7
 80010cc:	08db      	lsrs	r3, r3, #3
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	ebad 0d03 	sub.w	sp, sp, r3
 80010d4:	ab02      	add	r3, sp, #8
 80010d6:	3303      	adds	r3, #3
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	633b      	str	r3, [r7, #48]	@ 0x30
	connected_chips[0].hspi = ADS_main->TCs[0].hspi;
 80010de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010e6:	601a      	str	r2, [r3, #0]
	connected_chips[0].DOUT_GPIO_Port = ADS_main->TCs[0].DOUT_GPIO_Port;
 80010e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010f0:	605a      	str	r2, [r3, #4]
	connected_chips[0].DOUT_GPIO_Pin = ADS_main->TCs[0].DOUT_GPIO_Pin;
 80010f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	891a      	ldrh	r2, [r3, #8]
 80010f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010fa:	811a      	strh	r2, [r3, #8]
	connected_chips[0].SPI_TIMEOUT = ADS_main->TCs[0].SPI_TIMEOUT;
 80010fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	895a      	ldrh	r2, [r3, #10]
 8001102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001104:	815a      	strh	r2, [r3, #10]
	connected_chips[0].CS_GPIO_Port = ADS_main->TCs[0].CS_GPIO_Port;
 8001106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800110e:	60da      	str	r2, [r3, #12]
	connected_chips[0].CS_GPIO_Pin = ADS_main->TCs[0].CS_GPIO_Pin;
 8001110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	8a1a      	ldrh	r2, [r3, #16]
 8001116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001118:	821a      	strh	r2, [r3, #16]
	connected_chips[0].muxes[0] = ADS_main->TCs;
 800111a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001120:	615a      	str	r2, [r3, #20]
	connected_chips[0].mux_count = 1;
 8001122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001124:	2201      	movs	r2, #1
 8001126:	775a      	strb	r2, [r3, #29]
	connected_chips[0].last_state = 0;
 8001128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800112a:	2200      	movs	r2, #0
 800112c:	771a      	strb	r2, [r3, #28]

	uint8_t chip_index = 1;
 800112e:	2301      	movs	r3, #1
 8001130:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	for(int s = 1;s < ADS_main->TC_count;s++) {
 8001134:	2301      	movs	r3, #1
 8001136:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001138:	e158      	b.n	80013ec <vTCTask+0x478>
		uint8_t duplicate = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
		for(int ss = 0; ss < s;ss++) {
 8001140:	2300      	movs	r3, #0
 8001142:	657b      	str	r3, [r7, #84]	@ 0x54
 8001144:	e042      	b.n	80011cc <vTCTask+0x258>
			if(ADS_main->TCs[s].hspi == ADS_main->TCs[ss].hspi && ADS_main->TCs[s].CS_GPIO_Port == ADS_main->TCs[ss].CS_GPIO_Port && ADS_main->TCs[s].CS_GPIO_Pin == ADS_main->TCs[ss].CS_GPIO_Pin) {
 8001146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001148:	6859      	ldr	r1, [r3, #4]
 800114a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800114c:	4613      	mov	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	1a9b      	subs	r3, r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	440b      	add	r3, r1
 8001156:	6819      	ldr	r1, [r3, #0]
 8001158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800115a:	6858      	ldr	r0, [r3, #4]
 800115c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800115e:	4613      	mov	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	1a9b      	subs	r3, r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	4403      	add	r3, r0
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4299      	cmp	r1, r3
 800116c:	d12b      	bne.n	80011c6 <vTCTask+0x252>
 800116e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001170:	6859      	ldr	r1, [r3, #4]
 8001172:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001174:	4613      	mov	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	440b      	add	r3, r1
 800117e:	68d9      	ldr	r1, [r3, #12]
 8001180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001182:	6858      	ldr	r0, [r3, #4]
 8001184:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001186:	4613      	mov	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	1a9b      	subs	r3, r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	4403      	add	r3, r0
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	4299      	cmp	r1, r3
 8001194:	d117      	bne.n	80011c6 <vTCTask+0x252>
 8001196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001198:	6859      	ldr	r1, [r3, #4]
 800119a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800119c:	4613      	mov	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	440b      	add	r3, r1
 80011a6:	8a19      	ldrh	r1, [r3, #16]
 80011a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011aa:	6858      	ldr	r0, [r3, #4]
 80011ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80011ae:	4613      	mov	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	1a9b      	subs	r3, r3, r2
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4403      	add	r3, r0
 80011b8:	8a1b      	ldrh	r3, [r3, #16]
 80011ba:	4299      	cmp	r1, r3
 80011bc:	d103      	bne.n	80011c6 <vTCTask+0x252>
				duplicate = 1;
 80011be:	2301      	movs	r3, #1
 80011c0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				break;
 80011c4:	e006      	b.n	80011d4 <vTCTask+0x260>
		for(int ss = 0; ss < s;ss++) {
 80011c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011c8:	3301      	adds	r3, #1
 80011ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80011cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80011ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011d0:	429a      	cmp	r2, r3
 80011d2:	dbb8      	blt.n	8001146 <vTCTask+0x1d2>
			}
		}
		if(!duplicate) {
 80011d4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f040 80a2 	bne.w	8001322 <vTCTask+0x3ae>
			connected_chips[chip_index].hspi = ADS_main->TCs[s].hspi;
 80011de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011e0:	6859      	ldr	r1, [r3, #4]
 80011e2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80011e4:	4613      	mov	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	1a9b      	subs	r3, r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	440b      	add	r3, r1
 80011ee:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 80011f2:	6819      	ldr	r1, [r3, #0]
 80011f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4403      	add	r3, r0
 8001200:	6019      	str	r1, [r3, #0]
			connected_chips[chip_index].DOUT_GPIO_Port = ADS_main->TCs[s].DOUT_GPIO_Port;
 8001202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001204:	6859      	ldr	r1, [r3, #4]
 8001206:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001208:	4613      	mov	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	440b      	add	r3, r1
 8001212:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 8001216:	6859      	ldr	r1, [r3, #4]
 8001218:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4403      	add	r3, r0
 8001224:	3304      	adds	r3, #4
 8001226:	6019      	str	r1, [r3, #0]
			connected_chips[chip_index].DOUT_GPIO_Pin = ADS_main->TCs[s].DOUT_GPIO_Pin;
 8001228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800122a:	6859      	ldr	r1, [r3, #4]
 800122c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800122e:	4613      	mov	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	1a9b      	subs	r3, r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	440b      	add	r3, r1
 8001238:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 800123c:	8918      	ldrh	r0, [r3, #8]
 800123e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	440b      	add	r3, r1
 800124a:	3308      	adds	r3, #8
 800124c:	4602      	mov	r2, r0
 800124e:	801a      	strh	r2, [r3, #0]
			connected_chips[chip_index].SPI_TIMEOUT = ADS_main->TCs[s].SPI_TIMEOUT;
 8001250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001252:	6859      	ldr	r1, [r3, #4]
 8001254:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001256:	4613      	mov	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	1a9b      	subs	r3, r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	440b      	add	r3, r1
 8001260:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 8001264:	8958      	ldrh	r0, [r3, #10]
 8001266:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	440b      	add	r3, r1
 8001272:	330a      	adds	r3, #10
 8001274:	4602      	mov	r2, r0
 8001276:	801a      	strh	r2, [r3, #0]
			connected_chips[chip_index].CS_GPIO_Port = ADS_main->TCs[s].CS_GPIO_Port;
 8001278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800127e:	4613      	mov	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	1a9b      	subs	r3, r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	440b      	add	r3, r1
 8001288:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 800128c:	68d9      	ldr	r1, [r3, #12]
 800128e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4403      	add	r3, r0
 800129a:	330c      	adds	r3, #12
 800129c:	6019      	str	r1, [r3, #0]
			connected_chips[chip_index].CS_GPIO_Pin = ADS_main->TCs[s].CS_GPIO_Pin;
 800129e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012a0:	6859      	ldr	r1, [r3, #4]
 80012a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80012a4:	4613      	mov	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	1a9b      	subs	r3, r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	440b      	add	r3, r1
 80012ae:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 80012b2:	8a18      	ldrh	r0, [r3, #16]
 80012b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	440b      	add	r3, r1
 80012c0:	3310      	adds	r3, #16
 80012c2:	4602      	mov	r2, r0
 80012c4:	801a      	strh	r2, [r3, #0]
			connected_chips[chip_index].muxes[0] = ADS_main->TCs + s;
 80012c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012c8:	6859      	ldr	r1, [r3, #4]
 80012ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80012cc:	4613      	mov	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	1a9b      	subs	r3, r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 80012d8:	4419      	add	r1, r3
 80012da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4403      	add	r3, r0
 80012e6:	3314      	adds	r3, #20
 80012e8:	6019      	str	r1, [r3, #0]
			connected_chips[chip_index].mux_count = 1;
 80012ea:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 80012ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	440b      	add	r3, r1
 80012fa:	331d      	adds	r3, #29
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]
			connected_chips[chip_index].last_state = 0;
 8001300:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 8001304:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	440b      	add	r3, r1
 8001310:	331c      	adds	r3, #28
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
			chip_index++;
 8001316:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800131a:	3301      	adds	r3, #1
 800131c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
 8001320:	e061      	b.n	80013e6 <vTCTask+0x472>
		}
		else {
			for(int c_index = 0;c_index < chip_index;c_index++) {
 8001322:	2300      	movs	r3, #0
 8001324:	653b      	str	r3, [r7, #80]	@ 0x50
 8001326:	e059      	b.n	80013dc <vTCTask+0x468>
				if(ADS_main->TCs[s].hspi == connected_chips[c_index].hspi && ADS_main->TCs[s].CS_GPIO_Port == connected_chips[c_index].CS_GPIO_Port && ADS_main->TCs[s].CS_GPIO_Pin == connected_chips[c_index].CS_GPIO_Pin) {
 8001328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800132a:	6859      	ldr	r1, [r3, #4]
 800132c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800132e:	4613      	mov	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	1a9b      	subs	r3, r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	440b      	add	r3, r1
 8001338:	6819      	ldr	r1, [r3, #0]
 800133a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800133c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4403      	add	r3, r0
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4299      	cmp	r1, r3
 800134c:	d143      	bne.n	80013d6 <vTCTask+0x462>
 800134e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001350:	6859      	ldr	r1, [r3, #4]
 8001352:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001354:	4613      	mov	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	1a9b      	subs	r3, r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	440b      	add	r3, r1
 800135e:	68d9      	ldr	r1, [r3, #12]
 8001360:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001362:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4403      	add	r3, r0
 800136e:	330c      	adds	r3, #12
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4299      	cmp	r1, r3
 8001374:	d12f      	bne.n	80013d6 <vTCTask+0x462>
 8001376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001378:	6859      	ldr	r1, [r3, #4]
 800137a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800137c:	4613      	mov	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	1a9b      	subs	r3, r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	8a19      	ldrh	r1, [r3, #16]
 8001388:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800138a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4403      	add	r3, r0
 8001396:	3310      	adds	r3, #16
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	4299      	cmp	r1, r3
 800139c:	d11b      	bne.n	80013d6 <vTCTask+0x462>
					connected_chips[c_index].muxes[1] = ADS_main->TCs + s;
 800139e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013a0:	6859      	ldr	r1, [r3, #4]
 80013a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80013a4:	4613      	mov	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	1a9b      	subs	r3, r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4419      	add	r1, r3
 80013ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80013b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4403      	add	r3, r0
 80013bc:	3318      	adds	r3, #24
 80013be:	6019      	str	r1, [r3, #0]
					connected_chips[c_index].mux_count = 2;
 80013c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80013c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	440b      	add	r3, r1
 80013ce:	331d      	adds	r3, #29
 80013d0:	2202      	movs	r2, #2
 80013d2:	701a      	strb	r2, [r3, #0]
					break;
 80013d4:	e007      	b.n	80013e6 <vTCTask+0x472>
			for(int c_index = 0;c_index < chip_index;c_index++) {
 80013d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013d8:	3301      	adds	r3, #1
 80013da:	653b      	str	r3, [r7, #80]	@ 0x50
 80013dc:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80013e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80013e2:	429a      	cmp	r2, r3
 80013e4:	dba0      	blt.n	8001328 <vTCTask+0x3b4>
	for(int s = 1;s < ADS_main->TC_count;s++) {
 80013e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013e8:	3301      	adds	r3, #1
 80013ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80013ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013ee:	7a1b      	ldrb	r3, [r3, #8]
 80013f0:	461a      	mov	r2, r3
 80013f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013f4:	4293      	cmp	r3, r2
 80013f6:	f6ff aea0 	blt.w	800113a <vTCTask+0x1c6>
	}

	// connected_chips should be populated with all used chips, and their muxes, and the first chip should be used to get internal temperature

	//reset
	for(int k = 0;k < chip_count;k++) {
 80013fa:	2300      	movs	r3, #0
 80013fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013fe:	e012      	b.n	8001426 <vTCTask+0x4b2>
		uint8_t reset_cmd[1] = {0x07};
 8001400:	2307      	movs	r3, #7
 8001402:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
		ADS_write(&(connected_chips[k]), reset_cmd, 1);
 8001406:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001412:	4413      	add	r3, r2
 8001414:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001418:	2201      	movs	r2, #1
 800141a:	4618      	mov	r0, r3
 800141c:	f000 faca 	bl	80019b4 <ADS_write>
	for(int k = 0;k < chip_count;k++) {
 8001420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001422:	3301      	adds	r3, #1
 8001424:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001428:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800142a:	429a      	cmp	r2, r3
 800142c:	d8e8      	bhi.n	8001400 <vTCTask+0x48c>
		delay_us(25);
		ADS_chipRelease(&(connected_chips[k]));*/


	}
	vTaskDelay(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f00d fe3a 	bl	800f0a8 <vTaskDelay>
	//config each chip with first mux
	for(int k = 0;k < chip_count;k++) {
 8001434:	2300      	movs	r3, #0
 8001436:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001438:	e048      	b.n	80014cc <vTCTask+0x558>
		if(k == 0) {
 800143a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800143c:	2b00      	cmp	r3, #0
 800143e:	d116      	bne.n	800146e <vTCTask+0x4fa>
			ADS_configure(&(connected_chips[k]), 2, 0);
 8001440:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800144c:	4413      	add	r3, r2
 800144e:	2200      	movs	r2, #0
 8001450:	2102      	movs	r1, #2
 8001452:	4618      	mov	r0, r3
 8001454:	f000 fb22 	bl	8001a9c <ADS_configure>
			connected_chips[k].current_mux = 2;
 8001458:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800145a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	440b      	add	r3, r1
 8001466:	331e      	adds	r3, #30
 8001468:	2202      	movs	r2, #2
 800146a:	701a      	strb	r2, [r3, #0]
 800146c:	e015      	b.n	800149a <vTCTask+0x526>
		}
		else {
			ADS_configure(&(connected_chips[k]), 0, 0);
 800146e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800147a:	4413      	add	r3, r2
 800147c:	2200      	movs	r2, #0
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f000 fb0b 	bl	8001a9c <ADS_configure>
			connected_chips[k].current_mux = 0;
 8001486:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001488:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	440b      	add	r3, r1
 8001494:	331e      	adds	r3, #30
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
		}
		connected_chips[k].last_tick = HAL_GetTick();
 800149a:	f002 fae7 	bl	8003a6c <HAL_GetTick>
 800149e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80014a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	440b      	add	r3, r1
 80014ac:	3320      	adds	r3, #32
 80014ae:	6018      	str	r0, [r3, #0]
		connected_chips[k].timer_start = HAL_GetTick();
 80014b0:	f002 fadc 	bl	8003a6c <HAL_GetTick>
 80014b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80014b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	440b      	add	r3, r1
 80014c2:	3324      	adds	r3, #36	@ 0x24
 80014c4:	6018      	str	r0, [r3, #0]
	for(int k = 0;k < chip_count;k++) {
 80014c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014c8:	3301      	adds	r3, #1
 80014ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80014cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014ce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8b2      	bhi.n	800143a <vTCTask+0x4c6>
	}

	for(;;) {
		for(int k = 0;k < chip_count;k++) {
 80014d4:	2300      	movs	r3, #0
 80014d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80014d8:	e263      	b.n	80019a2 <vTCTask+0xa2e>
			// update last_tick after timer returns 1 and dout is checked
			// update timer_start and last_tick after mux is changed

			// also if this is the first chip, get internal temp on timer
			
			uint8_t read_and_switch = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
			uint8_t timer = ADS_timerStatus(&(connected_chips[k]));
 80014e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014ec:	4413      	add	r3, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fcde 	bl	8000eb0 <ADS_timerStatus>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if(timer == 1) {
 80014fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d13d      	bne.n	800157e <vTCTask+0x60a>
				ADS_chipSelect(&(connected_chips[k]));
 8001502:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800150e:	4413      	add	r3, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f000 faa3 	bl	8001a5c <ADS_chipSelect>
				delay_us(1);
 8001516:	2001      	movs	r0, #1
 8001518:	f7ff f8e0 	bl	80006dc <delay_us>
				if(!HAL_GPIO_ReadPin(connected_chips[k].DOUT_GPIO_Port, connected_chips[k].DOUT_GPIO_Pin)) {
 800151c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800151e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	440b      	add	r3, r1
 800152a:	3304      	adds	r3, #4
 800152c:	6818      	ldr	r0, [r3, #0]
 800152e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001530:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	440b      	add	r3, r1
 800153c:	3308      	adds	r3, #8
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	f004 fb31 	bl	8005ba8 <HAL_GPIO_ReadPin>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d103      	bne.n	8001554 <vTCTask+0x5e0>
					read_and_switch = 1;
 800154c:	2301      	movs	r3, #1
 800154e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001552:	e014      	b.n	800157e <vTCTask+0x60a>
				}
				else {
					ADS_chipRelease(&(connected_chips[k]));
 8001554:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001560:	4413      	add	r3, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fa8a 	bl	8001a7c <ADS_chipRelease>
					connected_chips[k].last_tick = HAL_GetTick();
 8001568:	f002 fa80 	bl	8003a6c <HAL_GetTick>
 800156c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800156e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	3320      	adds	r3, #32
 800157c:	6018      	str	r0, [r3, #0]
				}
			}

			if(timer == 2 || read_and_switch) {
 800157e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001582:	2b02      	cmp	r3, #2
 8001584:	d004      	beq.n	8001590 <vTCTask+0x61c>
 8001586:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 8206 	beq.w	800199c <vTCTask+0xa28>
				uint8_t next_index = connected_chips[k].current_mux + 1;
 8001590:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001592:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	440b      	add	r3, r1
 800159e:	331e      	adds	r3, #30
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
				uint8_t conf_byte_1 = 0x00;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
				uint8_t conf_byte_2 = 0x00;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

				if(k == 0 && HAL_GetTick() - ADS_main->last_temp > ADS_INTERNAL_TEMP_DELAY && connected_chips[k].current_mux != 2) {
 80015b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d11d      	bne.n	80015f6 <vTCTask+0x682>
 80015ba:	f002 fa57 	bl	8003a6c <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015ca:	d914      	bls.n	80015f6 <vTCTask+0x682>
 80015cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80015ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	331e      	adds	r3, #30
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d009      	beq.n	80015f6 <vTCTask+0x682>
					next_index = 2;
 80015e2:	2302      	movs	r3, #2
 80015e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
					conf_byte_1 = 0x00 | 0x00 | ADS_PGA_ENABLED;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
					conf_byte_2 = ADS_INTERNAL_TEMP_RATE | ADS_MODE_NORMAL | ADS_CONV_MODE_SING | ADS_INTERNAL_TEMP_ENABLED | ADS_BURN_OUT_DISABLED;
 80015ee:	2362      	movs	r3, #98	@ 0x62
 80015f0:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 80015f4:	e03e      	b.n	8001674 <vTCTask+0x700>
				}
				else {
					if(next_index >= connected_chips[k].mux_count) {
 80015f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80015f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	331d      	adds	r3, #29
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800160c:	429a      	cmp	r2, r3
 800160e:	d302      	bcc.n	8001616 <vTCTask+0x6a2>
						next_index = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
					}

					conf_byte_1 = connected_chips[k].muxes[next_index]->mux | connected_chips[k].muxes[next_index]->gain | ADS_PGA_ENABLED;
 8001616:	f897 0042 	ldrb.w	r0, [r7, #66]	@ 0x42
 800161a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800161c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4403      	add	r3, r0
 8001628:	3304      	adds	r3, #4
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	7c99      	ldrb	r1, [r3, #18]
 8001632:	f897 4042 	ldrb.w	r4, [r7, #66]	@ 0x42
 8001636:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001638:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4423      	add	r3, r4
 8001644:	3304      	adds	r3, #4
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4403      	add	r3, r0
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	7cdb      	ldrb	r3, [r3, #19]
 800164e:	430b      	orrs	r3, r1
 8001650:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
					conf_byte_2 = connected_chips[k].muxes[next_index]->rate | ADS_MODE_NORMAL | ADS_CONV_MODE_SING | ADS_INTERNAL_TEMP_DISABLED | ADS_BURN_OUT_DISABLED;
 8001654:	f897 0042 	ldrb.w	r0, [r7, #66]	@ 0x42
 8001658:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800165a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4403      	add	r3, r0
 8001666:	3304      	adds	r3, #4
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	440b      	add	r3, r1
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	7d1b      	ldrb	r3, [r3, #20]
 8001670:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
				}

				ADS_chipSelect(&(connected_chips[k]));
 8001674:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001680:	4413      	add	r3, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f9ea 	bl	8001a5c <ADS_chipSelect>
				delay_us(50);
 8001688:	2032      	movs	r0, #50	@ 0x32
 800168a:	f7ff f827 	bl	80006dc <delay_us>

				uint8_t MSB = 0x00;
 800168e:	2300      	movs	r3, #0
 8001690:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				uint8_t LSB = 0x00;
 8001694:	2300      	movs	r3, #0
 8001696:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

				if(read_and_switch) { // normal reading, clock out reading and replace conf in one step
 800169a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d035      	beq.n	800170e <vTCTask+0x79a>
					uint8_t txbuffer[4] = {0x00, 0x41, conf_byte_1, conf_byte_2};
 80016a2:	2300      	movs	r3, #0
 80016a4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80016a8:	2341      	movs	r3, #65	@ 0x41
 80016aa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80016ae:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80016b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80016b6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80016ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					uint8_t rxbuffer[4] = {0x00, 0x00, 0x00, 0x00};
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
					//uint8_t txbuffer[4] = {0x00, 0x00, 0x00, 0x00};
					//uint8_t rxbuffer[4] = {0x00, 0x00, 0x00, 0x00};

					taskENTER_CRITICAL();
 80016c2:	f00f f819 	bl	80106f8 <vPortEnterCritical>
					HAL_SPI_TransmitReceive(connected_chips[k].hspi, txbuffer, rxbuffer, 4, connected_chips[k].SPI_TIMEOUT);
 80016c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80016c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80016d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	440b      	add	r3, r1
 80016e4:	330a      	adds	r3, #10
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	f107 0220 	add.w	r2, r7, #32
 80016ec:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2304      	movs	r3, #4
 80016f4:	f008 f838 	bl	8009768 <HAL_SPI_TransmitReceive>
					taskEXIT_CRITICAL();
 80016f8:	f00f f830 	bl	801075c <vPortExitCritical>

					MSB = rxbuffer[0];
 80016fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001700:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					LSB = rxbuffer[1];
 8001704:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001708:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800170c:	e057      	b.n	80017be <vTCTask+0x84a>
					/*
					RDATA command with 16 extra clock cycles?
					delay 1us
					write conf
					 */
					uint8_t read_txbuffer[3] = {0x10, 0x00, 0x00};
 800170e:	4aa8      	ldr	r2, [pc, #672]	@ (80019b0 <vTCTask+0xa3c>)
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	4611      	mov	r1, r2
 8001718:	8019      	strh	r1, [r3, #0]
 800171a:	3302      	adds	r3, #2
 800171c:	0c12      	lsrs	r2, r2, #16
 800171e:	701a      	strb	r2, [r3, #0]
					uint8_t rxbuffer[3] = {0x00, 0x00, 0x00};
 8001720:	f107 0318 	add.w	r3, r7, #24
 8001724:	2100      	movs	r1, #0
 8001726:	460a      	mov	r2, r1
 8001728:	801a      	strh	r2, [r3, #0]
 800172a:	460a      	mov	r2, r1
 800172c:	709a      	strb	r2, [r3, #2]

					taskENTER_CRITICAL();
 800172e:	f00e ffe3 	bl	80106f8 <vPortEnterCritical>
					HAL_SPI_TransmitReceive(connected_chips[k].hspi, read_txbuffer, rxbuffer, 3, connected_chips[k].SPI_TIMEOUT);
 8001732:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001734:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	440b      	add	r3, r1
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001744:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	330a      	adds	r3, #10
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	f107 0218 	add.w	r2, r7, #24
 8001758:	f107 011c 	add.w	r1, r7, #28
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	2303      	movs	r3, #3
 8001760:	f008 f802 	bl	8009768 <HAL_SPI_TransmitReceive>
					taskEXIT_CRITICAL();
 8001764:	f00e fffa 	bl	801075c <vPortExitCritical>

					delay_us(1);
 8001768:	2001      	movs	r0, #1
 800176a:	f7fe ffb7 	bl	80006dc <delay_us>

					uint8_t txbuffer[3] = {0x41, conf_byte_1, conf_byte_2};
 800176e:	2341      	movs	r3, #65	@ 0x41
 8001770:	753b      	strb	r3, [r7, #20]
 8001772:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8001776:	757b      	strb	r3, [r7, #21]
 8001778:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800177c:	75bb      	strb	r3, [r7, #22]

					taskENTER_CRITICAL();
 800177e:	f00e ffbb 	bl	80106f8 <vPortEnterCritical>
					HAL_SPI_Transmit(connected_chips[k].hspi, txbuffer, 3, connected_chips[k].SPI_TIMEOUT);
 8001782:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001784:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001794:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	330a      	adds	r3, #10
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	f107 0114 	add.w	r1, r7, #20
 80017a8:	2203      	movs	r2, #3
 80017aa:	f007 fb7d 	bl	8008ea8 <HAL_SPI_Transmit>
					taskEXIT_CRITICAL();
 80017ae:	f00e ffd5 	bl	801075c <vPortExitCritical>

					MSB = rxbuffer[1];
 80017b2:	7e7b      	ldrb	r3, [r7, #25]
 80017b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					LSB = rxbuffer[2];
 80017b8:	7ebb      	ldrb	r3, [r7, #26]
 80017ba:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
				}

				uint8_t startcmd[1] = {0x08};
 80017be:	2308      	movs	r3, #8
 80017c0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

				taskENTER_CRITICAL();
 80017c4:	f00e ff98 	bl	80106f8 <vPortEnterCritical>
				HAL_SPI_Transmit(connected_chips[k].hspi, startcmd, 1, connected_chips[k].SPI_TIMEOUT);
 80017c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80017ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	6818      	ldr	r0, [r3, #0]
 80017d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80017da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	330a      	adds	r3, #10
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80017ee:	2201      	movs	r2, #1
 80017f0:	f007 fb5a 	bl	8008ea8 <HAL_SPI_Transmit>
				taskEXIT_CRITICAL();
 80017f4:	f00e ffb2 	bl	801075c <vPortExitCritical>

				delay_us(25);
 80017f8:	2019      	movs	r0, #25
 80017fa:	f7fe ff6f 	bl	80006dc <delay_us>
				ADS_chipRelease(&(connected_chips[k]));
 80017fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800180a:	4413      	add	r3, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f000 f935 	bl	8001a7c <ADS_chipRelease>

				if(connected_chips[k].current_mux == 2) {
 8001812:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001814:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	331e      	adds	r3, #30
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d124      	bne.n	8001872 <vTCTask+0x8fe>
					if(xSemaphoreTake(ADS_main->temp_semaphore, (TickType_t) 2) == pdTRUE) {
 8001828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2102      	movs	r1, #2
 800182e:	4618      	mov	r0, r3
 8001830:	f00c ff16 	bl	800e660 <xQueueSemaphoreTake>
 8001834:	4603      	mov	r3, r0
 8001836:	2b01      	cmp	r3, #1
 8001838:	d115      	bne.n	8001866 <vTCTask+0x8f2>
						ADS_main->raw_temp = ((MSB << 8) | LSB) & 0xFFFC;
 800183a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800183e:	b21b      	sxth	r3, r3
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b21a      	sxth	r2, r3
 8001844:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001848:	b21b      	sxth	r3, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	b21b      	sxth	r3, r3
 800184e:	f023 0303 	bic.w	r3, r3, #3
 8001852:	b21a      	sxth	r2, r3
 8001854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001856:	815a      	strh	r2, [r3, #10]

						xSemaphoreGive(ADS_main->temp_semaphore);
 8001858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800185a:	68d8      	ldr	r0, [r3, #12]
 800185c:	2300      	movs	r3, #0
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	f00c fbeb 	bl	800e03c <xQueueGenericSend>
					}
					ADS_main->last_temp = HAL_GetTick();
 8001866:	f002 f901 	bl	8003a6c <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800186e:	611a      	str	r2, [r3, #16]
 8001870:	e073      	b.n	800195a <vTCTask+0x9e6>
				}
				else {
					if(xSemaphoreTake(connected_chips[k].muxes[connected_chips[k].current_mux]->reading_semaphore, (TickType_t) 2) == pdTRUE) {
 8001872:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001874:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	440b      	add	r3, r1
 8001880:	331e      	adds	r3, #30
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001888:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4403      	add	r3, r0
 8001894:	3304      	adds	r3, #4
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	2102      	movs	r1, #2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f00c fedd 	bl	800e660 <xQueueSemaphoreTake>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d156      	bne.n	800195a <vTCTask+0x9e6>
						connected_chips[k].muxes[connected_chips[k].current_mux]->current_raw = (MSB << 8) | LSB;
 80018ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	b218      	sxth	r0, r3
 80018b6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80018ba:	b219      	sxth	r1, r3
 80018bc:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 80018be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4423      	add	r3, r4
 80018ca:	331e      	adds	r3, #30
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	461d      	mov	r5, r3
 80018d0:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 80018d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	442b      	add	r3, r5
 80018de:	3304      	adds	r3, #4
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4423      	add	r3, r4
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	ea40 0201 	orr.w	r2, r0, r1
 80018ea:	b212      	sxth	r2, r2
 80018ec:	841a      	strh	r2, [r3, #32]
						connected_chips[k].muxes[connected_chips[k].current_mux]->timestamp = getTimestamp();
 80018ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80018f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	331e      	adds	r3, #30
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001904:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4403      	add	r3, r0
 8001910:	3304      	adds	r3, #4
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	685c      	ldr	r4, [r3, #4]
 8001918:	f000 f9ea 	bl	8001cf0 <getTimestamp>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	e9c4 230a 	strd	r2, r3, [r4, #40]	@ 0x28
						xSemaphoreGive(connected_chips[k].muxes[connected_chips[k].current_mux]->reading_semaphore);
 8001924:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	331e      	adds	r3, #30
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800193a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4403      	add	r3, r0
 8001946:	3304      	adds	r3, #4
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001950:	2300      	movs	r3, #0
 8001952:	2200      	movs	r2, #0
 8001954:	2100      	movs	r1, #0
 8001956:	f00c fb71 	bl	800e03c <xQueueGenericSend>
					}
				}

				connected_chips[k].current_mux = next_index;
 800195a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800195c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	440b      	add	r3, r1
 8001968:	331e      	adds	r3, #30
 800196a:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800196e:	701a      	strb	r2, [r3, #0]
				connected_chips[k].last_tick = HAL_GetTick();
 8001970:	f002 f87c 	bl	8003a6c <HAL_GetTick>
 8001974:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001976:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	440b      	add	r3, r1
 8001982:	3320      	adds	r3, #32
 8001984:	6018      	str	r0, [r3, #0]
				connected_chips[k].timer_start = HAL_GetTick();
 8001986:	f002 f871 	bl	8003a6c <HAL_GetTick>
 800198a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800198c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	3324      	adds	r3, #36	@ 0x24
 800199a:	6018      	str	r0, [r3, #0]
		for(int k = 0;k < chip_count;k++) {
 800199c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800199e:	3301      	adds	r3, #1
 80019a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80019a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80019a6:	429a      	cmp	r2, r3
 80019a8:	f63f ad97 	bhi.w	80014da <vTCTask+0x566>
 80019ac:	e592      	b.n	80014d4 <vTCTask+0x560>
 80019ae:	bf00      	nop
 80019b0:	0801c788 	.word	0x0801c788

080019b4 <ADS_write>:
			}
		}
	}
}

HAL_StatusTypeDef ADS_write(ADS_Chip *ADS, uint8_t *tx_buffer, uint8_t num_bytes) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	4613      	mov	r3, r2
 80019c0:	71fb      	strb	r3, [r7, #7]
	ADS_chipSelect(ADS);
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 f84a 	bl	8001a5c <ADS_chipSelect>

	delay_us(50);
 80019c8:	2032      	movs	r0, #50	@ 0x32
 80019ca:	f7fe fe87 	bl	80006dc <delay_us>
	taskENTER_CRITICAL();
 80019ce:	f00e fe93 	bl	80106f8 <vPortEnterCritical>
	HAL_StatusTypeDef status = HAL_SPI_Transmit(ADS->hspi, tx_buffer, num_bytes, ADS->SPI_TIMEOUT);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	895b      	ldrh	r3, [r3, #10]
 80019de:	68b9      	ldr	r1, [r7, #8]
 80019e0:	f007 fa62 	bl	8008ea8 <HAL_SPI_Transmit>
 80019e4:	4603      	mov	r3, r0
 80019e6:	75fb      	strb	r3, [r7, #23]
	taskEXIT_CRITICAL();
 80019e8:	f00e feb8 	bl	801075c <vPortExitCritical>

	delay_us(25);
 80019ec:	2019      	movs	r0, #25
 80019ee:	f7fe fe75 	bl	80006dc <delay_us>
	ADS_chipRelease(ADS);
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 f842 	bl	8001a7c <ADS_chipRelease>

	return status;
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <ADS_read>:

HAL_StatusTypeDef ADS_read(ADS_Chip *ADS, uint8_t reg_addr, uint8_t *rx_buffer, uint8_t num_bytes) {
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	460b      	mov	r3, r1
 8001a10:	72fb      	strb	r3, [r7, #11]
 8001a12:	4613      	mov	r3, r2
 8001a14:	72bb      	strb	r3, [r7, #10]
	taskENTER_CRITICAL();
 8001a16:	f00e fe6f 	bl	80106f8 <vPortEnterCritical>

	ADS_chipSelect(ADS);
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 f81e 	bl	8001a5c <ADS_chipSelect>
	HAL_SPI_Transmit(ADS->hspi, &reg_addr, 1, ADS->SPI_TIMEOUT);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	895b      	ldrh	r3, [r3, #10]
 8001a28:	f107 010b 	add.w	r1, r7, #11
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f007 fa3b 	bl	8008ea8 <HAL_SPI_Transmit>
	HAL_StatusTypeDef status = HAL_SPI_Receive(ADS->hspi, rx_buffer, num_bytes, ADS->SPI_TIMEOUT);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	7abb      	ldrb	r3, [r7, #10]
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	895b      	ldrh	r3, [r3, #10]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	f007 fc20 	bl	8009284 <HAL_SPI_Receive>
 8001a44:	4603      	mov	r3, r0
 8001a46:	75fb      	strb	r3, [r7, #23]
	ADS_chipRelease(ADS);
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 f817 	bl	8001a7c <ADS_chipRelease>

	taskEXIT_CRITICAL();
 8001a4e:	f00e fe85 	bl	801075c <vPortExitCritical>

	return status;
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <ADS_chipSelect>:

void ADS_chipSelect(ADS_Chip *ADS) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ADS->CS_GPIO_Port, ADS->CS_GPIO_Pin, 0);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68d8      	ldr	r0, [r3, #12]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	8a1b      	ldrh	r3, [r3, #16]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f004 f8b2 	bl	8005bd8 <HAL_GPIO_WritePin>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <ADS_chipRelease>:

void ADS_chipRelease(ADS_Chip *ADS) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ADS->CS_GPIO_Port, ADS->CS_GPIO_Pin, 1);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68d8      	ldr	r0, [r3, #12]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	8a1b      	ldrh	r3, [r3, #16]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f004 f8a2 	bl	8005bd8 <HAL_GPIO_WritePin>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <ADS_configure>:

int ADS_configure(ADS_Chip *ADS, uint8_t TC_index, int check) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	72fb      	strb	r3, [r7, #11]
	uint8_t conf_byte_1 = 0x00;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	77fb      	strb	r3, [r7, #31]
	uint8_t conf_byte_2 = 0x00;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	77bb      	strb	r3, [r7, #30]
	uint8_t conf_byte_3 = 0x00;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	777b      	strb	r3, [r7, #29]
	uint8_t conf_byte_4 = 0x00;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	773b      	strb	r3, [r7, #28]

	if(TC_index == 2) {
 8001aba:	7afb      	ldrb	r3, [r7, #11]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d108      	bne.n	8001ad2 <ADS_configure+0x36>
		conf_byte_1 = 0x00 | 0x00 | ADS_PGA_ENABLED;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	77fb      	strb	r3, [r7, #31]
		conf_byte_2 = ADS_INTERNAL_TEMP_RATE | ADS_MODE_NORMAL | ADS_CONV_MODE_SING | ADS_INTERNAL_TEMP_ENABLED | ADS_BURN_OUT_DISABLED;
 8001ac4:	2362      	movs	r3, #98	@ 0x62
 8001ac6:	77bb      	strb	r3, [r7, #30]
		conf_byte_3 = ADS_VOLT_REF_INT | ADS_FILTER_DISABLED | ADS_PSW_DISABLED | ADS_IDAC_DISABLED;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	777b      	strb	r3, [r7, #29]
		conf_byte_4 = ADS_l1MUX_DISABLED | ADS_l2MUX_DISABLED | ADS_DRDY_MODE_BOTH;
 8001acc:	2302      	movs	r3, #2
 8001ace:	773b      	strb	r3, [r7, #28]
 8001ad0:	e01b      	b.n	8001b0a <ADS_configure+0x6e>
	}
	else {
		conf_byte_1 = ADS->muxes[TC_index]->mux | ADS->muxes[TC_index]->gain | ADS_PGA_ENABLED;
 8001ad2:	7afb      	ldrb	r3, [r7, #11]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	7c9a      	ldrb	r2, [r3, #18]
 8001ae0:	7afb      	ldrb	r3, [r7, #11]
 8001ae2:	68f9      	ldr	r1, [r7, #12]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	7cdb      	ldrb	r3, [r3, #19]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	77fb      	strb	r3, [r7, #31]
		conf_byte_2 = ADS->muxes[TC_index]->rate | ADS_MODE_NORMAL | ADS_CONV_MODE_SING | ADS_INTERNAL_TEMP_DISABLED | ADS_BURN_OUT_DISABLED;
 8001af2:	7afb      	ldrb	r3, [r7, #11]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	3304      	adds	r3, #4
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	7d1b      	ldrb	r3, [r3, #20]
 8001b00:	77bb      	strb	r3, [r7, #30]
		conf_byte_3 = ADS_VOLT_REF_INT | ADS_FILTER_DISABLED | ADS_PSW_DISABLED | ADS_IDAC_DISABLED;
 8001b02:	2300      	movs	r3, #0
 8001b04:	777b      	strb	r3, [r7, #29]
		conf_byte_4 = ADS_l1MUX_DISABLED | ADS_l2MUX_DISABLED | ADS_DRDY_MODE_BOTH;
 8001b06:	2302      	movs	r3, #2
 8001b08:	773b      	strb	r3, [r7, #28]
	}

	uint8_t txbuffer[5] = {0x43, conf_byte_1, conf_byte_2, conf_byte_3, conf_byte_4};
 8001b0a:	2343      	movs	r3, #67	@ 0x43
 8001b0c:	753b      	strb	r3, [r7, #20]
 8001b0e:	7ffb      	ldrb	r3, [r7, #31]
 8001b10:	757b      	strb	r3, [r7, #21]
 8001b12:	7fbb      	ldrb	r3, [r7, #30]
 8001b14:	75bb      	strb	r3, [r7, #22]
 8001b16:	7f7b      	ldrb	r3, [r7, #29]
 8001b18:	75fb      	strb	r3, [r7, #23]
 8001b1a:	7f3b      	ldrb	r3, [r7, #28]
 8001b1c:	763b      	strb	r3, [r7, #24]

	ADS_write(ADS, txbuffer, 5);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	2205      	movs	r2, #5
 8001b24:	4619      	mov	r1, r3
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f7ff ff44 	bl	80019b4 <ADS_write>

	if(check) {
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d01c      	beq.n	8001b6c <ADS_configure+0xd0>
		uint8_t rxbuffer[4] = {0, 0, 0, 0};
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]

		ADS_read(ADS, 0x23, rxbuffer, 4);
 8001b36:	f107 0210 	add.w	r2, r7, #16
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	2123      	movs	r1, #35	@ 0x23
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7ff ff5f 	bl	8001a02 <ADS_read>

		return !(rxbuffer[0] == conf_byte_1 && rxbuffer[1] == conf_byte_2 && rxbuffer[2] == conf_byte_3 && rxbuffer[3] == conf_byte_4);
 8001b44:	7c3b      	ldrb	r3, [r7, #16]
 8001b46:	7ffa      	ldrb	r2, [r7, #31]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d10b      	bne.n	8001b64 <ADS_configure+0xc8>
 8001b4c:	7c7b      	ldrb	r3, [r7, #17]
 8001b4e:	7fba      	ldrb	r2, [r7, #30]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d107      	bne.n	8001b64 <ADS_configure+0xc8>
 8001b54:	7cbb      	ldrb	r3, [r7, #18]
 8001b56:	7f7a      	ldrb	r2, [r7, #29]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d103      	bne.n	8001b64 <ADS_configure+0xc8>
 8001b5c:	7cfb      	ldrb	r3, [r7, #19]
 8001b5e:	7f3a      	ldrb	r2, [r7, #28]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <ADS_configure+0xcc>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e002      	b.n	8001b6e <ADS_configure+0xd2>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e000      	b.n	8001b6e <ADS_configure+0xd2>
	}
	else {
		return 0;
 8001b6c:	2300      	movs	r3, #0
	}
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3720      	adds	r7, #32
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <ADS_readAllwTimestamps>:
	}

	return 1;
}

int ADS_readAllwTimestamps(ADS_Main_t *ADSMain, ADS_Reading_t *readings) {
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
	if(xSemaphoreTake(ADSMain->temp_semaphore, (TickType_t) 2) == pdTRUE) {
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2102      	movs	r1, #2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f00c fd69 	bl	800e660 <xQueueSemaphoreTake>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	f040 80a2 	bne.w	8001cda <ADS_readAllwTimestamps+0x162>
		int16_t raw_ref = ADSMain->raw_temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	895b      	ldrh	r3, [r3, #10]
 8001b9a:	827b      	strh	r3, [r7, #18]
		xSemaphoreGive(ADSMain->temp_semaphore);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68d8      	ldr	r0, [r3, #12]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	f00c fa49 	bl	800e03c <xQueueGenericSend>

		for(int k = 0; k < ADSMain->TC_count; k++) {
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e08b      	b.n	8001cc8 <ADS_readAllwTimestamps+0x150>
			if(xSemaphoreTake(ADSMain->TCs[k].reading_semaphore, (TickType_t) 2) == pdTRUE) {
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6859      	ldr	r1, [r3, #4]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	2102      	movs	r1, #2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f00c fd4b 	bl	800e660 <xQueueSemaphoreTake>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d16e      	bne.n	8001cae <ADS_readAllwTimestamps+0x136>
				int16_t raw_read = ADSMain->TCs[k].current_raw;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6859      	ldr	r1, [r3, #4]
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	1a9b      	subs	r3, r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	440b      	add	r3, r1
 8001be0:	8c1b      	ldrh	r3, [r3, #32]
 8001be2:	823b      	strh	r3, [r7, #16]
				readings[k].timestamp = ADSMain->TCs[k].timestamp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6859      	ldr	r1, [r3, #4]
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	4613      	mov	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	1a9b      	subs	r3, r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	18c8      	adds	r0, r1, r3
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	461a      	mov	r2, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	1899      	adds	r1, r3, r2
 8001c04:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	@ 0x28
 8001c08:	e9c1 2302 	strd	r2, r3, [r1, #8]
				xSemaphoreGive(ADSMain->TCs[k].reading_semaphore);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	4613      	mov	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	f00c fa0a 	bl	800e03c <xQueueGenericSend>

				double process_reading = ADS_convertRawToMicrovolts(ADSMain->TCs + k, raw_read);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6859      	ldr	r1, [r3, #4]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	440b      	add	r3, r1
 8001c38:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fd94 	bl	800076c <ADS_convertRawToMicrovolts>
 8001c44:	ed87 0b02 	vstr	d0, [r7, #8]
				process_reading += ADS_polyTempToMicrovolts(raw_ref * 0.0078125);
 8001c48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c4c:	ee07 3a90 	vmov	s15, r3
 8001c50:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c54:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8001ce8 <ADS_readAllwTimestamps+0x170>
 8001c58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c5c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c60:	eeb0 0a67 	vmov.f32	s0, s15
 8001c64:	f7fe fe98 	bl	8000998 <ADS_polyTempToMicrovolts>
 8001c68:	eeb0 6b40 	vmov.f64	d6, d0
 8001c6c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c70:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c74:	ed87 7b02 	vstr	d7, [r7, #8]
				readings[k].temp_c = ADS_polyMicrovoltsToTemp(process_reading);
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	461a      	mov	r2, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	189c      	adds	r4, r3, r2
 8001c88:	ed97 0b02 	vldr	d0, [r7, #8]
 8001c8c:	f7fe fd88 	bl	80007a0 <ADS_polyMicrovoltsToTemp>
 8001c90:	eef0 7a40 	vmov.f32	s15, s0
 8001c94:	edc4 7a00 	vstr	s15, [r4]
				readings[k].error = 0;
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	2200      	movs	r2, #0
 8001caa:	741a      	strb	r2, [r3, #16]
 8001cac:	e009      	b.n	8001cc2 <ADS_readAllwTimestamps+0x14a>
			}
			else {
				readings[k].error = 1;
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	461a      	mov	r2, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	741a      	strb	r2, [r3, #16]
		for(int k = 0; k < ADSMain->TC_count; k++) {
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7a1b      	ldrb	r3, [r3, #8]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	f6ff af6d 	blt.w	8001bb0 <ADS_readAllwTimestamps+0x38>
			}
		}
		return 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <ADS_readAllwTimestamps+0x164>
	}

	return 1;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd90      	pop	{r4, r7, pc}
 8001ce4:	f3af 8000 	nop.w
 8001ce8:	00000000 	.word	0x00000000
 8001cec:	3f800000 	.word	0x3f800000

08001cf0 <getTimestamp>:

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
uint64_t getTimestamp() {
 8001cf0:	b5b0      	push	{r4, r5, r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001cf4:	f001 feba 	bl	8003a6c <HAL_GetTick>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	461c      	mov	r4, r3
 8001cfe:	4615      	mov	r5, r2
 8001d00:	4622      	mov	r2, r4
 8001d02:	462b      	mov	r3, r5
}
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001d12:	f000 ff19 	bl	8002b48 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d16:	4b44      	ldr	r3, [pc, #272]	@ (8001e28 <main+0x11c>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d11b      	bne.n	8001d5a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d22:	f3bf 8f4f 	dsb	sy
}
 8001d26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d28:	f3bf 8f6f 	isb	sy
}
 8001d2c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e28 <main+0x11c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001d36:	f3bf 8f4f 	dsb	sy
}
 8001d3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d3c:	f3bf 8f6f 	isb	sy
}
 8001d40:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001d42:	4b39      	ldr	r3, [pc, #228]	@ (8001e28 <main+0x11c>)
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	4a38      	ldr	r2, [pc, #224]	@ (8001e28 <main+0x11c>)
 8001d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d4c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d4e:	f3bf 8f4f 	dsb	sy
}
 8001d52:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d54:	f3bf 8f6f 	isb	sy
}
 8001d58:	e000      	b.n	8001d5c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d5a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001d5c:	4b32      	ldr	r3, [pc, #200]	@ (8001e28 <main+0x11c>)
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d138      	bne.n	8001dda <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001d68:	4b2f      	ldr	r3, [pc, #188]	@ (8001e28 <main+0x11c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001d70:	f3bf 8f4f 	dsb	sy
}
 8001d74:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001d76:	4b2c      	ldr	r3, [pc, #176]	@ (8001e28 <main+0x11c>)
 8001d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d7c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	0b5b      	lsrs	r3, r3, #13
 8001d82:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001d86:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	08db      	lsrs	r3, r3, #3
 8001d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d90:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001d9a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001da0:	4921      	ldr	r1, [pc, #132]	@ (8001e28 <main+0x11c>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	1e5a      	subs	r2, r3, #1
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1ef      	bne.n	8001d92 <main+0x86>
    } while(sets-- != 0U);
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1e5a      	subs	r2, r3, #1
 8001db6:	60ba      	str	r2, [r7, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1e5      	bne.n	8001d88 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001dbc:	f3bf 8f4f 	dsb	sy
}
 8001dc0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001dc2:	4b19      	ldr	r3, [pc, #100]	@ (8001e28 <main+0x11c>)
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	4a18      	ldr	r2, [pc, #96]	@ (8001e28 <main+0x11c>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dcc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001dce:	f3bf 8f4f 	dsb	sy
}
 8001dd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dd4:	f3bf 8f6f 	isb	sy
}
 8001dd8:	e000      	b.n	8001ddc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001dda:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ddc:	f001 fdf6 	bl	80039cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001de0:	f000 f82a 	bl	8001e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001de4:	f000 fb3e 	bl	8002464 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001de8:	f000 f896 	bl	8001f18 <MX_I2C1_Init>
  MX_I2C5_Init();
 8001dec:	f000 f8d4 	bl	8001f98 <MX_I2C5_Init>
  MX_SPI4_Init();
 8001df0:	f000 f9e8 	bl	80021c4 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001df4:	f000 fa3e 	bl	8002274 <MX_SPI5_Init>
  MX_USART10_UART_Init();
 8001df8:	f000 fae8 	bl	80023cc <MX_USART10_UART_Init>
  MX_RTC_Init();
 8001dfc:	f000 f90c 	bl	8002018 <MX_RTC_Init>
  MX_SPI1_Init();
 8001e00:	f000 f932 	bl	8002068 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001e04:	f000 f986 	bl	8002114 <MX_SPI2_Init>
  MX_SPI6_Init();
 8001e08:	f000 fa8a 	bl	8002320 <MX_SPI6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001e0c:	f00b f956 	bl	800d0bc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001e10:	4a06      	ldr	r2, [pc, #24]	@ (8001e2c <main+0x120>)
 8001e12:	2100      	movs	r1, #0
 8001e14:	4806      	ldr	r0, [pc, #24]	@ (8001e30 <main+0x124>)
 8001e16:	f00b f9b0 	bl	800d17a <osThreadNew>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4a05      	ldr	r2, [pc, #20]	@ (8001e34 <main+0x128>)
 8001e1e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001e20:	f00b f970 	bl	800d104 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <main+0x118>
 8001e28:	e000ed00 	.word	0xe000ed00
 8001e2c:	0801f29c 	.word	0x0801f29c
 8001e30:	080027a9 	.word	0x080027a9
 8001e34:	240004b4 	.word	0x240004b4

08001e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b09c      	sub	sp, #112	@ 0x70
 8001e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e42:	224c      	movs	r2, #76	@ 0x4c
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f019 fbfe 	bl	801b648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	2220      	movs	r2, #32
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f019 fbf8 	bl	801b648 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e58:	2002      	movs	r0, #2
 8001e5a:	f004 f825 	bl	8005ea8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e5e:	2300      	movs	r3, #0
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	4b2c      	ldr	r3, [pc, #176]	@ (8001f14 <SystemClock_Config+0xdc>)
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	4a2b      	ldr	r2, [pc, #172]	@ (8001f14 <SystemClock_Config+0xdc>)
 8001e68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e6c:	6193      	str	r3, [r2, #24]
 8001e6e:	4b29      	ldr	r3, [pc, #164]	@ (8001f14 <SystemClock_Config+0xdc>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e7a:	bf00      	nop
 8001e7c:	4b25      	ldr	r3, [pc, #148]	@ (8001f14 <SystemClock_Config+0xdc>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e88:	d1f8      	bne.n	8001e7c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001e8a:	2309      	movs	r3, #9
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e94:	2301      	movs	r3, #1
 8001e96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001ea4:	230c      	movs	r3, #12
 8001ea6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001eac:	2302      	movs	r3, #2
 8001eae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001eb4:	230c      	movs	r3, #12
 8001eb6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f004 f849 	bl	8005f5c <HAL_RCC_OscConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ed0:	f000 fe9e 	bl	8002c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed4:	233f      	movs	r3, #63	@ 0x3f
 8001ed6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001ee4:	2340      	movs	r3, #64	@ 0x40
 8001ee6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ee8:	2340      	movs	r3, #64	@ 0x40
 8001eea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001eec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ef0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001ef2:	2340      	movs	r3, #64	@ 0x40
 8001ef4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2102      	movs	r1, #2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f004 fc08 	bl	8006710 <HAL_RCC_ClockConfig>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001f06:	f000 fe83 	bl	8002c10 <Error_Handler>
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	3770      	adds	r7, #112	@ 0x70
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	58024800 	.word	0x58024800

08001f18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001f90 <MX_I2C1_Init+0x78>)
 8001f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 8001f22:	4b1a      	ldr	r3, [pc, #104]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f24:	4a1b      	ldr	r2, [pc, #108]	@ (8001f94 <MX_I2C1_Init+0x7c>)
 8001f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f28:	4b18      	ldr	r3, [pc, #96]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f2e:	4b17      	ldr	r3, [pc, #92]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f34:	4b15      	ldr	r3, [pc, #84]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f3a:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f40:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f46:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f52:	480e      	ldr	r0, [pc, #56]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f54:	f003 fe74 	bl	8005c40 <HAL_I2C_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f5e:	f000 fe57 	bl	8002c10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f62:	2100      	movs	r1, #0
 8001f64:	4809      	ldr	r0, [pc, #36]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f66:	f003 ff07 	bl	8005d78 <HAL_I2CEx_ConfigAnalogFilter>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f70:	f000 fe4e 	bl	8002c10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f74:	2100      	movs	r1, #0
 8001f76:	4805      	ldr	r0, [pc, #20]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f78:	f003 ff49 	bl	8005e0e <HAL_I2CEx_ConfigDigitalFilter>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f82:	f000 fe45 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	240000ac 	.word	0x240000ac
 8001f90:	40005400 	.word	0x40005400
 8001f94:	10b0dcfb 	.word	0x10b0dcfb

08001f98 <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800200c <MX_I2C5_Init+0x74>)
 8001f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002010 <MX_I2C5_Init+0x78>)
 8001fa0:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x10B0DCFB;
 8001fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800200c <MX_I2C5_Init+0x74>)
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8002014 <MX_I2C5_Init+0x7c>)
 8001fa6:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8001fa8:	4b18      	ldr	r3, [pc, #96]	@ (800200c <MX_I2C5_Init+0x74>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fae:	4b17      	ldr	r3, [pc, #92]	@ (800200c <MX_I2C5_Init+0x74>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fb4:	4b15      	ldr	r3, [pc, #84]	@ (800200c <MX_I2C5_Init+0x74>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8001fba:	4b14      	ldr	r3, [pc, #80]	@ (800200c <MX_I2C5_Init+0x74>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fc0:	4b12      	ldr	r3, [pc, #72]	@ (800200c <MX_I2C5_Init+0x74>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fc6:	4b11      	ldr	r3, [pc, #68]	@ (800200c <MX_I2C5_Init+0x74>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <MX_I2C5_Init+0x74>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8001fd2:	480e      	ldr	r0, [pc, #56]	@ (800200c <MX_I2C5_Init+0x74>)
 8001fd4:	f003 fe34 	bl	8005c40 <HAL_I2C_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8001fde:	f000 fe17 	bl	8002c10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4809      	ldr	r0, [pc, #36]	@ (800200c <MX_I2C5_Init+0x74>)
 8001fe6:	f003 fec7 	bl	8005d78 <HAL_I2CEx_ConfigAnalogFilter>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8001ff0:	f000 fe0e 	bl	8002c10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4805      	ldr	r0, [pc, #20]	@ (800200c <MX_I2C5_Init+0x74>)
 8001ff8:	f003 ff09 	bl	8005e0e <HAL_I2CEx_ConfigDigitalFilter>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8002002:	f000 fe05 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	24000100 	.word	0x24000100
 8002010:	40006400 	.word	0x40006400
 8002014:	10b0dcfb 	.word	0x10b0dcfb

08002018 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800201c:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <MX_RTC_Init+0x48>)
 800201e:	4a11      	ldr	r2, [pc, #68]	@ (8002064 <MX_RTC_Init+0x4c>)
 8002020:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002022:	4b0f      	ldr	r3, [pc, #60]	@ (8002060 <MX_RTC_Init+0x48>)
 8002024:	2200      	movs	r2, #0
 8002026:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002028:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <MX_RTC_Init+0x48>)
 800202a:	227f      	movs	r2, #127	@ 0x7f
 800202c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800202e:	4b0c      	ldr	r3, [pc, #48]	@ (8002060 <MX_RTC_Init+0x48>)
 8002030:	22ff      	movs	r2, #255	@ 0xff
 8002032:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002034:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <MX_RTC_Init+0x48>)
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800203a:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <MX_RTC_Init+0x48>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002040:	4b07      	ldr	r3, [pc, #28]	@ (8002060 <MX_RTC_Init+0x48>)
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <MX_RTC_Init+0x48>)
 8002048:	2200      	movs	r2, #0
 800204a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800204c:	4804      	ldr	r0, [pc, #16]	@ (8002060 <MX_RTC_Init+0x48>)
 800204e:	f006 fcef 	bl	8008a30 <HAL_RTC_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002058:	f000 fdda 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	24000154 	.word	0x24000154
 8002064:	58004000 	.word	0x58004000

08002068 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800206c:	4b27      	ldr	r3, [pc, #156]	@ (800210c <MX_SPI1_Init+0xa4>)
 800206e:	4a28      	ldr	r2, [pc, #160]	@ (8002110 <MX_SPI1_Init+0xa8>)
 8002070:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002072:	4b26      	ldr	r3, [pc, #152]	@ (800210c <MX_SPI1_Init+0xa4>)
 8002074:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002078:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800207a:	4b24      	ldr	r3, [pc, #144]	@ (800210c <MX_SPI1_Init+0xa4>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002080:	4b22      	ldr	r3, [pc, #136]	@ (800210c <MX_SPI1_Init+0xa4>)
 8002082:	2207      	movs	r2, #7
 8002084:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002086:	4b21      	ldr	r3, [pc, #132]	@ (800210c <MX_SPI1_Init+0xa4>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800208c:	4b1f      	ldr	r3, [pc, #124]	@ (800210c <MX_SPI1_Init+0xa4>)
 800208e:	2200      	movs	r2, #0
 8002090:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002092:	4b1e      	ldr	r3, [pc, #120]	@ (800210c <MX_SPI1_Init+0xa4>)
 8002094:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002098:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800209a:	4b1c      	ldr	r3, [pc, #112]	@ (800210c <MX_SPI1_Init+0xa4>)
 800209c:	2200      	movs	r2, #0
 800209e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020a0:	4b1a      	ldr	r3, [pc, #104]	@ (800210c <MX_SPI1_Init+0xa4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020a6:	4b19      	ldr	r3, [pc, #100]	@ (800210c <MX_SPI1_Init+0xa4>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020ac:	4b17      	ldr	r3, [pc, #92]	@ (800210c <MX_SPI1_Init+0xa4>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80020b2:	4b16      	ldr	r3, [pc, #88]	@ (800210c <MX_SPI1_Init+0xa4>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020b8:	4b14      	ldr	r3, [pc, #80]	@ (800210c <MX_SPI1_Init+0xa4>)
 80020ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020be:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020c0:	4b12      	ldr	r3, [pc, #72]	@ (800210c <MX_SPI1_Init+0xa4>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020c6:	4b11      	ldr	r3, [pc, #68]	@ (800210c <MX_SPI1_Init+0xa4>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020cc:	4b0f      	ldr	r3, [pc, #60]	@ (800210c <MX_SPI1_Init+0xa4>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <MX_SPI1_Init+0xa4>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <MX_SPI1_Init+0xa4>)
 80020da:	2200      	movs	r2, #0
 80020dc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80020de:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <MX_SPI1_Init+0xa4>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80020e4:	4b09      	ldr	r3, [pc, #36]	@ (800210c <MX_SPI1_Init+0xa4>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80020ea:	4b08      	ldr	r3, [pc, #32]	@ (800210c <MX_SPI1_Init+0xa4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <MX_SPI1_Init+0xa4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020f6:	4805      	ldr	r0, [pc, #20]	@ (800210c <MX_SPI1_Init+0xa4>)
 80020f8:	f006 fdb2 	bl	8008c60 <HAL_SPI_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8002102:	f000 fd85 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	24000178 	.word	0x24000178
 8002110:	40013000 	.word	0x40013000

08002114 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002118:	4b28      	ldr	r3, [pc, #160]	@ (80021bc <MX_SPI2_Init+0xa8>)
 800211a:	4a29      	ldr	r2, [pc, #164]	@ (80021c0 <MX_SPI2_Init+0xac>)
 800211c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800211e:	4b27      	ldr	r3, [pc, #156]	@ (80021bc <MX_SPI2_Init+0xa8>)
 8002120:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002124:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002126:	4b25      	ldr	r3, [pc, #148]	@ (80021bc <MX_SPI2_Init+0xa8>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800212c:	4b23      	ldr	r3, [pc, #140]	@ (80021bc <MX_SPI2_Init+0xa8>)
 800212e:	2207      	movs	r2, #7
 8002130:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002132:	4b22      	ldr	r3, [pc, #136]	@ (80021bc <MX_SPI2_Init+0xa8>)
 8002134:	2200      	movs	r2, #0
 8002136:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002138:	4b20      	ldr	r3, [pc, #128]	@ (80021bc <MX_SPI2_Init+0xa8>)
 800213a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800213e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002140:	4b1e      	ldr	r3, [pc, #120]	@ (80021bc <MX_SPI2_Init+0xa8>)
 8002142:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002146:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002148:	4b1c      	ldr	r3, [pc, #112]	@ (80021bc <MX_SPI2_Init+0xa8>)
 800214a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800214e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002150:	4b1a      	ldr	r3, [pc, #104]	@ (80021bc <MX_SPI2_Init+0xa8>)
 8002152:	2200      	movs	r2, #0
 8002154:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002156:	4b19      	ldr	r3, [pc, #100]	@ (80021bc <MX_SPI2_Init+0xa8>)
 8002158:	2200      	movs	r2, #0
 800215a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800215c:	4b17      	ldr	r3, [pc, #92]	@ (80021bc <MX_SPI2_Init+0xa8>)
 800215e:	2200      	movs	r2, #0
 8002160:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002162:	4b16      	ldr	r3, [pc, #88]	@ (80021bc <MX_SPI2_Init+0xa8>)
 8002164:	2200      	movs	r2, #0
 8002166:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002168:	4b14      	ldr	r3, [pc, #80]	@ (80021bc <MX_SPI2_Init+0xa8>)
 800216a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800216e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002170:	4b12      	ldr	r3, [pc, #72]	@ (80021bc <MX_SPI2_Init+0xa8>)
 8002172:	2200      	movs	r2, #0
 8002174:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002176:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <MX_SPI2_Init+0xa8>)
 8002178:	2200      	movs	r2, #0
 800217a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800217c:	4b0f      	ldr	r3, [pc, #60]	@ (80021bc <MX_SPI2_Init+0xa8>)
 800217e:	2200      	movs	r2, #0
 8002180:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002182:	4b0e      	ldr	r3, [pc, #56]	@ (80021bc <MX_SPI2_Init+0xa8>)
 8002184:	2200      	movs	r2, #0
 8002186:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002188:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <MX_SPI2_Init+0xa8>)
 800218a:	2200      	movs	r2, #0
 800218c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800218e:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <MX_SPI2_Init+0xa8>)
 8002190:	2200      	movs	r2, #0
 8002192:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002194:	4b09      	ldr	r3, [pc, #36]	@ (80021bc <MX_SPI2_Init+0xa8>)
 8002196:	2200      	movs	r2, #0
 8002198:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800219a:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <MX_SPI2_Init+0xa8>)
 800219c:	2200      	movs	r2, #0
 800219e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <MX_SPI2_Init+0xa8>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021a6:	4805      	ldr	r0, [pc, #20]	@ (80021bc <MX_SPI2_Init+0xa8>)
 80021a8:	f006 fd5a 	bl	8008c60 <HAL_SPI_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80021b2:	f000 fd2d 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	24000200 	.word	0x24000200
 80021c0:	40003800 	.word	0x40003800

080021c4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80021c8:	4b28      	ldr	r3, [pc, #160]	@ (800226c <MX_SPI4_Init+0xa8>)
 80021ca:	4a29      	ldr	r2, [pc, #164]	@ (8002270 <MX_SPI4_Init+0xac>)
 80021cc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80021ce:	4b27      	ldr	r3, [pc, #156]	@ (800226c <MX_SPI4_Init+0xa8>)
 80021d0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80021d4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80021d6:	4b25      	ldr	r3, [pc, #148]	@ (800226c <MX_SPI4_Init+0xa8>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80021dc:	4b23      	ldr	r3, [pc, #140]	@ (800226c <MX_SPI4_Init+0xa8>)
 80021de:	2207      	movs	r2, #7
 80021e0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80021e2:	4b22      	ldr	r3, [pc, #136]	@ (800226c <MX_SPI4_Init+0xa8>)
 80021e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021e8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80021ea:	4b20      	ldr	r3, [pc, #128]	@ (800226c <MX_SPI4_Init+0xa8>)
 80021ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021f0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80021f2:	4b1e      	ldr	r3, [pc, #120]	@ (800226c <MX_SPI4_Init+0xa8>)
 80021f4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80021f8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80021fa:	4b1c      	ldr	r3, [pc, #112]	@ (800226c <MX_SPI4_Init+0xa8>)
 80021fc:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8002200:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002202:	4b1a      	ldr	r3, [pc, #104]	@ (800226c <MX_SPI4_Init+0xa8>)
 8002204:	2200      	movs	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002208:	4b18      	ldr	r3, [pc, #96]	@ (800226c <MX_SPI4_Init+0xa8>)
 800220a:	2200      	movs	r2, #0
 800220c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800220e:	4b17      	ldr	r3, [pc, #92]	@ (800226c <MX_SPI4_Init+0xa8>)
 8002210:	2200      	movs	r2, #0
 8002212:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8002214:	4b15      	ldr	r3, [pc, #84]	@ (800226c <MX_SPI4_Init+0xa8>)
 8002216:	2200      	movs	r2, #0
 8002218:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800221a:	4b14      	ldr	r3, [pc, #80]	@ (800226c <MX_SPI4_Init+0xa8>)
 800221c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002220:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002222:	4b12      	ldr	r3, [pc, #72]	@ (800226c <MX_SPI4_Init+0xa8>)
 8002224:	2200      	movs	r2, #0
 8002226:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002228:	4b10      	ldr	r3, [pc, #64]	@ (800226c <MX_SPI4_Init+0xa8>)
 800222a:	2200      	movs	r2, #0
 800222c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800222e:	4b0f      	ldr	r3, [pc, #60]	@ (800226c <MX_SPI4_Init+0xa8>)
 8002230:	2200      	movs	r2, #0
 8002232:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002234:	4b0d      	ldr	r3, [pc, #52]	@ (800226c <MX_SPI4_Init+0xa8>)
 8002236:	2200      	movs	r2, #0
 8002238:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800223a:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <MX_SPI4_Init+0xa8>)
 800223c:	2200      	movs	r2, #0
 800223e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002240:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <MX_SPI4_Init+0xa8>)
 8002242:	2200      	movs	r2, #0
 8002244:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002246:	4b09      	ldr	r3, [pc, #36]	@ (800226c <MX_SPI4_Init+0xa8>)
 8002248:	2200      	movs	r2, #0
 800224a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800224c:	4b07      	ldr	r3, [pc, #28]	@ (800226c <MX_SPI4_Init+0xa8>)
 800224e:	2200      	movs	r2, #0
 8002250:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <MX_SPI4_Init+0xa8>)
 8002254:	2200      	movs	r2, #0
 8002256:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002258:	4804      	ldr	r0, [pc, #16]	@ (800226c <MX_SPI4_Init+0xa8>)
 800225a:	f006 fd01 	bl	8008c60 <HAL_SPI_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 8002264:	f000 fcd4 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	24000288 	.word	0x24000288
 8002270:	40013400 	.word	0x40013400

08002274 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002278:	4b27      	ldr	r3, [pc, #156]	@ (8002318 <MX_SPI5_Init+0xa4>)
 800227a:	4a28      	ldr	r2, [pc, #160]	@ (800231c <MX_SPI5_Init+0xa8>)
 800227c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800227e:	4b26      	ldr	r3, [pc, #152]	@ (8002318 <MX_SPI5_Init+0xa4>)
 8002280:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002284:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002286:	4b24      	ldr	r3, [pc, #144]	@ (8002318 <MX_SPI5_Init+0xa4>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800228c:	4b22      	ldr	r3, [pc, #136]	@ (8002318 <MX_SPI5_Init+0xa4>)
 800228e:	2207      	movs	r2, #7
 8002290:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002292:	4b21      	ldr	r3, [pc, #132]	@ (8002318 <MX_SPI5_Init+0xa4>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002298:	4b1f      	ldr	r3, [pc, #124]	@ (8002318 <MX_SPI5_Init+0xa4>)
 800229a:	2200      	movs	r2, #0
 800229c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800229e:	4b1e      	ldr	r3, [pc, #120]	@ (8002318 <MX_SPI5_Init+0xa4>)
 80022a0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022a4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80022a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002318 <MX_SPI5_Init+0xa4>)
 80022a8:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80022ac:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002318 <MX_SPI5_Init+0xa4>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80022b4:	4b18      	ldr	r3, [pc, #96]	@ (8002318 <MX_SPI5_Init+0xa4>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ba:	4b17      	ldr	r3, [pc, #92]	@ (8002318 <MX_SPI5_Init+0xa4>)
 80022bc:	2200      	movs	r2, #0
 80022be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 80022c0:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <MX_SPI5_Init+0xa4>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022c6:	4b14      	ldr	r3, [pc, #80]	@ (8002318 <MX_SPI5_Init+0xa4>)
 80022c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022cc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80022ce:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <MX_SPI5_Init+0xa4>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80022d4:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <MX_SPI5_Init+0xa4>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022da:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <MX_SPI5_Init+0xa4>)
 80022dc:	2200      	movs	r2, #0
 80022de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002318 <MX_SPI5_Init+0xa4>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80022e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002318 <MX_SPI5_Init+0xa4>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80022ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <MX_SPI5_Init+0xa4>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80022f2:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <MX_SPI5_Init+0xa4>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80022f8:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <MX_SPI5_Init+0xa4>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80022fe:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <MX_SPI5_Init+0xa4>)
 8002300:	2200      	movs	r2, #0
 8002302:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002304:	4804      	ldr	r0, [pc, #16]	@ (8002318 <MX_SPI5_Init+0xa4>)
 8002306:	f006 fcab 	bl	8008c60 <HAL_SPI_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 8002310:	f000 fc7e 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	24000310 	.word	0x24000310
 800231c:	40015000 	.word	0x40015000

08002320 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8002324:	4b27      	ldr	r3, [pc, #156]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 8002326:	4a28      	ldr	r2, [pc, #160]	@ (80023c8 <MX_SPI6_Init+0xa8>)
 8002328:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800232a:	4b26      	ldr	r3, [pc, #152]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 800232c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002330:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8002332:	4b24      	ldr	r3, [pc, #144]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8002338:	4b22      	ldr	r3, [pc, #136]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 800233a:	2207      	movs	r2, #7
 800233c:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 800233e:	4b21      	ldr	r3, [pc, #132]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002344:	4b1f      	ldr	r3, [pc, #124]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 8002346:	2200      	movs	r2, #0
 8002348:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 800234a:	4b1e      	ldr	r3, [pc, #120]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 800234c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002350:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002352:	4b1c      	ldr	r3, [pc, #112]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 8002354:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8002358:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800235a:	4b1a      	ldr	r3, [pc, #104]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 800235c:	2200      	movs	r2, #0
 800235e:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8002360:	4b18      	ldr	r3, [pc, #96]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 8002362:	2200      	movs	r2, #0
 8002364:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002366:	4b17      	ldr	r3, [pc, #92]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 8002368:	2200      	movs	r2, #0
 800236a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 800236c:	4b15      	ldr	r3, [pc, #84]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 800236e:	2200      	movs	r2, #0
 8002370:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002372:	4b14      	ldr	r3, [pc, #80]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 8002374:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002378:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800237a:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 800237c:	2200      	movs	r2, #0
 800237e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002380:	4b10      	ldr	r3, [pc, #64]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 8002382:	2200      	movs	r2, #0
 8002384:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002386:	4b0f      	ldr	r3, [pc, #60]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 8002388:	2200      	movs	r2, #0
 800238a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800238c:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 800238e:	2200      	movs	r2, #0
 8002390:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002392:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 8002394:	2200      	movs	r2, #0
 8002396:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002398:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 800239a:	2200      	movs	r2, #0
 800239c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800239e:	4b09      	ldr	r3, [pc, #36]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80023a4:	4b07      	ldr	r3, [pc, #28]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80023aa:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 80023b0:	4804      	ldr	r0, [pc, #16]	@ (80023c4 <MX_SPI6_Init+0xa4>)
 80023b2:	f006 fc55 	bl	8008c60 <HAL_SPI_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_SPI6_Init+0xa0>
  {
    Error_Handler();
 80023bc:	f000 fc28 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	24000398 	.word	0x24000398
 80023c8:	58001400 	.word	0x58001400

080023cc <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 80023d0:	4b22      	ldr	r3, [pc, #136]	@ (800245c <MX_USART10_UART_Init+0x90>)
 80023d2:	4a23      	ldr	r2, [pc, #140]	@ (8002460 <MX_USART10_UART_Init+0x94>)
 80023d4:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 38400;
 80023d6:	4b21      	ldr	r3, [pc, #132]	@ (800245c <MX_USART10_UART_Init+0x90>)
 80023d8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80023dc:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80023de:	4b1f      	ldr	r3, [pc, #124]	@ (800245c <MX_USART10_UART_Init+0x90>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 80023e4:	4b1d      	ldr	r3, [pc, #116]	@ (800245c <MX_USART10_UART_Init+0x90>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 80023ea:	4b1c      	ldr	r3, [pc, #112]	@ (800245c <MX_USART10_UART_Init+0x90>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 80023f0:	4b1a      	ldr	r3, [pc, #104]	@ (800245c <MX_USART10_UART_Init+0x90>)
 80023f2:	220c      	movs	r2, #12
 80023f4:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f6:	4b19      	ldr	r3, [pc, #100]	@ (800245c <MX_USART10_UART_Init+0x90>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 80023fc:	4b17      	ldr	r3, [pc, #92]	@ (800245c <MX_USART10_UART_Init+0x90>)
 80023fe:	2200      	movs	r2, #0
 8002400:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002402:	4b16      	ldr	r3, [pc, #88]	@ (800245c <MX_USART10_UART_Init+0x90>)
 8002404:	2200      	movs	r2, #0
 8002406:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002408:	4b14      	ldr	r3, [pc, #80]	@ (800245c <MX_USART10_UART_Init+0x90>)
 800240a:	2200      	movs	r2, #0
 800240c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800240e:	4b13      	ldr	r3, [pc, #76]	@ (800245c <MX_USART10_UART_Init+0x90>)
 8002410:	2200      	movs	r2, #0
 8002412:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8002414:	4811      	ldr	r0, [pc, #68]	@ (800245c <MX_USART10_UART_Init+0x90>)
 8002416:	f008 f8ab 	bl	800a570 <HAL_UART_Init>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8002420:	f000 fbf6 	bl	8002c10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002424:	2100      	movs	r1, #0
 8002426:	480d      	ldr	r0, [pc, #52]	@ (800245c <MX_USART10_UART_Init+0x90>)
 8002428:	f009 f9b7 	bl	800b79a <HAL_UARTEx_SetTxFifoThreshold>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 8002432:	f000 fbed 	bl	8002c10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002436:	2100      	movs	r1, #0
 8002438:	4808      	ldr	r0, [pc, #32]	@ (800245c <MX_USART10_UART_Init+0x90>)
 800243a:	f009 f9ec 	bl	800b816 <HAL_UARTEx_SetRxFifoThreshold>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 8002444:	f000 fbe4 	bl	8002c10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8002448:	4804      	ldr	r0, [pc, #16]	@ (800245c <MX_USART10_UART_Init+0x90>)
 800244a:	f009 f96d 	bl	800b728 <HAL_UARTEx_DisableFifoMode>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 8002454:	f000 fbdc 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	24000420 	.word	0x24000420
 8002460:	40011c00 	.word	0x40011c00

08002464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08e      	sub	sp, #56	@ 0x38
 8002468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	60da      	str	r2, [r3, #12]
 8002478:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800247a:	4bc2      	ldr	r3, [pc, #776]	@ (8002784 <MX_GPIO_Init+0x320>)
 800247c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002480:	4ac0      	ldr	r2, [pc, #768]	@ (8002784 <MX_GPIO_Init+0x320>)
 8002482:	f043 0310 	orr.w	r3, r3, #16
 8002486:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800248a:	4bbe      	ldr	r3, [pc, #760]	@ (8002784 <MX_GPIO_Init+0x320>)
 800248c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	623b      	str	r3, [r7, #32]
 8002496:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002498:	4bba      	ldr	r3, [pc, #744]	@ (8002784 <MX_GPIO_Init+0x320>)
 800249a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800249e:	4ab9      	ldr	r2, [pc, #740]	@ (8002784 <MX_GPIO_Init+0x320>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024a8:	4bb6      	ldr	r3, [pc, #728]	@ (8002784 <MX_GPIO_Init+0x320>)
 80024aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024b6:	4bb3      	ldr	r3, [pc, #716]	@ (8002784 <MX_GPIO_Init+0x320>)
 80024b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024bc:	4ab1      	ldr	r2, [pc, #708]	@ (8002784 <MX_GPIO_Init+0x320>)
 80024be:	f043 0320 	orr.w	r3, r3, #32
 80024c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024c6:	4baf      	ldr	r3, [pc, #700]	@ (8002784 <MX_GPIO_Init+0x320>)
 80024c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	61bb      	str	r3, [r7, #24]
 80024d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024d4:	4bab      	ldr	r3, [pc, #684]	@ (8002784 <MX_GPIO_Init+0x320>)
 80024d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024da:	4aaa      	ldr	r2, [pc, #680]	@ (8002784 <MX_GPIO_Init+0x320>)
 80024dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024e4:	4ba7      	ldr	r3, [pc, #668]	@ (8002784 <MX_GPIO_Init+0x320>)
 80024e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	4ba4      	ldr	r3, [pc, #656]	@ (8002784 <MX_GPIO_Init+0x320>)
 80024f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f8:	4aa2      	ldr	r2, [pc, #648]	@ (8002784 <MX_GPIO_Init+0x320>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002502:	4ba0      	ldr	r3, [pc, #640]	@ (8002784 <MX_GPIO_Init+0x320>)
 8002504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002510:	4b9c      	ldr	r3, [pc, #624]	@ (8002784 <MX_GPIO_Init+0x320>)
 8002512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002516:	4a9b      	ldr	r2, [pc, #620]	@ (8002784 <MX_GPIO_Init+0x320>)
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002520:	4b98      	ldr	r3, [pc, #608]	@ (8002784 <MX_GPIO_Init+0x320>)
 8002522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800252e:	4b95      	ldr	r3, [pc, #596]	@ (8002784 <MX_GPIO_Init+0x320>)
 8002530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002534:	4a93      	ldr	r2, [pc, #588]	@ (8002784 <MX_GPIO_Init+0x320>)
 8002536:	f043 0308 	orr.w	r3, r3, #8
 800253a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800253e:	4b91      	ldr	r3, [pc, #580]	@ (8002784 <MX_GPIO_Init+0x320>)
 8002540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800254c:	4b8d      	ldr	r3, [pc, #564]	@ (8002784 <MX_GPIO_Init+0x320>)
 800254e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002552:	4a8c      	ldr	r2, [pc, #560]	@ (8002784 <MX_GPIO_Init+0x320>)
 8002554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002558:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800255c:	4b89      	ldr	r3, [pc, #548]	@ (8002784 <MX_GPIO_Init+0x320>)
 800255e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPS_NRST_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800256a:	2200      	movs	r2, #0
 800256c:	2113      	movs	r1, #19
 800256e:	4886      	ldr	r0, [pc, #536]	@ (8002788 <MX_GPIO_Init+0x324>)
 8002570:	f003 fb32 	bl	8005bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_DIO3_Pin|RF_DIO2_Pin|RF_DIO1_Pin|RF_NSRT_Pin
 8002574:	2200      	movs	r2, #0
 8002576:	f24e 0144 	movw	r1, #57412	@ 0xe044
 800257a:	4884      	ldr	r0, [pc, #528]	@ (800278c <MX_GPIO_Init+0x328>)
 800257c:	f003 fb2c 	bl	8005bd8 <HAL_GPIO_WritePin>
                          |VLV1_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RADIO_CS_Pin|PDB_DIO1_Pin|PDB_DIO2_Pin, GPIO_PIN_RESET);
 8002580:	2200      	movs	r2, #0
 8002582:	f24c 0140 	movw	r1, #49216	@ 0xc040
 8002586:	4882      	ldr	r0, [pc, #520]	@ (8002790 <MX_GPIO_Init+0x32c>)
 8002588:	f003 fb26 	bl	8005bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BAR2_CS_Pin|BAR1_CS_Pin|VLV2_EN_Pin|BUFF_CLR_Pin
 800258c:	2200      	movs	r2, #0
 800258e:	f248 7118 	movw	r1, #34584	@ 0x8718
 8002592:	4880      	ldr	r0, [pc, #512]	@ (8002794 <MX_GPIO_Init+0x330>)
 8002594:	f003 fb20 	bl	8005bd8 <HAL_GPIO_WritePin>
                          |BUFF_CLK_Pin|VLV_CTRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ETH_NRST_Pin|BUZZ_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8002598:	2200      	movs	r2, #0
 800259a:	f240 3101 	movw	r1, #769	@ 0x301
 800259e:	487e      	ldr	r0, [pc, #504]	@ (8002798 <MX_GPIO_Init+0x334>)
 80025a0:	f003 fb1a 	bl	8005bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TC1_CS_Pin|TC2_CS_Pin, GPIO_PIN_RESET);
 80025a4:	2200      	movs	r2, #0
 80025a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80025aa:	487c      	ldr	r0, [pc, #496]	@ (800279c <MX_GPIO_Init+0x338>)
 80025ac:	f003 fb14 	bl	8005bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, VLV3_EN_Pin|FLASH_CS_Pin|EEPROM_WC_Pin, GPIO_PIN_RESET);
 80025b0:	2200      	movs	r2, #0
 80025b2:	f44f 6150 	mov.w	r1, #3328	@ 0xd00
 80025b6:	487a      	ldr	r0, [pc, #488]	@ (80027a0 <MX_GPIO_Init+0x33c>)
 80025b8:	f003 fb0e 	bl	8005bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPS_NRST_Pin LED_GREEN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = GPS_NRST_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 80025bc:	2313      	movs	r3, #19
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c0:	2301      	movs	r3, #1
 80025c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025d0:	4619      	mov	r1, r3
 80025d2:	486d      	ldr	r0, [pc, #436]	@ (8002788 <MX_GPIO_Init+0x324>)
 80025d4:	f003 f940 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_DIO3_Pin RF_DIO2_Pin RF_DIO1_Pin RF_NSRT_Pin
                           VLV1_EN_Pin */
  GPIO_InitStruct.Pin = RF_DIO3_Pin|RF_DIO2_Pin|RF_DIO1_Pin|RF_NSRT_Pin
 80025d8:	f24e 0344 	movw	r3, #57412	@ 0xe044
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |VLV1_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025de:	2301      	movs	r3, #1
 80025e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e6:	2300      	movs	r3, #0
 80025e8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ee:	4619      	mov	r1, r3
 80025f0:	4866      	ldr	r0, [pc, #408]	@ (800278c <MX_GPIO_Init+0x328>)
 80025f2:	f003 f931 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : RADIO_CS_Pin PDB_DIO1_Pin PDB_DIO2_Pin */
  GPIO_InitStruct.Pin = RADIO_CS_Pin|PDB_DIO1_Pin|PDB_DIO2_Pin;
 80025f6:	f24c 0340 	movw	r3, #49216	@ 0xc040
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800260c:	4619      	mov	r1, r3
 800260e:	4860      	ldr	r0, [pc, #384]	@ (8002790 <MX_GPIO_Init+0x32c>)
 8002610:	f003 f922 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_BUSY_Pin */
  GPIO_InitStruct.Pin = RF_BUSY_Pin;
 8002614:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261a:	2300      	movs	r3, #0
 800261c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RF_BUSY_GPIO_Port, &GPIO_InitStruct);
 8002622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002626:	4619      	mov	r1, r3
 8002628:	4859      	ldr	r0, [pc, #356]	@ (8002790 <MX_GPIO_Init+0x32c>)
 800262a:	f003 f915 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_MODE_SW_Pin VLV3_OLD_Pin VLV1_OLD_Pin */
  GPIO_InitStruct.Pin = RF_MODE_SW_Pin|VLV3_OLD_Pin|VLV1_OLD_Pin;
 800262e:	f240 1381 	movw	r3, #385	@ 0x181
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002634:	2300      	movs	r3, #0
 8002636:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800263c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002640:	4619      	mov	r1, r3
 8002642:	4852      	ldr	r0, [pc, #328]	@ (800278c <MX_GPIO_Init+0x328>)
 8002644:	f003 f908 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : BAR2_CS_Pin BAR1_CS_Pin VLV2_EN_Pin */
  GPIO_InitStruct.Pin = BAR2_CS_Pin|BAR1_CS_Pin|VLV2_EN_Pin;
 8002648:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800264c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264e:	2301      	movs	r3, #1
 8002650:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002656:	2300      	movs	r3, #0
 8002658:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800265e:	4619      	mov	r1, r3
 8002660:	484c      	ldr	r0, [pc, #304]	@ (8002794 <MX_GPIO_Init+0x330>)
 8002662:	f003 f8f9 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_NRST_Pin BUZZ_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = ETH_NRST_Pin|BUZZ_Pin|LED_RED_Pin;
 8002666:	f240 3301 	movw	r3, #769	@ 0x301
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800266c:	2301      	movs	r3, #1
 800266e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002674:	2300      	movs	r3, #0
 8002676:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800267c:	4619      	mov	r1, r3
 800267e:	4846      	ldr	r0, [pc, #280]	@ (8002798 <MX_GPIO_Init+0x334>)
 8002680:	f003 f8ea 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002684:	2304      	movs	r3, #4
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	2300      	movs	r3, #0
 8002692:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002694:	2307      	movs	r3, #7
 8002696:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800269c:	4619      	mov	r1, r3
 800269e:	483e      	ldr	r0, [pc, #248]	@ (8002798 <MX_GPIO_Init+0x334>)
 80026a0:	f003 f8da 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : VLV2_OLD_Pin */
  GPIO_InitStruct.Pin = VLV2_OLD_Pin;
 80026a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026aa:	2300      	movs	r3, #0
 80026ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VLV2_OLD_GPIO_Port, &GPIO_InitStruct);
 80026b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b6:	4619      	mov	r1, r3
 80026b8:	4833      	ldr	r0, [pc, #204]	@ (8002788 <MX_GPIO_Init+0x324>)
 80026ba:	f003 f8cd 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC1_CS_Pin TC2_CS_Pin */
  GPIO_InitStruct.Pin = TC1_CS_Pin|TC2_CS_Pin;
 80026be:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c4:	2301      	movs	r3, #1
 80026c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	2300      	movs	r3, #0
 80026ce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026d4:	4619      	mov	r1, r3
 80026d6:	4831      	ldr	r0, [pc, #196]	@ (800279c <MX_GPIO_Init+0x338>)
 80026d8:	f003 f8be 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : VLV3_EN_Pin FLASH_CS_Pin EEPROM_WC_Pin */
  GPIO_InitStruct.Pin = VLV3_EN_Pin|FLASH_CS_Pin|EEPROM_WC_Pin;
 80026dc:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e2:	2301      	movs	r3, #1
 80026e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026f2:	4619      	mov	r1, r3
 80026f4:	482a      	ldr	r0, [pc, #168]	@ (80027a0 <MX_GPIO_Init+0x33c>)
 80026f6:	f003 f8af 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUFF_CLR_Pin BUFF_CLK_Pin VLV_CTRL_Pin */
  GPIO_InitStruct.Pin = BUFF_CLR_Pin|BUFF_CLK_Pin|VLV_CTRL_Pin;
 80026fa:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 80026fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002700:	2301      	movs	r3, #1
 8002702:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002708:	2303      	movs	r3, #3
 800270a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002710:	4619      	mov	r1, r3
 8002712:	4820      	ldr	r0, [pc, #128]	@ (8002794 <MX_GPIO_Init+0x330>)
 8002714:	f003 f8a0 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002718:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800271c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800272a:	2306      	movs	r3, #6
 800272c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800272e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002732:	4619      	mov	r1, r3
 8002734:	4815      	ldr	r0, [pc, #84]	@ (800278c <MX_GPIO_Init+0x328>)
 8002736:	f003 f88f 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU1_INT1_Pin IMU1_INT2_Pin IMU2_INT1_Pin IMU2_INT2_Pin */
  GPIO_InitStruct.Pin = IMU1_INT1_Pin|IMU1_INT2_Pin|IMU2_INT1_Pin|IMU2_INT2_Pin;
 800273a:	2336      	movs	r3, #54	@ 0x36
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800273e:	2300      	movs	r3, #0
 8002740:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800274a:	4619      	mov	r1, r3
 800274c:	4813      	ldr	r0, [pc, #76]	@ (800279c <MX_GPIO_Init+0x338>)
 800274e:	f003 f883 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002752:	2310      	movs	r3, #16
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275e:	2300      	movs	r3, #0
 8002760:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002762:	2306      	movs	r3, #6
 8002764:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800276a:	4619      	mov	r1, r3
 800276c:	480a      	ldr	r0, [pc, #40]	@ (8002798 <MX_GPIO_Init+0x334>)
 800276e:	f003 f873 	bl	8005858 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_CLOSE);
 8002772:	2100      	movs	r1, #0
 8002774:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002778:	f001 f998 	bl	8003aac <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800277c:	bf00      	nop
 800277e:	3738      	adds	r7, #56	@ 0x38
 8002780:	e010      	b.n	80027a4 <MX_GPIO_Init+0x340>
 8002782:	bf00      	nop
 8002784:	58024400 	.word	0x58024400
 8002788:	58021000 	.word	0x58021000
 800278c:	58020800 	.word	0x58020800
 8002790:	58021400 	.word	0x58021400
 8002794:	58020000 	.word	0x58020000
 8002798:	58020400 	.word	0x58020400
 800279c:	58020c00 	.word	0x58020c00
 80027a0:	58021800 	.word	0x58021800
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b0f6      	sub	sp, #472	@ 0x1d8
 80027ac:	af06      	add	r7, sp, #24
 80027ae:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027b2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027b6:	6018      	str	r0, [r3, #0]
  /* init code for LWIP */
  MX_LWIP_Init();
 80027b8:	f009 f8ba 	bl	800b930 <MX_LWIP_Init>
  	    VLV_Toggle(VLV1);
  	    HAL_GPIO_TogglePin(GPIOE, LED_BLUE_Pin);
  	    osDelay(3000);
  	}*/
  	GPIO_MAX11128_Pinfo adc_pins;
  	adc_pins.MAX11128_CS_PORT 		= ADC_CS_GPIO_Port;
 80027bc:	4bd6      	ldr	r3, [pc, #856]	@ (8002b18 <StartDefaultTask+0x370>)
 80027be:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  	adc_pins.MAX11128_CS_ADDR 		= ADC_CS_Pin;
 80027c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027c6:	f8a7 3198 	strh.w	r3, [r7, #408]	@ 0x198
  	adc_pins.HARDWARE_CONFIGURATION = NO_EOC_NOR_CNVST;
 80027ca:	2302      	movs	r3, #2
 80027cc:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
  	adc_pins.NUM_CHANNELS = 16;
 80027d0:	2310      	movs	r3, #16
 80027d2:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
  	adc_pins.MAX11128_CHANNELS[0] = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
  	adc_pins.MAX11128_CHANNELS[1] = 1;
 80027dc:	2301      	movs	r3, #1
 80027de:	f887 31a0 	strb.w	r3, [r7, #416]	@ 0x1a0
  	adc_pins.MAX11128_CHANNELS[2] = 2;
 80027e2:	2302      	movs	r3, #2
 80027e4:	f887 31a1 	strb.w	r3, [r7, #417]	@ 0x1a1
  	adc_pins.MAX11128_CHANNELS[3] = 3;
 80027e8:	2303      	movs	r3, #3
 80027ea:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
  	adc_pins.MAX11128_CHANNELS[4] = 4;
 80027ee:	2304      	movs	r3, #4
 80027f0:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
  	adc_pins.MAX11128_CHANNELS[5] = 5;
 80027f4:	2305      	movs	r3, #5
 80027f6:	f887 31a4 	strb.w	r3, [r7, #420]	@ 0x1a4
  	adc_pins.MAX11128_CHANNELS[6] = 6;
 80027fa:	2306      	movs	r3, #6
 80027fc:	f887 31a5 	strb.w	r3, [r7, #421]	@ 0x1a5
  	adc_pins.MAX11128_CHANNELS[7] = 7;
 8002800:	2307      	movs	r3, #7
 8002802:	f887 31a6 	strb.w	r3, [r7, #422]	@ 0x1a6
  	adc_pins.MAX11128_CHANNELS[8] = 8;
 8002806:	2308      	movs	r3, #8
 8002808:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
  	adc_pins.MAX11128_CHANNELS[9] = 9;
 800280c:	2309      	movs	r3, #9
 800280e:	f887 31a8 	strb.w	r3, [r7, #424]	@ 0x1a8
  	adc_pins.MAX11128_CHANNELS[10] = 10;
 8002812:	230a      	movs	r3, #10
 8002814:	f887 31a9 	strb.w	r3, [r7, #425]	@ 0x1a9
  	adc_pins.MAX11128_CHANNELS[11] = 11;
 8002818:	230b      	movs	r3, #11
 800281a:	f887 31aa 	strb.w	r3, [r7, #426]	@ 0x1aa
  	adc_pins.MAX11128_CHANNELS[12] = 12;
 800281e:	230c      	movs	r3, #12
 8002820:	f887 31ab 	strb.w	r3, [r7, #427]	@ 0x1ab
  	adc_pins.MAX11128_CHANNELS[13] = 13;
 8002824:	230d      	movs	r3, #13
 8002826:	f887 31ac 	strb.w	r3, [r7, #428]	@ 0x1ac
  	adc_pins.MAX11128_CHANNELS[14] = 14;
 800282a:	230e      	movs	r3, #14
 800282c:	f887 31ad 	strb.w	r3, [r7, #429]	@ 0x1ad
  	adc_pins.MAX11128_CHANNELS[15] = 15;
 8002830:	230f      	movs	r3, #15
 8002832:	f887 31ae 	strb.w	r3, [r7, #430]	@ 0x1ae


  	init_adc(&hspi4, &adc_pins);
 8002836:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 800283a:	4619      	mov	r1, r3
 800283c:	48b7      	ldr	r0, [pc, #732]	@ (8002b1c <StartDefaultTask+0x374>)
 800283e:	f009 feb6 	bl	800c5ae <init_adc>
  	//configure_read_adc_all(&adc_pins);
  	Shift_Reg reg = {0};
 8002842:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	611a      	str	r2, [r3, #16]
 8002852:	615a      	str	r2, [r3, #20]
  	reg.VLV_CTR_GPIO_Port = GPIOA;
 8002854:	4bb2      	ldr	r3, [pc, #712]	@ (8002b20 <StartDefaultTask+0x378>)
 8002856:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  	reg.VLV_CTR_GPIO_Pin = VLV_CTRL_Pin;
 800285a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800285e:	f8a7 3178 	strh.w	r3, [r7, #376]	@ 0x178
  	reg.VLV_CLK_GPIO_Port = GPIOA;
 8002862:	4baf      	ldr	r3, [pc, #700]	@ (8002b20 <StartDefaultTask+0x378>)
 8002864:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
  	reg.VLV_CLK_GPIO_Pin = BUFF_CLK_Pin;
 8002868:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800286c:	f8a7 3180 	strh.w	r3, [r7, #384]	@ 0x180
  	reg.VLV_CLR_GPIO_Port = GPIOA;
 8002870:	4bab      	ldr	r3, [pc, #684]	@ (8002b20 <StartDefaultTask+0x378>)
 8002872:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
  	reg.VLV_CLR_GPIO_Pin = BUFF_CLR_Pin;
 8002876:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800287a:	f8a7 3188 	strh.w	r3, [r7, #392]	@ 0x188

  	Valve VLV1 = {0};
 800287e:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	609a      	str	r2, [r3, #8]
 800288a:	60da      	str	r2, [r3, #12]
  	VLV1.VLV_EN_GPIO_Port = VLV1_EN_GPIO_Port;
 800288c:	4ba5      	ldr	r3, [pc, #660]	@ (8002b24 <StartDefaultTask+0x37c>)
 800288e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  	VLV1.VLV_EN_GPIO_Pin = VLV1_EN_Pin;
 8002892:	2340      	movs	r3, #64	@ 0x40
 8002894:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168
  	Valve VLV2 = {0};
 8002898:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
  	VLV2.VLV_EN_GPIO_Port = VLV2_EN_GPIO_Port;
 80028a6:	4b9e      	ldr	r3, [pc, #632]	@ (8002b20 <StartDefaultTask+0x378>)
 80028a8:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
  	VLV2.VLV_EN_GPIO_Pin = VLV2_EN_Pin;
 80028ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028b0:	f8a7 3158 	strh.w	r3, [r7, #344]	@ 0x158

  	VLV_Set_Voltage(reg, 0b00001011);
 80028b4:	230b      	movs	r3, #11
 80028b6:	9302      	str	r3, [sp, #8]
 80028b8:	466a      	mov	r2, sp
 80028ba:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80028be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028c2:	e882 0003 	stmia.w	r2, {r0, r1}
 80028c6:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 80028ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028cc:	f018 fb84 	bl	801afd8 <VLV_Set_Voltage>
  	    osDelay(20);
  	    GPIO_PinState open_state = HAL_GPIO_ReadPin(VLV_OLD1_GPIO_Port, VLV_OLD1_Pin);

  		osDelay(2000);
  	}*/
  	ADS_Main_t main_handle = {0};
 80028d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  	ADS_TC_t multiTCs[3];

  	ADS_configTC(&multiTCs[0], &hspi2, GPIOB, GPIO_PIN_14, 0xffff, TC1_CS_GPIO_Port, TC1_CS_Pin, ADS_MUX_AIN0_AIN1, ADS_PGA_GAIN_1, ADS_DATA_RATE_20);
 80028e0:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 80028e4:	2300      	movs	r3, #0
 80028e6:	9305      	str	r3, [sp, #20]
 80028e8:	2300      	movs	r3, #0
 80028ea:	9304      	str	r3, [sp, #16]
 80028ec:	2300      	movs	r3, #0
 80028ee:	9303      	str	r3, [sp, #12]
 80028f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028f4:	9302      	str	r3, [sp, #8]
 80028f6:	4b8c      	ldr	r3, [pc, #560]	@ (8002b28 <StartDefaultTask+0x380>)
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002904:	4a89      	ldr	r2, [pc, #548]	@ (8002b2c <StartDefaultTask+0x384>)
 8002906:	498a      	ldr	r1, [pc, #552]	@ (8002b30 <StartDefaultTask+0x388>)
 8002908:	f7fe fa3a 	bl	8000d80 <ADS_configTC>
  	ADS_configTC(&multiTCs[1], &hspi2, GPIOB, GPIO_PIN_14, 0xffff, TC1_CS_GPIO_Port, TC1_CS_Pin, ADS_MUX_AIN2_AIN3, ADS_PGA_GAIN_1, ADS_DATA_RATE_20);
 800290c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002910:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8002914:	2300      	movs	r3, #0
 8002916:	9305      	str	r3, [sp, #20]
 8002918:	2300      	movs	r3, #0
 800291a:	9304      	str	r3, [sp, #16]
 800291c:	2350      	movs	r3, #80	@ 0x50
 800291e:	9303      	str	r3, [sp, #12]
 8002920:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002924:	9302      	str	r3, [sp, #8]
 8002926:	4b80      	ldr	r3, [pc, #512]	@ (8002b28 <StartDefaultTask+0x380>)
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002934:	4a7d      	ldr	r2, [pc, #500]	@ (8002b2c <StartDefaultTask+0x384>)
 8002936:	497e      	ldr	r1, [pc, #504]	@ (8002b30 <StartDefaultTask+0x388>)
 8002938:	f7fe fa22 	bl	8000d80 <ADS_configTC>
  	ADS_configTC(&multiTCs[2], &hspi2, GPIOB, GPIO_PIN_14, 0xffff, TC2_CS_GPIO_Port, TC2_CS_Pin, ADS_MUX_AIN0_AIN1, ADS_PGA_GAIN_1, ADS_DATA_RATE_20);
 800293c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002940:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8002944:	2300      	movs	r3, #0
 8002946:	9305      	str	r3, [sp, #20]
 8002948:	2300      	movs	r3, #0
 800294a:	9304      	str	r3, [sp, #16]
 800294c:	2300      	movs	r3, #0
 800294e:	9303      	str	r3, [sp, #12]
 8002950:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002954:	9302      	str	r3, [sp, #8]
 8002956:	4b74      	ldr	r3, [pc, #464]	@ (8002b28 <StartDefaultTask+0x380>)
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002964:	4a71      	ldr	r2, [pc, #452]	@ (8002b2c <StartDefaultTask+0x384>)
 8002966:	4972      	ldr	r1, [pc, #456]	@ (8002b30 <StartDefaultTask+0x388>)
 8002968:	f7fe fa0a 	bl	8000d80 <ADS_configTC>
  	ADS_init(&main_handle, multiTCs, 3);
 800296c:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8002970:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002974:	2203      	movs	r2, #3
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fa5a 	bl	8000e30 <ADS_init>

  	MS5611 bar2;
  	bar2.hspi = &hspi6;
 800297c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002980:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002984:	4a6b      	ldr	r2, [pc, #428]	@ (8002b34 <StartDefaultTask+0x38c>)
 8002986:	601a      	str	r2, [r3, #0]
  	bar2.SPI_TIMEOUT = 100;
 8002988:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800298c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002990:	2264      	movs	r2, #100	@ 0x64
 8002992:	809a      	strh	r2, [r3, #4]
  	bar2.CS_GPIO_Port = BAR1_CS_GPIO_Port; // PA3
 8002994:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002998:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800299c:	4a60      	ldr	r2, [pc, #384]	@ (8002b20 <StartDefaultTask+0x378>)
 800299e:	609a      	str	r2, [r3, #8]
  	bar2.CS_GPIO_Pin = BAR1_CS_Pin;
 80029a0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029a4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80029a8:	2210      	movs	r2, #16
 80029aa:	819a      	strh	r2, [r3, #12]
  	bar2.pres_offset = 0;
 80029ac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029b0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	611a      	str	r2, [r3, #16]
  	bar2.alt_offset = 0;
 80029ba:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029be:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	615a      	str	r2, [r3, #20]

  	MS5611_PROM_t prom;
  	prom.constants.C1 = 0;
 80029c8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029cc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029d0:	2200      	movs	r2, #0
 80029d2:	801a      	strh	r2, [r3, #0]
  	prom.constants.C2 = 0;
 80029d4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029d8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029dc:	2200      	movs	r2, #0
 80029de:	805a      	strh	r2, [r3, #2]
  	prom.constants.C3 = 0;
 80029e0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029e4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029e8:	2200      	movs	r2, #0
 80029ea:	809a      	strh	r2, [r3, #4]
  	prom.constants.C4 = 0;
 80029ec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029f0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029f4:	2200      	movs	r2, #0
 80029f6:	80da      	strh	r2, [r3, #6]
  	prom.constants.C5 = 0;
 80029f8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029fc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a00:	2200      	movs	r2, #0
 8002a02:	811a      	strh	r2, [r3, #8]
  	prom.constants.C6 = 0;
 8002a04:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a08:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	815a      	strh	r2, [r3, #10]

  	MS5611_Reset(&bar2);
 8002a10:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002a14:	4618      	mov	r0, r3
 8002a16:	f00a f8ab 	bl	800cb70 <MS5611_Reset>
  	MS5611_readPROM(&bar2, &prom);
 8002a1a:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002a1e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f00a f8b8 	bl	800cb9a <MS5611_readPROM>

  	float pres = 0.0;
 8002a2a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a2e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

  	for(;;) {
  		ADS_Reading_t values[3];
  		int status = ADS_readAllwTimestamps(&main_handle, values);
 8002a38:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002a3c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff f898 	bl	8001b78 <ADS_readAllwTimestamps>
 8002a48:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

  		MS5611_getPres(&bar2, &pres, &prom, OSR_256);
 8002a4c:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002a50:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8002a54:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f00a fab7 	bl	800cfcc <MS5611_getPres>

  		uint16_t adc_values[16] = {0};
 8002a5e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a62:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a66:	4618      	mov	r0, r3
 8002a68:	2320      	movs	r3, #32
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	f018 fdeb 	bl	801b648 <memset>
  		read_adc(&hspi4, &adc_pins, adc_values);
 8002a72:	f107 0208 	add.w	r2, r7, #8
 8002a76:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4827      	ldr	r0, [pc, #156]	@ (8002b1c <StartDefaultTask+0x374>)
 8002a7e:	f009 fde7 	bl	800c650 <read_adc>
  		uint16_t raw_valve1 = adc_values[1];
 8002a82:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a86:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a8a:	885b      	ldrh	r3, [r3, #2]
 8002a8c:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
  		float valve_current = (((raw_valve1 / 4095.0) * 3.3) * (5.0/3.0)) / (50 * 0.02);
 8002a90:	f8b7 31ba 	ldrh.w	r3, [r7, #442]	@ 0x1ba
 8002a94:	ee07 3a90 	vmov	s15, r3
 8002a98:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002a9c:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8002b00 <StartDefaultTask+0x358>
 8002aa0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002aa4:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8002b08 <StartDefaultTask+0x360>
 8002aa8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002aac:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8002b10 <StartDefaultTask+0x368>
 8002ab0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002ab4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ab8:	edc7 7a6d 	vstr	s15, [r7, #436]	@ 0x1b4
  		VLV_Toggle(VLV1);
 8002abc:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8002ac0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ac2:	f018 fad0 	bl	801b066 <VLV_Toggle>
  		VLV_Toggle(VLV2);
 8002ac6:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002acc:	f018 facb 	bl	801b066 <VLV_Toggle>
  		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	4811      	ldr	r0, [pc, #68]	@ (8002b18 <StartDefaultTask+0x370>)
 8002ad4:	f003 f899 	bl	8005c0a <HAL_GPIO_TogglePin>
  		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8002ad8:	2102      	movs	r1, #2
 8002ada:	480f      	ldr	r0, [pc, #60]	@ (8002b18 <StartDefaultTask+0x370>)
 8002adc:	f003 f895 	bl	8005c0a <HAL_GPIO_TogglePin>
  		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002ae0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ae4:	4811      	ldr	r0, [pc, #68]	@ (8002b2c <StartDefaultTask+0x384>)
 8002ae6:	f003 f890 	bl	8005c0a <HAL_GPIO_TogglePin>

  		osDelay(20);
 8002aea:	2014      	movs	r0, #20
 8002aec:	f00a fbd7 	bl	800d29e <osDelay>
  		GPIO_PinState open_state = HAL_GPIO_ReadPin(VLV1_OLD_GPIO_Port, VLV1_OLD_Pin);
 8002af0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002af4:	480b      	ldr	r0, [pc, #44]	@ (8002b24 <StartDefaultTask+0x37c>)
 8002af6:	f003 f857 	bl	8005ba8 <HAL_GPIO_ReadPin>
 8002afa:	4603      	mov	r3, r0
 8002afc:	e01c      	b.n	8002b38 <StartDefaultTask+0x390>
 8002afe:	bf00      	nop
 8002b00:	00000000 	.word	0x00000000
 8002b04:	40affe00 	.word	0x40affe00
 8002b08:	66666666 	.word	0x66666666
 8002b0c:	400a6666 	.word	0x400a6666
 8002b10:	aaaaaaab 	.word	0xaaaaaaab
 8002b14:	3ffaaaaa 	.word	0x3ffaaaaa
 8002b18:	58021000 	.word	0x58021000
 8002b1c:	24000288 	.word	0x24000288
 8002b20:	58020000 	.word	0x58020000
 8002b24:	58020800 	.word	0x58020800
 8002b28:	58020c00 	.word	0x58020c00
 8002b2c:	58020400 	.word	0x58020400
 8002b30:	24000200 	.word	0x24000200
 8002b34:	24000398 	.word	0x24000398
 8002b38:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3

  		osDelay(1500);
 8002b3c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002b40:	f00a fbad 	bl	800d29e <osDelay>
  	for(;;) {
 8002b44:	bf00      	nop
 8002b46:	e777      	b.n	8002a38 <StartDefaultTask+0x290>

08002b48 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002b4e:	463b      	mov	r3, r7
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002b5a:	f001 f89d 	bl	8003c98 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002b6a:	231f      	movs	r3, #31
 8002b6c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002b6e:	2387      	movs	r3, #135	@ 0x87
 8002b70:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002b76:	2300      	movs	r3, #0
 8002b78:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002b8a:	463b      	mov	r3, r7
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f001 f8bb 	bl	8003d08 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002b92:	2301      	movs	r3, #1
 8002b94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000200;
 8002b96:	4b14      	ldr	r3, [pc, #80]	@ (8002be8 <MPU_Config+0xa0>)
 8002b98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8002b9a:	230e      	movs	r3, #14
 8002b9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002bae:	463b      	mov	r3, r7
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f001 f8a9 	bl	8003d08 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8002bba:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002bbe:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8002bc0:	2308      	movs	r3, #8
 8002bc2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002bd0:	463b      	mov	r3, r7
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 f898 	bl	8003d08 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002bd8:	2004      	movs	r0, #4
 8002bda:	f001 f875 	bl	8003cc8 <HAL_MPU_Enable>

}
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	30000200 	.word	0x30000200

08002bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a04      	ldr	r2, [pc, #16]	@ (8002c0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d101      	bne.n	8002c02 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002bfe:	f000 ff21 	bl	8003a44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40001000 	.word	0x40001000

08002c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 8002c14:	bf00      	nop
 8002c16:	e7fd      	b.n	8002c14 <Error_Handler+0x4>

08002c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c50 <HAL_MspInit+0x38>)
 8002c20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c24:	4a0a      	ldr	r2, [pc, #40]	@ (8002c50 <HAL_MspInit+0x38>)
 8002c26:	f043 0302 	orr.w	r3, r3, #2
 8002c2a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002c2e:	4b08      	ldr	r3, [pc, #32]	@ (8002c50 <HAL_MspInit+0x38>)
 8002c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	607b      	str	r3, [r7, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	210f      	movs	r1, #15
 8002c40:	f06f 0001 	mvn.w	r0, #1
 8002c44:	f001 f800 	bl	8003c48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	58024400 	.word	0x58024400

08002c54 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b0ba      	sub	sp, #232	@ 0xe8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c6c:	f107 0318 	add.w	r3, r7, #24
 8002c70:	22b8      	movs	r2, #184	@ 0xb8
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f018 fce7 	bl	801b648 <memset>
  if(hi2c->Instance==I2C1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a58      	ldr	r2, [pc, #352]	@ (8002de0 <HAL_I2C_MspInit+0x18c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d146      	bne.n	8002d12 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c84:	f04f 0208 	mov.w	r2, #8
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c96:	f107 0318 	add.w	r3, r7, #24
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f004 f906 	bl	8006eac <HAL_RCCEx_PeriphCLKConfig>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002ca6:	f7ff ffb3 	bl	8002c10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002caa:	4b4e      	ldr	r3, [pc, #312]	@ (8002de4 <HAL_I2C_MspInit+0x190>)
 8002cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cb0:	4a4c      	ldr	r2, [pc, #304]	@ (8002de4 <HAL_I2C_MspInit+0x190>)
 8002cb2:	f043 0302 	orr.w	r3, r3, #2
 8002cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002cba:	4b4a      	ldr	r3, [pc, #296]	@ (8002de4 <HAL_I2C_MspInit+0x190>)
 8002cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cc8:	23c0      	movs	r3, #192	@ 0xc0
 8002cca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cce:	2312      	movs	r3, #18
 8002cd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002cea:	4619      	mov	r1, r3
 8002cec:	483e      	ldr	r0, [pc, #248]	@ (8002de8 <HAL_I2C_MspInit+0x194>)
 8002cee:	f002 fdb3 	bl	8005858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cf2:	4b3c      	ldr	r3, [pc, #240]	@ (8002de4 <HAL_I2C_MspInit+0x190>)
 8002cf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cf8:	4a3a      	ldr	r2, [pc, #232]	@ (8002de4 <HAL_I2C_MspInit+0x190>)
 8002cfa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cfe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d02:	4b38      	ldr	r3, [pc, #224]	@ (8002de4 <HAL_I2C_MspInit+0x190>)
 8002d04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C5_MspInit 1 */

    /* USER CODE END I2C5_MspInit 1 */
  }

}
 8002d10:	e061      	b.n	8002dd6 <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C5)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a35      	ldr	r2, [pc, #212]	@ (8002dec <HAL_I2C_MspInit+0x198>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d15c      	bne.n	8002dd6 <HAL_I2C_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8002d1c:	f04f 0208 	mov.w	r2, #8
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d2e:	f107 0318 	add.w	r3, r7, #24
 8002d32:	4618      	mov	r0, r3
 8002d34:	f004 f8ba 	bl	8006eac <HAL_RCCEx_PeriphCLKConfig>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8002d3e:	f7ff ff67 	bl	8002c10 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d42:	4b28      	ldr	r3, [pc, #160]	@ (8002de4 <HAL_I2C_MspInit+0x190>)
 8002d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d48:	4a26      	ldr	r2, [pc, #152]	@ (8002de4 <HAL_I2C_MspInit+0x190>)
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d52:	4b24      	ldr	r3, [pc, #144]	@ (8002de4 <HAL_I2C_MspInit+0x190>)
 8002d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d68:	2312      	movs	r3, #18
 8002d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C5;
 8002d7a:	2306      	movs	r3, #6
 8002d7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002d84:	4619      	mov	r1, r3
 8002d86:	481a      	ldr	r0, [pc, #104]	@ (8002df0 <HAL_I2C_MspInit+0x19c>)
 8002d88:	f002 fd66 	bl	8005858 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d94:	2312      	movs	r3, #18
 8002d96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da0:	2300      	movs	r3, #0
 8002da2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8002da6:	2304      	movs	r3, #4
 8002da8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002db0:	4619      	mov	r1, r3
 8002db2:	480f      	ldr	r0, [pc, #60]	@ (8002df0 <HAL_I2C_MspInit+0x19c>)
 8002db4:	f002 fd50 	bl	8005858 <HAL_GPIO_Init>
    __HAL_RCC_I2C5_CLK_ENABLE();
 8002db8:	4b0a      	ldr	r3, [pc, #40]	@ (8002de4 <HAL_I2C_MspInit+0x190>)
 8002dba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dbe:	4a09      	ldr	r2, [pc, #36]	@ (8002de4 <HAL_I2C_MspInit+0x190>)
 8002dc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002dc4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002dc8:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <HAL_I2C_MspInit+0x190>)
 8002dca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
}
 8002dd6:	bf00      	nop
 8002dd8:	37e8      	adds	r7, #232	@ 0xe8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40005400 	.word	0x40005400
 8002de4:	58024400 	.word	0x58024400
 8002de8:	58020400 	.word	0x58020400
 8002dec:	40006400 	.word	0x40006400
 8002df0:	58020800 	.word	0x58020800

08002df4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b0b0      	sub	sp, #192	@ 0xc0
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dfc:	f107 0308 	add.w	r3, r7, #8
 8002e00:	22b8      	movs	r2, #184	@ 0xb8
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f018 fc1f 	bl	801b648 <memset>
  if(hrtc->Instance==RTC)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a10      	ldr	r2, [pc, #64]	@ (8002e50 <HAL_RTC_MspInit+0x5c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d119      	bne.n	8002e48 <HAL_RTC_MspInit+0x54>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e14:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002e20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e28:	f107 0308 	add.w	r3, r7, #8
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f004 f83d 	bl	8006eac <HAL_RCCEx_PeriphCLKConfig>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002e38:	f7ff feea 	bl	8002c10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e3c:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <HAL_RTC_MspInit+0x60>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e40:	4a04      	ldr	r2, [pc, #16]	@ (8002e54 <HAL_RTC_MspInit+0x60>)
 8002e42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e46:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002e48:	bf00      	nop
 8002e4a:	37c0      	adds	r7, #192	@ 0xc0
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	58004000 	.word	0x58004000
 8002e54:	58024400 	.word	0x58024400

08002e58 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b0c2      	sub	sp, #264	@ 0x108
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e66:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002e7c:	22b8      	movs	r2, #184	@ 0xb8
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f018 fbe1 	bl	801b648 <memset>
  if(hspi->Instance==SPI1)
 8002e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4ab0      	ldr	r2, [pc, #704]	@ (8003154 <HAL_SPI_MspInit+0x2fc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d16a      	bne.n	8002f6e <HAL_SPI_MspInit+0x116>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002e98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eaa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f003 fffc 	bl	8006eac <HAL_RCCEx_PeriphCLKConfig>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_SPI_MspInit+0x66>
    {
      Error_Handler();
 8002eba:	f7ff fea9 	bl	8002c10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ebe:	4ba6      	ldr	r3, [pc, #664]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8002ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ec4:	4aa4      	ldr	r2, [pc, #656]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8002ec6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002eca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ece:	4ba2      	ldr	r3, [pc, #648]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8002ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ed4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002edc:	4b9e      	ldr	r3, [pc, #632]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8002ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ee2:	4a9d      	ldr	r2, [pc, #628]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002eec:	4b9a      	ldr	r3, [pc, #616]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8002eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efa:	4b97      	ldr	r3, [pc, #604]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8002efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f00:	4a95      	ldr	r2, [pc, #596]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8002f02:	f043 0302 	orr.w	r3, r3, #2
 8002f06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f0a:	4b93      	ldr	r3, [pc, #588]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8002f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f18:	2340      	movs	r3, #64	@ 0x40
 8002f1a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f30:	2305      	movs	r3, #5
 8002f32:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f36:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4887      	ldr	r0, [pc, #540]	@ (800315c <HAL_SPI_MspInit+0x304>)
 8002f3e:	f002 fc8b 	bl	8005858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002f42:	2328      	movs	r3, #40	@ 0x28
 8002f44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f5a:	2305      	movs	r3, #5
 8002f5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f60:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002f64:	4619      	mov	r1, r3
 8002f66:	487e      	ldr	r0, [pc, #504]	@ (8003160 <HAL_SPI_MspInit+0x308>)
 8002f68:	f002 fc76 	bl	8005858 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI6_MspInit 1 */

    /* USER CODE END SPI6_MspInit 1 */
  }

}
 8002f6c:	e180      	b.n	8003270 <HAL_SPI_MspInit+0x418>
  else if(hspi->Instance==SPI2)
 8002f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a7a      	ldr	r2, [pc, #488]	@ (8003164 <HAL_SPI_MspInit+0x30c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d147      	bne.n	8003010 <HAL_SPI_MspInit+0x1b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002f80:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f92:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f96:	4618      	mov	r0, r3
 8002f98:	f003 ff88 	bl	8006eac <HAL_RCCEx_PeriphCLKConfig>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_SPI_MspInit+0x14e>
      Error_Handler();
 8002fa2:	f7ff fe35 	bl	8002c10 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fa6:	4b6c      	ldr	r3, [pc, #432]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8002fa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fac:	4a6a      	ldr	r2, [pc, #424]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8002fae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fb2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002fb6:	4b68      	ldr	r3, [pc, #416]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8002fb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc4:	4b64      	ldr	r3, [pc, #400]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8002fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fca:	4a63      	ldr	r2, [pc, #396]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8002fcc:	f043 0302 	orr.w	r3, r3, #2
 8002fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002fd4:	4b60      	ldr	r3, [pc, #384]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8002fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002fe2:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8002fe6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fea:	2302      	movs	r3, #2
 8002fec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ffc:	2305      	movs	r3, #5
 8002ffe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003002:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003006:	4619      	mov	r1, r3
 8003008:	4855      	ldr	r0, [pc, #340]	@ (8003160 <HAL_SPI_MspInit+0x308>)
 800300a:	f002 fc25 	bl	8005858 <HAL_GPIO_Init>
}
 800300e:	e12f      	b.n	8003270 <HAL_SPI_MspInit+0x418>
  else if(hspi->Instance==SPI4)
 8003010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003014:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a52      	ldr	r2, [pc, #328]	@ (8003168 <HAL_SPI_MspInit+0x310>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d147      	bne.n	80030b2 <HAL_SPI_MspInit+0x25a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8003022:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800302e:	2300      	movs	r3, #0
 8003030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003034:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003038:	4618      	mov	r0, r3
 800303a:	f003 ff37 	bl	8006eac <HAL_RCCEx_PeriphCLKConfig>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_SPI_MspInit+0x1f0>
      Error_Handler();
 8003044:	f7ff fde4 	bl	8002c10 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003048:	4b43      	ldr	r3, [pc, #268]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 800304a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800304e:	4a42      	ldr	r2, [pc, #264]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8003050:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003054:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003058:	4b3f      	ldr	r3, [pc, #252]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 800305a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800305e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003062:	623b      	str	r3, [r7, #32]
 8003064:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003066:	4b3c      	ldr	r3, [pc, #240]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8003068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800306c:	4a3a      	ldr	r2, [pc, #232]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 800306e:	f043 0310 	orr.w	r3, r3, #16
 8003072:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003076:	4b38      	ldr	r3, [pc, #224]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8003078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|ADC_CS_Pin|GPIO_PIN_12;
 8003084:	f44f 53c3 	mov.w	r3, #6240	@ 0x1860
 8003088:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308c:	2302      	movs	r3, #2
 800308e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003098:	2300      	movs	r3, #0
 800309a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800309e:	2305      	movs	r3, #5
 80030a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030a4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80030a8:	4619      	mov	r1, r3
 80030aa:	4830      	ldr	r0, [pc, #192]	@ (800316c <HAL_SPI_MspInit+0x314>)
 80030ac:	f002 fbd4 	bl	8005858 <HAL_GPIO_Init>
}
 80030b0:	e0de      	b.n	8003270 <HAL_SPI_MspInit+0x418>
  else if(hspi->Instance==SPI5)
 80030b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80030b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a2c      	ldr	r2, [pc, #176]	@ (8003170 <HAL_SPI_MspInit+0x318>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d159      	bne.n	8003178 <HAL_SPI_MspInit+0x320>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80030c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80030d0:	2300      	movs	r3, #0
 80030d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80030da:	4618      	mov	r0, r3
 80030dc:	f003 fee6 	bl	8006eac <HAL_RCCEx_PeriphCLKConfig>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_SPI_MspInit+0x292>
      Error_Handler();
 80030e6:	f7ff fd93 	bl	8002c10 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80030ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 80030ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030f0:	4a19      	ldr	r2, [pc, #100]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 80030f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030fa:	4b17      	ldr	r3, [pc, #92]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 80030fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003108:	4b13      	ldr	r3, [pc, #76]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 800310a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800310e:	4a12      	ldr	r2, [pc, #72]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 8003110:	f043 0320 	orr.w	r3, r3, #32
 8003114:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003118:	4b0f      	ldr	r3, [pc, #60]	@ (8003158 <HAL_SPI_MspInit+0x300>)
 800311a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003126:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800312a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312e:	2302      	movs	r3, #2
 8003130:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313a:	2300      	movs	r3, #0
 800313c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003140:	2305      	movs	r3, #5
 8003142:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003146:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800314a:	4619      	mov	r1, r3
 800314c:	4809      	ldr	r0, [pc, #36]	@ (8003174 <HAL_SPI_MspInit+0x31c>)
 800314e:	f002 fb83 	bl	8005858 <HAL_GPIO_Init>
}
 8003152:	e08d      	b.n	8003270 <HAL_SPI_MspInit+0x418>
 8003154:	40013000 	.word	0x40013000
 8003158:	58024400 	.word	0x58024400
 800315c:	58020000 	.word	0x58020000
 8003160:	58020400 	.word	0x58020400
 8003164:	40003800 	.word	0x40003800
 8003168:	40013400 	.word	0x40013400
 800316c:	58021000 	.word	0x58021000
 8003170:	40015000 	.word	0x40015000
 8003174:	58021400 	.word	0x58021400
  else if(hspi->Instance==SPI6)
 8003178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800317c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a3d      	ldr	r2, [pc, #244]	@ (800327c <HAL_SPI_MspInit+0x424>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d172      	bne.n	8003270 <HAL_SPI_MspInit+0x418>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 800318a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8003196:	2300      	movs	r3, #0
 8003198:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800319c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 fe83 	bl	8006eac <HAL_RCCEx_PeriphCLKConfig>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_SPI_MspInit+0x358>
      Error_Handler();
 80031ac:	f7ff fd30 	bl	8002c10 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80031b0:	4b33      	ldr	r3, [pc, #204]	@ (8003280 <HAL_SPI_MspInit+0x428>)
 80031b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80031b6:	4a32      	ldr	r2, [pc, #200]	@ (8003280 <HAL_SPI_MspInit+0x428>)
 80031b8:	f043 0320 	orr.w	r3, r3, #32
 80031bc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80031c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003280 <HAL_SPI_MspInit+0x428>)
 80031c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003280 <HAL_SPI_MspInit+0x428>)
 80031d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003280 <HAL_SPI_MspInit+0x428>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031de:	4b28      	ldr	r3, [pc, #160]	@ (8003280 <HAL_SPI_MspInit+0x428>)
 80031e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031ec:	4b24      	ldr	r3, [pc, #144]	@ (8003280 <HAL_SPI_MspInit+0x428>)
 80031ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031f2:	4a23      	ldr	r2, [pc, #140]	@ (8003280 <HAL_SPI_MspInit+0x428>)
 80031f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031fc:	4b20      	ldr	r3, [pc, #128]	@ (8003280 <HAL_SPI_MspInit+0x428>)
 80031fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003202:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8003206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800320a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003214:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003218:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800321a:	2320      	movs	r3, #32
 800321c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003220:	2302      	movs	r3, #2
 8003222:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322c:	2300      	movs	r3, #0
 800322e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8003232:	2308      	movs	r3, #8
 8003234:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003238:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800323c:	4619      	mov	r1, r3
 800323e:	4811      	ldr	r0, [pc, #68]	@ (8003284 <HAL_SPI_MspInit+0x42c>)
 8003240:	f002 fb0a 	bl	8005858 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8003244:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8003248:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324c:	2302      	movs	r3, #2
 800324e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	2300      	movs	r3, #0
 8003254:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003258:	2300      	movs	r3, #0
 800325a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800325e:	2305      	movs	r3, #5
 8003260:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003264:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003268:	4619      	mov	r1, r3
 800326a:	4807      	ldr	r0, [pc, #28]	@ (8003288 <HAL_SPI_MspInit+0x430>)
 800326c:	f002 faf4 	bl	8005858 <HAL_GPIO_Init>
}
 8003270:	bf00      	nop
 8003272:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	58001400 	.word	0x58001400
 8003280:	58024400 	.word	0x58024400
 8003284:	58020000 	.word	0x58020000
 8003288:	58021800 	.word	0x58021800

0800328c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b0b8      	sub	sp, #224	@ 0xe0
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003294:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032a4:	f107 0310 	add.w	r3, r7, #16
 80032a8:	22b8      	movs	r2, #184	@ 0xb8
 80032aa:	2100      	movs	r1, #0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f018 f9cb 	bl	801b648 <memset>
  if(huart->Instance==USART10)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a31      	ldr	r2, [pc, #196]	@ (800337c <HAL_UART_MspInit+0xf0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d15a      	bne.n	8003372 <HAL_UART_MspInit+0xe6>

    /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 80032bc:	f04f 0201 	mov.w	r2, #1
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80032c8:	2300      	movs	r3, #0
 80032ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032ce:	f107 0310 	add.w	r3, r7, #16
 80032d2:	4618      	mov	r0, r3
 80032d4:	f003 fdea 	bl	8006eac <HAL_RCCEx_PeriphCLKConfig>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80032de:	f7ff fc97 	bl	8002c10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 80032e2:	4b27      	ldr	r3, [pc, #156]	@ (8003380 <HAL_UART_MspInit+0xf4>)
 80032e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032e8:	4a25      	ldr	r2, [pc, #148]	@ (8003380 <HAL_UART_MspInit+0xf4>)
 80032ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80032f2:	4b23      	ldr	r3, [pc, #140]	@ (8003380 <HAL_UART_MspInit+0xf4>)
 80032f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003300:	4b1f      	ldr	r3, [pc, #124]	@ (8003380 <HAL_UART_MspInit+0xf4>)
 8003302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003306:	4a1e      	ldr	r2, [pc, #120]	@ (8003380 <HAL_UART_MspInit+0xf4>)
 8003308:	f043 0310 	orr.w	r3, r3, #16
 800330c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003310:	4b1b      	ldr	r3, [pc, #108]	@ (8003380 <HAL_UART_MspInit+0xf4>)
 8003312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800331e:	2304      	movs	r3, #4
 8003320:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003324:	2302      	movs	r3, #2
 8003326:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003330:	2300      	movs	r3, #0
 8003332:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8003336:	2304      	movs	r3, #4
 8003338:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800333c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003340:	4619      	mov	r1, r3
 8003342:	4810      	ldr	r0, [pc, #64]	@ (8003384 <HAL_UART_MspInit+0xf8>)
 8003344:	f002 fa88 	bl	8005858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003348:	2308      	movs	r3, #8
 800334a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335a:	2300      	movs	r3, #0
 800335c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8003360:	230b      	movs	r3, #11
 8003362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003366:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800336a:	4619      	mov	r1, r3
 800336c:	4805      	ldr	r0, [pc, #20]	@ (8003384 <HAL_UART_MspInit+0xf8>)
 800336e:	f002 fa73 	bl	8005858 <HAL_GPIO_Init>

    /* USER CODE END USART10_MspInit 1 */

  }

}
 8003372:	bf00      	nop
 8003374:	37e0      	adds	r7, #224	@ 0xe0
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40011c00 	.word	0x40011c00
 8003380:	58024400 	.word	0x58024400
 8003384:	58021000 	.word	0x58021000

08003388 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b090      	sub	sp, #64	@ 0x40
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b0f      	cmp	r3, #15
 8003394:	d827      	bhi.n	80033e6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003396:	2200      	movs	r2, #0
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	2036      	movs	r0, #54	@ 0x36
 800339c:	f000 fc54 	bl	8003c48 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80033a0:	2036      	movs	r0, #54	@ 0x36
 80033a2:	f000 fc6b 	bl	8003c7c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80033a6:	4a29      	ldr	r2, [pc, #164]	@ (800344c <HAL_InitTick+0xc4>)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80033ac:	4b28      	ldr	r3, [pc, #160]	@ (8003450 <HAL_InitTick+0xc8>)
 80033ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033b2:	4a27      	ldr	r2, [pc, #156]	@ (8003450 <HAL_InitTick+0xc8>)
 80033b4:	f043 0310 	orr.w	r3, r3, #16
 80033b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80033bc:	4b24      	ldr	r3, [pc, #144]	@ (8003450 <HAL_InitTick+0xc8>)
 80033be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80033ca:	f107 0210 	add.w	r2, r7, #16
 80033ce:	f107 0314 	add.w	r3, r7, #20
 80033d2:	4611      	mov	r1, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f003 fd27 	bl	8006e28 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80033da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80033de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d106      	bne.n	80033f2 <HAL_InitTick+0x6a>
 80033e4:	e001      	b.n	80033ea <HAL_InitTick+0x62>
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e02b      	b.n	8003442 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80033ea:	f003 fcf1 	bl	8006dd0 <HAL_RCC_GetPCLK1Freq>
 80033ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80033f0:	e004      	b.n	80033fc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80033f2:	f003 fced 	bl	8006dd0 <HAL_RCC_GetPCLK1Freq>
 80033f6:	4603      	mov	r3, r0
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80033fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033fe:	4a15      	ldr	r2, [pc, #84]	@ (8003454 <HAL_InitTick+0xcc>)
 8003400:	fba2 2303 	umull	r2, r3, r2, r3
 8003404:	0c9b      	lsrs	r3, r3, #18
 8003406:	3b01      	subs	r3, #1
 8003408:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800340a:	4b13      	ldr	r3, [pc, #76]	@ (8003458 <HAL_InitTick+0xd0>)
 800340c:	4a13      	ldr	r2, [pc, #76]	@ (800345c <HAL_InitTick+0xd4>)
 800340e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003410:	4b11      	ldr	r3, [pc, #68]	@ (8003458 <HAL_InitTick+0xd0>)
 8003412:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003416:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003418:	4a0f      	ldr	r2, [pc, #60]	@ (8003458 <HAL_InitTick+0xd0>)
 800341a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800341c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800341e:	4b0e      	ldr	r3, [pc, #56]	@ (8003458 <HAL_InitTick+0xd0>)
 8003420:	2200      	movs	r2, #0
 8003422:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003424:	4b0c      	ldr	r3, [pc, #48]	@ (8003458 <HAL_InitTick+0xd0>)
 8003426:	2200      	movs	r2, #0
 8003428:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800342a:	480b      	ldr	r0, [pc, #44]	@ (8003458 <HAL_InitTick+0xd0>)
 800342c:	f006 fdbf 	bl	8009fae <HAL_TIM_Base_Init>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d104      	bne.n	8003440 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003436:	4808      	ldr	r0, [pc, #32]	@ (8003458 <HAL_InitTick+0xd0>)
 8003438:	f006 fe1a 	bl	800a070 <HAL_TIM_Base_Start_IT>
 800343c:	4603      	mov	r3, r0
 800343e:	e000      	b.n	8003442 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
}
 8003442:	4618      	mov	r0, r3
 8003444:	3740      	adds	r7, #64	@ 0x40
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	24000008 	.word	0x24000008
 8003450:	58024400 	.word	0x58024400
 8003454:	431bde83 	.word	0x431bde83
 8003458:	240004b8 	.word	0x240004b8
 800345c:	40001000 	.word	0x40001000

08003460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003464:	bf00      	nop
 8003466:	e7fd      	b.n	8003464 <NMI_Handler+0x4>

08003468 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800346c:	bf00      	nop
 800346e:	e7fd      	b.n	800346c <HardFault_Handler+0x4>

08003470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003474:	bf00      	nop
 8003476:	e7fd      	b.n	8003474 <MemManage_Handler+0x4>

08003478 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800347c:	bf00      	nop
 800347e:	e7fd      	b.n	800347c <BusFault_Handler+0x4>

08003480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003484:	bf00      	nop
 8003486:	e7fd      	b.n	8003484 <UsageFault_Handler+0x4>

08003488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800349c:	4802      	ldr	r0, [pc, #8]	@ (80034a8 <TIM6_DAC_IRQHandler+0x10>)
 800349e:	f006 fe6d 	bl	800a17c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	240004b8 	.word	0x240004b8

080034ac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80034b0:	4802      	ldr	r0, [pc, #8]	@ (80034bc <ETH_IRQHandler+0x10>)
 80034b2:	f001 f83d 	bl	8004530 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	2400058c 	.word	0x2400058c

080034c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return 1;
 80034c4:	2301      	movs	r3, #1
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <_kill>:

int _kill(int pid, int sig)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <_kill+0x20>)
 80034dc:	2216      	movs	r2, #22
 80034de:	601a      	str	r2, [r3, #0]
  return -1;
 80034e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	24008430 	.word	0x24008430

080034f4 <_exit>:

void _exit (int status)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ffe5 	bl	80034d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003506:	bf00      	nop
 8003508:	e7fd      	b.n	8003506 <_exit+0x12>

0800350a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b086      	sub	sp, #24
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e00a      	b.n	8003532 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800351c:	f3af 8000 	nop.w
 8003520:	4601      	mov	r1, r0
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	60ba      	str	r2, [r7, #8]
 8003528:	b2ca      	uxtb	r2, r1
 800352a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3301      	adds	r3, #1
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	429a      	cmp	r2, r3
 8003538:	dbf0      	blt.n	800351c <_read+0x12>
  }

  return len;
 800353a:	687b      	ldr	r3, [r7, #4]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e009      	b.n	800356a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	60ba      	str	r2, [r7, #8]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	3301      	adds	r3, #1
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	429a      	cmp	r2, r3
 8003570:	dbf1      	blt.n	8003556 <_write+0x12>
  }
  return len;
 8003572:	687b      	ldr	r3, [r7, #4]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <_close>:

int _close(int file)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035a4:	605a      	str	r2, [r3, #4]
  return 0;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <_isatty>:

int _isatty(int file)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035bc:	2301      	movs	r3, #1
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b085      	sub	sp, #20
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035ec:	4a14      	ldr	r2, [pc, #80]	@ (8003640 <_sbrk+0x5c>)
 80035ee:	4b15      	ldr	r3, [pc, #84]	@ (8003644 <_sbrk+0x60>)
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035f8:	4b13      	ldr	r3, [pc, #76]	@ (8003648 <_sbrk+0x64>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d102      	bne.n	8003606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003600:	4b11      	ldr	r3, [pc, #68]	@ (8003648 <_sbrk+0x64>)
 8003602:	4a12      	ldr	r2, [pc, #72]	@ (800364c <_sbrk+0x68>)
 8003604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003606:	4b10      	ldr	r3, [pc, #64]	@ (8003648 <_sbrk+0x64>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4413      	add	r3, r2
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	429a      	cmp	r2, r3
 8003612:	d205      	bcs.n	8003620 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003614:	4b0e      	ldr	r3, [pc, #56]	@ (8003650 <_sbrk+0x6c>)
 8003616:	220c      	movs	r2, #12
 8003618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800361a:	f04f 33ff 	mov.w	r3, #4294967295
 800361e:	e009      	b.n	8003634 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003620:	4b09      	ldr	r3, [pc, #36]	@ (8003648 <_sbrk+0x64>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003626:	4b08      	ldr	r3, [pc, #32]	@ (8003648 <_sbrk+0x64>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4413      	add	r3, r2
 800362e:	4a06      	ldr	r2, [pc, #24]	@ (8003648 <_sbrk+0x64>)
 8003630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003632:	68fb      	ldr	r3, [r7, #12]
}
 8003634:	4618      	mov	r0, r3
 8003636:	371c      	adds	r7, #28
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	24050000 	.word	0x24050000
 8003644:	00000400 	.word	0x00000400
 8003648:	24000504 	.word	0x24000504
 800364c:	2400cdc8 	.word	0x2400cdc8
 8003650:	24008430 	.word	0x24008430

08003654 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800365a:	4b3c      	ldr	r3, [pc, #240]	@ (800374c <SystemInit+0xf8>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003660:	4a3a      	ldr	r2, [pc, #232]	@ (800374c <SystemInit+0xf8>)
 8003662:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003666:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800366a:	4b39      	ldr	r3, [pc, #228]	@ (8003750 <SystemInit+0xfc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	2b06      	cmp	r3, #6
 8003674:	d807      	bhi.n	8003686 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003676:	4b36      	ldr	r3, [pc, #216]	@ (8003750 <SystemInit+0xfc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 030f 	bic.w	r3, r3, #15
 800367e:	4a34      	ldr	r2, [pc, #208]	@ (8003750 <SystemInit+0xfc>)
 8003680:	f043 0307 	orr.w	r3, r3, #7
 8003684:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003686:	4b33      	ldr	r3, [pc, #204]	@ (8003754 <SystemInit+0x100>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a32      	ldr	r2, [pc, #200]	@ (8003754 <SystemInit+0x100>)
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003692:	4b30      	ldr	r3, [pc, #192]	@ (8003754 <SystemInit+0x100>)
 8003694:	2200      	movs	r2, #0
 8003696:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003698:	4b2e      	ldr	r3, [pc, #184]	@ (8003754 <SystemInit+0x100>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	492d      	ldr	r1, [pc, #180]	@ (8003754 <SystemInit+0x100>)
 800369e:	4b2e      	ldr	r3, [pc, #184]	@ (8003758 <SystemInit+0x104>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80036a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003750 <SystemInit+0xfc>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80036b0:	4b27      	ldr	r3, [pc, #156]	@ (8003750 <SystemInit+0xfc>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 030f 	bic.w	r3, r3, #15
 80036b8:	4a25      	ldr	r2, [pc, #148]	@ (8003750 <SystemInit+0xfc>)
 80036ba:	f043 0307 	orr.w	r3, r3, #7
 80036be:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80036c0:	4b24      	ldr	r3, [pc, #144]	@ (8003754 <SystemInit+0x100>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80036c6:	4b23      	ldr	r3, [pc, #140]	@ (8003754 <SystemInit+0x100>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80036cc:	4b21      	ldr	r3, [pc, #132]	@ (8003754 <SystemInit+0x100>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80036d2:	4b20      	ldr	r3, [pc, #128]	@ (8003754 <SystemInit+0x100>)
 80036d4:	4a21      	ldr	r2, [pc, #132]	@ (800375c <SystemInit+0x108>)
 80036d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80036d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003754 <SystemInit+0x100>)
 80036da:	4a21      	ldr	r2, [pc, #132]	@ (8003760 <SystemInit+0x10c>)
 80036dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80036de:	4b1d      	ldr	r3, [pc, #116]	@ (8003754 <SystemInit+0x100>)
 80036e0:	4a20      	ldr	r2, [pc, #128]	@ (8003764 <SystemInit+0x110>)
 80036e2:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80036e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003754 <SystemInit+0x100>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80036ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003754 <SystemInit+0x100>)
 80036ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003764 <SystemInit+0x110>)
 80036ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80036f0:	4b18      	ldr	r3, [pc, #96]	@ (8003754 <SystemInit+0x100>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80036f6:	4b17      	ldr	r3, [pc, #92]	@ (8003754 <SystemInit+0x100>)
 80036f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003764 <SystemInit+0x110>)
 80036fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80036fc:	4b15      	ldr	r3, [pc, #84]	@ (8003754 <SystemInit+0x100>)
 80036fe:	2200      	movs	r2, #0
 8003700:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003702:	4b14      	ldr	r3, [pc, #80]	@ (8003754 <SystemInit+0x100>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a13      	ldr	r2, [pc, #76]	@ (8003754 <SystemInit+0x100>)
 8003708:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800370c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800370e:	4b11      	ldr	r3, [pc, #68]	@ (8003754 <SystemInit+0x100>)
 8003710:	2200      	movs	r2, #0
 8003712:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8003714:	4b0f      	ldr	r3, [pc, #60]	@ (8003754 <SystemInit+0x100>)
 8003716:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800371a:	4a0e      	ldr	r2, [pc, #56]	@ (8003754 <SystemInit+0x100>)
 800371c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8003720:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003724:	4b0b      	ldr	r3, [pc, #44]	@ (8003754 <SystemInit+0x100>)
 8003726:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800372a:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 800372c:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800372e:	4b0e      	ldr	r3, [pc, #56]	@ (8003768 <SystemInit+0x114>)
 8003730:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003734:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 8003736:	4b05      	ldr	r3, [pc, #20]	@ (800374c <SystemInit+0xf8>)
 8003738:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800373c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000ed00 	.word	0xe000ed00
 8003750:	52002000 	.word	0x52002000
 8003754:	58024400 	.word	0x58024400
 8003758:	eaf6ed7f 	.word	0xeaf6ed7f
 800375c:	02020200 	.word	0x02020200
 8003760:	01ff0000 	.word	0x01ff0000
 8003764:	01010280 	.word	0x01010280
 8003768:	52004000 	.word	0x52004000

0800376c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800376c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003770:	f7ff ff70 	bl	8003654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003774:	480c      	ldr	r0, [pc, #48]	@ (80037a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003776:	490d      	ldr	r1, [pc, #52]	@ (80037ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003778:	4a0d      	ldr	r2, [pc, #52]	@ (80037b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800377a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800377c:	e002      	b.n	8003784 <LoopCopyDataInit>

0800377e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800377e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003782:	3304      	adds	r3, #4

08003784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003788:	d3f9      	bcc.n	800377e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800378a:	4a0a      	ldr	r2, [pc, #40]	@ (80037b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800378c:	4c0a      	ldr	r4, [pc, #40]	@ (80037b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800378e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003790:	e001      	b.n	8003796 <LoopFillZerobss>

08003792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003794:	3204      	adds	r2, #4

08003796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003798:	d3fb      	bcc.n	8003792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800379a:	f018 f817 	bl	801b7cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800379e:	f7fe fab5 	bl	8001d0c <main>
  bx  lr
 80037a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037a4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80037a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80037ac:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 80037b0:	08020dd0 	.word	0x08020dd0
  ldr r2, =_sbss
 80037b4:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 80037b8:	2400cdc4 	.word	0x2400cdc4

080037bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037bc:	e7fe      	b.n	80037bc <ADC3_IRQHandler>

080037be <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <LAN8742_RegisterBusIO+0x28>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <LAN8742_RegisterBusIO+0x28>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <LAN8742_RegisterBusIO+0x28>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80037e6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ea:	e014      	b.n	8003816 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003822:	b580      	push	{r7, lr}
 8003824:	b086      	sub	sp, #24
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d139      	bne.n	80038b2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	e01c      	b.n	8003892 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f107 020c 	add.w	r2, r7, #12
 8003860:	2112      	movs	r1, #18
 8003862:	6978      	ldr	r0, [r7, #20]
 8003864:	4798      	blx	r3
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	da03      	bge.n	8003874 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800386c:	f06f 0304 	mvn.w	r3, #4
 8003870:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8003872:	e00b      	b.n	800388c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 031f 	and.w	r3, r3, #31
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	429a      	cmp	r2, r3
 800387e:	d105      	bne.n	800388c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
         break;
 800388a:	e005      	b.n	8003898 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	3301      	adds	r3, #1
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b1f      	cmp	r3, #31
 8003896:	d9df      	bls.n	8003858 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b1f      	cmp	r3, #31
 800389e:	d902      	bls.n	80038a6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80038a0:	f06f 0302 	mvn.w	r3, #2
 80038a4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d102      	bne.n	80038b2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80038b2:	693b      	ldr	r3, [r7, #16]
 }
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6810      	ldr	r0, [r2, #0]
 80038d0:	f107 020c 	add.w	r2, r7, #12
 80038d4:	2101      	movs	r1, #1
 80038d6:	4798      	blx	r3
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	da02      	bge.n	80038e4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80038de:	f06f 0304 	mvn.w	r3, #4
 80038e2:	e06e      	b.n	80039c2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6810      	ldr	r0, [r2, #0]
 80038ec:	f107 020c 	add.w	r2, r7, #12
 80038f0:	2101      	movs	r1, #1
 80038f2:	4798      	blx	r3
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	da02      	bge.n	8003900 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80038fa:	f06f 0304 	mvn.w	r3, #4
 80038fe:	e060      	b.n	80039c2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800390a:	2301      	movs	r3, #1
 800390c:	e059      	b.n	80039c2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6810      	ldr	r0, [r2, #0]
 8003916:	f107 020c 	add.w	r2, r7, #12
 800391a:	2100      	movs	r1, #0
 800391c:	4798      	blx	r3
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	da02      	bge.n	800392a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003924:	f06f 0304 	mvn.w	r3, #4
 8003928:	e04b      	b.n	80039c2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d11b      	bne.n	800396c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d006      	beq.n	800394c <LAN8742_GetLinkState+0x90>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003948:	2302      	movs	r3, #2
 800394a:	e03a      	b.n	80039c2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003956:	2303      	movs	r3, #3
 8003958:	e033      	b.n	80039c2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003964:	2304      	movs	r3, #4
 8003966:	e02c      	b.n	80039c2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003968:	2305      	movs	r3, #5
 800396a:	e02a      	b.n	80039c2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6810      	ldr	r0, [r2, #0]
 8003974:	f107 020c 	add.w	r2, r7, #12
 8003978:	211f      	movs	r1, #31
 800397a:	4798      	blx	r3
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	da02      	bge.n	8003988 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003982:	f06f 0304 	mvn.w	r3, #4
 8003986:	e01c      	b.n	80039c2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003992:	2306      	movs	r3, #6
 8003994:	e015      	b.n	80039c2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 031c 	and.w	r3, r3, #28
 800399c:	2b18      	cmp	r3, #24
 800399e:	d101      	bne.n	80039a4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80039a0:	2302      	movs	r3, #2
 80039a2:	e00e      	b.n	80039c2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 031c 	and.w	r3, r3, #28
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d101      	bne.n	80039b2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e007      	b.n	80039c2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 031c 	and.w	r3, r3, #28
 80039b8:	2b14      	cmp	r3, #20
 80039ba:	d101      	bne.n	80039c0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80039bc:	2304      	movs	r3, #4
 80039be:	e000      	b.n	80039c2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80039c0:	2305      	movs	r3, #5
    }
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039d2:	2003      	movs	r0, #3
 80039d4:	f000 f92d 	bl	8003c32 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039d8:	f003 f850 	bl	8006a7c <HAL_RCC_GetSysClockFreq>
 80039dc:	4602      	mov	r2, r0
 80039de:	4b15      	ldr	r3, [pc, #84]	@ (8003a34 <HAL_Init+0x68>)
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	0a1b      	lsrs	r3, r3, #8
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	4913      	ldr	r1, [pc, #76]	@ (8003a38 <HAL_Init+0x6c>)
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
 80039f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003a34 <HAL_Init+0x68>)
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	4a0e      	ldr	r2, [pc, #56]	@ (8003a38 <HAL_Init+0x6c>)
 8003a00:	5cd3      	ldrb	r3, [r2, r3]
 8003a02:	f003 031f 	and.w	r3, r3, #31
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8003a3c <HAL_Init+0x70>)
 8003a0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a10:	4a0b      	ldr	r2, [pc, #44]	@ (8003a40 <HAL_Init+0x74>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a16:	200f      	movs	r0, #15
 8003a18:	f7ff fcb6 	bl	8003388 <HAL_InitTick>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e002      	b.n	8003a2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a26:	f7ff f8f7 	bl	8002c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	58024400 	.word	0x58024400
 8003a38:	0801f2c0 	.word	0x0801f2c0
 8003a3c:	24000004 	.word	0x24000004
 8003a40:	24000000 	.word	0x24000000

08003a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a48:	4b06      	ldr	r3, [pc, #24]	@ (8003a64 <HAL_IncTick+0x20>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <HAL_IncTick+0x24>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4413      	add	r3, r2
 8003a54:	4a04      	ldr	r2, [pc, #16]	@ (8003a68 <HAL_IncTick+0x24>)
 8003a56:	6013      	str	r3, [r2, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	2400000c 	.word	0x2400000c
 8003a68:	24000508 	.word	0x24000508

08003a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a70:	4b03      	ldr	r3, [pc, #12]	@ (8003a80 <HAL_GetTick+0x14>)
 8003a72:	681b      	ldr	r3, [r3, #0]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	24000508 	.word	0x24000508

08003a84 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003a8c:	4b06      	ldr	r3, [pc, #24]	@ (8003aa8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8003a94:	4904      	ldr	r1, [pc, #16]	@ (8003aa8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	58000400 	.word	0x58000400

08003aac <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003ab6:	4b07      	ldr	r3, [pc, #28]	@ (8003ad4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	401a      	ands	r2, r3
 8003ac0:	4904      	ldr	r1, [pc, #16]	@ (8003ad4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	58000400 	.word	0x58000400

08003ad8 <__NVIC_SetPriorityGrouping>:
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8003b18 <__NVIC_SetPriorityGrouping+0x40>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003af4:	4013      	ands	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b00:	4b06      	ldr	r3, [pc, #24]	@ (8003b1c <__NVIC_SetPriorityGrouping+0x44>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b06:	4a04      	ldr	r2, [pc, #16]	@ (8003b18 <__NVIC_SetPriorityGrouping+0x40>)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	60d3      	str	r3, [r2, #12]
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	e000ed00 	.word	0xe000ed00
 8003b1c:	05fa0000 	.word	0x05fa0000

08003b20 <__NVIC_GetPriorityGrouping>:
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b24:	4b04      	ldr	r3, [pc, #16]	@ (8003b38 <__NVIC_GetPriorityGrouping+0x18>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	0a1b      	lsrs	r3, r3, #8
 8003b2a:	f003 0307 	and.w	r3, r3, #7
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	e000ed00 	.word	0xe000ed00

08003b3c <__NVIC_EnableIRQ>:
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	db0b      	blt.n	8003b66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b4e:	88fb      	ldrh	r3, [r7, #6]
 8003b50:	f003 021f 	and.w	r2, r3, #31
 8003b54:	4907      	ldr	r1, [pc, #28]	@ (8003b74 <__NVIC_EnableIRQ+0x38>)
 8003b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	e000e100 	.word	0xe000e100

08003b78 <__NVIC_SetPriority>:
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	6039      	str	r1, [r7, #0]
 8003b82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	db0a      	blt.n	8003ba2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	490c      	ldr	r1, [pc, #48]	@ (8003bc4 <__NVIC_SetPriority+0x4c>)
 8003b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b96:	0112      	lsls	r2, r2, #4
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003ba0:	e00a      	b.n	8003bb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4908      	ldr	r1, [pc, #32]	@ (8003bc8 <__NVIC_SetPriority+0x50>)
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	3b04      	subs	r3, #4
 8003bb0:	0112      	lsls	r2, r2, #4
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	761a      	strb	r2, [r3, #24]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e000e100 	.word	0xe000e100
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <NVIC_EncodePriority>:
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b089      	sub	sp, #36	@ 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f1c3 0307 	rsb	r3, r3, #7
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	bf28      	it	cs
 8003bea:	2304      	movcs	r3, #4
 8003bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	d902      	bls.n	8003bfc <NVIC_EncodePriority+0x30>
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3b03      	subs	r3, #3
 8003bfa:	e000      	b.n	8003bfe <NVIC_EncodePriority+0x32>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c00:	f04f 32ff 	mov.w	r2, #4294967295
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	401a      	ands	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c14:	f04f 31ff 	mov.w	r1, #4294967295
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1e:	43d9      	mvns	r1, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c24:	4313      	orrs	r3, r2
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3724      	adds	r7, #36	@ 0x24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff ff4c 	bl	8003ad8 <__NVIC_SetPriorityGrouping>
}
 8003c40:	bf00      	nop
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c56:	f7ff ff63 	bl	8003b20 <__NVIC_GetPriorityGrouping>
 8003c5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	6978      	ldr	r0, [r7, #20]
 8003c62:	f7ff ffb3 	bl	8003bcc <NVIC_EncodePriority>
 8003c66:	4602      	mov	r2, r0
 8003c68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff ff82 	bl	8003b78 <__NVIC_SetPriority>
}
 8003c74:	bf00      	nop
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff ff56 	bl	8003b3c <__NVIC_EnableIRQ>
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003c9c:	f3bf 8f5f 	dmb	sy
}
 8003ca0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003ca2:	4b07      	ldr	r3, [pc, #28]	@ (8003cc0 <HAL_MPU_Disable+0x28>)
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca6:	4a06      	ldr	r2, [pc, #24]	@ (8003cc0 <HAL_MPU_Disable+0x28>)
 8003ca8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cac:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003cae:	4b05      	ldr	r3, [pc, #20]	@ (8003cc4 <HAL_MPU_Disable+0x2c>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	605a      	str	r2, [r3, #4]
}
 8003cb4:	bf00      	nop
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	e000ed00 	.word	0xe000ed00
 8003cc4:	e000ed90 	.word	0xe000ed90

08003cc8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8003d00 <HAL_MPU_Enable+0x38>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003cda:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <HAL_MPU_Enable+0x3c>)
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cde:	4a09      	ldr	r2, [pc, #36]	@ (8003d04 <HAL_MPU_Enable+0x3c>)
 8003ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003ce6:	f3bf 8f4f 	dsb	sy
}
 8003cea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003cec:	f3bf 8f6f 	isb	sy
}
 8003cf0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	e000ed90 	.word	0xe000ed90
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	785a      	ldrb	r2, [r3, #1]
 8003d14:	4b1b      	ldr	r3, [pc, #108]	@ (8003d84 <HAL_MPU_ConfigRegion+0x7c>)
 8003d16:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003d18:	4b1a      	ldr	r3, [pc, #104]	@ (8003d84 <HAL_MPU_ConfigRegion+0x7c>)
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	4a19      	ldr	r2, [pc, #100]	@ (8003d84 <HAL_MPU_ConfigRegion+0x7c>)
 8003d1e:	f023 0301 	bic.w	r3, r3, #1
 8003d22:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003d24:	4a17      	ldr	r2, [pc, #92]	@ (8003d84 <HAL_MPU_ConfigRegion+0x7c>)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	7b1b      	ldrb	r3, [r3, #12]
 8003d30:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	7adb      	ldrb	r3, [r3, #11]
 8003d36:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	7a9b      	ldrb	r3, [r3, #10]
 8003d3e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003d40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	7b5b      	ldrb	r3, [r3, #13]
 8003d46:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003d48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	7b9b      	ldrb	r3, [r3, #14]
 8003d4e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003d50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	7bdb      	ldrb	r3, [r3, #15]
 8003d56:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003d58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	7a5b      	ldrb	r3, [r3, #9]
 8003d5e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003d60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	7a1b      	ldrb	r3, [r3, #8]
 8003d66:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003d68:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	7812      	ldrb	r2, [r2, #0]
 8003d6e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d70:	4a04      	ldr	r2, [pc, #16]	@ (8003d84 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d72:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d74:	6113      	str	r3, [r2, #16]
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	e000ed90 	.word	0xe000ed90

08003d88 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e0e3      	b.n	8003f62 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f008 f9cb 	bl	800c148 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003db2:	4b6e      	ldr	r3, [pc, #440]	@ (8003f6c <HAL_ETH_Init+0x1e4>)
 8003db4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003db8:	4a6c      	ldr	r2, [pc, #432]	@ (8003f6c <HAL_ETH_Init+0x1e4>)
 8003dba:	f043 0302 	orr.w	r3, r3, #2
 8003dbe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003dc2:	4b6a      	ldr	r3, [pc, #424]	@ (8003f6c <HAL_ETH_Init+0x1e4>)
 8003dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	7a1b      	ldrb	r3, [r3, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d103      	bne.n	8003de0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003dd8:	2000      	movs	r0, #0
 8003dda:	f7ff fe53 	bl	8003a84 <HAL_SYSCFG_ETHInterfaceSelect>
 8003dde:	e003      	b.n	8003de8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003de0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003de4:	f7ff fe4e 	bl	8003a84 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003de8:	4b61      	ldr	r3, [pc, #388]	@ (8003f70 <HAL_ETH_Init+0x1e8>)
 8003dea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e04:	f7ff fe32 	bl	8003a6c <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003e0a:	e011      	b.n	8003e30 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003e0c:	f7ff fe2e 	bl	8003a6c <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003e1a:	d909      	bls.n	8003e30 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2204      	movs	r2, #4
 8003e20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	22e0      	movs	r2, #224	@ 0xe0
 8003e28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e098      	b.n	8003f62 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e4      	bne.n	8003e0c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 ff1c 	bl	8004c80 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003e48:	f002 ff92 	bl	8006d70 <HAL_RCC_GetHCLKFreq>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	4a49      	ldr	r2, [pc, #292]	@ (8003f74 <HAL_ETH_Init+0x1ec>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	0c9a      	lsrs	r2, r3, #18
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3a01      	subs	r2, #1
 8003e5c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f001 f919 	bl	8005098 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003e72:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e82:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	22e0      	movs	r2, #224	@ 0xe0
 8003e9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e05d      	b.n	8003f62 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eae:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003eb2:	4b31      	ldr	r3, [pc, #196]	@ (8003f78 <HAL_ETH_Init+0x1f0>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6952      	ldr	r2, [r2, #20]
 8003eba:	0051      	lsls	r1, r2, #1
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6812      	ldr	r2, [r2, #0]
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ec6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f001 f981 	bl	80051d2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f001 f9c7 	bl	8005264 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	3305      	adds	r3, #5
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	021a      	lsls	r2, r3, #8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	3303      	adds	r3, #3
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	061a      	lsls	r2, r3, #24
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	3302      	adds	r3, #2
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	041b      	lsls	r3, r3, #16
 8003f08:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003f14:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003f22:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003f24:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	4b11      	ldr	r3, [pc, #68]	@ (8003f7c <HAL_ETH_Init+0x1f4>)
 8003f36:	430b      	orrs	r3, r1
 8003f38:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	4b0d      	ldr	r3, [pc, #52]	@ (8003f80 <HAL_ETH_Init+0x1f8>)
 8003f4a:	430b      	orrs	r3, r1
 8003f4c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2210      	movs	r2, #16
 8003f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	58024400 	.word	0x58024400
 8003f70:	58000400 	.word	0x58000400
 8003f74:	431bde83 	.word	0x431bde83
 8003f78:	ffff8001 	.word	0xffff8001
 8003f7c:	0c020060 	.word	0x0c020060
 8003f80:	0c20c000 	.word	0x0c20c000

08003f84 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f92:	2b10      	cmp	r3, #16
 8003f94:	d165      	bne.n	8004062 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2204      	movs	r2, #4
 8003fa8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f9e4 	bl	8004378 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fb8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fc8:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fd4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fe4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ff0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8003ffc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004000:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0201 	orr.w	r2, r2, #1
 8004014:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0202 	orr.w	r2, r2, #2
 8004026:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004040:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 800404c:	430b      	orrs	r3, r1
 800404e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004052:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2240      	movs	r2, #64	@ 0x40
 800405a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	e000      	b.n	8004064 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
  }
}
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800407a:	2b40      	cmp	r3, #64	@ 0x40
 800407c:	d165      	bne.n	800414a <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2220      	movs	r2, #32
 8004082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800408e:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	4b30      	ldr	r3, [pc, #192]	@ (8004158 <HAL_ETH_Stop_IT+0xec>)
 8004098:	400b      	ands	r3, r1
 800409a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800409e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040aa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040ba:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6812      	ldr	r2, [r2, #0]
 80040ce:	f023 0301 	bic.w	r3, r3, #1
 80040d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040d6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0201 	bic.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0202 	bic.w	r2, r2, #2
 800410c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	e00e      	b.n	8004132 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	3212      	adds	r2, #18
 800411a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800411e:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3301      	adds	r3, #1
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b03      	cmp	r3, #3
 8004136:	d9ed      	bls.n	8004114 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2210      	movs	r2, #16
 8004142:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	e000      	b.n	800414c <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
  }
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	ffff2f3e 	.word	0xffff2f3e

0800415c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d109      	bne.n	8004180 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004172:	f043 0201 	orr.w	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e03a      	b.n	80041f6 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004186:	2b40      	cmp	r3, #64	@ 0x40
 8004188:	d134      	bne.n	80041f4 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004192:	2201      	movs	r2, #1
 8004194:	6839      	ldr	r1, [r7, #0]
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f001 f8c2 	bl	8005320 <ETH_Prepare_Tx_Descriptors>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a8:	f043 0202 	orr.w	r2, r3, #2
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e01f      	b.n	80041f6 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80041b6:	f3bf 8f4f 	dsb	sy
}
 80041ba:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d904      	bls.n	80041d8 <HAL_ETH_Transmit_IT+0x7c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d2:	1f1a      	subs	r2, r3, #4
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3106      	adds	r1, #6
 80041e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80041e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041ec:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	e000      	b.n	80041f6 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
  }
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b088      	sub	sp, #32
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421c:	f043 0201 	orr.w	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e0a2      	b.n	8004370 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004230:	2b40      	cmp	r3, #64	@ 0x40
 8004232:	d001      	beq.n	8004238 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e09b      	b.n	8004370 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800423c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	3212      	adds	r2, #18
 8004244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004248:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800424e:	f1c3 0304 	rsb	r3, r3, #4
 8004252:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004254:	e064      	b.n	8004320 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d103      	bne.n	8004286 <HAL_ETH_ReadData+0x88>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004282:	2b00      	cmp	r3, #0
 8004284:	d03a      	beq.n	80042fc <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80042c2:	2301      	movs	r3, #1
 80042c4:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80042d6:	461a      	mov	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	f008 f8f4 	bl	800c4c8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	441a      	add	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2200      	movs	r2, #0
 80042fa:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	3301      	adds	r3, #1
 8004300:	61fb      	str	r3, [r7, #28]
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	2b03      	cmp	r3, #3
 8004306:	d902      	bls.n	800430e <HAL_ETH_ReadData+0x110>
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	3b04      	subs	r3, #4
 800430c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	3212      	adds	r2, #18
 8004314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004318:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	3301      	adds	r3, #1
 800431e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8004324:	2b00      	cmp	r3, #0
 8004326:	db06      	blt.n	8004336 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	429a      	cmp	r2, r3
 800432e:	d202      	bcs.n	8004336 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8004330:	7cfb      	ldrb	r3, [r7, #19]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d08f      	beq.n	8004256 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	441a      	add	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f814 	bl	8004378 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8004356:	7cfb      	ldrb	r3, [r7, #19]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d108      	bne.n	800436e <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e000      	b.n	8004370 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
}
 8004370:	4618      	mov	r0, r3
 8004372:	3720      	adds	r7, #32
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004380:	2300      	movs	r3, #0
 8004382:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004384:	2301      	movs	r3, #1
 8004386:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800438c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	3212      	adds	r2, #18
 8004394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004398:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800439e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80043a0:	e038      	b.n	8004414 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d112      	bne.n	80043d0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80043aa:	f107 0308 	add.w	r3, r7, #8
 80043ae:	4618      	mov	r0, r3
 80043b0:	f008 f85a 	bl	800c468 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d102      	bne.n	80043c0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	74fb      	strb	r3, [r7, #19]
 80043be:	e007      	b.n	80043d0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	461a      	mov	r2, r3
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	461a      	mov	r2, r3
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80043d0:	7cfb      	ldrb	r3, [r7, #19]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d01e      	beq.n	8004414 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d004      	beq.n	80043e8 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80043e4:	60da      	str	r2, [r3, #12]
 80043e6:	e003      	b.n	80043f0 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 80043ee:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	3301      	adds	r3, #1
 80043f4:	61fb      	str	r3, [r7, #28]
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d902      	bls.n	8004402 <ETH_UpdateDescriptor+0x8a>
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	3b04      	subs	r3, #4
 8004400:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	3212      	adds	r2, #18
 8004408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800440c:	617b      	str	r3, [r7, #20]
      desccount--;
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	3b01      	subs	r3, #1
 8004412:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <ETH_UpdateDescriptor+0xa8>
 800441a:	7cfb      	ldrb	r3, [r7, #19]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1c0      	bne.n	80043a2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	429a      	cmp	r2, r3
 8004428:	d01b      	beq.n	8004462 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	3303      	adds	r3, #3
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004434:	f3bf 8f5f 	dmb	sy
}
 8004438:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6919      	ldr	r1, [r3, #16]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4613      	mov	r3, r2
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	4413      	add	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	18ca      	adds	r2, r1, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004452:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69fa      	ldr	r2, [r7, #28]
 800445a:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004462:	bf00      	nop
 8004464:	3720      	adds	r7, #32
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b086      	sub	sp, #24
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3318      	adds	r3, #24
 8004476:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447c:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004482:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004488:	e047      	b.n	800451a <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800448a:	2301      	movs	r3, #1
 800448c:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	3b01      	subs	r3, #1
 8004492:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	3304      	adds	r3, #4
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	3301      	adds	r3, #1
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d902      	bls.n	80044b6 <HAL_ETH_ReleaseTxPacket+0x4c>
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	3b04      	subs	r3, #4
 80044b4:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80044ba:	7bbb      	ldrb	r3, [r7, #14]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d02c      	beq.n	800451a <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68d9      	ldr	r1, [r3, #12]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4613      	mov	r3, r2
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	4413      	add	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	440b      	add	r3, r1
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	db1f      	blt.n	8004516 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	3304      	adds	r3, #4
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f008 f858 	bl	800c598 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	3304      	adds	r3, #4
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	2200      	movs	r2, #0
 80044f4:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	3301      	adds	r3, #1
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d902      	bls.n	8004508 <HAL_ETH_ReleaseTxPacket+0x9e>
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	3b04      	subs	r3, #4
 8004506:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004514:	e001      	b.n	800451a <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <HAL_ETH_ReleaseTxPacket+0xbc>
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1b1      	bne.n	800448a <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004540:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800454a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800454e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004558:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800455c:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 800455e:	4b6d      	ldr	r3, [pc, #436]	@ (8004714 <HAL_ETH_IRQHandler+0x1e4>)
 8004560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004562:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d010      	beq.n	8004590 <HAL_ETH_IRQHandler+0x60>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00b      	beq.n	8004590 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004580:	461a      	mov	r2, r3
 8004582:	f248 0340 	movw	r3, #32832	@ 0x8040
 8004586:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f007 fb1c 	bl	800bbc8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d010      	beq.n	80045bc <HAL_ETH_IRQHandler+0x8c>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00b      	beq.n	80045bc <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ac:	461a      	mov	r2, r3
 80045ae:	f248 0301 	movw	r3, #32769	@ 0x8001
 80045b2:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f007 fb16 	bl	800bbe8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d047      	beq.n	8004656 <HAL_ETH_IRQHandler+0x126>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d042      	beq.n	8004656 <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d6:	f043 0208 	orr.w	r2, r3, #8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d01e      	beq.n	8004628 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045f2:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80045f6:	f241 1302 	movw	r3, #4354	@ 0x1102
 80045fa:	4013      	ands	r3, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800460a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004616:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800461a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	22e0      	movs	r2, #224	@ 0xe0
 8004622:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004626:	e013      	b.n	8004650 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004630:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8004634:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004646:	461a      	mov	r2, r3
 8004648:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 800464c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f007 fad9 	bl	800bc08 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8004666:	2b00      	cmp	r3, #0
 8004668:	d019      	beq.n	800469e <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004670:	f043 0210 	orr.w	r2, r3, #16
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	22e0      	movs	r2, #224	@ 0xe0
 800468c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f007 fab9 	bl	800bc08 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00f      	beq.n	80046c8 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80046b0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f82c 	bl	8004718 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00f      	beq.n	80046f2 <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80046da:	f003 020f 	and.w	r2, r3, #15
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f821 	bl	800472c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d006      	beq.n	800470a <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80046fc:	4b05      	ldr	r3, [pc, #20]	@ (8004714 <HAL_ETH_IRQHandler+0x1e4>)
 80046fe:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004702:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f81b 	bl	8004740 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 800470a:	bf00      	nop
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	58000080 	.word	0x58000080

08004718 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e03e      	b.n	80047f4 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800477e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	055b      	lsls	r3, r3, #21
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	041b      	lsls	r3, r3, #16
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f043 030c 	orr.w	r3, r3, #12
 80047a2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f043 0301 	orr.w	r3, r3, #1
 80047aa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80047b6:	f7ff f959 	bl	8003a6c <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80047bc:	e009      	b.n	80047d2 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80047be:	f7ff f955 	bl	8003a6c <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80047cc:	d901      	bls.n	80047d2 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e010      	b.n	80047f4 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1ed      	bne.n	80047be <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e03c      	b.n	8004898 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004826:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	055b      	lsls	r3, r3, #21
 8004832:	4313      	orrs	r3, r2
 8004834:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f023 030c 	bic.w	r3, r3, #12
 800484a:	f043 0304 	orr.w	r3, r3, #4
 800484e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	b29a      	uxth	r2, r3
 800485c:	4b10      	ldr	r3, [pc, #64]	@ (80048a0 <HAL_ETH_WritePHYRegister+0xa4>)
 800485e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004862:	4a0f      	ldr	r2, [pc, #60]	@ (80048a0 <HAL_ETH_WritePHYRegister+0xa4>)
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800486a:	f7ff f8ff 	bl	8003a6c <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004870:	e009      	b.n	8004886 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004872:	f7ff f8fb 	bl	8003a6c <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004880:	d901      	bls.n	8004886 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e008      	b.n	8004898 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1ed      	bne.n	8004872 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40028000 	.word	0x40028000

080048a4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e1c3      	b.n	8004c40 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 020c 	and.w	r2, r3, #12
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bf14      	ite	ne
 80048d4:	2301      	movne	r3, #1
 80048d6:	2300      	moveq	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bf0c      	ite	eq
 80048fe:	2301      	moveq	r3, #1
 8004900:	2300      	movne	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	461a      	mov	r2, r3
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8004916:	2b00      	cmp	r3, #0
 8004918:	bf14      	ite	ne
 800491a:	2301      	movne	r3, #1
 800491c:	2300      	moveq	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf0c      	ite	eq
 8004934:	2301      	moveq	r3, #1
 8004936:	2300      	movne	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	461a      	mov	r2, r3
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004946:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800494a:	2b00      	cmp	r3, #0
 800494c:	bf14      	ite	ne
 800494e:	2301      	movne	r3, #1
 8004950:	2300      	moveq	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004964:	2b00      	cmp	r3, #0
 8004966:	bf14      	ite	ne
 8004968:	2301      	movne	r3, #1
 800496a:	2300      	moveq	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	461a      	mov	r2, r3
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800499a:	2b00      	cmp	r3, #0
 800499c:	bf14      	ite	ne
 800499e:	2301      	movne	r3, #1
 80049a0:	2300      	moveq	r3, #0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	461a      	mov	r2, r3
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bf0c      	ite	eq
 80049b8:	2301      	moveq	r3, #1
 80049ba:	2300      	movne	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	461a      	mov	r2, r3
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bf0c      	ite	eq
 80049d2:	2301      	moveq	r3, #1
 80049d4:	2300      	movne	r3, #0
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	461a      	mov	r2, r3
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf14      	ite	ne
 80049ec:	2301      	movne	r3, #1
 80049ee:	2300      	moveq	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	bf14      	ite	ne
 8004a06:	2301      	movne	r3, #1
 8004a08:	2300      	moveq	r3, #0
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	bf14      	ite	ne
 8004a20:	2301      	movne	r3, #1
 8004a22:	2300      	moveq	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	461a      	mov	r2, r3
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004a32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bf14      	ite	ne
 8004a3a:	2301      	movne	r3, #1
 8004a3c:	2300      	moveq	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	bf14      	ite	ne
 8004a62:	2301      	movne	r3, #1
 8004a64:	2300      	moveq	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	bf14      	ite	ne
 8004ab4:	2301      	movne	r3, #1
 8004ab6:	2300      	moveq	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	461a      	mov	r2, r3
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004ac8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bf14      	ite	ne
 8004ad0:	2301      	movne	r3, #1
 8004ad2:	2300      	moveq	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bf14      	ite	ne
 8004aec:	2301      	movne	r3, #1
 8004aee:	2300      	moveq	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	0e5b      	lsrs	r3, r3, #25
 8004b02:	f003 021f 	and.w	r2, r3, #31
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	bf14      	ite	ne
 8004b18:	2301      	movne	r3, #1
 8004b1a:	2300      	moveq	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 020f 	and.w	r2, r3, #15
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bf14      	ite	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	2300      	moveq	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	bf0c      	ite	eq
 8004b5e:	2301      	moveq	r3, #1
 8004b60:	2300      	movne	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b72:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b80:	0c1b      	lsrs	r3, r3, #16
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	bf14      	ite	ne
 8004b98:	2301      	movne	r3, #1
 8004b9a:	2300      	moveq	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bae:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bf14      	ite	ne
 8004bb6:	2301      	movne	r3, #1
 8004bb8:	2300      	moveq	r3, #0
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004bcc:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004bdc:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	bf14      	ite	ne
 8004bf4:	2301      	movne	r3, #1
 8004bf6:	2300      	moveq	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	bf14      	ite	ne
 8004c12:	2301      	movne	r3, #1
 8004c14:	2300      	moveq	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf0c      	ite	eq
 8004c30:	2301      	moveq	r3, #1
 8004c32:	2300      	movne	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e00b      	b.n	8004c78 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c66:	2b10      	cmp	r3, #16
 8004c68:	d105      	bne.n	8004c76 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004c6a:	6839      	ldr	r1, [r7, #0]
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f871 	bl	8004d54 <ETH_SetMACConfig>

    return HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e000      	b.n	8004c78 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
  }
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004c9a:	f002 f869 	bl	8006d70 <HAL_RCC_GetHCLKFreq>
 8004c9e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8004d0c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d804      	bhi.n	8004cb2 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e022      	b.n	8004cf8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	4a16      	ldr	r2, [pc, #88]	@ (8004d10 <HAL_ETH_SetMDIOClockRange+0x90>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d204      	bcs.n	8004cc4 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	e019      	b.n	8004cf8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4a13      	ldr	r2, [pc, #76]	@ (8004d14 <HAL_ETH_SetMDIOClockRange+0x94>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d915      	bls.n	8004cf8 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4a12      	ldr	r2, [pc, #72]	@ (8004d18 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d804      	bhi.n	8004cde <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	e00c      	b.n	8004cf8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	4a0e      	ldr	r2, [pc, #56]	@ (8004d1c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d804      	bhi.n	8004cf0 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	e003      	b.n	8004cf8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8004cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8004d02:	bf00      	nop
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	02160ebf 	.word	0x02160ebf
 8004d10:	03938700 	.word	0x03938700
 8004d14:	05f5e0ff 	.word	0x05f5e0ff
 8004d18:	08f0d17f 	.word	0x08f0d17f
 8004d1c:	0ee6b27f 	.word	0x0ee6b27f

08004d20 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004d66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	791b      	ldrb	r3, [r3, #4]
 8004d6c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004d6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	7b1b      	ldrb	r3, [r3, #12]
 8004d74:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004d76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	7b5b      	ldrb	r3, [r3, #13]
 8004d7c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004d7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	7b9b      	ldrb	r3, [r3, #14]
 8004d84:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004d86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	7bdb      	ldrb	r3, [r3, #15]
 8004d8c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004d8e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	7c12      	ldrb	r2, [r2, #16]
 8004d94:	2a00      	cmp	r2, #0
 8004d96:	d102      	bne.n	8004d9e <ETH_SetMACConfig+0x4a>
 8004d98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004d9c:	e000      	b.n	8004da0 <ETH_SetMACConfig+0x4c>
 8004d9e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004da0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	7c52      	ldrb	r2, [r2, #17]
 8004da6:	2a00      	cmp	r2, #0
 8004da8:	d102      	bne.n	8004db0 <ETH_SetMACConfig+0x5c>
 8004daa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004dae:	e000      	b.n	8004db2 <ETH_SetMACConfig+0x5e>
 8004db0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004db2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	7c9b      	ldrb	r3, [r3, #18]
 8004db8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004dba:	431a      	orrs	r2, r3
               macconf->Speed |
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004dc0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004dc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	7f1b      	ldrb	r3, [r3, #28]
 8004dcc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004dce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	7f5b      	ldrb	r3, [r3, #29]
 8004dd4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004dd6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	7f92      	ldrb	r2, [r2, #30]
 8004ddc:	2a00      	cmp	r2, #0
 8004dde:	d102      	bne.n	8004de6 <ETH_SetMACConfig+0x92>
 8004de0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004de4:	e000      	b.n	8004de8 <ETH_SetMACConfig+0x94>
 8004de6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004de8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	7fdb      	ldrb	r3, [r3, #31]
 8004dee:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004df0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004df8:	2a00      	cmp	r2, #0
 8004dfa:	d102      	bne.n	8004e02 <ETH_SetMACConfig+0xae>
 8004dfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e00:	e000      	b.n	8004e04 <ETH_SetMACConfig+0xb0>
 8004e02:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004e04:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004e0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e12:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004e14:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	4b56      	ldr	r3, [pc, #344]	@ (8004f80 <ETH_SetMACConfig+0x22c>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6812      	ldr	r2, [r2, #0]
 8004e2c:	68f9      	ldr	r1, [r7, #12]
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e36:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e3e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004e40:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e48:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004e4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004e52:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004e54:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8004e5c:	2a00      	cmp	r2, #0
 8004e5e:	d102      	bne.n	8004e66 <ETH_SetMACConfig+0x112>
 8004e60:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004e64:	e000      	b.n	8004e68 <ETH_SetMACConfig+0x114>
 8004e66:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004e68:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	4b42      	ldr	r3, [pc, #264]	@ (8004f84 <ETH_SetMACConfig+0x230>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6812      	ldr	r2, [r2, #0]
 8004e80:	68f9      	ldr	r1, [r7, #12]
 8004e82:	430b      	orrs	r3, r1
 8004e84:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e8c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	4b3a      	ldr	r3, [pc, #232]	@ (8004f88 <ETH_SetMACConfig+0x234>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6812      	ldr	r2, [r2, #0]
 8004ea4:	68f9      	ldr	r1, [r7, #12]
 8004ea6:	430b      	orrs	r3, r1
 8004ea8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004eb0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004eb6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004ebe:	2a00      	cmp	r2, #0
 8004ec0:	d101      	bne.n	8004ec6 <ETH_SetMACConfig+0x172>
 8004ec2:	2280      	movs	r2, #128	@ 0x80
 8004ec4:	e000      	b.n	8004ec8 <ETH_SetMACConfig+0x174>
 8004ec6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004ec8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ece:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004eda:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8004ede:	4013      	ands	r3, r2
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	68f9      	ldr	r1, [r7, #12]
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004ef0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004ef8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f06:	f023 0103 	bic.w	r1, r3, #3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004f1e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8004f3a:	2a00      	cmp	r2, #0
 8004f3c:	d101      	bne.n	8004f42 <ETH_SetMACConfig+0x1ee>
 8004f3e:	2240      	movs	r2, #64	@ 0x40
 8004f40:	e000      	b.n	8004f44 <ETH_SetMACConfig+0x1f0>
 8004f42:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004f44:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004f4c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004f4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8004f56:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004f64:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	00048083 	.word	0x00048083
 8004f84:	c0f88000 	.word	0xc0f88000
 8004f88:	fffffef0 	.word	0xfffffef0

08004f8c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	4b38      	ldr	r3, [pc, #224]	@ (8005084 <ETH_SetDMAConfig+0xf8>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	6811      	ldr	r1, [r2, #0]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6812      	ldr	r2, [r2, #0]
 8004fac:	430b      	orrs	r3, r1
 8004fae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004fb2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	791b      	ldrb	r3, [r3, #4]
 8004fb8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fbe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	7b1b      	ldrb	r3, [r3, #12]
 8004fc4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8005088 <ETH_SetDMAConfig+0xfc>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	68f9      	ldr	r1, [r7, #12]
 8004fde:	430b      	orrs	r3, r1
 8004fe0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004fe4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	7b5b      	ldrb	r3, [r3, #13]
 8004fea:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ffc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005000:	4b22      	ldr	r3, [pc, #136]	@ (800508c <ETH_SetDMAConfig+0x100>)
 8005002:	4013      	ands	r3, r2
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6812      	ldr	r2, [r2, #0]
 8005008:	68f9      	ldr	r1, [r7, #12]
 800500a:	430b      	orrs	r3, r1
 800500c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005010:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	7d1b      	ldrb	r3, [r3, #20]
 800501c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800501e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	7f5b      	ldrb	r3, [r3, #29]
 8005024:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005032:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8005036:	4b16      	ldr	r3, [pc, #88]	@ (8005090 <ETH_SetDMAConfig+0x104>)
 8005038:	4013      	ands	r3, r2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6812      	ldr	r2, [r2, #0]
 800503e:	68f9      	ldr	r1, [r7, #12]
 8005040:	430b      	orrs	r3, r1
 8005042:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005046:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	7f1b      	ldrb	r3, [r3, #28]
 800504e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005054:	4313      	orrs	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005060:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005064:	4b0b      	ldr	r3, [pc, #44]	@ (8005094 <ETH_SetDMAConfig+0x108>)
 8005066:	4013      	ands	r3, r2
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6812      	ldr	r2, [r2, #0]
 800506c:	68f9      	ldr	r1, [r7, #12]
 800506e:	430b      	orrs	r3, r1
 8005070:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005074:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8005078:	bf00      	nop
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	ffff87fd 	.word	0xffff87fd
 8005088:	ffff2ffe 	.word	0xffff2ffe
 800508c:	fffec000 	.word	0xfffec000
 8005090:	ffc0efef 	.word	0xffc0efef
 8005094:	7fc0ffff 	.word	0x7fc0ffff

08005098 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b0a4      	sub	sp, #144	@ 0x90
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80050a0:	2301      	movs	r3, #1
 80050a2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80050a6:	2300      	movs	r3, #0
 80050a8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80050aa:	2300      	movs	r3, #0
 80050ac:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80050b0:	2300      	movs	r3, #0
 80050b2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80050bc:	2301      	movs	r3, #1
 80050be:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80050c2:	2301      	movs	r3, #1
 80050c4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80050c8:	2300      	movs	r3, #0
 80050ca:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80050ce:	2301      	movs	r3, #1
 80050d0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80050d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80050d8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80050da:	2300      	movs	r3, #0
 80050dc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80050e4:	2300      	movs	r3, #0
 80050e6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80050ea:	2300      	movs	r3, #0
 80050ec:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80050f0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80050f4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80050f6:	2300      	movs	r3, #0
 80050f8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80050fc:	2300      	movs	r3, #0
 80050fe:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8005100:	2301      	movs	r3, #1
 8005102:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005106:	2300      	movs	r3, #0
 8005108:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800510c:	2300      	movs	r3, #0
 800510e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005112:	2300      	movs	r3, #0
 8005114:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8005116:	2300      	movs	r3, #0
 8005118:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800511a:	2300      	movs	r3, #0
 800511c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800511e:	2300      	movs	r3, #0
 8005120:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005124:	2300      	movs	r3, #0
 8005126:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800512a:	2301      	movs	r3, #1
 800512c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005130:	2320      	movs	r3, #32
 8005132:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005136:	2301      	movs	r3, #1
 8005138:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800513c:	2300      	movs	r3, #0
 800513e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005142:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8005146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005148:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800514c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800514e:	2300      	movs	r3, #0
 8005150:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005154:	2302      	movs	r3, #2
 8005156:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800515a:	2300      	movs	r3, #0
 800515c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005160:	2300      	movs	r3, #0
 8005162:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005166:	2300      	movs	r3, #0
 8005168:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800516c:	2301      	movs	r3, #1
 800516e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005172:	2300      	movs	r3, #0
 8005174:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800517c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005180:	4619      	mov	r1, r3
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff fde6 	bl	8004d54 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005188:	2301      	movs	r3, #1
 800518a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800518c:	2301      	movs	r3, #1
 800518e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005190:	2300      	movs	r3, #0
 8005192:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005194:	2300      	movs	r3, #0
 8005196:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800519a:	2300      	movs	r3, #0
 800519c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800519e:	2300      	movs	r3, #0
 80051a0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80051a2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80051a6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80051a8:	2300      	movs	r3, #0
 80051aa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80051ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80051b0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80051b8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80051bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80051be:	f107 0308 	add.w	r3, r7, #8
 80051c2:	4619      	mov	r1, r3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff fee1 	bl	8004f8c <ETH_SetDMAConfig>
}
 80051ca:	bf00      	nop
 80051cc:	3790      	adds	r7, #144	@ 0x90
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	e01d      	b.n	800521c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68d9      	ldr	r1, [r3, #12]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4613      	mov	r3, r2
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4413      	add	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	440b      	add	r3, r1
 80051f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2200      	movs	r2, #0
 80051fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2200      	movs	r2, #0
 8005202:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2200      	movs	r2, #0
 8005208:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	3206      	adds	r2, #6
 8005212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3301      	adds	r3, #1
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b03      	cmp	r3, #3
 8005220:	d9de      	bls.n	80051e0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005230:	461a      	mov	r2, r3
 8005232:	2303      	movs	r3, #3
 8005234:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005244:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005254:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8005258:	bf00      	nop
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	e023      	b.n	80052ba <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6919      	ldr	r1, [r3, #16]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4613      	mov	r3, r2
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	4413      	add	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	440b      	add	r3, r1
 8005282:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2200      	movs	r2, #0
 800528e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2200      	movs	r2, #0
 8005294:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2200      	movs	r2, #0
 800529a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2200      	movs	r2, #0
 80052a0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2200      	movs	r2, #0
 80052a6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	3212      	adds	r2, #18
 80052b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3301      	adds	r3, #1
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d9d8      	bls.n	8005272 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052e6:	461a      	mov	r2, r3
 80052e8:	2303      	movs	r3, #3
 80052ea:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052fa:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800530e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
	...

08005320 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8005320:	b480      	push	{r7}
 8005322:	b091      	sub	sp, #68	@ 0x44
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	3318      	adds	r3, #24
 8005330:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800533e:	2300      	movs	r3, #0
 8005340:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800534a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8005352:	2300      	movs	r3, #0
 8005354:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800535e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005362:	d007      	beq.n	8005374 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005368:	3304      	adds	r3, #4
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005374:	2302      	movs	r3, #2
 8005376:	e266      	b.n	8005846 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d044      	beq.n	800540e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8005384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	4b75      	ldr	r3, [pc, #468]	@ (8005560 <ETH_Prepare_Tx_Descriptors+0x240>)
 800538a:	4013      	ands	r3, r2
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005390:	431a      	orrs	r2, r3
 8005392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005394:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8005396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800539e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a0:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80053b0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d027      	beq.n	800540e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80053be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c8:	041b      	lsls	r3, r3, #16
 80053ca:	431a      	orrs	r2, r3
 80053cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ce:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80053d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80053d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053da:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80053dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e8:	431a      	orrs	r2, r3
 80053ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ec:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80053fc:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800540c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0310 	and.w	r3, r3, #16
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00e      	beq.n	8005438 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800541a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	4b51      	ldr	r3, [pc, #324]	@ (8005564 <ETH_Prepare_Tx_Descriptors+0x244>)
 8005420:	4013      	ands	r3, r2
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	6992      	ldr	r2, [r2, #24]
 8005426:	431a      	orrs	r2, r3
 8005428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800542c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005436:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d105      	bne.n	8005450 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	2b00      	cmp	r3, #0
 800544e:	d036      	beq.n	80054be <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8005450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800545c:	f3bf 8f5f 	dmb	sy
}
 8005460:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800546a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800546e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005470:	3301      	adds	r3, #1
 8005472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005476:	2b03      	cmp	r3, #3
 8005478:	d902      	bls.n	8005480 <ETH_Prepare_Tx_Descriptors+0x160>
 800547a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800547c:	3b04      	subs	r3, #4
 800547e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005482:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005488:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 800548a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800548c:	3301      	adds	r3, #1
 800548e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005498:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800549c:	d10f      	bne.n	80054be <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a0:	6a3a      	ldr	r2, [r7, #32]
 80054a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80054a8:	f3bf 8f5f 	dmb	sy
}
 80054ac:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80054ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80054b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b8:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80054ba:	2302      	movs	r3, #2
 80054bc:	e1c3      	b.n	8005846 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80054be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054c0:	3301      	adds	r3, #1
 80054c2:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80054c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054cc:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80054ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	4b24      	ldr	r3, [pc, #144]	@ (8005564 <ETH_Prepare_Tx_Descriptors+0x244>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054d8:	6852      	ldr	r2, [r2, #4]
 80054da:	431a      	orrs	r2, r3
 80054dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054de:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80054e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d012      	beq.n	800550e <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80054e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80054ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80054f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005568 <ETH_Prepare_Tx_Descriptors+0x248>)
 80054fe:	4013      	ands	r3, r2
 8005500:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005502:	6852      	ldr	r2, [r2, #4]
 8005504:	0412      	lsls	r2, r2, #16
 8005506:	431a      	orrs	r2, r3
 8005508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550a:	609a      	str	r2, [r3, #8]
 800550c:	e008      	b.n	8005520 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800550e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005510:	2200      	movs	r2, #0
 8005512:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	4b13      	ldr	r3, [pc, #76]	@ (8005568 <ETH_Prepare_Tx_Descriptors+0x248>)
 800551a:	4013      	ands	r3, r2
 800551c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800551e:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0310 	and.w	r3, r3, #16
 8005528:	2b00      	cmp	r3, #0
 800552a:	d021      	beq.n	8005570 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800552c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	04db      	lsls	r3, r3, #19
 800553a:	431a      	orrs	r2, r3
 800553c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	4b09      	ldr	r3, [pc, #36]	@ (800556c <ETH_Prepare_Tx_Descriptors+0x24c>)
 8005546:	4013      	ands	r3, r2
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	69d2      	ldr	r2, [r2, #28]
 800554c:	431a      	orrs	r2, r3
 800554e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005550:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	60da      	str	r2, [r3, #12]
 800555e:	e02e      	b.n	80055be <ETH_Prepare_Tx_Descriptors+0x29e>
 8005560:	ffff0000 	.word	0xffff0000
 8005564:	ffffc000 	.word	0xffffc000
 8005568:	c000ffff 	.word	0xc000ffff
 800556c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	4b7b      	ldr	r3, [pc, #492]	@ (8005764 <ETH_Prepare_Tx_Descriptors+0x444>)
 8005576:	4013      	ands	r3, r2
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	6852      	ldr	r2, [r2, #4]
 800557c:	431a      	orrs	r2, r3
 800557e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005580:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d008      	beq.n	80055a0 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800558e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	431a      	orrs	r2, r3
 800559c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559e:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0320 	and.w	r3, r3, #32
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d008      	beq.n	80055be <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80055ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	431a      	orrs	r2, r3
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d008      	beq.n	80055dc <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80055ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d6:	431a      	orrs	r2, r3
 80055d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055da:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80055dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80055e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e6:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80055e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80055f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80055f4:	f3bf 8f5f 	dmb	sy
}
 80055f8:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80055fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005604:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 80da 	beq.w	80057c8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8005614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	431a      	orrs	r2, r3
 8005622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005624:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005626:	e0cf      	b.n	80057c8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005632:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005636:	3301      	adds	r3, #1
 8005638:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800563a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800563c:	2b03      	cmp	r3, #3
 800563e:	d902      	bls.n	8005646 <ETH_Prepare_Tx_Descriptors+0x326>
 8005640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005642:	3b04      	subs	r3, #4
 8005644:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800564a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800564e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565a:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800565c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005664:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005668:	d007      	beq.n	800567a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800566a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800566c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800566e:	3304      	adds	r3, #4
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d029      	beq.n	80056ce <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005680:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005686:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005688:	2300      	movs	r3, #0
 800568a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800568c:	e019      	b.n	80056c2 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800568e:	f3bf 8f5f 	dmb	sy
}
 8005692:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800569c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80056a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056a2:	3301      	adds	r3, #1
 80056a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d902      	bls.n	80056b2 <ETH_Prepare_Tx_Descriptors+0x392>
 80056ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ae:	3b04      	subs	r3, #4
 80056b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ba:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80056bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056be:	3301      	adds	r3, #1
 80056c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d3e1      	bcc.n	800568e <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80056ca:	2302      	movs	r3, #2
 80056cc:	e0bb      	b.n	8005846 <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 80056ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d0:	3301      	adds	r3, #1
 80056d2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80056d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80056da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80056e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	4b1f      	ldr	r3, [pc, #124]	@ (8005768 <ETH_Prepare_Tx_Descriptors+0x448>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056ee:	6852      	ldr	r2, [r2, #4]
 80056f0:	431a      	orrs	r2, r3
 80056f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80056f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d012      	beq.n	8005724 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80056fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800570e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	4b16      	ldr	r3, [pc, #88]	@ (800576c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8005714:	4013      	ands	r3, r2
 8005716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005718:	6852      	ldr	r2, [r2, #4]
 800571a:	0412      	lsls	r2, r2, #16
 800571c:	431a      	orrs	r2, r3
 800571e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005720:	609a      	str	r2, [r3, #8]
 8005722:	e008      	b.n	8005736 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005726:	2200      	movs	r2, #0
 8005728:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800572a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	4b0f      	ldr	r3, [pc, #60]	@ (800576c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8005730:	4013      	ands	r3, r2
 8005732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005734:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0310 	and.w	r3, r3, #16
 800573e:	2b00      	cmp	r3, #0
 8005740:	d018      	beq.n	8005774 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	4b0a      	ldr	r3, [pc, #40]	@ (8005770 <ETH_Prepare_Tx_Descriptors+0x450>)
 8005748:	4013      	ands	r3, r2
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	69d2      	ldr	r2, [r2, #28]
 800574e:	431a      	orrs	r2, r3
 8005750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005752:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800575c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575e:	60da      	str	r2, [r3, #12]
 8005760:	e020      	b.n	80057a4 <ETH_Prepare_Tx_Descriptors+0x484>
 8005762:	bf00      	nop
 8005764:	ffff8000 	.word	0xffff8000
 8005768:	ffffc000 	.word	0xffffc000
 800576c:	c000ffff 	.word	0xc000ffff
 8005770:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	4b36      	ldr	r3, [pc, #216]	@ (8005854 <ETH_Prepare_Tx_Descriptors+0x534>)
 800577a:	4013      	ands	r3, r2
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	6852      	ldr	r2, [r2, #4]
 8005780:	431a      	orrs	r2, r3
 8005782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005784:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d008      	beq.n	80057a4 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	431a      	orrs	r2, r3
 80057a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a2:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80057a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a6:	3301      	adds	r3, #1
 80057a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80057aa:	f3bf 8f5f 	dmb	sy
}
 80057ae:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80057b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80057b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ba:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80057bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80057c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c6:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80057c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f47f af2b 	bne.w	8005628 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d006      	beq.n	80057e6 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80057d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80057e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e2:	609a      	str	r2, [r3, #8]
 80057e4:	e005      	b.n	80057f2 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80057e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80057ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f0:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80057f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80057fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fc:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80057fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005802:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005806:	3304      	adds	r3, #4
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005812:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005814:	f3ef 8310 	mrs	r3, PRIMASK
 8005818:	61bb      	str	r3, [r7, #24]
  return(result);
 800581a:	69bb      	ldr	r3, [r7, #24]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	2301      	movs	r3, #1
 8005820:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f383 8810 	msr	PRIMASK, r3
}
 8005828:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800582e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005830:	4413      	add	r3, r2
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005836:	629a      	str	r2, [r3, #40]	@ 0x28
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f383 8810 	msr	PRIMASK, r3
}
 8005842:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3744      	adds	r7, #68	@ 0x44
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	ffff8000 	.word	0xffff8000

08005858 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005858:	b480      	push	{r7}
 800585a:	b089      	sub	sp, #36	@ 0x24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005866:	4b86      	ldr	r3, [pc, #536]	@ (8005a80 <HAL_GPIO_Init+0x228>)
 8005868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800586a:	e18c      	b.n	8005b86 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	2101      	movs	r1, #1
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	fa01 f303 	lsl.w	r3, r1, r3
 8005878:	4013      	ands	r3, r2
 800587a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 817e 	beq.w	8005b80 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f003 0303 	and.w	r3, r3, #3
 800588c:	2b01      	cmp	r3, #1
 800588e:	d005      	beq.n	800589c <HAL_GPIO_Init+0x44>
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f003 0303 	and.w	r3, r3, #3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d130      	bne.n	80058fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	2203      	movs	r2, #3
 80058a8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ac:	43db      	mvns	r3, r3
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	4013      	ands	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	68da      	ldr	r2, [r3, #12]
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058d2:	2201      	movs	r2, #1
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	fa02 f303 	lsl.w	r3, r2, r3
 80058da:	43db      	mvns	r3, r3
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	4013      	ands	r3, r2
 80058e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	091b      	lsrs	r3, r3, #4
 80058e8:	f003 0201 	and.w	r2, r3, #1
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	fa02 f303 	lsl.w	r3, r2, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	2b03      	cmp	r3, #3
 8005908:	d017      	beq.n	800593a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	2203      	movs	r2, #3
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	43db      	mvns	r3, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4013      	ands	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	fa02 f303 	lsl.w	r3, r2, r3
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	4313      	orrs	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d123      	bne.n	800598e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	08da      	lsrs	r2, r3, #3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	3208      	adds	r2, #8
 800594e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	220f      	movs	r2, #15
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	43db      	mvns	r3, r3
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	4013      	ands	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	691a      	ldr	r2, [r3, #16]
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	fa02 f303 	lsl.w	r3, r2, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4313      	orrs	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	08da      	lsrs	r2, r3, #3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	3208      	adds	r2, #8
 8005988:	69b9      	ldr	r1, [r7, #24]
 800598a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	2203      	movs	r2, #3
 800599a:	fa02 f303 	lsl.w	r3, r2, r3
 800599e:	43db      	mvns	r3, r3
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	4013      	ands	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f003 0203 	and.w	r2, r3, #3
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	fa02 f303 	lsl.w	r3, r2, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 80d8 	beq.w	8005b80 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059d0:	4b2c      	ldr	r3, [pc, #176]	@ (8005a84 <HAL_GPIO_Init+0x22c>)
 80059d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059d6:	4a2b      	ldr	r2, [pc, #172]	@ (8005a84 <HAL_GPIO_Init+0x22c>)
 80059d8:	f043 0302 	orr.w	r3, r3, #2
 80059dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80059e0:	4b28      	ldr	r3, [pc, #160]	@ (8005a84 <HAL_GPIO_Init+0x22c>)
 80059e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059ee:	4a26      	ldr	r2, [pc, #152]	@ (8005a88 <HAL_GPIO_Init+0x230>)
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	089b      	lsrs	r3, r3, #2
 80059f4:	3302      	adds	r3, #2
 80059f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	220f      	movs	r2, #15
 8005a06:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0a:	43db      	mvns	r3, r3
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a1d      	ldr	r2, [pc, #116]	@ (8005a8c <HAL_GPIO_Init+0x234>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d04a      	beq.n	8005ab0 <HAL_GPIO_Init+0x258>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8005a90 <HAL_GPIO_Init+0x238>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d02b      	beq.n	8005a7a <HAL_GPIO_Init+0x222>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a1b      	ldr	r2, [pc, #108]	@ (8005a94 <HAL_GPIO_Init+0x23c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d025      	beq.n	8005a76 <HAL_GPIO_Init+0x21e>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005a98 <HAL_GPIO_Init+0x240>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d01f      	beq.n	8005a72 <HAL_GPIO_Init+0x21a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a19      	ldr	r2, [pc, #100]	@ (8005a9c <HAL_GPIO_Init+0x244>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d019      	beq.n	8005a6e <HAL_GPIO_Init+0x216>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a18      	ldr	r2, [pc, #96]	@ (8005aa0 <HAL_GPIO_Init+0x248>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d013      	beq.n	8005a6a <HAL_GPIO_Init+0x212>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a17      	ldr	r2, [pc, #92]	@ (8005aa4 <HAL_GPIO_Init+0x24c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00d      	beq.n	8005a66 <HAL_GPIO_Init+0x20e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a16      	ldr	r2, [pc, #88]	@ (8005aa8 <HAL_GPIO_Init+0x250>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d007      	beq.n	8005a62 <HAL_GPIO_Init+0x20a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a15      	ldr	r2, [pc, #84]	@ (8005aac <HAL_GPIO_Init+0x254>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d101      	bne.n	8005a5e <HAL_GPIO_Init+0x206>
 8005a5a:	2309      	movs	r3, #9
 8005a5c:	e029      	b.n	8005ab2 <HAL_GPIO_Init+0x25a>
 8005a5e:	230a      	movs	r3, #10
 8005a60:	e027      	b.n	8005ab2 <HAL_GPIO_Init+0x25a>
 8005a62:	2307      	movs	r3, #7
 8005a64:	e025      	b.n	8005ab2 <HAL_GPIO_Init+0x25a>
 8005a66:	2306      	movs	r3, #6
 8005a68:	e023      	b.n	8005ab2 <HAL_GPIO_Init+0x25a>
 8005a6a:	2305      	movs	r3, #5
 8005a6c:	e021      	b.n	8005ab2 <HAL_GPIO_Init+0x25a>
 8005a6e:	2304      	movs	r3, #4
 8005a70:	e01f      	b.n	8005ab2 <HAL_GPIO_Init+0x25a>
 8005a72:	2303      	movs	r3, #3
 8005a74:	e01d      	b.n	8005ab2 <HAL_GPIO_Init+0x25a>
 8005a76:	2302      	movs	r3, #2
 8005a78:	e01b      	b.n	8005ab2 <HAL_GPIO_Init+0x25a>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e019      	b.n	8005ab2 <HAL_GPIO_Init+0x25a>
 8005a7e:	bf00      	nop
 8005a80:	58000080 	.word	0x58000080
 8005a84:	58024400 	.word	0x58024400
 8005a88:	58000400 	.word	0x58000400
 8005a8c:	58020000 	.word	0x58020000
 8005a90:	58020400 	.word	0x58020400
 8005a94:	58020800 	.word	0x58020800
 8005a98:	58020c00 	.word	0x58020c00
 8005a9c:	58021000 	.word	0x58021000
 8005aa0:	58021400 	.word	0x58021400
 8005aa4:	58021800 	.word	0x58021800
 8005aa8:	58021c00 	.word	0x58021c00
 8005aac:	58022400 	.word	0x58022400
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	f002 0203 	and.w	r2, r2, #3
 8005ab8:	0092      	lsls	r2, r2, #2
 8005aba:	4093      	lsls	r3, r2
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ac2:	4938      	ldr	r1, [pc, #224]	@ (8005ba4 <HAL_GPIO_Init+0x34c>)
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	089b      	lsrs	r3, r3, #2
 8005ac8:	3302      	adds	r3, #2
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	43db      	mvns	r3, r3
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005af6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005afe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005b24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	43db      	mvns	r3, r3
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	43db      	mvns	r3, r3
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	4013      	ands	r3, r2
 8005b64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	3301      	adds	r3, #1
 8005b84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f47f ae6b 	bne.w	800586c <HAL_GPIO_Init+0x14>
  }
}
 8005b96:	bf00      	nop
 8005b98:	bf00      	nop
 8005b9a:	3724      	adds	r7, #36	@ 0x24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	58000400 	.word	0x58000400

08005ba8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	887b      	ldrh	r3, [r7, #2]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	73fb      	strb	r3, [r7, #15]
 8005bc4:	e001      	b.n	8005bca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	807b      	strh	r3, [r7, #2]
 8005be4:	4613      	mov	r3, r2
 8005be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005be8:	787b      	ldrb	r3, [r7, #1]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bee:	887a      	ldrh	r2, [r7, #2]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005bf4:	e003      	b.n	8005bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005bf6:	887b      	ldrh	r3, [r7, #2]
 8005bf8:	041a      	lsls	r2, r3, #16
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	619a      	str	r2, [r3, #24]
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b085      	sub	sp, #20
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	460b      	mov	r3, r1
 8005c14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c1c:	887a      	ldrh	r2, [r7, #2]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4013      	ands	r3, r2
 8005c22:	041a      	lsls	r2, r3, #16
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	43d9      	mvns	r1, r3
 8005c28:	887b      	ldrh	r3, [r7, #2]
 8005c2a:	400b      	ands	r3, r1
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	619a      	str	r2, [r3, #24]
}
 8005c32:	bf00      	nop
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e08b      	b.n	8005d6a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fc fff4 	bl	8002c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2224      	movs	r2, #36	@ 0x24
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0201 	bic.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005c90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ca0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d107      	bne.n	8005cba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cb6:	609a      	str	r2, [r3, #8]
 8005cb8:	e006      	b.n	8005cc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005cc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d108      	bne.n	8005ce2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cde:	605a      	str	r2, [r3, #4]
 8005ce0:	e007      	b.n	8005cf2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cf0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6859      	ldr	r1, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8005d74 <HAL_I2C_Init+0x134>)
 8005cfe:	430b      	orrs	r3, r1
 8005d00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	69d9      	ldr	r1, [r3, #28]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1a      	ldr	r2, [r3, #32]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	02008000 	.word	0x02008000

08005d78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b20      	cmp	r3, #32
 8005d8c:	d138      	bne.n	8005e00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e032      	b.n	8005e02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2224      	movs	r2, #36	@ 0x24
 8005da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0201 	bic.w	r2, r2, #1
 8005dba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005dca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6819      	ldr	r1, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0201 	orr.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e000      	b.n	8005e02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e00:	2302      	movs	r3, #2
  }
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b20      	cmp	r3, #32
 8005e22:	d139      	bne.n	8005e98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d101      	bne.n	8005e32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e033      	b.n	8005e9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2224      	movs	r2, #36	@ 0x24
 8005e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 0201 	bic.w	r2, r2, #1
 8005e50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005e60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	021b      	lsls	r3, r3, #8
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0201 	orr.w	r2, r2, #1
 8005e82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	e000      	b.n	8005e9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005e98:	2302      	movs	r3, #2
  }
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
	...

08005ea8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005eb0:	4b29      	ldr	r3, [pc, #164]	@ (8005f58 <HAL_PWREx_ConfigSupply+0xb0>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	2b06      	cmp	r3, #6
 8005eba:	d00a      	beq.n	8005ed2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ebc:	4b26      	ldr	r3, [pc, #152]	@ (8005f58 <HAL_PWREx_ConfigSupply+0xb0>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d001      	beq.n	8005ece <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e03f      	b.n	8005f4e <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e03d      	b.n	8005f4e <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ed2:	4b21      	ldr	r3, [pc, #132]	@ (8005f58 <HAL_PWREx_ConfigSupply+0xb0>)
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005eda:	491f      	ldr	r1, [pc, #124]	@ (8005f58 <HAL_PWREx_ConfigSupply+0xb0>)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ee2:	f7fd fdc3 	bl	8003a6c <HAL_GetTick>
 8005ee6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ee8:	e009      	b.n	8005efe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005eea:	f7fd fdbf 	bl	8003a6c <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ef8:	d901      	bls.n	8005efe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e027      	b.n	8005f4e <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005efe:	4b16      	ldr	r3, [pc, #88]	@ (8005f58 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f0a:	d1ee      	bne.n	8005eea <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b1e      	cmp	r3, #30
 8005f10:	d008      	beq.n	8005f24 <HAL_PWREx_ConfigSupply+0x7c>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f16:	d005      	beq.n	8005f24 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b1d      	cmp	r3, #29
 8005f1c:	d002      	beq.n	8005f24 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b2d      	cmp	r3, #45	@ 0x2d
 8005f22:	d113      	bne.n	8005f4c <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005f24:	f7fd fda2 	bl	8003a6c <HAL_GetTick>
 8005f28:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005f2a:	e009      	b.n	8005f40 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f2c:	f7fd fd9e 	bl	8003a6c <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f3a:	d901      	bls.n	8005f40 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e006      	b.n	8005f4e <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005f40:	4b05      	ldr	r3, [pc, #20]	@ (8005f58 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f003 0311 	and.w	r3, r3, #17
 8005f48:	2b11      	cmp	r3, #17
 8005f4a:	d1ef      	bne.n	8005f2c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	58024800 	.word	0x58024800

08005f5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08c      	sub	sp, #48	@ 0x30
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e3c8      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 8087 	beq.w	800608a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f7c:	4b88      	ldr	r3, [pc, #544]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f86:	4b86      	ldr	r3, [pc, #536]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8005f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8e:	2b10      	cmp	r3, #16
 8005f90:	d007      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x46>
 8005f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f94:	2b18      	cmp	r3, #24
 8005f96:	d110      	bne.n	8005fba <HAL_RCC_OscConfig+0x5e>
 8005f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9a:	f003 0303 	and.w	r3, r3, #3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d10b      	bne.n	8005fba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fa2:	4b7f      	ldr	r3, [pc, #508]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d06c      	beq.n	8006088 <HAL_RCC_OscConfig+0x12c>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d168      	bne.n	8006088 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e3a2      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fc2:	d106      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x76>
 8005fc4:	4b76      	ldr	r3, [pc, #472]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a75      	ldr	r2, [pc, #468]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8005fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fce:	6013      	str	r3, [r2, #0]
 8005fd0:	e02e      	b.n	8006030 <HAL_RCC_OscConfig+0xd4>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10c      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x98>
 8005fda:	4b71      	ldr	r3, [pc, #452]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a70      	ldr	r2, [pc, #448]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8005fe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	4b6e      	ldr	r3, [pc, #440]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a6d      	ldr	r2, [pc, #436]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8005fec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	e01d      	b.n	8006030 <HAL_RCC_OscConfig+0xd4>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ffc:	d10c      	bne.n	8006018 <HAL_RCC_OscConfig+0xbc>
 8005ffe:	4b68      	ldr	r3, [pc, #416]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a67      	ldr	r2, [pc, #412]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8006004:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	4b65      	ldr	r3, [pc, #404]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a64      	ldr	r2, [pc, #400]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8006010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	e00b      	b.n	8006030 <HAL_RCC_OscConfig+0xd4>
 8006018:	4b61      	ldr	r3, [pc, #388]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a60      	ldr	r2, [pc, #384]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 800601e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	4b5e      	ldr	r3, [pc, #376]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a5d      	ldr	r2, [pc, #372]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 800602a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800602e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d013      	beq.n	8006060 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006038:	f7fd fd18 	bl	8003a6c <HAL_GetTick>
 800603c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800603e:	e008      	b.n	8006052 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006040:	f7fd fd14 	bl	8003a6c <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b64      	cmp	r3, #100	@ 0x64
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e356      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006052:	4b53      	ldr	r3, [pc, #332]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0f0      	beq.n	8006040 <HAL_RCC_OscConfig+0xe4>
 800605e:	e014      	b.n	800608a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006060:	f7fd fd04 	bl	8003a6c <HAL_GetTick>
 8006064:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006066:	e008      	b.n	800607a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006068:	f7fd fd00 	bl	8003a6c <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b64      	cmp	r3, #100	@ 0x64
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e342      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800607a:	4b49      	ldr	r3, [pc, #292]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1f0      	bne.n	8006068 <HAL_RCC_OscConfig+0x10c>
 8006086:	e000      	b.n	800608a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 808c 	beq.w	80061b0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006098:	4b41      	ldr	r3, [pc, #260]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060a2:	4b3f      	ldr	r3, [pc, #252]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 80060a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d007      	beq.n	80060be <HAL_RCC_OscConfig+0x162>
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	2b18      	cmp	r3, #24
 80060b2:	d137      	bne.n	8006124 <HAL_RCC_OscConfig+0x1c8>
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	f003 0303 	and.w	r3, r3, #3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d132      	bne.n	8006124 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060be:	4b38      	ldr	r3, [pc, #224]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d005      	beq.n	80060d6 <HAL_RCC_OscConfig+0x17a>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e314      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80060d6:	4b32      	ldr	r3, [pc, #200]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f023 0219 	bic.w	r2, r3, #25
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	492f      	ldr	r1, [pc, #188]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e8:	f7fd fcc0 	bl	8003a6c <HAL_GetTick>
 80060ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060ee:	e008      	b.n	8006102 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060f0:	f7fd fcbc 	bl	8003a6c <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e2fe      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006102:	4b27      	ldr	r3, [pc, #156]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0304 	and.w	r3, r3, #4
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0f0      	beq.n	80060f0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800610e:	4b24      	ldr	r3, [pc, #144]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	061b      	lsls	r3, r3, #24
 800611c:	4920      	ldr	r1, [pc, #128]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 800611e:	4313      	orrs	r3, r2
 8006120:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006122:	e045      	b.n	80061b0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d026      	beq.n	800617a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800612c:	4b1c      	ldr	r3, [pc, #112]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f023 0219 	bic.w	r2, r3, #25
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	4919      	ldr	r1, [pc, #100]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 800613a:	4313      	orrs	r3, r2
 800613c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613e:	f7fd fc95 	bl	8003a6c <HAL_GetTick>
 8006142:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006144:	e008      	b.n	8006158 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006146:	f7fd fc91 	bl	8003a6c <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e2d3      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006158:	4b11      	ldr	r3, [pc, #68]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0f0      	beq.n	8006146 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006164:	4b0e      	ldr	r3, [pc, #56]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	061b      	lsls	r3, r3, #24
 8006172:	490b      	ldr	r1, [pc, #44]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8006174:	4313      	orrs	r3, r2
 8006176:	604b      	str	r3, [r1, #4]
 8006178:	e01a      	b.n	80061b0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800617a:	4b09      	ldr	r3, [pc, #36]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a08      	ldr	r2, [pc, #32]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8006180:	f023 0301 	bic.w	r3, r3, #1
 8006184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006186:	f7fd fc71 	bl	8003a6c <HAL_GetTick>
 800618a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800618c:	e00a      	b.n	80061a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800618e:	f7fd fc6d 	bl	8003a6c <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d903      	bls.n	80061a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e2af      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
 80061a0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061a4:	4b96      	ldr	r3, [pc, #600]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1ee      	bne.n	800618e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d06a      	beq.n	8006292 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061bc:	4b90      	ldr	r3, [pc, #576]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061c4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061c6:	4b8e      	ldr	r3, [pc, #568]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 80061c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ca:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	2b08      	cmp	r3, #8
 80061d0:	d007      	beq.n	80061e2 <HAL_RCC_OscConfig+0x286>
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	2b18      	cmp	r3, #24
 80061d6:	d11b      	bne.n	8006210 <HAL_RCC_OscConfig+0x2b4>
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d116      	bne.n	8006210 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061e2:	4b87      	ldr	r3, [pc, #540]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d005      	beq.n	80061fa <HAL_RCC_OscConfig+0x29e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	2b80      	cmp	r3, #128	@ 0x80
 80061f4:	d001      	beq.n	80061fa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e282      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061fa:	4b81      	ldr	r3, [pc, #516]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	061b      	lsls	r3, r3, #24
 8006208:	497d      	ldr	r1, [pc, #500]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 800620a:	4313      	orrs	r3, r2
 800620c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800620e:	e040      	b.n	8006292 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d023      	beq.n	8006260 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006218:	4b79      	ldr	r3, [pc, #484]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a78      	ldr	r2, [pc, #480]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 800621e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006224:	f7fd fc22 	bl	8003a6c <HAL_GetTick>
 8006228:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800622c:	f7fd fc1e 	bl	8003a6c <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e260      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800623e:	4b70      	ldr	r3, [pc, #448]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006246:	2b00      	cmp	r3, #0
 8006248:	d0f0      	beq.n	800622c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800624a:	4b6d      	ldr	r3, [pc, #436]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	061b      	lsls	r3, r3, #24
 8006258:	4969      	ldr	r1, [pc, #420]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 800625a:	4313      	orrs	r3, r2
 800625c:	60cb      	str	r3, [r1, #12]
 800625e:	e018      	b.n	8006292 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006260:	4b67      	ldr	r3, [pc, #412]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a66      	ldr	r2, [pc, #408]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 8006266:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800626a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626c:	f7fd fbfe 	bl	8003a6c <HAL_GetTick>
 8006270:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006274:	f7fd fbfa 	bl	8003a6c <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e23c      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006286:	4b5e      	ldr	r3, [pc, #376]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1f0      	bne.n	8006274 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0308 	and.w	r3, r3, #8
 800629a:	2b00      	cmp	r3, #0
 800629c:	d036      	beq.n	800630c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d019      	beq.n	80062da <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062a6:	4b56      	ldr	r3, [pc, #344]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 80062a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062aa:	4a55      	ldr	r2, [pc, #340]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 80062ac:	f043 0301 	orr.w	r3, r3, #1
 80062b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b2:	f7fd fbdb 	bl	8003a6c <HAL_GetTick>
 80062b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062b8:	e008      	b.n	80062cc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062ba:	f7fd fbd7 	bl	8003a6c <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d901      	bls.n	80062cc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e219      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062cc:	4b4c      	ldr	r3, [pc, #304]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 80062ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0f0      	beq.n	80062ba <HAL_RCC_OscConfig+0x35e>
 80062d8:	e018      	b.n	800630c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062da:	4b49      	ldr	r3, [pc, #292]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 80062dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062de:	4a48      	ldr	r2, [pc, #288]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 80062e0:	f023 0301 	bic.w	r3, r3, #1
 80062e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e6:	f7fd fbc1 	bl	8003a6c <HAL_GetTick>
 80062ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062ec:	e008      	b.n	8006300 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062ee:	f7fd fbbd 	bl	8003a6c <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d901      	bls.n	8006300 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e1ff      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006300:	4b3f      	ldr	r3, [pc, #252]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 8006302:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006304:	f003 0302 	and.w	r3, r3, #2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1f0      	bne.n	80062ee <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0320 	and.w	r3, r3, #32
 8006314:	2b00      	cmp	r3, #0
 8006316:	d036      	beq.n	8006386 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d019      	beq.n	8006354 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006320:	4b37      	ldr	r3, [pc, #220]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a36      	ldr	r2, [pc, #216]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 8006326:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800632a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800632c:	f7fd fb9e 	bl	8003a6c <HAL_GetTick>
 8006330:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006334:	f7fd fb9a 	bl	8003a6c <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e1dc      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006346:	4b2e      	ldr	r3, [pc, #184]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0f0      	beq.n	8006334 <HAL_RCC_OscConfig+0x3d8>
 8006352:	e018      	b.n	8006386 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006354:	4b2a      	ldr	r3, [pc, #168]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a29      	ldr	r2, [pc, #164]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 800635a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800635e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006360:	f7fd fb84 	bl	8003a6c <HAL_GetTick>
 8006364:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006366:	e008      	b.n	800637a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006368:	f7fd fb80 	bl	8003a6c <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e1c2      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800637a:	4b21      	ldr	r3, [pc, #132]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1f0      	bne.n	8006368 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0304 	and.w	r3, r3, #4
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 8086 	beq.w	80064a0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006394:	4b1b      	ldr	r3, [pc, #108]	@ (8006404 <HAL_RCC_OscConfig+0x4a8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a1a      	ldr	r2, [pc, #104]	@ (8006404 <HAL_RCC_OscConfig+0x4a8>)
 800639a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800639e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063a0:	f7fd fb64 	bl	8003a6c <HAL_GetTick>
 80063a4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063a8:	f7fd fb60 	bl	8003a6c <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b64      	cmp	r3, #100	@ 0x64
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e1a2      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063ba:	4b12      	ldr	r3, [pc, #72]	@ (8006404 <HAL_RCC_OscConfig+0x4a8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0f0      	beq.n	80063a8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d106      	bne.n	80063dc <HAL_RCC_OscConfig+0x480>
 80063ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 80063d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d2:	4a0b      	ldr	r2, [pc, #44]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 80063d4:	f043 0301 	orr.w	r3, r3, #1
 80063d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80063da:	e032      	b.n	8006442 <HAL_RCC_OscConfig+0x4e6>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d111      	bne.n	8006408 <HAL_RCC_OscConfig+0x4ac>
 80063e4:	4b06      	ldr	r3, [pc, #24]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 80063e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e8:	4a05      	ldr	r2, [pc, #20]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 80063ea:	f023 0301 	bic.w	r3, r3, #1
 80063ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80063f0:	4b03      	ldr	r3, [pc, #12]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 80063f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f4:	4a02      	ldr	r2, [pc, #8]	@ (8006400 <HAL_RCC_OscConfig+0x4a4>)
 80063f6:	f023 0304 	bic.w	r3, r3, #4
 80063fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80063fc:	e021      	b.n	8006442 <HAL_RCC_OscConfig+0x4e6>
 80063fe:	bf00      	nop
 8006400:	58024400 	.word	0x58024400
 8006404:	58024800 	.word	0x58024800
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b05      	cmp	r3, #5
 800640e:	d10c      	bne.n	800642a <HAL_RCC_OscConfig+0x4ce>
 8006410:	4b83      	ldr	r3, [pc, #524]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 8006412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006414:	4a82      	ldr	r2, [pc, #520]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 8006416:	f043 0304 	orr.w	r3, r3, #4
 800641a:	6713      	str	r3, [r2, #112]	@ 0x70
 800641c:	4b80      	ldr	r3, [pc, #512]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 800641e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006420:	4a7f      	ldr	r2, [pc, #508]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 8006422:	f043 0301 	orr.w	r3, r3, #1
 8006426:	6713      	str	r3, [r2, #112]	@ 0x70
 8006428:	e00b      	b.n	8006442 <HAL_RCC_OscConfig+0x4e6>
 800642a:	4b7d      	ldr	r3, [pc, #500]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 800642c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800642e:	4a7c      	ldr	r2, [pc, #496]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 8006430:	f023 0301 	bic.w	r3, r3, #1
 8006434:	6713      	str	r3, [r2, #112]	@ 0x70
 8006436:	4b7a      	ldr	r3, [pc, #488]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 8006438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800643a:	4a79      	ldr	r2, [pc, #484]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 800643c:	f023 0304 	bic.w	r3, r3, #4
 8006440:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d015      	beq.n	8006476 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800644a:	f7fd fb0f 	bl	8003a6c <HAL_GetTick>
 800644e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006450:	e00a      	b.n	8006468 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006452:	f7fd fb0b 	bl	8003a6c <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006460:	4293      	cmp	r3, r2
 8006462:	d901      	bls.n	8006468 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e14b      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006468:	4b6d      	ldr	r3, [pc, #436]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 800646a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0ee      	beq.n	8006452 <HAL_RCC_OscConfig+0x4f6>
 8006474:	e014      	b.n	80064a0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006476:	f7fd faf9 	bl	8003a6c <HAL_GetTick>
 800647a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800647c:	e00a      	b.n	8006494 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800647e:	f7fd faf5 	bl	8003a6c <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800648c:	4293      	cmp	r3, r2
 800648e:	d901      	bls.n	8006494 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e135      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006494:	4b62      	ldr	r3, [pc, #392]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 8006496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1ee      	bne.n	800647e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 812a 	beq.w	80066fe <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80064aa:	4b5d      	ldr	r3, [pc, #372]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064b2:	2b18      	cmp	r3, #24
 80064b4:	f000 80ba 	beq.w	800662c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064bc:	2b02      	cmp	r3, #2
 80064be:	f040 8095 	bne.w	80065ec <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c2:	4b57      	ldr	r3, [pc, #348]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a56      	ldr	r2, [pc, #344]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 80064c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ce:	f7fd facd 	bl	8003a6c <HAL_GetTick>
 80064d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064d4:	e008      	b.n	80064e8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064d6:	f7fd fac9 	bl	8003a6c <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e10b      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064e8:	4b4d      	ldr	r3, [pc, #308]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1f0      	bne.n	80064d6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064f4:	4b4a      	ldr	r3, [pc, #296]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 80064f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064f8:	4b4a      	ldr	r3, [pc, #296]	@ (8006624 <HAL_RCC_OscConfig+0x6c8>)
 80064fa:	4013      	ands	r3, r2
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006504:	0112      	lsls	r2, r2, #4
 8006506:	430a      	orrs	r2, r1
 8006508:	4945      	ldr	r1, [pc, #276]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 800650a:	4313      	orrs	r3, r2
 800650c:	628b      	str	r3, [r1, #40]	@ 0x28
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006512:	3b01      	subs	r3, #1
 8006514:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800651c:	3b01      	subs	r3, #1
 800651e:	025b      	lsls	r3, r3, #9
 8006520:	b29b      	uxth	r3, r3
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006528:	3b01      	subs	r3, #1
 800652a:	041b      	lsls	r3, r3, #16
 800652c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006530:	431a      	orrs	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006536:	3b01      	subs	r3, #1
 8006538:	061b      	lsls	r3, r3, #24
 800653a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800653e:	4938      	ldr	r1, [pc, #224]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 8006540:	4313      	orrs	r3, r2
 8006542:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006544:	4b36      	ldr	r3, [pc, #216]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 8006546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006548:	4a35      	ldr	r2, [pc, #212]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 800654a:	f023 0301 	bic.w	r3, r3, #1
 800654e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006550:	4b33      	ldr	r3, [pc, #204]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 8006552:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006554:	4b34      	ldr	r3, [pc, #208]	@ (8006628 <HAL_RCC_OscConfig+0x6cc>)
 8006556:	4013      	ands	r3, r2
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800655c:	00d2      	lsls	r2, r2, #3
 800655e:	4930      	ldr	r1, [pc, #192]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 8006560:	4313      	orrs	r3, r2
 8006562:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006564:	4b2e      	ldr	r3, [pc, #184]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 8006566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006568:	f023 020c 	bic.w	r2, r3, #12
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006570:	492b      	ldr	r1, [pc, #172]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 8006572:	4313      	orrs	r3, r2
 8006574:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006576:	4b2a      	ldr	r3, [pc, #168]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 8006578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657a:	f023 0202 	bic.w	r2, r3, #2
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006582:	4927      	ldr	r1, [pc, #156]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 8006584:	4313      	orrs	r3, r2
 8006586:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006588:	4b25      	ldr	r3, [pc, #148]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 800658a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658c:	4a24      	ldr	r2, [pc, #144]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 800658e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006592:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006594:	4b22      	ldr	r3, [pc, #136]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 8006596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006598:	4a21      	ldr	r2, [pc, #132]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 800659a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800659e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80065a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 80065a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a4:	4a1e      	ldr	r2, [pc, #120]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 80065a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80065ac:	4b1c      	ldr	r3, [pc, #112]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 80065ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 80065b2:	f043 0301 	orr.w	r3, r3, #1
 80065b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065b8:	4b19      	ldr	r3, [pc, #100]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a18      	ldr	r2, [pc, #96]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 80065be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c4:	f7fd fa52 	bl	8003a6c <HAL_GetTick>
 80065c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065ca:	e008      	b.n	80065de <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065cc:	f7fd fa4e 	bl	8003a6c <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e090      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065de:	4b10      	ldr	r3, [pc, #64]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0f0      	beq.n	80065cc <HAL_RCC_OscConfig+0x670>
 80065ea:	e088      	b.n	80066fe <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a0b      	ldr	r2, [pc, #44]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 80065f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f8:	f7fd fa38 	bl	8003a6c <HAL_GetTick>
 80065fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006600:	f7fd fa34 	bl	8003a6c <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e076      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006612:	4b03      	ldr	r3, [pc, #12]	@ (8006620 <HAL_RCC_OscConfig+0x6c4>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f0      	bne.n	8006600 <HAL_RCC_OscConfig+0x6a4>
 800661e:	e06e      	b.n	80066fe <HAL_RCC_OscConfig+0x7a2>
 8006620:	58024400 	.word	0x58024400
 8006624:	fffffc0c 	.word	0xfffffc0c
 8006628:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800662c:	4b36      	ldr	r3, [pc, #216]	@ (8006708 <HAL_RCC_OscConfig+0x7ac>)
 800662e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006630:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006632:	4b35      	ldr	r3, [pc, #212]	@ (8006708 <HAL_RCC_OscConfig+0x7ac>)
 8006634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006636:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663c:	2b01      	cmp	r3, #1
 800663e:	d031      	beq.n	80066a4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f003 0203 	and.w	r2, r3, #3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800664a:	429a      	cmp	r2, r3
 800664c:	d12a      	bne.n	80066a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	091b      	lsrs	r3, r3, #4
 8006652:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800665a:	429a      	cmp	r2, r3
 800665c:	d122      	bne.n	80066a4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006668:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800666a:	429a      	cmp	r2, r3
 800666c:	d11a      	bne.n	80066a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	0a5b      	lsrs	r3, r3, #9
 8006672:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800667a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800667c:	429a      	cmp	r2, r3
 800667e:	d111      	bne.n	80066a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	0c1b      	lsrs	r3, r3, #16
 8006684:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800668e:	429a      	cmp	r2, r3
 8006690:	d108      	bne.n	80066a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	0e1b      	lsrs	r3, r3, #24
 8006696:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800669e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d001      	beq.n	80066a8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e02b      	b.n	8006700 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80066a8:	4b17      	ldr	r3, [pc, #92]	@ (8006708 <HAL_RCC_OscConfig+0x7ac>)
 80066aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ac:	08db      	lsrs	r3, r3, #3
 80066ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d01f      	beq.n	80066fe <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80066be:	4b12      	ldr	r3, [pc, #72]	@ (8006708 <HAL_RCC_OscConfig+0x7ac>)
 80066c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c2:	4a11      	ldr	r2, [pc, #68]	@ (8006708 <HAL_RCC_OscConfig+0x7ac>)
 80066c4:	f023 0301 	bic.w	r3, r3, #1
 80066c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80066ca:	f7fd f9cf 	bl	8003a6c <HAL_GetTick>
 80066ce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80066d0:	bf00      	nop
 80066d2:	f7fd f9cb 	bl	8003a6c <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066da:	4293      	cmp	r3, r2
 80066dc:	d0f9      	beq.n	80066d2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066de:	4b0a      	ldr	r3, [pc, #40]	@ (8006708 <HAL_RCC_OscConfig+0x7ac>)
 80066e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066e2:	4b0a      	ldr	r3, [pc, #40]	@ (800670c <HAL_RCC_OscConfig+0x7b0>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80066ea:	00d2      	lsls	r2, r2, #3
 80066ec:	4906      	ldr	r1, [pc, #24]	@ (8006708 <HAL_RCC_OscConfig+0x7ac>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80066f2:	4b05      	ldr	r3, [pc, #20]	@ (8006708 <HAL_RCC_OscConfig+0x7ac>)
 80066f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f6:	4a04      	ldr	r2, [pc, #16]	@ (8006708 <HAL_RCC_OscConfig+0x7ac>)
 80066f8:	f043 0301 	orr.w	r3, r3, #1
 80066fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3730      	adds	r7, #48	@ 0x30
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	58024400 	.word	0x58024400
 800670c:	ffff0007 	.word	0xffff0007

08006710 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e19c      	b.n	8006a5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006724:	4b8a      	ldr	r3, [pc, #552]	@ (8006950 <HAL_RCC_ClockConfig+0x240>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 030f 	and.w	r3, r3, #15
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	429a      	cmp	r2, r3
 8006730:	d910      	bls.n	8006754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006732:	4b87      	ldr	r3, [pc, #540]	@ (8006950 <HAL_RCC_ClockConfig+0x240>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f023 020f 	bic.w	r2, r3, #15
 800673a:	4985      	ldr	r1, [pc, #532]	@ (8006950 <HAL_RCC_ClockConfig+0x240>)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	4313      	orrs	r3, r2
 8006740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006742:	4b83      	ldr	r3, [pc, #524]	@ (8006950 <HAL_RCC_ClockConfig+0x240>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	429a      	cmp	r2, r3
 800674e:	d001      	beq.n	8006754 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e184      	b.n	8006a5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d010      	beq.n	8006782 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691a      	ldr	r2, [r3, #16]
 8006764:	4b7b      	ldr	r3, [pc, #492]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800676c:	429a      	cmp	r2, r3
 800676e:	d908      	bls.n	8006782 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006770:	4b78      	ldr	r3, [pc, #480]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	4975      	ldr	r1, [pc, #468]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 800677e:	4313      	orrs	r3, r2
 8006780:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0308 	and.w	r3, r3, #8
 800678a:	2b00      	cmp	r3, #0
 800678c:	d010      	beq.n	80067b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695a      	ldr	r2, [r3, #20]
 8006792:	4b70      	ldr	r3, [pc, #448]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800679a:	429a      	cmp	r2, r3
 800679c:	d908      	bls.n	80067b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800679e:	4b6d      	ldr	r3, [pc, #436]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	496a      	ldr	r1, [pc, #424]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0310 	and.w	r3, r3, #16
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d010      	beq.n	80067de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	699a      	ldr	r2, [r3, #24]
 80067c0:	4b64      	ldr	r3, [pc, #400]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d908      	bls.n	80067de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067cc:	4b61      	ldr	r3, [pc, #388]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	495e      	ldr	r1, [pc, #376]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d010      	beq.n	800680c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	69da      	ldr	r2, [r3, #28]
 80067ee:	4b59      	ldr	r3, [pc, #356]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d908      	bls.n	800680c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80067fa:	4b56      	ldr	r3, [pc, #344]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	4953      	ldr	r1, [pc, #332]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 8006808:	4313      	orrs	r3, r2
 800680a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d010      	beq.n	800683a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	4b4d      	ldr	r3, [pc, #308]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	f003 030f 	and.w	r3, r3, #15
 8006824:	429a      	cmp	r2, r3
 8006826:	d908      	bls.n	800683a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006828:	4b4a      	ldr	r3, [pc, #296]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	f023 020f 	bic.w	r2, r3, #15
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	4947      	ldr	r1, [pc, #284]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 8006836:	4313      	orrs	r3, r2
 8006838:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d055      	beq.n	80068f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006846:	4b43      	ldr	r3, [pc, #268]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	4940      	ldr	r1, [pc, #256]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 8006854:	4313      	orrs	r3, r2
 8006856:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	2b02      	cmp	r3, #2
 800685e:	d107      	bne.n	8006870 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006860:	4b3c      	ldr	r3, [pc, #240]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d121      	bne.n	80068b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e0f6      	b.n	8006a5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	2b03      	cmp	r3, #3
 8006876:	d107      	bne.n	8006888 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006878:	4b36      	ldr	r3, [pc, #216]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d115      	bne.n	80068b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e0ea      	b.n	8006a5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d107      	bne.n	80068a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006890:	4b30      	ldr	r3, [pc, #192]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006898:	2b00      	cmp	r3, #0
 800689a:	d109      	bne.n	80068b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e0de      	b.n	8006a5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068a0:	4b2c      	ldr	r3, [pc, #176]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e0d6      	b.n	8006a5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068b0:	4b28      	ldr	r3, [pc, #160]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	f023 0207 	bic.w	r2, r3, #7
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	4925      	ldr	r1, [pc, #148]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068c2:	f7fd f8d3 	bl	8003a6c <HAL_GetTick>
 80068c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068c8:	e00a      	b.n	80068e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068ca:	f7fd f8cf 	bl	8003a6c <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068d8:	4293      	cmp	r3, r2
 80068da:	d901      	bls.n	80068e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e0be      	b.n	8006a5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d1eb      	bne.n	80068ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d010      	beq.n	8006920 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	4b14      	ldr	r3, [pc, #80]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	429a      	cmp	r2, r3
 800690c:	d208      	bcs.n	8006920 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800690e:	4b11      	ldr	r3, [pc, #68]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	f023 020f 	bic.w	r2, r3, #15
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	490e      	ldr	r1, [pc, #56]	@ (8006954 <HAL_RCC_ClockConfig+0x244>)
 800691c:	4313      	orrs	r3, r2
 800691e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006920:	4b0b      	ldr	r3, [pc, #44]	@ (8006950 <HAL_RCC_ClockConfig+0x240>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 030f 	and.w	r3, r3, #15
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	429a      	cmp	r2, r3
 800692c:	d214      	bcs.n	8006958 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800692e:	4b08      	ldr	r3, [pc, #32]	@ (8006950 <HAL_RCC_ClockConfig+0x240>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f023 020f 	bic.w	r2, r3, #15
 8006936:	4906      	ldr	r1, [pc, #24]	@ (8006950 <HAL_RCC_ClockConfig+0x240>)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	4313      	orrs	r3, r2
 800693c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800693e:	4b04      	ldr	r3, [pc, #16]	@ (8006950 <HAL_RCC_ClockConfig+0x240>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 030f 	and.w	r3, r3, #15
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	429a      	cmp	r2, r3
 800694a:	d005      	beq.n	8006958 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e086      	b.n	8006a5e <HAL_RCC_ClockConfig+0x34e>
 8006950:	52002000 	.word	0x52002000
 8006954:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d010      	beq.n	8006986 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691a      	ldr	r2, [r3, #16]
 8006968:	4b3f      	ldr	r3, [pc, #252]	@ (8006a68 <HAL_RCC_ClockConfig+0x358>)
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006970:	429a      	cmp	r2, r3
 8006972:	d208      	bcs.n	8006986 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006974:	4b3c      	ldr	r3, [pc, #240]	@ (8006a68 <HAL_RCC_ClockConfig+0x358>)
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	4939      	ldr	r1, [pc, #228]	@ (8006a68 <HAL_RCC_ClockConfig+0x358>)
 8006982:	4313      	orrs	r3, r2
 8006984:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0308 	and.w	r3, r3, #8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d010      	beq.n	80069b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	695a      	ldr	r2, [r3, #20]
 8006996:	4b34      	ldr	r3, [pc, #208]	@ (8006a68 <HAL_RCC_ClockConfig+0x358>)
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800699e:	429a      	cmp	r2, r3
 80069a0:	d208      	bcs.n	80069b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069a2:	4b31      	ldr	r3, [pc, #196]	@ (8006a68 <HAL_RCC_ClockConfig+0x358>)
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	492e      	ldr	r1, [pc, #184]	@ (8006a68 <HAL_RCC_ClockConfig+0x358>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0310 	and.w	r3, r3, #16
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d010      	beq.n	80069e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	699a      	ldr	r2, [r3, #24]
 80069c4:	4b28      	ldr	r3, [pc, #160]	@ (8006a68 <HAL_RCC_ClockConfig+0x358>)
 80069c6:	69db      	ldr	r3, [r3, #28]
 80069c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d208      	bcs.n	80069e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80069d0:	4b25      	ldr	r3, [pc, #148]	@ (8006a68 <HAL_RCC_ClockConfig+0x358>)
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	4922      	ldr	r1, [pc, #136]	@ (8006a68 <HAL_RCC_ClockConfig+0x358>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d010      	beq.n	8006a10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	69da      	ldr	r2, [r3, #28]
 80069f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a68 <HAL_RCC_ClockConfig+0x358>)
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d208      	bcs.n	8006a10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80069fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006a68 <HAL_RCC_ClockConfig+0x358>)
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	4917      	ldr	r1, [pc, #92]	@ (8006a68 <HAL_RCC_ClockConfig+0x358>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a10:	f000 f834 	bl	8006a7c <HAL_RCC_GetSysClockFreq>
 8006a14:	4602      	mov	r2, r0
 8006a16:	4b14      	ldr	r3, [pc, #80]	@ (8006a68 <HAL_RCC_ClockConfig+0x358>)
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	0a1b      	lsrs	r3, r3, #8
 8006a1c:	f003 030f 	and.w	r3, r3, #15
 8006a20:	4912      	ldr	r1, [pc, #72]	@ (8006a6c <HAL_RCC_ClockConfig+0x35c>)
 8006a22:	5ccb      	ldrb	r3, [r1, r3]
 8006a24:	f003 031f 	and.w	r3, r3, #31
 8006a28:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a68 <HAL_RCC_ClockConfig+0x358>)
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	f003 030f 	and.w	r3, r3, #15
 8006a36:	4a0d      	ldr	r2, [pc, #52]	@ (8006a6c <HAL_RCC_ClockConfig+0x35c>)
 8006a38:	5cd3      	ldrb	r3, [r2, r3]
 8006a3a:	f003 031f 	and.w	r3, r3, #31
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	fa22 f303 	lsr.w	r3, r2, r3
 8006a44:	4a0a      	ldr	r2, [pc, #40]	@ (8006a70 <HAL_RCC_ClockConfig+0x360>)
 8006a46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a48:	4a0a      	ldr	r2, [pc, #40]	@ (8006a74 <HAL_RCC_ClockConfig+0x364>)
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a78 <HAL_RCC_ClockConfig+0x368>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fc fc98 	bl	8003388 <HAL_InitTick>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	58024400 	.word	0x58024400
 8006a6c:	0801f2c0 	.word	0x0801f2c0
 8006a70:	24000004 	.word	0x24000004
 8006a74:	24000000 	.word	0x24000000
 8006a78:	24000008 	.word	0x24000008

08006a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b089      	sub	sp, #36	@ 0x24
 8006a80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a82:	4bb3      	ldr	r3, [pc, #716]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a8a:	2b18      	cmp	r3, #24
 8006a8c:	f200 8155 	bhi.w	8006d3a <HAL_RCC_GetSysClockFreq+0x2be>
 8006a90:	a201      	add	r2, pc, #4	@ (adr r2, 8006a98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a96:	bf00      	nop
 8006a98:	08006afd 	.word	0x08006afd
 8006a9c:	08006d3b 	.word	0x08006d3b
 8006aa0:	08006d3b 	.word	0x08006d3b
 8006aa4:	08006d3b 	.word	0x08006d3b
 8006aa8:	08006d3b 	.word	0x08006d3b
 8006aac:	08006d3b 	.word	0x08006d3b
 8006ab0:	08006d3b 	.word	0x08006d3b
 8006ab4:	08006d3b 	.word	0x08006d3b
 8006ab8:	08006b23 	.word	0x08006b23
 8006abc:	08006d3b 	.word	0x08006d3b
 8006ac0:	08006d3b 	.word	0x08006d3b
 8006ac4:	08006d3b 	.word	0x08006d3b
 8006ac8:	08006d3b 	.word	0x08006d3b
 8006acc:	08006d3b 	.word	0x08006d3b
 8006ad0:	08006d3b 	.word	0x08006d3b
 8006ad4:	08006d3b 	.word	0x08006d3b
 8006ad8:	08006b29 	.word	0x08006b29
 8006adc:	08006d3b 	.word	0x08006d3b
 8006ae0:	08006d3b 	.word	0x08006d3b
 8006ae4:	08006d3b 	.word	0x08006d3b
 8006ae8:	08006d3b 	.word	0x08006d3b
 8006aec:	08006d3b 	.word	0x08006d3b
 8006af0:	08006d3b 	.word	0x08006d3b
 8006af4:	08006d3b 	.word	0x08006d3b
 8006af8:	08006b2f 	.word	0x08006b2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006afc:	4b94      	ldr	r3, [pc, #592]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0320 	and.w	r3, r3, #32
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d009      	beq.n	8006b1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b08:	4b91      	ldr	r3, [pc, #580]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	08db      	lsrs	r3, r3, #3
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	4a90      	ldr	r2, [pc, #576]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b14:	fa22 f303 	lsr.w	r3, r2, r3
 8006b18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006b1a:	e111      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b1c:	4b8d      	ldr	r3, [pc, #564]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b1e:	61bb      	str	r3, [r7, #24]
      break;
 8006b20:	e10e      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006b22:	4b8d      	ldr	r3, [pc, #564]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b24:	61bb      	str	r3, [r7, #24]
      break;
 8006b26:	e10b      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006b28:	4b8c      	ldr	r3, [pc, #560]	@ (8006d5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006b2a:	61bb      	str	r3, [r7, #24]
      break;
 8006b2c:	e108      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b2e:	4b88      	ldr	r3, [pc, #544]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b32:	f003 0303 	and.w	r3, r3, #3
 8006b36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006b38:	4b85      	ldr	r3, [pc, #532]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b3c:	091b      	lsrs	r3, r3, #4
 8006b3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b44:	4b82      	ldr	r3, [pc, #520]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b4e:	4b80      	ldr	r3, [pc, #512]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b52:	08db      	lsrs	r3, r3, #3
 8006b54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	fb02 f303 	mul.w	r3, r2, r3
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 80e1 	beq.w	8006d34 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	f000 8083 	beq.w	8006c80 <HAL_RCC_GetSysClockFreq+0x204>
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	f200 80a1 	bhi.w	8006cc4 <HAL_RCC_GetSysClockFreq+0x248>
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <HAL_RCC_GetSysClockFreq+0x114>
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d056      	beq.n	8006c3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006b8e:	e099      	b.n	8006cc4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b90:	4b6f      	ldr	r3, [pc, #444]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d02d      	beq.n	8006bf8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b9c:	4b6c      	ldr	r3, [pc, #432]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	08db      	lsrs	r3, r3, #3
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	4a6b      	ldr	r2, [pc, #428]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	ee07 3a90 	vmov	s15, r3
 8006bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc6:	4b62      	ldr	r3, [pc, #392]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bda:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006d60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006be6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bf2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006bf6:	e087      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c02:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006d64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c0a:	4b51      	ldr	r3, [pc, #324]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c1e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006d60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c3a:	e065      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c46:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006d68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c4e:	4b40      	ldr	r3, [pc, #256]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c62:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006d60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c7e:	e043      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006d6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c92:	4b2f      	ldr	r3, [pc, #188]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ca6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006d60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cc2:	e021      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	ee07 3a90 	vmov	s15, r3
 8006cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006d68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006d60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d06:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006d08:	4b11      	ldr	r3, [pc, #68]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0c:	0a5b      	lsrs	r3, r3, #9
 8006d0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d12:	3301      	adds	r3, #1
 8006d14:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	ee07 3a90 	vmov	s15, r3
 8006d1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d20:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d2c:	ee17 3a90 	vmov	r3, s15
 8006d30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006d32:	e005      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61bb      	str	r3, [r7, #24]
      break;
 8006d38:	e002      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006d3a:	4b07      	ldr	r3, [pc, #28]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d3c:	61bb      	str	r3, [r7, #24]
      break;
 8006d3e:	bf00      	nop
  }

  return sysclockfreq;
 8006d40:	69bb      	ldr	r3, [r7, #24]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3724      	adds	r7, #36	@ 0x24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	58024400 	.word	0x58024400
 8006d54:	03d09000 	.word	0x03d09000
 8006d58:	003d0900 	.word	0x003d0900
 8006d5c:	02dc6c00 	.word	0x02dc6c00
 8006d60:	46000000 	.word	0x46000000
 8006d64:	4c742400 	.word	0x4c742400
 8006d68:	4a742400 	.word	0x4a742400
 8006d6c:	4c371b00 	.word	0x4c371b00

08006d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d76:	f7ff fe81 	bl	8006a7c <HAL_RCC_GetSysClockFreq>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	4b10      	ldr	r3, [pc, #64]	@ (8006dc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	0a1b      	lsrs	r3, r3, #8
 8006d82:	f003 030f 	and.w	r3, r3, #15
 8006d86:	490f      	ldr	r1, [pc, #60]	@ (8006dc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d88:	5ccb      	ldrb	r3, [r1, r3]
 8006d8a:	f003 031f 	and.w	r3, r3, #31
 8006d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d94:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	f003 030f 	and.w	r3, r3, #15
 8006d9c:	4a09      	ldr	r2, [pc, #36]	@ (8006dc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d9e:	5cd3      	ldrb	r3, [r2, r3]
 8006da0:	f003 031f 	and.w	r3, r3, #31
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	fa22 f303 	lsr.w	r3, r2, r3
 8006daa:	4a07      	ldr	r2, [pc, #28]	@ (8006dc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006dac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006dae:	4a07      	ldr	r2, [pc, #28]	@ (8006dcc <HAL_RCC_GetHCLKFreq+0x5c>)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006db4:	4b04      	ldr	r3, [pc, #16]	@ (8006dc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006db6:	681b      	ldr	r3, [r3, #0]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	58024400 	.word	0x58024400
 8006dc4:	0801f2c0 	.word	0x0801f2c0
 8006dc8:	24000004 	.word	0x24000004
 8006dcc:	24000000 	.word	0x24000000

08006dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006dd4:	f7ff ffcc 	bl	8006d70 <HAL_RCC_GetHCLKFreq>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	4b06      	ldr	r3, [pc, #24]	@ (8006df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	091b      	lsrs	r3, r3, #4
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	4904      	ldr	r1, [pc, #16]	@ (8006df8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006de6:	5ccb      	ldrb	r3, [r1, r3]
 8006de8:	f003 031f 	and.w	r3, r3, #31
 8006dec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	58024400 	.word	0x58024400
 8006df8:	0801f2c0 	.word	0x0801f2c0

08006dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006e00:	f7ff ffb6 	bl	8006d70 <HAL_RCC_GetHCLKFreq>
 8006e04:	4602      	mov	r2, r0
 8006e06:	4b06      	ldr	r3, [pc, #24]	@ (8006e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	0a1b      	lsrs	r3, r3, #8
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	4904      	ldr	r1, [pc, #16]	@ (8006e24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e12:	5ccb      	ldrb	r3, [r1, r3]
 8006e14:	f003 031f 	and.w	r3, r3, #31
 8006e18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	58024400 	.word	0x58024400
 8006e24:	0801f2c0 	.word	0x0801f2c0

08006e28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	223f      	movs	r2, #63	@ 0x3f
 8006e36:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e38:	4b1a      	ldr	r3, [pc, #104]	@ (8006ea4 <HAL_RCC_GetClockConfig+0x7c>)
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	f003 0207 	and.w	r2, r3, #7
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006e44:	4b17      	ldr	r3, [pc, #92]	@ (8006ea4 <HAL_RCC_GetClockConfig+0x7c>)
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006e50:	4b14      	ldr	r3, [pc, #80]	@ (8006ea4 <HAL_RCC_GetClockConfig+0x7c>)
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	f003 020f 	and.w	r2, r3, #15
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006e5c:	4b11      	ldr	r3, [pc, #68]	@ (8006ea4 <HAL_RCC_GetClockConfig+0x7c>)
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006e68:	4b0e      	ldr	r3, [pc, #56]	@ (8006ea4 <HAL_RCC_GetClockConfig+0x7c>)
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006e74:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea4 <HAL_RCC_GetClockConfig+0x7c>)
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006e80:	4b08      	ldr	r3, [pc, #32]	@ (8006ea4 <HAL_RCC_GetClockConfig+0x7c>)
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e8c:	4b06      	ldr	r3, [pc, #24]	@ (8006ea8 <HAL_RCC_GetClockConfig+0x80>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 020f 	and.w	r2, r3, #15
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	601a      	str	r2, [r3, #0]
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	58024400 	.word	0x58024400
 8006ea8:	52002000 	.word	0x52002000

08006eac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eb0:	b0c6      	sub	sp, #280	@ 0x118
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006ed0:	2500      	movs	r5, #0
 8006ed2:	ea54 0305 	orrs.w	r3, r4, r5
 8006ed6:	d049      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ede:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ee2:	d02f      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006ee4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ee8:	d828      	bhi.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006eea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006eee:	d01a      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006ef0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ef4:	d822      	bhi.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006efa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006efe:	d007      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f00:	e01c      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f02:	4bab      	ldr	r3, [pc, #684]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f06:	4aaa      	ldr	r2, [pc, #680]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f0e:	e01a      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f14:	3308      	adds	r3, #8
 8006f16:	2102      	movs	r1, #2
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f001 fc25 	bl	8008768 <RCCEx_PLL2_Config>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f24:	e00f      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2a:	3328      	adds	r3, #40	@ 0x28
 8006f2c:	2102      	movs	r1, #2
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f001 fccc 	bl	80088cc <RCCEx_PLL3_Config>
 8006f34:	4603      	mov	r3, r0
 8006f36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f3a:	e004      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f42:	e000      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10a      	bne.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f4e:	4b98      	ldr	r3, [pc, #608]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f5c:	4a94      	ldr	r2, [pc, #592]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f5e:	430b      	orrs	r3, r1
 8006f60:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f62:	e003      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006f78:	f04f 0900 	mov.w	r9, #0
 8006f7c:	ea58 0309 	orrs.w	r3, r8, r9
 8006f80:	d047      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f88:	2b04      	cmp	r3, #4
 8006f8a:	d82a      	bhi.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f92:	bf00      	nop
 8006f94:	08006fa9 	.word	0x08006fa9
 8006f98:	08006fb7 	.word	0x08006fb7
 8006f9c:	08006fcd 	.word	0x08006fcd
 8006fa0:	08006feb 	.word	0x08006feb
 8006fa4:	08006feb 	.word	0x08006feb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fa8:	4b81      	ldr	r3, [pc, #516]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fac:	4a80      	ldr	r2, [pc, #512]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006fae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fb4:	e01a      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fba:	3308      	adds	r3, #8
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f001 fbd2 	bl	8008768 <RCCEx_PLL2_Config>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fca:	e00f      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd0:	3328      	adds	r3, #40	@ 0x28
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f001 fc79 	bl	80088cc <RCCEx_PLL3_Config>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fe0:	e004      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006fe8:	e000      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ff4:	4b6e      	ldr	r3, [pc, #440]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ff8:	f023 0107 	bic.w	r1, r3, #7
 8006ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007002:	4a6b      	ldr	r2, [pc, #428]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007004:	430b      	orrs	r3, r1
 8007006:	6513      	str	r3, [r2, #80]	@ 0x50
 8007008:	e003      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800700e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800701e:	f04f 0b00 	mov.w	fp, #0
 8007022:	ea5a 030b 	orrs.w	r3, sl, fp
 8007026:	d05b      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800702c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007030:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007034:	d03b      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007036:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800703a:	d834      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800703c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007040:	d037      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007042:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007046:	d82e      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007048:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800704c:	d033      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800704e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007052:	d828      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007054:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007058:	d01a      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800705a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800705e:	d822      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007060:	2b00      	cmp	r3, #0
 8007062:	d003      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007064:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007068:	d007      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800706a:	e01c      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800706c:	4b50      	ldr	r3, [pc, #320]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800706e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007070:	4a4f      	ldr	r2, [pc, #316]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007076:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007078:	e01e      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800707a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707e:	3308      	adds	r3, #8
 8007080:	2100      	movs	r1, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f001 fb70 	bl	8008768 <RCCEx_PLL2_Config>
 8007088:	4603      	mov	r3, r0
 800708a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800708e:	e013      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007094:	3328      	adds	r3, #40	@ 0x28
 8007096:	2100      	movs	r1, #0
 8007098:	4618      	mov	r0, r3
 800709a:	f001 fc17 	bl	80088cc <RCCEx_PLL3_Config>
 800709e:	4603      	mov	r3, r0
 80070a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070a4:	e008      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070ac:	e004      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80070ae:	bf00      	nop
 80070b0:	e002      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80070b2:	bf00      	nop
 80070b4:	e000      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80070b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10b      	bne.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80070c0:	4b3b      	ldr	r3, [pc, #236]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070c4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80070c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80070d0:	4a37      	ldr	r2, [pc, #220]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070d2:	430b      	orrs	r3, r1
 80070d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80070d6:	e003      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80070e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80070ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80070f0:	2300      	movs	r3, #0
 80070f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80070f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80070fa:	460b      	mov	r3, r1
 80070fc:	4313      	orrs	r3, r2
 80070fe:	d05d      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007104:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007108:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800710c:	d03b      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800710e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007112:	d834      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007114:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007118:	d037      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800711a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800711e:	d82e      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007120:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007124:	d033      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007126:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800712a:	d828      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800712c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007130:	d01a      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007132:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007136:	d822      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800713c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007140:	d007      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007142:	e01c      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007144:	4b1a      	ldr	r3, [pc, #104]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007148:	4a19      	ldr	r2, [pc, #100]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800714a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800714e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007150:	e01e      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007156:	3308      	adds	r3, #8
 8007158:	2100      	movs	r1, #0
 800715a:	4618      	mov	r0, r3
 800715c:	f001 fb04 	bl	8008768 <RCCEx_PLL2_Config>
 8007160:	4603      	mov	r3, r0
 8007162:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007166:	e013      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716c:	3328      	adds	r3, #40	@ 0x28
 800716e:	2100      	movs	r1, #0
 8007170:	4618      	mov	r0, r3
 8007172:	f001 fbab 	bl	80088cc <RCCEx_PLL3_Config>
 8007176:	4603      	mov	r3, r0
 8007178:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800717c:	e008      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007184:	e004      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007186:	bf00      	nop
 8007188:	e002      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800718a:	bf00      	nop
 800718c:	e000      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800718e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007190:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10d      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007198:	4b05      	ldr	r3, [pc, #20]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800719a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800719c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80071a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80071a8:	4a01      	ldr	r2, [pc, #4]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071aa:	430b      	orrs	r3, r1
 80071ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80071ae:	e005      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80071b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80071bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80071c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80071cc:	2300      	movs	r3, #0
 80071ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80071d2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4313      	orrs	r3, r2
 80071da:	d03a      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80071dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071e2:	2b30      	cmp	r3, #48	@ 0x30
 80071e4:	d01f      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80071e6:	2b30      	cmp	r3, #48	@ 0x30
 80071e8:	d819      	bhi.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80071ea:	2b20      	cmp	r3, #32
 80071ec:	d00c      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80071ee:	2b20      	cmp	r3, #32
 80071f0:	d815      	bhi.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d019      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80071f6:	2b10      	cmp	r3, #16
 80071f8:	d111      	bne.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071fa:	4baa      	ldr	r3, [pc, #680]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fe:	4aa9      	ldr	r2, [pc, #676]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007204:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007206:	e011      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720c:	3308      	adds	r3, #8
 800720e:	2102      	movs	r1, #2
 8007210:	4618      	mov	r0, r3
 8007212:	f001 faa9 	bl	8008768 <RCCEx_PLL2_Config>
 8007216:	4603      	mov	r3, r0
 8007218:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800721c:	e006      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007224:	e002      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007226:	bf00      	nop
 8007228:	e000      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800722a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800722c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10a      	bne.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007234:	4b9b      	ldr	r3, [pc, #620]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007238:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800723c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007242:	4a98      	ldr	r2, [pc, #608]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007244:	430b      	orrs	r3, r1
 8007246:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007248:	e003      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800724a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800724e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800725e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007262:	2300      	movs	r3, #0
 8007264:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007268:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800726c:	460b      	mov	r3, r1
 800726e:	4313      	orrs	r3, r2
 8007270:	d051      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007278:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800727c:	d035      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800727e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007282:	d82e      	bhi.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007284:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007288:	d031      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x442>
 800728a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800728e:	d828      	bhi.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007290:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007294:	d01a      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800729a:	d822      	bhi.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800729c:	2b00      	cmp	r3, #0
 800729e:	d003      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80072a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072a4:	d007      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80072a6:	e01c      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072a8:	4b7e      	ldr	r3, [pc, #504]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ac:	4a7d      	ldr	r2, [pc, #500]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072b4:	e01c      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ba:	3308      	adds	r3, #8
 80072bc:	2100      	movs	r1, #0
 80072be:	4618      	mov	r0, r3
 80072c0:	f001 fa52 	bl	8008768 <RCCEx_PLL2_Config>
 80072c4:	4603      	mov	r3, r0
 80072c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072ca:	e011      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d0:	3328      	adds	r3, #40	@ 0x28
 80072d2:	2100      	movs	r1, #0
 80072d4:	4618      	mov	r0, r3
 80072d6:	f001 faf9 	bl	80088cc <RCCEx_PLL3_Config>
 80072da:	4603      	mov	r3, r0
 80072dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072e0:	e006      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072e8:	e002      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80072ea:	bf00      	nop
 80072ec:	e000      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80072ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10a      	bne.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072f8:	4b6a      	ldr	r3, [pc, #424]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007306:	4a67      	ldr	r2, [pc, #412]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007308:	430b      	orrs	r3, r1
 800730a:	6513      	str	r3, [r2, #80]	@ 0x50
 800730c:	e003      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800730e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007312:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007322:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007326:	2300      	movs	r3, #0
 8007328:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800732c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007330:	460b      	mov	r3, r1
 8007332:	4313      	orrs	r3, r2
 8007334:	d053      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800733a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800733c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007340:	d033      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007342:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007346:	d82c      	bhi.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007348:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800734c:	d02f      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x502>
 800734e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007352:	d826      	bhi.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007354:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007358:	d02b      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800735a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800735e:	d820      	bhi.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007360:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007364:	d012      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007366:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800736a:	d81a      	bhi.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800736c:	2b00      	cmp	r3, #0
 800736e:	d022      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007374:	d115      	bne.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737a:	3308      	adds	r3, #8
 800737c:	2101      	movs	r1, #1
 800737e:	4618      	mov	r0, r3
 8007380:	f001 f9f2 	bl	8008768 <RCCEx_PLL2_Config>
 8007384:	4603      	mov	r3, r0
 8007386:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800738a:	e015      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800738c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007390:	3328      	adds	r3, #40	@ 0x28
 8007392:	2101      	movs	r1, #1
 8007394:	4618      	mov	r0, r3
 8007396:	f001 fa99 	bl	80088cc <RCCEx_PLL3_Config>
 800739a:	4603      	mov	r3, r0
 800739c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80073a0:	e00a      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073a8:	e006      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80073aa:	bf00      	nop
 80073ac:	e004      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80073ae:	bf00      	nop
 80073b0:	e002      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80073b2:	bf00      	nop
 80073b4:	e000      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80073b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10a      	bne.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80073c0:	4b38      	ldr	r3, [pc, #224]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80073c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073ce:	4a35      	ldr	r2, [pc, #212]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073d0:	430b      	orrs	r3, r1
 80073d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80073d4:	e003      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80073de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80073ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073ee:	2300      	movs	r3, #0
 80073f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80073f4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80073f8:	460b      	mov	r3, r1
 80073fa:	4313      	orrs	r3, r2
 80073fc:	d058      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80073fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007402:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007406:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800740a:	d033      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800740c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007410:	d82c      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007416:	d02f      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800741c:	d826      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800741e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007422:	d02b      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007424:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007428:	d820      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800742a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800742e:	d012      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007434:	d81a      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d022      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800743a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800743e:	d115      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007444:	3308      	adds	r3, #8
 8007446:	2101      	movs	r1, #1
 8007448:	4618      	mov	r0, r3
 800744a:	f001 f98d 	bl	8008768 <RCCEx_PLL2_Config>
 800744e:	4603      	mov	r3, r0
 8007450:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007454:	e015      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745a:	3328      	adds	r3, #40	@ 0x28
 800745c:	2101      	movs	r1, #1
 800745e:	4618      	mov	r0, r3
 8007460:	f001 fa34 	bl	80088cc <RCCEx_PLL3_Config>
 8007464:	4603      	mov	r3, r0
 8007466:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800746a:	e00a      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007472:	e006      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007474:	bf00      	nop
 8007476:	e004      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007478:	bf00      	nop
 800747a:	e002      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800747c:	bf00      	nop
 800747e:	e000      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007482:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10e      	bne.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800748a:	4b06      	ldr	r3, [pc, #24]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800748c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800748e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007496:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800749a:	4a02      	ldr	r2, [pc, #8]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800749c:	430b      	orrs	r3, r1
 800749e:	6593      	str	r3, [r2, #88]	@ 0x58
 80074a0:	e006      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80074a2:	bf00      	nop
 80074a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80074b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80074bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074c0:	2300      	movs	r3, #0
 80074c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80074c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4313      	orrs	r3, r2
 80074ce:	d037      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80074d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074da:	d00e      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80074dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074e0:	d816      	bhi.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d018      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80074e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074ea:	d111      	bne.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074ec:	4bc4      	ldr	r3, [pc, #784]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f0:	4ac3      	ldr	r2, [pc, #780]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074f8:	e00f      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074fe:	3308      	adds	r3, #8
 8007500:	2101      	movs	r1, #1
 8007502:	4618      	mov	r0, r3
 8007504:	f001 f930 	bl	8008768 <RCCEx_PLL2_Config>
 8007508:	4603      	mov	r3, r0
 800750a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800750e:	e004      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007516:	e000      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800751a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10a      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007522:	4bb7      	ldr	r3, [pc, #732]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007526:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800752a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007530:	4ab3      	ldr	r2, [pc, #716]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007532:	430b      	orrs	r3, r1
 8007534:	6513      	str	r3, [r2, #80]	@ 0x50
 8007536:	e003      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800753c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800754c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007550:	2300      	movs	r3, #0
 8007552:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007556:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800755a:	460b      	mov	r3, r1
 800755c:	4313      	orrs	r3, r2
 800755e:	d039      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007566:	2b03      	cmp	r3, #3
 8007568:	d81c      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800756a:	a201      	add	r2, pc, #4	@ (adr r2, 8007570 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800756c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007570:	080075ad 	.word	0x080075ad
 8007574:	08007581 	.word	0x08007581
 8007578:	0800758f 	.word	0x0800758f
 800757c:	080075ad 	.word	0x080075ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007580:	4b9f      	ldr	r3, [pc, #636]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007584:	4a9e      	ldr	r2, [pc, #632]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800758a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800758c:	e00f      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800758e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007592:	3308      	adds	r3, #8
 8007594:	2102      	movs	r1, #2
 8007596:	4618      	mov	r0, r3
 8007598:	f001 f8e6 	bl	8008768 <RCCEx_PLL2_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80075a2:	e004      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075aa:	e000      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80075ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10a      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80075b6:	4b92      	ldr	r3, [pc, #584]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075ba:	f023 0103 	bic.w	r1, r3, #3
 80075be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075c4:	4a8e      	ldr	r2, [pc, #568]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075c6:	430b      	orrs	r3, r1
 80075c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80075ca:	e003      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075dc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80075e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075e4:	2300      	movs	r3, #0
 80075e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4313      	orrs	r3, r2
 80075f2:	f000 8099 	beq.w	8007728 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075f6:	4b83      	ldr	r3, [pc, #524]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a82      	ldr	r2, [pc, #520]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007600:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007602:	f7fc fa33 	bl	8003a6c <HAL_GetTick>
 8007606:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800760a:	e00b      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800760c:	f7fc fa2e 	bl	8003a6c <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b64      	cmp	r3, #100	@ 0x64
 800761a:	d903      	bls.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007622:	e005      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007624:	4b77      	ldr	r3, [pc, #476]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762c:	2b00      	cmp	r3, #0
 800762e:	d0ed      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007630:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007634:	2b00      	cmp	r3, #0
 8007636:	d173      	bne.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007638:	4b71      	ldr	r3, [pc, #452]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800763a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800763c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007640:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007644:	4053      	eors	r3, r2
 8007646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800764a:	2b00      	cmp	r3, #0
 800764c:	d015      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800764e:	4b6c      	ldr	r3, [pc, #432]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007656:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800765a:	4b69      	ldr	r3, [pc, #420]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800765c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800765e:	4a68      	ldr	r2, [pc, #416]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007664:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007666:	4b66      	ldr	r3, [pc, #408]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800766a:	4a65      	ldr	r2, [pc, #404]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800766c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007670:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007672:	4a63      	ldr	r2, [pc, #396]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007678:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800767a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007686:	d118      	bne.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007688:	f7fc f9f0 	bl	8003a6c <HAL_GetTick>
 800768c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007690:	e00d      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007692:	f7fc f9eb 	bl	8003a6c <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800769c:	1ad2      	subs	r2, r2, r3
 800769e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d903      	bls.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80076ac:	e005      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076ae:	4b54      	ldr	r3, [pc, #336]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d0eb      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80076ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d129      	bne.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80076ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076d2:	d10e      	bne.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80076d4:	4b4a      	ldr	r3, [pc, #296]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80076dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80076e4:	091a      	lsrs	r2, r3, #4
 80076e6:	4b48      	ldr	r3, [pc, #288]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	4a45      	ldr	r2, [pc, #276]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076ec:	430b      	orrs	r3, r1
 80076ee:	6113      	str	r3, [r2, #16]
 80076f0:	e005      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x852>
 80076f2:	4b43      	ldr	r3, [pc, #268]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	4a42      	ldr	r2, [pc, #264]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80076fc:	6113      	str	r3, [r2, #16]
 80076fe:	4b40      	ldr	r3, [pc, #256]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007700:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007706:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800770a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800770e:	4a3c      	ldr	r2, [pc, #240]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007710:	430b      	orrs	r3, r1
 8007712:	6713      	str	r3, [r2, #112]	@ 0x70
 8007714:	e008      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007716:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800771a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800771e:	e003      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007720:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007724:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800772c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007730:	f002 0301 	and.w	r3, r2, #1
 8007734:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007738:	2300      	movs	r3, #0
 800773a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800773e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007742:	460b      	mov	r3, r1
 8007744:	4313      	orrs	r3, r2
 8007746:	f000 808f 	beq.w	8007868 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800774a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800774e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007750:	2b28      	cmp	r3, #40	@ 0x28
 8007752:	d871      	bhi.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007754:	a201      	add	r2, pc, #4	@ (adr r2, 800775c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775a:	bf00      	nop
 800775c:	08007841 	.word	0x08007841
 8007760:	08007839 	.word	0x08007839
 8007764:	08007839 	.word	0x08007839
 8007768:	08007839 	.word	0x08007839
 800776c:	08007839 	.word	0x08007839
 8007770:	08007839 	.word	0x08007839
 8007774:	08007839 	.word	0x08007839
 8007778:	08007839 	.word	0x08007839
 800777c:	0800780d 	.word	0x0800780d
 8007780:	08007839 	.word	0x08007839
 8007784:	08007839 	.word	0x08007839
 8007788:	08007839 	.word	0x08007839
 800778c:	08007839 	.word	0x08007839
 8007790:	08007839 	.word	0x08007839
 8007794:	08007839 	.word	0x08007839
 8007798:	08007839 	.word	0x08007839
 800779c:	08007823 	.word	0x08007823
 80077a0:	08007839 	.word	0x08007839
 80077a4:	08007839 	.word	0x08007839
 80077a8:	08007839 	.word	0x08007839
 80077ac:	08007839 	.word	0x08007839
 80077b0:	08007839 	.word	0x08007839
 80077b4:	08007839 	.word	0x08007839
 80077b8:	08007839 	.word	0x08007839
 80077bc:	08007841 	.word	0x08007841
 80077c0:	08007839 	.word	0x08007839
 80077c4:	08007839 	.word	0x08007839
 80077c8:	08007839 	.word	0x08007839
 80077cc:	08007839 	.word	0x08007839
 80077d0:	08007839 	.word	0x08007839
 80077d4:	08007839 	.word	0x08007839
 80077d8:	08007839 	.word	0x08007839
 80077dc:	08007841 	.word	0x08007841
 80077e0:	08007839 	.word	0x08007839
 80077e4:	08007839 	.word	0x08007839
 80077e8:	08007839 	.word	0x08007839
 80077ec:	08007839 	.word	0x08007839
 80077f0:	08007839 	.word	0x08007839
 80077f4:	08007839 	.word	0x08007839
 80077f8:	08007839 	.word	0x08007839
 80077fc:	08007841 	.word	0x08007841
 8007800:	58024400 	.word	0x58024400
 8007804:	58024800 	.word	0x58024800
 8007808:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800780c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007810:	3308      	adds	r3, #8
 8007812:	2101      	movs	r1, #1
 8007814:	4618      	mov	r0, r3
 8007816:	f000 ffa7 	bl	8008768 <RCCEx_PLL2_Config>
 800781a:	4603      	mov	r3, r0
 800781c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007820:	e00f      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007826:	3328      	adds	r3, #40	@ 0x28
 8007828:	2101      	movs	r1, #1
 800782a:	4618      	mov	r0, r3
 800782c:	f001 f84e 	bl	80088cc <RCCEx_PLL3_Config>
 8007830:	4603      	mov	r3, r0
 8007832:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007836:	e004      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800783e:	e000      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007842:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10a      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800784a:	4bbf      	ldr	r3, [pc, #764]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800784c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800784e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007856:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007858:	4abb      	ldr	r2, [pc, #748]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800785a:	430b      	orrs	r3, r1
 800785c:	6553      	str	r3, [r2, #84]	@ 0x54
 800785e:	e003      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007864:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007870:	f002 0302 	and.w	r3, r2, #2
 8007874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007878:	2300      	movs	r3, #0
 800787a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800787e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007882:	460b      	mov	r3, r1
 8007884:	4313      	orrs	r3, r2
 8007886:	d041      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800788c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800788e:	2b05      	cmp	r3, #5
 8007890:	d824      	bhi.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007892:	a201      	add	r2, pc, #4	@ (adr r2, 8007898 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007898:	080078e5 	.word	0x080078e5
 800789c:	080078b1 	.word	0x080078b1
 80078a0:	080078c7 	.word	0x080078c7
 80078a4:	080078e5 	.word	0x080078e5
 80078a8:	080078e5 	.word	0x080078e5
 80078ac:	080078e5 	.word	0x080078e5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b4:	3308      	adds	r3, #8
 80078b6:	2101      	movs	r1, #1
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 ff55 	bl	8008768 <RCCEx_PLL2_Config>
 80078be:	4603      	mov	r3, r0
 80078c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80078c4:	e00f      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ca:	3328      	adds	r3, #40	@ 0x28
 80078cc:	2101      	movs	r1, #1
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 fffc 	bl	80088cc <RCCEx_PLL3_Config>
 80078d4:	4603      	mov	r3, r0
 80078d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80078da:	e004      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078e2:	e000      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80078e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10a      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80078ee:	4b96      	ldr	r3, [pc, #600]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80078f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f2:	f023 0107 	bic.w	r1, r3, #7
 80078f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078fc:	4a92      	ldr	r2, [pc, #584]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80078fe:	430b      	orrs	r3, r1
 8007900:	6553      	str	r3, [r2, #84]	@ 0x54
 8007902:	e003      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007904:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007908:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800790c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f002 0304 	and.w	r3, r2, #4
 8007918:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800791c:	2300      	movs	r3, #0
 800791e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007922:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007926:	460b      	mov	r3, r1
 8007928:	4313      	orrs	r3, r2
 800792a:	d044      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800792c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007934:	2b05      	cmp	r3, #5
 8007936:	d825      	bhi.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007938:	a201      	add	r2, pc, #4	@ (adr r2, 8007940 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800793a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793e:	bf00      	nop
 8007940:	0800798d 	.word	0x0800798d
 8007944:	08007959 	.word	0x08007959
 8007948:	0800796f 	.word	0x0800796f
 800794c:	0800798d 	.word	0x0800798d
 8007950:	0800798d 	.word	0x0800798d
 8007954:	0800798d 	.word	0x0800798d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795c:	3308      	adds	r3, #8
 800795e:	2101      	movs	r1, #1
 8007960:	4618      	mov	r0, r3
 8007962:	f000 ff01 	bl	8008768 <RCCEx_PLL2_Config>
 8007966:	4603      	mov	r3, r0
 8007968:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800796c:	e00f      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800796e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007972:	3328      	adds	r3, #40	@ 0x28
 8007974:	2101      	movs	r1, #1
 8007976:	4618      	mov	r0, r3
 8007978:	f000 ffa8 	bl	80088cc <RCCEx_PLL3_Config>
 800797c:	4603      	mov	r3, r0
 800797e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007982:	e004      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800798a:	e000      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800798c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800798e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10b      	bne.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007996:	4b6c      	ldr	r3, [pc, #432]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800799a:	f023 0107 	bic.w	r1, r3, #7
 800799e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a6:	4a68      	ldr	r2, [pc, #416]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80079a8:	430b      	orrs	r3, r1
 80079aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80079ac:	e003      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079be:	f002 0320 	and.w	r3, r2, #32
 80079c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079c6:	2300      	movs	r3, #0
 80079c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80079cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4313      	orrs	r3, r2
 80079d4:	d055      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80079d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079e2:	d033      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80079e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079e8:	d82c      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80079ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ee:	d02f      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80079f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079f4:	d826      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80079f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079fa:	d02b      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80079fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a00:	d820      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007a02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a06:	d012      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007a08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a0c:	d81a      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d022      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007a12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a16:	d115      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	2100      	movs	r1, #0
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 fea1 	bl	8008768 <RCCEx_PLL2_Config>
 8007a26:	4603      	mov	r3, r0
 8007a28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a2c:	e015      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a32:	3328      	adds	r3, #40	@ 0x28
 8007a34:	2102      	movs	r1, #2
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 ff48 	bl	80088cc <RCCEx_PLL3_Config>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a42:	e00a      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a4a:	e006      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007a4c:	bf00      	nop
 8007a4e:	e004      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007a50:	bf00      	nop
 8007a52:	e002      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007a54:	bf00      	nop
 8007a56:	e000      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10b      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a62:	4b39      	ldr	r3, [pc, #228]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a66:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a72:	4a35      	ldr	r2, [pc, #212]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a74:	430b      	orrs	r3, r1
 8007a76:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a78:	e003      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007a8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a92:	2300      	movs	r3, #0
 8007a94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a98:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	d058      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007aaa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007aae:	d033      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007ab0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007ab4:	d82c      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aba:	d02f      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007abc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ac0:	d826      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007ac2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ac6:	d02b      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007ac8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007acc:	d820      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007ace:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ad2:	d012      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007ad4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ad8:	d81a      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d022      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007ade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ae2:	d115      	bne.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae8:	3308      	adds	r3, #8
 8007aea:	2100      	movs	r1, #0
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 fe3b 	bl	8008768 <RCCEx_PLL2_Config>
 8007af2:	4603      	mov	r3, r0
 8007af4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007af8:	e015      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007afe:	3328      	adds	r3, #40	@ 0x28
 8007b00:	2102      	movs	r1, #2
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 fee2 	bl	80088cc <RCCEx_PLL3_Config>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007b0e:	e00a      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b16:	e006      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007b18:	bf00      	nop
 8007b1a:	e004      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007b1c:	bf00      	nop
 8007b1e:	e002      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007b20:	bf00      	nop
 8007b22:	e000      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10e      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b2e:	4b06      	ldr	r3, [pc, #24]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b32:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b3e:	4a02      	ldr	r2, [pc, #8]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b40:	430b      	orrs	r3, r1
 8007b42:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b44:	e006      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007b46:	bf00      	nop
 8007b48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007b60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b64:	2300      	movs	r3, #0
 8007b66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4313      	orrs	r3, r2
 8007b72:	d055      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b7c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b80:	d033      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007b82:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b86:	d82c      	bhi.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b8c:	d02f      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007b8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b92:	d826      	bhi.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b94:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b98:	d02b      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007b9a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b9e:	d820      	bhi.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007ba0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ba4:	d012      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007ba6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007baa:	d81a      	bhi.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d022      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007bb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bb4:	d115      	bne.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bba:	3308      	adds	r3, #8
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 fdd2 	bl	8008768 <RCCEx_PLL2_Config>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007bca:	e015      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd0:	3328      	adds	r3, #40	@ 0x28
 8007bd2:	2102      	movs	r1, #2
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 fe79 	bl	80088cc <RCCEx_PLL3_Config>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007be0:	e00a      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007be8:	e006      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007bea:	bf00      	nop
 8007bec:	e004      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007bee:	bf00      	nop
 8007bf0:	e002      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007bf2:	bf00      	nop
 8007bf4:	e000      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007bf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10b      	bne.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007c00:	4ba0      	ldr	r3, [pc, #640]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c04:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c10:	4a9c      	ldr	r2, [pc, #624]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c12:	430b      	orrs	r3, r1
 8007c14:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c16:	e003      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c28:	f002 0308 	and.w	r3, r2, #8
 8007c2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c30:	2300      	movs	r3, #0
 8007c32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007c36:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	d01e      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c4c:	d10c      	bne.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c52:	3328      	adds	r3, #40	@ 0x28
 8007c54:	2102      	movs	r1, #2
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 fe38 	bl	80088cc <RCCEx_PLL3_Config>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d002      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007c68:	4b86      	ldr	r3, [pc, #536]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c6c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c78:	4a82      	ldr	r2, [pc, #520]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c7a:	430b      	orrs	r3, r1
 8007c7c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f002 0310 	and.w	r3, r2, #16
 8007c8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c94:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	d01e      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007caa:	d10c      	bne.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb0:	3328      	adds	r3, #40	@ 0x28
 8007cb2:	2102      	movs	r1, #2
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 fe09 	bl	80088cc <RCCEx_PLL3_Config>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007cc6:	4b6f      	ldr	r3, [pc, #444]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cd6:	4a6b      	ldr	r2, [pc, #428]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007ce8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cea:	2300      	movs	r3, #0
 8007cec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007cee:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	d03e      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d04:	d022      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007d06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d0a:	d81b      	bhi.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d003      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d14:	d00b      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007d16:	e015      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	2100      	movs	r1, #0
 8007d20:	4618      	mov	r0, r3
 8007d22:	f000 fd21 	bl	8008768 <RCCEx_PLL2_Config>
 8007d26:	4603      	mov	r3, r0
 8007d28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d2c:	e00f      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d32:	3328      	adds	r3, #40	@ 0x28
 8007d34:	2102      	movs	r1, #2
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 fdc8 	bl	80088cc <RCCEx_PLL3_Config>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d42:	e004      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d4a:	e000      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10b      	bne.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d56:	4b4b      	ldr	r3, [pc, #300]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d5a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d66:	4a47      	ldr	r2, [pc, #284]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d68:	430b      	orrs	r3, r1
 8007d6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d6c:	e003      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007d82:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d84:	2300      	movs	r3, #0
 8007d86:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d88:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	d03b      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d9e:	d01f      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007da0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007da4:	d818      	bhi.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007daa:	d003      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007dac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007db0:	d007      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007db2:	e011      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007db4:	4b33      	ldr	r3, [pc, #204]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db8:	4a32      	ldr	r2, [pc, #200]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007dba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007dc0:	e00f      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc6:	3328      	adds	r3, #40	@ 0x28
 8007dc8:	2101      	movs	r1, #1
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 fd7e 	bl	80088cc <RCCEx_PLL3_Config>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007dd6:	e004      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007dde:	e000      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007de2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10b      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dea:	4b26      	ldr	r3, [pc, #152]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dfa:	4a22      	ldr	r2, [pc, #136]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007dfc:	430b      	orrs	r3, r1
 8007dfe:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e00:	e003      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e12:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007e16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e18:	2300      	movs	r3, #0
 8007e1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e1c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007e20:	460b      	mov	r3, r1
 8007e22:	4313      	orrs	r3, r2
 8007e24:	d034      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d003      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e34:	d007      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007e36:	e011      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e38:	4b12      	ldr	r3, [pc, #72]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e3c:	4a11      	ldr	r2, [pc, #68]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e44:	e00e      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	2102      	movs	r1, #2
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 fc8a 	bl	8008768 <RCCEx_PLL2_Config>
 8007e54:	4603      	mov	r3, r0
 8007e56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e5a:	e003      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10d      	bne.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e6c:	4b05      	ldr	r3, [pc, #20]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e70:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e7a:	4a02      	ldr	r2, [pc, #8]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e7c:	430b      	orrs	r3, r1
 8007e7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e80:	e006      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007e82:	bf00      	nop
 8007e84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e98:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007e9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ea2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	d00c      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb0:	3328      	adds	r3, #40	@ 0x28
 8007eb2:	2102      	movs	r1, #2
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 fd09 	bl	80088cc <RCCEx_PLL3_Config>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ece:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007ed2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ed8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007edc:	460b      	mov	r3, r1
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	d036      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ee8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007eec:	d018      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007eee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ef2:	d811      	bhi.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ef8:	d014      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007efa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007efe:	d80b      	bhi.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d011      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f08:	d106      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f0a:	4bb7      	ldr	r3, [pc, #732]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0e:	4ab6      	ldr	r2, [pc, #728]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007f16:	e008      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f1e:	e004      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007f20:	bf00      	nop
 8007f22:	e002      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007f24:	bf00      	nop
 8007f26:	e000      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10a      	bne.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f32:	4bad      	ldr	r3, [pc, #692]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f40:	4aa9      	ldr	r2, [pc, #676]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f42:	430b      	orrs	r3, r1
 8007f44:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f46:	e003      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007f5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f5e:	2300      	movs	r3, #0
 8007f60:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007f66:	460b      	mov	r3, r1
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	d009      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f6c:	4b9e      	ldr	r3, [pc, #632]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f7a:	4a9b      	ldr	r2, [pc, #620]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f7c:	430b      	orrs	r3, r1
 8007f7e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f8e:	2300      	movs	r3, #0
 8007f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f92:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007f96:	460b      	mov	r3, r1
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	d009      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f9c:	4b92      	ldr	r3, [pc, #584]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fa0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007faa:	4a8f      	ldr	r2, [pc, #572]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fac:	430b      	orrs	r3, r1
 8007fae:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007fbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fc2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	d00e      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007fcc:	4b86      	ldr	r3, [pc, #536]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	4a85      	ldr	r2, [pc, #532]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fd2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007fd6:	6113      	str	r3, [r2, #16]
 8007fd8:	4b83      	ldr	r3, [pc, #524]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fda:	6919      	ldr	r1, [r3, #16]
 8007fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007fe4:	4a80      	ldr	r2, [pc, #512]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fe6:	430b      	orrs	r3, r1
 8007fe8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ffc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008000:	460b      	mov	r3, r1
 8008002:	4313      	orrs	r3, r2
 8008004:	d009      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008006:	4b78      	ldr	r3, [pc, #480]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800800a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800800e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008014:	4a74      	ldr	r2, [pc, #464]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008016:	430b      	orrs	r3, r1
 8008018:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800801a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008022:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008026:	633b      	str	r3, [r7, #48]	@ 0x30
 8008028:	2300      	movs	r3, #0
 800802a:	637b      	str	r3, [r7, #52]	@ 0x34
 800802c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008030:	460b      	mov	r3, r1
 8008032:	4313      	orrs	r3, r2
 8008034:	d00a      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008036:	4b6c      	ldr	r3, [pc, #432]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800803a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800803e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008046:	4a68      	ldr	r2, [pc, #416]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008048:	430b      	orrs	r3, r1
 800804a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800804c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008054:	2100      	movs	r1, #0
 8008056:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800805e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008062:	460b      	mov	r3, r1
 8008064:	4313      	orrs	r3, r2
 8008066:	d011      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800806c:	3308      	adds	r3, #8
 800806e:	2100      	movs	r1, #0
 8008070:	4618      	mov	r0, r3
 8008072:	f000 fb79 	bl	8008768 <RCCEx_PLL2_Config>
 8008076:	4603      	mov	r3, r0
 8008078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800807c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008088:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800808c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	2100      	movs	r1, #0
 8008096:	6239      	str	r1, [r7, #32]
 8008098:	f003 0302 	and.w	r3, r3, #2
 800809c:	627b      	str	r3, [r7, #36]	@ 0x24
 800809e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80080a2:	460b      	mov	r3, r1
 80080a4:	4313      	orrs	r3, r2
 80080a6:	d011      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ac:	3308      	adds	r3, #8
 80080ae:	2101      	movs	r1, #1
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 fb59 	bl	8008768 <RCCEx_PLL2_Config>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80080bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80080cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d4:	2100      	movs	r1, #0
 80080d6:	61b9      	str	r1, [r7, #24]
 80080d8:	f003 0304 	and.w	r3, r3, #4
 80080dc:	61fb      	str	r3, [r7, #28]
 80080de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80080e2:	460b      	mov	r3, r1
 80080e4:	4313      	orrs	r3, r2
 80080e6:	d011      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ec:	3308      	adds	r3, #8
 80080ee:	2102      	movs	r1, #2
 80080f0:	4618      	mov	r0, r3
 80080f2:	f000 fb39 	bl	8008768 <RCCEx_PLL2_Config>
 80080f6:	4603      	mov	r3, r0
 80080f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80080fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008100:	2b00      	cmp	r3, #0
 8008102:	d003      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008104:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008108:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800810c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	2100      	movs	r1, #0
 8008116:	6139      	str	r1, [r7, #16]
 8008118:	f003 0308 	and.w	r3, r3, #8
 800811c:	617b      	str	r3, [r7, #20]
 800811e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008122:	460b      	mov	r3, r1
 8008124:	4313      	orrs	r3, r2
 8008126:	d011      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800812c:	3328      	adds	r3, #40	@ 0x28
 800812e:	2100      	movs	r1, #0
 8008130:	4618      	mov	r0, r3
 8008132:	f000 fbcb 	bl	80088cc <RCCEx_PLL3_Config>
 8008136:	4603      	mov	r3, r0
 8008138:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800813c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008144:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008148:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800814c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	2100      	movs	r1, #0
 8008156:	60b9      	str	r1, [r7, #8]
 8008158:	f003 0310 	and.w	r3, r3, #16
 800815c:	60fb      	str	r3, [r7, #12]
 800815e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008162:	460b      	mov	r3, r1
 8008164:	4313      	orrs	r3, r2
 8008166:	d011      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800816c:	3328      	adds	r3, #40	@ 0x28
 800816e:	2101      	movs	r1, #1
 8008170:	4618      	mov	r0, r3
 8008172:	f000 fbab 	bl	80088cc <RCCEx_PLL3_Config>
 8008176:	4603      	mov	r3, r0
 8008178:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800817c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008180:	2b00      	cmp	r3, #0
 8008182:	d003      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008184:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008188:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800818c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008194:	2100      	movs	r1, #0
 8008196:	6039      	str	r1, [r7, #0]
 8008198:	f003 0320 	and.w	r3, r3, #32
 800819c:	607b      	str	r3, [r7, #4]
 800819e:	e9d7 1200 	ldrd	r1, r2, [r7]
 80081a2:	460b      	mov	r3, r1
 80081a4:	4313      	orrs	r3, r2
 80081a6:	d011      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ac:	3328      	adds	r3, #40	@ 0x28
 80081ae:	2102      	movs	r1, #2
 80081b0:	4618      	mov	r0, r3
 80081b2:	f000 fb8b 	bl	80088cc <RCCEx_PLL3_Config>
 80081b6:	4603      	mov	r3, r0
 80081b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80081bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80081cc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	e000      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
}
 80081da:	4618      	mov	r0, r3
 80081dc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80081e0:	46bd      	mov	sp, r7
 80081e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081e6:	bf00      	nop
 80081e8:	58024400 	.word	0x58024400

080081ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80081f0:	f7fe fdbe 	bl	8006d70 <HAL_RCC_GetHCLKFreq>
 80081f4:	4602      	mov	r2, r0
 80081f6:	4b06      	ldr	r3, [pc, #24]	@ (8008210 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	091b      	lsrs	r3, r3, #4
 80081fc:	f003 0307 	and.w	r3, r3, #7
 8008200:	4904      	ldr	r1, [pc, #16]	@ (8008214 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008202:	5ccb      	ldrb	r3, [r1, r3]
 8008204:	f003 031f 	and.w	r3, r3, #31
 8008208:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800820c:	4618      	mov	r0, r3
 800820e:	bd80      	pop	{r7, pc}
 8008210:	58024400 	.word	0x58024400
 8008214:	0801f2c0 	.word	0x0801f2c0

08008218 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008218:	b480      	push	{r7}
 800821a:	b089      	sub	sp, #36	@ 0x24
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008220:	4ba1      	ldr	r3, [pc, #644]	@ (80084a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008224:	f003 0303 	and.w	r3, r3, #3
 8008228:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800822a:	4b9f      	ldr	r3, [pc, #636]	@ (80084a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800822c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822e:	0b1b      	lsrs	r3, r3, #12
 8008230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008234:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008236:	4b9c      	ldr	r3, [pc, #624]	@ (80084a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823a:	091b      	lsrs	r3, r3, #4
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008242:	4b99      	ldr	r3, [pc, #612]	@ (80084a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008246:	08db      	lsrs	r3, r3, #3
 8008248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	fb02 f303 	mul.w	r3, r2, r3
 8008252:	ee07 3a90 	vmov	s15, r3
 8008256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 8111 	beq.w	8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	2b02      	cmp	r3, #2
 800826a:	f000 8083 	beq.w	8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	2b02      	cmp	r3, #2
 8008272:	f200 80a1 	bhi.w	80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d003      	beq.n	8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d056      	beq.n	8008330 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008282:	e099      	b.n	80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008284:	4b88      	ldr	r3, [pc, #544]	@ (80084a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0320 	and.w	r3, r3, #32
 800828c:	2b00      	cmp	r3, #0
 800828e:	d02d      	beq.n	80082ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008290:	4b85      	ldr	r3, [pc, #532]	@ (80084a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	08db      	lsrs	r3, r3, #3
 8008296:	f003 0303 	and.w	r3, r3, #3
 800829a:	4a84      	ldr	r2, [pc, #528]	@ (80084ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800829c:	fa22 f303 	lsr.w	r3, r2, r3
 80082a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	ee07 3a90 	vmov	s15, r3
 80082a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	ee07 3a90 	vmov	s15, r3
 80082b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ba:	4b7b      	ldr	r3, [pc, #492]	@ (80084a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c2:	ee07 3a90 	vmov	s15, r3
 80082c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80084b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80082ea:	e087      	b.n	80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	ee07 3a90 	vmov	s15, r3
 80082f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80082fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082fe:	4b6a      	ldr	r3, [pc, #424]	@ (80084a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800830e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008312:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80084b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800831a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800831e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800832a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800832e:	e065      	b.n	80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800833e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008342:	4b59      	ldr	r3, [pc, #356]	@ (80084a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834a:	ee07 3a90 	vmov	s15, r3
 800834e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008352:	ed97 6a03 	vldr	s12, [r7, #12]
 8008356:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80084b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800835a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800835e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800836a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008372:	e043      	b.n	80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008386:	4b48      	ldr	r3, [pc, #288]	@ (80084a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008396:	ed97 6a03 	vldr	s12, [r7, #12]
 800839a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80084b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800839e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083b6:	e021      	b.n	80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	ee07 3a90 	vmov	s15, r3
 80083be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ca:	4b37      	ldr	r3, [pc, #220]	@ (80084a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d2:	ee07 3a90 	vmov	s15, r3
 80083d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083da:	ed97 6a03 	vldr	s12, [r7, #12]
 80083de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80084b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80083fc:	4b2a      	ldr	r3, [pc, #168]	@ (80084a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008400:	0a5b      	lsrs	r3, r3, #9
 8008402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008406:	ee07 3a90 	vmov	s15, r3
 800840a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008412:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008416:	edd7 6a07 	vldr	s13, [r7, #28]
 800841a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800841e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008422:	ee17 2a90 	vmov	r2, s15
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800842a:	4b1f      	ldr	r3, [pc, #124]	@ (80084a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800842c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800842e:	0c1b      	lsrs	r3, r3, #16
 8008430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008434:	ee07 3a90 	vmov	s15, r3
 8008438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008440:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008444:	edd7 6a07 	vldr	s13, [r7, #28]
 8008448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800844c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008450:	ee17 2a90 	vmov	r2, s15
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008458:	4b13      	ldr	r3, [pc, #76]	@ (80084a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800845a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800845c:	0e1b      	lsrs	r3, r3, #24
 800845e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008462:	ee07 3a90 	vmov	s15, r3
 8008466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800846e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008472:	edd7 6a07 	vldr	s13, [r7, #28]
 8008476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800847a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800847e:	ee17 2a90 	vmov	r2, s15
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008486:	e008      	b.n	800849a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	609a      	str	r2, [r3, #8]
}
 800849a:	bf00      	nop
 800849c:	3724      	adds	r7, #36	@ 0x24
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	58024400 	.word	0x58024400
 80084ac:	03d09000 	.word	0x03d09000
 80084b0:	46000000 	.word	0x46000000
 80084b4:	4c742400 	.word	0x4c742400
 80084b8:	4a742400 	.word	0x4a742400
 80084bc:	4c371b00 	.word	0x4c371b00

080084c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b089      	sub	sp, #36	@ 0x24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084c8:	4ba1      	ldr	r3, [pc, #644]	@ (8008750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084cc:	f003 0303 	and.w	r3, r3, #3
 80084d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80084d2:	4b9f      	ldr	r3, [pc, #636]	@ (8008750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d6:	0d1b      	lsrs	r3, r3, #20
 80084d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80084de:	4b9c      	ldr	r3, [pc, #624]	@ (8008750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e2:	0a1b      	lsrs	r3, r3, #8
 80084e4:	f003 0301 	and.w	r3, r3, #1
 80084e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80084ea:	4b99      	ldr	r3, [pc, #612]	@ (8008750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084ee:	08db      	lsrs	r3, r3, #3
 80084f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	fb02 f303 	mul.w	r3, r2, r3
 80084fa:	ee07 3a90 	vmov	s15, r3
 80084fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008502:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 8111 	beq.w	8008730 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	2b02      	cmp	r3, #2
 8008512:	f000 8083 	beq.w	800861c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	2b02      	cmp	r3, #2
 800851a:	f200 80a1 	bhi.w	8008660 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d056      	beq.n	80085d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800852a:	e099      	b.n	8008660 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800852c:	4b88      	ldr	r3, [pc, #544]	@ (8008750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0320 	and.w	r3, r3, #32
 8008534:	2b00      	cmp	r3, #0
 8008536:	d02d      	beq.n	8008594 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008538:	4b85      	ldr	r3, [pc, #532]	@ (8008750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	08db      	lsrs	r3, r3, #3
 800853e:	f003 0303 	and.w	r3, r3, #3
 8008542:	4a84      	ldr	r2, [pc, #528]	@ (8008754 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008544:	fa22 f303 	lsr.w	r3, r2, r3
 8008548:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	ee07 3a90 	vmov	s15, r3
 8008550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	ee07 3a90 	vmov	s15, r3
 800855a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008562:	4b7b      	ldr	r3, [pc, #492]	@ (8008750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800856a:	ee07 3a90 	vmov	s15, r3
 800856e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008572:	ed97 6a03 	vldr	s12, [r7, #12]
 8008576:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008758 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800857a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800857e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800858a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008592:	e087      	b.n	80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	ee07 3a90 	vmov	s15, r3
 800859a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800859e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800875c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80085a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a6:	4b6a      	ldr	r3, [pc, #424]	@ (8008750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ae:	ee07 3a90 	vmov	s15, r3
 80085b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008758 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085d6:	e065      	b.n	80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	ee07 3a90 	vmov	s15, r3
 80085de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80085e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ea:	4b59      	ldr	r3, [pc, #356]	@ (8008750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f2:	ee07 3a90 	vmov	s15, r3
 80085f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80085fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008758 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800860a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800860e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800861a:	e043      	b.n	80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	ee07 3a90 	vmov	s15, r3
 8008622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008626:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800862a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800862e:	4b48      	ldr	r3, [pc, #288]	@ (8008750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008636:	ee07 3a90 	vmov	s15, r3
 800863a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008642:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008758 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800864a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800864e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800865a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800865e:	e021      	b.n	80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	ee07 3a90 	vmov	s15, r3
 8008666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800866a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800866e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008672:	4b37      	ldr	r3, [pc, #220]	@ (8008750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800867a:	ee07 3a90 	vmov	s15, r3
 800867e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008682:	ed97 6a03 	vldr	s12, [r7, #12]
 8008686:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008758 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800868a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800868e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800869a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80086a4:	4b2a      	ldr	r3, [pc, #168]	@ (8008750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a8:	0a5b      	lsrs	r3, r3, #9
 80086aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086be:	edd7 6a07 	vldr	s13, [r7, #28]
 80086c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ca:	ee17 2a90 	vmov	r2, s15
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80086d2:	4b1f      	ldr	r3, [pc, #124]	@ (8008750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d6:	0c1b      	lsrs	r3, r3, #16
 80086d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086dc:	ee07 3a90 	vmov	s15, r3
 80086e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80086f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086f8:	ee17 2a90 	vmov	r2, s15
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008700:	4b13      	ldr	r3, [pc, #76]	@ (8008750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008704:	0e1b      	lsrs	r3, r3, #24
 8008706:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800870a:	ee07 3a90 	vmov	s15, r3
 800870e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008712:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008716:	ee37 7a87 	vadd.f32	s14, s15, s14
 800871a:	edd7 6a07 	vldr	s13, [r7, #28]
 800871e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008726:	ee17 2a90 	vmov	r2, s15
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800872e:	e008      	b.n	8008742 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	609a      	str	r2, [r3, #8]
}
 8008742:	bf00      	nop
 8008744:	3724      	adds	r7, #36	@ 0x24
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	58024400 	.word	0x58024400
 8008754:	03d09000 	.word	0x03d09000
 8008758:	46000000 	.word	0x46000000
 800875c:	4c742400 	.word	0x4c742400
 8008760:	4a742400 	.word	0x4a742400
 8008764:	4c371b00 	.word	0x4c371b00

08008768 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008776:	4b53      	ldr	r3, [pc, #332]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 8008778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800877a:	f003 0303 	and.w	r3, r3, #3
 800877e:	2b03      	cmp	r3, #3
 8008780:	d101      	bne.n	8008786 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e099      	b.n	80088ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008786:	4b4f      	ldr	r3, [pc, #316]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a4e      	ldr	r2, [pc, #312]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 800878c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008792:	f7fb f96b 	bl	8003a6c <HAL_GetTick>
 8008796:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008798:	e008      	b.n	80087ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800879a:	f7fb f967 	bl	8003a6c <HAL_GetTick>
 800879e:	4602      	mov	r2, r0
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d901      	bls.n	80087ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80087a8:	2303      	movs	r3, #3
 80087aa:	e086      	b.n	80088ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087ac:	4b45      	ldr	r3, [pc, #276]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1f0      	bne.n	800879a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80087b8:	4b42      	ldr	r3, [pc, #264]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 80087ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087bc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	031b      	lsls	r3, r3, #12
 80087c6:	493f      	ldr	r1, [pc, #252]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 80087c8:	4313      	orrs	r3, r2
 80087ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	3b01      	subs	r3, #1
 80087d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	3b01      	subs	r3, #1
 80087dc:	025b      	lsls	r3, r3, #9
 80087de:	b29b      	uxth	r3, r3
 80087e0:	431a      	orrs	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	041b      	lsls	r3, r3, #16
 80087ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80087ee:	431a      	orrs	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	3b01      	subs	r3, #1
 80087f6:	061b      	lsls	r3, r3, #24
 80087f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80087fc:	4931      	ldr	r1, [pc, #196]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 80087fe:	4313      	orrs	r3, r2
 8008800:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008802:	4b30      	ldr	r3, [pc, #192]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 8008804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008806:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	492d      	ldr	r1, [pc, #180]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 8008810:	4313      	orrs	r3, r2
 8008812:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008814:	4b2b      	ldr	r3, [pc, #172]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 8008816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008818:	f023 0220 	bic.w	r2, r3, #32
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	4928      	ldr	r1, [pc, #160]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 8008822:	4313      	orrs	r3, r2
 8008824:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008826:	4b27      	ldr	r3, [pc, #156]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 8008828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800882a:	4a26      	ldr	r2, [pc, #152]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 800882c:	f023 0310 	bic.w	r3, r3, #16
 8008830:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008832:	4b24      	ldr	r3, [pc, #144]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 8008834:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008836:	4b24      	ldr	r3, [pc, #144]	@ (80088c8 <RCCEx_PLL2_Config+0x160>)
 8008838:	4013      	ands	r3, r2
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	69d2      	ldr	r2, [r2, #28]
 800883e:	00d2      	lsls	r2, r2, #3
 8008840:	4920      	ldr	r1, [pc, #128]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 8008842:	4313      	orrs	r3, r2
 8008844:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008846:	4b1f      	ldr	r3, [pc, #124]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 8008848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884a:	4a1e      	ldr	r2, [pc, #120]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 800884c:	f043 0310 	orr.w	r3, r3, #16
 8008850:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d106      	bne.n	8008866 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008858:	4b1a      	ldr	r3, [pc, #104]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 800885a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885c:	4a19      	ldr	r2, [pc, #100]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 800885e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008862:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008864:	e00f      	b.n	8008886 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d106      	bne.n	800887a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800886c:	4b15      	ldr	r3, [pc, #84]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 800886e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008870:	4a14      	ldr	r2, [pc, #80]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 8008872:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008876:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008878:	e005      	b.n	8008886 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800887a:	4b12      	ldr	r3, [pc, #72]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 800887c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887e:	4a11      	ldr	r2, [pc, #68]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 8008880:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008884:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008886:	4b0f      	ldr	r3, [pc, #60]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a0e      	ldr	r2, [pc, #56]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 800888c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008892:	f7fb f8eb 	bl	8003a6c <HAL_GetTick>
 8008896:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008898:	e008      	b.n	80088ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800889a:	f7fb f8e7 	bl	8003a6c <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d901      	bls.n	80088ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e006      	b.n	80088ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088ac:	4b05      	ldr	r3, [pc, #20]	@ (80088c4 <RCCEx_PLL2_Config+0x15c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d0f0      	beq.n	800889a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	58024400 	.word	0x58024400
 80088c8:	ffff0007 	.word	0xffff0007

080088cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088da:	4b53      	ldr	r3, [pc, #332]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 80088dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088de:	f003 0303 	and.w	r3, r3, #3
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	d101      	bne.n	80088ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e099      	b.n	8008a1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80088ea:	4b4f      	ldr	r3, [pc, #316]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a4e      	ldr	r2, [pc, #312]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 80088f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088f6:	f7fb f8b9 	bl	8003a6c <HAL_GetTick>
 80088fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088fc:	e008      	b.n	8008910 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80088fe:	f7fb f8b5 	bl	8003a6c <HAL_GetTick>
 8008902:	4602      	mov	r2, r0
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	2b02      	cmp	r3, #2
 800890a:	d901      	bls.n	8008910 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	e086      	b.n	8008a1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008910:	4b45      	ldr	r3, [pc, #276]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1f0      	bne.n	80088fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800891c:	4b42      	ldr	r3, [pc, #264]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 800891e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008920:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	051b      	lsls	r3, r3, #20
 800892a:	493f      	ldr	r1, [pc, #252]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 800892c:	4313      	orrs	r3, r2
 800892e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	3b01      	subs	r3, #1
 8008936:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	3b01      	subs	r3, #1
 8008940:	025b      	lsls	r3, r3, #9
 8008942:	b29b      	uxth	r3, r3
 8008944:	431a      	orrs	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	3b01      	subs	r3, #1
 800894c:	041b      	lsls	r3, r3, #16
 800894e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008952:	431a      	orrs	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	3b01      	subs	r3, #1
 800895a:	061b      	lsls	r3, r3, #24
 800895c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008960:	4931      	ldr	r1, [pc, #196]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 8008962:	4313      	orrs	r3, r2
 8008964:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008966:	4b30      	ldr	r3, [pc, #192]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 8008968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	492d      	ldr	r1, [pc, #180]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 8008974:	4313      	orrs	r3, r2
 8008976:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008978:	4b2b      	ldr	r3, [pc, #172]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 800897a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800897c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	4928      	ldr	r1, [pc, #160]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 8008986:	4313      	orrs	r3, r2
 8008988:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800898a:	4b27      	ldr	r3, [pc, #156]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 800898c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898e:	4a26      	ldr	r2, [pc, #152]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 8008990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008994:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008996:	4b24      	ldr	r3, [pc, #144]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 8008998:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800899a:	4b24      	ldr	r3, [pc, #144]	@ (8008a2c <RCCEx_PLL3_Config+0x160>)
 800899c:	4013      	ands	r3, r2
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	69d2      	ldr	r2, [r2, #28]
 80089a2:	00d2      	lsls	r2, r2, #3
 80089a4:	4920      	ldr	r1, [pc, #128]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80089aa:	4b1f      	ldr	r3, [pc, #124]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 80089ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 80089b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d106      	bne.n	80089ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80089bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 80089be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c0:	4a19      	ldr	r2, [pc, #100]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 80089c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80089c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80089c8:	e00f      	b.n	80089ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d106      	bne.n	80089de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80089d0:	4b15      	ldr	r3, [pc, #84]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 80089d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d4:	4a14      	ldr	r2, [pc, #80]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 80089d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80089da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80089dc:	e005      	b.n	80089ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80089de:	4b12      	ldr	r3, [pc, #72]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 80089e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e2:	4a11      	ldr	r2, [pc, #68]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 80089e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80089e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80089ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a0e      	ldr	r2, [pc, #56]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 80089f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089f6:	f7fb f839 	bl	8003a6c <HAL_GetTick>
 80089fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089fc:	e008      	b.n	8008a10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80089fe:	f7fb f835 	bl	8003a6c <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d901      	bls.n	8008a10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e006      	b.n	8008a1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a10:	4b05      	ldr	r3, [pc, #20]	@ (8008a28 <RCCEx_PLL3_Config+0x15c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d0f0      	beq.n	80089fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	58024400 	.word	0x58024400
 8008a2c:	ffff0007 	.word	0xffff0007

08008a30 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d071      	beq.n	8008b26 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d106      	bne.n	8008a5c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7fa f9cc 	bl	8002df4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2202      	movs	r2, #2
 8008a60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	f003 0310 	and.w	r3, r3, #16
 8008a6e:	2b10      	cmp	r3, #16
 8008a70:	d050      	beq.n	8008b14 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	22ca      	movs	r2, #202	@ 0xca
 8008a78:	625a      	str	r2, [r3, #36]	@ 0x24
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2253      	movs	r2, #83	@ 0x53
 8008a80:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f87a 	bl	8008b7c <RTC_EnterInitMode>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d124      	bne.n	8008adc <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6899      	ldr	r1, [r3, #8]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	4b24      	ldr	r3, [pc, #144]	@ (8008b30 <HAL_RTC_Init+0x100>)
 8008a9e:	400b      	ands	r3, r1
 8008aa0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6899      	ldr	r1, [r3, #8]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685a      	ldr	r2, [r3, #4]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	431a      	orrs	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	430a      	orrs	r2, r1
 8008abe:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	0419      	lsls	r1, r3, #16
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68da      	ldr	r2, [r3, #12]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f886 	bl	8008be4 <RTC_ExitInitMode>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d113      	bne.n	8008b0a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f022 0203 	bic.w	r2, r2, #3
 8008af0:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	69da      	ldr	r2, [r3, #28]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	431a      	orrs	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	22ff      	movs	r2, #255	@ 0xff
 8008b10:	625a      	str	r2, [r3, #36]	@ 0x24
 8008b12:	e001      	b.n	8008b18 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d103      	bne.n	8008b26 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8008b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	ff8fffbf 	.word	0xff8fffbf

08008b34 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a0d      	ldr	r2, [pc, #52]	@ (8008b78 <HAL_RTC_WaitForSynchro+0x44>)
 8008b42:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8008b44:	f7fa ff92 	bl	8003a6c <HAL_GetTick>
 8008b48:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008b4a:	e009      	b.n	8008b60 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008b4c:	f7fa ff8e 	bl	8003a6c <HAL_GetTick>
 8008b50:	4602      	mov	r2, r0
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008b5a:	d901      	bls.n	8008b60 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e007      	b.n	8008b70 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	f003 0320 	and.w	r3, r3, #32
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0ee      	beq.n	8008b4c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	0003ff5f 	.word	0x0003ff5f

08008b7c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d120      	bne.n	8008bd8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b9e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008ba0:	f7fa ff64 	bl	8003a6c <HAL_GetTick>
 8008ba4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008ba6:	e00d      	b.n	8008bc4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008ba8:	f7fa ff60 	bl	8003a6c <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008bb6:	d905      	bls.n	8008bc4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2203      	movs	r2, #3
 8008bc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d102      	bne.n	8008bd8 <RTC_EnterInitMode+0x5c>
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	2b03      	cmp	r3, #3
 8008bd6:	d1e7      	bne.n	8008ba8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8008c5c <RTC_ExitInitMode+0x78>)
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	4a19      	ldr	r2, [pc, #100]	@ (8008c5c <RTC_ExitInitMode+0x78>)
 8008bf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bfa:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008bfc:	4b17      	ldr	r3, [pc, #92]	@ (8008c5c <RTC_ExitInitMode+0x78>)
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	f003 0320 	and.w	r3, r3, #32
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d10c      	bne.n	8008c22 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7ff ff93 	bl	8008b34 <HAL_RTC_WaitForSynchro>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d01e      	beq.n	8008c52 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2203      	movs	r2, #3
 8008c18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	73fb      	strb	r3, [r7, #15]
 8008c20:	e017      	b.n	8008c52 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008c22:	4b0e      	ldr	r3, [pc, #56]	@ (8008c5c <RTC_ExitInitMode+0x78>)
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	4a0d      	ldr	r2, [pc, #52]	@ (8008c5c <RTC_ExitInitMode+0x78>)
 8008c28:	f023 0320 	bic.w	r3, r3, #32
 8008c2c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7ff ff80 	bl	8008b34 <HAL_RTC_WaitForSynchro>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d005      	beq.n	8008c46 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2203      	movs	r2, #3
 8008c3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008c46:	4b05      	ldr	r3, [pc, #20]	@ (8008c5c <RTC_ExitInitMode+0x78>)
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	4a04      	ldr	r2, [pc, #16]	@ (8008c5c <RTC_ExitInitMode+0x78>)
 8008c4c:	f043 0320 	orr.w	r3, r3, #32
 8008c50:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	58004000 	.word	0x58004000

08008c60 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e10f      	b.n	8008e92 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a87      	ldr	r2, [pc, #540]	@ (8008e9c <HAL_SPI_Init+0x23c>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d00f      	beq.n	8008ca2 <HAL_SPI_Init+0x42>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a86      	ldr	r2, [pc, #536]	@ (8008ea0 <HAL_SPI_Init+0x240>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d00a      	beq.n	8008ca2 <HAL_SPI_Init+0x42>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a84      	ldr	r2, [pc, #528]	@ (8008ea4 <HAL_SPI_Init+0x244>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d005      	beq.n	8008ca2 <HAL_SPI_Init+0x42>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	2b0f      	cmp	r3, #15
 8008c9c:	d901      	bls.n	8008ca2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e0f7      	b.n	8008e92 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f001 f968 	bl	8009f78 <SPI_GetPacketSize>
 8008ca8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a7b      	ldr	r2, [pc, #492]	@ (8008e9c <HAL_SPI_Init+0x23c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d00c      	beq.n	8008cce <HAL_SPI_Init+0x6e>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a79      	ldr	r2, [pc, #484]	@ (8008ea0 <HAL_SPI_Init+0x240>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d007      	beq.n	8008cce <HAL_SPI_Init+0x6e>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a78      	ldr	r2, [pc, #480]	@ (8008ea4 <HAL_SPI_Init+0x244>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d002      	beq.n	8008cce <HAL_SPI_Init+0x6e>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2b08      	cmp	r3, #8
 8008ccc:	d811      	bhi.n	8008cf2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008cd2:	4a72      	ldr	r2, [pc, #456]	@ (8008e9c <HAL_SPI_Init+0x23c>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d009      	beq.n	8008cec <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a70      	ldr	r2, [pc, #448]	@ (8008ea0 <HAL_SPI_Init+0x240>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d004      	beq.n	8008cec <HAL_SPI_Init+0x8c>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a6f      	ldr	r2, [pc, #444]	@ (8008ea4 <HAL_SPI_Init+0x244>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d104      	bne.n	8008cf6 <HAL_SPI_Init+0x96>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b10      	cmp	r3, #16
 8008cf0:	d901      	bls.n	8008cf6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e0cd      	b.n	8008e92 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d106      	bne.n	8008d10 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7fa f8a4 	bl	8002e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2202      	movs	r2, #2
 8008d14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f022 0201 	bic.w	r2, r2, #1
 8008d26:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008d32:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d3c:	d119      	bne.n	8008d72 <HAL_SPI_Init+0x112>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d46:	d103      	bne.n	8008d50 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d008      	beq.n	8008d62 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10c      	bne.n	8008d72 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008d5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d60:	d107      	bne.n	8008d72 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008d70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00f      	beq.n	8008d9e <HAL_SPI_Init+0x13e>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	2b06      	cmp	r3, #6
 8008d84:	d90b      	bls.n	8008d9e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	601a      	str	r2, [r3, #0]
 8008d9c:	e007      	b.n	8008dae <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008dac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	69da      	ldr	r2, [r3, #28]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db6:	431a      	orrs	r2, r3
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	431a      	orrs	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dc0:	ea42 0103 	orr.w	r1, r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd8:	431a      	orrs	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dde:	431a      	orrs	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	431a      	orrs	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	431a      	orrs	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	431a      	orrs	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	431a      	orrs	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	431a      	orrs	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e02:	431a      	orrs	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	431a      	orrs	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e0e:	ea42 0103 	orr.w	r1, r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d113      	bne.n	8008e4e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e38:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008e4c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f022 0201 	bic.w	r2, r2, #1
 8008e5c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00a      	beq.n	8008e80 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	430a      	orrs	r2, r1
 8008e7e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	40013000 	.word	0x40013000
 8008ea0:	40003800 	.word	0x40003800
 8008ea4:	40003c00 	.word	0x40003c00

08008ea8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b088      	sub	sp, #32
 8008eac:	af02      	add	r7, sp, #8
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	603b      	str	r3, [r7, #0]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3320      	adds	r3, #32
 8008ebe:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ec0:	f7fa fdd4 	bl	8003a6c <HAL_GetTick>
 8008ec4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d001      	beq.n	8008ed6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	e1d1      	b.n	800927a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d002      	beq.n	8008ee2 <HAL_SPI_Transmit+0x3a>
 8008edc:	88fb      	ldrh	r3, [r7, #6]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e1c9      	b.n	800927a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d101      	bne.n	8008ef4 <HAL_SPI_Transmit+0x4c>
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	e1c2      	b.n	800927a <HAL_SPI_Transmit+0x3d2>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2203      	movs	r2, #3
 8008f00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	88fa      	ldrh	r2, [r7, #6]
 8008f16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	88fa      	ldrh	r2, [r7, #6]
 8008f1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008f4c:	d108      	bne.n	8008f60 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	e009      	b.n	8008f74 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008f72:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	685a      	ldr	r2, [r3, #4]
 8008f7a:	4b96      	ldr	r3, [pc, #600]	@ (80091d4 <HAL_SPI_Transmit+0x32c>)
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	88f9      	ldrh	r1, [r7, #6]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	6812      	ldr	r2, [r2, #0]
 8008f84:	430b      	orrs	r3, r1
 8008f86:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f042 0201 	orr.w	r2, r2, #1
 8008f96:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008fa0:	d107      	bne.n	8008fb2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008fb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	2b0f      	cmp	r3, #15
 8008fb8:	d947      	bls.n	800904a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008fba:	e03f      	b.n	800903c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	f003 0302 	and.w	r3, r3, #2
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d114      	bne.n	8008ff4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	6812      	ldr	r2, [r2, #0]
 8008fd4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fda:	1d1a      	adds	r2, r3, #4
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008ff2:	e023      	b.n	800903c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ff4:	f7fa fd3a 	bl	8003a6c <HAL_GetTick>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	429a      	cmp	r2, r3
 8009002:	d803      	bhi.n	800900c <HAL_SPI_Transmit+0x164>
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800900a:	d102      	bne.n	8009012 <HAL_SPI_Transmit+0x16a>
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d114      	bne.n	800903c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f000 fee2 	bl	8009ddc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800901e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e11e      	b.n	800927a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009042:	b29b      	uxth	r3, r3
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1b9      	bne.n	8008fbc <HAL_SPI_Transmit+0x114>
 8009048:	e0f1      	b.n	800922e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	2b07      	cmp	r3, #7
 8009050:	f240 80e6 	bls.w	8009220 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009054:	e05d      	b.n	8009112 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	695b      	ldr	r3, [r3, #20]
 800905c:	f003 0302 	and.w	r3, r3, #2
 8009060:	2b02      	cmp	r3, #2
 8009062:	d132      	bne.n	80090ca <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800906a:	b29b      	uxth	r3, r3
 800906c:	2b01      	cmp	r3, #1
 800906e:	d918      	bls.n	80090a2 <HAL_SPI_Transmit+0x1fa>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009074:	2b00      	cmp	r3, #0
 8009076:	d014      	beq.n	80090a2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6812      	ldr	r2, [r2, #0]
 8009082:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009088:	1d1a      	adds	r2, r3, #4
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009094:	b29b      	uxth	r3, r3
 8009096:	3b02      	subs	r3, #2
 8009098:	b29a      	uxth	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80090a0:	e037      	b.n	8009112 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090a6:	881a      	ldrh	r2, [r3, #0]
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090b0:	1c9a      	adds	r2, r3, #2
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80090bc:	b29b      	uxth	r3, r3
 80090be:	3b01      	subs	r3, #1
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80090c8:	e023      	b.n	8009112 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090ca:	f7fa fccf 	bl	8003a6c <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d803      	bhi.n	80090e2 <HAL_SPI_Transmit+0x23a>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e0:	d102      	bne.n	80090e8 <HAL_SPI_Transmit+0x240>
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d114      	bne.n	8009112 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f000 fe77 	bl	8009ddc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800910e:	2303      	movs	r3, #3
 8009110:	e0b3      	b.n	800927a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009118:	b29b      	uxth	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d19b      	bne.n	8009056 <HAL_SPI_Transmit+0x1ae>
 800911e:	e086      	b.n	800922e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	695b      	ldr	r3, [r3, #20]
 8009126:	f003 0302 	and.w	r3, r3, #2
 800912a:	2b02      	cmp	r3, #2
 800912c:	d154      	bne.n	80091d8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009134:	b29b      	uxth	r3, r3
 8009136:	2b03      	cmp	r3, #3
 8009138:	d918      	bls.n	800916c <HAL_SPI_Transmit+0x2c4>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800913e:	2b40      	cmp	r3, #64	@ 0x40
 8009140:	d914      	bls.n	800916c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6812      	ldr	r2, [r2, #0]
 800914c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009152:	1d1a      	adds	r2, r3, #4
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800915e:	b29b      	uxth	r3, r3
 8009160:	3b04      	subs	r3, #4
 8009162:	b29a      	uxth	r2, r3
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800916a:	e059      	b.n	8009220 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009172:	b29b      	uxth	r3, r3
 8009174:	2b01      	cmp	r3, #1
 8009176:	d917      	bls.n	80091a8 <HAL_SPI_Transmit+0x300>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800917c:	2b00      	cmp	r3, #0
 800917e:	d013      	beq.n	80091a8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009184:	881a      	ldrh	r2, [r3, #0]
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800918e:	1c9a      	adds	r2, r3, #2
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800919a:	b29b      	uxth	r3, r3
 800919c:	3b02      	subs	r3, #2
 800919e:	b29a      	uxth	r2, r3
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80091a6:	e03b      	b.n	8009220 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	3320      	adds	r3, #32
 80091b2:	7812      	ldrb	r2, [r2, #0]
 80091b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091ba:	1c5a      	adds	r2, r3, #1
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	3b01      	subs	r3, #1
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80091d2:	e025      	b.n	8009220 <HAL_SPI_Transmit+0x378>
 80091d4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091d8:	f7fa fc48 	bl	8003a6c <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d803      	bhi.n	80091f0 <HAL_SPI_Transmit+0x348>
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ee:	d102      	bne.n	80091f6 <HAL_SPI_Transmit+0x34e>
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d114      	bne.n	8009220 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f000 fdf0 	bl	8009ddc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009202:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e02c      	b.n	800927a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009226:	b29b      	uxth	r3, r3
 8009228:	2b00      	cmp	r3, #0
 800922a:	f47f af79 	bne.w	8009120 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	2200      	movs	r2, #0
 8009236:	2108      	movs	r1, #8
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f000 fe6f 	bl	8009f1c <SPI_WaitOnFlagUntilTimeout>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d007      	beq.n	8009254 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800924a:	f043 0220 	orr.w	r2, r3, #32
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f000 fdc1 	bl	8009ddc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009270:	2b00      	cmp	r3, #0
 8009272:	d001      	beq.n	8009278 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	e000      	b.n	800927a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009278:	2300      	movs	r3, #0
  }
}
 800927a:	4618      	mov	r0, r3
 800927c:	3718      	adds	r7, #24
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop

08009284 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b088      	sub	sp, #32
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	603b      	str	r3, [r7, #0]
 8009290:	4613      	mov	r3, r2
 8009292:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009298:	095b      	lsrs	r3, r3, #5
 800929a:	b29b      	uxth	r3, r3
 800929c:	3301      	adds	r3, #1
 800929e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3330      	adds	r3, #48	@ 0x30
 80092a6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092a8:	f7fa fbe0 	bl	8003a6c <HAL_GetTick>
 80092ac:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d001      	beq.n	80092be <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80092ba:	2302      	movs	r3, #2
 80092bc:	e250      	b.n	8009760 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d002      	beq.n	80092ca <HAL_SPI_Receive+0x46>
 80092c4:	88fb      	ldrh	r3, [r7, #6]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e248      	b.n	8009760 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d101      	bne.n	80092dc <HAL_SPI_Receive+0x58>
 80092d8:	2302      	movs	r3, #2
 80092da:	e241      	b.n	8009760 <HAL_SPI_Receive+0x4dc>
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2204      	movs	r2, #4
 80092e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	88fa      	ldrh	r2, [r7, #6]
 80092fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	88fa      	ldrh	r2, [r7, #6]
 8009306:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2200      	movs	r2, #0
 800932a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009334:	d108      	bne.n	8009348 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009344:	601a      	str	r2, [r3, #0]
 8009346:	e009      	b.n	800935c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800935a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	685a      	ldr	r2, [r3, #4]
 8009362:	4b95      	ldr	r3, [pc, #596]	@ (80095b8 <HAL_SPI_Receive+0x334>)
 8009364:	4013      	ands	r3, r2
 8009366:	88f9      	ldrh	r1, [r7, #6]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	6812      	ldr	r2, [r2, #0]
 800936c:	430b      	orrs	r3, r1
 800936e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f042 0201 	orr.w	r2, r2, #1
 800937e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009388:	d107      	bne.n	800939a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009398:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	2b0f      	cmp	r3, #15
 80093a0:	d96c      	bls.n	800947c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80093a2:	e064      	b.n	800946e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d114      	bne.n	80093e4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80093c4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093ca:	1d1a      	adds	r2, r3, #4
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	3b01      	subs	r3, #1
 80093da:	b29a      	uxth	r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80093e2:	e044      	b.n	800946e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	8bfa      	ldrh	r2, [r7, #30]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d919      	bls.n	8009426 <HAL_SPI_Receive+0x1a2>
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d014      	beq.n	8009426 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009404:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009406:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800940c:	1d1a      	adds	r2, r3, #4
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009418:	b29b      	uxth	r3, r3
 800941a:	3b01      	subs	r3, #1
 800941c:	b29a      	uxth	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009424:	e023      	b.n	800946e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009426:	f7fa fb21 	bl	8003a6c <HAL_GetTick>
 800942a:	4602      	mov	r2, r0
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	429a      	cmp	r2, r3
 8009434:	d803      	bhi.n	800943e <HAL_SPI_Receive+0x1ba>
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943c:	d102      	bne.n	8009444 <HAL_SPI_Receive+0x1c0>
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d114      	bne.n	800946e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 fcc9 	bl	8009ddc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009450:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	e178      	b.n	8009760 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009474:	b29b      	uxth	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	d194      	bne.n	80093a4 <HAL_SPI_Receive+0x120>
 800947a:	e15e      	b.n	800973a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	2b07      	cmp	r3, #7
 8009482:	f240 8153 	bls.w	800972c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009486:	e08f      	b.n	80095a8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	f003 0301 	and.w	r3, r3, #1
 800949a:	2b01      	cmp	r3, #1
 800949c:	d114      	bne.n	80094c8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094a2:	69ba      	ldr	r2, [r7, #24]
 80094a4:	8812      	ldrh	r2, [r2, #0]
 80094a6:	b292      	uxth	r2, r2
 80094a8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094ae:	1c9a      	adds	r2, r3, #2
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	3b01      	subs	r3, #1
 80094be:	b29a      	uxth	r2, r3
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80094c6:	e06f      	b.n	80095a8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	8bfa      	ldrh	r2, [r7, #30]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d924      	bls.n	8009520 <HAL_SPI_Receive+0x29c>
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d01f      	beq.n	8009520 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094e4:	69ba      	ldr	r2, [r7, #24]
 80094e6:	8812      	ldrh	r2, [r2, #0]
 80094e8:	b292      	uxth	r2, r2
 80094ea:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094f0:	1c9a      	adds	r2, r3, #2
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094fa:	69ba      	ldr	r2, [r7, #24]
 80094fc:	8812      	ldrh	r2, [r2, #0]
 80094fe:	b292      	uxth	r2, r2
 8009500:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009506:	1c9a      	adds	r2, r3, #2
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009512:	b29b      	uxth	r3, r3
 8009514:	3b02      	subs	r3, #2
 8009516:	b29a      	uxth	r2, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800951e:	e043      	b.n	80095a8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009526:	b29b      	uxth	r3, r3
 8009528:	2b01      	cmp	r3, #1
 800952a:	d119      	bne.n	8009560 <HAL_SPI_Receive+0x2dc>
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009532:	2b00      	cmp	r3, #0
 8009534:	d014      	beq.n	8009560 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800953a:	69ba      	ldr	r2, [r7, #24]
 800953c:	8812      	ldrh	r2, [r2, #0]
 800953e:	b292      	uxth	r2, r2
 8009540:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009546:	1c9a      	adds	r2, r3, #2
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009552:	b29b      	uxth	r3, r3
 8009554:	3b01      	subs	r3, #1
 8009556:	b29a      	uxth	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800955e:	e023      	b.n	80095a8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009560:	f7fa fa84 	bl	8003a6c <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	429a      	cmp	r2, r3
 800956e:	d803      	bhi.n	8009578 <HAL_SPI_Receive+0x2f4>
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009576:	d102      	bne.n	800957e <HAL_SPI_Receive+0x2fa>
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d114      	bne.n	80095a8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 fc2c 	bl	8009ddc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800958a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80095a4:	2303      	movs	r3, #3
 80095a6:	e0db      	b.n	8009760 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f47f af69 	bne.w	8009488 <HAL_SPI_Receive+0x204>
 80095b6:	e0c0      	b.n	800973a <HAL_SPI_Receive+0x4b6>
 80095b8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d117      	bne.n	8009602 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095de:	7812      	ldrb	r2, [r2, #0]
 80095e0:	b2d2      	uxtb	r2, r2
 80095e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095e8:	1c5a      	adds	r2, r3, #1
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	3b01      	subs	r3, #1
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009600:	e094      	b.n	800972c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009608:	b29b      	uxth	r3, r3
 800960a:	8bfa      	ldrh	r2, [r7, #30]
 800960c:	429a      	cmp	r2, r3
 800960e:	d946      	bls.n	800969e <HAL_SPI_Receive+0x41a>
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009616:	2b00      	cmp	r3, #0
 8009618:	d041      	beq.n	800969e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009626:	7812      	ldrb	r2, [r2, #0]
 8009628:	b2d2      	uxtb	r2, r2
 800962a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009630:	1c5a      	adds	r2, r3, #1
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009642:	7812      	ldrb	r2, [r2, #0]
 8009644:	b2d2      	uxtb	r2, r2
 8009646:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800964c:	1c5a      	adds	r2, r3, #1
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800965e:	7812      	ldrb	r2, [r2, #0]
 8009660:	b2d2      	uxtb	r2, r2
 8009662:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009668:	1c5a      	adds	r2, r3, #1
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800967a:	7812      	ldrb	r2, [r2, #0]
 800967c:	b2d2      	uxtb	r2, r2
 800967e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009684:	1c5a      	adds	r2, r3, #1
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009690:	b29b      	uxth	r3, r3
 8009692:	3b04      	subs	r3, #4
 8009694:	b29a      	uxth	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800969c:	e046      	b.n	800972c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d81c      	bhi.n	80096e4 <HAL_SPI_Receive+0x460>
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d017      	beq.n	80096e4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096c0:	7812      	ldrb	r2, [r2, #0]
 80096c2:	b2d2      	uxtb	r2, r2
 80096c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096ca:	1c5a      	adds	r2, r3, #1
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	3b01      	subs	r3, #1
 80096da:	b29a      	uxth	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80096e2:	e023      	b.n	800972c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096e4:	f7fa f9c2 	bl	8003a6c <HAL_GetTick>
 80096e8:	4602      	mov	r2, r0
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	1ad3      	subs	r3, r2, r3
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d803      	bhi.n	80096fc <HAL_SPI_Receive+0x478>
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fa:	d102      	bne.n	8009702 <HAL_SPI_Receive+0x47e>
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d114      	bne.n	800972c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f000 fb6a 	bl	8009ddc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800970e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	e019      	b.n	8009760 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009732:	b29b      	uxth	r3, r3
 8009734:	2b00      	cmp	r3, #0
 8009736:	f47f af41 	bne.w	80095bc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f000 fb4e 	bl	8009ddc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e000      	b.n	8009760 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800975e:	2300      	movs	r3, #0
  }
}
 8009760:	4618      	mov	r0, r3
 8009762:	3720      	adds	r7, #32
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b08e      	sub	sp, #56	@ 0x38
 800976c:	af02      	add	r7, sp, #8
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
 8009774:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3320      	adds	r3, #32
 800977c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	3330      	adds	r3, #48	@ 0x30
 8009784:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800978a:	095b      	lsrs	r3, r3, #5
 800978c:	b29b      	uxth	r3, r3
 800978e:	3301      	adds	r3, #1
 8009790:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009792:	f7fa f96b 	bl	8003a6c <HAL_GetTick>
 8009796:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8009798:	887b      	ldrh	r3, [r7, #2]
 800979a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800979c:	887b      	ldrh	r3, [r7, #2]
 800979e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d001      	beq.n	80097b0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80097ac:	2302      	movs	r3, #2
 80097ae:	e310      	b.n	8009dd2 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d005      	beq.n	80097c2 <HAL_SPI_TransmitReceive+0x5a>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d002      	beq.n	80097c2 <HAL_SPI_TransmitReceive+0x5a>
 80097bc:	887b      	ldrh	r3, [r7, #2]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d101      	bne.n	80097c6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e305      	b.n	8009dd2 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d101      	bne.n	80097d4 <HAL_SPI_TransmitReceive+0x6c>
 80097d0:	2302      	movs	r3, #2
 80097d2:	e2fe      	b.n	8009dd2 <HAL_SPI_TransmitReceive+0x66a>
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2205      	movs	r2, #5
 80097e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	887a      	ldrh	r2, [r7, #2]
 80097f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	887a      	ldrh	r2, [r7, #2]
 80097fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	887a      	ldrh	r2, [r7, #2]
 800980c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	887a      	ldrh	r2, [r7, #2]
 8009814:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68da      	ldr	r2, [r3, #12]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8009832:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a70      	ldr	r2, [pc, #448]	@ (80099fc <HAL_SPI_TransmitReceive+0x294>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d009      	beq.n	8009852 <HAL_SPI_TransmitReceive+0xea>
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a6f      	ldr	r2, [pc, #444]	@ (8009a00 <HAL_SPI_TransmitReceive+0x298>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d004      	beq.n	8009852 <HAL_SPI_TransmitReceive+0xea>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a6d      	ldr	r2, [pc, #436]	@ (8009a04 <HAL_SPI_TransmitReceive+0x29c>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d102      	bne.n	8009858 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8009852:	2310      	movs	r3, #16
 8009854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009856:	e001      	b.n	800985c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8009858:	2308      	movs	r3, #8
 800985a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	685a      	ldr	r2, [r3, #4]
 8009862:	4b69      	ldr	r3, [pc, #420]	@ (8009a08 <HAL_SPI_TransmitReceive+0x2a0>)
 8009864:	4013      	ands	r3, r2
 8009866:	8879      	ldrh	r1, [r7, #2]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	6812      	ldr	r2, [r2, #0]
 800986c:	430b      	orrs	r3, r1
 800986e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f042 0201 	orr.w	r2, r2, #1
 800987e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009888:	d107      	bne.n	800989a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009898:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	2b0f      	cmp	r3, #15
 80098a0:	f240 80a2 	bls.w	80099e8 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80098a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a6:	089b      	lsrs	r3, r3, #2
 80098a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80098aa:	e094      	b.n	80099d6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	695b      	ldr	r3, [r3, #20]
 80098b2:	f003 0302 	and.w	r3, r3, #2
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d120      	bne.n	80098fc <HAL_SPI_TransmitReceive+0x194>
 80098ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d01d      	beq.n	80098fc <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80098c0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80098c2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80098c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d217      	bcs.n	80098fc <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6812      	ldr	r2, [r2, #0]
 80098d6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098dc:	1d1a      	adds	r2, r3, #4
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	3b01      	subs	r3, #1
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80098fa:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009904:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009906:	2b00      	cmp	r3, #0
 8009908:	d065      	beq.n	80099d6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	695b      	ldr	r3, [r3, #20]
 8009910:	f003 0301 	and.w	r3, r3, #1
 8009914:	2b01      	cmp	r3, #1
 8009916:	d118      	bne.n	800994a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009920:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009922:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009928:	1d1a      	adds	r2, r3, #4
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009934:	b29b      	uxth	r3, r3
 8009936:	3b01      	subs	r3, #1
 8009938:	b29a      	uxth	r2, r3
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009946:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009948:	e045      	b.n	80099d6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800994a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800994c:	8bfb      	ldrh	r3, [r7, #30]
 800994e:	429a      	cmp	r2, r3
 8009950:	d21d      	bcs.n	800998e <HAL_SPI_TransmitReceive+0x226>
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009958:	2b00      	cmp	r3, #0
 800995a:	d018      	beq.n	800998e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009964:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009966:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800996c:	1d1a      	adds	r2, r3, #4
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009978:	b29b      	uxth	r3, r3
 800997a:	3b01      	subs	r3, #1
 800997c:	b29a      	uxth	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800998a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800998c:	e023      	b.n	80099d6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800998e:	f7fa f86d 	bl	8003a6c <HAL_GetTick>
 8009992:	4602      	mov	r2, r0
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800999a:	429a      	cmp	r2, r3
 800999c:	d803      	bhi.n	80099a6 <HAL_SPI_TransmitReceive+0x23e>
 800999e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a4:	d102      	bne.n	80099ac <HAL_SPI_TransmitReceive+0x244>
 80099a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d114      	bne.n	80099d6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 fa15 	bl	8009ddc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e1fd      	b.n	8009dd2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80099d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f47f af67 	bne.w	80098ac <HAL_SPI_TransmitReceive+0x144>
 80099de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f47f af63 	bne.w	80098ac <HAL_SPI_TransmitReceive+0x144>
 80099e6:	e1ce      	b.n	8009d86 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	2b07      	cmp	r3, #7
 80099ee:	f240 81c2 	bls.w	8009d76 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80099f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f4:	085b      	lsrs	r3, r3, #1
 80099f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80099f8:	e0c9      	b.n	8009b8e <HAL_SPI_TransmitReceive+0x426>
 80099fa:	bf00      	nop
 80099fc:	40013000 	.word	0x40013000
 8009a00:	40003800 	.word	0x40003800
 8009a04:	40003c00 	.word	0x40003c00
 8009a08:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	695b      	ldr	r3, [r3, #20]
 8009a12:	f003 0302 	and.w	r3, r3, #2
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d11f      	bne.n	8009a5a <HAL_SPI_TransmitReceive+0x2f2>
 8009a1a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d01c      	beq.n	8009a5a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009a20:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009a22:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a26:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d216      	bcs.n	8009a5a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a30:	881a      	ldrh	r2, [r3, #0]
 8009a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a34:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a3a:	1c9a      	adds	r2, r3, #2
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a58:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009a62:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 8092 	beq.w	8009b8e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	695b      	ldr	r3, [r3, #20]
 8009a70:	f003 0301 	and.w	r3, r3, #1
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d118      	bne.n	8009aaa <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a7c:	6a3a      	ldr	r2, [r7, #32]
 8009a7e:	8812      	ldrh	r2, [r2, #0]
 8009a80:	b292      	uxth	r2, r2
 8009a82:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a88:	1c9a      	adds	r2, r3, #2
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	3b01      	subs	r3, #1
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009aa6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009aa8:	e071      	b.n	8009b8e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009aaa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009aac:	8bfb      	ldrh	r3, [r7, #30]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d228      	bcs.n	8009b04 <HAL_SPI_TransmitReceive+0x39c>
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d023      	beq.n	8009b04 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ac0:	6a3a      	ldr	r2, [r7, #32]
 8009ac2:	8812      	ldrh	r2, [r2, #0]
 8009ac4:	b292      	uxth	r2, r2
 8009ac6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009acc:	1c9a      	adds	r2, r3, #2
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ad6:	6a3a      	ldr	r2, [r7, #32]
 8009ad8:	8812      	ldrh	r2, [r2, #0]
 8009ada:	b292      	uxth	r2, r2
 8009adc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ae2:	1c9a      	adds	r2, r3, #2
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	3b02      	subs	r3, #2
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b00:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009b02:	e044      	b.n	8009b8e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8009b04:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d11d      	bne.n	8009b46 <HAL_SPI_TransmitReceive+0x3de>
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d018      	beq.n	8009b46 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b18:	6a3a      	ldr	r2, [r7, #32]
 8009b1a:	8812      	ldrh	r2, [r2, #0]
 8009b1c:	b292      	uxth	r2, r2
 8009b1e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b24:	1c9a      	adds	r2, r3, #2
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	3b01      	subs	r3, #1
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b42:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009b44:	e023      	b.n	8009b8e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b46:	f7f9 ff91 	bl	8003a6c <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d803      	bhi.n	8009b5e <HAL_SPI_TransmitReceive+0x3f6>
 8009b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b5c:	d102      	bne.n	8009b64 <HAL_SPI_TransmitReceive+0x3fc>
 8009b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d114      	bne.n	8009b8e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 f939 	bl	8009ddc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e121      	b.n	8009dd2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009b8e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f47f af3b 	bne.w	8009a0c <HAL_SPI_TransmitReceive+0x2a4>
 8009b96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f47f af37 	bne.w	8009a0c <HAL_SPI_TransmitReceive+0x2a4>
 8009b9e:	e0f2      	b.n	8009d86 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	f003 0302 	and.w	r3, r3, #2
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d121      	bne.n	8009bf2 <HAL_SPI_TransmitReceive+0x48a>
 8009bae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d01e      	beq.n	8009bf2 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009bb4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009bb6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bba:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d218      	bcs.n	8009bf2 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	3320      	adds	r3, #32
 8009bca:	7812      	ldrb	r2, [r2, #0]
 8009bcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bd2:	1c5a      	adds	r2, r3, #1
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	3b01      	subs	r3, #1
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bf0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	695b      	ldr	r3, [r3, #20]
 8009bf8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009bfa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f000 80ba 	beq.w	8009d76 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	695b      	ldr	r3, [r3, #20]
 8009c08:	f003 0301 	and.w	r3, r3, #1
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d11b      	bne.n	8009c48 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c1c:	7812      	ldrb	r2, [r2, #0]
 8009c1e:	b2d2      	uxtb	r2, r2
 8009c20:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c26:	1c5a      	adds	r2, r3, #1
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	3b01      	subs	r3, #1
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c44:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009c46:	e096      	b.n	8009d76 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009c48:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009c4a:	8bfb      	ldrh	r3, [r7, #30]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d24a      	bcs.n	8009ce6 <HAL_SPI_TransmitReceive+0x57e>
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d045      	beq.n	8009ce6 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c66:	7812      	ldrb	r2, [r2, #0]
 8009c68:	b2d2      	uxtb	r2, r2
 8009c6a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c70:	1c5a      	adds	r2, r3, #1
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c82:	7812      	ldrb	r2, [r2, #0]
 8009c84:	b2d2      	uxtb	r2, r2
 8009c86:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c8c:	1c5a      	adds	r2, r3, #1
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c9e:	7812      	ldrb	r2, [r2, #0]
 8009ca0:	b2d2      	uxtb	r2, r2
 8009ca2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ca8:	1c5a      	adds	r2, r3, #1
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cba:	7812      	ldrb	r2, [r2, #0]
 8009cbc:	b2d2      	uxtb	r2, r2
 8009cbe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cc4:	1c5a      	adds	r2, r3, #1
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	3b04      	subs	r3, #4
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009ce2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009ce4:	e047      	b.n	8009d76 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8009ce6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009ce8:	2b03      	cmp	r3, #3
 8009cea:	d820      	bhi.n	8009d2e <HAL_SPI_TransmitReceive+0x5c6>
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d01b      	beq.n	8009d2e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d02:	7812      	ldrb	r2, [r2, #0]
 8009d04:	b2d2      	uxtb	r2, r2
 8009d06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d0c:	1c5a      	adds	r2, r3, #1
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d2a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009d2c:	e023      	b.n	8009d76 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d2e:	f7f9 fe9d 	bl	8003a6c <HAL_GetTick>
 8009d32:	4602      	mov	r2, r0
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d803      	bhi.n	8009d46 <HAL_SPI_TransmitReceive+0x5de>
 8009d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d44:	d102      	bne.n	8009d4c <HAL_SPI_TransmitReceive+0x5e4>
 8009d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d114      	bne.n	8009d76 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 f845 	bl	8009ddc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d58:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8009d72:	2303      	movs	r3, #3
 8009d74:	e02d      	b.n	8009dd2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009d76:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f47f af11 	bne.w	8009ba0 <HAL_SPI_TransmitReceive+0x438>
 8009d7e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f47f af0d 	bne.w	8009ba0 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	2108      	movs	r1, #8
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f000 f8c3 	bl	8009f1c <SPI_WaitOnFlagUntilTimeout>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d007      	beq.n	8009dac <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009da2:	f043 0220 	orr.w	r2, r3, #32
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f000 f815 	bl	8009ddc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e000      	b.n	8009dd2 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
  }
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3730      	adds	r7, #48	@ 0x30
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop

08009ddc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	699a      	ldr	r2, [r3, #24]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f042 0208 	orr.w	r2, r2, #8
 8009dfa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	699a      	ldr	r2, [r3, #24]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f042 0210 	orr.w	r2, r2, #16
 8009e0a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f022 0201 	bic.w	r2, r2, #1
 8009e1a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6919      	ldr	r1, [r3, #16]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	4b3c      	ldr	r3, [pc, #240]	@ (8009f18 <SPI_CloseTransfer+0x13c>)
 8009e28:	400b      	ands	r3, r1
 8009e2a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	689a      	ldr	r2, [r3, #8]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009e3a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	2b04      	cmp	r3, #4
 8009e46:	d014      	beq.n	8009e72 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f003 0320 	and.w	r3, r3, #32
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00f      	beq.n	8009e72 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e58:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	699a      	ldr	r2, [r3, #24]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f042 0220 	orr.w	r2, r2, #32
 8009e70:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b03      	cmp	r3, #3
 8009e7c:	d014      	beq.n	8009ea8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00f      	beq.n	8009ea8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e8e:	f043 0204 	orr.w	r2, r3, #4
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	699a      	ldr	r2, [r3, #24]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ea6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00f      	beq.n	8009ed2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009eb8:	f043 0201 	orr.w	r2, r3, #1
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	699a      	ldr	r2, [r3, #24]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ed0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00f      	beq.n	8009efc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ee2:	f043 0208 	orr.w	r2, r3, #8
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	699a      	ldr	r2, [r3, #24]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009efa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009f0c:	bf00      	nop
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	fffffc90 	.word	0xfffffc90

08009f1c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	603b      	str	r3, [r7, #0]
 8009f28:	4613      	mov	r3, r2
 8009f2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009f2c:	e010      	b.n	8009f50 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f2e:	f7f9 fd9d 	bl	8003a6c <HAL_GetTick>
 8009f32:	4602      	mov	r2, r0
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d803      	bhi.n	8009f46 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f44:	d102      	bne.n	8009f4c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e00f      	b.n	8009f70 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	695a      	ldr	r2, [r3, #20]
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	4013      	ands	r3, r2
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	bf0c      	ite	eq
 8009f60:	2301      	moveq	r3, #1
 8009f62:	2300      	movne	r3, #0
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	461a      	mov	r2, r3
 8009f68:	79fb      	ldrb	r3, [r7, #7]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d0df      	beq.n	8009f2e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f84:	095b      	lsrs	r3, r3, #5
 8009f86:	3301      	adds	r3, #1
 8009f88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	3307      	adds	r3, #7
 8009f96:	08db      	lsrs	r3, r3, #3
 8009f98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr

08009fae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b082      	sub	sp, #8
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e049      	b.n	800a054 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d106      	bne.n	8009fda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f841 	bl	800a05c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2202      	movs	r2, #2
 8009fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	3304      	adds	r3, #4
 8009fea:	4619      	mov	r1, r3
 8009fec:	4610      	mov	r0, r2
 8009fee:	f000 f9f5 	bl	800a3dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2201      	movs	r2, #1
 800a006:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	2b01      	cmp	r3, #1
 800a082:	d001      	beq.n	800a088 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	e05e      	b.n	800a146 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2202      	movs	r2, #2
 800a08c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68da      	ldr	r2, [r3, #12]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f042 0201 	orr.w	r2, r2, #1
 800a09e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a2b      	ldr	r2, [pc, #172]	@ (800a154 <HAL_TIM_Base_Start_IT+0xe4>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d02c      	beq.n	800a104 <HAL_TIM_Base_Start_IT+0x94>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0b2:	d027      	beq.n	800a104 <HAL_TIM_Base_Start_IT+0x94>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a27      	ldr	r2, [pc, #156]	@ (800a158 <HAL_TIM_Base_Start_IT+0xe8>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d022      	beq.n	800a104 <HAL_TIM_Base_Start_IT+0x94>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a26      	ldr	r2, [pc, #152]	@ (800a15c <HAL_TIM_Base_Start_IT+0xec>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d01d      	beq.n	800a104 <HAL_TIM_Base_Start_IT+0x94>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a24      	ldr	r2, [pc, #144]	@ (800a160 <HAL_TIM_Base_Start_IT+0xf0>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d018      	beq.n	800a104 <HAL_TIM_Base_Start_IT+0x94>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a23      	ldr	r2, [pc, #140]	@ (800a164 <HAL_TIM_Base_Start_IT+0xf4>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d013      	beq.n	800a104 <HAL_TIM_Base_Start_IT+0x94>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a21      	ldr	r2, [pc, #132]	@ (800a168 <HAL_TIM_Base_Start_IT+0xf8>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d00e      	beq.n	800a104 <HAL_TIM_Base_Start_IT+0x94>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a20      	ldr	r2, [pc, #128]	@ (800a16c <HAL_TIM_Base_Start_IT+0xfc>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d009      	beq.n	800a104 <HAL_TIM_Base_Start_IT+0x94>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a1e      	ldr	r2, [pc, #120]	@ (800a170 <HAL_TIM_Base_Start_IT+0x100>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d004      	beq.n	800a104 <HAL_TIM_Base_Start_IT+0x94>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a1d      	ldr	r2, [pc, #116]	@ (800a174 <HAL_TIM_Base_Start_IT+0x104>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d115      	bne.n	800a130 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	689a      	ldr	r2, [r3, #8]
 800a10a:	4b1b      	ldr	r3, [pc, #108]	@ (800a178 <HAL_TIM_Base_Start_IT+0x108>)
 800a10c:	4013      	ands	r3, r2
 800a10e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2b06      	cmp	r3, #6
 800a114:	d015      	beq.n	800a142 <HAL_TIM_Base_Start_IT+0xd2>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a11c:	d011      	beq.n	800a142 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f042 0201 	orr.w	r2, r2, #1
 800a12c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a12e:	e008      	b.n	800a142 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f042 0201 	orr.w	r2, r2, #1
 800a13e:	601a      	str	r2, [r3, #0]
 800a140:	e000      	b.n	800a144 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a142:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	40010000 	.word	0x40010000
 800a158:	40000400 	.word	0x40000400
 800a15c:	40000800 	.word	0x40000800
 800a160:	40000c00 	.word	0x40000c00
 800a164:	40010400 	.word	0x40010400
 800a168:	40001800 	.word	0x40001800
 800a16c:	40014000 	.word	0x40014000
 800a170:	4000e000 	.word	0x4000e000
 800a174:	4000e400 	.word	0x4000e400
 800a178:	00010007 	.word	0x00010007

0800a17c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	f003 0302 	and.w	r3, r3, #2
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d020      	beq.n	800a1e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f003 0302 	and.w	r3, r3, #2
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d01b      	beq.n	800a1e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f06f 0202 	mvn.w	r2, #2
 800a1b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	699b      	ldr	r3, [r3, #24]
 800a1be:	f003 0303 	and.w	r3, r3, #3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f8e9 	bl	800a39e <HAL_TIM_IC_CaptureCallback>
 800a1cc:	e005      	b.n	800a1da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f8db 	bl	800a38a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f8ec 	bl	800a3b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	f003 0304 	and.w	r3, r3, #4
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d020      	beq.n	800a22c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f003 0304 	and.w	r3, r3, #4
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d01b      	beq.n	800a22c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f06f 0204 	mvn.w	r2, #4
 800a1fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2202      	movs	r2, #2
 800a202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d003      	beq.n	800a21a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f8c3 	bl	800a39e <HAL_TIM_IC_CaptureCallback>
 800a218:	e005      	b.n	800a226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f8b5 	bl	800a38a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 f8c6 	bl	800a3b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	f003 0308 	and.w	r3, r3, #8
 800a232:	2b00      	cmp	r3, #0
 800a234:	d020      	beq.n	800a278 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f003 0308 	and.w	r3, r3, #8
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d01b      	beq.n	800a278 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f06f 0208 	mvn.w	r2, #8
 800a248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2204      	movs	r2, #4
 800a24e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	69db      	ldr	r3, [r3, #28]
 800a256:	f003 0303 	and.w	r3, r3, #3
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d003      	beq.n	800a266 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 f89d 	bl	800a39e <HAL_TIM_IC_CaptureCallback>
 800a264:	e005      	b.n	800a272 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 f88f 	bl	800a38a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 f8a0 	bl	800a3b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	f003 0310 	and.w	r3, r3, #16
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d020      	beq.n	800a2c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f003 0310 	and.w	r3, r3, #16
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d01b      	beq.n	800a2c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f06f 0210 	mvn.w	r2, #16
 800a294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2208      	movs	r2, #8
 800a29a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	69db      	ldr	r3, [r3, #28]
 800a2a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d003      	beq.n	800a2b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f877 	bl	800a39e <HAL_TIM_IC_CaptureCallback>
 800a2b0:	e005      	b.n	800a2be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f869 	bl	800a38a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 f87a 	bl	800a3b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	f003 0301 	and.w	r3, r3, #1
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00c      	beq.n	800a2e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f003 0301 	and.w	r3, r3, #1
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d007      	beq.n	800a2e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f06f 0201 	mvn.w	r2, #1
 800a2e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f7f8 fc82 	bl	8002bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d104      	bne.n	800a2fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00c      	beq.n	800a316 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a302:	2b00      	cmp	r3, #0
 800a304:	d007      	beq.n	800a316 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a30e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 f919 	bl	800a548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00c      	beq.n	800a33a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a326:	2b00      	cmp	r3, #0
 800a328:	d007      	beq.n	800a33a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 f911 	bl	800a55c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00c      	beq.n	800a35e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d007      	beq.n	800a35e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 f834 	bl	800a3c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	f003 0320 	and.w	r3, r3, #32
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00c      	beq.n	800a382 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f003 0320 	and.w	r3, r3, #32
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d007      	beq.n	800a382 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f06f 0220 	mvn.w	r2, #32
 800a37a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f8d9 	bl	800a534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a382:	bf00      	nop
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a38a:	b480      	push	{r7}
 800a38c:	b083      	sub	sp, #12
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a392:	bf00      	nop
 800a394:	370c      	adds	r7, #12
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr

0800a39e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a39e:	b480      	push	{r7}
 800a3a0:	b083      	sub	sp, #12
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3a6:	bf00      	nop
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b083      	sub	sp, #12
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3ba:	bf00      	nop
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b083      	sub	sp, #12
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3ce:	bf00      	nop
 800a3d0:	370c      	adds	r7, #12
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
	...

0800a3dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a47      	ldr	r2, [pc, #284]	@ (800a50c <TIM_Base_SetConfig+0x130>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d013      	beq.n	800a41c <TIM_Base_SetConfig+0x40>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3fa:	d00f      	beq.n	800a41c <TIM_Base_SetConfig+0x40>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a44      	ldr	r2, [pc, #272]	@ (800a510 <TIM_Base_SetConfig+0x134>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d00b      	beq.n	800a41c <TIM_Base_SetConfig+0x40>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a43      	ldr	r2, [pc, #268]	@ (800a514 <TIM_Base_SetConfig+0x138>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d007      	beq.n	800a41c <TIM_Base_SetConfig+0x40>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a42      	ldr	r2, [pc, #264]	@ (800a518 <TIM_Base_SetConfig+0x13c>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d003      	beq.n	800a41c <TIM_Base_SetConfig+0x40>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a41      	ldr	r2, [pc, #260]	@ (800a51c <TIM_Base_SetConfig+0x140>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d108      	bne.n	800a42e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a36      	ldr	r2, [pc, #216]	@ (800a50c <TIM_Base_SetConfig+0x130>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d027      	beq.n	800a486 <TIM_Base_SetConfig+0xaa>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a43c:	d023      	beq.n	800a486 <TIM_Base_SetConfig+0xaa>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a33      	ldr	r2, [pc, #204]	@ (800a510 <TIM_Base_SetConfig+0x134>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d01f      	beq.n	800a486 <TIM_Base_SetConfig+0xaa>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a32      	ldr	r2, [pc, #200]	@ (800a514 <TIM_Base_SetConfig+0x138>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d01b      	beq.n	800a486 <TIM_Base_SetConfig+0xaa>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4a31      	ldr	r2, [pc, #196]	@ (800a518 <TIM_Base_SetConfig+0x13c>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d017      	beq.n	800a486 <TIM_Base_SetConfig+0xaa>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a30      	ldr	r2, [pc, #192]	@ (800a51c <TIM_Base_SetConfig+0x140>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d013      	beq.n	800a486 <TIM_Base_SetConfig+0xaa>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4a2f      	ldr	r2, [pc, #188]	@ (800a520 <TIM_Base_SetConfig+0x144>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d00f      	beq.n	800a486 <TIM_Base_SetConfig+0xaa>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4a2e      	ldr	r2, [pc, #184]	@ (800a524 <TIM_Base_SetConfig+0x148>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d00b      	beq.n	800a486 <TIM_Base_SetConfig+0xaa>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a2d      	ldr	r2, [pc, #180]	@ (800a528 <TIM_Base_SetConfig+0x14c>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d007      	beq.n	800a486 <TIM_Base_SetConfig+0xaa>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4a2c      	ldr	r2, [pc, #176]	@ (800a52c <TIM_Base_SetConfig+0x150>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d003      	beq.n	800a486 <TIM_Base_SetConfig+0xaa>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a2b      	ldr	r2, [pc, #172]	@ (800a530 <TIM_Base_SetConfig+0x154>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d108      	bne.n	800a498 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a48c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	4313      	orrs	r3, r2
 800a496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	689a      	ldr	r2, [r3, #8]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a14      	ldr	r2, [pc, #80]	@ (800a50c <TIM_Base_SetConfig+0x130>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d00f      	beq.n	800a4de <TIM_Base_SetConfig+0x102>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4a16      	ldr	r2, [pc, #88]	@ (800a51c <TIM_Base_SetConfig+0x140>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d00b      	beq.n	800a4de <TIM_Base_SetConfig+0x102>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	4a15      	ldr	r2, [pc, #84]	@ (800a520 <TIM_Base_SetConfig+0x144>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d007      	beq.n	800a4de <TIM_Base_SetConfig+0x102>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4a14      	ldr	r2, [pc, #80]	@ (800a524 <TIM_Base_SetConfig+0x148>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d003      	beq.n	800a4de <TIM_Base_SetConfig+0x102>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a13      	ldr	r2, [pc, #76]	@ (800a528 <TIM_Base_SetConfig+0x14c>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d103      	bne.n	800a4e6 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	691a      	ldr	r2, [r3, #16]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f043 0204 	orr.w	r2, r3, #4
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	601a      	str	r2, [r3, #0]
}
 800a4fe:	bf00      	nop
 800a500:	3714      	adds	r7, #20
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	40010000 	.word	0x40010000
 800a510:	40000400 	.word	0x40000400
 800a514:	40000800 	.word	0x40000800
 800a518:	40000c00 	.word	0x40000c00
 800a51c:	40010400 	.word	0x40010400
 800a520:	40014000 	.word	0x40014000
 800a524:	40014400 	.word	0x40014400
 800a528:	40014800 	.word	0x40014800
 800a52c:	4000e000 	.word	0x4000e000
 800a530:	4000e400 	.word	0x4000e400

0800a534 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d101      	bne.n	800a582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	e042      	b.n	800a608 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d106      	bne.n	800a59a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f7f8 fe79 	bl	800328c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2224      	movs	r2, #36	@ 0x24
 800a59e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f022 0201 	bic.w	r2, r2, #1
 800a5b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d002      	beq.n	800a5c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fe94 	bl	800b2e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 f825 	bl	800a610 <UART_SetConfig>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d101      	bne.n	800a5d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e01b      	b.n	800a608 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	685a      	ldr	r2, [r3, #4]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a5de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	689a      	ldr	r2, [r3, #8]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a5ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f042 0201 	orr.w	r2, r2, #1
 800a5fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 ff13 	bl	800b42c <UART_CheckIdleState>
 800a606:	4603      	mov	r3, r0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a614:	b092      	sub	sp, #72	@ 0x48
 800a616:	af00      	add	r7, sp, #0
 800a618:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	689a      	ldr	r2, [r3, #8]
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	431a      	orrs	r2, r3
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	695b      	ldr	r3, [r3, #20]
 800a62e:	431a      	orrs	r2, r3
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	69db      	ldr	r3, [r3, #28]
 800a634:	4313      	orrs	r3, r2
 800a636:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	4bbe      	ldr	r3, [pc, #760]	@ (800a938 <UART_SetConfig+0x328>)
 800a640:	4013      	ands	r3, r2
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	6812      	ldr	r2, [r2, #0]
 800a646:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a648:	430b      	orrs	r3, r1
 800a64a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	68da      	ldr	r2, [r3, #12]
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	430a      	orrs	r2, r1
 800a660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4ab3      	ldr	r2, [pc, #716]	@ (800a93c <UART_SetConfig+0x32c>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d004      	beq.n	800a67c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	6a1b      	ldr	r3, [r3, #32]
 800a676:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a678:	4313      	orrs	r3, r2
 800a67a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	689a      	ldr	r2, [r3, #8]
 800a682:	4baf      	ldr	r3, [pc, #700]	@ (800a940 <UART_SetConfig+0x330>)
 800a684:	4013      	ands	r3, r2
 800a686:	697a      	ldr	r2, [r7, #20]
 800a688:	6812      	ldr	r2, [r2, #0]
 800a68a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a68c:	430b      	orrs	r3, r1
 800a68e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a696:	f023 010f 	bic.w	r1, r3, #15
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	430a      	orrs	r2, r1
 800a6a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4aa6      	ldr	r2, [pc, #664]	@ (800a944 <UART_SetConfig+0x334>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d177      	bne.n	800a7a0 <UART_SetConfig+0x190>
 800a6b0:	4ba5      	ldr	r3, [pc, #660]	@ (800a948 <UART_SetConfig+0x338>)
 800a6b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6b8:	2b28      	cmp	r3, #40	@ 0x28
 800a6ba:	d86d      	bhi.n	800a798 <UART_SetConfig+0x188>
 800a6bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a6c4 <UART_SetConfig+0xb4>)
 800a6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c2:	bf00      	nop
 800a6c4:	0800a769 	.word	0x0800a769
 800a6c8:	0800a799 	.word	0x0800a799
 800a6cc:	0800a799 	.word	0x0800a799
 800a6d0:	0800a799 	.word	0x0800a799
 800a6d4:	0800a799 	.word	0x0800a799
 800a6d8:	0800a799 	.word	0x0800a799
 800a6dc:	0800a799 	.word	0x0800a799
 800a6e0:	0800a799 	.word	0x0800a799
 800a6e4:	0800a771 	.word	0x0800a771
 800a6e8:	0800a799 	.word	0x0800a799
 800a6ec:	0800a799 	.word	0x0800a799
 800a6f0:	0800a799 	.word	0x0800a799
 800a6f4:	0800a799 	.word	0x0800a799
 800a6f8:	0800a799 	.word	0x0800a799
 800a6fc:	0800a799 	.word	0x0800a799
 800a700:	0800a799 	.word	0x0800a799
 800a704:	0800a779 	.word	0x0800a779
 800a708:	0800a799 	.word	0x0800a799
 800a70c:	0800a799 	.word	0x0800a799
 800a710:	0800a799 	.word	0x0800a799
 800a714:	0800a799 	.word	0x0800a799
 800a718:	0800a799 	.word	0x0800a799
 800a71c:	0800a799 	.word	0x0800a799
 800a720:	0800a799 	.word	0x0800a799
 800a724:	0800a781 	.word	0x0800a781
 800a728:	0800a799 	.word	0x0800a799
 800a72c:	0800a799 	.word	0x0800a799
 800a730:	0800a799 	.word	0x0800a799
 800a734:	0800a799 	.word	0x0800a799
 800a738:	0800a799 	.word	0x0800a799
 800a73c:	0800a799 	.word	0x0800a799
 800a740:	0800a799 	.word	0x0800a799
 800a744:	0800a789 	.word	0x0800a789
 800a748:	0800a799 	.word	0x0800a799
 800a74c:	0800a799 	.word	0x0800a799
 800a750:	0800a799 	.word	0x0800a799
 800a754:	0800a799 	.word	0x0800a799
 800a758:	0800a799 	.word	0x0800a799
 800a75c:	0800a799 	.word	0x0800a799
 800a760:	0800a799 	.word	0x0800a799
 800a764:	0800a791 	.word	0x0800a791
 800a768:	2301      	movs	r3, #1
 800a76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a76e:	e326      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a770:	2304      	movs	r3, #4
 800a772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a776:	e322      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a778:	2308      	movs	r3, #8
 800a77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a77e:	e31e      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a780:	2310      	movs	r3, #16
 800a782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a786:	e31a      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a788:	2320      	movs	r3, #32
 800a78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78e:	e316      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a790:	2340      	movs	r3, #64	@ 0x40
 800a792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a796:	e312      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a798:	2380      	movs	r3, #128	@ 0x80
 800a79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a79e:	e30e      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a69      	ldr	r2, [pc, #420]	@ (800a94c <UART_SetConfig+0x33c>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d130      	bne.n	800a80c <UART_SetConfig+0x1fc>
 800a7aa:	4b67      	ldr	r3, [pc, #412]	@ (800a948 <UART_SetConfig+0x338>)
 800a7ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7ae:	f003 0307 	and.w	r3, r3, #7
 800a7b2:	2b05      	cmp	r3, #5
 800a7b4:	d826      	bhi.n	800a804 <UART_SetConfig+0x1f4>
 800a7b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a7bc <UART_SetConfig+0x1ac>)
 800a7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7bc:	0800a7d5 	.word	0x0800a7d5
 800a7c0:	0800a7dd 	.word	0x0800a7dd
 800a7c4:	0800a7e5 	.word	0x0800a7e5
 800a7c8:	0800a7ed 	.word	0x0800a7ed
 800a7cc:	0800a7f5 	.word	0x0800a7f5
 800a7d0:	0800a7fd 	.word	0x0800a7fd
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7da:	e2f0      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a7dc:	2304      	movs	r3, #4
 800a7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7e2:	e2ec      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a7e4:	2308      	movs	r3, #8
 800a7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ea:	e2e8      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a7ec:	2310      	movs	r3, #16
 800a7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f2:	e2e4      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a7f4:	2320      	movs	r3, #32
 800a7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fa:	e2e0      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a7fc:	2340      	movs	r3, #64	@ 0x40
 800a7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a802:	e2dc      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a804:	2380      	movs	r3, #128	@ 0x80
 800a806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a80a:	e2d8      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a4f      	ldr	r2, [pc, #316]	@ (800a950 <UART_SetConfig+0x340>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d130      	bne.n	800a878 <UART_SetConfig+0x268>
 800a816:	4b4c      	ldr	r3, [pc, #304]	@ (800a948 <UART_SetConfig+0x338>)
 800a818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a81a:	f003 0307 	and.w	r3, r3, #7
 800a81e:	2b05      	cmp	r3, #5
 800a820:	d826      	bhi.n	800a870 <UART_SetConfig+0x260>
 800a822:	a201      	add	r2, pc, #4	@ (adr r2, 800a828 <UART_SetConfig+0x218>)
 800a824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a828:	0800a841 	.word	0x0800a841
 800a82c:	0800a849 	.word	0x0800a849
 800a830:	0800a851 	.word	0x0800a851
 800a834:	0800a859 	.word	0x0800a859
 800a838:	0800a861 	.word	0x0800a861
 800a83c:	0800a869 	.word	0x0800a869
 800a840:	2300      	movs	r3, #0
 800a842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a846:	e2ba      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a848:	2304      	movs	r3, #4
 800a84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a84e:	e2b6      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a850:	2308      	movs	r3, #8
 800a852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a856:	e2b2      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a858:	2310      	movs	r3, #16
 800a85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a85e:	e2ae      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a860:	2320      	movs	r3, #32
 800a862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a866:	e2aa      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a868:	2340      	movs	r3, #64	@ 0x40
 800a86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a86e:	e2a6      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a870:	2380      	movs	r3, #128	@ 0x80
 800a872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a876:	e2a2      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a35      	ldr	r2, [pc, #212]	@ (800a954 <UART_SetConfig+0x344>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d130      	bne.n	800a8e4 <UART_SetConfig+0x2d4>
 800a882:	4b31      	ldr	r3, [pc, #196]	@ (800a948 <UART_SetConfig+0x338>)
 800a884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a886:	f003 0307 	and.w	r3, r3, #7
 800a88a:	2b05      	cmp	r3, #5
 800a88c:	d826      	bhi.n	800a8dc <UART_SetConfig+0x2cc>
 800a88e:	a201      	add	r2, pc, #4	@ (adr r2, 800a894 <UART_SetConfig+0x284>)
 800a890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a894:	0800a8ad 	.word	0x0800a8ad
 800a898:	0800a8b5 	.word	0x0800a8b5
 800a89c:	0800a8bd 	.word	0x0800a8bd
 800a8a0:	0800a8c5 	.word	0x0800a8c5
 800a8a4:	0800a8cd 	.word	0x0800a8cd
 800a8a8:	0800a8d5 	.word	0x0800a8d5
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8b2:	e284      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a8b4:	2304      	movs	r3, #4
 800a8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ba:	e280      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a8bc:	2308      	movs	r3, #8
 800a8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8c2:	e27c      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a8c4:	2310      	movs	r3, #16
 800a8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ca:	e278      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a8cc:	2320      	movs	r3, #32
 800a8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8d2:	e274      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a8d4:	2340      	movs	r3, #64	@ 0x40
 800a8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8da:	e270      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a8dc:	2380      	movs	r3, #128	@ 0x80
 800a8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8e2:	e26c      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a1b      	ldr	r2, [pc, #108]	@ (800a958 <UART_SetConfig+0x348>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d142      	bne.n	800a974 <UART_SetConfig+0x364>
 800a8ee:	4b16      	ldr	r3, [pc, #88]	@ (800a948 <UART_SetConfig+0x338>)
 800a8f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8f2:	f003 0307 	and.w	r3, r3, #7
 800a8f6:	2b05      	cmp	r3, #5
 800a8f8:	d838      	bhi.n	800a96c <UART_SetConfig+0x35c>
 800a8fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a900 <UART_SetConfig+0x2f0>)
 800a8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a900:	0800a919 	.word	0x0800a919
 800a904:	0800a921 	.word	0x0800a921
 800a908:	0800a929 	.word	0x0800a929
 800a90c:	0800a931 	.word	0x0800a931
 800a910:	0800a95d 	.word	0x0800a95d
 800a914:	0800a965 	.word	0x0800a965
 800a918:	2300      	movs	r3, #0
 800a91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a91e:	e24e      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a920:	2304      	movs	r3, #4
 800a922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a926:	e24a      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a928:	2308      	movs	r3, #8
 800a92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a92e:	e246      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a930:	2310      	movs	r3, #16
 800a932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a936:	e242      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a938:	cfff69f3 	.word	0xcfff69f3
 800a93c:	58000c00 	.word	0x58000c00
 800a940:	11fff4ff 	.word	0x11fff4ff
 800a944:	40011000 	.word	0x40011000
 800a948:	58024400 	.word	0x58024400
 800a94c:	40004400 	.word	0x40004400
 800a950:	40004800 	.word	0x40004800
 800a954:	40004c00 	.word	0x40004c00
 800a958:	40005000 	.word	0x40005000
 800a95c:	2320      	movs	r3, #32
 800a95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a962:	e22c      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a964:	2340      	movs	r3, #64	@ 0x40
 800a966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a96a:	e228      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a96c:	2380      	movs	r3, #128	@ 0x80
 800a96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a972:	e224      	b.n	800adbe <UART_SetConfig+0x7ae>
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4ab1      	ldr	r2, [pc, #708]	@ (800ac40 <UART_SetConfig+0x630>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d176      	bne.n	800aa6c <UART_SetConfig+0x45c>
 800a97e:	4bb1      	ldr	r3, [pc, #708]	@ (800ac44 <UART_SetConfig+0x634>)
 800a980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a982:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a986:	2b28      	cmp	r3, #40	@ 0x28
 800a988:	d86c      	bhi.n	800aa64 <UART_SetConfig+0x454>
 800a98a:	a201      	add	r2, pc, #4	@ (adr r2, 800a990 <UART_SetConfig+0x380>)
 800a98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a990:	0800aa35 	.word	0x0800aa35
 800a994:	0800aa65 	.word	0x0800aa65
 800a998:	0800aa65 	.word	0x0800aa65
 800a99c:	0800aa65 	.word	0x0800aa65
 800a9a0:	0800aa65 	.word	0x0800aa65
 800a9a4:	0800aa65 	.word	0x0800aa65
 800a9a8:	0800aa65 	.word	0x0800aa65
 800a9ac:	0800aa65 	.word	0x0800aa65
 800a9b0:	0800aa3d 	.word	0x0800aa3d
 800a9b4:	0800aa65 	.word	0x0800aa65
 800a9b8:	0800aa65 	.word	0x0800aa65
 800a9bc:	0800aa65 	.word	0x0800aa65
 800a9c0:	0800aa65 	.word	0x0800aa65
 800a9c4:	0800aa65 	.word	0x0800aa65
 800a9c8:	0800aa65 	.word	0x0800aa65
 800a9cc:	0800aa65 	.word	0x0800aa65
 800a9d0:	0800aa45 	.word	0x0800aa45
 800a9d4:	0800aa65 	.word	0x0800aa65
 800a9d8:	0800aa65 	.word	0x0800aa65
 800a9dc:	0800aa65 	.word	0x0800aa65
 800a9e0:	0800aa65 	.word	0x0800aa65
 800a9e4:	0800aa65 	.word	0x0800aa65
 800a9e8:	0800aa65 	.word	0x0800aa65
 800a9ec:	0800aa65 	.word	0x0800aa65
 800a9f0:	0800aa4d 	.word	0x0800aa4d
 800a9f4:	0800aa65 	.word	0x0800aa65
 800a9f8:	0800aa65 	.word	0x0800aa65
 800a9fc:	0800aa65 	.word	0x0800aa65
 800aa00:	0800aa65 	.word	0x0800aa65
 800aa04:	0800aa65 	.word	0x0800aa65
 800aa08:	0800aa65 	.word	0x0800aa65
 800aa0c:	0800aa65 	.word	0x0800aa65
 800aa10:	0800aa55 	.word	0x0800aa55
 800aa14:	0800aa65 	.word	0x0800aa65
 800aa18:	0800aa65 	.word	0x0800aa65
 800aa1c:	0800aa65 	.word	0x0800aa65
 800aa20:	0800aa65 	.word	0x0800aa65
 800aa24:	0800aa65 	.word	0x0800aa65
 800aa28:	0800aa65 	.word	0x0800aa65
 800aa2c:	0800aa65 	.word	0x0800aa65
 800aa30:	0800aa5d 	.word	0x0800aa5d
 800aa34:	2301      	movs	r3, #1
 800aa36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa3a:	e1c0      	b.n	800adbe <UART_SetConfig+0x7ae>
 800aa3c:	2304      	movs	r3, #4
 800aa3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa42:	e1bc      	b.n	800adbe <UART_SetConfig+0x7ae>
 800aa44:	2308      	movs	r3, #8
 800aa46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa4a:	e1b8      	b.n	800adbe <UART_SetConfig+0x7ae>
 800aa4c:	2310      	movs	r3, #16
 800aa4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa52:	e1b4      	b.n	800adbe <UART_SetConfig+0x7ae>
 800aa54:	2320      	movs	r3, #32
 800aa56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa5a:	e1b0      	b.n	800adbe <UART_SetConfig+0x7ae>
 800aa5c:	2340      	movs	r3, #64	@ 0x40
 800aa5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa62:	e1ac      	b.n	800adbe <UART_SetConfig+0x7ae>
 800aa64:	2380      	movs	r3, #128	@ 0x80
 800aa66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa6a:	e1a8      	b.n	800adbe <UART_SetConfig+0x7ae>
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a75      	ldr	r2, [pc, #468]	@ (800ac48 <UART_SetConfig+0x638>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d130      	bne.n	800aad8 <UART_SetConfig+0x4c8>
 800aa76:	4b73      	ldr	r3, [pc, #460]	@ (800ac44 <UART_SetConfig+0x634>)
 800aa78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa7a:	f003 0307 	and.w	r3, r3, #7
 800aa7e:	2b05      	cmp	r3, #5
 800aa80:	d826      	bhi.n	800aad0 <UART_SetConfig+0x4c0>
 800aa82:	a201      	add	r2, pc, #4	@ (adr r2, 800aa88 <UART_SetConfig+0x478>)
 800aa84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa88:	0800aaa1 	.word	0x0800aaa1
 800aa8c:	0800aaa9 	.word	0x0800aaa9
 800aa90:	0800aab1 	.word	0x0800aab1
 800aa94:	0800aab9 	.word	0x0800aab9
 800aa98:	0800aac1 	.word	0x0800aac1
 800aa9c:	0800aac9 	.word	0x0800aac9
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaa6:	e18a      	b.n	800adbe <UART_SetConfig+0x7ae>
 800aaa8:	2304      	movs	r3, #4
 800aaaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaae:	e186      	b.n	800adbe <UART_SetConfig+0x7ae>
 800aab0:	2308      	movs	r3, #8
 800aab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aab6:	e182      	b.n	800adbe <UART_SetConfig+0x7ae>
 800aab8:	2310      	movs	r3, #16
 800aaba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aabe:	e17e      	b.n	800adbe <UART_SetConfig+0x7ae>
 800aac0:	2320      	movs	r3, #32
 800aac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aac6:	e17a      	b.n	800adbe <UART_SetConfig+0x7ae>
 800aac8:	2340      	movs	r3, #64	@ 0x40
 800aaca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aace:	e176      	b.n	800adbe <UART_SetConfig+0x7ae>
 800aad0:	2380      	movs	r3, #128	@ 0x80
 800aad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aad6:	e172      	b.n	800adbe <UART_SetConfig+0x7ae>
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a5b      	ldr	r2, [pc, #364]	@ (800ac4c <UART_SetConfig+0x63c>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d130      	bne.n	800ab44 <UART_SetConfig+0x534>
 800aae2:	4b58      	ldr	r3, [pc, #352]	@ (800ac44 <UART_SetConfig+0x634>)
 800aae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aae6:	f003 0307 	and.w	r3, r3, #7
 800aaea:	2b05      	cmp	r3, #5
 800aaec:	d826      	bhi.n	800ab3c <UART_SetConfig+0x52c>
 800aaee:	a201      	add	r2, pc, #4	@ (adr r2, 800aaf4 <UART_SetConfig+0x4e4>)
 800aaf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf4:	0800ab0d 	.word	0x0800ab0d
 800aaf8:	0800ab15 	.word	0x0800ab15
 800aafc:	0800ab1d 	.word	0x0800ab1d
 800ab00:	0800ab25 	.word	0x0800ab25
 800ab04:	0800ab2d 	.word	0x0800ab2d
 800ab08:	0800ab35 	.word	0x0800ab35
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab12:	e154      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ab14:	2304      	movs	r3, #4
 800ab16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab1a:	e150      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ab1c:	2308      	movs	r3, #8
 800ab1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab22:	e14c      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ab24:	2310      	movs	r3, #16
 800ab26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab2a:	e148      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ab2c:	2320      	movs	r3, #32
 800ab2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab32:	e144      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ab34:	2340      	movs	r3, #64	@ 0x40
 800ab36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab3a:	e140      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ab3c:	2380      	movs	r3, #128	@ 0x80
 800ab3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab42:	e13c      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a41      	ldr	r2, [pc, #260]	@ (800ac50 <UART_SetConfig+0x640>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	f040 8082 	bne.w	800ac54 <UART_SetConfig+0x644>
 800ab50:	4b3c      	ldr	r3, [pc, #240]	@ (800ac44 <UART_SetConfig+0x634>)
 800ab52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab58:	2b28      	cmp	r3, #40	@ 0x28
 800ab5a:	d86d      	bhi.n	800ac38 <UART_SetConfig+0x628>
 800ab5c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab64 <UART_SetConfig+0x554>)
 800ab5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab62:	bf00      	nop
 800ab64:	0800ac09 	.word	0x0800ac09
 800ab68:	0800ac39 	.word	0x0800ac39
 800ab6c:	0800ac39 	.word	0x0800ac39
 800ab70:	0800ac39 	.word	0x0800ac39
 800ab74:	0800ac39 	.word	0x0800ac39
 800ab78:	0800ac39 	.word	0x0800ac39
 800ab7c:	0800ac39 	.word	0x0800ac39
 800ab80:	0800ac39 	.word	0x0800ac39
 800ab84:	0800ac11 	.word	0x0800ac11
 800ab88:	0800ac39 	.word	0x0800ac39
 800ab8c:	0800ac39 	.word	0x0800ac39
 800ab90:	0800ac39 	.word	0x0800ac39
 800ab94:	0800ac39 	.word	0x0800ac39
 800ab98:	0800ac39 	.word	0x0800ac39
 800ab9c:	0800ac39 	.word	0x0800ac39
 800aba0:	0800ac39 	.word	0x0800ac39
 800aba4:	0800ac19 	.word	0x0800ac19
 800aba8:	0800ac39 	.word	0x0800ac39
 800abac:	0800ac39 	.word	0x0800ac39
 800abb0:	0800ac39 	.word	0x0800ac39
 800abb4:	0800ac39 	.word	0x0800ac39
 800abb8:	0800ac39 	.word	0x0800ac39
 800abbc:	0800ac39 	.word	0x0800ac39
 800abc0:	0800ac39 	.word	0x0800ac39
 800abc4:	0800ac21 	.word	0x0800ac21
 800abc8:	0800ac39 	.word	0x0800ac39
 800abcc:	0800ac39 	.word	0x0800ac39
 800abd0:	0800ac39 	.word	0x0800ac39
 800abd4:	0800ac39 	.word	0x0800ac39
 800abd8:	0800ac39 	.word	0x0800ac39
 800abdc:	0800ac39 	.word	0x0800ac39
 800abe0:	0800ac39 	.word	0x0800ac39
 800abe4:	0800ac29 	.word	0x0800ac29
 800abe8:	0800ac39 	.word	0x0800ac39
 800abec:	0800ac39 	.word	0x0800ac39
 800abf0:	0800ac39 	.word	0x0800ac39
 800abf4:	0800ac39 	.word	0x0800ac39
 800abf8:	0800ac39 	.word	0x0800ac39
 800abfc:	0800ac39 	.word	0x0800ac39
 800ac00:	0800ac39 	.word	0x0800ac39
 800ac04:	0800ac31 	.word	0x0800ac31
 800ac08:	2301      	movs	r3, #1
 800ac0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac0e:	e0d6      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ac10:	2304      	movs	r3, #4
 800ac12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac16:	e0d2      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ac18:	2308      	movs	r3, #8
 800ac1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac1e:	e0ce      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ac20:	2310      	movs	r3, #16
 800ac22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac26:	e0ca      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ac28:	2320      	movs	r3, #32
 800ac2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac2e:	e0c6      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ac30:	2340      	movs	r3, #64	@ 0x40
 800ac32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac36:	e0c2      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ac38:	2380      	movs	r3, #128	@ 0x80
 800ac3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac3e:	e0be      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ac40:	40011400 	.word	0x40011400
 800ac44:	58024400 	.word	0x58024400
 800ac48:	40007800 	.word	0x40007800
 800ac4c:	40007c00 	.word	0x40007c00
 800ac50:	40011800 	.word	0x40011800
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4aad      	ldr	r2, [pc, #692]	@ (800af10 <UART_SetConfig+0x900>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d176      	bne.n	800ad4c <UART_SetConfig+0x73c>
 800ac5e:	4bad      	ldr	r3, [pc, #692]	@ (800af14 <UART_SetConfig+0x904>)
 800ac60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac66:	2b28      	cmp	r3, #40	@ 0x28
 800ac68:	d86c      	bhi.n	800ad44 <UART_SetConfig+0x734>
 800ac6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac70 <UART_SetConfig+0x660>)
 800ac6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac70:	0800ad15 	.word	0x0800ad15
 800ac74:	0800ad45 	.word	0x0800ad45
 800ac78:	0800ad45 	.word	0x0800ad45
 800ac7c:	0800ad45 	.word	0x0800ad45
 800ac80:	0800ad45 	.word	0x0800ad45
 800ac84:	0800ad45 	.word	0x0800ad45
 800ac88:	0800ad45 	.word	0x0800ad45
 800ac8c:	0800ad45 	.word	0x0800ad45
 800ac90:	0800ad1d 	.word	0x0800ad1d
 800ac94:	0800ad45 	.word	0x0800ad45
 800ac98:	0800ad45 	.word	0x0800ad45
 800ac9c:	0800ad45 	.word	0x0800ad45
 800aca0:	0800ad45 	.word	0x0800ad45
 800aca4:	0800ad45 	.word	0x0800ad45
 800aca8:	0800ad45 	.word	0x0800ad45
 800acac:	0800ad45 	.word	0x0800ad45
 800acb0:	0800ad25 	.word	0x0800ad25
 800acb4:	0800ad45 	.word	0x0800ad45
 800acb8:	0800ad45 	.word	0x0800ad45
 800acbc:	0800ad45 	.word	0x0800ad45
 800acc0:	0800ad45 	.word	0x0800ad45
 800acc4:	0800ad45 	.word	0x0800ad45
 800acc8:	0800ad45 	.word	0x0800ad45
 800accc:	0800ad45 	.word	0x0800ad45
 800acd0:	0800ad2d 	.word	0x0800ad2d
 800acd4:	0800ad45 	.word	0x0800ad45
 800acd8:	0800ad45 	.word	0x0800ad45
 800acdc:	0800ad45 	.word	0x0800ad45
 800ace0:	0800ad45 	.word	0x0800ad45
 800ace4:	0800ad45 	.word	0x0800ad45
 800ace8:	0800ad45 	.word	0x0800ad45
 800acec:	0800ad45 	.word	0x0800ad45
 800acf0:	0800ad35 	.word	0x0800ad35
 800acf4:	0800ad45 	.word	0x0800ad45
 800acf8:	0800ad45 	.word	0x0800ad45
 800acfc:	0800ad45 	.word	0x0800ad45
 800ad00:	0800ad45 	.word	0x0800ad45
 800ad04:	0800ad45 	.word	0x0800ad45
 800ad08:	0800ad45 	.word	0x0800ad45
 800ad0c:	0800ad45 	.word	0x0800ad45
 800ad10:	0800ad3d 	.word	0x0800ad3d
 800ad14:	2301      	movs	r3, #1
 800ad16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1a:	e050      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ad1c:	2304      	movs	r3, #4
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad22:	e04c      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ad24:	2308      	movs	r3, #8
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2a:	e048      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ad2c:	2310      	movs	r3, #16
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad32:	e044      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ad34:	2320      	movs	r3, #32
 800ad36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3a:	e040      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ad3c:	2340      	movs	r3, #64	@ 0x40
 800ad3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad42:	e03c      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ad44:	2380      	movs	r3, #128	@ 0x80
 800ad46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad4a:	e038      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a71      	ldr	r2, [pc, #452]	@ (800af18 <UART_SetConfig+0x908>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d130      	bne.n	800adb8 <UART_SetConfig+0x7a8>
 800ad56:	4b6f      	ldr	r3, [pc, #444]	@ (800af14 <UART_SetConfig+0x904>)
 800ad58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad5a:	f003 0307 	and.w	r3, r3, #7
 800ad5e:	2b05      	cmp	r3, #5
 800ad60:	d826      	bhi.n	800adb0 <UART_SetConfig+0x7a0>
 800ad62:	a201      	add	r2, pc, #4	@ (adr r2, 800ad68 <UART_SetConfig+0x758>)
 800ad64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad68:	0800ad81 	.word	0x0800ad81
 800ad6c:	0800ad89 	.word	0x0800ad89
 800ad70:	0800ad91 	.word	0x0800ad91
 800ad74:	0800ad99 	.word	0x0800ad99
 800ad78:	0800ada1 	.word	0x0800ada1
 800ad7c:	0800ada9 	.word	0x0800ada9
 800ad80:	2302      	movs	r3, #2
 800ad82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad86:	e01a      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ad88:	2304      	movs	r3, #4
 800ad8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8e:	e016      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ad90:	2308      	movs	r3, #8
 800ad92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad96:	e012      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ad98:	2310      	movs	r3, #16
 800ad9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad9e:	e00e      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ada0:	2320      	movs	r3, #32
 800ada2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ada6:	e00a      	b.n	800adbe <UART_SetConfig+0x7ae>
 800ada8:	2340      	movs	r3, #64	@ 0x40
 800adaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adae:	e006      	b.n	800adbe <UART_SetConfig+0x7ae>
 800adb0:	2380      	movs	r3, #128	@ 0x80
 800adb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adb6:	e002      	b.n	800adbe <UART_SetConfig+0x7ae>
 800adb8:	2380      	movs	r3, #128	@ 0x80
 800adba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a55      	ldr	r2, [pc, #340]	@ (800af18 <UART_SetConfig+0x908>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	f040 80f8 	bne.w	800afba <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800adca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800adce:	2b20      	cmp	r3, #32
 800add0:	dc46      	bgt.n	800ae60 <UART_SetConfig+0x850>
 800add2:	2b02      	cmp	r3, #2
 800add4:	db75      	blt.n	800aec2 <UART_SetConfig+0x8b2>
 800add6:	3b02      	subs	r3, #2
 800add8:	2b1e      	cmp	r3, #30
 800adda:	d872      	bhi.n	800aec2 <UART_SetConfig+0x8b2>
 800addc:	a201      	add	r2, pc, #4	@ (adr r2, 800ade4 <UART_SetConfig+0x7d4>)
 800adde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade2:	bf00      	nop
 800ade4:	0800ae67 	.word	0x0800ae67
 800ade8:	0800aec3 	.word	0x0800aec3
 800adec:	0800ae6f 	.word	0x0800ae6f
 800adf0:	0800aec3 	.word	0x0800aec3
 800adf4:	0800aec3 	.word	0x0800aec3
 800adf8:	0800aec3 	.word	0x0800aec3
 800adfc:	0800ae7f 	.word	0x0800ae7f
 800ae00:	0800aec3 	.word	0x0800aec3
 800ae04:	0800aec3 	.word	0x0800aec3
 800ae08:	0800aec3 	.word	0x0800aec3
 800ae0c:	0800aec3 	.word	0x0800aec3
 800ae10:	0800aec3 	.word	0x0800aec3
 800ae14:	0800aec3 	.word	0x0800aec3
 800ae18:	0800aec3 	.word	0x0800aec3
 800ae1c:	0800ae8f 	.word	0x0800ae8f
 800ae20:	0800aec3 	.word	0x0800aec3
 800ae24:	0800aec3 	.word	0x0800aec3
 800ae28:	0800aec3 	.word	0x0800aec3
 800ae2c:	0800aec3 	.word	0x0800aec3
 800ae30:	0800aec3 	.word	0x0800aec3
 800ae34:	0800aec3 	.word	0x0800aec3
 800ae38:	0800aec3 	.word	0x0800aec3
 800ae3c:	0800aec3 	.word	0x0800aec3
 800ae40:	0800aec3 	.word	0x0800aec3
 800ae44:	0800aec3 	.word	0x0800aec3
 800ae48:	0800aec3 	.word	0x0800aec3
 800ae4c:	0800aec3 	.word	0x0800aec3
 800ae50:	0800aec3 	.word	0x0800aec3
 800ae54:	0800aec3 	.word	0x0800aec3
 800ae58:	0800aec3 	.word	0x0800aec3
 800ae5c:	0800aeb5 	.word	0x0800aeb5
 800ae60:	2b40      	cmp	r3, #64	@ 0x40
 800ae62:	d02a      	beq.n	800aeba <UART_SetConfig+0x8aa>
 800ae64:	e02d      	b.n	800aec2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ae66:	f7fd f9c1 	bl	80081ec <HAL_RCCEx_GetD3PCLK1Freq>
 800ae6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae6c:	e02f      	b.n	800aece <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fd f9d0 	bl	8008218 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae7c:	e027      	b.n	800aece <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae7e:	f107 0318 	add.w	r3, r7, #24
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fd fb1c 	bl	80084c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae8c:	e01f      	b.n	800aece <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae8e:	4b21      	ldr	r3, [pc, #132]	@ (800af14 <UART_SetConfig+0x904>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f003 0320 	and.w	r3, r3, #32
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d009      	beq.n	800aeae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae9a:	4b1e      	ldr	r3, [pc, #120]	@ (800af14 <UART_SetConfig+0x904>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	08db      	lsrs	r3, r3, #3
 800aea0:	f003 0303 	and.w	r3, r3, #3
 800aea4:	4a1d      	ldr	r2, [pc, #116]	@ (800af1c <UART_SetConfig+0x90c>)
 800aea6:	fa22 f303 	lsr.w	r3, r2, r3
 800aeaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aeac:	e00f      	b.n	800aece <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aeae:	4b1b      	ldr	r3, [pc, #108]	@ (800af1c <UART_SetConfig+0x90c>)
 800aeb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeb2:	e00c      	b.n	800aece <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aeb4:	4b1a      	ldr	r3, [pc, #104]	@ (800af20 <UART_SetConfig+0x910>)
 800aeb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeb8:	e009      	b.n	800aece <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aeba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aec0:	e005      	b.n	800aece <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aec2:	2300      	movs	r3, #0
 800aec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aecc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f000 81ee 	beq.w	800b2b2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeda:	4a12      	ldr	r2, [pc, #72]	@ (800af24 <UART_SetConfig+0x914>)
 800aedc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aee0:	461a      	mov	r2, r3
 800aee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aee4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aee8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	685a      	ldr	r2, [r3, #4]
 800aeee:	4613      	mov	r3, r2
 800aef0:	005b      	lsls	r3, r3, #1
 800aef2:	4413      	add	r3, r2
 800aef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d305      	bcc.n	800af06 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af02:	429a      	cmp	r2, r3
 800af04:	d910      	bls.n	800af28 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800af0c:	e1d1      	b.n	800b2b2 <UART_SetConfig+0xca2>
 800af0e:	bf00      	nop
 800af10:	40011c00 	.word	0x40011c00
 800af14:	58024400 	.word	0x58024400
 800af18:	58000c00 	.word	0x58000c00
 800af1c:	03d09000 	.word	0x03d09000
 800af20:	003d0900 	.word	0x003d0900
 800af24:	0801f2d0 	.word	0x0801f2d0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af2a:	2200      	movs	r2, #0
 800af2c:	60bb      	str	r3, [r7, #8]
 800af2e:	60fa      	str	r2, [r7, #12]
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af34:	4ac0      	ldr	r2, [pc, #768]	@ (800b238 <UART_SetConfig+0xc28>)
 800af36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	2200      	movs	r2, #0
 800af3e:	603b      	str	r3, [r7, #0]
 800af40:	607a      	str	r2, [r7, #4]
 800af42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af4a:	f7f5 fa31 	bl	80003b0 <__aeabi_uldivmod>
 800af4e:	4602      	mov	r2, r0
 800af50:	460b      	mov	r3, r1
 800af52:	4610      	mov	r0, r2
 800af54:	4619      	mov	r1, r3
 800af56:	f04f 0200 	mov.w	r2, #0
 800af5a:	f04f 0300 	mov.w	r3, #0
 800af5e:	020b      	lsls	r3, r1, #8
 800af60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af64:	0202      	lsls	r2, r0, #8
 800af66:	6979      	ldr	r1, [r7, #20]
 800af68:	6849      	ldr	r1, [r1, #4]
 800af6a:	0849      	lsrs	r1, r1, #1
 800af6c:	2000      	movs	r0, #0
 800af6e:	460c      	mov	r4, r1
 800af70:	4605      	mov	r5, r0
 800af72:	eb12 0804 	adds.w	r8, r2, r4
 800af76:	eb43 0905 	adc.w	r9, r3, r5
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	469a      	mov	sl, r3
 800af82:	4693      	mov	fp, r2
 800af84:	4652      	mov	r2, sl
 800af86:	465b      	mov	r3, fp
 800af88:	4640      	mov	r0, r8
 800af8a:	4649      	mov	r1, r9
 800af8c:	f7f5 fa10 	bl	80003b0 <__aeabi_uldivmod>
 800af90:	4602      	mov	r2, r0
 800af92:	460b      	mov	r3, r1
 800af94:	4613      	mov	r3, r2
 800af96:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800af98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af9e:	d308      	bcc.n	800afb2 <UART_SetConfig+0x9a2>
 800afa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afa6:	d204      	bcs.n	800afb2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800afae:	60da      	str	r2, [r3, #12]
 800afb0:	e17f      	b.n	800b2b2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800afb8:	e17b      	b.n	800b2b2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	69db      	ldr	r3, [r3, #28]
 800afbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800afc2:	f040 80bd 	bne.w	800b140 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800afc6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800afca:	2b20      	cmp	r3, #32
 800afcc:	dc48      	bgt.n	800b060 <UART_SetConfig+0xa50>
 800afce:	2b00      	cmp	r3, #0
 800afd0:	db7b      	blt.n	800b0ca <UART_SetConfig+0xaba>
 800afd2:	2b20      	cmp	r3, #32
 800afd4:	d879      	bhi.n	800b0ca <UART_SetConfig+0xaba>
 800afd6:	a201      	add	r2, pc, #4	@ (adr r2, 800afdc <UART_SetConfig+0x9cc>)
 800afd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afdc:	0800b067 	.word	0x0800b067
 800afe0:	0800b06f 	.word	0x0800b06f
 800afe4:	0800b0cb 	.word	0x0800b0cb
 800afe8:	0800b0cb 	.word	0x0800b0cb
 800afec:	0800b077 	.word	0x0800b077
 800aff0:	0800b0cb 	.word	0x0800b0cb
 800aff4:	0800b0cb 	.word	0x0800b0cb
 800aff8:	0800b0cb 	.word	0x0800b0cb
 800affc:	0800b087 	.word	0x0800b087
 800b000:	0800b0cb 	.word	0x0800b0cb
 800b004:	0800b0cb 	.word	0x0800b0cb
 800b008:	0800b0cb 	.word	0x0800b0cb
 800b00c:	0800b0cb 	.word	0x0800b0cb
 800b010:	0800b0cb 	.word	0x0800b0cb
 800b014:	0800b0cb 	.word	0x0800b0cb
 800b018:	0800b0cb 	.word	0x0800b0cb
 800b01c:	0800b097 	.word	0x0800b097
 800b020:	0800b0cb 	.word	0x0800b0cb
 800b024:	0800b0cb 	.word	0x0800b0cb
 800b028:	0800b0cb 	.word	0x0800b0cb
 800b02c:	0800b0cb 	.word	0x0800b0cb
 800b030:	0800b0cb 	.word	0x0800b0cb
 800b034:	0800b0cb 	.word	0x0800b0cb
 800b038:	0800b0cb 	.word	0x0800b0cb
 800b03c:	0800b0cb 	.word	0x0800b0cb
 800b040:	0800b0cb 	.word	0x0800b0cb
 800b044:	0800b0cb 	.word	0x0800b0cb
 800b048:	0800b0cb 	.word	0x0800b0cb
 800b04c:	0800b0cb 	.word	0x0800b0cb
 800b050:	0800b0cb 	.word	0x0800b0cb
 800b054:	0800b0cb 	.word	0x0800b0cb
 800b058:	0800b0cb 	.word	0x0800b0cb
 800b05c:	0800b0bd 	.word	0x0800b0bd
 800b060:	2b40      	cmp	r3, #64	@ 0x40
 800b062:	d02e      	beq.n	800b0c2 <UART_SetConfig+0xab2>
 800b064:	e031      	b.n	800b0ca <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b066:	f7fb feb3 	bl	8006dd0 <HAL_RCC_GetPCLK1Freq>
 800b06a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b06c:	e033      	b.n	800b0d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b06e:	f7fb fec5 	bl	8006dfc <HAL_RCC_GetPCLK2Freq>
 800b072:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b074:	e02f      	b.n	800b0d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fd f8cc 	bl	8008218 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b084:	e027      	b.n	800b0d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b086:	f107 0318 	add.w	r3, r7, #24
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7fd fa18 	bl	80084c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b094:	e01f      	b.n	800b0d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b096:	4b69      	ldr	r3, [pc, #420]	@ (800b23c <UART_SetConfig+0xc2c>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 0320 	and.w	r3, r3, #32
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d009      	beq.n	800b0b6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b0a2:	4b66      	ldr	r3, [pc, #408]	@ (800b23c <UART_SetConfig+0xc2c>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	08db      	lsrs	r3, r3, #3
 800b0a8:	f003 0303 	and.w	r3, r3, #3
 800b0ac:	4a64      	ldr	r2, [pc, #400]	@ (800b240 <UART_SetConfig+0xc30>)
 800b0ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0b4:	e00f      	b.n	800b0d6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b0b6:	4b62      	ldr	r3, [pc, #392]	@ (800b240 <UART_SetConfig+0xc30>)
 800b0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0ba:	e00c      	b.n	800b0d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b0bc:	4b61      	ldr	r3, [pc, #388]	@ (800b244 <UART_SetConfig+0xc34>)
 800b0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0c0:	e009      	b.n	800b0d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0c8:	e005      	b.n	800b0d6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b0d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b0d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f000 80ea 	beq.w	800b2b2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0e2:	4a55      	ldr	r2, [pc, #340]	@ (800b238 <UART_SetConfig+0xc28>)
 800b0e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0f0:	005a      	lsls	r2, r3, #1
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	085b      	lsrs	r3, r3, #1
 800b0f8:	441a      	add	r2, r3
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b102:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b106:	2b0f      	cmp	r3, #15
 800b108:	d916      	bls.n	800b138 <UART_SetConfig+0xb28>
 800b10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b10c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b110:	d212      	bcs.n	800b138 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b114:	b29b      	uxth	r3, r3
 800b116:	f023 030f 	bic.w	r3, r3, #15
 800b11a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11e:	085b      	lsrs	r3, r3, #1
 800b120:	b29b      	uxth	r3, r3
 800b122:	f003 0307 	and.w	r3, r3, #7
 800b126:	b29a      	uxth	r2, r3
 800b128:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b12a:	4313      	orrs	r3, r2
 800b12c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b134:	60da      	str	r2, [r3, #12]
 800b136:	e0bc      	b.n	800b2b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b13e:	e0b8      	b.n	800b2b2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b140:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b144:	2b20      	cmp	r3, #32
 800b146:	dc4b      	bgt.n	800b1e0 <UART_SetConfig+0xbd0>
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f2c0 8087 	blt.w	800b25c <UART_SetConfig+0xc4c>
 800b14e:	2b20      	cmp	r3, #32
 800b150:	f200 8084 	bhi.w	800b25c <UART_SetConfig+0xc4c>
 800b154:	a201      	add	r2, pc, #4	@ (adr r2, 800b15c <UART_SetConfig+0xb4c>)
 800b156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b15a:	bf00      	nop
 800b15c:	0800b1e7 	.word	0x0800b1e7
 800b160:	0800b1ef 	.word	0x0800b1ef
 800b164:	0800b25d 	.word	0x0800b25d
 800b168:	0800b25d 	.word	0x0800b25d
 800b16c:	0800b1f7 	.word	0x0800b1f7
 800b170:	0800b25d 	.word	0x0800b25d
 800b174:	0800b25d 	.word	0x0800b25d
 800b178:	0800b25d 	.word	0x0800b25d
 800b17c:	0800b207 	.word	0x0800b207
 800b180:	0800b25d 	.word	0x0800b25d
 800b184:	0800b25d 	.word	0x0800b25d
 800b188:	0800b25d 	.word	0x0800b25d
 800b18c:	0800b25d 	.word	0x0800b25d
 800b190:	0800b25d 	.word	0x0800b25d
 800b194:	0800b25d 	.word	0x0800b25d
 800b198:	0800b25d 	.word	0x0800b25d
 800b19c:	0800b217 	.word	0x0800b217
 800b1a0:	0800b25d 	.word	0x0800b25d
 800b1a4:	0800b25d 	.word	0x0800b25d
 800b1a8:	0800b25d 	.word	0x0800b25d
 800b1ac:	0800b25d 	.word	0x0800b25d
 800b1b0:	0800b25d 	.word	0x0800b25d
 800b1b4:	0800b25d 	.word	0x0800b25d
 800b1b8:	0800b25d 	.word	0x0800b25d
 800b1bc:	0800b25d 	.word	0x0800b25d
 800b1c0:	0800b25d 	.word	0x0800b25d
 800b1c4:	0800b25d 	.word	0x0800b25d
 800b1c8:	0800b25d 	.word	0x0800b25d
 800b1cc:	0800b25d 	.word	0x0800b25d
 800b1d0:	0800b25d 	.word	0x0800b25d
 800b1d4:	0800b25d 	.word	0x0800b25d
 800b1d8:	0800b25d 	.word	0x0800b25d
 800b1dc:	0800b24f 	.word	0x0800b24f
 800b1e0:	2b40      	cmp	r3, #64	@ 0x40
 800b1e2:	d037      	beq.n	800b254 <UART_SetConfig+0xc44>
 800b1e4:	e03a      	b.n	800b25c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1e6:	f7fb fdf3 	bl	8006dd0 <HAL_RCC_GetPCLK1Freq>
 800b1ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b1ec:	e03c      	b.n	800b268 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1ee:	f7fb fe05 	bl	8006dfc <HAL_RCC_GetPCLK2Freq>
 800b1f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b1f4:	e038      	b.n	800b268 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fd f80c 	bl	8008218 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b204:	e030      	b.n	800b268 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b206:	f107 0318 	add.w	r3, r7, #24
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fd f958 	bl	80084c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b214:	e028      	b.n	800b268 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b216:	4b09      	ldr	r3, [pc, #36]	@ (800b23c <UART_SetConfig+0xc2c>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 0320 	and.w	r3, r3, #32
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d012      	beq.n	800b248 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b222:	4b06      	ldr	r3, [pc, #24]	@ (800b23c <UART_SetConfig+0xc2c>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	08db      	lsrs	r3, r3, #3
 800b228:	f003 0303 	and.w	r3, r3, #3
 800b22c:	4a04      	ldr	r2, [pc, #16]	@ (800b240 <UART_SetConfig+0xc30>)
 800b22e:	fa22 f303 	lsr.w	r3, r2, r3
 800b232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b234:	e018      	b.n	800b268 <UART_SetConfig+0xc58>
 800b236:	bf00      	nop
 800b238:	0801f2d0 	.word	0x0801f2d0
 800b23c:	58024400 	.word	0x58024400
 800b240:	03d09000 	.word	0x03d09000
 800b244:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b248:	4b24      	ldr	r3, [pc, #144]	@ (800b2dc <UART_SetConfig+0xccc>)
 800b24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b24c:	e00c      	b.n	800b268 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b24e:	4b24      	ldr	r3, [pc, #144]	@ (800b2e0 <UART_SetConfig+0xcd0>)
 800b250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b252:	e009      	b.n	800b268 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b254:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b25a:	e005      	b.n	800b268 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b25c:	2300      	movs	r3, #0
 800b25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b266:	bf00      	nop
    }

    if (pclk != 0U)
 800b268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d021      	beq.n	800b2b2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b272:	4a1c      	ldr	r2, [pc, #112]	@ (800b2e4 <UART_SetConfig+0xcd4>)
 800b274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b278:	461a      	mov	r2, r3
 800b27a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b27c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	085b      	lsrs	r3, r3, #1
 800b286:	441a      	add	r2, r3
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b290:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b294:	2b0f      	cmp	r3, #15
 800b296:	d909      	bls.n	800b2ac <UART_SetConfig+0xc9c>
 800b298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b29a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b29e:	d205      	bcs.n	800b2ac <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	60da      	str	r2, [r3, #12]
 800b2aa:	e002      	b.n	800b2b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b2ce:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3748      	adds	r7, #72	@ 0x48
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2dc:	03d09000 	.word	0x03d09000
 800b2e0:	003d0900 	.word	0x003d0900
 800b2e4:	0801f2d0 	.word	0x0801f2d0

0800b2e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2f4:	f003 0308 	and.w	r3, r3, #8
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00a      	beq.n	800b312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	430a      	orrs	r2, r1
 800b310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b316:	f003 0301 	and.w	r3, r3, #1
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00a      	beq.n	800b334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	430a      	orrs	r2, r1
 800b332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b338:	f003 0302 	and.w	r3, r3, #2
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00a      	beq.n	800b356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	430a      	orrs	r2, r1
 800b354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b35a:	f003 0304 	and.w	r3, r3, #4
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00a      	beq.n	800b378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	430a      	orrs	r2, r1
 800b376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b37c:	f003 0310 	and.w	r3, r3, #16
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00a      	beq.n	800b39a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	430a      	orrs	r2, r1
 800b398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b39e:	f003 0320 	and.w	r3, r3, #32
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00a      	beq.n	800b3bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	430a      	orrs	r2, r1
 800b3ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d01a      	beq.n	800b3fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	430a      	orrs	r2, r1
 800b3dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3e6:	d10a      	bne.n	800b3fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	430a      	orrs	r2, r1
 800b3fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b406:	2b00      	cmp	r3, #0
 800b408:	d00a      	beq.n	800b420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	430a      	orrs	r2, r1
 800b41e:	605a      	str	r2, [r3, #4]
  }
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b098      	sub	sp, #96	@ 0x60
 800b430:	af02      	add	r7, sp, #8
 800b432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b43c:	f7f8 fb16 	bl	8003a6c <HAL_GetTick>
 800b440:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0308 	and.w	r3, r3, #8
 800b44c:	2b08      	cmp	r3, #8
 800b44e:	d12f      	bne.n	800b4b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b450:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b458:	2200      	movs	r2, #0
 800b45a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 f88e 	bl	800b580 <UART_WaitOnFlagUntilTimeout>
 800b464:	4603      	mov	r3, r0
 800b466:	2b00      	cmp	r3, #0
 800b468:	d022      	beq.n	800b4b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b472:	e853 3f00 	ldrex	r3, [r3]
 800b476:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b47a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b47e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	461a      	mov	r2, r3
 800b486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b488:	647b      	str	r3, [r7, #68]	@ 0x44
 800b48a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b48e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b490:	e841 2300 	strex	r3, r2, [r1]
 800b494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1e6      	bne.n	800b46a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2220      	movs	r2, #32
 800b4a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	e063      	b.n	800b578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f003 0304 	and.w	r3, r3, #4
 800b4ba:	2b04      	cmp	r3, #4
 800b4bc:	d149      	bne.n	800b552 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 f857 	bl	800b580 <UART_WaitOnFlagUntilTimeout>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d03c      	beq.n	800b552 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e0:	e853 3f00 	ldrex	r3, [r3]
 800b4e4:	623b      	str	r3, [r7, #32]
   return(result);
 800b4e6:	6a3b      	ldr	r3, [r7, #32]
 800b4e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4fe:	e841 2300 	strex	r3, r2, [r1]
 800b502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1e6      	bne.n	800b4d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	3308      	adds	r3, #8
 800b510:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	e853 3f00 	ldrex	r3, [r3]
 800b518:	60fb      	str	r3, [r7, #12]
   return(result);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f023 0301 	bic.w	r3, r3, #1
 800b520:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	3308      	adds	r3, #8
 800b528:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b52a:	61fa      	str	r2, [r7, #28]
 800b52c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52e:	69b9      	ldr	r1, [r7, #24]
 800b530:	69fa      	ldr	r2, [r7, #28]
 800b532:	e841 2300 	strex	r3, r2, [r1]
 800b536:	617b      	str	r3, [r7, #20]
   return(result);
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d1e5      	bne.n	800b50a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2220      	movs	r2, #32
 800b542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b54e:	2303      	movs	r3, #3
 800b550:	e012      	b.n	800b578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2220      	movs	r2, #32
 800b556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2220      	movs	r2, #32
 800b55e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b576:	2300      	movs	r3, #0
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3758      	adds	r7, #88	@ 0x58
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	603b      	str	r3, [r7, #0]
 800b58c:	4613      	mov	r3, r2
 800b58e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b590:	e04f      	b.n	800b632 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b598:	d04b      	beq.n	800b632 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b59a:	f7f8 fa67 	bl	8003a6c <HAL_GetTick>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	1ad3      	subs	r3, r2, r3
 800b5a4:	69ba      	ldr	r2, [r7, #24]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d302      	bcc.n	800b5b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d101      	bne.n	800b5b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	e04e      	b.n	800b652 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f003 0304 	and.w	r3, r3, #4
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d037      	beq.n	800b632 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	2b80      	cmp	r3, #128	@ 0x80
 800b5c6:	d034      	beq.n	800b632 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2b40      	cmp	r3, #64	@ 0x40
 800b5cc:	d031      	beq.n	800b632 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	69db      	ldr	r3, [r3, #28]
 800b5d4:	f003 0308 	and.w	r3, r3, #8
 800b5d8:	2b08      	cmp	r3, #8
 800b5da:	d110      	bne.n	800b5fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2208      	movs	r2, #8
 800b5e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f000 f839 	bl	800b65c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2208      	movs	r2, #8
 800b5ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e029      	b.n	800b652 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	69db      	ldr	r3, [r3, #28]
 800b604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b60c:	d111      	bne.n	800b632 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b616:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f000 f81f 	bl	800b65c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2220      	movs	r2, #32
 800b622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2200      	movs	r2, #0
 800b62a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b62e:	2303      	movs	r3, #3
 800b630:	e00f      	b.n	800b652 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	69da      	ldr	r2, [r3, #28]
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	4013      	ands	r3, r2
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	429a      	cmp	r2, r3
 800b640:	bf0c      	ite	eq
 800b642:	2301      	moveq	r3, #1
 800b644:	2300      	movne	r3, #0
 800b646:	b2db      	uxtb	r3, r3
 800b648:	461a      	mov	r2, r3
 800b64a:	79fb      	ldrb	r3, [r7, #7]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d0a0      	beq.n	800b592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	3710      	adds	r7, #16
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
	...

0800b65c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b095      	sub	sp, #84	@ 0x54
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b66c:	e853 3f00 	ldrex	r3, [r3]
 800b670:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b674:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b678:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	461a      	mov	r2, r3
 800b680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b682:	643b      	str	r3, [r7, #64]	@ 0x40
 800b684:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b686:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b688:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b68a:	e841 2300 	strex	r3, r2, [r1]
 800b68e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b692:	2b00      	cmp	r3, #0
 800b694:	d1e6      	bne.n	800b664 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	3308      	adds	r3, #8
 800b69c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69e:	6a3b      	ldr	r3, [r7, #32]
 800b6a0:	e853 3f00 	ldrex	r3, [r3]
 800b6a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6a6:	69fa      	ldr	r2, [r7, #28]
 800b6a8:	4b1e      	ldr	r3, [pc, #120]	@ (800b724 <UART_EndRxTransfer+0xc8>)
 800b6aa:	4013      	ands	r3, r2
 800b6ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	3308      	adds	r3, #8
 800b6b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b6b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b6b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b6bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6be:	e841 2300 	strex	r3, r2, [r1]
 800b6c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d1e5      	bne.n	800b696 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d118      	bne.n	800b704 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	e853 3f00 	ldrex	r3, [r3]
 800b6de:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	f023 0310 	bic.w	r3, r3, #16
 800b6e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6f0:	61bb      	str	r3, [r7, #24]
 800b6f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f4:	6979      	ldr	r1, [r7, #20]
 800b6f6:	69ba      	ldr	r2, [r7, #24]
 800b6f8:	e841 2300 	strex	r3, r2, [r1]
 800b6fc:	613b      	str	r3, [r7, #16]
   return(result);
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1e6      	bne.n	800b6d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2220      	movs	r2, #32
 800b708:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b718:	bf00      	nop
 800b71a:	3754      	adds	r7, #84	@ 0x54
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr
 800b724:	effffffe 	.word	0xeffffffe

0800b728 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b736:	2b01      	cmp	r3, #1
 800b738:	d101      	bne.n	800b73e <HAL_UARTEx_DisableFifoMode+0x16>
 800b73a:	2302      	movs	r3, #2
 800b73c:	e027      	b.n	800b78e <HAL_UARTEx_DisableFifoMode+0x66>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2201      	movs	r2, #1
 800b742:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2224      	movs	r2, #36	@ 0x24
 800b74a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f022 0201 	bic.w	r2, r2, #1
 800b764:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b76c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2200      	movs	r2, #0
 800b772:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2220      	movs	r2, #32
 800b780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b78c:	2300      	movs	r3, #0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3714      	adds	r7, #20
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr

0800b79a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b084      	sub	sp, #16
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d101      	bne.n	800b7b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b7ae:	2302      	movs	r3, #2
 800b7b0:	e02d      	b.n	800b80e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2224      	movs	r2, #36	@ 0x24
 800b7be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f022 0201 	bic.w	r2, r2, #1
 800b7d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	683a      	ldr	r2, [r7, #0]
 800b7ea:	430a      	orrs	r2, r1
 800b7ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f850 	bl	800b894 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2220      	movs	r2, #32
 800b800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b80c:	2300      	movs	r3, #0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b084      	sub	sp, #16
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b826:	2b01      	cmp	r3, #1
 800b828:	d101      	bne.n	800b82e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b82a:	2302      	movs	r3, #2
 800b82c:	e02d      	b.n	800b88a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2201      	movs	r2, #1
 800b832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2224      	movs	r2, #36	@ 0x24
 800b83a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f022 0201 	bic.w	r2, r2, #1
 800b854:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	683a      	ldr	r2, [r7, #0]
 800b866:	430a      	orrs	r2, r1
 800b868:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 f812 	bl	800b894 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2220      	movs	r2, #32
 800b87c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3710      	adds	r7, #16
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
	...

0800b894 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d108      	bne.n	800b8b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b8b4:	e031      	b.n	800b91a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b8b6:	2310      	movs	r3, #16
 800b8b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b8ba:	2310      	movs	r3, #16
 800b8bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	0e5b      	lsrs	r3, r3, #25
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	f003 0307 	and.w	r3, r3, #7
 800b8cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	0f5b      	lsrs	r3, r3, #29
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	f003 0307 	and.w	r3, r3, #7
 800b8dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8de:	7bbb      	ldrb	r3, [r7, #14]
 800b8e0:	7b3a      	ldrb	r2, [r7, #12]
 800b8e2:	4911      	ldr	r1, [pc, #68]	@ (800b928 <UARTEx_SetNbDataToProcess+0x94>)
 800b8e4:	5c8a      	ldrb	r2, [r1, r2]
 800b8e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b8ea:	7b3a      	ldrb	r2, [r7, #12]
 800b8ec:	490f      	ldr	r1, [pc, #60]	@ (800b92c <UARTEx_SetNbDataToProcess+0x98>)
 800b8ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8f4:	b29a      	uxth	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8fc:	7bfb      	ldrb	r3, [r7, #15]
 800b8fe:	7b7a      	ldrb	r2, [r7, #13]
 800b900:	4909      	ldr	r1, [pc, #36]	@ (800b928 <UARTEx_SetNbDataToProcess+0x94>)
 800b902:	5c8a      	ldrb	r2, [r1, r2]
 800b904:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b908:	7b7a      	ldrb	r2, [r7, #13]
 800b90a:	4908      	ldr	r1, [pc, #32]	@ (800b92c <UARTEx_SetNbDataToProcess+0x98>)
 800b90c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b90e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b912:	b29a      	uxth	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b91a:	bf00      	nop
 800b91c:	3714      	adds	r7, #20
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	0801f2e8 	.word	0x0801f2e8
 800b92c:	0801f2f0 	.word	0x0801f2f0

0800b930 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b936:	4b92      	ldr	r3, [pc, #584]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b938:	22c0      	movs	r2, #192	@ 0xc0
 800b93a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b93c:	4b90      	ldr	r3, [pc, #576]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b93e:	22a8      	movs	r2, #168	@ 0xa8
 800b940:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800b942:	4b8f      	ldr	r3, [pc, #572]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b944:	2200      	movs	r2, #0
 800b946:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800b948:	4b8d      	ldr	r3, [pc, #564]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b94a:	220a      	movs	r2, #10
 800b94c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b94e:	4b8d      	ldr	r3, [pc, #564]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800b950:	22ff      	movs	r2, #255	@ 0xff
 800b952:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b954:	4b8b      	ldr	r3, [pc, #556]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800b956:	22ff      	movs	r2, #255	@ 0xff
 800b958:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800b95a:	4b8a      	ldr	r3, [pc, #552]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800b95c:	2200      	movs	r2, #0
 800b95e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b960:	4b88      	ldr	r3, [pc, #544]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800b962:	2200      	movs	r2, #0
 800b964:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800b966:	4b88      	ldr	r3, [pc, #544]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800b968:	2200      	movs	r2, #0
 800b96a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800b96c:	4b86      	ldr	r3, [pc, #536]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800b96e:	2200      	movs	r2, #0
 800b970:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800b972:	4b85      	ldr	r3, [pc, #532]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800b974:	2200      	movs	r2, #0
 800b976:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800b978:	4b83      	ldr	r3, [pc, #524]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800b97a:	2200      	movs	r2, #0
 800b97c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b97e:	2100      	movs	r1, #0
 800b980:	2000      	movs	r0, #0
 800b982:	f005 fb21 	bl	8010fc8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b986:	4b7e      	ldr	r3, [pc, #504]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	061a      	lsls	r2, r3, #24
 800b98c:	4b7c      	ldr	r3, [pc, #496]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b98e:	785b      	ldrb	r3, [r3, #1]
 800b990:	041b      	lsls	r3, r3, #16
 800b992:	431a      	orrs	r2, r3
 800b994:	4b7a      	ldr	r3, [pc, #488]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b996:	789b      	ldrb	r3, [r3, #2]
 800b998:	021b      	lsls	r3, r3, #8
 800b99a:	4313      	orrs	r3, r2
 800b99c:	4a78      	ldr	r2, [pc, #480]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b99e:	78d2      	ldrb	r2, [r2, #3]
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	061a      	lsls	r2, r3, #24
 800b9a4:	4b76      	ldr	r3, [pc, #472]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	0619      	lsls	r1, r3, #24
 800b9aa:	4b75      	ldr	r3, [pc, #468]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b9ac:	785b      	ldrb	r3, [r3, #1]
 800b9ae:	041b      	lsls	r3, r3, #16
 800b9b0:	4319      	orrs	r1, r3
 800b9b2:	4b73      	ldr	r3, [pc, #460]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b9b4:	789b      	ldrb	r3, [r3, #2]
 800b9b6:	021b      	lsls	r3, r3, #8
 800b9b8:	430b      	orrs	r3, r1
 800b9ba:	4971      	ldr	r1, [pc, #452]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b9bc:	78c9      	ldrb	r1, [r1, #3]
 800b9be:	430b      	orrs	r3, r1
 800b9c0:	021b      	lsls	r3, r3, #8
 800b9c2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b9c6:	431a      	orrs	r2, r3
 800b9c8:	4b6d      	ldr	r3, [pc, #436]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	0619      	lsls	r1, r3, #24
 800b9ce:	4b6c      	ldr	r3, [pc, #432]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b9d0:	785b      	ldrb	r3, [r3, #1]
 800b9d2:	041b      	lsls	r3, r3, #16
 800b9d4:	4319      	orrs	r1, r3
 800b9d6:	4b6a      	ldr	r3, [pc, #424]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b9d8:	789b      	ldrb	r3, [r3, #2]
 800b9da:	021b      	lsls	r3, r3, #8
 800b9dc:	430b      	orrs	r3, r1
 800b9de:	4968      	ldr	r1, [pc, #416]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b9e0:	78c9      	ldrb	r1, [r1, #3]
 800b9e2:	430b      	orrs	r3, r1
 800b9e4:	0a1b      	lsrs	r3, r3, #8
 800b9e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b9ea:	431a      	orrs	r2, r3
 800b9ec:	4b64      	ldr	r3, [pc, #400]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	0619      	lsls	r1, r3, #24
 800b9f2:	4b63      	ldr	r3, [pc, #396]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b9f4:	785b      	ldrb	r3, [r3, #1]
 800b9f6:	041b      	lsls	r3, r3, #16
 800b9f8:	4319      	orrs	r1, r3
 800b9fa:	4b61      	ldr	r3, [pc, #388]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800b9fc:	789b      	ldrb	r3, [r3, #2]
 800b9fe:	021b      	lsls	r3, r3, #8
 800ba00:	430b      	orrs	r3, r1
 800ba02:	495f      	ldr	r1, [pc, #380]	@ (800bb80 <MX_LWIP_Init+0x250>)
 800ba04:	78c9      	ldrb	r1, [r1, #3]
 800ba06:	430b      	orrs	r3, r1
 800ba08:	0e1b      	lsrs	r3, r3, #24
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	4a5f      	ldr	r2, [pc, #380]	@ (800bb8c <MX_LWIP_Init+0x25c>)
 800ba0e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800ba10:	4b5c      	ldr	r3, [pc, #368]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	061a      	lsls	r2, r3, #24
 800ba16:	4b5b      	ldr	r3, [pc, #364]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800ba18:	785b      	ldrb	r3, [r3, #1]
 800ba1a:	041b      	lsls	r3, r3, #16
 800ba1c:	431a      	orrs	r2, r3
 800ba1e:	4b59      	ldr	r3, [pc, #356]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800ba20:	789b      	ldrb	r3, [r3, #2]
 800ba22:	021b      	lsls	r3, r3, #8
 800ba24:	4313      	orrs	r3, r2
 800ba26:	4a57      	ldr	r2, [pc, #348]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800ba28:	78d2      	ldrb	r2, [r2, #3]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	061a      	lsls	r2, r3, #24
 800ba2e:	4b55      	ldr	r3, [pc, #340]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	0619      	lsls	r1, r3, #24
 800ba34:	4b53      	ldr	r3, [pc, #332]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800ba36:	785b      	ldrb	r3, [r3, #1]
 800ba38:	041b      	lsls	r3, r3, #16
 800ba3a:	4319      	orrs	r1, r3
 800ba3c:	4b51      	ldr	r3, [pc, #324]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800ba3e:	789b      	ldrb	r3, [r3, #2]
 800ba40:	021b      	lsls	r3, r3, #8
 800ba42:	430b      	orrs	r3, r1
 800ba44:	494f      	ldr	r1, [pc, #316]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800ba46:	78c9      	ldrb	r1, [r1, #3]
 800ba48:	430b      	orrs	r3, r1
 800ba4a:	021b      	lsls	r3, r3, #8
 800ba4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ba50:	431a      	orrs	r2, r3
 800ba52:	4b4c      	ldr	r3, [pc, #304]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	0619      	lsls	r1, r3, #24
 800ba58:	4b4a      	ldr	r3, [pc, #296]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800ba5a:	785b      	ldrb	r3, [r3, #1]
 800ba5c:	041b      	lsls	r3, r3, #16
 800ba5e:	4319      	orrs	r1, r3
 800ba60:	4b48      	ldr	r3, [pc, #288]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800ba62:	789b      	ldrb	r3, [r3, #2]
 800ba64:	021b      	lsls	r3, r3, #8
 800ba66:	430b      	orrs	r3, r1
 800ba68:	4946      	ldr	r1, [pc, #280]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800ba6a:	78c9      	ldrb	r1, [r1, #3]
 800ba6c:	430b      	orrs	r3, r1
 800ba6e:	0a1b      	lsrs	r3, r3, #8
 800ba70:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ba74:	431a      	orrs	r2, r3
 800ba76:	4b43      	ldr	r3, [pc, #268]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	0619      	lsls	r1, r3, #24
 800ba7c:	4b41      	ldr	r3, [pc, #260]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800ba7e:	785b      	ldrb	r3, [r3, #1]
 800ba80:	041b      	lsls	r3, r3, #16
 800ba82:	4319      	orrs	r1, r3
 800ba84:	4b3f      	ldr	r3, [pc, #252]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800ba86:	789b      	ldrb	r3, [r3, #2]
 800ba88:	021b      	lsls	r3, r3, #8
 800ba8a:	430b      	orrs	r3, r1
 800ba8c:	493d      	ldr	r1, [pc, #244]	@ (800bb84 <MX_LWIP_Init+0x254>)
 800ba8e:	78c9      	ldrb	r1, [r1, #3]
 800ba90:	430b      	orrs	r3, r1
 800ba92:	0e1b      	lsrs	r3, r3, #24
 800ba94:	4313      	orrs	r3, r2
 800ba96:	4a3e      	ldr	r2, [pc, #248]	@ (800bb90 <MX_LWIP_Init+0x260>)
 800ba98:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800ba9a:	4b3b      	ldr	r3, [pc, #236]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	061a      	lsls	r2, r3, #24
 800baa0:	4b39      	ldr	r3, [pc, #228]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800baa2:	785b      	ldrb	r3, [r3, #1]
 800baa4:	041b      	lsls	r3, r3, #16
 800baa6:	431a      	orrs	r2, r3
 800baa8:	4b37      	ldr	r3, [pc, #220]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800baaa:	789b      	ldrb	r3, [r3, #2]
 800baac:	021b      	lsls	r3, r3, #8
 800baae:	4313      	orrs	r3, r2
 800bab0:	4a35      	ldr	r2, [pc, #212]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800bab2:	78d2      	ldrb	r2, [r2, #3]
 800bab4:	4313      	orrs	r3, r2
 800bab6:	061a      	lsls	r2, r3, #24
 800bab8:	4b33      	ldr	r3, [pc, #204]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	0619      	lsls	r1, r3, #24
 800babe:	4b32      	ldr	r3, [pc, #200]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800bac0:	785b      	ldrb	r3, [r3, #1]
 800bac2:	041b      	lsls	r3, r3, #16
 800bac4:	4319      	orrs	r1, r3
 800bac6:	4b30      	ldr	r3, [pc, #192]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800bac8:	789b      	ldrb	r3, [r3, #2]
 800baca:	021b      	lsls	r3, r3, #8
 800bacc:	430b      	orrs	r3, r1
 800bace:	492e      	ldr	r1, [pc, #184]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800bad0:	78c9      	ldrb	r1, [r1, #3]
 800bad2:	430b      	orrs	r3, r1
 800bad4:	021b      	lsls	r3, r3, #8
 800bad6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bada:	431a      	orrs	r2, r3
 800badc:	4b2a      	ldr	r3, [pc, #168]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	0619      	lsls	r1, r3, #24
 800bae2:	4b29      	ldr	r3, [pc, #164]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800bae4:	785b      	ldrb	r3, [r3, #1]
 800bae6:	041b      	lsls	r3, r3, #16
 800bae8:	4319      	orrs	r1, r3
 800baea:	4b27      	ldr	r3, [pc, #156]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800baec:	789b      	ldrb	r3, [r3, #2]
 800baee:	021b      	lsls	r3, r3, #8
 800baf0:	430b      	orrs	r3, r1
 800baf2:	4925      	ldr	r1, [pc, #148]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800baf4:	78c9      	ldrb	r1, [r1, #3]
 800baf6:	430b      	orrs	r3, r1
 800baf8:	0a1b      	lsrs	r3, r3, #8
 800bafa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bafe:	431a      	orrs	r2, r3
 800bb00:	4b21      	ldr	r3, [pc, #132]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	0619      	lsls	r1, r3, #24
 800bb06:	4b20      	ldr	r3, [pc, #128]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800bb08:	785b      	ldrb	r3, [r3, #1]
 800bb0a:	041b      	lsls	r3, r3, #16
 800bb0c:	4319      	orrs	r1, r3
 800bb0e:	4b1e      	ldr	r3, [pc, #120]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800bb10:	789b      	ldrb	r3, [r3, #2]
 800bb12:	021b      	lsls	r3, r3, #8
 800bb14:	430b      	orrs	r3, r1
 800bb16:	491c      	ldr	r1, [pc, #112]	@ (800bb88 <MX_LWIP_Init+0x258>)
 800bb18:	78c9      	ldrb	r1, [r1, #3]
 800bb1a:	430b      	orrs	r3, r1
 800bb1c:	0e1b      	lsrs	r3, r3, #24
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	4a1c      	ldr	r2, [pc, #112]	@ (800bb94 <MX_LWIP_Init+0x264>)
 800bb22:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bb24:	4b1c      	ldr	r3, [pc, #112]	@ (800bb98 <MX_LWIP_Init+0x268>)
 800bb26:	9302      	str	r3, [sp, #8]
 800bb28:	4b1c      	ldr	r3, [pc, #112]	@ (800bb9c <MX_LWIP_Init+0x26c>)
 800bb2a:	9301      	str	r3, [sp, #4]
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	9300      	str	r3, [sp, #0]
 800bb30:	4b18      	ldr	r3, [pc, #96]	@ (800bb94 <MX_LWIP_Init+0x264>)
 800bb32:	4a17      	ldr	r2, [pc, #92]	@ (800bb90 <MX_LWIP_Init+0x260>)
 800bb34:	4915      	ldr	r1, [pc, #84]	@ (800bb8c <MX_LWIP_Init+0x25c>)
 800bb36:	481a      	ldr	r0, [pc, #104]	@ (800bba0 <MX_LWIP_Init+0x270>)
 800bb38:	f006 f8d8 	bl	8011cec <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bb3c:	4818      	ldr	r0, [pc, #96]	@ (800bba0 <MX_LWIP_Init+0x270>)
 800bb3e:	f006 fa87 	bl	8012050 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800bb42:	4817      	ldr	r0, [pc, #92]	@ (800bba0 <MX_LWIP_Init+0x270>)
 800bb44:	f006 fa94 	bl	8012070 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800bb48:	4916      	ldr	r1, [pc, #88]	@ (800bba4 <MX_LWIP_Init+0x274>)
 800bb4a:	4815      	ldr	r0, [pc, #84]	@ (800bba0 <MX_LWIP_Init+0x270>)
 800bb4c:	f006 fb92 	bl	8012274 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800bb50:	2224      	movs	r2, #36	@ 0x24
 800bb52:	2100      	movs	r1, #0
 800bb54:	4814      	ldr	r0, [pc, #80]	@ (800bba8 <MX_LWIP_Init+0x278>)
 800bb56:	f00f fd77 	bl	801b648 <memset>
  attributes.name = "EthLink";
 800bb5a:	4b13      	ldr	r3, [pc, #76]	@ (800bba8 <MX_LWIP_Init+0x278>)
 800bb5c:	4a13      	ldr	r2, [pc, #76]	@ (800bbac <MX_LWIP_Init+0x27c>)
 800bb5e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800bb60:	4b11      	ldr	r3, [pc, #68]	@ (800bba8 <MX_LWIP_Init+0x278>)
 800bb62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bb66:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800bb68:	4b0f      	ldr	r3, [pc, #60]	@ (800bba8 <MX_LWIP_Init+0x278>)
 800bb6a:	2210      	movs	r2, #16
 800bb6c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800bb6e:	4a0e      	ldr	r2, [pc, #56]	@ (800bba8 <MX_LWIP_Init+0x278>)
 800bb70:	490b      	ldr	r1, [pc, #44]	@ (800bba0 <MX_LWIP_Init+0x270>)
 800bb72:	480f      	ldr	r0, [pc, #60]	@ (800bbb0 <MX_LWIP_Init+0x280>)
 800bb74:	f001 fb01 	bl	800d17a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bb78:	bf00      	nop
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	2400054c 	.word	0x2400054c
 800bb84:	24000550 	.word	0x24000550
 800bb88:	24000554 	.word	0x24000554
 800bb8c:	24000540 	.word	0x24000540
 800bb90:	24000544 	.word	0x24000544
 800bb94:	24000548 	.word	0x24000548
 800bb98:	08010f05 	.word	0x08010f05
 800bb9c:	0800c09d 	.word	0x0800c09d
 800bba0:	2400050c 	.word	0x2400050c
 800bba4:	0800bbb5 	.word	0x0800bbb5
 800bba8:	24000558 	.word	0x24000558
 800bbac:	0801c798 	.word	0x0801c798
 800bbb0:	0800c34d 	.word	0x0800c34d

0800bbb4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800bbbc:	bf00      	nop
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800bbd0:	4b04      	ldr	r3, [pc, #16]	@ (800bbe4 <HAL_ETH_RxCpltCallback+0x1c>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f001 fd67 	bl	800d6a8 <osSemaphoreRelease>
}
 800bbda:	bf00      	nop
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	24000584 	.word	0x24000584

0800bbe8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800bbf0:	4b04      	ldr	r3, [pc, #16]	@ (800bc04 <HAL_ETH_TxCpltCallback+0x1c>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f001 fd57 	bl	800d6a8 <osSemaphoreRelease>
}
 800bbfa:	bf00      	nop
 800bbfc:	3708      	adds	r7, #8
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	24000588 	.word	0x24000588

0800bc08 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f7f9 f892 	bl	8004d3a <HAL_ETH_GetDMAError>
 800bc16:	4603      	mov	r3, r0
 800bc18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc1c:	2b80      	cmp	r3, #128	@ 0x80
 800bc1e:	d104      	bne.n	800bc2a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800bc20:	4b04      	ldr	r3, [pc, #16]	@ (800bc34 <HAL_ETH_ErrorCallback+0x2c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4618      	mov	r0, r3
 800bc26:	f001 fd3f 	bl	800d6a8 <osSemaphoreRelease>
  }
}
 800bc2a:	bf00      	nop
 800bc2c:	3708      	adds	r7, #8
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	24000584 	.word	0x24000584

0800bc38 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b0aa      	sub	sp, #168	@ 0xa8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800bc40:	2300      	movs	r3, #0
 800bc42:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800bc46:	2300      	movs	r3, #0
 800bc48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800bc52:	f107 0310 	add.w	r3, r7, #16
 800bc56:	2264      	movs	r2, #100	@ 0x64
 800bc58:	2100      	movs	r1, #0
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f00f fcf4 	bl	801b648 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bc60:	4b89      	ldr	r3, [pc, #548]	@ (800be88 <low_level_init+0x250>)
 800bc62:	4a8a      	ldr	r2, [pc, #552]	@ (800be8c <low_level_init+0x254>)
 800bc64:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800bc66:	2300      	movs	r3, #0
 800bc68:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800bc6a:	2380      	movs	r3, #128	@ 0x80
 800bc6c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800bc6e:	23e1      	movs	r3, #225	@ 0xe1
 800bc70:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800bc72:	2300      	movs	r3, #0
 800bc74:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800bc76:	2300      	movs	r3, #0
 800bc78:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800bc7e:	4a82      	ldr	r2, [pc, #520]	@ (800be88 <low_level_init+0x250>)
 800bc80:	f107 0308 	add.w	r3, r7, #8
 800bc84:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800bc86:	4b80      	ldr	r3, [pc, #512]	@ (800be88 <low_level_init+0x250>)
 800bc88:	2201      	movs	r2, #1
 800bc8a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800bc8c:	4b7e      	ldr	r3, [pc, #504]	@ (800be88 <low_level_init+0x250>)
 800bc8e:	4a80      	ldr	r2, [pc, #512]	@ (800be90 <low_level_init+0x258>)
 800bc90:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800bc92:	4b7d      	ldr	r3, [pc, #500]	@ (800be88 <low_level_init+0x250>)
 800bc94:	4a7f      	ldr	r2, [pc, #508]	@ (800be94 <low_level_init+0x25c>)
 800bc96:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800bc98:	4b7b      	ldr	r3, [pc, #492]	@ (800be88 <low_level_init+0x250>)
 800bc9a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800bc9e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bca0:	4879      	ldr	r0, [pc, #484]	@ (800be88 <low_level_init+0x250>)
 800bca2:	f7f8 f871 	bl	8003d88 <HAL_ETH_Init>
 800bca6:	4603      	mov	r3, r0
 800bca8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800bcac:	2238      	movs	r2, #56	@ 0x38
 800bcae:	2100      	movs	r1, #0
 800bcb0:	4879      	ldr	r0, [pc, #484]	@ (800be98 <low_level_init+0x260>)
 800bcb2:	f00f fcc9 	bl	801b648 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800bcb6:	4b78      	ldr	r3, [pc, #480]	@ (800be98 <low_level_init+0x260>)
 800bcb8:	2221      	movs	r2, #33	@ 0x21
 800bcba:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800bcbc:	4b76      	ldr	r3, [pc, #472]	@ (800be98 <low_level_init+0x260>)
 800bcbe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800bcc2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800bcc4:	4b74      	ldr	r3, [pc, #464]	@ (800be98 <low_level_init+0x260>)
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800bcca:	4874      	ldr	r0, [pc, #464]	@ (800be9c <low_level_init+0x264>)
 800bccc:	f005 fec8 	bl	8011a60 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET
  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2206      	movs	r2, #6
 800bcd4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bcd8:	4b6b      	ldr	r3, [pc, #428]	@ (800be88 <low_level_init+0x250>)
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	781a      	ldrb	r2, [r3, #0]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bce4:	4b68      	ldr	r3, [pc, #416]	@ (800be88 <low_level_init+0x250>)
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	785a      	ldrb	r2, [r3, #1]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bcf0:	4b65      	ldr	r3, [pc, #404]	@ (800be88 <low_level_init+0x250>)
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	789a      	ldrb	r2, [r3, #2]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bcfc:	4b62      	ldr	r3, [pc, #392]	@ (800be88 <low_level_init+0x250>)
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	78da      	ldrb	r2, [r3, #3]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bd08:	4b5f      	ldr	r3, [pc, #380]	@ (800be88 <low_level_init+0x250>)
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	791a      	ldrb	r2, [r3, #4]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bd14:	4b5c      	ldr	r3, [pc, #368]	@ (800be88 <low_level_init+0x250>)
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	795a      	ldrb	r2, [r3, #5]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800bd26:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bd2e:	f043 030a 	orr.w	r3, r3, #10
 800bd32:	b2da      	uxtb	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	2001      	movs	r0, #1
 800bd40:	f001 fbd6 	bl	800d4f0 <osSemaphoreNew>
 800bd44:	4603      	mov	r3, r0
 800bd46:	4a56      	ldr	r2, [pc, #344]	@ (800bea0 <low_level_init+0x268>)
 800bd48:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	2001      	movs	r0, #1
 800bd50:	f001 fbce 	bl	800d4f0 <osSemaphoreNew>
 800bd54:	4603      	mov	r3, r0
 800bd56:	4a53      	ldr	r2, [pc, #332]	@ (800bea4 <low_level_init+0x26c>)
 800bd58:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800bd5a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800bd5e:	2224      	movs	r2, #36	@ 0x24
 800bd60:	2100      	movs	r1, #0
 800bd62:	4618      	mov	r0, r3
 800bd64:	f00f fc70 	bl	801b648 <memset>
  attributes.name = "EthIf";
 800bd68:	4b4f      	ldr	r3, [pc, #316]	@ (800bea8 <low_level_init+0x270>)
 800bd6a:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800bd6c:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800bd70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800bd74:	2330      	movs	r3, #48	@ 0x30
 800bd76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800bd7a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800bd7e:	461a      	mov	r2, r3
 800bd80:	6879      	ldr	r1, [r7, #4]
 800bd82:	484a      	ldr	r0, [pc, #296]	@ (800beac <low_level_init+0x274>)
 800bd84:	f001 f9f9 	bl	800d17a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800bd88:	4949      	ldr	r1, [pc, #292]	@ (800beb0 <low_level_init+0x278>)
 800bd8a:	484a      	ldr	r0, [pc, #296]	@ (800beb4 <low_level_init+0x27c>)
 800bd8c:	f7f7 fd17 	bl	80037be <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800bd90:	4848      	ldr	r0, [pc, #288]	@ (800beb4 <low_level_init+0x27c>)
 800bd92:	f7f7 fd46 	bl	8003822 <LAN8742_Init>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d006      	beq.n	800bdaa <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f006 fa39 	bl	8012214 <netif_set_link_down>
    netif_set_down(netif);
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f006 f9d0 	bl	8012148 <netif_set_down>
 800bda8:	e06b      	b.n	800be82 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800bdaa:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d165      	bne.n	800be7e <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bdb2:	4840      	ldr	r0, [pc, #256]	@ (800beb4 <low_level_init+0x27c>)
 800bdb4:	f7f7 fd82 	bl	80038bc <LAN8742_GetLinkState>
 800bdb8:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800bdbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	dc06      	bgt.n	800bdd2 <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f006 fa25 	bl	8012214 <netif_set_link_down>
      netif_set_down(netif);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f006 f9bc 	bl	8012148 <netif_set_down>
 800bdd0:	e057      	b.n	800be82 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800bdd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bdd6:	3b02      	subs	r3, #2
 800bdd8:	2b03      	cmp	r3, #3
 800bdda:	d82b      	bhi.n	800be34 <low_level_init+0x1fc>
 800bddc:	a201      	add	r2, pc, #4	@ (adr r2, 800bde4 <low_level_init+0x1ac>)
 800bdde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde2:	bf00      	nop
 800bde4:	0800bdf5 	.word	0x0800bdf5
 800bde8:	0800be07 	.word	0x0800be07
 800bdec:	0800be17 	.word	0x0800be17
 800bdf0:	0800be27 	.word	0x0800be27
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800bdf4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bdf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800bdfc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800be00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800be04:	e01f      	b.n	800be46 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800be06:	2300      	movs	r3, #0
 800be08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800be0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800be10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800be14:	e017      	b.n	800be46 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800be16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800be1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800be1e:	2300      	movs	r3, #0
 800be20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800be24:	e00f      	b.n	800be46 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800be26:	2300      	movs	r3, #0
 800be28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800be2c:	2300      	movs	r3, #0
 800be2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800be32:	e008      	b.n	800be46 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800be34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800be38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800be3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800be40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800be44:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800be46:	f107 0310 	add.w	r3, r7, #16
 800be4a:	4619      	mov	r1, r3
 800be4c:	480e      	ldr	r0, [pc, #56]	@ (800be88 <low_level_init+0x250>)
 800be4e:	f7f8 fd29 	bl	80048a4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800be52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800be56:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800be58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800be5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800be5e:	f107 0310 	add.w	r3, r7, #16
 800be62:	4619      	mov	r1, r3
 800be64:	4808      	ldr	r0, [pc, #32]	@ (800be88 <low_level_init+0x250>)
 800be66:	f7f8 fef1 	bl	8004c4c <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800be6a:	4807      	ldr	r0, [pc, #28]	@ (800be88 <low_level_init+0x250>)
 800be6c:	f7f8 f88a 	bl	8003f84 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f006 f8fd 	bl	8012070 <netif_set_up>
    netif_set_link_up(netif);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f006 f998 	bl	80121ac <netif_set_link_up>
 800be7c:	e001      	b.n	800be82 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800be7e:	f7f6 fec7 	bl	8002c10 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800be82:	37a8      	adds	r7, #168	@ 0xa8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	2400058c 	.word	0x2400058c
 800be8c:	40028000 	.word	0x40028000
 800be90:	30000100 	.word	0x30000100
 800be94:	30000000 	.word	0x30000000
 800be98:	2400063c 	.word	0x2400063c
 800be9c:	0801f2f8 	.word	0x0801f2f8
 800bea0:	24000584 	.word	0x24000584
 800bea4:	24000588 	.word	0x24000588
 800bea8:	0801c7a0 	.word	0x0801c7a0
 800beac:	0800c049 	.word	0x0800c049
 800beb0:	24000010 	.word	0x24000010
 800beb4:	24000674 	.word	0x24000674

0800beb8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b092      	sub	sp, #72	@ 0x48
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800bec2:	2300      	movs	r3, #0
 800bec4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800bec6:	2300      	movs	r3, #0
 800bec8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800bed0:	f107 030c 	add.w	r3, r7, #12
 800bed4:	2230      	movs	r2, #48	@ 0x30
 800bed6:	2100      	movs	r1, #0
 800bed8:	4618      	mov	r0, r3
 800beda:	f00f fbb5 	bl	801b648 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800bede:	f107 030c 	add.w	r3, r7, #12
 800bee2:	2230      	movs	r2, #48	@ 0x30
 800bee4:	2100      	movs	r1, #0
 800bee6:	4618      	mov	r0, r3
 800bee8:	f00f fbae 	bl	801b648 <memset>

  for(q = p; q != NULL; q = q->next)
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	643b      	str	r3, [r7, #64]	@ 0x40
 800bef0:	e045      	b.n	800bf7e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800bef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bef4:	2b03      	cmp	r3, #3
 800bef6:	d902      	bls.n	800befe <low_level_output+0x46>
      return ERR_IF;
 800bef8:	f06f 030b 	mvn.w	r3, #11
 800befc:	e07f      	b.n	800bffe <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800befe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf00:	6859      	ldr	r1, [r3, #4]
 800bf02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf04:	4613      	mov	r3, r2
 800bf06:	005b      	lsls	r3, r3, #1
 800bf08:	4413      	add	r3, r2
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	3348      	adds	r3, #72	@ 0x48
 800bf0e:	443b      	add	r3, r7
 800bf10:	3b3c      	subs	r3, #60	@ 0x3c
 800bf12:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800bf14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf16:	895b      	ldrh	r3, [r3, #10]
 800bf18:	4619      	mov	r1, r3
 800bf1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	005b      	lsls	r3, r3, #1
 800bf20:	4413      	add	r3, r2
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	3348      	adds	r3, #72	@ 0x48
 800bf26:	443b      	add	r3, r7
 800bf28:	3b38      	subs	r3, #56	@ 0x38
 800bf2a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800bf2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d011      	beq.n	800bf56 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800bf32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf34:	1e5a      	subs	r2, r3, #1
 800bf36:	f107 000c 	add.w	r0, r7, #12
 800bf3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	005b      	lsls	r3, r3, #1
 800bf40:	440b      	add	r3, r1
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	18c1      	adds	r1, r0, r3
 800bf46:	4613      	mov	r3, r2
 800bf48:	005b      	lsls	r3, r3, #1
 800bf4a:	4413      	add	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	3348      	adds	r3, #72	@ 0x48
 800bf50:	443b      	add	r3, r7
 800bf52:	3b34      	subs	r3, #52	@ 0x34
 800bf54:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800bf56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d109      	bne.n	800bf72 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800bf5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf60:	4613      	mov	r3, r2
 800bf62:	005b      	lsls	r3, r3, #1
 800bf64:	4413      	add	r3, r2
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	3348      	adds	r3, #72	@ 0x48
 800bf6a:	443b      	add	r3, r7
 800bf6c:	3b34      	subs	r3, #52	@ 0x34
 800bf6e:	2200      	movs	r2, #0
 800bf70:	601a      	str	r2, [r3, #0]
    }

    i++;
 800bf72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf74:	3301      	adds	r3, #1
 800bf76:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800bf78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1b6      	bne.n	800bef2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	891b      	ldrh	r3, [r3, #8]
 800bf88:	461a      	mov	r2, r3
 800bf8a:	4b1f      	ldr	r3, [pc, #124]	@ (800c008 <low_level_output+0x150>)
 800bf8c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800bf8e:	4a1e      	ldr	r2, [pc, #120]	@ (800c008 <low_level_output+0x150>)
 800bf90:	f107 030c 	add.w	r3, r7, #12
 800bf94:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800bf96:	4a1c      	ldr	r2, [pc, #112]	@ (800c008 <low_level_output+0x150>)
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800bf9c:	6838      	ldr	r0, [r7, #0]
 800bf9e:	f006 fdbd 	bl	8012b1c <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800bfa2:	4919      	ldr	r1, [pc, #100]	@ (800c008 <low_level_output+0x150>)
 800bfa4:	4819      	ldr	r0, [pc, #100]	@ (800c00c <low_level_output+0x154>)
 800bfa6:	f7f8 f8d9 	bl	800415c <HAL_ETH_Transmit_IT>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d103      	bne.n	800bfb8 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bfb6:	e01b      	b.n	800bff0 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800bfb8:	4814      	ldr	r0, [pc, #80]	@ (800c00c <low_level_output+0x154>)
 800bfba:	f7f8 feb1 	bl	8004d20 <HAL_ETH_GetError>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	f003 0302 	and.w	r3, r3, #2
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00d      	beq.n	800bfe4 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800bfc8:	4b11      	ldr	r3, [pc, #68]	@ (800c010 <low_level_output+0x158>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f001 fb17 	bl	800d604 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800bfd6:	480d      	ldr	r0, [pc, #52]	@ (800c00c <low_level_output+0x154>)
 800bfd8:	f7f8 fa47 	bl	800446a <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800bfdc:	23fe      	movs	r3, #254	@ 0xfe
 800bfde:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bfe2:	e005      	b.n	800bff0 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800bfe4:	6838      	ldr	r0, [r7, #0]
 800bfe6:	f006 fcf3 	bl	80129d0 <pbuf_free>
        errval =  ERR_IF;
 800bfea:	23f4      	movs	r3, #244	@ 0xf4
 800bfec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800bff0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bff4:	f113 0f02 	cmn.w	r3, #2
 800bff8:	d0d3      	beq.n	800bfa2 <low_level_output+0xea>

  return errval;
 800bffa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3748      	adds	r7, #72	@ 0x48
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	2400063c 	.word	0x2400063c
 800c00c:	2400058c 	.word	0x2400058c
 800c010:	24000588 	.word	0x24000588

0800c014 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c01c:	2300      	movs	r3, #0
 800c01e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800c020:	4b07      	ldr	r3, [pc, #28]	@ (800c040 <low_level_input+0x2c>)
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d105      	bne.n	800c034 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800c028:	f107 030c 	add.w	r3, r7, #12
 800c02c:	4619      	mov	r1, r3
 800c02e:	4805      	ldr	r0, [pc, #20]	@ (800c044 <low_level_input+0x30>)
 800c030:	f7f8 f8e5 	bl	80041fe <HAL_ETH_ReadData>
  }

  return p;
 800c034:	68fb      	ldr	r3, [r7, #12]
}
 800c036:	4618      	mov	r0, r3
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	24000580 	.word	0x24000580
 800c044:	2400058c 	.word	0x2400058c

0800c048 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c050:	2300      	movs	r3, #0
 800c052:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c058:	4b0f      	ldr	r3, [pc, #60]	@ (800c098 <ethernetif_input+0x50>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f04f 31ff 	mov.w	r1, #4294967295
 800c060:	4618      	mov	r0, r3
 800c062:	f001 facf 	bl	800d604 <osSemaphoreAcquire>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d1f5      	bne.n	800c058 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800c06c:	68b8      	ldr	r0, [r7, #8]
 800c06e:	f7ff ffd1 	bl	800c014 <low_level_input>
 800c072:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00a      	beq.n	800c090 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	691b      	ldr	r3, [r3, #16]
 800c07e:	68b9      	ldr	r1, [r7, #8]
 800c080:	68f8      	ldr	r0, [r7, #12]
 800c082:	4798      	blx	r3
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	d002      	beq.n	800c090 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f006 fca0 	bl	80129d0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d1ea      	bne.n	800c06c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c096:	e7df      	b.n	800c058 <ethernetif_input+0x10>
 800c098:	24000584 	.word	0x24000584

0800c09c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d106      	bne.n	800c0b8 <ethernetif_init+0x1c>
 800c0aa:	4b0e      	ldr	r3, [pc, #56]	@ (800c0e4 <ethernetif_init+0x48>)
 800c0ac:	f240 2215 	movw	r2, #533	@ 0x215
 800c0b0:	490d      	ldr	r1, [pc, #52]	@ (800c0e8 <ethernetif_init+0x4c>)
 800c0b2:	480e      	ldr	r0, [pc, #56]	@ (800c0ec <ethernetif_init+0x50>)
 800c0b4:	f00f f9ce 	bl	801b454 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2273      	movs	r2, #115	@ 0x73
 800c0bc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2274      	movs	r2, #116	@ 0x74
 800c0c4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	4a09      	ldr	r2, [pc, #36]	@ (800c0f0 <ethernetif_init+0x54>)
 800c0cc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4a08      	ldr	r2, [pc, #32]	@ (800c0f4 <ethernetif_init+0x58>)
 800c0d2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f7ff fdaf 	bl	800bc38 <low_level_init>

  return ERR_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3708      	adds	r7, #8
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	0801c7a8 	.word	0x0801c7a8
 800c0e8:	0801c7c4 	.word	0x0801c7c4
 800c0ec:	0801c7d4 	.word	0x0801c7d4
 800c0f0:	080190b5 	.word	0x080190b5
 800c0f4:	0800beb9 	.word	0x0800beb9

0800c0f8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c104:	68f9      	ldr	r1, [r7, #12]
 800c106:	4809      	ldr	r0, [pc, #36]	@ (800c12c <pbuf_free_custom+0x34>)
 800c108:	f005 fd9a 	bl	8011c40 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c10c:	4b08      	ldr	r3, [pc, #32]	@ (800c130 <pbuf_free_custom+0x38>)
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	2b01      	cmp	r3, #1
 800c112:	d107      	bne.n	800c124 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c114:	4b06      	ldr	r3, [pc, #24]	@ (800c130 <pbuf_free_custom+0x38>)
 800c116:	2200      	movs	r2, #0
 800c118:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800c11a:	4b06      	ldr	r3, [pc, #24]	@ (800c134 <pbuf_free_custom+0x3c>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4618      	mov	r0, r3
 800c120:	f001 fac2 	bl	800d6a8 <osSemaphoreRelease>
  }
}
 800c124:	bf00      	nop
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	0801f2f8 	.word	0x0801f2f8
 800c130:	24000580 	.word	0x24000580
 800c134:	24000584 	.word	0x24000584

0800c138 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c13c:	f7f7 fc96 	bl	8003a6c <HAL_GetTick>
 800c140:	4603      	mov	r3, r0
}
 800c142:	4618      	mov	r0, r3
 800c144:	bd80      	pop	{r7, pc}
	...

0800c148 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b08e      	sub	sp, #56	@ 0x38
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c150:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c154:	2200      	movs	r2, #0
 800c156:	601a      	str	r2, [r3, #0]
 800c158:	605a      	str	r2, [r3, #4]
 800c15a:	609a      	str	r2, [r3, #8]
 800c15c:	60da      	str	r2, [r3, #12]
 800c15e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4a4d      	ldr	r2, [pc, #308]	@ (800c29c <HAL_ETH_MspInit+0x154>)
 800c166:	4293      	cmp	r3, r2
 800c168:	f040 8093 	bne.w	800c292 <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800c16c:	4b4c      	ldr	r3, [pc, #304]	@ (800c2a0 <HAL_ETH_MspInit+0x158>)
 800c16e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c172:	4a4b      	ldr	r2, [pc, #300]	@ (800c2a0 <HAL_ETH_MspInit+0x158>)
 800c174:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c178:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800c17c:	4b48      	ldr	r3, [pc, #288]	@ (800c2a0 <HAL_ETH_MspInit+0x158>)
 800c17e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c182:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c186:	623b      	str	r3, [r7, #32]
 800c188:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800c18a:	4b45      	ldr	r3, [pc, #276]	@ (800c2a0 <HAL_ETH_MspInit+0x158>)
 800c18c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c190:	4a43      	ldr	r2, [pc, #268]	@ (800c2a0 <HAL_ETH_MspInit+0x158>)
 800c192:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c196:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800c19a:	4b41      	ldr	r3, [pc, #260]	@ (800c2a0 <HAL_ETH_MspInit+0x158>)
 800c19c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c1a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c1a4:	61fb      	str	r3, [r7, #28]
 800c1a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800c1a8:	4b3d      	ldr	r3, [pc, #244]	@ (800c2a0 <HAL_ETH_MspInit+0x158>)
 800c1aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c1ae:	4a3c      	ldr	r2, [pc, #240]	@ (800c2a0 <HAL_ETH_MspInit+0x158>)
 800c1b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c1b4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800c1b8:	4b39      	ldr	r3, [pc, #228]	@ (800c2a0 <HAL_ETH_MspInit+0x158>)
 800c1ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c1be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1c2:	61bb      	str	r3, [r7, #24]
 800c1c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c1c6:	4b36      	ldr	r3, [pc, #216]	@ (800c2a0 <HAL_ETH_MspInit+0x158>)
 800c1c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c1cc:	4a34      	ldr	r2, [pc, #208]	@ (800c2a0 <HAL_ETH_MspInit+0x158>)
 800c1ce:	f043 0304 	orr.w	r3, r3, #4
 800c1d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c1d6:	4b32      	ldr	r3, [pc, #200]	@ (800c2a0 <HAL_ETH_MspInit+0x158>)
 800c1d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c1dc:	f003 0304 	and.w	r3, r3, #4
 800c1e0:	617b      	str	r3, [r7, #20]
 800c1e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c1e4:	4b2e      	ldr	r3, [pc, #184]	@ (800c2a0 <HAL_ETH_MspInit+0x158>)
 800c1e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c1ea:	4a2d      	ldr	r2, [pc, #180]	@ (800c2a0 <HAL_ETH_MspInit+0x158>)
 800c1ec:	f043 0301 	orr.w	r3, r3, #1
 800c1f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c1f4:	4b2a      	ldr	r3, [pc, #168]	@ (800c2a0 <HAL_ETH_MspInit+0x158>)
 800c1f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c1fa:	f003 0301 	and.w	r3, r3, #1
 800c1fe:	613b      	str	r3, [r7, #16]
 800c200:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c202:	4b27      	ldr	r3, [pc, #156]	@ (800c2a0 <HAL_ETH_MspInit+0x158>)
 800c204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c208:	4a25      	ldr	r2, [pc, #148]	@ (800c2a0 <HAL_ETH_MspInit+0x158>)
 800c20a:	f043 0302 	orr.w	r3, r3, #2
 800c20e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c212:	4b23      	ldr	r3, [pc, #140]	@ (800c2a0 <HAL_ETH_MspInit+0x158>)
 800c214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c218:	f003 0302 	and.w	r3, r3, #2
 800c21c:	60fb      	str	r3, [r7, #12]
 800c21e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800c220:	2332      	movs	r3, #50	@ 0x32
 800c222:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c224:	2302      	movs	r3, #2
 800c226:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c228:	2300      	movs	r3, #0
 800c22a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c22c:	2303      	movs	r3, #3
 800c22e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c230:	230b      	movs	r3, #11
 800c232:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c238:	4619      	mov	r1, r3
 800c23a:	481a      	ldr	r0, [pc, #104]	@ (800c2a4 <HAL_ETH_MspInit+0x15c>)
 800c23c:	f7f9 fb0c 	bl	8005858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800c240:	2386      	movs	r3, #134	@ 0x86
 800c242:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c244:	2302      	movs	r3, #2
 800c246:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c248:	2300      	movs	r3, #0
 800c24a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c24c:	2303      	movs	r3, #3
 800c24e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c250:	230b      	movs	r3, #11
 800c252:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c258:	4619      	mov	r1, r3
 800c25a:	4813      	ldr	r0, [pc, #76]	@ (800c2a8 <HAL_ETH_MspInit+0x160>)
 800c25c:	f7f9 fafc 	bl	8005858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800c260:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800c264:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c266:	2302      	movs	r3, #2
 800c268:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c26a:	2300      	movs	r3, #0
 800c26c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c26e:	2303      	movs	r3, #3
 800c270:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c272:	230b      	movs	r3, #11
 800c274:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c276:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c27a:	4619      	mov	r1, r3
 800c27c:	480b      	ldr	r0, [pc, #44]	@ (800c2ac <HAL_ETH_MspInit+0x164>)
 800c27e:	f7f9 faeb 	bl	8005858 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800c282:	2200      	movs	r2, #0
 800c284:	2105      	movs	r1, #5
 800c286:	203d      	movs	r0, #61	@ 0x3d
 800c288:	f7f7 fcde 	bl	8003c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c28c:	203d      	movs	r0, #61	@ 0x3d
 800c28e:	f7f7 fcf5 	bl	8003c7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c292:	bf00      	nop
 800c294:	3738      	adds	r7, #56	@ 0x38
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	40028000 	.word	0x40028000
 800c2a0:	58024400 	.word	0x58024400
 800c2a4:	58020800 	.word	0x58020800
 800c2a8:	58020000 	.word	0x58020000
 800c2ac:	58020400 	.word	0x58020400

0800c2b0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c2b4:	4802      	ldr	r0, [pc, #8]	@ (800c2c0 <ETH_PHY_IO_Init+0x10>)
 800c2b6:	f7f8 fce3 	bl	8004c80 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	2400058c 	.word	0x2400058c

0800c2c4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	af00      	add	r7, sp, #0
  return 0;
 800c2c8:	2300      	movs	r3, #0
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	68ba      	ldr	r2, [r7, #8]
 800c2e4:	68f9      	ldr	r1, [r7, #12]
 800c2e6:	4807      	ldr	r0, [pc, #28]	@ (800c304 <ETH_PHY_IO_ReadReg+0x30>)
 800c2e8:	f7f8 fa34 	bl	8004754 <HAL_ETH_ReadPHYRegister>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d002      	beq.n	800c2f8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c2f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f6:	e000      	b.n	800c2fa <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c2f8:	2300      	movs	r3, #0
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	2400058c 	.word	0x2400058c

0800c308 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	68ba      	ldr	r2, [r7, #8]
 800c318:	68f9      	ldr	r1, [r7, #12]
 800c31a:	4807      	ldr	r0, [pc, #28]	@ (800c338 <ETH_PHY_IO_WriteReg+0x30>)
 800c31c:	f7f8 fa6e 	bl	80047fc <HAL_ETH_WritePHYRegister>
 800c320:	4603      	mov	r3, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d002      	beq.n	800c32c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c326:	f04f 33ff 	mov.w	r3, #4294967295
 800c32a:	e000      	b.n	800c32e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	2400058c 	.word	0x2400058c

0800c33c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c340:	f7f7 fb94 	bl	8003a6c <HAL_GetTick>
 800c344:	4603      	mov	r3, r0
}
 800c346:	4618      	mov	r0, r3
 800c348:	bd80      	pop	{r7, pc}
	...

0800c34c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b0a0      	sub	sp, #128	@ 0x80
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c354:	f107 0308 	add.w	r3, r7, #8
 800c358:	2264      	movs	r2, #100	@ 0x64
 800c35a:	2100      	movs	r1, #0
 800c35c:	4618      	mov	r0, r3
 800c35e:	f00f f973 	bl	801b648 <memset>
  int32_t PHYLinkState = 0;
 800c362:	2300      	movs	r3, #0
 800c364:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c366:	2300      	movs	r3, #0
 800c368:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c36a:	2300      	movs	r3, #0
 800c36c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c36e:	2300      	movs	r3, #0
 800c370:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c376:	483a      	ldr	r0, [pc, #232]	@ (800c460 <ethernet_link_thread+0x114>)
 800c378:	f7f7 faa0 	bl	80038bc <LAN8742_GetLinkState>
 800c37c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c37e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c380:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c384:	089b      	lsrs	r3, r3, #2
 800c386:	f003 0301 	and.w	r3, r3, #1
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00c      	beq.n	800c3aa <ethernet_link_thread+0x5e>
 800c390:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c392:	2b01      	cmp	r3, #1
 800c394:	dc09      	bgt.n	800c3aa <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800c396:	4833      	ldr	r0, [pc, #204]	@ (800c464 <ethernet_link_thread+0x118>)
 800c398:	f7f7 fe68 	bl	800406c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c39c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c39e:	f005 fed3 	bl	8012148 <netif_set_down>
    netif_set_link_down(netif);
 800c3a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c3a4:	f005 ff36 	bl	8012214 <netif_set_link_down>
 800c3a8:	e055      	b.n	800c456 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c3aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c3b0:	f003 0304 	and.w	r3, r3, #4
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d14e      	bne.n	800c456 <ethernet_link_thread+0x10a>
 800c3b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	dd4b      	ble.n	800c456 <ethernet_link_thread+0x10a>
  {

    switch (PHYLinkState)
 800c3be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3c0:	3b02      	subs	r3, #2
 800c3c2:	2b03      	cmp	r3, #3
 800c3c4:	d82a      	bhi.n	800c41c <ethernet_link_thread+0xd0>
 800c3c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c3cc <ethernet_link_thread+0x80>)
 800c3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3cc:	0800c3dd 	.word	0x0800c3dd
 800c3d0:	0800c3ef 	.word	0x0800c3ef
 800c3d4:	0800c3ff 	.word	0x0800c3ff
 800c3d8:	0800c40f 	.word	0x0800c40f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c3dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c3e0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c3e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c3e6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c3ec:	e017      	b.n	800c41e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c3f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c3f6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c3fc:	e00f      	b.n	800c41e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c3fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c402:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c404:	2300      	movs	r3, #0
 800c406:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c408:	2301      	movs	r3, #1
 800c40a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c40c:	e007      	b.n	800c41e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c40e:	2300      	movs	r3, #0
 800c410:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c412:	2300      	movs	r3, #0
 800c414:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c416:	2301      	movs	r3, #1
 800c418:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c41a:	e000      	b.n	800c41e <ethernet_link_thread+0xd2>
    default:
      break;
 800c41c:	bf00      	nop
    }

    if(linkchanged)
 800c41e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c420:	2b00      	cmp	r3, #0
 800c422:	d018      	beq.n	800c456 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c424:	f107 0308 	add.w	r3, r7, #8
 800c428:	4619      	mov	r1, r3
 800c42a:	480e      	ldr	r0, [pc, #56]	@ (800c464 <ethernet_link_thread+0x118>)
 800c42c:	f7f8 fa3a 	bl	80048a4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c430:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c432:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800c434:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c436:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c438:	f107 0308 	add.w	r3, r7, #8
 800c43c:	4619      	mov	r1, r3
 800c43e:	4809      	ldr	r0, [pc, #36]	@ (800c464 <ethernet_link_thread+0x118>)
 800c440:	f7f8 fc04 	bl	8004c4c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800c444:	4807      	ldr	r0, [pc, #28]	@ (800c464 <ethernet_link_thread+0x118>)
 800c446:	f7f7 fd9d 	bl	8003f84 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800c44a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c44c:	f005 fe10 	bl	8012070 <netif_set_up>
      netif_set_link_up(netif);
 800c450:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c452:	f005 feab 	bl	80121ac <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800c456:	2064      	movs	r0, #100	@ 0x64
 800c458:	f000 ff21 	bl	800d29e <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c45c:	e78b      	b.n	800c376 <ethernet_link_thread+0x2a>
 800c45e:	bf00      	nop
 800c460:	24000674 	.word	0x24000674
 800c464:	2400058c 	.word	0x2400058c

0800c468 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b086      	sub	sp, #24
 800c46c:	af02      	add	r7, sp, #8
 800c46e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c470:	4812      	ldr	r0, [pc, #72]	@ (800c4bc <HAL_ETH_RxAllocateCallback+0x54>)
 800c472:	f005 fb71 	bl	8011b58 <memp_malloc_pool>
 800c476:	60f8      	str	r0, [r7, #12]
  if (p)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d014      	beq.n	800c4a8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f103 0220 	add.w	r2, r3, #32
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	4a0d      	ldr	r2, [pc, #52]	@ (800c4c0 <HAL_ETH_RxAllocateCallback+0x58>)
 800c48c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c496:	9201      	str	r2, [sp, #4]
 800c498:	9300      	str	r3, [sp, #0]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2241      	movs	r2, #65	@ 0x41
 800c49e:	2100      	movs	r1, #0
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	f006 f8db 	bl	801265c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c4a6:	e005      	b.n	800c4b4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c4a8:	4b06      	ldr	r3, [pc, #24]	@ (800c4c4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	601a      	str	r2, [r3, #0]
}
 800c4b4:	bf00      	nop
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	0801f2f8 	.word	0x0801f2f8
 800c4c0:	0800c0f9 	.word	0x0800c0f9
 800c4c4:	24000580 	.word	0x24000580

0800c4c8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b08d      	sub	sp, #52	@ 0x34
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	607a      	str	r2, [r7, #4]
 800c4d4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	3b20      	subs	r3, #32
 800c4e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 800c4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4f6:	887a      	ldrh	r2, [r7, #2]
 800c4f8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d103      	bne.n	800c50a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c504:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c506:	601a      	str	r2, [r3, #0]
 800c508:	e003      	b.n	800c512 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c510:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c516:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c51e:	e009      	b.n	800c534 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c522:	891a      	ldrh	r2, [r3, #8]
 800c524:	887b      	ldrh	r3, [r7, #2]
 800c526:	4413      	add	r3, r2
 800c528:	b29a      	uxth	r2, r3
 800c52a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c52c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c52e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1f2      	bne.n	800c520 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c53a:	887b      	ldrh	r3, [r7, #2]
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	623a      	str	r2, [r7, #32]
 800c540:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	2b00      	cmp	r3, #0
 800c546:	dd1d      	ble.n	800c584 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800c548:	6a3b      	ldr	r3, [r7, #32]
 800c54a:	f003 021f 	and.w	r2, r3, #31
 800c54e:	69fb      	ldr	r3, [r7, #28]
 800c550:	4413      	add	r3, r2
 800c552:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800c554:	6a3b      	ldr	r3, [r7, #32]
 800c556:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c558:	f3bf 8f4f 	dsb	sy
}
 800c55c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800c55e:	4a0d      	ldr	r2, [pc, #52]	@ (800c594 <HAL_ETH_RxLinkCallback+0xcc>)
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	3320      	adds	r3, #32
 800c56a:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	3b20      	subs	r3, #32
 800c570:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	2b00      	cmp	r3, #0
 800c576:	dcf2      	bgt.n	800c55e <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800c578:	f3bf 8f4f 	dsb	sy
}
 800c57c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c57e:	f3bf 8f6f 	isb	sy
}
 800c582:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800c584:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c586:	bf00      	nop
 800c588:	3734      	adds	r7, #52	@ 0x34
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	e000ed00 	.word	0xe000ed00

0800c598 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f006 fa15 	bl	80129d0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800c5a6:	bf00      	nop
 800c5a8:	3708      	adds	r7, #8
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <init_adc>:
 */
static inline void package_cmd(uint16_t cmd, uint8_t *tx);

/*-------------------------Public Interface Functions-------------------------*/

void init_adc(SPI_HandleTypeDef *SPI_BUS, GPIO_MAX11128_Pinfo *pinfo) {
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b084      	sub	sp, #16
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	6039      	str	r1, [r7, #0]
     *      7. Select the right SWCNV bit
     *
     *
     */
    // Configure settings for all ADCs
    uint8_t tx[2] = {0, 0};
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	813b      	strh	r3, [r7, #8]

    // 	note: these types are taken from the GPIO_TypeDef line 486
    //          in file stm32f446x.h


    if (pinfo->HARDWARE_CONFIGURATION != NO_EOC_NOR_CNVST) {
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800c5c2:	2b02      	cmp	r3, #2
 800c5c4:	d040      	beq.n	800c648 <init_adc+0x9a>
		// Generate adc config data
		uint16_t ADC_CONFIG_REG = MAX11128_CONFIG|SET_MAX11128_AVGON;
 800c5c6:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 800c5ca:	81fb      	strh	r3, [r7, #14]
		uint16_t ADC_MODE_CNTL_REG = MAX11128_MODE_CNTL|(CUSTOM_INT<<11);
 800c5cc:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800c5d0:	81bb      	strh	r3, [r7, #12]

		configure_read_adc_all(pinfo);
 800c5d2:	6838      	ldr	r0, [r7, #0]
 800c5d4:	f000 f9ce 	bl	800c974 <configure_read_adc_all>
		set_read_adc_range(SPI_BUS, pinfo);
 800c5d8:	6839      	ldr	r1, [r7, #0]
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 f957 	bl	800c88e <set_read_adc_range>

		package_cmd(ADC_CONFIG_REG, tx);
 800c5e0:	f107 0208 	add.w	r2, r7, #8
 800c5e4:	89fb      	ldrh	r3, [r7, #14]
 800c5e6:	4611      	mov	r1, r2
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f000 f9ff 	bl	800c9ec <package_cmd>
		taskENTER_CRITICAL();
 800c5ee:	f004 f883 	bl	80106f8 <vPortEnterCritical>
		set_adc(pinfo, GPIO_PIN_RESET);
 800c5f2:	2100      	movs	r1, #0
 800c5f4:	6838      	ldr	r0, [r7, #0]
 800c5f6:	f000 fa10 	bl	800ca1a <set_adc>
		if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 800c5fa:	f107 0108 	add.w	r1, r7, #8
 800c5fe:	2301      	movs	r3, #1
 800c600:	2202      	movs	r2, #2
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7fc fc50 	bl	8008ea8 <HAL_SPI_Transmit>
		set_adc(pinfo, GPIO_PIN_SET);
 800c608:	2101      	movs	r1, #1
 800c60a:	6838      	ldr	r0, [r7, #0]
 800c60c:	f000 fa05 	bl	800ca1a <set_adc>
		taskEXIT_CRITICAL();
 800c610:	f004 f8a4 	bl	801075c <vPortExitCritical>

		package_cmd(ADC_MODE_CNTL_REG, tx);
 800c614:	f107 0208 	add.w	r2, r7, #8
 800c618:	89bb      	ldrh	r3, [r7, #12]
 800c61a:	4611      	mov	r1, r2
 800c61c:	4618      	mov	r0, r3
 800c61e:	f000 f9e5 	bl	800c9ec <package_cmd>
		taskENTER_CRITICAL();
 800c622:	f004 f869 	bl	80106f8 <vPortEnterCritical>
		set_adc(pinfo, GPIO_PIN_RESET);
 800c626:	2100      	movs	r1, #0
 800c628:	6838      	ldr	r0, [r7, #0]
 800c62a:	f000 f9f6 	bl	800ca1a <set_adc>
		if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 800c62e:	f107 0108 	add.w	r1, r7, #8
 800c632:	2301      	movs	r3, #1
 800c634:	2202      	movs	r2, #2
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f7fc fc36 	bl	8008ea8 <HAL_SPI_Transmit>
		set_adc(pinfo, GPIO_PIN_SET);
 800c63c:	2101      	movs	r1, #1
 800c63e:	6838      	ldr	r0, [r7, #0]
 800c640:	f000 f9eb 	bl	800ca1a <set_adc>
		taskEXIT_CRITICAL();
 800c644:	f004 f88a 	bl	801075c <vPortExitCritical>
    }
}
 800c648:	bf00      	nop
 800c64a:	3710      	adds	r7, #16
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <read_adc>:

void read_adc(SPI_HandleTypeDef *SPI_BUS, GPIO_MAX11128_Pinfo *pinfo,
                                                uint16_t *adc_out) {
 800c650:	b580      	push	{r7, lr}
 800c652:	b08c      	sub	sp, #48	@ 0x30
 800c654:	af02      	add	r7, sp, #8
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	607a      	str	r2, [r7, #4]
    /* ADC startup and FIFO register intialization */
	/* Serial communications with ADC */

	// The number of bytes in the FIFO is simply the
	// number of channels * 2 (bytes for each channel)
	uint8_t rx[2] = {0};
 800c65c:	2300      	movs	r3, #0
 800c65e:	82bb      	strh	r3, [r7, #20]
	uint8_t tx[2] = {0};
 800c660:	2300      	movs	r3, #0
 800c662:	823b      	strh	r3, [r7, #16]

	if (pinfo->HARDWARE_CONFIGURATION == NO_EOC_NOR_CNVST) {
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	d17f      	bne.n	800c76e <read_adc+0x11e>
		// Select channel 0 to start
		uint16_t ADC_MODE_CNTL_REG = MAX11128_MODE_MANUAL | SET_MAX11128_CHAN_ID;
 800c66e:	f640 0304 	movw	r3, #2052	@ 0x804
 800c672:	837b      	strh	r3, [r7, #26]

		package_cmd(ADC_MODE_CNTL_REG, tx);
 800c674:	f107 0210 	add.w	r2, r7, #16
 800c678:	8b7b      	ldrh	r3, [r7, #26]
 800c67a:	4611      	mov	r1, r2
 800c67c:	4618      	mov	r0, r3
 800c67e:	f000 f9b5 	bl	800c9ec <package_cmd>

		//Transmit chan_id of 0 to ADC for next frame to transmit and set
		 taskENTER_CRITICAL();
 800c682:	f004 f839 	bl	80106f8 <vPortEnterCritical>
		set_adc(pinfo, GPIO_PIN_RESET);
 800c686:	2100      	movs	r1, #0
 800c688:	68b8      	ldr	r0, [r7, #8]
 800c68a:	f000 f9c6 	bl	800ca1a <set_adc>
		if(HAL_SPI_TransmitReceive(SPI_BUS, tx, rx, 2, 1) ==  HAL_TIMEOUT){
 800c68e:	f107 0214 	add.w	r2, r7, #20
 800c692:	f107 0110 	add.w	r1, r7, #16
 800c696:	2301      	movs	r3, #1
 800c698:	9300      	str	r3, [sp, #0]
 800c69a:	2302      	movs	r3, #2
 800c69c:	68f8      	ldr	r0, [r7, #12]
 800c69e:	f7fd f863 	bl	8009768 <HAL_SPI_TransmitReceive>
		}
		set_adc(pinfo, GPIO_PIN_SET);
 800c6a2:	2101      	movs	r1, #1
 800c6a4:	68b8      	ldr	r0, [r7, #8]
 800c6a6:	f000 f9b8 	bl	800ca1a <set_adc>
		taskEXIT_CRITICAL();
 800c6aa:	f004 f857 	bl	801075c <vPortExitCritical>

		uint16_t adc_counts = 0;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	833b      	strh	r3, [r7, #24]
		uint16_t channelId  = 0;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	82fb      	strh	r3, [r7, #22]

		//Loop over channels and send next channel to be read
		for(uint8_t channel = 1; channel <= 16; channel++){
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c6bc:	e052      	b.n	800c764 <read_adc+0x114>
			ADC_MODE_CNTL_REG = (MAX11128_MODE_MANUAL | SET_MAX11128_CHAN_ID);
 800c6be:	f640 0304 	movw	r3, #2052	@ 0x804
 800c6c2:	837b      	strh	r3, [r7, #26]

			package_cmd(ADC_MODE_CNTL_REG, tx);
 800c6c4:	f107 0210 	add.w	r2, r7, #16
 800c6c8:	8b7b      	ldrh	r3, [r7, #26]
 800c6ca:	4611      	mov	r1, r2
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f000 f98d 	bl	800c9ec <package_cmd>

			//GSE code for putting channel id in correct place
			tx[0] = (channel >> 1) | tx[0];
 800c6d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c6d6:	085b      	lsrs	r3, r3, #1
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	7c3b      	ldrb	r3, [r7, #16]
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	743b      	strb	r3, [r7, #16]
			tx[1] = (channel << 7) | tx[1];
 800c6e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c6e6:	01db      	lsls	r3, r3, #7
 800c6e8:	b25a      	sxtb	r2, r3
 800c6ea:	7c7b      	ldrb	r3, [r7, #17]
 800c6ec:	b25b      	sxtb	r3, r3
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	b25b      	sxtb	r3, r3
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	747b      	strb	r3, [r7, #17]
			rx[0] = rx[1] = 0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	757b      	strb	r3, [r7, #21]
 800c6fa:	7d7b      	ldrb	r3, [r7, #21]
 800c6fc:	753b      	strb	r3, [r7, #20]

			taskENTER_CRITICAL();
 800c6fe:	f003 fffb 	bl	80106f8 <vPortEnterCritical>
			set_adc(pinfo, GPIO_PIN_RESET);
 800c702:	2100      	movs	r1, #0
 800c704:	68b8      	ldr	r0, [r7, #8]
 800c706:	f000 f988 	bl	800ca1a <set_adc>
			if(HAL_SPI_TransmitReceive(SPI_BUS, tx, rx, 2, 1) == HAL_TIMEOUT){
 800c70a:	f107 0214 	add.w	r2, r7, #20
 800c70e:	f107 0110 	add.w	r1, r7, #16
 800c712:	2301      	movs	r3, #1
 800c714:	9300      	str	r3, [sp, #0]
 800c716:	2302      	movs	r3, #2
 800c718:	68f8      	ldr	r0, [r7, #12]
 800c71a:	f7fd f825 	bl	8009768 <HAL_SPI_TransmitReceive>
			}
			set_adc(pinfo, GPIO_PIN_SET);
 800c71e:	2101      	movs	r1, #1
 800c720:	68b8      	ldr	r0, [r7, #8]
 800c722:	f000 f97a 	bl	800ca1a <set_adc>
			taskEXIT_CRITICAL();
 800c726:	f004 f819 	bl	801075c <vPortExitCritical>

			adc_counts = ((rx[0]<<8)|rx[1]) & 0x0FFF;
 800c72a:	7d3b      	ldrb	r3, [r7, #20]
 800c72c:	b21b      	sxth	r3, r3
 800c72e:	021b      	lsls	r3, r3, #8
 800c730:	b21a      	sxth	r2, r3
 800c732:	7d7b      	ldrb	r3, [r7, #21]
 800c734:	b21b      	sxth	r3, r3
 800c736:	4313      	orrs	r3, r2
 800c738:	b21b      	sxth	r3, r3
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c740:	833b      	strh	r3, [r7, #24]
			channelId = (rx[0] >> 4) & 0x0F;
 800c742:	7d3b      	ldrb	r3, [r7, #20]
 800c744:	091b      	lsrs	r3, r3, #4
 800c746:	b2db      	uxtb	r3, r3
 800c748:	f003 030f 	and.w	r3, r3, #15
 800c74c:	82fb      	strh	r3, [r7, #22]
			adc_out[channelId] = adc_counts;
 800c74e:	8afb      	ldrh	r3, [r7, #22]
 800c750:	005b      	lsls	r3, r3, #1
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	4413      	add	r3, r2
 800c756:	8b3a      	ldrh	r2, [r7, #24]
 800c758:	801a      	strh	r2, [r3, #0]
		for(uint8_t channel = 1; channel <= 16; channel++){
 800c75a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c75e:	3301      	adds	r3, #1
 800c760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c764:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c768:	2b10      	cmp	r3, #16
 800c76a:	d9a8      	bls.n	800c6be <read_adc+0x6e>
			adc_counts = ((rx[0]<<8)|rx[1]) & 0x0FFF;
			channelId = (rx[0] >> 4) & 0x0F;
			adc_out[channelId] = adc_counts;
		}
	}
}
 800c76c:	e08b      	b.n	800c886 <read_adc+0x236>
		set_adc(pinfo, GPIO_PIN_SET);
 800c76e:	2101      	movs	r1, #1
 800c770:	68b8      	ldr	r0, [r7, #8]
 800c772:	f000 f952 	bl	800ca1a <set_adc>
		if (pinfo->HARDWARE_CONFIGURATION == EOC_AND_CNVST) {
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d103      	bne.n	800c788 <read_adc+0x138>
			cycle_cnvst(pinfo);
 800c780:	68b8      	ldr	r0, [r7, #8]
 800c782:	f000 f95c 	bl	800ca3e <cycle_cnvst>
 800c786:	e021      	b.n	800c7cc <read_adc+0x17c>
		} else if (pinfo->HARDWARE_CONFIGURATION == EOC_ONLY){
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d11c      	bne.n	800c7cc <read_adc+0x17c>
			ADC_MODE_CNTL_REG = SET_MAX11128_SWCNV|(CUSTOM_INT<<11);
 800c792:	f643 0302 	movw	r3, #14338	@ 0x3802
 800c796:	843b      	strh	r3, [r7, #32]
			package_cmd(ADC_MODE_CNTL_REG, tx);
 800c798:	f107 0210 	add.w	r2, r7, #16
 800c79c:	8c3b      	ldrh	r3, [r7, #32]
 800c79e:	4611      	mov	r1, r2
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f000 f923 	bl	800c9ec <package_cmd>
			taskENTER_CRITICAL();
 800c7a6:	f003 ffa7 	bl	80106f8 <vPortEnterCritical>
			set_adc(pinfo, GPIO_PIN_RESET);
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	68b8      	ldr	r0, [r7, #8]
 800c7ae:	f000 f934 	bl	800ca1a <set_adc>
			if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 800c7b2:	f107 0110 	add.w	r1, r7, #16
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	2202      	movs	r2, #2
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	f7fc fb74 	bl	8008ea8 <HAL_SPI_Transmit>
			set_adc(pinfo, GPIO_PIN_SET);
 800c7c0:	2101      	movs	r1, #1
 800c7c2:	68b8      	ldr	r0, [r7, #8]
 800c7c4:	f000 f929 	bl	800ca1a <set_adc>
			taskEXIT_CRITICAL();
 800c7c8:	f003 ffc8 	bl	801075c <vPortExitCritical>
		uint16_t elapsed_cycles = 0;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
		while (HAL_GPIO_ReadPin(pinfo->MAX11128_EOC_PORT,
 800c7d0:	e005      	b.n	800c7de <read_adc+0x18e>
			if (elapsed_cycles > MAX11128_EOC_WAIT_TIME) {
 800c7d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c7d4:	2b14      	cmp	r3, #20
 800c7d6:	d80e      	bhi.n	800c7f6 <read_adc+0x1a6>
			++elapsed_cycles;
 800c7d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c7da:	3301      	adds	r3, #1
 800c7dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		while (HAL_GPIO_ReadPin(pinfo->MAX11128_EOC_PORT,
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	685a      	ldr	r2, [r3, #4]
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	89db      	ldrh	r3, [r3, #14]
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	4610      	mov	r0, r2
 800c7ea:	f7f9 f9dd 	bl	8005ba8 <HAL_GPIO_ReadPin>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d1ee      	bne.n	800c7d2 <read_adc+0x182>
 800c7f4:	e000      	b.n	800c7f8 <read_adc+0x1a8>
				break;
 800c7f6:	bf00      	nop
		uint16_t adc_counts = 0;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	83fb      	strh	r3, [r7, #30]
		uint16_t channelId  = 0;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	83bb      	strh	r3, [r7, #28]
		for (uint8_t i = 0; i < pinfo->NUM_CHANNELS; ++i) {
 800c800:	2300      	movs	r3, #0
 800c802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c806:	e038      	b.n	800c87a <read_adc+0x22a>
			rx[0] = rx[1] = 0;
 800c808:	2300      	movs	r3, #0
 800c80a:	757b      	strb	r3, [r7, #21]
 800c80c:	7d7b      	ldrb	r3, [r7, #21]
 800c80e:	753b      	strb	r3, [r7, #20]
			tx[0] = tx[1] = 0;
 800c810:	2300      	movs	r3, #0
 800c812:	747b      	strb	r3, [r7, #17]
 800c814:	7c7b      	ldrb	r3, [r7, #17]
 800c816:	743b      	strb	r3, [r7, #16]
			taskENTER_CRITICAL();
 800c818:	f003 ff6e 	bl	80106f8 <vPortEnterCritical>
			set_adc(pinfo, GPIO_PIN_RESET);
 800c81c:	2100      	movs	r1, #0
 800c81e:	68b8      	ldr	r0, [r7, #8]
 800c820:	f000 f8fb 	bl	800ca1a <set_adc>
			write_adc_reg(SPI_BUS, tx, rx);
 800c824:	f107 0214 	add.w	r2, r7, #20
 800c828:	f107 0310 	add.w	r3, r7, #16
 800c82c:	4619      	mov	r1, r3
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	f000 f8ca 	bl	800c9c8 <write_adc_reg>
			set_adc(pinfo, GPIO_PIN_SET);
 800c834:	2101      	movs	r1, #1
 800c836:	68b8      	ldr	r0, [r7, #8]
 800c838:	f000 f8ef 	bl	800ca1a <set_adc>
			taskEXIT_CRITICAL();
 800c83c:	f003 ff8e 	bl	801075c <vPortExitCritical>
			adc_counts = ((rx[0]<<8)|rx[1]) & 0x0FFF;
 800c840:	7d3b      	ldrb	r3, [r7, #20]
 800c842:	b21b      	sxth	r3, r3
 800c844:	021b      	lsls	r3, r3, #8
 800c846:	b21a      	sxth	r2, r3
 800c848:	7d7b      	ldrb	r3, [r7, #21]
 800c84a:	b21b      	sxth	r3, r3
 800c84c:	4313      	orrs	r3, r2
 800c84e:	b21b      	sxth	r3, r3
 800c850:	b29b      	uxth	r3, r3
 800c852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c856:	83fb      	strh	r3, [r7, #30]
			channelId = (rx[0] >> 4) & 0x0F;
 800c858:	7d3b      	ldrb	r3, [r7, #20]
 800c85a:	091b      	lsrs	r3, r3, #4
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	f003 030f 	and.w	r3, r3, #15
 800c862:	83bb      	strh	r3, [r7, #28]
			adc_out[channelId] = adc_counts;
 800c864:	8bbb      	ldrh	r3, [r7, #28]
 800c866:	005b      	lsls	r3, r3, #1
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	4413      	add	r3, r2
 800c86c:	8bfa      	ldrh	r2, [r7, #30]
 800c86e:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < pinfo->NUM_CHANNELS; ++i) {
 800c870:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c874:	3301      	adds	r3, #1
 800c876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	7c9b      	ldrb	r3, [r3, #18]
 800c87e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800c882:	429a      	cmp	r2, r3
 800c884:	d3c0      	bcc.n	800c808 <read_adc+0x1b8>
}
 800c886:	bf00      	nop
 800c888:	3728      	adds	r7, #40	@ 0x28
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <set_read_adc_range>:

void set_read_adc_range(SPI_HandleTypeDef *SPI_BUS, GPIO_MAX11128_Pinfo *pinfo) {
 800c88e:	b580      	push	{r7, lr}
 800c890:	b086      	sub	sp, #24
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
 800c896:	6039      	str	r1, [r7, #0]
     5. Set CHSEL[3:0] to Channel Number (Not needed for CUSTOM INT)
     6. Set SWCNV bit to 1 to enable conversions with chip select
     */
    uint8_t tx[2];

    uint16_t SET_SCAN_REGISTER_0 = MAX11128_CUSTOM_SCAN0;
 800c898:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800c89c:	82fb      	strh	r3, [r7, #22]
    uint16_t SET_SCAN_REGISTER_1 = MAX11128_CUSTOM_SCAN1;
 800c89e:	f44f 4328 	mov.w	r3, #43008	@ 0xa800
 800c8a2:	82bb      	strh	r3, [r7, #20]
    uint8_t num_channels		= pinfo->NUM_CHANNELS;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	7c9b      	ldrb	r3, [r3, #18]
 800c8a8:	74bb      	strb	r3, [r7, #18]

    for (uint8_t i = 0; i < num_channels; ++i) {
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	74fb      	strb	r3, [r7, #19]
 800c8ae:	e025      	b.n	800c8fc <set_read_adc_range+0x6e>
        uint8_t ch = pinfo->MAX11128_CHANNELS[i];
 800c8b0:	7cfb      	ldrb	r3, [r7, #19]
 800c8b2:	683a      	ldr	r2, [r7, #0]
 800c8b4:	4413      	add	r3, r2
 800c8b6:	7cdb      	ldrb	r3, [r3, #19]
 800c8b8:	747b      	strb	r3, [r7, #17]
        if (ch > 7) {
 800c8ba:	7c7b      	ldrb	r3, [r7, #17]
 800c8bc:	2b07      	cmp	r3, #7
 800c8be:	d90d      	bls.n	800c8dc <set_read_adc_range+0x4e>
            ch -= MAX11128_CUSTOM_SCAN0_SUB;
 800c8c0:	7c7b      	ldrb	r3, [r7, #17]
 800c8c2:	3b05      	subs	r3, #5
 800c8c4:	747b      	strb	r3, [r7, #17]
            SET_SCAN_REGISTER_0 = SET_SCAN_REGISTER_0 | (1 << ch);
 800c8c6:	7c7b      	ldrb	r3, [r7, #17]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ce:	b21a      	sxth	r2, r3
 800c8d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	b21b      	sxth	r3, r3
 800c8d8:	82fb      	strh	r3, [r7, #22]
 800c8da:	e00c      	b.n	800c8f6 <set_read_adc_range+0x68>
        } else {
            ch += MAX11128_CUSTOM_SCAN1_ADD;
 800c8dc:	7c7b      	ldrb	r3, [r7, #17]
 800c8de:	3303      	adds	r3, #3
 800c8e0:	747b      	strb	r3, [r7, #17]
            SET_SCAN_REGISTER_1 = SET_SCAN_REGISTER_1 | (1 << ch);
 800c8e2:	7c7b      	ldrb	r3, [r7, #17]
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ea:	b21a      	sxth	r2, r3
 800c8ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	b21b      	sxth	r3, r3
 800c8f4:	82bb      	strh	r3, [r7, #20]
    for (uint8_t i = 0; i < num_channels; ++i) {
 800c8f6:	7cfb      	ldrb	r3, [r7, #19]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	74fb      	strb	r3, [r7, #19]
 800c8fc:	7cfa      	ldrb	r2, [r7, #19]
 800c8fe:	7cbb      	ldrb	r3, [r7, #18]
 800c900:	429a      	cmp	r2, r3
 800c902:	d3d5      	bcc.n	800c8b0 <set_read_adc_range+0x22>
    }

    /* Set ADC to custom scan channel range */

    /* Transmit custom channels to send data from */
    package_cmd(SET_SCAN_REGISTER_0, tx);
 800c904:	f107 020c 	add.w	r2, r7, #12
 800c908:	8afb      	ldrh	r3, [r7, #22]
 800c90a:	4611      	mov	r1, r2
 800c90c:	4618      	mov	r0, r3
 800c90e:	f000 f86d 	bl	800c9ec <package_cmd>
    taskENTER_CRITICAL();
 800c912:	f003 fef1 	bl	80106f8 <vPortEnterCritical>
    set_adc(pinfo, GPIO_PIN_RESET);
 800c916:	2100      	movs	r1, #0
 800c918:	6838      	ldr	r0, [r7, #0]
 800c91a:	f000 f87e 	bl	800ca1a <set_adc>
    if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 800c91e:	f107 010c 	add.w	r1, r7, #12
 800c922:	2301      	movs	r3, #1
 800c924:	2202      	movs	r2, #2
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f7fc fabe 	bl	8008ea8 <HAL_SPI_Transmit>
    set_adc(pinfo, GPIO_PIN_SET);
 800c92c:	2101      	movs	r1, #1
 800c92e:	6838      	ldr	r0, [r7, #0]
 800c930:	f000 f873 	bl	800ca1a <set_adc>
    taskEXIT_CRITICAL();
 800c934:	f003 ff12 	bl	801075c <vPortExitCritical>

    package_cmd(SET_SCAN_REGISTER_1, tx);
 800c938:	f107 020c 	add.w	r2, r7, #12
 800c93c:	8abb      	ldrh	r3, [r7, #20]
 800c93e:	4611      	mov	r1, r2
 800c940:	4618      	mov	r0, r3
 800c942:	f000 f853 	bl	800c9ec <package_cmd>
    taskENTER_CRITICAL();
 800c946:	f003 fed7 	bl	80106f8 <vPortEnterCritical>
    set_adc(pinfo, GPIO_PIN_RESET);
 800c94a:	2100      	movs	r1, #0
 800c94c:	6838      	ldr	r0, [r7, #0]
 800c94e:	f000 f864 	bl	800ca1a <set_adc>
    if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 800c952:	f107 010c 	add.w	r1, r7, #12
 800c956:	2301      	movs	r3, #1
 800c958:	2202      	movs	r2, #2
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f7fc faa4 	bl	8008ea8 <HAL_SPI_Transmit>
    set_adc(pinfo, GPIO_PIN_SET);
 800c960:	2101      	movs	r1, #1
 800c962:	6838      	ldr	r0, [r7, #0]
 800c964:	f000 f859 	bl	800ca1a <set_adc>
    taskEXIT_CRITICAL();
 800c968:	f003 fef8 	bl	801075c <vPortExitCritical>
}
 800c96c:	bf00      	nop
 800c96e:	3718      	adds	r7, #24
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <configure_read_adc_all>:

void configure_read_adc_all(GPIO_MAX11128_Pinfo *pinfo) {
 800c974:	b480      	push	{r7}
 800c976:	b085      	sub	sp, #20
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
    // Convenience function for reading all channels on adc
    pinfo->NUM_CHANNELS = MAX11128_MAX_CHANNELS;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2210      	movs	r2, #16
 800c980:	749a      	strb	r2, [r3, #18]
    for (uint8_t i = 0; i < MAX11128_MAX_CHANNELS; ++i) {
 800c982:	2300      	movs	r3, #0
 800c984:	73fb      	strb	r3, [r7, #15]
 800c986:	e007      	b.n	800c998 <configure_read_adc_all+0x24>
        pinfo->MAX11128_CHANNELS[i] = i;
 800c988:	7bfb      	ldrb	r3, [r7, #15]
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	4413      	add	r3, r2
 800c98e:	7bfa      	ldrb	r2, [r7, #15]
 800c990:	74da      	strb	r2, [r3, #19]
    for (uint8_t i = 0; i < MAX11128_MAX_CHANNELS; ++i) {
 800c992:	7bfb      	ldrb	r3, [r7, #15]
 800c994:	3301      	adds	r3, #1
 800c996:	73fb      	strb	r3, [r7, #15]
 800c998:	7bfb      	ldrb	r3, [r7, #15]
 800c99a:	2b0f      	cmp	r3, #15
 800c99c:	d9f4      	bls.n	800c988 <configure_read_adc_all+0x14>
    }
    if (pinfo->HARDWARE_CONFIGURATION == EOC_AND_CNVST) {
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d109      	bne.n	800c9bc <configure_read_adc_all+0x48>
    	pinfo->NUM_CHANNELS--;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	7c9b      	ldrb	r3, [r3, #18]
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	b2da      	uxtb	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	749a      	strb	r2, [r3, #18]
    	pinfo->MAX11128_CHANNELS[14] = 15;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	220f      	movs	r2, #15
 800c9b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
}
 800c9bc:	bf00      	nop
 800c9be:	3714      	adds	r7, #20
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr

0800c9c8 <write_adc_reg>:

static inline void write_adc_reg(SPI_HandleTypeDef *SPI_BUS, uint8_t *tx, uint8_t *rx) {
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b086      	sub	sp, #24
 800c9cc:	af02      	add	r7, sp, #8
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	607a      	str	r2, [r7, #4]
    if (HAL_SPI_TransmitReceive(SPI_BUS, tx, rx, 2, 1) == HAL_TIMEOUT) {
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	2302      	movs	r3, #2
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	68b9      	ldr	r1, [r7, #8]
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f7fc fec2 	bl	8009768 <HAL_SPI_TransmitReceive>
    }
}
 800c9e4:	bf00      	nop
 800c9e6:	3710      	adds	r7, #16
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <package_cmd>:


static inline void package_cmd(uint16_t cmd, uint8_t *tx) {
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	6039      	str	r1, [r7, #0]
 800c9f6:	80fb      	strh	r3, [r7, #6]
    tx[0] = (cmd >> 8) & 0x00ff;
 800c9f8:	88fb      	ldrh	r3, [r7, #6]
 800c9fa:	0a1b      	lsrs	r3, r3, #8
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	b2da      	uxtb	r2, r3
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	701a      	strb	r2, [r3, #0]
    tx[1] = (cmd & 0x00ff);
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	3301      	adds	r3, #1
 800ca08:	88fa      	ldrh	r2, [r7, #6]
 800ca0a:	b2d2      	uxtb	r2, r2
 800ca0c:	701a      	strb	r2, [r3, #0]
}
 800ca0e:	bf00      	nop
 800ca10:	370c      	adds	r7, #12
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr

0800ca1a <set_adc>:

static inline void set_adc(GPIO_MAX11128_Pinfo *pinfo, GPIO_PinState state) {
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b082      	sub	sp, #8
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
 800ca22:	460b      	mov	r3, r1
 800ca24:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pinfo->MAX11128_CS_PORT, pinfo->MAX11128_CS_ADDR, state);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6818      	ldr	r0, [r3, #0]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	899b      	ldrh	r3, [r3, #12]
 800ca2e:	78fa      	ldrb	r2, [r7, #3]
 800ca30:	4619      	mov	r1, r3
 800ca32:	f7f9 f8d1 	bl	8005bd8 <HAL_GPIO_WritePin>
}
 800ca36:	bf00      	nop
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <cycle_cnvst>:

void cycle_cnvst(GPIO_MAX11128_Pinfo *pinfo) {
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b082      	sub	sp, #8
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6898      	ldr	r0, [r3, #8]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	8a1b      	ldrh	r3, [r3, #16]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	4619      	mov	r1, r3
 800ca52:	f7f9 f8c1 	bl	8005bd8 <HAL_GPIO_WritePin>
        pinfo->MAX11128_CNVST_PORT, pinfo->MAX11128_CNVST_ADDR, GPIO_PIN_RESET
    );
    asm("nop");  // Clock Freq maxes at 180 MHz, at which each noop instruction
 800ca56:	bf00      	nop
    asm("nop");  // takes about 5.5 ns to complete
 800ca58:	bf00      	nop
    HAL_GPIO_WritePin(
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6898      	ldr	r0, [r3, #8]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	8a1b      	ldrh	r3, [r3, #16]
 800ca62:	2201      	movs	r2, #1
 800ca64:	4619      	mov	r1, r3
 800ca66:	f7f9 f8b7 	bl	8005bd8 <HAL_GPIO_WritePin>
        pinfo->MAX11128_CNVST_PORT, pinfo->MAX11128_CNVST_ADDR, GPIO_PIN_SET
    );
}
 800ca6a:	bf00      	nop
 800ca6c:	3708      	adds	r7, #8
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <MS5611_chipSelect>:
 */

#include "MS5611.h"

//Chip select
void MS5611_chipSelect(MS5611* BAR) {
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b082      	sub	sp, #8
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BAR->CS_GPIO_Port, BAR->CS_GPIO_Pin, RESET); //Low is selected
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6898      	ldr	r0, [r3, #8]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	899b      	ldrh	r3, [r3, #12]
 800ca82:	2200      	movs	r2, #0
 800ca84:	4619      	mov	r1, r3
 800ca86:	f7f9 f8a7 	bl	8005bd8 <HAL_GPIO_WritePin>
}
 800ca8a:	bf00      	nop
 800ca8c:	3708      	adds	r7, #8
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <MS5611_chipRelease>:

//Chip release
void MS5611_chipRelease(MS5611* BAR) {
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b082      	sub	sp, #8
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BAR->CS_GPIO_Port, BAR->CS_GPIO_Pin, SET); //High is released
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6898      	ldr	r0, [r3, #8]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	899b      	ldrh	r3, [r3, #12]
 800caa2:	2201      	movs	r2, #1
 800caa4:	4619      	mov	r1, r3
 800caa6:	f7f9 f897 	bl	8005bd8 <HAL_GPIO_WritePin>
}
 800caaa:	bf00      	nop
 800caac:	3708      	adds	r7, #8
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}

0800cab2 <MS5611_transmit>:

//Transmit register from barometer
HAL_StatusTypeDef MS5611_transmit(MS5611* BAR, uint8_t* tx_buffer, uint8_t num_bytes) {
 800cab2:	b580      	push	{r7, lr}
 800cab4:	b086      	sub	sp, #24
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	60f8      	str	r0, [r7, #12]
 800caba:	60b9      	str	r1, [r7, #8]
 800cabc:	4613      	mov	r3, r2
 800cabe:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

	taskENTER_CRITICAL();
 800cac0:	f003 fe1a 	bl	80106f8 <vPortEnterCritical>

	MS5611_chipSelect(BAR);
 800cac4:	68f8      	ldr	r0, [r7, #12]
 800cac6:	f7ff ffd4 	bl	800ca72 <MS5611_chipSelect>
	status = HAL_SPI_Transmit(BAR->hspi, tx_buffer, 1, BAR->SPI_TIMEOUT);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	6818      	ldr	r0, [r3, #0]
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	889b      	ldrh	r3, [r3, #4]
 800cad2:	2201      	movs	r2, #1
 800cad4:	68b9      	ldr	r1, [r7, #8]
 800cad6:	f7fc f9e7 	bl	8008ea8 <HAL_SPI_Transmit>
 800cada:	4603      	mov	r3, r0
 800cadc:	75fb      	strb	r3, [r7, #23]
	MS5611_chipRelease(BAR);
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	f7ff ffd7 	bl	800ca92 <MS5611_chipRelease>

	taskEXIT_CRITICAL();
 800cae4:	f003 fe3a 	bl	801075c <vPortExitCritical>

	return status;
 800cae8:	7dfb      	ldrb	r3, [r7, #23]
}
 800caea:	4618      	mov	r0, r3
 800caec:	3718      	adds	r7, #24
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}

0800caf2 <MS5611_read>:
	return status;
}

// Abstraction for reading a register
// Note: num_bytes is the combined size of tx_buffer and rx_buffer
int MS5611_read(MS5611* BAR, uint8_t* tx_buffer, uint8_t* rx_buffer, uint8_t num_bytes) {
 800caf2:	b580      	push	{r7, lr}
 800caf4:	b088      	sub	sp, #32
 800caf6:	af02      	add	r7, sp, #8
 800caf8:	60f8      	str	r0, [r7, #12]
 800cafa:	60b9      	str	r1, [r7, #8]
 800cafc:	607a      	str	r2, [r7, #4]
 800cafe:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;

	taskENTER_CRITICAL();
 800cb00:	f003 fdfa 	bl	80106f8 <vPortEnterCritical>

	MS5611_chipSelect(BAR);
 800cb04:	68f8      	ldr	r0, [r7, #12]
 800cb06:	f7ff ffb4 	bl	800ca72 <MS5611_chipSelect>
	status = HAL_SPI_TransmitReceive(BAR->hspi, tx_buffer, rx_buffer, num_bytes, BAR->SPI_TIMEOUT);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	6818      	ldr	r0, [r3, #0]
 800cb0e:	78fb      	ldrb	r3, [r7, #3]
 800cb10:	b29a      	uxth	r2, r3
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	889b      	ldrh	r3, [r3, #4]
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	4613      	mov	r3, r2
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	68b9      	ldr	r1, [r7, #8]
 800cb1e:	f7fc fe23 	bl	8009768 <HAL_SPI_TransmitReceive>
 800cb22:	4603      	mov	r3, r0
 800cb24:	75fb      	strb	r3, [r7, #23]
	MS5611_chipRelease(BAR);
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f7ff ffb3 	bl	800ca92 <MS5611_chipRelease>

	taskEXIT_CRITICAL();
 800cb2c:	f003 fe16 	bl	801075c <vPortExitCritical>

	if (status != HAL_OK) {
 800cb30:	7dfb      	ldrb	r3, [r7, #23]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d001      	beq.n	800cb3a <MS5611_read+0x48>
		return 1;
 800cb36:	2301      	movs	r3, #1
 800cb38:	e000      	b.n	800cb3c <MS5611_read+0x4a>
	} else {
		return 0;
 800cb3a:	2300      	movs	r3, #0
	}
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3718      	adds	r7, #24
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <MS5611_write>:

// Abstraction for sending a single register
int MS5611_write(MS5611* BAR, uint8_t reg) {
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	70fb      	strb	r3, [r7, #3]
	if (MS5611_transmit(BAR, &reg, 1) != HAL_OK) {
 800cb50:	1cfb      	adds	r3, r7, #3
 800cb52:	2201      	movs	r2, #1
 800cb54:	4619      	mov	r1, r3
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f7ff ffab 	bl	800cab2 <MS5611_transmit>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d001      	beq.n	800cb66 <MS5611_write+0x22>
		return 1;
 800cb62:	2301      	movs	r3, #1
 800cb64:	e000      	b.n	800cb68 <MS5611_write+0x24>
	}
	return 0;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <MS5611_Reset>:

// Software and memory reset
int MS5611_Reset(MS5611* BAR) {
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
	if (!MS5611_write(BAR, MS5611_RESET)) {
 800cb78:	211e      	movs	r1, #30
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f7ff ffe2 	bl	800cb44 <MS5611_write>
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d104      	bne.n	800cb90 <MS5611_Reset+0x20>
		vTaskDelay(5); // Time for reset
 800cb86:	2005      	movs	r0, #5
 800cb88:	f002 fa8e 	bl	800f0a8 <vTaskDelay>
    	return 0;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	e000      	b.n	800cb92 <MS5611_Reset+0x22>
	}
	return 1;
 800cb90:	2301      	movs	r3, #1
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3708      	adds	r7, #8
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <MS5611_readPROM>:

// Read the programmable read only memory
// Note: prom_buffer must be of size 6
int MS5611_readPROM(MS5611* BAR, MS5611_PROM_t* prom_buffer) {
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b086      	sub	sp, #24
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
 800cba2:	6039      	str	r1, [r7, #0]
	uint8_t tx_buffer[3] = {0};
 800cba4:	f107 0310 	add.w	r3, r7, #16
 800cba8:	2100      	movs	r1, #0
 800cbaa:	460a      	mov	r2, r1
 800cbac:	801a      	strh	r2, [r3, #0]
 800cbae:	460a      	mov	r2, r1
 800cbb0:	709a      	strb	r2, [r3, #2]
	uint8_t rx_buffer[3] = {0};
 800cbb2:	f107 030c 	add.w	r3, r7, #12
 800cbb6:	2100      	movs	r1, #0
 800cbb8:	460a      	mov	r2, r1
 800cbba:	801a      	strh	r2, [r3, #0]
 800cbbc:	460a      	mov	r2, r1
 800cbbe:	709a      	strb	r2, [r3, #2]
	for (int i = 0; i < 6; i++) {
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	617b      	str	r3, [r7, #20]
 800cbc4:	e022      	b.n	800cc0c <MS5611_readPROM+0x72>
		tx_buffer[0] = MS5611_PROM + 2 + (i*2); // PROM is 2 bytes long and starts at 0xA2
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	3351      	adds	r3, #81	@ 0x51
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	005b      	lsls	r3, r3, #1
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	743b      	strb	r3, [r7, #16]
		if (MS5611_read(BAR, tx_buffer, rx_buffer, 3) == 1) {
 800cbd2:	f107 020c 	add.w	r2, r7, #12
 800cbd6:	f107 0110 	add.w	r1, r7, #16
 800cbda:	2303      	movs	r3, #3
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f7ff ff88 	bl	800caf2 <MS5611_read>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d101      	bne.n	800cbec <MS5611_readPROM+0x52>
			return 1;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	e013      	b.n	800cc14 <MS5611_readPROM+0x7a>
		} else {
			// for some reason the first byte we read back is always 0xFE
			// so we try to read three and use the last 2 instead
			prom_buffer->bytes[i] = (rx_buffer[1] << 8) | rx_buffer[2];
 800cbec:	7b7b      	ldrb	r3, [r7, #13]
 800cbee:	b21b      	sxth	r3, r3
 800cbf0:	021b      	lsls	r3, r3, #8
 800cbf2:	b21a      	sxth	r2, r3
 800cbf4:	7bbb      	ldrb	r3, [r7, #14]
 800cbf6:	b21b      	sxth	r3, r3
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	b21b      	sxth	r3, r3
 800cbfc:	b299      	uxth	r1, r3
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	697a      	ldr	r2, [r7, #20]
 800cc02:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 6; i++) {
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	3301      	adds	r3, #1
 800cc0a:	617b      	str	r3, [r7, #20]
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	2b05      	cmp	r3, #5
 800cc10:	ddd9      	ble.n	800cbc6 <MS5611_readPROM+0x2c>
		}
	}
	return 0;
 800cc12:	2300      	movs	r3, #0
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3718      	adds	r7, #24
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <MS5611_readADC>:

int MS5611_readADC(MS5611 *BAR, uint32_t *result) {
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
	uint8_t tx_buffer[3] = { 0 };
 800cc26:	f107 030c 	add.w	r3, r7, #12
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	460a      	mov	r2, r1
 800cc2e:	801a      	strh	r2, [r3, #0]
 800cc30:	460a      	mov	r2, r1
 800cc32:	709a      	strb	r2, [r3, #2]
	uint8_t rx_buffer[3] = { 0 };
 800cc34:	f107 0308 	add.w	r3, r7, #8
 800cc38:	2100      	movs	r1, #0
 800cc3a:	460a      	mov	r2, r1
 800cc3c:	801a      	strh	r2, [r3, #0]
 800cc3e:	460a      	mov	r2, r1
 800cc40:	709a      	strb	r2, [r3, #2]
	tx_buffer[0] = MS5611_ADC;
 800cc42:	2300      	movs	r3, #0
 800cc44:	733b      	strb	r3, [r7, #12]
	if (MS5611_read(BAR, tx_buffer, rx_buffer, 4) == 1) {
 800cc46:	f107 0208 	add.w	r2, r7, #8
 800cc4a:	f107 010c 	add.w	r1, r7, #12
 800cc4e:	2304      	movs	r3, #4
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7ff ff4e 	bl	800caf2 <MS5611_read>
 800cc56:	4603      	mov	r3, r0
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d101      	bne.n	800cc60 <MS5611_readADC+0x44>
		return 1;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	e00a      	b.n	800cc76 <MS5611_readADC+0x5a>
	} else {
		// for some reason the first byte we read back is always 0xFE
		// so we try to read three and use the last 2 instead
		*result = (rx_buffer[1] << 16) | (rx_buffer[2] << 8) | rx_buffer[3];
 800cc60:	7a7b      	ldrb	r3, [r7, #9]
 800cc62:	041a      	lsls	r2, r3, #16
 800cc64:	7abb      	ldrb	r3, [r7, #10]
 800cc66:	021b      	lsls	r3, r3, #8
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	7afa      	ldrb	r2, [r7, #11]
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	461a      	mov	r2, r3
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	601a      	str	r2, [r3, #0]
	}
	return 0;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
	...

0800cc80 <MS5611_presConvert>:

// Pressure convert
// OSR is the "Over Sampling Rate" which determines the resolution of the pressure and temperature
int MS5611_presConvert(MS5611* BAR, uint32_t* pres_raw, OSR osr) {
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b086      	sub	sp, #24
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0x00;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	75fb      	strb	r3, [r7, #23]
	switch (osr) {
 800cc92:	79fb      	ldrb	r3, [r7, #7]
 800cc94:	2b04      	cmp	r3, #4
 800cc96:	d81c      	bhi.n	800ccd2 <MS5611_presConvert+0x52>
 800cc98:	a201      	add	r2, pc, #4	@ (adr r2, 800cca0 <MS5611_presConvert+0x20>)
 800cc9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc9e:	bf00      	nop
 800cca0:	0800ccb5 	.word	0x0800ccb5
 800cca4:	0800ccbb 	.word	0x0800ccbb
 800cca8:	0800ccc1 	.word	0x0800ccc1
 800ccac:	0800ccc7 	.word	0x0800ccc7
 800ccb0:	0800cccd 	.word	0x0800cccd
		case OSR_256:
			cmd = MS5611_D1_OSR_256;
 800ccb4:	2340      	movs	r3, #64	@ 0x40
 800ccb6:	75fb      	strb	r3, [r7, #23]
			break;
 800ccb8:	e00d      	b.n	800ccd6 <MS5611_presConvert+0x56>
		case OSR_512:
			cmd = MS5611_D1_OSR_512;
 800ccba:	2342      	movs	r3, #66	@ 0x42
 800ccbc:	75fb      	strb	r3, [r7, #23]
			break;
 800ccbe:	e00a      	b.n	800ccd6 <MS5611_presConvert+0x56>
		case OSR_1024:
			cmd = MS5611_D1_OSR_1024;
 800ccc0:	2344      	movs	r3, #68	@ 0x44
 800ccc2:	75fb      	strb	r3, [r7, #23]
			break;
 800ccc4:	e007      	b.n	800ccd6 <MS5611_presConvert+0x56>
		case OSR_2048:
			cmd = MS5611_D1_OSR_2048;
 800ccc6:	2346      	movs	r3, #70	@ 0x46
 800ccc8:	75fb      	strb	r3, [r7, #23]
			break;
 800ccca:	e004      	b.n	800ccd6 <MS5611_presConvert+0x56>
		case OSR_4096:
			cmd = MS5611_D1_OSR_4096;
 800cccc:	2348      	movs	r3, #72	@ 0x48
 800ccce:	75fb      	strb	r3, [r7, #23]
			break;
 800ccd0:	e001      	b.n	800ccd6 <MS5611_presConvert+0x56>
		default:
			return 1; // invalid OSR
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	e016      	b.n	800cd04 <MS5611_presConvert+0x84>
	}
	if (cmd == 0x00) { return 1; } // invalid cmd
 800ccd6:	7dfb      	ldrb	r3, [r7, #23]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d101      	bne.n	800cce0 <MS5611_presConvert+0x60>
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e011      	b.n	800cd04 <MS5611_presConvert+0x84>
	MS5611_write(BAR, cmd); // write the command
 800cce0:	7dfb      	ldrb	r3, [r7, #23]
 800cce2:	4619      	mov	r1, r3
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f7ff ff2d 	bl	800cb44 <MS5611_write>
	vTaskDelay(10); // 10ms conversion time
 800ccea:	200a      	movs	r0, #10
 800ccec:	f002 f9dc 	bl	800f0a8 <vTaskDelay>
	if (MS5611_readADC(BAR, pres_raw)) {
 800ccf0:	68b9      	ldr	r1, [r7, #8]
 800ccf2:	68f8      	ldr	r0, [r7, #12]
 800ccf4:	f7ff ff92 	bl	800cc1c <MS5611_readADC>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d001      	beq.n	800cd02 <MS5611_presConvert+0x82>
		return 1;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e000      	b.n	800cd04 <MS5611_presConvert+0x84>
	}
	return 0;
 800cd02:	2300      	movs	r3, #0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3718      	adds	r7, #24
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <MS5611_tempConvert>:

//Altitude convert
int MS5611_tempConvert(MS5611* BAR, uint32_t* temp_raw, OSR osr) {
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b086      	sub	sp, #24
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	4613      	mov	r3, r2
 800cd18:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0x00;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	75fb      	strb	r3, [r7, #23]
	switch (osr) {
 800cd1e:	79fb      	ldrb	r3, [r7, #7]
 800cd20:	2b04      	cmp	r3, #4
 800cd22:	d81c      	bhi.n	800cd5e <MS5611_tempConvert+0x52>
 800cd24:	a201      	add	r2, pc, #4	@ (adr r2, 800cd2c <MS5611_tempConvert+0x20>)
 800cd26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd2a:	bf00      	nop
 800cd2c:	0800cd41 	.word	0x0800cd41
 800cd30:	0800cd47 	.word	0x0800cd47
 800cd34:	0800cd4d 	.word	0x0800cd4d
 800cd38:	0800cd53 	.word	0x0800cd53
 800cd3c:	0800cd59 	.word	0x0800cd59
		case OSR_256:
			cmd = MS5611_D2_OSR_256;
 800cd40:	2350      	movs	r3, #80	@ 0x50
 800cd42:	75fb      	strb	r3, [r7, #23]
			break;
 800cd44:	e00d      	b.n	800cd62 <MS5611_tempConvert+0x56>
		case OSR_512:
			cmd = MS5611_D2_OSR_512;
 800cd46:	2352      	movs	r3, #82	@ 0x52
 800cd48:	75fb      	strb	r3, [r7, #23]
			break;
 800cd4a:	e00a      	b.n	800cd62 <MS5611_tempConvert+0x56>
		case OSR_1024:
			cmd = MS5611_D2_OSR_1024;
 800cd4c:	2354      	movs	r3, #84	@ 0x54
 800cd4e:	75fb      	strb	r3, [r7, #23]
			break;
 800cd50:	e007      	b.n	800cd62 <MS5611_tempConvert+0x56>
		case OSR_2048:
			cmd = MS5611_D2_OSR_2048;
 800cd52:	2356      	movs	r3, #86	@ 0x56
 800cd54:	75fb      	strb	r3, [r7, #23]
			break;
 800cd56:	e004      	b.n	800cd62 <MS5611_tempConvert+0x56>
		case OSR_4096:
			cmd = MS5611_D2_OSR_4096;
 800cd58:	2358      	movs	r3, #88	@ 0x58
 800cd5a:	75fb      	strb	r3, [r7, #23]
			break;
 800cd5c:	e001      	b.n	800cd62 <MS5611_tempConvert+0x56>
		default:
			return 1; // invalid OSR
 800cd5e:	2301      	movs	r3, #1
 800cd60:	e016      	b.n	800cd90 <MS5611_tempConvert+0x84>
	}
	if (cmd == 0x00) { return 1; } // invalid cmd
 800cd62:	7dfb      	ldrb	r3, [r7, #23]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d101      	bne.n	800cd6c <MS5611_tempConvert+0x60>
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e011      	b.n	800cd90 <MS5611_tempConvert+0x84>
	MS5611_write(BAR, cmd); // write the command
 800cd6c:	7dfb      	ldrb	r3, [r7, #23]
 800cd6e:	4619      	mov	r1, r3
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f7ff fee7 	bl	800cb44 <MS5611_write>
	vTaskDelay(10); // 10ms conversion time
 800cd76:	200a      	movs	r0, #10
 800cd78:	f002 f996 	bl	800f0a8 <vTaskDelay>
	if (MS5611_readADC(BAR, temp_raw)) {
 800cd7c:	68b9      	ldr	r1, [r7, #8]
 800cd7e:	68f8      	ldr	r0, [r7, #12]
 800cd80:	f7ff ff4c 	bl	800cc1c <MS5611_readADC>
 800cd84:	4603      	mov	r3, r0
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d001      	beq.n	800cd8e <MS5611_tempConvert+0x82>
		return 1;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e000      	b.n	800cd90 <MS5611_tempConvert+0x84>
	}
	return 0;
 800cd8e:	2300      	movs	r3, #0
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3718      	adds	r7, #24
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <MS5611_compensateTemp>:

int MS5611_compensateTemp(float* pres, uint32_t pres_raw, uint32_t temp_raw, MS5611_PROM_t* prom) {
 800cd98:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800cd9c:	b0ab      	sub	sp, #172	@ 0xac
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cda2:	67b9      	str	r1, [r7, #120]	@ 0x78
 800cda4:	677a      	str	r2, [r7, #116]	@ 0x74
 800cda6:	673b      	str	r3, [r7, #112]	@ 0x70
	volatile int32_t dT, P;
	volatile int64_t OFF, SENS;
	volatile int64_t partialA, partialB;

	dT = temp_raw - ((prom->constants.C5) * (0x1<<8));                      //D2-C5*2^8
 800cda8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cdaa:	891b      	ldrh	r3, [r3, #8]
 800cdac:	021b      	lsls	r3, r3, #8
 800cdae:	461a      	mov	r2, r3
 800cdb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cdb2:	1a9b      	subs	r3, r3, r2
 800cdb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	//TEMP = 2000 + ((int64_t)dT * ((int64_t)prom->constants.C6))/(0x1<<23);//2000 + dT*C6/2^23
	partialA = ((int64_t)prom->constants.C4) * (int64_t)dT;
 800cdb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cdba:	88db      	ldrh	r3, [r3, #6]
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	469a      	mov	sl, r3
 800cdc2:	4693      	mov	fp, r2
 800cdc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cdc8:	17da      	asrs	r2, r3, #31
 800cdca:	4698      	mov	r8, r3
 800cdcc:	4691      	mov	r9, r2
 800cdce:	fb08 f20b 	mul.w	r2, r8, fp
 800cdd2:	fb0a f309 	mul.w	r3, sl, r9
 800cdd6:	4413      	add	r3, r2
 800cdd8:	fbaa 4508 	umull	r4, r5, sl, r8
 800cddc:	442b      	add	r3, r5
 800cdde:	461d      	mov	r5, r3
 800cde0:	e9c7 4522 	strd	r4, r5, [r7, #136]	@ 0x88
	OFF = ((int64_t)prom->constants.C2) * (0x1<<16) + (partialA)/(0x1<<7);  //C2*2^16 + C4*dT/2^7
 800cde4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cde6:	885b      	ldrh	r3, [r3, #2]
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	2200      	movs	r2, #0
 800cdec:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cdee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800cdf0:	f04f 0400 	mov.w	r4, #0
 800cdf4:	f04f 0500 	mov.w	r5, #0
 800cdf8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800cdfc:	4613      	mov	r3, r2
 800cdfe:	041d      	lsls	r5, r3, #16
 800ce00:	460b      	mov	r3, r1
 800ce02:	ea45 4513 	orr.w	r5, r5, r3, lsr #16
 800ce06:	460b      	mov	r3, r1
 800ce08:	041c      	lsls	r4, r3, #16
 800ce0a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	da07      	bge.n	800ce22 <MS5611_compensateTemp+0x8a>
 800ce12:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 800ce16:	61b9      	str	r1, [r7, #24]
 800ce18:	f143 0300 	adc.w	r3, r3, #0
 800ce1c:	61fb      	str	r3, [r7, #28]
 800ce1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ce22:	f04f 0000 	mov.w	r0, #0
 800ce26:	f04f 0100 	mov.w	r1, #0
 800ce2a:	09d0      	lsrs	r0, r2, #7
 800ce2c:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800ce30:	11d9      	asrs	r1, r3, #7
 800ce32:	4602      	mov	r2, r0
 800ce34:	460b      	mov	r3, r1
 800ce36:	18a1      	adds	r1, r4, r2
 800ce38:	6539      	str	r1, [r7, #80]	@ 0x50
 800ce3a:	eb45 0303 	adc.w	r3, r5, r3
 800ce3e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce40:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800ce44:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
	partialB = ((int64_t)prom->constants.C3) * (int64_t)dT;
 800ce48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ce4a:	889b      	ldrh	r3, [r3, #4]
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	2200      	movs	r2, #0
 800ce50:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce52:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ce54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ce58:	17da      	asrs	r2, r3, #31
 800ce5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce5c:	647a      	str	r2, [r7, #68]	@ 0x44
 800ce5e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800ce62:	462b      	mov	r3, r5
 800ce64:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800ce68:	4642      	mov	r2, r8
 800ce6a:	fb02 f203 	mul.w	r2, r2, r3
 800ce6e:	464b      	mov	r3, r9
 800ce70:	4621      	mov	r1, r4
 800ce72:	fb01 f303 	mul.w	r3, r1, r3
 800ce76:	4413      	add	r3, r2
 800ce78:	4622      	mov	r2, r4
 800ce7a:	4641      	mov	r1, r8
 800ce7c:	fba2 1201 	umull	r1, r2, r2, r1
 800ce80:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ce82:	460a      	mov	r2, r1
 800ce84:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ce86:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ce88:	4413      	add	r3, r2
 800ce8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ce8c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 800ce90:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
	SENS = ((int64_t)prom->constants.C1) * (0x1<<15) + (partialB)/(0x1<<8); //C1*2^15 + C3*dT/2^8
 800ce94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ce96:	881b      	ldrh	r3, [r3, #0]
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800cea0:	f04f 0400 	mov.w	r4, #0
 800cea4:	f04f 0500 	mov.w	r5, #0
 800cea8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ceac:	4613      	mov	r3, r2
 800ceae:	03dd      	lsls	r5, r3, #15
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	ea45 4553 	orr.w	r5, r5, r3, lsr #17
 800ceb6:	460b      	mov	r3, r1
 800ceb8:	03dc      	lsls	r4, r3, #15
 800ceba:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	da07      	bge.n	800ced2 <MS5611_compensateTemp+0x13a>
 800cec2:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 800cec6:	6139      	str	r1, [r7, #16]
 800cec8:	f143 0300 	adc.w	r3, r3, #0
 800cecc:	617b      	str	r3, [r7, #20]
 800cece:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ced2:	f04f 0000 	mov.w	r0, #0
 800ced6:	f04f 0100 	mov.w	r1, #0
 800ceda:	0a10      	lsrs	r0, r2, #8
 800cedc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800cee0:	1219      	asrs	r1, r3, #8
 800cee2:	4602      	mov	r2, r0
 800cee4:	460b      	mov	r3, r1
 800cee6:	18a1      	adds	r1, r4, r2
 800cee8:	6339      	str	r1, [r7, #48]	@ 0x30
 800ceea:	eb45 0303 	adc.w	r3, r5, r3
 800ceee:	637b      	str	r3, [r7, #52]	@ 0x34
 800cef0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800cef4:	e9c7 3424 	strd	r3, r4, [r7, #144]	@ 0x90

	P = (((((int64_t)pres_raw)*SENS)/(0x1<<21)-OFF))/(0x1<<15);             //(D1*SENS/2^21-OFF)/2^15
 800cef8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cefa:	2200      	movs	r2, #0
 800cefc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cefe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cf00:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800cf04:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800cf08:	4629      	mov	r1, r5
 800cf0a:	fb02 f001 	mul.w	r0, r2, r1
 800cf0e:	4621      	mov	r1, r4
 800cf10:	fb01 f103 	mul.w	r1, r1, r3
 800cf14:	4401      	add	r1, r0
 800cf16:	4620      	mov	r0, r4
 800cf18:	fba0 2302 	umull	r2, r3, r0, r2
 800cf1c:	667b      	str	r3, [r7, #100]	@ 0x64
 800cf1e:	4613      	mov	r3, r2
 800cf20:	663b      	str	r3, [r7, #96]	@ 0x60
 800cf22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf24:	18cb      	adds	r3, r1, r3
 800cf26:	667b      	str	r3, [r7, #100]	@ 0x64
 800cf28:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	da07      	bge.n	800cf40 <MS5611_compensateTemp+0x1a8>
 800cf30:	4925      	ldr	r1, [pc, #148]	@ (800cfc8 <MS5611_compensateTemp+0x230>)
 800cf32:	1851      	adds	r1, r2, r1
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	f143 0300 	adc.w	r3, r3, #0
 800cf3a:	60fb      	str	r3, [r7, #12]
 800cf3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cf40:	f04f 0000 	mov.w	r0, #0
 800cf44:	f04f 0100 	mov.w	r1, #0
 800cf48:	0d50      	lsrs	r0, r2, #21
 800cf4a:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800cf4e:	1559      	asrs	r1, r3, #21
 800cf50:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800cf54:	1a84      	subs	r4, r0, r2
 800cf56:	623c      	str	r4, [r7, #32]
 800cf58:	eb61 0303 	sbc.w	r3, r1, r3
 800cf5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	da08      	bge.n	800cf78 <MS5611_compensateTemp+0x1e0>
 800cf66:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800cf6a:	1851      	adds	r1, r2, r1
 800cf6c:	6039      	str	r1, [r7, #0]
 800cf6e:	f143 0300 	adc.w	r3, r3, #0
 800cf72:	607b      	str	r3, [r7, #4]
 800cf74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf78:	f04f 0000 	mov.w	r0, #0
 800cf7c:	f04f 0100 	mov.w	r1, #0
 800cf80:	0bd0      	lsrs	r0, r2, #15
 800cf82:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 800cf86:	13d9      	asrs	r1, r3, #15
 800cf88:	4602      	mov	r2, r0
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	*pres = (float)(P * 0.01); // millibar
 800cf92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cf96:	ee07 3a90 	vmov	s15, r3
 800cf9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cf9e:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 800cfc0 <MS5611_compensateTemp+0x228>
 800cfa2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cfa6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800cfaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cfac:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 800cfb0:	2300      	movs	r3, #0
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	37ac      	adds	r7, #172	@ 0xac
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop
 800cfc0:	47ae147b 	.word	0x47ae147b
 800cfc4:	3f847ae1 	.word	0x3f847ae1
 800cfc8:	001fffff 	.word	0x001fffff

0800cfcc <MS5611_getPres>:

//Get pressure from barometer
int MS5611_getPres(MS5611* BAR, float* pres, MS5611_PROM_t* prom, OSR osr) {
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b086      	sub	sp, #24
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
 800cfd8:	70fb      	strb	r3, [r7, #3]
	uint32_t pres_raw = 0;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	617b      	str	r3, [r7, #20]
	uint32_t temp_raw = 0;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	613b      	str	r3, [r7, #16]
	if (MS5611_presConvert(BAR, &pres_raw, osr) == 1) { return 1; }
 800cfe2:	78fa      	ldrb	r2, [r7, #3]
 800cfe4:	f107 0314 	add.w	r3, r7, #20
 800cfe8:	4619      	mov	r1, r3
 800cfea:	68f8      	ldr	r0, [r7, #12]
 800cfec:	f7ff fe48 	bl	800cc80 <MS5611_presConvert>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d101      	bne.n	800cffa <MS5611_getPres+0x2e>
 800cff6:	2301      	movs	r3, #1
 800cff8:	e017      	b.n	800d02a <MS5611_getPres+0x5e>
	if (MS5611_tempConvert(BAR, &temp_raw, osr) == 1) { return 1; }
 800cffa:	78fa      	ldrb	r2, [r7, #3]
 800cffc:	f107 0310 	add.w	r3, r7, #16
 800d000:	4619      	mov	r1, r3
 800d002:	68f8      	ldr	r0, [r7, #12]
 800d004:	f7ff fe82 	bl	800cd0c <MS5611_tempConvert>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d101      	bne.n	800d012 <MS5611_getPres+0x46>
 800d00e:	2301      	movs	r3, #1
 800d010:	e00b      	b.n	800d02a <MS5611_getPres+0x5e>
	if (MS5611_compensateTemp(pres, pres_raw, temp_raw, prom) == 1) { return 1; }
 800d012:	6979      	ldr	r1, [r7, #20]
 800d014:	693a      	ldr	r2, [r7, #16]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	68b8      	ldr	r0, [r7, #8]
 800d01a:	f7ff febd 	bl	800cd98 <MS5611_compensateTemp>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b01      	cmp	r3, #1
 800d022:	d101      	bne.n	800d028 <MS5611_getPres+0x5c>
 800d024:	2301      	movs	r3, #1
 800d026:	e000      	b.n	800d02a <MS5611_getPres+0x5e>
	return 0;
 800d028:	2300      	movs	r3, #0
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3718      	adds	r7, #24
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
	...

0800d034 <__NVIC_SetPriority>:
{
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	4603      	mov	r3, r0
 800d03c:	6039      	str	r1, [r7, #0]
 800d03e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d044:	2b00      	cmp	r3, #0
 800d046:	db0a      	blt.n	800d05e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	b2da      	uxtb	r2, r3
 800d04c:	490c      	ldr	r1, [pc, #48]	@ (800d080 <__NVIC_SetPriority+0x4c>)
 800d04e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d052:	0112      	lsls	r2, r2, #4
 800d054:	b2d2      	uxtb	r2, r2
 800d056:	440b      	add	r3, r1
 800d058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d05c:	e00a      	b.n	800d074 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	b2da      	uxtb	r2, r3
 800d062:	4908      	ldr	r1, [pc, #32]	@ (800d084 <__NVIC_SetPriority+0x50>)
 800d064:	88fb      	ldrh	r3, [r7, #6]
 800d066:	f003 030f 	and.w	r3, r3, #15
 800d06a:	3b04      	subs	r3, #4
 800d06c:	0112      	lsls	r2, r2, #4
 800d06e:	b2d2      	uxtb	r2, r2
 800d070:	440b      	add	r3, r1
 800d072:	761a      	strb	r2, [r3, #24]
}
 800d074:	bf00      	nop
 800d076:	370c      	adds	r7, #12
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr
 800d080:	e000e100 	.word	0xe000e100
 800d084:	e000ed00 	.word	0xe000ed00

0800d088 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d088:	b580      	push	{r7, lr}
 800d08a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d08c:	4b05      	ldr	r3, [pc, #20]	@ (800d0a4 <SysTick_Handler+0x1c>)
 800d08e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d090:	f002 fcc6 	bl	800fa20 <xTaskGetSchedulerState>
 800d094:	4603      	mov	r3, r0
 800d096:	2b01      	cmp	r3, #1
 800d098:	d001      	beq.n	800d09e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d09a:	f003 fbbd 	bl	8010818 <xPortSysTickHandler>
  }
}
 800d09e:	bf00      	nop
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	e000e010 	.word	0xe000e010

0800d0a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d0ac:	2100      	movs	r1, #0
 800d0ae:	f06f 0004 	mvn.w	r0, #4
 800d0b2:	f7ff ffbf 	bl	800d034 <__NVIC_SetPriority>
#endif
}
 800d0b6:	bf00      	nop
 800d0b8:	bd80      	pop	{r7, pc}
	...

0800d0bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d0bc:	b480      	push	{r7}
 800d0be:	b083      	sub	sp, #12
 800d0c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0c2:	f3ef 8305 	mrs	r3, IPSR
 800d0c6:	603b      	str	r3, [r7, #0]
  return(result);
 800d0c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d003      	beq.n	800d0d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d0ce:	f06f 0305 	mvn.w	r3, #5
 800d0d2:	607b      	str	r3, [r7, #4]
 800d0d4:	e00c      	b.n	800d0f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d0d6:	4b0a      	ldr	r3, [pc, #40]	@ (800d100 <osKernelInitialize+0x44>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d105      	bne.n	800d0ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d0de:	4b08      	ldr	r3, [pc, #32]	@ (800d100 <osKernelInitialize+0x44>)
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	607b      	str	r3, [r7, #4]
 800d0e8:	e002      	b.n	800d0f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d0ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d0ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d0f0:	687b      	ldr	r3, [r7, #4]
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	370c      	adds	r7, #12
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop
 800d100:	24000694 	.word	0x24000694

0800d104 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d10a:	f3ef 8305 	mrs	r3, IPSR
 800d10e:	603b      	str	r3, [r7, #0]
  return(result);
 800d110:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d112:	2b00      	cmp	r3, #0
 800d114:	d003      	beq.n	800d11e <osKernelStart+0x1a>
    stat = osErrorISR;
 800d116:	f06f 0305 	mvn.w	r3, #5
 800d11a:	607b      	str	r3, [r7, #4]
 800d11c:	e010      	b.n	800d140 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d11e:	4b0b      	ldr	r3, [pc, #44]	@ (800d14c <osKernelStart+0x48>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	2b01      	cmp	r3, #1
 800d124:	d109      	bne.n	800d13a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d126:	f7ff ffbf 	bl	800d0a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d12a:	4b08      	ldr	r3, [pc, #32]	@ (800d14c <osKernelStart+0x48>)
 800d12c:	2202      	movs	r2, #2
 800d12e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d130:	f001 fff0 	bl	800f114 <vTaskStartScheduler>
      stat = osOK;
 800d134:	2300      	movs	r3, #0
 800d136:	607b      	str	r3, [r7, #4]
 800d138:	e002      	b.n	800d140 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d13a:	f04f 33ff 	mov.w	r3, #4294967295
 800d13e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d140:	687b      	ldr	r3, [r7, #4]
}
 800d142:	4618      	mov	r0, r3
 800d144:	3708      	adds	r7, #8
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	24000694 	.word	0x24000694

0800d150 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d156:	f3ef 8305 	mrs	r3, IPSR
 800d15a:	603b      	str	r3, [r7, #0]
  return(result);
 800d15c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d003      	beq.n	800d16a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800d162:	f002 f903 	bl	800f36c <xTaskGetTickCountFromISR>
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	e002      	b.n	800d170 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800d16a:	f002 f8ef 	bl	800f34c <xTaskGetTickCount>
 800d16e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800d170:	687b      	ldr	r3, [r7, #4]
}
 800d172:	4618      	mov	r0, r3
 800d174:	3708      	adds	r7, #8
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}

0800d17a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d17a:	b580      	push	{r7, lr}
 800d17c:	b08e      	sub	sp, #56	@ 0x38
 800d17e:	af04      	add	r7, sp, #16
 800d180:	60f8      	str	r0, [r7, #12]
 800d182:	60b9      	str	r1, [r7, #8]
 800d184:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d186:	2300      	movs	r3, #0
 800d188:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d18a:	f3ef 8305 	mrs	r3, IPSR
 800d18e:	617b      	str	r3, [r7, #20]
  return(result);
 800d190:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d192:	2b00      	cmp	r3, #0
 800d194:	d17e      	bne.n	800d294 <osThreadNew+0x11a>
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d07b      	beq.n	800d294 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d19c:	2380      	movs	r3, #128	@ 0x80
 800d19e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d1a0:	2318      	movs	r3, #24
 800d1a2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d1a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d1ac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d045      	beq.n	800d240 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d002      	beq.n	800d1c2 <osThreadNew+0x48>
        name = attr->name;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	699b      	ldr	r3, [r3, #24]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d002      	beq.n	800d1d0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	699b      	ldr	r3, [r3, #24]
 800d1ce:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d008      	beq.n	800d1e8 <osThreadNew+0x6e>
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	2b38      	cmp	r3, #56	@ 0x38
 800d1da:	d805      	bhi.n	800d1e8 <osThreadNew+0x6e>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	f003 0301 	and.w	r3, r3, #1
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d001      	beq.n	800d1ec <osThreadNew+0x72>
        return (NULL);
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	e054      	b.n	800d296 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	695b      	ldr	r3, [r3, #20]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d003      	beq.n	800d1fc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	695b      	ldr	r3, [r3, #20]
 800d1f8:	089b      	lsrs	r3, r3, #2
 800d1fa:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	689b      	ldr	r3, [r3, #8]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00e      	beq.n	800d222 <osThreadNew+0xa8>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	2ba7      	cmp	r3, #167	@ 0xa7
 800d20a:	d90a      	bls.n	800d222 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d210:	2b00      	cmp	r3, #0
 800d212:	d006      	beq.n	800d222 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	695b      	ldr	r3, [r3, #20]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d002      	beq.n	800d222 <osThreadNew+0xa8>
        mem = 1;
 800d21c:	2301      	movs	r3, #1
 800d21e:	61bb      	str	r3, [r7, #24]
 800d220:	e010      	b.n	800d244 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	689b      	ldr	r3, [r3, #8]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d10c      	bne.n	800d244 <osThreadNew+0xca>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	68db      	ldr	r3, [r3, #12]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d108      	bne.n	800d244 <osThreadNew+0xca>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	691b      	ldr	r3, [r3, #16]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d104      	bne.n	800d244 <osThreadNew+0xca>
          mem = 0;
 800d23a:	2300      	movs	r3, #0
 800d23c:	61bb      	str	r3, [r7, #24]
 800d23e:	e001      	b.n	800d244 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d240:	2300      	movs	r3, #0
 800d242:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d244:	69bb      	ldr	r3, [r7, #24]
 800d246:	2b01      	cmp	r3, #1
 800d248:	d110      	bne.n	800d26c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d252:	9202      	str	r2, [sp, #8]
 800d254:	9301      	str	r3, [sp, #4]
 800d256:	69fb      	ldr	r3, [r7, #28]
 800d258:	9300      	str	r3, [sp, #0]
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	6a3a      	ldr	r2, [r7, #32]
 800d25e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	f001 fd63 	bl	800ed2c <xTaskCreateStatic>
 800d266:	4603      	mov	r3, r0
 800d268:	613b      	str	r3, [r7, #16]
 800d26a:	e013      	b.n	800d294 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d26c:	69bb      	ldr	r3, [r7, #24]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d110      	bne.n	800d294 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d272:	6a3b      	ldr	r3, [r7, #32]
 800d274:	b29a      	uxth	r2, r3
 800d276:	f107 0310 	add.w	r3, r7, #16
 800d27a:	9301      	str	r3, [sp, #4]
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	9300      	str	r3, [sp, #0]
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d284:	68f8      	ldr	r0, [r7, #12]
 800d286:	f001 fdb1 	bl	800edec <xTaskCreate>
 800d28a:	4603      	mov	r3, r0
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d001      	beq.n	800d294 <osThreadNew+0x11a>
            hTask = NULL;
 800d290:	2300      	movs	r3, #0
 800d292:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d294:	693b      	ldr	r3, [r7, #16]
}
 800d296:	4618      	mov	r0, r3
 800d298:	3728      	adds	r7, #40	@ 0x28
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b084      	sub	sp, #16
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2a6:	f3ef 8305 	mrs	r3, IPSR
 800d2aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800d2ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d003      	beq.n	800d2ba <osDelay+0x1c>
    stat = osErrorISR;
 800d2b2:	f06f 0305 	mvn.w	r3, #5
 800d2b6:	60fb      	str	r3, [r7, #12]
 800d2b8:	e007      	b.n	800d2ca <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d002      	beq.n	800d2ca <osDelay+0x2c>
      vTaskDelay(ticks);
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f001 feef 	bl	800f0a8 <vTaskDelay>
    }
  }

  return (stat);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3710      	adds	r7, #16
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b088      	sub	sp, #32
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2e0:	f3ef 8305 	mrs	r3, IPSR
 800d2e4:	60bb      	str	r3, [r7, #8]
  return(result);
 800d2e6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d174      	bne.n	800d3d6 <osMutexNew+0x102>
    if (attr != NULL) {
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d003      	beq.n	800d2fa <osMutexNew+0x26>
      type = attr->attr_bits;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	61bb      	str	r3, [r7, #24]
 800d2f8:	e001      	b.n	800d2fe <osMutexNew+0x2a>
    } else {
      type = 0U;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d2fe:	69bb      	ldr	r3, [r7, #24]
 800d300:	f003 0301 	and.w	r3, r3, #1
 800d304:	2b00      	cmp	r3, #0
 800d306:	d002      	beq.n	800d30e <osMutexNew+0x3a>
      rmtx = 1U;
 800d308:	2301      	movs	r3, #1
 800d30a:	617b      	str	r3, [r7, #20]
 800d30c:	e001      	b.n	800d312 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800d30e:	2300      	movs	r3, #0
 800d310:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	f003 0308 	and.w	r3, r3, #8
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d15c      	bne.n	800d3d6 <osMutexNew+0x102>
      mem = -1;
 800d31c:	f04f 33ff 	mov.w	r3, #4294967295
 800d320:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d015      	beq.n	800d354 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	689b      	ldr	r3, [r3, #8]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d006      	beq.n	800d33e <osMutexNew+0x6a>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	2b4f      	cmp	r3, #79	@ 0x4f
 800d336:	d902      	bls.n	800d33e <osMutexNew+0x6a>
          mem = 1;
 800d338:	2301      	movs	r3, #1
 800d33a:	613b      	str	r3, [r7, #16]
 800d33c:	e00c      	b.n	800d358 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d108      	bne.n	800d358 <osMutexNew+0x84>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d104      	bne.n	800d358 <osMutexNew+0x84>
            mem = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	613b      	str	r3, [r7, #16]
 800d352:	e001      	b.n	800d358 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800d354:	2300      	movs	r3, #0
 800d356:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d112      	bne.n	800d384 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d007      	beq.n	800d374 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	689b      	ldr	r3, [r3, #8]
 800d368:	4619      	mov	r1, r3
 800d36a:	2004      	movs	r0, #4
 800d36c:	f000 fd71 	bl	800de52 <xQueueCreateMutexStatic>
 800d370:	61f8      	str	r0, [r7, #28]
 800d372:	e016      	b.n	800d3a2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	4619      	mov	r1, r3
 800d37a:	2001      	movs	r0, #1
 800d37c:	f000 fd69 	bl	800de52 <xQueueCreateMutexStatic>
 800d380:	61f8      	str	r0, [r7, #28]
 800d382:	e00e      	b.n	800d3a2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d10b      	bne.n	800d3a2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d004      	beq.n	800d39a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800d390:	2004      	movs	r0, #4
 800d392:	f000 fd46 	bl	800de22 <xQueueCreateMutex>
 800d396:	61f8      	str	r0, [r7, #28]
 800d398:	e003      	b.n	800d3a2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800d39a:	2001      	movs	r0, #1
 800d39c:	f000 fd41 	bl	800de22 <xQueueCreateMutex>
 800d3a0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d00c      	beq.n	800d3c2 <osMutexNew+0xee>
        if (attr != NULL) {
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d003      	beq.n	800d3b6 <osMutexNew+0xe2>
          name = attr->name;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	60fb      	str	r3, [r7, #12]
 800d3b4:	e001      	b.n	800d3ba <osMutexNew+0xe6>
        } else {
          name = NULL;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800d3ba:	68f9      	ldr	r1, [r7, #12]
 800d3bc:	69f8      	ldr	r0, [r7, #28]
 800d3be:	f001 fc2d 	bl	800ec1c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d006      	beq.n	800d3d6 <osMutexNew+0x102>
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d003      	beq.n	800d3d6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	f043 0301 	orr.w	r3, r3, #1
 800d3d4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d3d6:	69fb      	ldr	r3, [r7, #28]
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3720      	adds	r7, #32
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f023 0301 	bic.w	r3, r3, #1
 800d3f0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f003 0301 	and.w	r3, r3, #1
 800d3f8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3fe:	f3ef 8305 	mrs	r3, IPSR
 800d402:	60bb      	str	r3, [r7, #8]
  return(result);
 800d404:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d406:	2b00      	cmp	r3, #0
 800d408:	d003      	beq.n	800d412 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800d40a:	f06f 0305 	mvn.w	r3, #5
 800d40e:	617b      	str	r3, [r7, #20]
 800d410:	e02c      	b.n	800d46c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d103      	bne.n	800d420 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800d418:	f06f 0303 	mvn.w	r3, #3
 800d41c:	617b      	str	r3, [r7, #20]
 800d41e:	e025      	b.n	800d46c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d011      	beq.n	800d44a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d426:	6839      	ldr	r1, [r7, #0]
 800d428:	6938      	ldr	r0, [r7, #16]
 800d42a:	f000 fd62 	bl	800def2 <xQueueTakeMutexRecursive>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b01      	cmp	r3, #1
 800d432:	d01b      	beq.n	800d46c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d003      	beq.n	800d442 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800d43a:	f06f 0301 	mvn.w	r3, #1
 800d43e:	617b      	str	r3, [r7, #20]
 800d440:	e014      	b.n	800d46c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d442:	f06f 0302 	mvn.w	r3, #2
 800d446:	617b      	str	r3, [r7, #20]
 800d448:	e010      	b.n	800d46c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d44a:	6839      	ldr	r1, [r7, #0]
 800d44c:	6938      	ldr	r0, [r7, #16]
 800d44e:	f001 f907 	bl	800e660 <xQueueSemaphoreTake>
 800d452:	4603      	mov	r3, r0
 800d454:	2b01      	cmp	r3, #1
 800d456:	d009      	beq.n	800d46c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d003      	beq.n	800d466 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800d45e:	f06f 0301 	mvn.w	r3, #1
 800d462:	617b      	str	r3, [r7, #20]
 800d464:	e002      	b.n	800d46c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d466:	f06f 0302 	mvn.w	r3, #2
 800d46a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800d46c:	697b      	ldr	r3, [r7, #20]
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3718      	adds	r7, #24
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}

0800d476 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d476:	b580      	push	{r7, lr}
 800d478:	b086      	sub	sp, #24
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f023 0301 	bic.w	r3, r3, #1
 800d484:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f003 0301 	and.w	r3, r3, #1
 800d48c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d48e:	2300      	movs	r3, #0
 800d490:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d492:	f3ef 8305 	mrs	r3, IPSR
 800d496:	60bb      	str	r3, [r7, #8]
  return(result);
 800d498:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d003      	beq.n	800d4a6 <osMutexRelease+0x30>
    stat = osErrorISR;
 800d49e:	f06f 0305 	mvn.w	r3, #5
 800d4a2:	617b      	str	r3, [r7, #20]
 800d4a4:	e01f      	b.n	800d4e6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d103      	bne.n	800d4b4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800d4ac:	f06f 0303 	mvn.w	r3, #3
 800d4b0:	617b      	str	r3, [r7, #20]
 800d4b2:	e018      	b.n	800d4e6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d009      	beq.n	800d4ce <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d4ba:	6938      	ldr	r0, [r7, #16]
 800d4bc:	f000 fce4 	bl	800de88 <xQueueGiveMutexRecursive>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d00f      	beq.n	800d4e6 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d4c6:	f06f 0302 	mvn.w	r3, #2
 800d4ca:	617b      	str	r3, [r7, #20]
 800d4cc:	e00b      	b.n	800d4e6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	2100      	movs	r1, #0
 800d4d4:	6938      	ldr	r0, [r7, #16]
 800d4d6:	f000 fdb1 	bl	800e03c <xQueueGenericSend>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d002      	beq.n	800d4e6 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d4e0:	f06f 0302 	mvn.w	r3, #2
 800d4e4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d4e6:	697b      	ldr	r3, [r7, #20]
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3718      	adds	r7, #24
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b08a      	sub	sp, #40	@ 0x28
 800d4f4:	af02      	add	r7, sp, #8
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d500:	f3ef 8305 	mrs	r3, IPSR
 800d504:	613b      	str	r3, [r7, #16]
  return(result);
 800d506:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d175      	bne.n	800d5f8 <osSemaphoreNew+0x108>
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d072      	beq.n	800d5f8 <osSemaphoreNew+0x108>
 800d512:	68ba      	ldr	r2, [r7, #8]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	429a      	cmp	r2, r3
 800d518:	d86e      	bhi.n	800d5f8 <osSemaphoreNew+0x108>
    mem = -1;
 800d51a:	f04f 33ff 	mov.w	r3, #4294967295
 800d51e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d015      	beq.n	800d552 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	689b      	ldr	r3, [r3, #8]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d006      	beq.n	800d53c <osSemaphoreNew+0x4c>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	68db      	ldr	r3, [r3, #12]
 800d532:	2b4f      	cmp	r3, #79	@ 0x4f
 800d534:	d902      	bls.n	800d53c <osSemaphoreNew+0x4c>
        mem = 1;
 800d536:	2301      	movs	r3, #1
 800d538:	61bb      	str	r3, [r7, #24]
 800d53a:	e00c      	b.n	800d556 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	689b      	ldr	r3, [r3, #8]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d108      	bne.n	800d556 <osSemaphoreNew+0x66>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	68db      	ldr	r3, [r3, #12]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d104      	bne.n	800d556 <osSemaphoreNew+0x66>
          mem = 0;
 800d54c:	2300      	movs	r3, #0
 800d54e:	61bb      	str	r3, [r7, #24]
 800d550:	e001      	b.n	800d556 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800d552:	2300      	movs	r3, #0
 800d554:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d55c:	d04c      	beq.n	800d5f8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2b01      	cmp	r3, #1
 800d562:	d128      	bne.n	800d5b6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800d564:	69bb      	ldr	r3, [r7, #24]
 800d566:	2b01      	cmp	r3, #1
 800d568:	d10a      	bne.n	800d580 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	689b      	ldr	r3, [r3, #8]
 800d56e:	2203      	movs	r2, #3
 800d570:	9200      	str	r2, [sp, #0]
 800d572:	2200      	movs	r2, #0
 800d574:	2100      	movs	r1, #0
 800d576:	2001      	movs	r0, #1
 800d578:	f000 fb5e 	bl	800dc38 <xQueueGenericCreateStatic>
 800d57c:	61f8      	str	r0, [r7, #28]
 800d57e:	e005      	b.n	800d58c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800d580:	2203      	movs	r2, #3
 800d582:	2100      	movs	r1, #0
 800d584:	2001      	movs	r0, #1
 800d586:	f000 fbd4 	bl	800dd32 <xQueueGenericCreate>
 800d58a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d022      	beq.n	800d5d8 <osSemaphoreNew+0xe8>
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d01f      	beq.n	800d5d8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d598:	2300      	movs	r3, #0
 800d59a:	2200      	movs	r2, #0
 800d59c:	2100      	movs	r1, #0
 800d59e:	69f8      	ldr	r0, [r7, #28]
 800d5a0:	f000 fd4c 	bl	800e03c <xQueueGenericSend>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d016      	beq.n	800d5d8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800d5aa:	69f8      	ldr	r0, [r7, #28]
 800d5ac:	f001 f9ea 	bl	800e984 <vQueueDelete>
            hSemaphore = NULL;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	61fb      	str	r3, [r7, #28]
 800d5b4:	e010      	b.n	800d5d8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d108      	bne.n	800d5ce <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	689b      	ldr	r3, [r3, #8]
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	68b9      	ldr	r1, [r7, #8]
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f000 fccb 	bl	800df60 <xQueueCreateCountingSemaphoreStatic>
 800d5ca:	61f8      	str	r0, [r7, #28]
 800d5cc:	e004      	b.n	800d5d8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d5ce:	68b9      	ldr	r1, [r7, #8]
 800d5d0:	68f8      	ldr	r0, [r7, #12]
 800d5d2:	f000 fcfe 	bl	800dfd2 <xQueueCreateCountingSemaphore>
 800d5d6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d5d8:	69fb      	ldr	r3, [r7, #28]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d00c      	beq.n	800d5f8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d003      	beq.n	800d5ec <osSemaphoreNew+0xfc>
          name = attr->name;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	617b      	str	r3, [r7, #20]
 800d5ea:	e001      	b.n	800d5f0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d5f0:	6979      	ldr	r1, [r7, #20]
 800d5f2:	69f8      	ldr	r0, [r7, #28]
 800d5f4:	f001 fb12 	bl	800ec1c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d5f8:	69fb      	ldr	r3, [r7, #28]
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3720      	adds	r7, #32
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
	...

0800d604 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d604:	b580      	push	{r7, lr}
 800d606:	b086      	sub	sp, #24
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d612:	2300      	movs	r3, #0
 800d614:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d103      	bne.n	800d624 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d61c:	f06f 0303 	mvn.w	r3, #3
 800d620:	617b      	str	r3, [r7, #20]
 800d622:	e039      	b.n	800d698 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d624:	f3ef 8305 	mrs	r3, IPSR
 800d628:	60fb      	str	r3, [r7, #12]
  return(result);
 800d62a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d022      	beq.n	800d676 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d003      	beq.n	800d63e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800d636:	f06f 0303 	mvn.w	r3, #3
 800d63a:	617b      	str	r3, [r7, #20]
 800d63c:	e02c      	b.n	800d698 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800d63e:	2300      	movs	r3, #0
 800d640:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d642:	f107 0308 	add.w	r3, r7, #8
 800d646:	461a      	mov	r2, r3
 800d648:	2100      	movs	r1, #0
 800d64a:	6938      	ldr	r0, [r7, #16]
 800d64c:	f001 f918 	bl	800e880 <xQueueReceiveFromISR>
 800d650:	4603      	mov	r3, r0
 800d652:	2b01      	cmp	r3, #1
 800d654:	d003      	beq.n	800d65e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800d656:	f06f 0302 	mvn.w	r3, #2
 800d65a:	617b      	str	r3, [r7, #20]
 800d65c:	e01c      	b.n	800d698 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d019      	beq.n	800d698 <osSemaphoreAcquire+0x94>
 800d664:	4b0f      	ldr	r3, [pc, #60]	@ (800d6a4 <osSemaphoreAcquire+0xa0>)
 800d666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d66a:	601a      	str	r2, [r3, #0]
 800d66c:	f3bf 8f4f 	dsb	sy
 800d670:	f3bf 8f6f 	isb	sy
 800d674:	e010      	b.n	800d698 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d676:	6839      	ldr	r1, [r7, #0]
 800d678:	6938      	ldr	r0, [r7, #16]
 800d67a:	f000 fff1 	bl	800e660 <xQueueSemaphoreTake>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b01      	cmp	r3, #1
 800d682:	d009      	beq.n	800d698 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d003      	beq.n	800d692 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800d68a:	f06f 0301 	mvn.w	r3, #1
 800d68e:	617b      	str	r3, [r7, #20]
 800d690:	e002      	b.n	800d698 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800d692:	f06f 0302 	mvn.w	r3, #2
 800d696:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d698:	697b      	ldr	r3, [r7, #20]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3718      	adds	r7, #24
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	e000ed04 	.word	0xe000ed04

0800d6a8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b086      	sub	sp, #24
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d103      	bne.n	800d6c6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d6be:	f06f 0303 	mvn.w	r3, #3
 800d6c2:	617b      	str	r3, [r7, #20]
 800d6c4:	e02c      	b.n	800d720 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6c6:	f3ef 8305 	mrs	r3, IPSR
 800d6ca:	60fb      	str	r3, [r7, #12]
  return(result);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d01a      	beq.n	800d708 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d6d6:	f107 0308 	add.w	r3, r7, #8
 800d6da:	4619      	mov	r1, r3
 800d6dc:	6938      	ldr	r0, [r7, #16]
 800d6de:	f000 fe4d 	bl	800e37c <xQueueGiveFromISR>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d003      	beq.n	800d6f0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800d6e8:	f06f 0302 	mvn.w	r3, #2
 800d6ec:	617b      	str	r3, [r7, #20]
 800d6ee:	e017      	b.n	800d720 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d014      	beq.n	800d720 <osSemaphoreRelease+0x78>
 800d6f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d72c <osSemaphoreRelease+0x84>)
 800d6f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6fc:	601a      	str	r2, [r3, #0]
 800d6fe:	f3bf 8f4f 	dsb	sy
 800d702:	f3bf 8f6f 	isb	sy
 800d706:	e00b      	b.n	800d720 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d708:	2300      	movs	r3, #0
 800d70a:	2200      	movs	r2, #0
 800d70c:	2100      	movs	r1, #0
 800d70e:	6938      	ldr	r0, [r7, #16]
 800d710:	f000 fc94 	bl	800e03c <xQueueGenericSend>
 800d714:	4603      	mov	r3, r0
 800d716:	2b01      	cmp	r3, #1
 800d718:	d002      	beq.n	800d720 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800d71a:	f06f 0302 	mvn.w	r3, #2
 800d71e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d720:	697b      	ldr	r3, [r7, #20]
}
 800d722:	4618      	mov	r0, r3
 800d724:	3718      	adds	r7, #24
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	e000ed04 	.word	0xe000ed04

0800d730 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d730:	b580      	push	{r7, lr}
 800d732:	b08a      	sub	sp, #40	@ 0x28
 800d734:	af02      	add	r7, sp, #8
 800d736:	60f8      	str	r0, [r7, #12]
 800d738:	60b9      	str	r1, [r7, #8]
 800d73a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d73c:	2300      	movs	r3, #0
 800d73e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d740:	f3ef 8305 	mrs	r3, IPSR
 800d744:	613b      	str	r3, [r7, #16]
  return(result);
 800d746:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d15f      	bne.n	800d80c <osMessageQueueNew+0xdc>
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d05c      	beq.n	800d80c <osMessageQueueNew+0xdc>
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d059      	beq.n	800d80c <osMessageQueueNew+0xdc>
    mem = -1;
 800d758:	f04f 33ff 	mov.w	r3, #4294967295
 800d75c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d029      	beq.n	800d7b8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	689b      	ldr	r3, [r3, #8]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d012      	beq.n	800d792 <osMessageQueueNew+0x62>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	2b4f      	cmp	r3, #79	@ 0x4f
 800d772:	d90e      	bls.n	800d792 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00a      	beq.n	800d792 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	695a      	ldr	r2, [r3, #20]
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	68b9      	ldr	r1, [r7, #8]
 800d784:	fb01 f303 	mul.w	r3, r1, r3
 800d788:	429a      	cmp	r2, r3
 800d78a:	d302      	bcc.n	800d792 <osMessageQueueNew+0x62>
        mem = 1;
 800d78c:	2301      	movs	r3, #1
 800d78e:	61bb      	str	r3, [r7, #24]
 800d790:	e014      	b.n	800d7bc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d110      	bne.n	800d7bc <osMessageQueueNew+0x8c>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d10c      	bne.n	800d7bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d108      	bne.n	800d7bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	695b      	ldr	r3, [r3, #20]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d104      	bne.n	800d7bc <osMessageQueueNew+0x8c>
          mem = 0;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	61bb      	str	r3, [r7, #24]
 800d7b6:	e001      	b.n	800d7bc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	2b01      	cmp	r3, #1
 800d7c0:	d10b      	bne.n	800d7da <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	691a      	ldr	r2, [r3, #16]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	689b      	ldr	r3, [r3, #8]
 800d7ca:	2100      	movs	r1, #0
 800d7cc:	9100      	str	r1, [sp, #0]
 800d7ce:	68b9      	ldr	r1, [r7, #8]
 800d7d0:	68f8      	ldr	r0, [r7, #12]
 800d7d2:	f000 fa31 	bl	800dc38 <xQueueGenericCreateStatic>
 800d7d6:	61f8      	str	r0, [r7, #28]
 800d7d8:	e008      	b.n	800d7ec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d7da:	69bb      	ldr	r3, [r7, #24]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d105      	bne.n	800d7ec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	68b9      	ldr	r1, [r7, #8]
 800d7e4:	68f8      	ldr	r0, [r7, #12]
 800d7e6:	f000 faa4 	bl	800dd32 <xQueueGenericCreate>
 800d7ea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00c      	beq.n	800d80c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d003      	beq.n	800d800 <osMessageQueueNew+0xd0>
        name = attr->name;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	617b      	str	r3, [r7, #20]
 800d7fe:	e001      	b.n	800d804 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d800:	2300      	movs	r3, #0
 800d802:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d804:	6979      	ldr	r1, [r7, #20]
 800d806:	69f8      	ldr	r0, [r7, #28]
 800d808:	f001 fa08 	bl	800ec1c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d80c:	69fb      	ldr	r3, [r7, #28]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3720      	adds	r7, #32
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
	...

0800d818 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d818:	b580      	push	{r7, lr}
 800d81a:	b088      	sub	sp, #32
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	603b      	str	r3, [r7, #0]
 800d824:	4613      	mov	r3, r2
 800d826:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d82c:	2300      	movs	r3, #0
 800d82e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d830:	f3ef 8305 	mrs	r3, IPSR
 800d834:	617b      	str	r3, [r7, #20]
  return(result);
 800d836:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d028      	beq.n	800d88e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d005      	beq.n	800d84e <osMessageQueuePut+0x36>
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d002      	beq.n	800d84e <osMessageQueuePut+0x36>
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d003      	beq.n	800d856 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800d84e:	f06f 0303 	mvn.w	r3, #3
 800d852:	61fb      	str	r3, [r7, #28]
 800d854:	e038      	b.n	800d8c8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d856:	2300      	movs	r3, #0
 800d858:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d85a:	f107 0210 	add.w	r2, r7, #16
 800d85e:	2300      	movs	r3, #0
 800d860:	68b9      	ldr	r1, [r7, #8]
 800d862:	69b8      	ldr	r0, [r7, #24]
 800d864:	f000 fcec 	bl	800e240 <xQueueGenericSendFromISR>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b01      	cmp	r3, #1
 800d86c:	d003      	beq.n	800d876 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d86e:	f06f 0302 	mvn.w	r3, #2
 800d872:	61fb      	str	r3, [r7, #28]
 800d874:	e028      	b.n	800d8c8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d025      	beq.n	800d8c8 <osMessageQueuePut+0xb0>
 800d87c:	4b15      	ldr	r3, [pc, #84]	@ (800d8d4 <osMessageQueuePut+0xbc>)
 800d87e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d882:	601a      	str	r2, [r3, #0]
 800d884:	f3bf 8f4f 	dsb	sy
 800d888:	f3bf 8f6f 	isb	sy
 800d88c:	e01c      	b.n	800d8c8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d002      	beq.n	800d89a <osMessageQueuePut+0x82>
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d103      	bne.n	800d8a2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d89a:	f06f 0303 	mvn.w	r3, #3
 800d89e:	61fb      	str	r3, [r7, #28]
 800d8a0:	e012      	b.n	800d8c8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	683a      	ldr	r2, [r7, #0]
 800d8a6:	68b9      	ldr	r1, [r7, #8]
 800d8a8:	69b8      	ldr	r0, [r7, #24]
 800d8aa:	f000 fbc7 	bl	800e03c <xQueueGenericSend>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d009      	beq.n	800d8c8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d003      	beq.n	800d8c2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d8ba:	f06f 0301 	mvn.w	r3, #1
 800d8be:	61fb      	str	r3, [r7, #28]
 800d8c0:	e002      	b.n	800d8c8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d8c2:	f06f 0302 	mvn.w	r3, #2
 800d8c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d8c8:	69fb      	ldr	r3, [r7, #28]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3720      	adds	r7, #32
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	e000ed04 	.word	0xe000ed04

0800d8d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b088      	sub	sp, #32
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	607a      	str	r2, [r7, #4]
 800d8e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8ee:	f3ef 8305 	mrs	r3, IPSR
 800d8f2:	617b      	str	r3, [r7, #20]
  return(result);
 800d8f4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d028      	beq.n	800d94c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d8fa:	69bb      	ldr	r3, [r7, #24]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d005      	beq.n	800d90c <osMessageQueueGet+0x34>
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d002      	beq.n	800d90c <osMessageQueueGet+0x34>
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d003      	beq.n	800d914 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d90c:	f06f 0303 	mvn.w	r3, #3
 800d910:	61fb      	str	r3, [r7, #28]
 800d912:	e037      	b.n	800d984 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d914:	2300      	movs	r3, #0
 800d916:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d918:	f107 0310 	add.w	r3, r7, #16
 800d91c:	461a      	mov	r2, r3
 800d91e:	68b9      	ldr	r1, [r7, #8]
 800d920:	69b8      	ldr	r0, [r7, #24]
 800d922:	f000 ffad 	bl	800e880 <xQueueReceiveFromISR>
 800d926:	4603      	mov	r3, r0
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d003      	beq.n	800d934 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d92c:	f06f 0302 	mvn.w	r3, #2
 800d930:	61fb      	str	r3, [r7, #28]
 800d932:	e027      	b.n	800d984 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d024      	beq.n	800d984 <osMessageQueueGet+0xac>
 800d93a:	4b15      	ldr	r3, [pc, #84]	@ (800d990 <osMessageQueueGet+0xb8>)
 800d93c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d940:	601a      	str	r2, [r3, #0]
 800d942:	f3bf 8f4f 	dsb	sy
 800d946:	f3bf 8f6f 	isb	sy
 800d94a:	e01b      	b.n	800d984 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d002      	beq.n	800d958 <osMessageQueueGet+0x80>
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d103      	bne.n	800d960 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d958:	f06f 0303 	mvn.w	r3, #3
 800d95c:	61fb      	str	r3, [r7, #28]
 800d95e:	e011      	b.n	800d984 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d960:	683a      	ldr	r2, [r7, #0]
 800d962:	68b9      	ldr	r1, [r7, #8]
 800d964:	69b8      	ldr	r0, [r7, #24]
 800d966:	f000 fd99 	bl	800e49c <xQueueReceive>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d009      	beq.n	800d984 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d003      	beq.n	800d97e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d976:	f06f 0301 	mvn.w	r3, #1
 800d97a:	61fb      	str	r3, [r7, #28]
 800d97c:	e002      	b.n	800d984 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d97e:	f06f 0302 	mvn.w	r3, #2
 800d982:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d984:	69fb      	ldr	r3, [r7, #28]
}
 800d986:	4618      	mov	r0, r3
 800d988:	3720      	adds	r7, #32
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	e000ed04 	.word	0xe000ed04

0800d994 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d994:	b480      	push	{r7}
 800d996:	b085      	sub	sp, #20
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	4a07      	ldr	r2, [pc, #28]	@ (800d9c0 <vApplicationGetIdleTaskMemory+0x2c>)
 800d9a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	4a06      	ldr	r2, [pc, #24]	@ (800d9c4 <vApplicationGetIdleTaskMemory+0x30>)
 800d9aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2280      	movs	r2, #128	@ 0x80
 800d9b0:	601a      	str	r2, [r3, #0]
}
 800d9b2:	bf00      	nop
 800d9b4:	3714      	adds	r7, #20
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop
 800d9c0:	24000698 	.word	0x24000698
 800d9c4:	24000740 	.word	0x24000740

0800d9c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d9c8:	b480      	push	{r7}
 800d9ca:	b085      	sub	sp, #20
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	60f8      	str	r0, [r7, #12]
 800d9d0:	60b9      	str	r1, [r7, #8]
 800d9d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	4a07      	ldr	r2, [pc, #28]	@ (800d9f4 <vApplicationGetTimerTaskMemory+0x2c>)
 800d9d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	4a06      	ldr	r2, [pc, #24]	@ (800d9f8 <vApplicationGetTimerTaskMemory+0x30>)
 800d9de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d9e6:	601a      	str	r2, [r3, #0]
}
 800d9e8:	bf00      	nop
 800d9ea:	3714      	adds	r7, #20
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr
 800d9f4:	24000940 	.word	0x24000940
 800d9f8:	240009e8 	.word	0x240009e8

0800d9fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b083      	sub	sp, #12
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f103 0208 	add.w	r2, r3, #8
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f04f 32ff 	mov.w	r2, #4294967295
 800da14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f103 0208 	add.w	r2, r3, #8
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f103 0208 	add.w	r2, r3, #8
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2200      	movs	r2, #0
 800da2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800da30:	bf00      	nop
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr

0800da3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2200      	movs	r2, #0
 800da48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800da4a:	bf00      	nop
 800da4c:	370c      	adds	r7, #12
 800da4e:	46bd      	mov	sp, r7
 800da50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da54:	4770      	bx	lr

0800da56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800da56:	b480      	push	{r7}
 800da58:	b085      	sub	sp, #20
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
 800da5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	68fa      	ldr	r2, [r7, #12]
 800da6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	689a      	ldr	r2, [r3, #8]
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	683a      	ldr	r2, [r7, #0]
 800da7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	683a      	ldr	r2, [r7, #0]
 800da80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	687a      	ldr	r2, [r7, #4]
 800da86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	1c5a      	adds	r2, r3, #1
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	601a      	str	r2, [r3, #0]
}
 800da92:	bf00      	nop
 800da94:	3714      	adds	r7, #20
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr

0800da9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800da9e:	b480      	push	{r7}
 800daa0:	b085      	sub	sp, #20
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]
 800daa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab4:	d103      	bne.n	800dabe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	691b      	ldr	r3, [r3, #16]
 800daba:	60fb      	str	r3, [r7, #12]
 800dabc:	e00c      	b.n	800dad8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	3308      	adds	r3, #8
 800dac2:	60fb      	str	r3, [r7, #12]
 800dac4:	e002      	b.n	800dacc <vListInsert+0x2e>
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	60fb      	str	r3, [r7, #12]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	68ba      	ldr	r2, [r7, #8]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d2f6      	bcs.n	800dac6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	685a      	ldr	r2, [r3, #4]
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	683a      	ldr	r2, [r7, #0]
 800dae6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	68fa      	ldr	r2, [r7, #12]
 800daec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	683a      	ldr	r2, [r7, #0]
 800daf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	1c5a      	adds	r2, r3, #1
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	601a      	str	r2, [r3, #0]
}
 800db04:	bf00      	nop
 800db06:	3714      	adds	r7, #20
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr

0800db10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800db10:	b480      	push	{r7}
 800db12:	b085      	sub	sp, #20
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	691b      	ldr	r3, [r3, #16]
 800db1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	687a      	ldr	r2, [r7, #4]
 800db24:	6892      	ldr	r2, [r2, #8]
 800db26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	689b      	ldr	r3, [r3, #8]
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	6852      	ldr	r2, [r2, #4]
 800db30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	687a      	ldr	r2, [r7, #4]
 800db38:	429a      	cmp	r2, r3
 800db3a:	d103      	bne.n	800db44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	689a      	ldr	r2, [r3, #8]
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2200      	movs	r2, #0
 800db48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	1e5a      	subs	r2, r3, #1
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3714      	adds	r7, #20
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr

0800db64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d10b      	bne.n	800db90 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800db78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db7c:	f383 8811 	msr	BASEPRI, r3
 800db80:	f3bf 8f6f 	isb	sy
 800db84:	f3bf 8f4f 	dsb	sy
 800db88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800db8a:	bf00      	nop
 800db8c:	bf00      	nop
 800db8e:	e7fd      	b.n	800db8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800db90:	f002 fdb2 	bl	80106f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db9c:	68f9      	ldr	r1, [r7, #12]
 800db9e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dba0:	fb01 f303 	mul.w	r3, r1, r3
 800dba4:	441a      	add	r2, r3
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2200      	movs	r2, #0
 800dbae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbc0:	3b01      	subs	r3, #1
 800dbc2:	68f9      	ldr	r1, [r7, #12]
 800dbc4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dbc6:	fb01 f303 	mul.w	r3, r1, r3
 800dbca:	441a      	add	r2, r3
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	22ff      	movs	r2, #255	@ 0xff
 800dbd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	22ff      	movs	r2, #255	@ 0xff
 800dbdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d114      	bne.n	800dc10 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	691b      	ldr	r3, [r3, #16]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d01a      	beq.n	800dc24 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	3310      	adds	r3, #16
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f001 fd3e 	bl	800f674 <xTaskRemoveFromEventList>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d012      	beq.n	800dc24 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dbfe:	4b0d      	ldr	r3, [pc, #52]	@ (800dc34 <xQueueGenericReset+0xd0>)
 800dc00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc04:	601a      	str	r2, [r3, #0]
 800dc06:	f3bf 8f4f 	dsb	sy
 800dc0a:	f3bf 8f6f 	isb	sy
 800dc0e:	e009      	b.n	800dc24 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	3310      	adds	r3, #16
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7ff fef1 	bl	800d9fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	3324      	adds	r3, #36	@ 0x24
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7ff feec 	bl	800d9fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dc24:	f002 fd9a 	bl	801075c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dc28:	2301      	movs	r3, #1
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3710      	adds	r7, #16
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	e000ed04 	.word	0xe000ed04

0800dc38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b08e      	sub	sp, #56	@ 0x38
 800dc3c:	af02      	add	r7, sp, #8
 800dc3e:	60f8      	str	r0, [r7, #12]
 800dc40:	60b9      	str	r1, [r7, #8]
 800dc42:	607a      	str	r2, [r7, #4]
 800dc44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d10b      	bne.n	800dc64 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800dc4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc50:	f383 8811 	msr	BASEPRI, r3
 800dc54:	f3bf 8f6f 	isb	sy
 800dc58:	f3bf 8f4f 	dsb	sy
 800dc5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dc5e:	bf00      	nop
 800dc60:	bf00      	nop
 800dc62:	e7fd      	b.n	800dc60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d10b      	bne.n	800dc82 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800dc6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc6e:	f383 8811 	msr	BASEPRI, r3
 800dc72:	f3bf 8f6f 	isb	sy
 800dc76:	f3bf 8f4f 	dsb	sy
 800dc7a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dc7c:	bf00      	nop
 800dc7e:	bf00      	nop
 800dc80:	e7fd      	b.n	800dc7e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d002      	beq.n	800dc8e <xQueueGenericCreateStatic+0x56>
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d001      	beq.n	800dc92 <xQueueGenericCreateStatic+0x5a>
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e000      	b.n	800dc94 <xQueueGenericCreateStatic+0x5c>
 800dc92:	2300      	movs	r3, #0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d10b      	bne.n	800dcb0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800dc98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc9c:	f383 8811 	msr	BASEPRI, r3
 800dca0:	f3bf 8f6f 	isb	sy
 800dca4:	f3bf 8f4f 	dsb	sy
 800dca8:	623b      	str	r3, [r7, #32]
}
 800dcaa:	bf00      	nop
 800dcac:	bf00      	nop
 800dcae:	e7fd      	b.n	800dcac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d102      	bne.n	800dcbc <xQueueGenericCreateStatic+0x84>
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d101      	bne.n	800dcc0 <xQueueGenericCreateStatic+0x88>
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	e000      	b.n	800dcc2 <xQueueGenericCreateStatic+0x8a>
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d10b      	bne.n	800dcde <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800dcc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcca:	f383 8811 	msr	BASEPRI, r3
 800dcce:	f3bf 8f6f 	isb	sy
 800dcd2:	f3bf 8f4f 	dsb	sy
 800dcd6:	61fb      	str	r3, [r7, #28]
}
 800dcd8:	bf00      	nop
 800dcda:	bf00      	nop
 800dcdc:	e7fd      	b.n	800dcda <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dcde:	2350      	movs	r3, #80	@ 0x50
 800dce0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	2b50      	cmp	r3, #80	@ 0x50
 800dce6:	d00b      	beq.n	800dd00 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800dce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcec:	f383 8811 	msr	BASEPRI, r3
 800dcf0:	f3bf 8f6f 	isb	sy
 800dcf4:	f3bf 8f4f 	dsb	sy
 800dcf8:	61bb      	str	r3, [r7, #24]
}
 800dcfa:	bf00      	nop
 800dcfc:	bf00      	nop
 800dcfe:	e7fd      	b.n	800dcfc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dd00:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800dd06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d00d      	beq.n	800dd28 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd0e:	2201      	movs	r2, #1
 800dd10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dd14:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800dd18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd1a:	9300      	str	r3, [sp, #0]
 800dd1c:	4613      	mov	r3, r2
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	68b9      	ldr	r1, [r7, #8]
 800dd22:	68f8      	ldr	r0, [r7, #12]
 800dd24:	f000 f840 	bl	800dda8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dd28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3730      	adds	r7, #48	@ 0x30
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}

0800dd32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dd32:	b580      	push	{r7, lr}
 800dd34:	b08a      	sub	sp, #40	@ 0x28
 800dd36:	af02      	add	r7, sp, #8
 800dd38:	60f8      	str	r0, [r7, #12]
 800dd3a:	60b9      	str	r1, [r7, #8]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d10b      	bne.n	800dd5e <xQueueGenericCreate+0x2c>
	__asm volatile
 800dd46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd4a:	f383 8811 	msr	BASEPRI, r3
 800dd4e:	f3bf 8f6f 	isb	sy
 800dd52:	f3bf 8f4f 	dsb	sy
 800dd56:	613b      	str	r3, [r7, #16]
}
 800dd58:	bf00      	nop
 800dd5a:	bf00      	nop
 800dd5c:	e7fd      	b.n	800dd5a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	68ba      	ldr	r2, [r7, #8]
 800dd62:	fb02 f303 	mul.w	r3, r2, r3
 800dd66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	3350      	adds	r3, #80	@ 0x50
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f002 fde5 	bl	801093c <pvPortMalloc>
 800dd72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dd74:	69bb      	ldr	r3, [r7, #24]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d011      	beq.n	800dd9e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dd7a:	69bb      	ldr	r3, [r7, #24]
 800dd7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	3350      	adds	r3, #80	@ 0x50
 800dd82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dd84:	69bb      	ldr	r3, [r7, #24]
 800dd86:	2200      	movs	r2, #0
 800dd88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dd8c:	79fa      	ldrb	r2, [r7, #7]
 800dd8e:	69bb      	ldr	r3, [r7, #24]
 800dd90:	9300      	str	r3, [sp, #0]
 800dd92:	4613      	mov	r3, r2
 800dd94:	697a      	ldr	r2, [r7, #20]
 800dd96:	68b9      	ldr	r1, [r7, #8]
 800dd98:	68f8      	ldr	r0, [r7, #12]
 800dd9a:	f000 f805 	bl	800dda8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dd9e:	69bb      	ldr	r3, [r7, #24]
	}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3720      	adds	r7, #32
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]
 800ddb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d103      	bne.n	800ddc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ddbc:	69bb      	ldr	r3, [r7, #24]
 800ddbe:	69ba      	ldr	r2, [r7, #24]
 800ddc0:	601a      	str	r2, [r3, #0]
 800ddc2:	e002      	b.n	800ddca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ddc4:	69bb      	ldr	r3, [r7, #24]
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ddca:	69bb      	ldr	r3, [r7, #24]
 800ddcc:	68fa      	ldr	r2, [r7, #12]
 800ddce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ddd0:	69bb      	ldr	r3, [r7, #24]
 800ddd2:	68ba      	ldr	r2, [r7, #8]
 800ddd4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ddd6:	2101      	movs	r1, #1
 800ddd8:	69b8      	ldr	r0, [r7, #24]
 800ddda:	f7ff fec3 	bl	800db64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	78fa      	ldrb	r2, [r7, #3]
 800dde2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dde6:	bf00      	nop
 800dde8:	3710      	adds	r7, #16
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}

0800ddee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b082      	sub	sp, #8
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d00e      	beq.n	800de1a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2200      	movs	r2, #0
 800de00:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2200      	movs	r2, #0
 800de06:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2200      	movs	r2, #0
 800de0c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800de0e:	2300      	movs	r3, #0
 800de10:	2200      	movs	r2, #0
 800de12:	2100      	movs	r1, #0
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f000 f911 	bl	800e03c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800de1a:	bf00      	nop
 800de1c:	3708      	adds	r7, #8
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}

0800de22 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800de22:	b580      	push	{r7, lr}
 800de24:	b086      	sub	sp, #24
 800de26:	af00      	add	r7, sp, #0
 800de28:	4603      	mov	r3, r0
 800de2a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800de2c:	2301      	movs	r3, #1
 800de2e:	617b      	str	r3, [r7, #20]
 800de30:	2300      	movs	r3, #0
 800de32:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800de34:	79fb      	ldrb	r3, [r7, #7]
 800de36:	461a      	mov	r2, r3
 800de38:	6939      	ldr	r1, [r7, #16]
 800de3a:	6978      	ldr	r0, [r7, #20]
 800de3c:	f7ff ff79 	bl	800dd32 <xQueueGenericCreate>
 800de40:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800de42:	68f8      	ldr	r0, [r7, #12]
 800de44:	f7ff ffd3 	bl	800ddee <prvInitialiseMutex>

		return xNewQueue;
 800de48:	68fb      	ldr	r3, [r7, #12]
	}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3718      	adds	r7, #24
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}

0800de52 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800de52:	b580      	push	{r7, lr}
 800de54:	b088      	sub	sp, #32
 800de56:	af02      	add	r7, sp, #8
 800de58:	4603      	mov	r3, r0
 800de5a:	6039      	str	r1, [r7, #0]
 800de5c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800de5e:	2301      	movs	r3, #1
 800de60:	617b      	str	r3, [r7, #20]
 800de62:	2300      	movs	r3, #0
 800de64:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800de66:	79fb      	ldrb	r3, [r7, #7]
 800de68:	9300      	str	r3, [sp, #0]
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	2200      	movs	r2, #0
 800de6e:	6939      	ldr	r1, [r7, #16]
 800de70:	6978      	ldr	r0, [r7, #20]
 800de72:	f7ff fee1 	bl	800dc38 <xQueueGenericCreateStatic>
 800de76:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800de78:	68f8      	ldr	r0, [r7, #12]
 800de7a:	f7ff ffb8 	bl	800ddee <prvInitialiseMutex>

		return xNewQueue;
 800de7e:	68fb      	ldr	r3, [r7, #12]
	}
 800de80:	4618      	mov	r0, r3
 800de82:	3718      	adds	r7, #24
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800de88:	b590      	push	{r4, r7, lr}
 800de8a:	b087      	sub	sp, #28
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d10b      	bne.n	800deb2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800de9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de9e:	f383 8811 	msr	BASEPRI, r3
 800dea2:	f3bf 8f6f 	isb	sy
 800dea6:	f3bf 8f4f 	dsb	sy
 800deaa:	60fb      	str	r3, [r7, #12]
}
 800deac:	bf00      	nop
 800deae:	bf00      	nop
 800deb0:	e7fd      	b.n	800deae <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	689c      	ldr	r4, [r3, #8]
 800deb6:	f001 fda3 	bl	800fa00 <xTaskGetCurrentTaskHandle>
 800deba:	4603      	mov	r3, r0
 800debc:	429c      	cmp	r4, r3
 800debe:	d111      	bne.n	800dee4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	1e5a      	subs	r2, r3, #1
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	68db      	ldr	r3, [r3, #12]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d105      	bne.n	800dede <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ded2:	2300      	movs	r3, #0
 800ded4:	2200      	movs	r2, #0
 800ded6:	2100      	movs	r1, #0
 800ded8:	6938      	ldr	r0, [r7, #16]
 800deda:	f000 f8af 	bl	800e03c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800dede:	2301      	movs	r3, #1
 800dee0:	617b      	str	r3, [r7, #20]
 800dee2:	e001      	b.n	800dee8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800dee4:	2300      	movs	r3, #0
 800dee6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800dee8:	697b      	ldr	r3, [r7, #20]
	}
 800deea:	4618      	mov	r0, r3
 800deec:	371c      	adds	r7, #28
 800deee:	46bd      	mov	sp, r7
 800def0:	bd90      	pop	{r4, r7, pc}

0800def2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800def2:	b590      	push	{r4, r7, lr}
 800def4:	b087      	sub	sp, #28
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
 800defa:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d10b      	bne.n	800df1e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800df06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df0a:	f383 8811 	msr	BASEPRI, r3
 800df0e:	f3bf 8f6f 	isb	sy
 800df12:	f3bf 8f4f 	dsb	sy
 800df16:	60fb      	str	r3, [r7, #12]
}
 800df18:	bf00      	nop
 800df1a:	bf00      	nop
 800df1c:	e7fd      	b.n	800df1a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	689c      	ldr	r4, [r3, #8]
 800df22:	f001 fd6d 	bl	800fa00 <xTaskGetCurrentTaskHandle>
 800df26:	4603      	mov	r3, r0
 800df28:	429c      	cmp	r4, r3
 800df2a:	d107      	bne.n	800df3c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	68db      	ldr	r3, [r3, #12]
 800df30:	1c5a      	adds	r2, r3, #1
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800df36:	2301      	movs	r3, #1
 800df38:	617b      	str	r3, [r7, #20]
 800df3a:	e00c      	b.n	800df56 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800df3c:	6839      	ldr	r1, [r7, #0]
 800df3e:	6938      	ldr	r0, [r7, #16]
 800df40:	f000 fb8e 	bl	800e660 <xQueueSemaphoreTake>
 800df44:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d004      	beq.n	800df56 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	68db      	ldr	r3, [r3, #12]
 800df50:	1c5a      	adds	r2, r3, #1
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800df56:	697b      	ldr	r3, [r7, #20]
	}
 800df58:	4618      	mov	r0, r3
 800df5a:	371c      	adds	r7, #28
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd90      	pop	{r4, r7, pc}

0800df60 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800df60:	b580      	push	{r7, lr}
 800df62:	b08a      	sub	sp, #40	@ 0x28
 800df64:	af02      	add	r7, sp, #8
 800df66:	60f8      	str	r0, [r7, #12]
 800df68:	60b9      	str	r1, [r7, #8]
 800df6a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d10b      	bne.n	800df8a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800df72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df76:	f383 8811 	msr	BASEPRI, r3
 800df7a:	f3bf 8f6f 	isb	sy
 800df7e:	f3bf 8f4f 	dsb	sy
 800df82:	61bb      	str	r3, [r7, #24]
}
 800df84:	bf00      	nop
 800df86:	bf00      	nop
 800df88:	e7fd      	b.n	800df86 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800df8a:	68ba      	ldr	r2, [r7, #8]
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	429a      	cmp	r2, r3
 800df90:	d90b      	bls.n	800dfaa <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800df92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df96:	f383 8811 	msr	BASEPRI, r3
 800df9a:	f3bf 8f6f 	isb	sy
 800df9e:	f3bf 8f4f 	dsb	sy
 800dfa2:	617b      	str	r3, [r7, #20]
}
 800dfa4:	bf00      	nop
 800dfa6:	bf00      	nop
 800dfa8:	e7fd      	b.n	800dfa6 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dfaa:	2302      	movs	r3, #2
 800dfac:	9300      	str	r3, [sp, #0]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	2100      	movs	r1, #0
 800dfb4:	68f8      	ldr	r0, [r7, #12]
 800dfb6:	f7ff fe3f 	bl	800dc38 <xQueueGenericCreateStatic>
 800dfba:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d002      	beq.n	800dfc8 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dfc2:	69fb      	ldr	r3, [r7, #28]
 800dfc4:	68ba      	ldr	r2, [r7, #8]
 800dfc6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800dfc8:	69fb      	ldr	r3, [r7, #28]
	}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3720      	adds	r7, #32
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b086      	sub	sp, #24
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
 800dfda:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d10b      	bne.n	800dffa <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800dfe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfe6:	f383 8811 	msr	BASEPRI, r3
 800dfea:	f3bf 8f6f 	isb	sy
 800dfee:	f3bf 8f4f 	dsb	sy
 800dff2:	613b      	str	r3, [r7, #16]
}
 800dff4:	bf00      	nop
 800dff6:	bf00      	nop
 800dff8:	e7fd      	b.n	800dff6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dffa:	683a      	ldr	r2, [r7, #0]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d90b      	bls.n	800e01a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800e002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e006:	f383 8811 	msr	BASEPRI, r3
 800e00a:	f3bf 8f6f 	isb	sy
 800e00e:	f3bf 8f4f 	dsb	sy
 800e012:	60fb      	str	r3, [r7, #12]
}
 800e014:	bf00      	nop
 800e016:	bf00      	nop
 800e018:	e7fd      	b.n	800e016 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e01a:	2202      	movs	r2, #2
 800e01c:	2100      	movs	r1, #0
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f7ff fe87 	bl	800dd32 <xQueueGenericCreate>
 800e024:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d002      	beq.n	800e032 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	683a      	ldr	r2, [r7, #0]
 800e030:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e032:	697b      	ldr	r3, [r7, #20]
	}
 800e034:	4618      	mov	r0, r3
 800e036:	3718      	adds	r7, #24
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b08e      	sub	sp, #56	@ 0x38
 800e040:	af00      	add	r7, sp, #0
 800e042:	60f8      	str	r0, [r7, #12]
 800e044:	60b9      	str	r1, [r7, #8]
 800e046:	607a      	str	r2, [r7, #4]
 800e048:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e04a:	2300      	movs	r3, #0
 800e04c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e054:	2b00      	cmp	r3, #0
 800e056:	d10b      	bne.n	800e070 <xQueueGenericSend+0x34>
	__asm volatile
 800e058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e05c:	f383 8811 	msr	BASEPRI, r3
 800e060:	f3bf 8f6f 	isb	sy
 800e064:	f3bf 8f4f 	dsb	sy
 800e068:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e06a:	bf00      	nop
 800e06c:	bf00      	nop
 800e06e:	e7fd      	b.n	800e06c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d103      	bne.n	800e07e <xQueueGenericSend+0x42>
 800e076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d101      	bne.n	800e082 <xQueueGenericSend+0x46>
 800e07e:	2301      	movs	r3, #1
 800e080:	e000      	b.n	800e084 <xQueueGenericSend+0x48>
 800e082:	2300      	movs	r3, #0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d10b      	bne.n	800e0a0 <xQueueGenericSend+0x64>
	__asm volatile
 800e088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e08c:	f383 8811 	msr	BASEPRI, r3
 800e090:	f3bf 8f6f 	isb	sy
 800e094:	f3bf 8f4f 	dsb	sy
 800e098:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e09a:	bf00      	nop
 800e09c:	bf00      	nop
 800e09e:	e7fd      	b.n	800e09c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	2b02      	cmp	r3, #2
 800e0a4:	d103      	bne.n	800e0ae <xQueueGenericSend+0x72>
 800e0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d101      	bne.n	800e0b2 <xQueueGenericSend+0x76>
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	e000      	b.n	800e0b4 <xQueueGenericSend+0x78>
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d10b      	bne.n	800e0d0 <xQueueGenericSend+0x94>
	__asm volatile
 800e0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0bc:	f383 8811 	msr	BASEPRI, r3
 800e0c0:	f3bf 8f6f 	isb	sy
 800e0c4:	f3bf 8f4f 	dsb	sy
 800e0c8:	623b      	str	r3, [r7, #32]
}
 800e0ca:	bf00      	nop
 800e0cc:	bf00      	nop
 800e0ce:	e7fd      	b.n	800e0cc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e0d0:	f001 fca6 	bl	800fa20 <xTaskGetSchedulerState>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d102      	bne.n	800e0e0 <xQueueGenericSend+0xa4>
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d101      	bne.n	800e0e4 <xQueueGenericSend+0xa8>
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	e000      	b.n	800e0e6 <xQueueGenericSend+0xaa>
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d10b      	bne.n	800e102 <xQueueGenericSend+0xc6>
	__asm volatile
 800e0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ee:	f383 8811 	msr	BASEPRI, r3
 800e0f2:	f3bf 8f6f 	isb	sy
 800e0f6:	f3bf 8f4f 	dsb	sy
 800e0fa:	61fb      	str	r3, [r7, #28]
}
 800e0fc:	bf00      	nop
 800e0fe:	bf00      	nop
 800e100:	e7fd      	b.n	800e0fe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e102:	f002 faf9 	bl	80106f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e108:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e10c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e10e:	429a      	cmp	r2, r3
 800e110:	d302      	bcc.n	800e118 <xQueueGenericSend+0xdc>
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	2b02      	cmp	r3, #2
 800e116:	d129      	bne.n	800e16c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e118:	683a      	ldr	r2, [r7, #0]
 800e11a:	68b9      	ldr	r1, [r7, #8]
 800e11c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e11e:	f000 fc6d 	bl	800e9fc <prvCopyDataToQueue>
 800e122:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d010      	beq.n	800e14e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e12e:	3324      	adds	r3, #36	@ 0x24
 800e130:	4618      	mov	r0, r3
 800e132:	f001 fa9f 	bl	800f674 <xTaskRemoveFromEventList>
 800e136:	4603      	mov	r3, r0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d013      	beq.n	800e164 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e13c:	4b3f      	ldr	r3, [pc, #252]	@ (800e23c <xQueueGenericSend+0x200>)
 800e13e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e142:	601a      	str	r2, [r3, #0]
 800e144:	f3bf 8f4f 	dsb	sy
 800e148:	f3bf 8f6f 	isb	sy
 800e14c:	e00a      	b.n	800e164 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e150:	2b00      	cmp	r3, #0
 800e152:	d007      	beq.n	800e164 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e154:	4b39      	ldr	r3, [pc, #228]	@ (800e23c <xQueueGenericSend+0x200>)
 800e156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e15a:	601a      	str	r2, [r3, #0]
 800e15c:	f3bf 8f4f 	dsb	sy
 800e160:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e164:	f002 fafa 	bl	801075c <vPortExitCritical>
				return pdPASS;
 800e168:	2301      	movs	r3, #1
 800e16a:	e063      	b.n	800e234 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d103      	bne.n	800e17a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e172:	f002 faf3 	bl	801075c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e176:	2300      	movs	r3, #0
 800e178:	e05c      	b.n	800e234 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e17a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d106      	bne.n	800e18e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e180:	f107 0314 	add.w	r3, r7, #20
 800e184:	4618      	mov	r0, r3
 800e186:	f001 fad9 	bl	800f73c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e18a:	2301      	movs	r3, #1
 800e18c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e18e:	f002 fae5 	bl	801075c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e192:	f001 f82f 	bl	800f1f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e196:	f002 faaf 	bl	80106f8 <vPortEnterCritical>
 800e19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e19c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e1a0:	b25b      	sxtb	r3, r3
 800e1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1a6:	d103      	bne.n	800e1b0 <xQueueGenericSend+0x174>
 800e1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e1b6:	b25b      	sxtb	r3, r3
 800e1b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1bc:	d103      	bne.n	800e1c6 <xQueueGenericSend+0x18a>
 800e1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e1c6:	f002 fac9 	bl	801075c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e1ca:	1d3a      	adds	r2, r7, #4
 800e1cc:	f107 0314 	add.w	r3, r7, #20
 800e1d0:	4611      	mov	r1, r2
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f001 fac8 	bl	800f768 <xTaskCheckForTimeOut>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d124      	bne.n	800e228 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e1de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e1e0:	f000 fd04 	bl	800ebec <prvIsQueueFull>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d018      	beq.n	800e21c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ec:	3310      	adds	r3, #16
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	4611      	mov	r1, r2
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f001 f9ec 	bl	800f5d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e1f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e1fa:	f000 fc8f 	bl	800eb1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e1fe:	f001 f807 	bl	800f210 <xTaskResumeAll>
 800e202:	4603      	mov	r3, r0
 800e204:	2b00      	cmp	r3, #0
 800e206:	f47f af7c 	bne.w	800e102 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e20a:	4b0c      	ldr	r3, [pc, #48]	@ (800e23c <xQueueGenericSend+0x200>)
 800e20c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e210:	601a      	str	r2, [r3, #0]
 800e212:	f3bf 8f4f 	dsb	sy
 800e216:	f3bf 8f6f 	isb	sy
 800e21a:	e772      	b.n	800e102 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e21c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e21e:	f000 fc7d 	bl	800eb1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e222:	f000 fff5 	bl	800f210 <xTaskResumeAll>
 800e226:	e76c      	b.n	800e102 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e228:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e22a:	f000 fc77 	bl	800eb1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e22e:	f000 ffef 	bl	800f210 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e232:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e234:	4618      	mov	r0, r3
 800e236:	3738      	adds	r7, #56	@ 0x38
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}
 800e23c:	e000ed04 	.word	0xe000ed04

0800e240 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b090      	sub	sp, #64	@ 0x40
 800e244:	af00      	add	r7, sp, #0
 800e246:	60f8      	str	r0, [r7, #12]
 800e248:	60b9      	str	r1, [r7, #8]
 800e24a:	607a      	str	r2, [r7, #4]
 800e24c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e254:	2b00      	cmp	r3, #0
 800e256:	d10b      	bne.n	800e270 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e25c:	f383 8811 	msr	BASEPRI, r3
 800e260:	f3bf 8f6f 	isb	sy
 800e264:	f3bf 8f4f 	dsb	sy
 800e268:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e26a:	bf00      	nop
 800e26c:	bf00      	nop
 800e26e:	e7fd      	b.n	800e26c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d103      	bne.n	800e27e <xQueueGenericSendFromISR+0x3e>
 800e276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d101      	bne.n	800e282 <xQueueGenericSendFromISR+0x42>
 800e27e:	2301      	movs	r3, #1
 800e280:	e000      	b.n	800e284 <xQueueGenericSendFromISR+0x44>
 800e282:	2300      	movs	r3, #0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d10b      	bne.n	800e2a0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e28c:	f383 8811 	msr	BASEPRI, r3
 800e290:	f3bf 8f6f 	isb	sy
 800e294:	f3bf 8f4f 	dsb	sy
 800e298:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e29a:	bf00      	nop
 800e29c:	bf00      	nop
 800e29e:	e7fd      	b.n	800e29c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	2b02      	cmp	r3, #2
 800e2a4:	d103      	bne.n	800e2ae <xQueueGenericSendFromISR+0x6e>
 800e2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d101      	bne.n	800e2b2 <xQueueGenericSendFromISR+0x72>
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	e000      	b.n	800e2b4 <xQueueGenericSendFromISR+0x74>
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d10b      	bne.n	800e2d0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2bc:	f383 8811 	msr	BASEPRI, r3
 800e2c0:	f3bf 8f6f 	isb	sy
 800e2c4:	f3bf 8f4f 	dsb	sy
 800e2c8:	623b      	str	r3, [r7, #32]
}
 800e2ca:	bf00      	nop
 800e2cc:	bf00      	nop
 800e2ce:	e7fd      	b.n	800e2cc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e2d0:	f002 faf2 	bl	80108b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e2d4:	f3ef 8211 	mrs	r2, BASEPRI
 800e2d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2dc:	f383 8811 	msr	BASEPRI, r3
 800e2e0:	f3bf 8f6f 	isb	sy
 800e2e4:	f3bf 8f4f 	dsb	sy
 800e2e8:	61fa      	str	r2, [r7, #28]
 800e2ea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e2ec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e2ee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d302      	bcc.n	800e302 <xQueueGenericSendFromISR+0xc2>
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	2b02      	cmp	r3, #2
 800e300:	d12f      	bne.n	800e362 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e304:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e308:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e30e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e310:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e312:	683a      	ldr	r2, [r7, #0]
 800e314:	68b9      	ldr	r1, [r7, #8]
 800e316:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e318:	f000 fb70 	bl	800e9fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e31c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e324:	d112      	bne.n	800e34c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d016      	beq.n	800e35c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e330:	3324      	adds	r3, #36	@ 0x24
 800e332:	4618      	mov	r0, r3
 800e334:	f001 f99e 	bl	800f674 <xTaskRemoveFromEventList>
 800e338:	4603      	mov	r3, r0
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d00e      	beq.n	800e35c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d00b      	beq.n	800e35c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2201      	movs	r2, #1
 800e348:	601a      	str	r2, [r3, #0]
 800e34a:	e007      	b.n	800e35c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e34c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e350:	3301      	adds	r3, #1
 800e352:	b2db      	uxtb	r3, r3
 800e354:	b25a      	sxtb	r2, r3
 800e356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e358:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e35c:	2301      	movs	r3, #1
 800e35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e360:	e001      	b.n	800e366 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e362:	2300      	movs	r3, #0
 800e364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e368:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e370:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e374:	4618      	mov	r0, r3
 800e376:	3740      	adds	r7, #64	@ 0x40
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b08e      	sub	sp, #56	@ 0x38
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d10b      	bne.n	800e3a8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800e390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e394:	f383 8811 	msr	BASEPRI, r3
 800e398:	f3bf 8f6f 	isb	sy
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	623b      	str	r3, [r7, #32]
}
 800e3a2:	bf00      	nop
 800e3a4:	bf00      	nop
 800e3a6:	e7fd      	b.n	800e3a4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d00b      	beq.n	800e3c8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800e3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3b4:	f383 8811 	msr	BASEPRI, r3
 800e3b8:	f3bf 8f6f 	isb	sy
 800e3bc:	f3bf 8f4f 	dsb	sy
 800e3c0:	61fb      	str	r3, [r7, #28]
}
 800e3c2:	bf00      	nop
 800e3c4:	bf00      	nop
 800e3c6:	e7fd      	b.n	800e3c4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d103      	bne.n	800e3d8 <xQueueGiveFromISR+0x5c>
 800e3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3d2:	689b      	ldr	r3, [r3, #8]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d101      	bne.n	800e3dc <xQueueGiveFromISR+0x60>
 800e3d8:	2301      	movs	r3, #1
 800e3da:	e000      	b.n	800e3de <xQueueGiveFromISR+0x62>
 800e3dc:	2300      	movs	r3, #0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d10b      	bne.n	800e3fa <xQueueGiveFromISR+0x7e>
	__asm volatile
 800e3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e6:	f383 8811 	msr	BASEPRI, r3
 800e3ea:	f3bf 8f6f 	isb	sy
 800e3ee:	f3bf 8f4f 	dsb	sy
 800e3f2:	61bb      	str	r3, [r7, #24]
}
 800e3f4:	bf00      	nop
 800e3f6:	bf00      	nop
 800e3f8:	e7fd      	b.n	800e3f6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e3fa:	f002 fa5d 	bl	80108b8 <vPortValidateInterruptPriority>
	__asm volatile
 800e3fe:	f3ef 8211 	mrs	r2, BASEPRI
 800e402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e406:	f383 8811 	msr	BASEPRI, r3
 800e40a:	f3bf 8f6f 	isb	sy
 800e40e:	f3bf 8f4f 	dsb	sy
 800e412:	617a      	str	r2, [r7, #20]
 800e414:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e416:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e418:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e41c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e41e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e426:	429a      	cmp	r2, r3
 800e428:	d22b      	bcs.n	800e482 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e42c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e430:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e436:	1c5a      	adds	r2, r3, #1
 800e438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e43a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e43c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e444:	d112      	bne.n	800e46c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d016      	beq.n	800e47c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e450:	3324      	adds	r3, #36	@ 0x24
 800e452:	4618      	mov	r0, r3
 800e454:	f001 f90e 	bl	800f674 <xTaskRemoveFromEventList>
 800e458:	4603      	mov	r3, r0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d00e      	beq.n	800e47c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d00b      	beq.n	800e47c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	2201      	movs	r2, #1
 800e468:	601a      	str	r2, [r3, #0]
 800e46a:	e007      	b.n	800e47c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e46c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e470:	3301      	adds	r3, #1
 800e472:	b2db      	uxtb	r3, r3
 800e474:	b25a      	sxtb	r2, r3
 800e476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e47c:	2301      	movs	r3, #1
 800e47e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e480:	e001      	b.n	800e486 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e482:	2300      	movs	r3, #0
 800e484:	637b      	str	r3, [r7, #52]	@ 0x34
 800e486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e488:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	f383 8811 	msr	BASEPRI, r3
}
 800e490:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e494:	4618      	mov	r0, r3
 800e496:	3738      	adds	r7, #56	@ 0x38
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b08c      	sub	sp, #48	@ 0x30
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d10b      	bne.n	800e4ce <xQueueReceive+0x32>
	__asm volatile
 800e4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ba:	f383 8811 	msr	BASEPRI, r3
 800e4be:	f3bf 8f6f 	isb	sy
 800e4c2:	f3bf 8f4f 	dsb	sy
 800e4c6:	623b      	str	r3, [r7, #32]
}
 800e4c8:	bf00      	nop
 800e4ca:	bf00      	nop
 800e4cc:	e7fd      	b.n	800e4ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d103      	bne.n	800e4dc <xQueueReceive+0x40>
 800e4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d101      	bne.n	800e4e0 <xQueueReceive+0x44>
 800e4dc:	2301      	movs	r3, #1
 800e4de:	e000      	b.n	800e4e2 <xQueueReceive+0x46>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d10b      	bne.n	800e4fe <xQueueReceive+0x62>
	__asm volatile
 800e4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ea:	f383 8811 	msr	BASEPRI, r3
 800e4ee:	f3bf 8f6f 	isb	sy
 800e4f2:	f3bf 8f4f 	dsb	sy
 800e4f6:	61fb      	str	r3, [r7, #28]
}
 800e4f8:	bf00      	nop
 800e4fa:	bf00      	nop
 800e4fc:	e7fd      	b.n	800e4fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4fe:	f001 fa8f 	bl	800fa20 <xTaskGetSchedulerState>
 800e502:	4603      	mov	r3, r0
 800e504:	2b00      	cmp	r3, #0
 800e506:	d102      	bne.n	800e50e <xQueueReceive+0x72>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d101      	bne.n	800e512 <xQueueReceive+0x76>
 800e50e:	2301      	movs	r3, #1
 800e510:	e000      	b.n	800e514 <xQueueReceive+0x78>
 800e512:	2300      	movs	r3, #0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d10b      	bne.n	800e530 <xQueueReceive+0x94>
	__asm volatile
 800e518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e51c:	f383 8811 	msr	BASEPRI, r3
 800e520:	f3bf 8f6f 	isb	sy
 800e524:	f3bf 8f4f 	dsb	sy
 800e528:	61bb      	str	r3, [r7, #24]
}
 800e52a:	bf00      	nop
 800e52c:	bf00      	nop
 800e52e:	e7fd      	b.n	800e52c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e530:	f002 f8e2 	bl	80106f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e538:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d01f      	beq.n	800e580 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e540:	68b9      	ldr	r1, [r7, #8]
 800e542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e544:	f000 fac4 	bl	800ead0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e54a:	1e5a      	subs	r2, r3, #1
 800e54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e54e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e552:	691b      	ldr	r3, [r3, #16]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d00f      	beq.n	800e578 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e55a:	3310      	adds	r3, #16
 800e55c:	4618      	mov	r0, r3
 800e55e:	f001 f889 	bl	800f674 <xTaskRemoveFromEventList>
 800e562:	4603      	mov	r3, r0
 800e564:	2b00      	cmp	r3, #0
 800e566:	d007      	beq.n	800e578 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e568:	4b3c      	ldr	r3, [pc, #240]	@ (800e65c <xQueueReceive+0x1c0>)
 800e56a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e56e:	601a      	str	r2, [r3, #0]
 800e570:	f3bf 8f4f 	dsb	sy
 800e574:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e578:	f002 f8f0 	bl	801075c <vPortExitCritical>
				return pdPASS;
 800e57c:	2301      	movs	r3, #1
 800e57e:	e069      	b.n	800e654 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d103      	bne.n	800e58e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e586:	f002 f8e9 	bl	801075c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e58a:	2300      	movs	r3, #0
 800e58c:	e062      	b.n	800e654 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e590:	2b00      	cmp	r3, #0
 800e592:	d106      	bne.n	800e5a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e594:	f107 0310 	add.w	r3, r7, #16
 800e598:	4618      	mov	r0, r3
 800e59a:	f001 f8cf 	bl	800f73c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e5a2:	f002 f8db 	bl	801075c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e5a6:	f000 fe25 	bl	800f1f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e5aa:	f002 f8a5 	bl	80106f8 <vPortEnterCritical>
 800e5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e5b4:	b25b      	sxtb	r3, r3
 800e5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5ba:	d103      	bne.n	800e5c4 <xQueueReceive+0x128>
 800e5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5be:	2200      	movs	r2, #0
 800e5c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e5ca:	b25b      	sxtb	r3, r3
 800e5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5d0:	d103      	bne.n	800e5da <xQueueReceive+0x13e>
 800e5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e5da:	f002 f8bf 	bl	801075c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e5de:	1d3a      	adds	r2, r7, #4
 800e5e0:	f107 0310 	add.w	r3, r7, #16
 800e5e4:	4611      	mov	r1, r2
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f001 f8be 	bl	800f768 <xTaskCheckForTimeOut>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d123      	bne.n	800e63a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e5f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e5f4:	f000 fae4 	bl	800ebc0 <prvIsQueueEmpty>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d017      	beq.n	800e62e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e600:	3324      	adds	r3, #36	@ 0x24
 800e602:	687a      	ldr	r2, [r7, #4]
 800e604:	4611      	mov	r1, r2
 800e606:	4618      	mov	r0, r3
 800e608:	f000 ffe2 	bl	800f5d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e60c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e60e:	f000 fa85 	bl	800eb1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e612:	f000 fdfd 	bl	800f210 <xTaskResumeAll>
 800e616:	4603      	mov	r3, r0
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d189      	bne.n	800e530 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e61c:	4b0f      	ldr	r3, [pc, #60]	@ (800e65c <xQueueReceive+0x1c0>)
 800e61e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e622:	601a      	str	r2, [r3, #0]
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	f3bf 8f6f 	isb	sy
 800e62c:	e780      	b.n	800e530 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e62e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e630:	f000 fa74 	bl	800eb1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e634:	f000 fdec 	bl	800f210 <xTaskResumeAll>
 800e638:	e77a      	b.n	800e530 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e63a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e63c:	f000 fa6e 	bl	800eb1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e640:	f000 fde6 	bl	800f210 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e644:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e646:	f000 fabb 	bl	800ebc0 <prvIsQueueEmpty>
 800e64a:	4603      	mov	r3, r0
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f43f af6f 	beq.w	800e530 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e652:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e654:	4618      	mov	r0, r3
 800e656:	3730      	adds	r7, #48	@ 0x30
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	e000ed04 	.word	0xe000ed04

0800e660 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b08e      	sub	sp, #56	@ 0x38
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e66a:	2300      	movs	r3, #0
 800e66c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e672:	2300      	movs	r3, #0
 800e674:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d10b      	bne.n	800e694 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800e67c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e680:	f383 8811 	msr	BASEPRI, r3
 800e684:	f3bf 8f6f 	isb	sy
 800e688:	f3bf 8f4f 	dsb	sy
 800e68c:	623b      	str	r3, [r7, #32]
}
 800e68e:	bf00      	nop
 800e690:	bf00      	nop
 800e692:	e7fd      	b.n	800e690 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d00b      	beq.n	800e6b4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800e69c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6a0:	f383 8811 	msr	BASEPRI, r3
 800e6a4:	f3bf 8f6f 	isb	sy
 800e6a8:	f3bf 8f4f 	dsb	sy
 800e6ac:	61fb      	str	r3, [r7, #28]
}
 800e6ae:	bf00      	nop
 800e6b0:	bf00      	nop
 800e6b2:	e7fd      	b.n	800e6b0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e6b4:	f001 f9b4 	bl	800fa20 <xTaskGetSchedulerState>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d102      	bne.n	800e6c4 <xQueueSemaphoreTake+0x64>
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d101      	bne.n	800e6c8 <xQueueSemaphoreTake+0x68>
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	e000      	b.n	800e6ca <xQueueSemaphoreTake+0x6a>
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d10b      	bne.n	800e6e6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800e6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6d2:	f383 8811 	msr	BASEPRI, r3
 800e6d6:	f3bf 8f6f 	isb	sy
 800e6da:	f3bf 8f4f 	dsb	sy
 800e6de:	61bb      	str	r3, [r7, #24]
}
 800e6e0:	bf00      	nop
 800e6e2:	bf00      	nop
 800e6e4:	e7fd      	b.n	800e6e2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e6e6:	f002 f807 	bl	80106f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e6ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6ee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d024      	beq.n	800e740 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6f8:	1e5a      	subs	r2, r3, #1
 800e6fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6fc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d104      	bne.n	800e710 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e706:	f001 fb05 	bl	800fd14 <pvTaskIncrementMutexHeldCount>
 800e70a:	4602      	mov	r2, r0
 800e70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e70e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e712:	691b      	ldr	r3, [r3, #16]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d00f      	beq.n	800e738 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e71a:	3310      	adds	r3, #16
 800e71c:	4618      	mov	r0, r3
 800e71e:	f000 ffa9 	bl	800f674 <xTaskRemoveFromEventList>
 800e722:	4603      	mov	r3, r0
 800e724:	2b00      	cmp	r3, #0
 800e726:	d007      	beq.n	800e738 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e728:	4b54      	ldr	r3, [pc, #336]	@ (800e87c <xQueueSemaphoreTake+0x21c>)
 800e72a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e72e:	601a      	str	r2, [r3, #0]
 800e730:	f3bf 8f4f 	dsb	sy
 800e734:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e738:	f002 f810 	bl	801075c <vPortExitCritical>
				return pdPASS;
 800e73c:	2301      	movs	r3, #1
 800e73e:	e098      	b.n	800e872 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d112      	bne.n	800e76c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d00b      	beq.n	800e764 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800e74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e750:	f383 8811 	msr	BASEPRI, r3
 800e754:	f3bf 8f6f 	isb	sy
 800e758:	f3bf 8f4f 	dsb	sy
 800e75c:	617b      	str	r3, [r7, #20]
}
 800e75e:	bf00      	nop
 800e760:	bf00      	nop
 800e762:	e7fd      	b.n	800e760 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e764:	f001 fffa 	bl	801075c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e768:	2300      	movs	r3, #0
 800e76a:	e082      	b.n	800e872 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e76c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d106      	bne.n	800e780 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e772:	f107 030c 	add.w	r3, r7, #12
 800e776:	4618      	mov	r0, r3
 800e778:	f000 ffe0 	bl	800f73c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e77c:	2301      	movs	r3, #1
 800e77e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e780:	f001 ffec 	bl	801075c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e784:	f000 fd36 	bl	800f1f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e788:	f001 ffb6 	bl	80106f8 <vPortEnterCritical>
 800e78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e78e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e792:	b25b      	sxtb	r3, r3
 800e794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e798:	d103      	bne.n	800e7a2 <xQueueSemaphoreTake+0x142>
 800e79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e79c:	2200      	movs	r2, #0
 800e79e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e7a8:	b25b      	sxtb	r3, r3
 800e7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ae:	d103      	bne.n	800e7b8 <xQueueSemaphoreTake+0x158>
 800e7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e7b8:	f001 ffd0 	bl	801075c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e7bc:	463a      	mov	r2, r7
 800e7be:	f107 030c 	add.w	r3, r7, #12
 800e7c2:	4611      	mov	r1, r2
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f000 ffcf 	bl	800f768 <xTaskCheckForTimeOut>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d132      	bne.n	800e836 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e7d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e7d2:	f000 f9f5 	bl	800ebc0 <prvIsQueueEmpty>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d026      	beq.n	800e82a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d109      	bne.n	800e7f8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800e7e4:	f001 ff88 	bl	80106f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f001 f935 	bl	800fa5c <xTaskPriorityInherit>
 800e7f2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e7f4:	f001 ffb2 	bl	801075c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7fa:	3324      	adds	r3, #36	@ 0x24
 800e7fc:	683a      	ldr	r2, [r7, #0]
 800e7fe:	4611      	mov	r1, r2
 800e800:	4618      	mov	r0, r3
 800e802:	f000 fee5 	bl	800f5d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e806:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e808:	f000 f988 	bl	800eb1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e80c:	f000 fd00 	bl	800f210 <xTaskResumeAll>
 800e810:	4603      	mov	r3, r0
 800e812:	2b00      	cmp	r3, #0
 800e814:	f47f af67 	bne.w	800e6e6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800e818:	4b18      	ldr	r3, [pc, #96]	@ (800e87c <xQueueSemaphoreTake+0x21c>)
 800e81a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e81e:	601a      	str	r2, [r3, #0]
 800e820:	f3bf 8f4f 	dsb	sy
 800e824:	f3bf 8f6f 	isb	sy
 800e828:	e75d      	b.n	800e6e6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e82a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e82c:	f000 f976 	bl	800eb1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e830:	f000 fcee 	bl	800f210 <xTaskResumeAll>
 800e834:	e757      	b.n	800e6e6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e836:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e838:	f000 f970 	bl	800eb1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e83c:	f000 fce8 	bl	800f210 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e840:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e842:	f000 f9bd 	bl	800ebc0 <prvIsQueueEmpty>
 800e846:	4603      	mov	r3, r0
 800e848:	2b00      	cmp	r3, #0
 800e84a:	f43f af4c 	beq.w	800e6e6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e850:	2b00      	cmp	r3, #0
 800e852:	d00d      	beq.n	800e870 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800e854:	f001 ff50 	bl	80106f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e858:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e85a:	f000 f8b7 	bl	800e9cc <prvGetDisinheritPriorityAfterTimeout>
 800e85e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e862:	689b      	ldr	r3, [r3, #8]
 800e864:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e866:	4618      	mov	r0, r3
 800e868:	f001 f9d0 	bl	800fc0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e86c:	f001 ff76 	bl	801075c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e870:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e872:	4618      	mov	r0, r3
 800e874:	3738      	adds	r7, #56	@ 0x38
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	e000ed04 	.word	0xe000ed04

0800e880 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b08e      	sub	sp, #56	@ 0x38
 800e884:	af00      	add	r7, sp, #0
 800e886:	60f8      	str	r0, [r7, #12]
 800e888:	60b9      	str	r1, [r7, #8]
 800e88a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e892:	2b00      	cmp	r3, #0
 800e894:	d10b      	bne.n	800e8ae <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800e896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e89a:	f383 8811 	msr	BASEPRI, r3
 800e89e:	f3bf 8f6f 	isb	sy
 800e8a2:	f3bf 8f4f 	dsb	sy
 800e8a6:	623b      	str	r3, [r7, #32]
}
 800e8a8:	bf00      	nop
 800e8aa:	bf00      	nop
 800e8ac:	e7fd      	b.n	800e8aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d103      	bne.n	800e8bc <xQueueReceiveFromISR+0x3c>
 800e8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d101      	bne.n	800e8c0 <xQueueReceiveFromISR+0x40>
 800e8bc:	2301      	movs	r3, #1
 800e8be:	e000      	b.n	800e8c2 <xQueueReceiveFromISR+0x42>
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d10b      	bne.n	800e8de <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800e8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ca:	f383 8811 	msr	BASEPRI, r3
 800e8ce:	f3bf 8f6f 	isb	sy
 800e8d2:	f3bf 8f4f 	dsb	sy
 800e8d6:	61fb      	str	r3, [r7, #28]
}
 800e8d8:	bf00      	nop
 800e8da:	bf00      	nop
 800e8dc:	e7fd      	b.n	800e8da <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e8de:	f001 ffeb 	bl	80108b8 <vPortValidateInterruptPriority>
	__asm volatile
 800e8e2:	f3ef 8211 	mrs	r2, BASEPRI
 800e8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ea:	f383 8811 	msr	BASEPRI, r3
 800e8ee:	f3bf 8f6f 	isb	sy
 800e8f2:	f3bf 8f4f 	dsb	sy
 800e8f6:	61ba      	str	r2, [r7, #24]
 800e8f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e8fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e8fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e902:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e906:	2b00      	cmp	r3, #0
 800e908:	d02f      	beq.n	800e96a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e90c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e910:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e914:	68b9      	ldr	r1, [r7, #8]
 800e916:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e918:	f000 f8da 	bl	800ead0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e91e:	1e5a      	subs	r2, r3, #1
 800e920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e922:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e924:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e92c:	d112      	bne.n	800e954 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e930:	691b      	ldr	r3, [r3, #16]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d016      	beq.n	800e964 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e938:	3310      	adds	r3, #16
 800e93a:	4618      	mov	r0, r3
 800e93c:	f000 fe9a 	bl	800f674 <xTaskRemoveFromEventList>
 800e940:	4603      	mov	r3, r0
 800e942:	2b00      	cmp	r3, #0
 800e944:	d00e      	beq.n	800e964 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d00b      	beq.n	800e964 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2201      	movs	r2, #1
 800e950:	601a      	str	r2, [r3, #0]
 800e952:	e007      	b.n	800e964 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e958:	3301      	adds	r3, #1
 800e95a:	b2db      	uxtb	r3, r3
 800e95c:	b25a      	sxtb	r2, r3
 800e95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e964:	2301      	movs	r3, #1
 800e966:	637b      	str	r3, [r7, #52]	@ 0x34
 800e968:	e001      	b.n	800e96e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800e96a:	2300      	movs	r3, #0
 800e96c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e970:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	f383 8811 	msr	BASEPRI, r3
}
 800e978:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e97a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	3738      	adds	r7, #56	@ 0x38
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}

0800e984 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d10b      	bne.n	800e9ae <vQueueDelete+0x2a>
	__asm volatile
 800e996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e99a:	f383 8811 	msr	BASEPRI, r3
 800e99e:	f3bf 8f6f 	isb	sy
 800e9a2:	f3bf 8f4f 	dsb	sy
 800e9a6:	60bb      	str	r3, [r7, #8]
}
 800e9a8:	bf00      	nop
 800e9aa:	bf00      	nop
 800e9ac:	e7fd      	b.n	800e9aa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e9ae:	68f8      	ldr	r0, [r7, #12]
 800e9b0:	f000 f95e 	bl	800ec70 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d102      	bne.n	800e9c4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800e9be:	68f8      	ldr	r0, [r7, #12]
 800e9c0:	f002 f88a 	bl	8010ad8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e9c4:	bf00      	nop
 800e9c6:	3710      	adds	r7, #16
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b085      	sub	sp, #20
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d006      	beq.n	800e9ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800e9e6:	60fb      	str	r3, [r7, #12]
 800e9e8:	e001      	b.n	800e9ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
	}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3714      	adds	r7, #20
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b086      	sub	sp, #24
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	60f8      	str	r0, [r7, #12]
 800ea04:	60b9      	str	r1, [r7, #8]
 800ea06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d10d      	bne.n	800ea36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d14d      	bne.n	800eabe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	689b      	ldr	r3, [r3, #8]
 800ea26:	4618      	mov	r0, r3
 800ea28:	f001 f880 	bl	800fb2c <xTaskPriorityDisinherit>
 800ea2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2200      	movs	r2, #0
 800ea32:	609a      	str	r2, [r3, #8]
 800ea34:	e043      	b.n	800eabe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d119      	bne.n	800ea70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	6858      	ldr	r0, [r3, #4]
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea44:	461a      	mov	r2, r3
 800ea46:	68b9      	ldr	r1, [r7, #8]
 800ea48:	f00c fee7 	bl	801b81a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	685a      	ldr	r2, [r3, #4]
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea54:	441a      	add	r2, r3
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	685a      	ldr	r2, [r3, #4]
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	689b      	ldr	r3, [r3, #8]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d32b      	bcc.n	800eabe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	605a      	str	r2, [r3, #4]
 800ea6e:	e026      	b.n	800eabe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	68d8      	ldr	r0, [r3, #12]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea78:	461a      	mov	r2, r3
 800ea7a:	68b9      	ldr	r1, [r7, #8]
 800ea7c:	f00c fecd 	bl	801b81a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	68da      	ldr	r2, [r3, #12]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea88:	425b      	negs	r3, r3
 800ea8a:	441a      	add	r2, r3
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	68da      	ldr	r2, [r3, #12]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d207      	bcs.n	800eaac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	689a      	ldr	r2, [r3, #8]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eaa4:	425b      	negs	r3, r3
 800eaa6:	441a      	add	r2, r3
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2b02      	cmp	r3, #2
 800eab0:	d105      	bne.n	800eabe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d002      	beq.n	800eabe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	3b01      	subs	r3, #1
 800eabc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	1c5a      	adds	r2, r3, #1
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800eac6:	697b      	ldr	r3, [r7, #20]
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3718      	adds	r7, #24
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d018      	beq.n	800eb14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	68da      	ldr	r2, [r3, #12]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eaea:	441a      	add	r2, r3
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	68da      	ldr	r2, [r3, #12]
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	689b      	ldr	r3, [r3, #8]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d303      	bcc.n	800eb04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	68d9      	ldr	r1, [r3, #12]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	6838      	ldr	r0, [r7, #0]
 800eb10:	f00c fe83 	bl	801b81a <memcpy>
	}
}
 800eb14:	bf00      	nop
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eb24:	f001 fde8 	bl	80106f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eb2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eb30:	e011      	b.n	800eb56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d012      	beq.n	800eb60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	3324      	adds	r3, #36	@ 0x24
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f000 fd98 	bl	800f674 <xTaskRemoveFromEventList>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d001      	beq.n	800eb4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eb4a:	f000 fe71 	bl	800f830 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800eb4e:	7bfb      	ldrb	r3, [r7, #15]
 800eb50:	3b01      	subs	r3, #1
 800eb52:	b2db      	uxtb	r3, r3
 800eb54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eb56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	dce9      	bgt.n	800eb32 <prvUnlockQueue+0x16>
 800eb5e:	e000      	b.n	800eb62 <prvUnlockQueue+0x46>
					break;
 800eb60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	22ff      	movs	r2, #255	@ 0xff
 800eb66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800eb6a:	f001 fdf7 	bl	801075c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eb6e:	f001 fdc3 	bl	80106f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eb7a:	e011      	b.n	800eba0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	691b      	ldr	r3, [r3, #16]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d012      	beq.n	800ebaa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	3310      	adds	r3, #16
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f000 fd73 	bl	800f674 <xTaskRemoveFromEventList>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d001      	beq.n	800eb98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800eb94:	f000 fe4c 	bl	800f830 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800eb98:	7bbb      	ldrb	r3, [r7, #14]
 800eb9a:	3b01      	subs	r3, #1
 800eb9c:	b2db      	uxtb	r3, r3
 800eb9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	dce9      	bgt.n	800eb7c <prvUnlockQueue+0x60>
 800eba8:	e000      	b.n	800ebac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ebaa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	22ff      	movs	r2, #255	@ 0xff
 800ebb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ebb4:	f001 fdd2 	bl	801075c <vPortExitCritical>
}
 800ebb8:	bf00      	nop
 800ebba:	3710      	adds	r7, #16
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b084      	sub	sp, #16
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ebc8:	f001 fd96 	bl	80106f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d102      	bne.n	800ebda <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	60fb      	str	r3, [r7, #12]
 800ebd8:	e001      	b.n	800ebde <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ebde:	f001 fdbd 	bl	801075c <vPortExitCritical>

	return xReturn;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3710      	adds	r7, #16
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}

0800ebec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b084      	sub	sp, #16
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ebf4:	f001 fd80 	bl	80106f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d102      	bne.n	800ec0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ec04:	2301      	movs	r3, #1
 800ec06:	60fb      	str	r3, [r7, #12]
 800ec08:	e001      	b.n	800ec0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ec0e:	f001 fda5 	bl	801075c <vPortExitCritical>

	return xReturn;
 800ec12:	68fb      	ldr	r3, [r7, #12]
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3710      	adds	r7, #16
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b085      	sub	sp, #20
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec26:	2300      	movs	r3, #0
 800ec28:	60fb      	str	r3, [r7, #12]
 800ec2a:	e014      	b.n	800ec56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ec2c:	4a0f      	ldr	r2, [pc, #60]	@ (800ec6c <vQueueAddToRegistry+0x50>)
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d10b      	bne.n	800ec50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ec38:	490c      	ldr	r1, [pc, #48]	@ (800ec6c <vQueueAddToRegistry+0x50>)
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	683a      	ldr	r2, [r7, #0]
 800ec3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ec42:	4a0a      	ldr	r2, [pc, #40]	@ (800ec6c <vQueueAddToRegistry+0x50>)
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	00db      	lsls	r3, r3, #3
 800ec48:	4413      	add	r3, r2
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ec4e:	e006      	b.n	800ec5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	3301      	adds	r3, #1
 800ec54:	60fb      	str	r3, [r7, #12]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2b07      	cmp	r3, #7
 800ec5a:	d9e7      	bls.n	800ec2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ec5c:	bf00      	nop
 800ec5e:	bf00      	nop
 800ec60:	3714      	adds	r7, #20
 800ec62:	46bd      	mov	sp, r7
 800ec64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec68:	4770      	bx	lr
 800ec6a:	bf00      	nop
 800ec6c:	24000de8 	.word	0x24000de8

0800ec70 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ec70:	b480      	push	{r7}
 800ec72:	b085      	sub	sp, #20
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec78:	2300      	movs	r3, #0
 800ec7a:	60fb      	str	r3, [r7, #12]
 800ec7c:	e016      	b.n	800ecac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ec7e:	4a10      	ldr	r2, [pc, #64]	@ (800ecc0 <vQueueUnregisterQueue+0x50>)
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	00db      	lsls	r3, r3, #3
 800ec84:	4413      	add	r3, r2
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	687a      	ldr	r2, [r7, #4]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d10b      	bne.n	800eca6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ec8e:	4a0c      	ldr	r2, [pc, #48]	@ (800ecc0 <vQueueUnregisterQueue+0x50>)
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2100      	movs	r1, #0
 800ec94:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ec98:	4a09      	ldr	r2, [pc, #36]	@ (800ecc0 <vQueueUnregisterQueue+0x50>)
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	00db      	lsls	r3, r3, #3
 800ec9e:	4413      	add	r3, r2
 800eca0:	2200      	movs	r2, #0
 800eca2:	605a      	str	r2, [r3, #4]
				break;
 800eca4:	e006      	b.n	800ecb4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	3301      	adds	r3, #1
 800ecaa:	60fb      	str	r3, [r7, #12]
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	2b07      	cmp	r3, #7
 800ecb0:	d9e5      	bls.n	800ec7e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ecb2:	bf00      	nop
 800ecb4:	bf00      	nop
 800ecb6:	3714      	adds	r7, #20
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr
 800ecc0:	24000de8 	.word	0x24000de8

0800ecc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b086      	sub	sp, #24
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	60b9      	str	r1, [r7, #8]
 800ecce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ecd4:	f001 fd10 	bl	80106f8 <vPortEnterCritical>
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ecde:	b25b      	sxtb	r3, r3
 800ece0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ece4:	d103      	bne.n	800ecee <vQueueWaitForMessageRestricted+0x2a>
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	2200      	movs	r2, #0
 800ecea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ecf4:	b25b      	sxtb	r3, r3
 800ecf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecfa:	d103      	bne.n	800ed04 <vQueueWaitForMessageRestricted+0x40>
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ed04:	f001 fd2a 	bl	801075c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d106      	bne.n	800ed1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	3324      	adds	r3, #36	@ 0x24
 800ed14:	687a      	ldr	r2, [r7, #4]
 800ed16:	68b9      	ldr	r1, [r7, #8]
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f000 fc7f 	bl	800f61c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ed1e:	6978      	ldr	r0, [r7, #20]
 800ed20:	f7ff fefc 	bl	800eb1c <prvUnlockQueue>
	}
 800ed24:	bf00      	nop
 800ed26:	3718      	adds	r7, #24
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b08e      	sub	sp, #56	@ 0x38
 800ed30:	af04      	add	r7, sp, #16
 800ed32:	60f8      	str	r0, [r7, #12]
 800ed34:	60b9      	str	r1, [r7, #8]
 800ed36:	607a      	str	r2, [r7, #4]
 800ed38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ed3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d10b      	bne.n	800ed58 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ed40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed44:	f383 8811 	msr	BASEPRI, r3
 800ed48:	f3bf 8f6f 	isb	sy
 800ed4c:	f3bf 8f4f 	dsb	sy
 800ed50:	623b      	str	r3, [r7, #32]
}
 800ed52:	bf00      	nop
 800ed54:	bf00      	nop
 800ed56:	e7fd      	b.n	800ed54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ed58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d10b      	bne.n	800ed76 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ed5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed62:	f383 8811 	msr	BASEPRI, r3
 800ed66:	f3bf 8f6f 	isb	sy
 800ed6a:	f3bf 8f4f 	dsb	sy
 800ed6e:	61fb      	str	r3, [r7, #28]
}
 800ed70:	bf00      	nop
 800ed72:	bf00      	nop
 800ed74:	e7fd      	b.n	800ed72 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ed76:	23a8      	movs	r3, #168	@ 0xa8
 800ed78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	2ba8      	cmp	r3, #168	@ 0xa8
 800ed7e:	d00b      	beq.n	800ed98 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ed80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed84:	f383 8811 	msr	BASEPRI, r3
 800ed88:	f3bf 8f6f 	isb	sy
 800ed8c:	f3bf 8f4f 	dsb	sy
 800ed90:	61bb      	str	r3, [r7, #24]
}
 800ed92:	bf00      	nop
 800ed94:	bf00      	nop
 800ed96:	e7fd      	b.n	800ed94 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ed98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ed9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d01e      	beq.n	800edde <xTaskCreateStatic+0xb2>
 800eda0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d01b      	beq.n	800edde <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eda6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eda8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800edaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800edae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800edb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edb2:	2202      	movs	r2, #2
 800edb4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800edb8:	2300      	movs	r3, #0
 800edba:	9303      	str	r3, [sp, #12]
 800edbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edbe:	9302      	str	r3, [sp, #8]
 800edc0:	f107 0314 	add.w	r3, r7, #20
 800edc4:	9301      	str	r3, [sp, #4]
 800edc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edc8:	9300      	str	r3, [sp, #0]
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	68b9      	ldr	r1, [r7, #8]
 800edd0:	68f8      	ldr	r0, [r7, #12]
 800edd2:	f000 f851 	bl	800ee78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800edd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800edd8:	f000 f8f6 	bl	800efc8 <prvAddNewTaskToReadyList>
 800eddc:	e001      	b.n	800ede2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800edde:	2300      	movs	r3, #0
 800ede0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ede2:	697b      	ldr	r3, [r7, #20]
	}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3728      	adds	r7, #40	@ 0x28
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800edec:	b580      	push	{r7, lr}
 800edee:	b08c      	sub	sp, #48	@ 0x30
 800edf0:	af04      	add	r7, sp, #16
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	603b      	str	r3, [r7, #0]
 800edf8:	4613      	mov	r3, r2
 800edfa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800edfc:	88fb      	ldrh	r3, [r7, #6]
 800edfe:	009b      	lsls	r3, r3, #2
 800ee00:	4618      	mov	r0, r3
 800ee02:	f001 fd9b 	bl	801093c <pvPortMalloc>
 800ee06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d00e      	beq.n	800ee2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ee0e:	20a8      	movs	r0, #168	@ 0xa8
 800ee10:	f001 fd94 	bl	801093c <pvPortMalloc>
 800ee14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ee16:	69fb      	ldr	r3, [r7, #28]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d003      	beq.n	800ee24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	697a      	ldr	r2, [r7, #20]
 800ee20:	631a      	str	r2, [r3, #48]	@ 0x30
 800ee22:	e005      	b.n	800ee30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ee24:	6978      	ldr	r0, [r7, #20]
 800ee26:	f001 fe57 	bl	8010ad8 <vPortFree>
 800ee2a:	e001      	b.n	800ee30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ee30:	69fb      	ldr	r3, [r7, #28]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d017      	beq.n	800ee66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ee36:	69fb      	ldr	r3, [r7, #28]
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ee3e:	88fa      	ldrh	r2, [r7, #6]
 800ee40:	2300      	movs	r3, #0
 800ee42:	9303      	str	r3, [sp, #12]
 800ee44:	69fb      	ldr	r3, [r7, #28]
 800ee46:	9302      	str	r3, [sp, #8]
 800ee48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee4a:	9301      	str	r3, [sp, #4]
 800ee4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee4e:	9300      	str	r3, [sp, #0]
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	68b9      	ldr	r1, [r7, #8]
 800ee54:	68f8      	ldr	r0, [r7, #12]
 800ee56:	f000 f80f 	bl	800ee78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ee5a:	69f8      	ldr	r0, [r7, #28]
 800ee5c:	f000 f8b4 	bl	800efc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ee60:	2301      	movs	r3, #1
 800ee62:	61bb      	str	r3, [r7, #24]
 800ee64:	e002      	b.n	800ee6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ee66:	f04f 33ff 	mov.w	r3, #4294967295
 800ee6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ee6c:	69bb      	ldr	r3, [r7, #24]
	}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3720      	adds	r7, #32
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
	...

0800ee78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b088      	sub	sp, #32
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
 800ee84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ee86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee88:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	009b      	lsls	r3, r3, #2
 800ee8e:	461a      	mov	r2, r3
 800ee90:	21a5      	movs	r1, #165	@ 0xa5
 800ee92:	f00c fbd9 	bl	801b648 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ee96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ee9a:	6879      	ldr	r1, [r7, #4]
 800ee9c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800eea0:	440b      	add	r3, r1
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	4413      	add	r3, r2
 800eea6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eea8:	69bb      	ldr	r3, [r7, #24]
 800eeaa:	f023 0307 	bic.w	r3, r3, #7
 800eeae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	f003 0307 	and.w	r3, r3, #7
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d00b      	beq.n	800eed2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800eeba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eebe:	f383 8811 	msr	BASEPRI, r3
 800eec2:	f3bf 8f6f 	isb	sy
 800eec6:	f3bf 8f4f 	dsb	sy
 800eeca:	617b      	str	r3, [r7, #20]
}
 800eecc:	bf00      	nop
 800eece:	bf00      	nop
 800eed0:	e7fd      	b.n	800eece <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d01f      	beq.n	800ef18 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eed8:	2300      	movs	r3, #0
 800eeda:	61fb      	str	r3, [r7, #28]
 800eedc:	e012      	b.n	800ef04 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800eede:	68ba      	ldr	r2, [r7, #8]
 800eee0:	69fb      	ldr	r3, [r7, #28]
 800eee2:	4413      	add	r3, r2
 800eee4:	7819      	ldrb	r1, [r3, #0]
 800eee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eee8:	69fb      	ldr	r3, [r7, #28]
 800eeea:	4413      	add	r3, r2
 800eeec:	3334      	adds	r3, #52	@ 0x34
 800eeee:	460a      	mov	r2, r1
 800eef0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800eef2:	68ba      	ldr	r2, [r7, #8]
 800eef4:	69fb      	ldr	r3, [r7, #28]
 800eef6:	4413      	add	r3, r2
 800eef8:	781b      	ldrb	r3, [r3, #0]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d006      	beq.n	800ef0c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eefe:	69fb      	ldr	r3, [r7, #28]
 800ef00:	3301      	adds	r3, #1
 800ef02:	61fb      	str	r3, [r7, #28]
 800ef04:	69fb      	ldr	r3, [r7, #28]
 800ef06:	2b0f      	cmp	r3, #15
 800ef08:	d9e9      	bls.n	800eede <prvInitialiseNewTask+0x66>
 800ef0a:	e000      	b.n	800ef0e <prvInitialiseNewTask+0x96>
			{
				break;
 800ef0c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ef0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef10:	2200      	movs	r2, #0
 800ef12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ef16:	e003      	b.n	800ef20 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ef18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ef20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef22:	2b37      	cmp	r3, #55	@ 0x37
 800ef24:	d901      	bls.n	800ef2a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ef26:	2337      	movs	r3, #55	@ 0x37
 800ef28:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ef2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef2e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ef30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef34:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ef36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef38:	2200      	movs	r2, #0
 800ef3a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ef3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef3e:	3304      	adds	r3, #4
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7fe fd7b 	bl	800da3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ef46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef48:	3318      	adds	r3, #24
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fe fd76 	bl	800da3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ef50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef54:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef58:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ef5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef5e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ef60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef64:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ef66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef68:	2200      	movs	r2, #0
 800ef6a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ef6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef70:	2200      	movs	r2, #0
 800ef72:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ef76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef78:	3354      	adds	r3, #84	@ 0x54
 800ef7a:	224c      	movs	r2, #76	@ 0x4c
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f00c fb62 	bl	801b648 <memset>
 800ef84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef86:	4a0d      	ldr	r2, [pc, #52]	@ (800efbc <prvInitialiseNewTask+0x144>)
 800ef88:	659a      	str	r2, [r3, #88]	@ 0x58
 800ef8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef8c:	4a0c      	ldr	r2, [pc, #48]	@ (800efc0 <prvInitialiseNewTask+0x148>)
 800ef8e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ef90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef92:	4a0c      	ldr	r2, [pc, #48]	@ (800efc4 <prvInitialiseNewTask+0x14c>)
 800ef94:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ef96:	683a      	ldr	r2, [r7, #0]
 800ef98:	68f9      	ldr	r1, [r7, #12]
 800ef9a:	69b8      	ldr	r0, [r7, #24]
 800ef9c:	f001 fa7c 	bl	8010498 <pxPortInitialiseStack>
 800efa0:	4602      	mov	r2, r0
 800efa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efa4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800efa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d002      	beq.n	800efb2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800efac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800efb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800efb2:	bf00      	nop
 800efb4:	3720      	adds	r7, #32
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop
 800efbc:	240082f4 	.word	0x240082f4
 800efc0:	2400835c 	.word	0x2400835c
 800efc4:	240083c4 	.word	0x240083c4

0800efc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800efd0:	f001 fb92 	bl	80106f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800efd4:	4b2d      	ldr	r3, [pc, #180]	@ (800f08c <prvAddNewTaskToReadyList+0xc4>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	3301      	adds	r3, #1
 800efda:	4a2c      	ldr	r2, [pc, #176]	@ (800f08c <prvAddNewTaskToReadyList+0xc4>)
 800efdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800efde:	4b2c      	ldr	r3, [pc, #176]	@ (800f090 <prvAddNewTaskToReadyList+0xc8>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d109      	bne.n	800effa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800efe6:	4a2a      	ldr	r2, [pc, #168]	@ (800f090 <prvAddNewTaskToReadyList+0xc8>)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800efec:	4b27      	ldr	r3, [pc, #156]	@ (800f08c <prvAddNewTaskToReadyList+0xc4>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d110      	bne.n	800f016 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eff4:	f000 fc40 	bl	800f878 <prvInitialiseTaskLists>
 800eff8:	e00d      	b.n	800f016 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800effa:	4b26      	ldr	r3, [pc, #152]	@ (800f094 <prvAddNewTaskToReadyList+0xcc>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d109      	bne.n	800f016 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f002:	4b23      	ldr	r3, [pc, #140]	@ (800f090 <prvAddNewTaskToReadyList+0xc8>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d802      	bhi.n	800f016 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f010:	4a1f      	ldr	r2, [pc, #124]	@ (800f090 <prvAddNewTaskToReadyList+0xc8>)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f016:	4b20      	ldr	r3, [pc, #128]	@ (800f098 <prvAddNewTaskToReadyList+0xd0>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	3301      	adds	r3, #1
 800f01c:	4a1e      	ldr	r2, [pc, #120]	@ (800f098 <prvAddNewTaskToReadyList+0xd0>)
 800f01e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f020:	4b1d      	ldr	r3, [pc, #116]	@ (800f098 <prvAddNewTaskToReadyList+0xd0>)
 800f022:	681a      	ldr	r2, [r3, #0]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f02c:	4b1b      	ldr	r3, [pc, #108]	@ (800f09c <prvAddNewTaskToReadyList+0xd4>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	429a      	cmp	r2, r3
 800f032:	d903      	bls.n	800f03c <prvAddNewTaskToReadyList+0x74>
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f038:	4a18      	ldr	r2, [pc, #96]	@ (800f09c <prvAddNewTaskToReadyList+0xd4>)
 800f03a:	6013      	str	r3, [r2, #0]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f040:	4613      	mov	r3, r2
 800f042:	009b      	lsls	r3, r3, #2
 800f044:	4413      	add	r3, r2
 800f046:	009b      	lsls	r3, r3, #2
 800f048:	4a15      	ldr	r2, [pc, #84]	@ (800f0a0 <prvAddNewTaskToReadyList+0xd8>)
 800f04a:	441a      	add	r2, r3
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	3304      	adds	r3, #4
 800f050:	4619      	mov	r1, r3
 800f052:	4610      	mov	r0, r2
 800f054:	f7fe fcff 	bl	800da56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f058:	f001 fb80 	bl	801075c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f05c:	4b0d      	ldr	r3, [pc, #52]	@ (800f094 <prvAddNewTaskToReadyList+0xcc>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d00e      	beq.n	800f082 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f064:	4b0a      	ldr	r3, [pc, #40]	@ (800f090 <prvAddNewTaskToReadyList+0xc8>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f06e:	429a      	cmp	r2, r3
 800f070:	d207      	bcs.n	800f082 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f072:	4b0c      	ldr	r3, [pc, #48]	@ (800f0a4 <prvAddNewTaskToReadyList+0xdc>)
 800f074:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f078:	601a      	str	r2, [r3, #0]
 800f07a:	f3bf 8f4f 	dsb	sy
 800f07e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f082:	bf00      	nop
 800f084:	3708      	adds	r7, #8
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	240012fc 	.word	0x240012fc
 800f090:	24000e28 	.word	0x24000e28
 800f094:	24001308 	.word	0x24001308
 800f098:	24001318 	.word	0x24001318
 800f09c:	24001304 	.word	0x24001304
 800f0a0:	24000e2c 	.word	0x24000e2c
 800f0a4:	e000ed04 	.word	0xe000ed04

0800f0a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d018      	beq.n	800f0ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f0ba:	4b14      	ldr	r3, [pc, #80]	@ (800f10c <vTaskDelay+0x64>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00b      	beq.n	800f0da <vTaskDelay+0x32>
	__asm volatile
 800f0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0c6:	f383 8811 	msr	BASEPRI, r3
 800f0ca:	f3bf 8f6f 	isb	sy
 800f0ce:	f3bf 8f4f 	dsb	sy
 800f0d2:	60bb      	str	r3, [r7, #8]
}
 800f0d4:	bf00      	nop
 800f0d6:	bf00      	nop
 800f0d8:	e7fd      	b.n	800f0d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f0da:	f000 f88b 	bl	800f1f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f0de:	2100      	movs	r1, #0
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f000 fe2b 	bl	800fd3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f0e6:	f000 f893 	bl	800f210 <xTaskResumeAll>
 800f0ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d107      	bne.n	800f102 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f0f2:	4b07      	ldr	r3, [pc, #28]	@ (800f110 <vTaskDelay+0x68>)
 800f0f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0f8:	601a      	str	r2, [r3, #0]
 800f0fa:	f3bf 8f4f 	dsb	sy
 800f0fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f102:	bf00      	nop
 800f104:	3710      	adds	r7, #16
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}
 800f10a:	bf00      	nop
 800f10c:	24001324 	.word	0x24001324
 800f110:	e000ed04 	.word	0xe000ed04

0800f114 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b08a      	sub	sp, #40	@ 0x28
 800f118:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f11a:	2300      	movs	r3, #0
 800f11c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f11e:	2300      	movs	r3, #0
 800f120:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f122:	463a      	mov	r2, r7
 800f124:	1d39      	adds	r1, r7, #4
 800f126:	f107 0308 	add.w	r3, r7, #8
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7fe fc32 	bl	800d994 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f130:	6839      	ldr	r1, [r7, #0]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	68ba      	ldr	r2, [r7, #8]
 800f136:	9202      	str	r2, [sp, #8]
 800f138:	9301      	str	r3, [sp, #4]
 800f13a:	2300      	movs	r3, #0
 800f13c:	9300      	str	r3, [sp, #0]
 800f13e:	2300      	movs	r3, #0
 800f140:	460a      	mov	r2, r1
 800f142:	4924      	ldr	r1, [pc, #144]	@ (800f1d4 <vTaskStartScheduler+0xc0>)
 800f144:	4824      	ldr	r0, [pc, #144]	@ (800f1d8 <vTaskStartScheduler+0xc4>)
 800f146:	f7ff fdf1 	bl	800ed2c <xTaskCreateStatic>
 800f14a:	4603      	mov	r3, r0
 800f14c:	4a23      	ldr	r2, [pc, #140]	@ (800f1dc <vTaskStartScheduler+0xc8>)
 800f14e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f150:	4b22      	ldr	r3, [pc, #136]	@ (800f1dc <vTaskStartScheduler+0xc8>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d002      	beq.n	800f15e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f158:	2301      	movs	r3, #1
 800f15a:	617b      	str	r3, [r7, #20]
 800f15c:	e001      	b.n	800f162 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f15e:	2300      	movs	r3, #0
 800f160:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	2b01      	cmp	r3, #1
 800f166:	d102      	bne.n	800f16e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f168:	f000 fe3c 	bl	800fde4 <xTimerCreateTimerTask>
 800f16c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	2b01      	cmp	r3, #1
 800f172:	d11b      	bne.n	800f1ac <vTaskStartScheduler+0x98>
	__asm volatile
 800f174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f178:	f383 8811 	msr	BASEPRI, r3
 800f17c:	f3bf 8f6f 	isb	sy
 800f180:	f3bf 8f4f 	dsb	sy
 800f184:	613b      	str	r3, [r7, #16]
}
 800f186:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f188:	4b15      	ldr	r3, [pc, #84]	@ (800f1e0 <vTaskStartScheduler+0xcc>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	3354      	adds	r3, #84	@ 0x54
 800f18e:	4a15      	ldr	r2, [pc, #84]	@ (800f1e4 <vTaskStartScheduler+0xd0>)
 800f190:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f192:	4b15      	ldr	r3, [pc, #84]	@ (800f1e8 <vTaskStartScheduler+0xd4>)
 800f194:	f04f 32ff 	mov.w	r2, #4294967295
 800f198:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f19a:	4b14      	ldr	r3, [pc, #80]	@ (800f1ec <vTaskStartScheduler+0xd8>)
 800f19c:	2201      	movs	r2, #1
 800f19e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f1a0:	4b13      	ldr	r3, [pc, #76]	@ (800f1f0 <vTaskStartScheduler+0xdc>)
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f1a6:	f001 fa03 	bl	80105b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f1aa:	e00f      	b.n	800f1cc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1b2:	d10b      	bne.n	800f1cc <vTaskStartScheduler+0xb8>
	__asm volatile
 800f1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1b8:	f383 8811 	msr	BASEPRI, r3
 800f1bc:	f3bf 8f6f 	isb	sy
 800f1c0:	f3bf 8f4f 	dsb	sy
 800f1c4:	60fb      	str	r3, [r7, #12]
}
 800f1c6:	bf00      	nop
 800f1c8:	bf00      	nop
 800f1ca:	e7fd      	b.n	800f1c8 <vTaskStartScheduler+0xb4>
}
 800f1cc:	bf00      	nop
 800f1ce:	3718      	adds	r7, #24
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	0801c7fc 	.word	0x0801c7fc
 800f1d8:	0800f849 	.word	0x0800f849
 800f1dc:	24001320 	.word	0x24001320
 800f1e0:	24000e28 	.word	0x24000e28
 800f1e4:	24000040 	.word	0x24000040
 800f1e8:	2400131c 	.word	0x2400131c
 800f1ec:	24001308 	.word	0x24001308
 800f1f0:	24001300 	.word	0x24001300

0800f1f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f1f8:	4b04      	ldr	r3, [pc, #16]	@ (800f20c <vTaskSuspendAll+0x18>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	4a03      	ldr	r2, [pc, #12]	@ (800f20c <vTaskSuspendAll+0x18>)
 800f200:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f202:	bf00      	nop
 800f204:	46bd      	mov	sp, r7
 800f206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20a:	4770      	bx	lr
 800f20c:	24001324 	.word	0x24001324

0800f210 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b084      	sub	sp, #16
 800f214:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f216:	2300      	movs	r3, #0
 800f218:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f21a:	2300      	movs	r3, #0
 800f21c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f21e:	4b42      	ldr	r3, [pc, #264]	@ (800f328 <xTaskResumeAll+0x118>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d10b      	bne.n	800f23e <xTaskResumeAll+0x2e>
	__asm volatile
 800f226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f22a:	f383 8811 	msr	BASEPRI, r3
 800f22e:	f3bf 8f6f 	isb	sy
 800f232:	f3bf 8f4f 	dsb	sy
 800f236:	603b      	str	r3, [r7, #0]
}
 800f238:	bf00      	nop
 800f23a:	bf00      	nop
 800f23c:	e7fd      	b.n	800f23a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f23e:	f001 fa5b 	bl	80106f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f242:	4b39      	ldr	r3, [pc, #228]	@ (800f328 <xTaskResumeAll+0x118>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	3b01      	subs	r3, #1
 800f248:	4a37      	ldr	r2, [pc, #220]	@ (800f328 <xTaskResumeAll+0x118>)
 800f24a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f24c:	4b36      	ldr	r3, [pc, #216]	@ (800f328 <xTaskResumeAll+0x118>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d162      	bne.n	800f31a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f254:	4b35      	ldr	r3, [pc, #212]	@ (800f32c <xTaskResumeAll+0x11c>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d05e      	beq.n	800f31a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f25c:	e02f      	b.n	800f2be <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f25e:	4b34      	ldr	r3, [pc, #208]	@ (800f330 <xTaskResumeAll+0x120>)
 800f260:	68db      	ldr	r3, [r3, #12]
 800f262:	68db      	ldr	r3, [r3, #12]
 800f264:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	3318      	adds	r3, #24
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7fe fc50 	bl	800db10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	3304      	adds	r3, #4
 800f274:	4618      	mov	r0, r3
 800f276:	f7fe fc4b 	bl	800db10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f27e:	4b2d      	ldr	r3, [pc, #180]	@ (800f334 <xTaskResumeAll+0x124>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	429a      	cmp	r2, r3
 800f284:	d903      	bls.n	800f28e <xTaskResumeAll+0x7e>
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f28a:	4a2a      	ldr	r2, [pc, #168]	@ (800f334 <xTaskResumeAll+0x124>)
 800f28c:	6013      	str	r3, [r2, #0]
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f292:	4613      	mov	r3, r2
 800f294:	009b      	lsls	r3, r3, #2
 800f296:	4413      	add	r3, r2
 800f298:	009b      	lsls	r3, r3, #2
 800f29a:	4a27      	ldr	r2, [pc, #156]	@ (800f338 <xTaskResumeAll+0x128>)
 800f29c:	441a      	add	r2, r3
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	3304      	adds	r3, #4
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	4610      	mov	r0, r2
 800f2a6:	f7fe fbd6 	bl	800da56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2ae:	4b23      	ldr	r3, [pc, #140]	@ (800f33c <xTaskResumeAll+0x12c>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d302      	bcc.n	800f2be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f2b8:	4b21      	ldr	r3, [pc, #132]	@ (800f340 <xTaskResumeAll+0x130>)
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f2be:	4b1c      	ldr	r3, [pc, #112]	@ (800f330 <xTaskResumeAll+0x120>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d1cb      	bne.n	800f25e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d001      	beq.n	800f2d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f2cc:	f000 fb78 	bl	800f9c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f2d0:	4b1c      	ldr	r3, [pc, #112]	@ (800f344 <xTaskResumeAll+0x134>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d010      	beq.n	800f2fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f2dc:	f000 f858 	bl	800f390 <xTaskIncrementTick>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d002      	beq.n	800f2ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f2e6:	4b16      	ldr	r3, [pc, #88]	@ (800f340 <xTaskResumeAll+0x130>)
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	3b01      	subs	r3, #1
 800f2f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d1f1      	bne.n	800f2dc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800f2f8:	4b12      	ldr	r3, [pc, #72]	@ (800f344 <xTaskResumeAll+0x134>)
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f2fe:	4b10      	ldr	r3, [pc, #64]	@ (800f340 <xTaskResumeAll+0x130>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d009      	beq.n	800f31a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f306:	2301      	movs	r3, #1
 800f308:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f30a:	4b0f      	ldr	r3, [pc, #60]	@ (800f348 <xTaskResumeAll+0x138>)
 800f30c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f310:	601a      	str	r2, [r3, #0]
 800f312:	f3bf 8f4f 	dsb	sy
 800f316:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f31a:	f001 fa1f 	bl	801075c <vPortExitCritical>

	return xAlreadyYielded;
 800f31e:	68bb      	ldr	r3, [r7, #8]
}
 800f320:	4618      	mov	r0, r3
 800f322:	3710      	adds	r7, #16
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}
 800f328:	24001324 	.word	0x24001324
 800f32c:	240012fc 	.word	0x240012fc
 800f330:	240012bc 	.word	0x240012bc
 800f334:	24001304 	.word	0x24001304
 800f338:	24000e2c 	.word	0x24000e2c
 800f33c:	24000e28 	.word	0x24000e28
 800f340:	24001310 	.word	0x24001310
 800f344:	2400130c 	.word	0x2400130c
 800f348:	e000ed04 	.word	0xe000ed04

0800f34c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f34c:	b480      	push	{r7}
 800f34e:	b083      	sub	sp, #12
 800f350:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f352:	4b05      	ldr	r3, [pc, #20]	@ (800f368 <xTaskGetTickCount+0x1c>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f358:	687b      	ldr	r3, [r7, #4]
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	370c      	adds	r7, #12
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr
 800f366:	bf00      	nop
 800f368:	24001300 	.word	0x24001300

0800f36c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b082      	sub	sp, #8
 800f370:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f372:	f001 faa1 	bl	80108b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f376:	2300      	movs	r3, #0
 800f378:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f37a:	4b04      	ldr	r3, [pc, #16]	@ (800f38c <xTaskGetTickCountFromISR+0x20>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f380:	683b      	ldr	r3, [r7, #0]
}
 800f382:	4618      	mov	r0, r3
 800f384:	3708      	adds	r7, #8
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	24001300 	.word	0x24001300

0800f390 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b086      	sub	sp, #24
 800f394:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f396:	2300      	movs	r3, #0
 800f398:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f39a:	4b4f      	ldr	r3, [pc, #316]	@ (800f4d8 <xTaskIncrementTick+0x148>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	f040 8090 	bne.w	800f4c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f3a4:	4b4d      	ldr	r3, [pc, #308]	@ (800f4dc <xTaskIncrementTick+0x14c>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f3ac:	4a4b      	ldr	r2, [pc, #300]	@ (800f4dc <xTaskIncrementTick+0x14c>)
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d121      	bne.n	800f3fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f3b8:	4b49      	ldr	r3, [pc, #292]	@ (800f4e0 <xTaskIncrementTick+0x150>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d00b      	beq.n	800f3da <xTaskIncrementTick+0x4a>
	__asm volatile
 800f3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3c6:	f383 8811 	msr	BASEPRI, r3
 800f3ca:	f3bf 8f6f 	isb	sy
 800f3ce:	f3bf 8f4f 	dsb	sy
 800f3d2:	603b      	str	r3, [r7, #0]
}
 800f3d4:	bf00      	nop
 800f3d6:	bf00      	nop
 800f3d8:	e7fd      	b.n	800f3d6 <xTaskIncrementTick+0x46>
 800f3da:	4b41      	ldr	r3, [pc, #260]	@ (800f4e0 <xTaskIncrementTick+0x150>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	60fb      	str	r3, [r7, #12]
 800f3e0:	4b40      	ldr	r3, [pc, #256]	@ (800f4e4 <xTaskIncrementTick+0x154>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	4a3e      	ldr	r2, [pc, #248]	@ (800f4e0 <xTaskIncrementTick+0x150>)
 800f3e6:	6013      	str	r3, [r2, #0]
 800f3e8:	4a3e      	ldr	r2, [pc, #248]	@ (800f4e4 <xTaskIncrementTick+0x154>)
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	6013      	str	r3, [r2, #0]
 800f3ee:	4b3e      	ldr	r3, [pc, #248]	@ (800f4e8 <xTaskIncrementTick+0x158>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	3301      	adds	r3, #1
 800f3f4:	4a3c      	ldr	r2, [pc, #240]	@ (800f4e8 <xTaskIncrementTick+0x158>)
 800f3f6:	6013      	str	r3, [r2, #0]
 800f3f8:	f000 fae2 	bl	800f9c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f3fc:	4b3b      	ldr	r3, [pc, #236]	@ (800f4ec <xTaskIncrementTick+0x15c>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	693a      	ldr	r2, [r7, #16]
 800f402:	429a      	cmp	r2, r3
 800f404:	d349      	bcc.n	800f49a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f406:	4b36      	ldr	r3, [pc, #216]	@ (800f4e0 <xTaskIncrementTick+0x150>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d104      	bne.n	800f41a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f410:	4b36      	ldr	r3, [pc, #216]	@ (800f4ec <xTaskIncrementTick+0x15c>)
 800f412:	f04f 32ff 	mov.w	r2, #4294967295
 800f416:	601a      	str	r2, [r3, #0]
					break;
 800f418:	e03f      	b.n	800f49a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f41a:	4b31      	ldr	r3, [pc, #196]	@ (800f4e0 <xTaskIncrementTick+0x150>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	68db      	ldr	r3, [r3, #12]
 800f422:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f42a:	693a      	ldr	r2, [r7, #16]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	429a      	cmp	r2, r3
 800f430:	d203      	bcs.n	800f43a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f432:	4a2e      	ldr	r2, [pc, #184]	@ (800f4ec <xTaskIncrementTick+0x15c>)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f438:	e02f      	b.n	800f49a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	3304      	adds	r3, #4
 800f43e:	4618      	mov	r0, r3
 800f440:	f7fe fb66 	bl	800db10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d004      	beq.n	800f456 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	3318      	adds	r3, #24
 800f450:	4618      	mov	r0, r3
 800f452:	f7fe fb5d 	bl	800db10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f45a:	4b25      	ldr	r3, [pc, #148]	@ (800f4f0 <xTaskIncrementTick+0x160>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d903      	bls.n	800f46a <xTaskIncrementTick+0xda>
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f466:	4a22      	ldr	r2, [pc, #136]	@ (800f4f0 <xTaskIncrementTick+0x160>)
 800f468:	6013      	str	r3, [r2, #0]
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f46e:	4613      	mov	r3, r2
 800f470:	009b      	lsls	r3, r3, #2
 800f472:	4413      	add	r3, r2
 800f474:	009b      	lsls	r3, r3, #2
 800f476:	4a1f      	ldr	r2, [pc, #124]	@ (800f4f4 <xTaskIncrementTick+0x164>)
 800f478:	441a      	add	r2, r3
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	3304      	adds	r3, #4
 800f47e:	4619      	mov	r1, r3
 800f480:	4610      	mov	r0, r2
 800f482:	f7fe fae8 	bl	800da56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f48a:	4b1b      	ldr	r3, [pc, #108]	@ (800f4f8 <xTaskIncrementTick+0x168>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f490:	429a      	cmp	r2, r3
 800f492:	d3b8      	bcc.n	800f406 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f494:	2301      	movs	r3, #1
 800f496:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f498:	e7b5      	b.n	800f406 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f49a:	4b17      	ldr	r3, [pc, #92]	@ (800f4f8 <xTaskIncrementTick+0x168>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4a0:	4914      	ldr	r1, [pc, #80]	@ (800f4f4 <xTaskIncrementTick+0x164>)
 800f4a2:	4613      	mov	r3, r2
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	4413      	add	r3, r2
 800f4a8:	009b      	lsls	r3, r3, #2
 800f4aa:	440b      	add	r3, r1
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2b01      	cmp	r3, #1
 800f4b0:	d901      	bls.n	800f4b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f4b6:	4b11      	ldr	r3, [pc, #68]	@ (800f4fc <xTaskIncrementTick+0x16c>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d007      	beq.n	800f4ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f4be:	2301      	movs	r3, #1
 800f4c0:	617b      	str	r3, [r7, #20]
 800f4c2:	e004      	b.n	800f4ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f4c4:	4b0e      	ldr	r3, [pc, #56]	@ (800f500 <xTaskIncrementTick+0x170>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	3301      	adds	r3, #1
 800f4ca:	4a0d      	ldr	r2, [pc, #52]	@ (800f500 <xTaskIncrementTick+0x170>)
 800f4cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f4ce:	697b      	ldr	r3, [r7, #20]
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3718      	adds	r7, #24
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	24001324 	.word	0x24001324
 800f4dc:	24001300 	.word	0x24001300
 800f4e0:	240012b4 	.word	0x240012b4
 800f4e4:	240012b8 	.word	0x240012b8
 800f4e8:	24001314 	.word	0x24001314
 800f4ec:	2400131c 	.word	0x2400131c
 800f4f0:	24001304 	.word	0x24001304
 800f4f4:	24000e2c 	.word	0x24000e2c
 800f4f8:	24000e28 	.word	0x24000e28
 800f4fc:	24001310 	.word	0x24001310
 800f500:	2400130c 	.word	0x2400130c

0800f504 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f504:	b480      	push	{r7}
 800f506:	b085      	sub	sp, #20
 800f508:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f50a:	4b2b      	ldr	r3, [pc, #172]	@ (800f5b8 <vTaskSwitchContext+0xb4>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d003      	beq.n	800f51a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f512:	4b2a      	ldr	r3, [pc, #168]	@ (800f5bc <vTaskSwitchContext+0xb8>)
 800f514:	2201      	movs	r2, #1
 800f516:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f518:	e047      	b.n	800f5aa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f51a:	4b28      	ldr	r3, [pc, #160]	@ (800f5bc <vTaskSwitchContext+0xb8>)
 800f51c:	2200      	movs	r2, #0
 800f51e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f520:	4b27      	ldr	r3, [pc, #156]	@ (800f5c0 <vTaskSwitchContext+0xbc>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	60fb      	str	r3, [r7, #12]
 800f526:	e011      	b.n	800f54c <vTaskSwitchContext+0x48>
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d10b      	bne.n	800f546 <vTaskSwitchContext+0x42>
	__asm volatile
 800f52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f532:	f383 8811 	msr	BASEPRI, r3
 800f536:	f3bf 8f6f 	isb	sy
 800f53a:	f3bf 8f4f 	dsb	sy
 800f53e:	607b      	str	r3, [r7, #4]
}
 800f540:	bf00      	nop
 800f542:	bf00      	nop
 800f544:	e7fd      	b.n	800f542 <vTaskSwitchContext+0x3e>
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	3b01      	subs	r3, #1
 800f54a:	60fb      	str	r3, [r7, #12]
 800f54c:	491d      	ldr	r1, [pc, #116]	@ (800f5c4 <vTaskSwitchContext+0xc0>)
 800f54e:	68fa      	ldr	r2, [r7, #12]
 800f550:	4613      	mov	r3, r2
 800f552:	009b      	lsls	r3, r3, #2
 800f554:	4413      	add	r3, r2
 800f556:	009b      	lsls	r3, r3, #2
 800f558:	440b      	add	r3, r1
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d0e3      	beq.n	800f528 <vTaskSwitchContext+0x24>
 800f560:	68fa      	ldr	r2, [r7, #12]
 800f562:	4613      	mov	r3, r2
 800f564:	009b      	lsls	r3, r3, #2
 800f566:	4413      	add	r3, r2
 800f568:	009b      	lsls	r3, r3, #2
 800f56a:	4a16      	ldr	r2, [pc, #88]	@ (800f5c4 <vTaskSwitchContext+0xc0>)
 800f56c:	4413      	add	r3, r2
 800f56e:	60bb      	str	r3, [r7, #8]
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	685b      	ldr	r3, [r3, #4]
 800f574:	685a      	ldr	r2, [r3, #4]
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	605a      	str	r2, [r3, #4]
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	685a      	ldr	r2, [r3, #4]
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	3308      	adds	r3, #8
 800f582:	429a      	cmp	r2, r3
 800f584:	d104      	bne.n	800f590 <vTaskSwitchContext+0x8c>
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	685b      	ldr	r3, [r3, #4]
 800f58a:	685a      	ldr	r2, [r3, #4]
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	605a      	str	r2, [r3, #4]
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	685b      	ldr	r3, [r3, #4]
 800f594:	68db      	ldr	r3, [r3, #12]
 800f596:	4a0c      	ldr	r2, [pc, #48]	@ (800f5c8 <vTaskSwitchContext+0xc4>)
 800f598:	6013      	str	r3, [r2, #0]
 800f59a:	4a09      	ldr	r2, [pc, #36]	@ (800f5c0 <vTaskSwitchContext+0xbc>)
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f5a0:	4b09      	ldr	r3, [pc, #36]	@ (800f5c8 <vTaskSwitchContext+0xc4>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	3354      	adds	r3, #84	@ 0x54
 800f5a6:	4a09      	ldr	r2, [pc, #36]	@ (800f5cc <vTaskSwitchContext+0xc8>)
 800f5a8:	6013      	str	r3, [r2, #0]
}
 800f5aa:	bf00      	nop
 800f5ac:	3714      	adds	r7, #20
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr
 800f5b6:	bf00      	nop
 800f5b8:	24001324 	.word	0x24001324
 800f5bc:	24001310 	.word	0x24001310
 800f5c0:	24001304 	.word	0x24001304
 800f5c4:	24000e2c 	.word	0x24000e2c
 800f5c8:	24000e28 	.word	0x24000e28
 800f5cc:	24000040 	.word	0x24000040

0800f5d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b084      	sub	sp, #16
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d10b      	bne.n	800f5f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5e4:	f383 8811 	msr	BASEPRI, r3
 800f5e8:	f3bf 8f6f 	isb	sy
 800f5ec:	f3bf 8f4f 	dsb	sy
 800f5f0:	60fb      	str	r3, [r7, #12]
}
 800f5f2:	bf00      	nop
 800f5f4:	bf00      	nop
 800f5f6:	e7fd      	b.n	800f5f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f5f8:	4b07      	ldr	r3, [pc, #28]	@ (800f618 <vTaskPlaceOnEventList+0x48>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	3318      	adds	r3, #24
 800f5fe:	4619      	mov	r1, r3
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f7fe fa4c 	bl	800da9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f606:	2101      	movs	r1, #1
 800f608:	6838      	ldr	r0, [r7, #0]
 800f60a:	f000 fb97 	bl	800fd3c <prvAddCurrentTaskToDelayedList>
}
 800f60e:	bf00      	nop
 800f610:	3710      	adds	r7, #16
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	24000e28 	.word	0x24000e28

0800f61c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b086      	sub	sp, #24
 800f620:	af00      	add	r7, sp, #0
 800f622:	60f8      	str	r0, [r7, #12]
 800f624:	60b9      	str	r1, [r7, #8]
 800f626:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d10b      	bne.n	800f646 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f632:	f383 8811 	msr	BASEPRI, r3
 800f636:	f3bf 8f6f 	isb	sy
 800f63a:	f3bf 8f4f 	dsb	sy
 800f63e:	617b      	str	r3, [r7, #20]
}
 800f640:	bf00      	nop
 800f642:	bf00      	nop
 800f644:	e7fd      	b.n	800f642 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f646:	4b0a      	ldr	r3, [pc, #40]	@ (800f670 <vTaskPlaceOnEventListRestricted+0x54>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	3318      	adds	r3, #24
 800f64c:	4619      	mov	r1, r3
 800f64e:	68f8      	ldr	r0, [r7, #12]
 800f650:	f7fe fa01 	bl	800da56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d002      	beq.n	800f660 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f65a:	f04f 33ff 	mov.w	r3, #4294967295
 800f65e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f660:	6879      	ldr	r1, [r7, #4]
 800f662:	68b8      	ldr	r0, [r7, #8]
 800f664:	f000 fb6a 	bl	800fd3c <prvAddCurrentTaskToDelayedList>
	}
 800f668:	bf00      	nop
 800f66a:	3718      	adds	r7, #24
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	24000e28 	.word	0x24000e28

0800f674 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b086      	sub	sp, #24
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	68db      	ldr	r3, [r3, #12]
 800f680:	68db      	ldr	r3, [r3, #12]
 800f682:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d10b      	bne.n	800f6a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f68e:	f383 8811 	msr	BASEPRI, r3
 800f692:	f3bf 8f6f 	isb	sy
 800f696:	f3bf 8f4f 	dsb	sy
 800f69a:	60fb      	str	r3, [r7, #12]
}
 800f69c:	bf00      	nop
 800f69e:	bf00      	nop
 800f6a0:	e7fd      	b.n	800f69e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	3318      	adds	r3, #24
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fe fa32 	bl	800db10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6ac:	4b1d      	ldr	r3, [pc, #116]	@ (800f724 <xTaskRemoveFromEventList+0xb0>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d11d      	bne.n	800f6f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	3304      	adds	r3, #4
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7fe fa29 	bl	800db10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6c2:	4b19      	ldr	r3, [pc, #100]	@ (800f728 <xTaskRemoveFromEventList+0xb4>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d903      	bls.n	800f6d2 <xTaskRemoveFromEventList+0x5e>
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6ce:	4a16      	ldr	r2, [pc, #88]	@ (800f728 <xTaskRemoveFromEventList+0xb4>)
 800f6d0:	6013      	str	r3, [r2, #0]
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6d6:	4613      	mov	r3, r2
 800f6d8:	009b      	lsls	r3, r3, #2
 800f6da:	4413      	add	r3, r2
 800f6dc:	009b      	lsls	r3, r3, #2
 800f6de:	4a13      	ldr	r2, [pc, #76]	@ (800f72c <xTaskRemoveFromEventList+0xb8>)
 800f6e0:	441a      	add	r2, r3
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	3304      	adds	r3, #4
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	4610      	mov	r0, r2
 800f6ea:	f7fe f9b4 	bl	800da56 <vListInsertEnd>
 800f6ee:	e005      	b.n	800f6fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	3318      	adds	r3, #24
 800f6f4:	4619      	mov	r1, r3
 800f6f6:	480e      	ldr	r0, [pc, #56]	@ (800f730 <xTaskRemoveFromEventList+0xbc>)
 800f6f8:	f7fe f9ad 	bl	800da56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f700:	4b0c      	ldr	r3, [pc, #48]	@ (800f734 <xTaskRemoveFromEventList+0xc0>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f706:	429a      	cmp	r2, r3
 800f708:	d905      	bls.n	800f716 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f70a:	2301      	movs	r3, #1
 800f70c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f70e:	4b0a      	ldr	r3, [pc, #40]	@ (800f738 <xTaskRemoveFromEventList+0xc4>)
 800f710:	2201      	movs	r2, #1
 800f712:	601a      	str	r2, [r3, #0]
 800f714:	e001      	b.n	800f71a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f716:	2300      	movs	r3, #0
 800f718:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f71a:	697b      	ldr	r3, [r7, #20]
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3718      	adds	r7, #24
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}
 800f724:	24001324 	.word	0x24001324
 800f728:	24001304 	.word	0x24001304
 800f72c:	24000e2c 	.word	0x24000e2c
 800f730:	240012bc 	.word	0x240012bc
 800f734:	24000e28 	.word	0x24000e28
 800f738:	24001310 	.word	0x24001310

0800f73c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f73c:	b480      	push	{r7}
 800f73e:	b083      	sub	sp, #12
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f744:	4b06      	ldr	r3, [pc, #24]	@ (800f760 <vTaskInternalSetTimeOutState+0x24>)
 800f746:	681a      	ldr	r2, [r3, #0]
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f74c:	4b05      	ldr	r3, [pc, #20]	@ (800f764 <vTaskInternalSetTimeOutState+0x28>)
 800f74e:	681a      	ldr	r2, [r3, #0]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	605a      	str	r2, [r3, #4]
}
 800f754:	bf00      	nop
 800f756:	370c      	adds	r7, #12
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr
 800f760:	24001314 	.word	0x24001314
 800f764:	24001300 	.word	0x24001300

0800f768 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b088      	sub	sp, #32
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d10b      	bne.n	800f790 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f77c:	f383 8811 	msr	BASEPRI, r3
 800f780:	f3bf 8f6f 	isb	sy
 800f784:	f3bf 8f4f 	dsb	sy
 800f788:	613b      	str	r3, [r7, #16]
}
 800f78a:	bf00      	nop
 800f78c:	bf00      	nop
 800f78e:	e7fd      	b.n	800f78c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d10b      	bne.n	800f7ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f79a:	f383 8811 	msr	BASEPRI, r3
 800f79e:	f3bf 8f6f 	isb	sy
 800f7a2:	f3bf 8f4f 	dsb	sy
 800f7a6:	60fb      	str	r3, [r7, #12]
}
 800f7a8:	bf00      	nop
 800f7aa:	bf00      	nop
 800f7ac:	e7fd      	b.n	800f7aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f7ae:	f000 ffa3 	bl	80106f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f7b2:	4b1d      	ldr	r3, [pc, #116]	@ (800f828 <xTaskCheckForTimeOut+0xc0>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	69ba      	ldr	r2, [r7, #24]
 800f7be:	1ad3      	subs	r3, r2, r3
 800f7c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ca:	d102      	bne.n	800f7d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	61fb      	str	r3, [r7, #28]
 800f7d0:	e023      	b.n	800f81a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681a      	ldr	r2, [r3, #0]
 800f7d6:	4b15      	ldr	r3, [pc, #84]	@ (800f82c <xTaskCheckForTimeOut+0xc4>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d007      	beq.n	800f7ee <xTaskCheckForTimeOut+0x86>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	685b      	ldr	r3, [r3, #4]
 800f7e2:	69ba      	ldr	r2, [r7, #24]
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d302      	bcc.n	800f7ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	61fb      	str	r3, [r7, #28]
 800f7ec:	e015      	b.n	800f81a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	697a      	ldr	r2, [r7, #20]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d20b      	bcs.n	800f810 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	1ad2      	subs	r2, r2, r3
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f7ff ff99 	bl	800f73c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f80a:	2300      	movs	r3, #0
 800f80c:	61fb      	str	r3, [r7, #28]
 800f80e:	e004      	b.n	800f81a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	2200      	movs	r2, #0
 800f814:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f816:	2301      	movs	r3, #1
 800f818:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f81a:	f000 ff9f 	bl	801075c <vPortExitCritical>

	return xReturn;
 800f81e:	69fb      	ldr	r3, [r7, #28]
}
 800f820:	4618      	mov	r0, r3
 800f822:	3720      	adds	r7, #32
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}
 800f828:	24001300 	.word	0x24001300
 800f82c:	24001314 	.word	0x24001314

0800f830 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f830:	b480      	push	{r7}
 800f832:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f834:	4b03      	ldr	r3, [pc, #12]	@ (800f844 <vTaskMissedYield+0x14>)
 800f836:	2201      	movs	r2, #1
 800f838:	601a      	str	r2, [r3, #0]
}
 800f83a:	bf00      	nop
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr
 800f844:	24001310 	.word	0x24001310

0800f848 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b082      	sub	sp, #8
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f850:	f000 f852 	bl	800f8f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f854:	4b06      	ldr	r3, [pc, #24]	@ (800f870 <prvIdleTask+0x28>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	2b01      	cmp	r3, #1
 800f85a:	d9f9      	bls.n	800f850 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f85c:	4b05      	ldr	r3, [pc, #20]	@ (800f874 <prvIdleTask+0x2c>)
 800f85e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f862:	601a      	str	r2, [r3, #0]
 800f864:	f3bf 8f4f 	dsb	sy
 800f868:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f86c:	e7f0      	b.n	800f850 <prvIdleTask+0x8>
 800f86e:	bf00      	nop
 800f870:	24000e2c 	.word	0x24000e2c
 800f874:	e000ed04 	.word	0xe000ed04

0800f878 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f87e:	2300      	movs	r3, #0
 800f880:	607b      	str	r3, [r7, #4]
 800f882:	e00c      	b.n	800f89e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f884:	687a      	ldr	r2, [r7, #4]
 800f886:	4613      	mov	r3, r2
 800f888:	009b      	lsls	r3, r3, #2
 800f88a:	4413      	add	r3, r2
 800f88c:	009b      	lsls	r3, r3, #2
 800f88e:	4a12      	ldr	r2, [pc, #72]	@ (800f8d8 <prvInitialiseTaskLists+0x60>)
 800f890:	4413      	add	r3, r2
 800f892:	4618      	mov	r0, r3
 800f894:	f7fe f8b2 	bl	800d9fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	3301      	adds	r3, #1
 800f89c:	607b      	str	r3, [r7, #4]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2b37      	cmp	r3, #55	@ 0x37
 800f8a2:	d9ef      	bls.n	800f884 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f8a4:	480d      	ldr	r0, [pc, #52]	@ (800f8dc <prvInitialiseTaskLists+0x64>)
 800f8a6:	f7fe f8a9 	bl	800d9fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f8aa:	480d      	ldr	r0, [pc, #52]	@ (800f8e0 <prvInitialiseTaskLists+0x68>)
 800f8ac:	f7fe f8a6 	bl	800d9fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f8b0:	480c      	ldr	r0, [pc, #48]	@ (800f8e4 <prvInitialiseTaskLists+0x6c>)
 800f8b2:	f7fe f8a3 	bl	800d9fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f8b6:	480c      	ldr	r0, [pc, #48]	@ (800f8e8 <prvInitialiseTaskLists+0x70>)
 800f8b8:	f7fe f8a0 	bl	800d9fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f8bc:	480b      	ldr	r0, [pc, #44]	@ (800f8ec <prvInitialiseTaskLists+0x74>)
 800f8be:	f7fe f89d 	bl	800d9fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f8c2:	4b0b      	ldr	r3, [pc, #44]	@ (800f8f0 <prvInitialiseTaskLists+0x78>)
 800f8c4:	4a05      	ldr	r2, [pc, #20]	@ (800f8dc <prvInitialiseTaskLists+0x64>)
 800f8c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f8c8:	4b0a      	ldr	r3, [pc, #40]	@ (800f8f4 <prvInitialiseTaskLists+0x7c>)
 800f8ca:	4a05      	ldr	r2, [pc, #20]	@ (800f8e0 <prvInitialiseTaskLists+0x68>)
 800f8cc:	601a      	str	r2, [r3, #0]
}
 800f8ce:	bf00      	nop
 800f8d0:	3708      	adds	r7, #8
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	24000e2c 	.word	0x24000e2c
 800f8dc:	2400128c 	.word	0x2400128c
 800f8e0:	240012a0 	.word	0x240012a0
 800f8e4:	240012bc 	.word	0x240012bc
 800f8e8:	240012d0 	.word	0x240012d0
 800f8ec:	240012e8 	.word	0x240012e8
 800f8f0:	240012b4 	.word	0x240012b4
 800f8f4:	240012b8 	.word	0x240012b8

0800f8f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b082      	sub	sp, #8
 800f8fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f8fe:	e019      	b.n	800f934 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f900:	f000 fefa 	bl	80106f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f904:	4b10      	ldr	r3, [pc, #64]	@ (800f948 <prvCheckTasksWaitingTermination+0x50>)
 800f906:	68db      	ldr	r3, [r3, #12]
 800f908:	68db      	ldr	r3, [r3, #12]
 800f90a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	3304      	adds	r3, #4
 800f910:	4618      	mov	r0, r3
 800f912:	f7fe f8fd 	bl	800db10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f916:	4b0d      	ldr	r3, [pc, #52]	@ (800f94c <prvCheckTasksWaitingTermination+0x54>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	3b01      	subs	r3, #1
 800f91c:	4a0b      	ldr	r2, [pc, #44]	@ (800f94c <prvCheckTasksWaitingTermination+0x54>)
 800f91e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f920:	4b0b      	ldr	r3, [pc, #44]	@ (800f950 <prvCheckTasksWaitingTermination+0x58>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	3b01      	subs	r3, #1
 800f926:	4a0a      	ldr	r2, [pc, #40]	@ (800f950 <prvCheckTasksWaitingTermination+0x58>)
 800f928:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f92a:	f000 ff17 	bl	801075c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f000 f810 	bl	800f954 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f934:	4b06      	ldr	r3, [pc, #24]	@ (800f950 <prvCheckTasksWaitingTermination+0x58>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d1e1      	bne.n	800f900 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f93c:	bf00      	nop
 800f93e:	bf00      	nop
 800f940:	3708      	adds	r7, #8
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	240012d0 	.word	0x240012d0
 800f94c:	240012fc 	.word	0x240012fc
 800f950:	240012e4 	.word	0x240012e4

0800f954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f954:	b580      	push	{r7, lr}
 800f956:	b084      	sub	sp, #16
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	3354      	adds	r3, #84	@ 0x54
 800f960:	4618      	mov	r0, r3
 800f962:	f00b fe89 	bl	801b678 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d108      	bne.n	800f982 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f974:	4618      	mov	r0, r3
 800f976:	f001 f8af 	bl	8010ad8 <vPortFree>
				vPortFree( pxTCB );
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f001 f8ac 	bl	8010ad8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f980:	e019      	b.n	800f9b6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f988:	2b01      	cmp	r3, #1
 800f98a:	d103      	bne.n	800f994 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f001 f8a3 	bl	8010ad8 <vPortFree>
	}
 800f992:	e010      	b.n	800f9b6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f99a:	2b02      	cmp	r3, #2
 800f99c:	d00b      	beq.n	800f9b6 <prvDeleteTCB+0x62>
	__asm volatile
 800f99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9a2:	f383 8811 	msr	BASEPRI, r3
 800f9a6:	f3bf 8f6f 	isb	sy
 800f9aa:	f3bf 8f4f 	dsb	sy
 800f9ae:	60fb      	str	r3, [r7, #12]
}
 800f9b0:	bf00      	nop
 800f9b2:	bf00      	nop
 800f9b4:	e7fd      	b.n	800f9b2 <prvDeleteTCB+0x5e>
	}
 800f9b6:	bf00      	nop
 800f9b8:	3710      	adds	r7, #16
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
	...

0800f9c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b083      	sub	sp, #12
 800f9c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9c6:	4b0c      	ldr	r3, [pc, #48]	@ (800f9f8 <prvResetNextTaskUnblockTime+0x38>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d104      	bne.n	800f9da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f9d0:	4b0a      	ldr	r3, [pc, #40]	@ (800f9fc <prvResetNextTaskUnblockTime+0x3c>)
 800f9d2:	f04f 32ff 	mov.w	r2, #4294967295
 800f9d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f9d8:	e008      	b.n	800f9ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9da:	4b07      	ldr	r3, [pc, #28]	@ (800f9f8 <prvResetNextTaskUnblockTime+0x38>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	68db      	ldr	r3, [r3, #12]
 800f9e0:	68db      	ldr	r3, [r3, #12]
 800f9e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	685b      	ldr	r3, [r3, #4]
 800f9e8:	4a04      	ldr	r2, [pc, #16]	@ (800f9fc <prvResetNextTaskUnblockTime+0x3c>)
 800f9ea:	6013      	str	r3, [r2, #0]
}
 800f9ec:	bf00      	nop
 800f9ee:	370c      	adds	r7, #12
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr
 800f9f8:	240012b4 	.word	0x240012b4
 800f9fc:	2400131c 	.word	0x2400131c

0800fa00 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800fa00:	b480      	push	{r7}
 800fa02:	b083      	sub	sp, #12
 800fa04:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fa06:	4b05      	ldr	r3, [pc, #20]	@ (800fa1c <xTaskGetCurrentTaskHandle+0x1c>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fa0c:	687b      	ldr	r3, [r7, #4]
	}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	370c      	adds	r7, #12
 800fa12:	46bd      	mov	sp, r7
 800fa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa18:	4770      	bx	lr
 800fa1a:	bf00      	nop
 800fa1c:	24000e28 	.word	0x24000e28

0800fa20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fa20:	b480      	push	{r7}
 800fa22:	b083      	sub	sp, #12
 800fa24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fa26:	4b0b      	ldr	r3, [pc, #44]	@ (800fa54 <xTaskGetSchedulerState+0x34>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d102      	bne.n	800fa34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fa2e:	2301      	movs	r3, #1
 800fa30:	607b      	str	r3, [r7, #4]
 800fa32:	e008      	b.n	800fa46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa34:	4b08      	ldr	r3, [pc, #32]	@ (800fa58 <xTaskGetSchedulerState+0x38>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d102      	bne.n	800fa42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fa3c:	2302      	movs	r3, #2
 800fa3e:	607b      	str	r3, [r7, #4]
 800fa40:	e001      	b.n	800fa46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fa42:	2300      	movs	r3, #0
 800fa44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fa46:	687b      	ldr	r3, [r7, #4]
	}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	370c      	adds	r7, #12
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr
 800fa54:	24001308 	.word	0x24001308
 800fa58:	24001324 	.word	0x24001324

0800fa5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b084      	sub	sp, #16
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d051      	beq.n	800fb16 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa76:	4b2a      	ldr	r3, [pc, #168]	@ (800fb20 <xTaskPriorityInherit+0xc4>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d241      	bcs.n	800fb04 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	699b      	ldr	r3, [r3, #24]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	db06      	blt.n	800fa96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa88:	4b25      	ldr	r3, [pc, #148]	@ (800fb20 <xTaskPriorityInherit+0xc4>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa8e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	6959      	ldr	r1, [r3, #20]
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa9e:	4613      	mov	r3, r2
 800faa0:	009b      	lsls	r3, r3, #2
 800faa2:	4413      	add	r3, r2
 800faa4:	009b      	lsls	r3, r3, #2
 800faa6:	4a1f      	ldr	r2, [pc, #124]	@ (800fb24 <xTaskPriorityInherit+0xc8>)
 800faa8:	4413      	add	r3, r2
 800faaa:	4299      	cmp	r1, r3
 800faac:	d122      	bne.n	800faf4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	3304      	adds	r3, #4
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7fe f82c 	bl	800db10 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fab8:	4b19      	ldr	r3, [pc, #100]	@ (800fb20 <xTaskPriorityInherit+0xc4>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fac6:	4b18      	ldr	r3, [pc, #96]	@ (800fb28 <xTaskPriorityInherit+0xcc>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	429a      	cmp	r2, r3
 800facc:	d903      	bls.n	800fad6 <xTaskPriorityInherit+0x7a>
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fad2:	4a15      	ldr	r2, [pc, #84]	@ (800fb28 <xTaskPriorityInherit+0xcc>)
 800fad4:	6013      	str	r3, [r2, #0]
 800fad6:	68bb      	ldr	r3, [r7, #8]
 800fad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fada:	4613      	mov	r3, r2
 800fadc:	009b      	lsls	r3, r3, #2
 800fade:	4413      	add	r3, r2
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	4a10      	ldr	r2, [pc, #64]	@ (800fb24 <xTaskPriorityInherit+0xc8>)
 800fae4:	441a      	add	r2, r3
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	3304      	adds	r3, #4
 800faea:	4619      	mov	r1, r3
 800faec:	4610      	mov	r0, r2
 800faee:	f7fd ffb2 	bl	800da56 <vListInsertEnd>
 800faf2:	e004      	b.n	800fafe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800faf4:	4b0a      	ldr	r3, [pc, #40]	@ (800fb20 <xTaskPriorityInherit+0xc4>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fafe:	2301      	movs	r3, #1
 800fb00:	60fb      	str	r3, [r7, #12]
 800fb02:	e008      	b.n	800fb16 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fb08:	4b05      	ldr	r3, [pc, #20]	@ (800fb20 <xTaskPriorityInherit+0xc4>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d201      	bcs.n	800fb16 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fb12:	2301      	movs	r3, #1
 800fb14:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fb16:	68fb      	ldr	r3, [r7, #12]
	}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3710      	adds	r7, #16
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	24000e28 	.word	0x24000e28
 800fb24:	24000e2c 	.word	0x24000e2c
 800fb28:	24001304 	.word	0x24001304

0800fb2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b086      	sub	sp, #24
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d058      	beq.n	800fbf4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fb42:	4b2f      	ldr	r3, [pc, #188]	@ (800fc00 <xTaskPriorityDisinherit+0xd4>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	693a      	ldr	r2, [r7, #16]
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d00b      	beq.n	800fb64 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800fb4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb50:	f383 8811 	msr	BASEPRI, r3
 800fb54:	f3bf 8f6f 	isb	sy
 800fb58:	f3bf 8f4f 	dsb	sy
 800fb5c:	60fb      	str	r3, [r7, #12]
}
 800fb5e:	bf00      	nop
 800fb60:	bf00      	nop
 800fb62:	e7fd      	b.n	800fb60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d10b      	bne.n	800fb84 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800fb6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb70:	f383 8811 	msr	BASEPRI, r3
 800fb74:	f3bf 8f6f 	isb	sy
 800fb78:	f3bf 8f4f 	dsb	sy
 800fb7c:	60bb      	str	r3, [r7, #8]
}
 800fb7e:	bf00      	nop
 800fb80:	bf00      	nop
 800fb82:	e7fd      	b.n	800fb80 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb88:	1e5a      	subs	r2, r3, #1
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb92:	693b      	ldr	r3, [r7, #16]
 800fb94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d02c      	beq.n	800fbf4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d128      	bne.n	800fbf4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	3304      	adds	r3, #4
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7fd ffb2 	bl	800db10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbb8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fbbc:	693b      	ldr	r3, [r7, #16]
 800fbbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbc4:	4b0f      	ldr	r3, [pc, #60]	@ (800fc04 <xTaskPriorityDisinherit+0xd8>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d903      	bls.n	800fbd4 <xTaskPriorityDisinherit+0xa8>
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbd0:	4a0c      	ldr	r2, [pc, #48]	@ (800fc04 <xTaskPriorityDisinherit+0xd8>)
 800fbd2:	6013      	str	r3, [r2, #0]
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbd8:	4613      	mov	r3, r2
 800fbda:	009b      	lsls	r3, r3, #2
 800fbdc:	4413      	add	r3, r2
 800fbde:	009b      	lsls	r3, r3, #2
 800fbe0:	4a09      	ldr	r2, [pc, #36]	@ (800fc08 <xTaskPriorityDisinherit+0xdc>)
 800fbe2:	441a      	add	r2, r3
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	3304      	adds	r3, #4
 800fbe8:	4619      	mov	r1, r3
 800fbea:	4610      	mov	r0, r2
 800fbec:	f7fd ff33 	bl	800da56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fbf4:	697b      	ldr	r3, [r7, #20]
	}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3718      	adds	r7, #24
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}
 800fbfe:	bf00      	nop
 800fc00:	24000e28 	.word	0x24000e28
 800fc04:	24001304 	.word	0x24001304
 800fc08:	24000e2c 	.word	0x24000e2c

0800fc0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b088      	sub	sp, #32
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d06c      	beq.n	800fcfe <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fc24:	69bb      	ldr	r3, [r7, #24]
 800fc26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d10b      	bne.n	800fc44 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800fc2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc30:	f383 8811 	msr	BASEPRI, r3
 800fc34:	f3bf 8f6f 	isb	sy
 800fc38:	f3bf 8f4f 	dsb	sy
 800fc3c:	60fb      	str	r3, [r7, #12]
}
 800fc3e:	bf00      	nop
 800fc40:	bf00      	nop
 800fc42:	e7fd      	b.n	800fc40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fc44:	69bb      	ldr	r3, [r7, #24]
 800fc46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc48:	683a      	ldr	r2, [r7, #0]
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d902      	bls.n	800fc54 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	61fb      	str	r3, [r7, #28]
 800fc52:	e002      	b.n	800fc5a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fc54:	69bb      	ldr	r3, [r7, #24]
 800fc56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc58:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fc5a:	69bb      	ldr	r3, [r7, #24]
 800fc5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc5e:	69fa      	ldr	r2, [r7, #28]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d04c      	beq.n	800fcfe <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fc64:	69bb      	ldr	r3, [r7, #24]
 800fc66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc68:	697a      	ldr	r2, [r7, #20]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d147      	bne.n	800fcfe <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fc6e:	4b26      	ldr	r3, [pc, #152]	@ (800fd08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	69ba      	ldr	r2, [r7, #24]
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d10b      	bne.n	800fc90 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800fc78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc7c:	f383 8811 	msr	BASEPRI, r3
 800fc80:	f3bf 8f6f 	isb	sy
 800fc84:	f3bf 8f4f 	dsb	sy
 800fc88:	60bb      	str	r3, [r7, #8]
}
 800fc8a:	bf00      	nop
 800fc8c:	bf00      	nop
 800fc8e:	e7fd      	b.n	800fc8c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fc90:	69bb      	ldr	r3, [r7, #24]
 800fc92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc94:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fc96:	69bb      	ldr	r3, [r7, #24]
 800fc98:	69fa      	ldr	r2, [r7, #28]
 800fc9a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fc9c:	69bb      	ldr	r3, [r7, #24]
 800fc9e:	699b      	ldr	r3, [r3, #24]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	db04      	blt.n	800fcae <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fca4:	69fb      	ldr	r3, [r7, #28]
 800fca6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fcae:	69bb      	ldr	r3, [r7, #24]
 800fcb0:	6959      	ldr	r1, [r3, #20]
 800fcb2:	693a      	ldr	r2, [r7, #16]
 800fcb4:	4613      	mov	r3, r2
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	4413      	add	r3, r2
 800fcba:	009b      	lsls	r3, r3, #2
 800fcbc:	4a13      	ldr	r2, [pc, #76]	@ (800fd0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fcbe:	4413      	add	r3, r2
 800fcc0:	4299      	cmp	r1, r3
 800fcc2:	d11c      	bne.n	800fcfe <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fcc4:	69bb      	ldr	r3, [r7, #24]
 800fcc6:	3304      	adds	r3, #4
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f7fd ff21 	bl	800db10 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fcce:	69bb      	ldr	r3, [r7, #24]
 800fcd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcd2:	4b0f      	ldr	r3, [pc, #60]	@ (800fd10 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d903      	bls.n	800fce2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800fcda:	69bb      	ldr	r3, [r7, #24]
 800fcdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcde:	4a0c      	ldr	r2, [pc, #48]	@ (800fd10 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fce0:	6013      	str	r3, [r2, #0]
 800fce2:	69bb      	ldr	r3, [r7, #24]
 800fce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fce6:	4613      	mov	r3, r2
 800fce8:	009b      	lsls	r3, r3, #2
 800fcea:	4413      	add	r3, r2
 800fcec:	009b      	lsls	r3, r3, #2
 800fcee:	4a07      	ldr	r2, [pc, #28]	@ (800fd0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fcf0:	441a      	add	r2, r3
 800fcf2:	69bb      	ldr	r3, [r7, #24]
 800fcf4:	3304      	adds	r3, #4
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	4610      	mov	r0, r2
 800fcfa:	f7fd feac 	bl	800da56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fcfe:	bf00      	nop
 800fd00:	3720      	adds	r7, #32
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}
 800fd06:	bf00      	nop
 800fd08:	24000e28 	.word	0x24000e28
 800fd0c:	24000e2c 	.word	0x24000e2c
 800fd10:	24001304 	.word	0x24001304

0800fd14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fd14:	b480      	push	{r7}
 800fd16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fd18:	4b07      	ldr	r3, [pc, #28]	@ (800fd38 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d004      	beq.n	800fd2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fd20:	4b05      	ldr	r3, [pc, #20]	@ (800fd38 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd26:	3201      	adds	r2, #1
 800fd28:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800fd2a:	4b03      	ldr	r3, [pc, #12]	@ (800fd38 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
	}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr
 800fd38:	24000e28 	.word	0x24000e28

0800fd3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b084      	sub	sp, #16
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fd46:	4b21      	ldr	r3, [pc, #132]	@ (800fdcc <prvAddCurrentTaskToDelayedList+0x90>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd4c:	4b20      	ldr	r3, [pc, #128]	@ (800fdd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	3304      	adds	r3, #4
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7fd fedc 	bl	800db10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd5e:	d10a      	bne.n	800fd76 <prvAddCurrentTaskToDelayedList+0x3a>
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d007      	beq.n	800fd76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd66:	4b1a      	ldr	r3, [pc, #104]	@ (800fdd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	3304      	adds	r3, #4
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	4819      	ldr	r0, [pc, #100]	@ (800fdd4 <prvAddCurrentTaskToDelayedList+0x98>)
 800fd70:	f7fd fe71 	bl	800da56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fd74:	e026      	b.n	800fdc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fd76:	68fa      	ldr	r2, [r7, #12]
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	4413      	add	r3, r2
 800fd7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fd7e:	4b14      	ldr	r3, [pc, #80]	@ (800fdd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	68ba      	ldr	r2, [r7, #8]
 800fd84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fd86:	68ba      	ldr	r2, [r7, #8]
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d209      	bcs.n	800fda2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd8e:	4b12      	ldr	r3, [pc, #72]	@ (800fdd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fd90:	681a      	ldr	r2, [r3, #0]
 800fd92:	4b0f      	ldr	r3, [pc, #60]	@ (800fdd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	3304      	adds	r3, #4
 800fd98:	4619      	mov	r1, r3
 800fd9a:	4610      	mov	r0, r2
 800fd9c:	f7fd fe7f 	bl	800da9e <vListInsert>
}
 800fda0:	e010      	b.n	800fdc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fda2:	4b0e      	ldr	r3, [pc, #56]	@ (800fddc <prvAddCurrentTaskToDelayedList+0xa0>)
 800fda4:	681a      	ldr	r2, [r3, #0]
 800fda6:	4b0a      	ldr	r3, [pc, #40]	@ (800fdd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	3304      	adds	r3, #4
 800fdac:	4619      	mov	r1, r3
 800fdae:	4610      	mov	r0, r2
 800fdb0:	f7fd fe75 	bl	800da9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fdb4:	4b0a      	ldr	r3, [pc, #40]	@ (800fde0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	68ba      	ldr	r2, [r7, #8]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d202      	bcs.n	800fdc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fdbe:	4a08      	ldr	r2, [pc, #32]	@ (800fde0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	6013      	str	r3, [r2, #0]
}
 800fdc4:	bf00      	nop
 800fdc6:	3710      	adds	r7, #16
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	24001300 	.word	0x24001300
 800fdd0:	24000e28 	.word	0x24000e28
 800fdd4:	240012e8 	.word	0x240012e8
 800fdd8:	240012b8 	.word	0x240012b8
 800fddc:	240012b4 	.word	0x240012b4
 800fde0:	2400131c 	.word	0x2400131c

0800fde4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b08a      	sub	sp, #40	@ 0x28
 800fde8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fdea:	2300      	movs	r3, #0
 800fdec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fdee:	f000 fb13 	bl	8010418 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fdf2:	4b1d      	ldr	r3, [pc, #116]	@ (800fe68 <xTimerCreateTimerTask+0x84>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d021      	beq.n	800fe3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fe02:	1d3a      	adds	r2, r7, #4
 800fe04:	f107 0108 	add.w	r1, r7, #8
 800fe08:	f107 030c 	add.w	r3, r7, #12
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f7fd fddb 	bl	800d9c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fe12:	6879      	ldr	r1, [r7, #4]
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	68fa      	ldr	r2, [r7, #12]
 800fe18:	9202      	str	r2, [sp, #8]
 800fe1a:	9301      	str	r3, [sp, #4]
 800fe1c:	2302      	movs	r3, #2
 800fe1e:	9300      	str	r3, [sp, #0]
 800fe20:	2300      	movs	r3, #0
 800fe22:	460a      	mov	r2, r1
 800fe24:	4911      	ldr	r1, [pc, #68]	@ (800fe6c <xTimerCreateTimerTask+0x88>)
 800fe26:	4812      	ldr	r0, [pc, #72]	@ (800fe70 <xTimerCreateTimerTask+0x8c>)
 800fe28:	f7fe ff80 	bl	800ed2c <xTaskCreateStatic>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	4a11      	ldr	r2, [pc, #68]	@ (800fe74 <xTimerCreateTimerTask+0x90>)
 800fe30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fe32:	4b10      	ldr	r3, [pc, #64]	@ (800fe74 <xTimerCreateTimerTask+0x90>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d001      	beq.n	800fe3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d10b      	bne.n	800fe5c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800fe44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe48:	f383 8811 	msr	BASEPRI, r3
 800fe4c:	f3bf 8f6f 	isb	sy
 800fe50:	f3bf 8f4f 	dsb	sy
 800fe54:	613b      	str	r3, [r7, #16]
}
 800fe56:	bf00      	nop
 800fe58:	bf00      	nop
 800fe5a:	e7fd      	b.n	800fe58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fe5c:	697b      	ldr	r3, [r7, #20]
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3718      	adds	r7, #24
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
 800fe66:	bf00      	nop
 800fe68:	24001358 	.word	0x24001358
 800fe6c:	0801c804 	.word	0x0801c804
 800fe70:	0800ffb1 	.word	0x0800ffb1
 800fe74:	2400135c 	.word	0x2400135c

0800fe78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b08a      	sub	sp, #40	@ 0x28
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	60f8      	str	r0, [r7, #12]
 800fe80:	60b9      	str	r1, [r7, #8]
 800fe82:	607a      	str	r2, [r7, #4]
 800fe84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fe86:	2300      	movs	r3, #0
 800fe88:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d10b      	bne.n	800fea8 <xTimerGenericCommand+0x30>
	__asm volatile
 800fe90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe94:	f383 8811 	msr	BASEPRI, r3
 800fe98:	f3bf 8f6f 	isb	sy
 800fe9c:	f3bf 8f4f 	dsb	sy
 800fea0:	623b      	str	r3, [r7, #32]
}
 800fea2:	bf00      	nop
 800fea4:	bf00      	nop
 800fea6:	e7fd      	b.n	800fea4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fea8:	4b19      	ldr	r3, [pc, #100]	@ (800ff10 <xTimerGenericCommand+0x98>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d02a      	beq.n	800ff06 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	2b05      	cmp	r3, #5
 800fec0:	dc18      	bgt.n	800fef4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fec2:	f7ff fdad 	bl	800fa20 <xTaskGetSchedulerState>
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b02      	cmp	r3, #2
 800feca:	d109      	bne.n	800fee0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fecc:	4b10      	ldr	r3, [pc, #64]	@ (800ff10 <xTimerGenericCommand+0x98>)
 800fece:	6818      	ldr	r0, [r3, #0]
 800fed0:	f107 0110 	add.w	r1, r7, #16
 800fed4:	2300      	movs	r3, #0
 800fed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fed8:	f7fe f8b0 	bl	800e03c <xQueueGenericSend>
 800fedc:	6278      	str	r0, [r7, #36]	@ 0x24
 800fede:	e012      	b.n	800ff06 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fee0:	4b0b      	ldr	r3, [pc, #44]	@ (800ff10 <xTimerGenericCommand+0x98>)
 800fee2:	6818      	ldr	r0, [r3, #0]
 800fee4:	f107 0110 	add.w	r1, r7, #16
 800fee8:	2300      	movs	r3, #0
 800feea:	2200      	movs	r2, #0
 800feec:	f7fe f8a6 	bl	800e03c <xQueueGenericSend>
 800fef0:	6278      	str	r0, [r7, #36]	@ 0x24
 800fef2:	e008      	b.n	800ff06 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fef4:	4b06      	ldr	r3, [pc, #24]	@ (800ff10 <xTimerGenericCommand+0x98>)
 800fef6:	6818      	ldr	r0, [r3, #0]
 800fef8:	f107 0110 	add.w	r1, r7, #16
 800fefc:	2300      	movs	r3, #0
 800fefe:	683a      	ldr	r2, [r7, #0]
 800ff00:	f7fe f99e 	bl	800e240 <xQueueGenericSendFromISR>
 800ff04:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ff06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3728      	adds	r7, #40	@ 0x28
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}
 800ff10:	24001358 	.word	0x24001358

0800ff14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b088      	sub	sp, #32
 800ff18:	af02      	add	r7, sp, #8
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff1e:	4b23      	ldr	r3, [pc, #140]	@ (800ffac <prvProcessExpiredTimer+0x98>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	68db      	ldr	r3, [r3, #12]
 800ff24:	68db      	ldr	r3, [r3, #12]
 800ff26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	3304      	adds	r3, #4
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f7fd fdef 	bl	800db10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ff38:	f003 0304 	and.w	r3, r3, #4
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d023      	beq.n	800ff88 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	699a      	ldr	r2, [r3, #24]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	18d1      	adds	r1, r2, r3
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	683a      	ldr	r2, [r7, #0]
 800ff4c:	6978      	ldr	r0, [r7, #20]
 800ff4e:	f000 f8d5 	bl	80100fc <prvInsertTimerInActiveList>
 800ff52:	4603      	mov	r3, r0
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d020      	beq.n	800ff9a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ff58:	2300      	movs	r3, #0
 800ff5a:	9300      	str	r3, [sp, #0]
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	2100      	movs	r1, #0
 800ff62:	6978      	ldr	r0, [r7, #20]
 800ff64:	f7ff ff88 	bl	800fe78 <xTimerGenericCommand>
 800ff68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d114      	bne.n	800ff9a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ff70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff74:	f383 8811 	msr	BASEPRI, r3
 800ff78:	f3bf 8f6f 	isb	sy
 800ff7c:	f3bf 8f4f 	dsb	sy
 800ff80:	60fb      	str	r3, [r7, #12]
}
 800ff82:	bf00      	nop
 800ff84:	bf00      	nop
 800ff86:	e7fd      	b.n	800ff84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ff8e:	f023 0301 	bic.w	r3, r3, #1
 800ff92:	b2da      	uxtb	r2, r3
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	6a1b      	ldr	r3, [r3, #32]
 800ff9e:	6978      	ldr	r0, [r7, #20]
 800ffa0:	4798      	blx	r3
}
 800ffa2:	bf00      	nop
 800ffa4:	3718      	adds	r7, #24
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}
 800ffaa:	bf00      	nop
 800ffac:	24001350 	.word	0x24001350

0800ffb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b084      	sub	sp, #16
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ffb8:	f107 0308 	add.w	r3, r7, #8
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f000 f859 	bl	8010074 <prvGetNextExpireTime>
 800ffc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	68f8      	ldr	r0, [r7, #12]
 800ffca:	f000 f805 	bl	800ffd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ffce:	f000 f8d7 	bl	8010180 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ffd2:	bf00      	nop
 800ffd4:	e7f0      	b.n	800ffb8 <prvTimerTask+0x8>
	...

0800ffd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b084      	sub	sp, #16
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ffe2:	f7ff f907 	bl	800f1f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ffe6:	f107 0308 	add.w	r3, r7, #8
 800ffea:	4618      	mov	r0, r3
 800ffec:	f000 f866 	bl	80100bc <prvSampleTimeNow>
 800fff0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d130      	bne.n	801005a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d10a      	bne.n	8010014 <prvProcessTimerOrBlockTask+0x3c>
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	429a      	cmp	r2, r3
 8010004:	d806      	bhi.n	8010014 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010006:	f7ff f903 	bl	800f210 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801000a:	68f9      	ldr	r1, [r7, #12]
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f7ff ff81 	bl	800ff14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010012:	e024      	b.n	801005e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d008      	beq.n	801002c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801001a:	4b13      	ldr	r3, [pc, #76]	@ (8010068 <prvProcessTimerOrBlockTask+0x90>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d101      	bne.n	8010028 <prvProcessTimerOrBlockTask+0x50>
 8010024:	2301      	movs	r3, #1
 8010026:	e000      	b.n	801002a <prvProcessTimerOrBlockTask+0x52>
 8010028:	2300      	movs	r3, #0
 801002a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801002c:	4b0f      	ldr	r3, [pc, #60]	@ (801006c <prvProcessTimerOrBlockTask+0x94>)
 801002e:	6818      	ldr	r0, [r3, #0]
 8010030:	687a      	ldr	r2, [r7, #4]
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	1ad3      	subs	r3, r2, r3
 8010036:	683a      	ldr	r2, [r7, #0]
 8010038:	4619      	mov	r1, r3
 801003a:	f7fe fe43 	bl	800ecc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801003e:	f7ff f8e7 	bl	800f210 <xTaskResumeAll>
 8010042:	4603      	mov	r3, r0
 8010044:	2b00      	cmp	r3, #0
 8010046:	d10a      	bne.n	801005e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010048:	4b09      	ldr	r3, [pc, #36]	@ (8010070 <prvProcessTimerOrBlockTask+0x98>)
 801004a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801004e:	601a      	str	r2, [r3, #0]
 8010050:	f3bf 8f4f 	dsb	sy
 8010054:	f3bf 8f6f 	isb	sy
}
 8010058:	e001      	b.n	801005e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801005a:	f7ff f8d9 	bl	800f210 <xTaskResumeAll>
}
 801005e:	bf00      	nop
 8010060:	3710      	adds	r7, #16
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	24001354 	.word	0x24001354
 801006c:	24001358 	.word	0x24001358
 8010070:	e000ed04 	.word	0xe000ed04

08010074 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010074:	b480      	push	{r7}
 8010076:	b085      	sub	sp, #20
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801007c:	4b0e      	ldr	r3, [pc, #56]	@ (80100b8 <prvGetNextExpireTime+0x44>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d101      	bne.n	801008a <prvGetNextExpireTime+0x16>
 8010086:	2201      	movs	r2, #1
 8010088:	e000      	b.n	801008c <prvGetNextExpireTime+0x18>
 801008a:	2200      	movs	r2, #0
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d105      	bne.n	80100a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010098:	4b07      	ldr	r3, [pc, #28]	@ (80100b8 <prvGetNextExpireTime+0x44>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	68db      	ldr	r3, [r3, #12]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	60fb      	str	r3, [r7, #12]
 80100a2:	e001      	b.n	80100a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80100a4:	2300      	movs	r3, #0
 80100a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80100a8:	68fb      	ldr	r3, [r7, #12]
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3714      	adds	r7, #20
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr
 80100b6:	bf00      	nop
 80100b8:	24001350 	.word	0x24001350

080100bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b084      	sub	sp, #16
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80100c4:	f7ff f942 	bl	800f34c <xTaskGetTickCount>
 80100c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80100ca:	4b0b      	ldr	r3, [pc, #44]	@ (80100f8 <prvSampleTimeNow+0x3c>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	68fa      	ldr	r2, [r7, #12]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d205      	bcs.n	80100e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80100d4:	f000 f93a 	bl	801034c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2201      	movs	r2, #1
 80100dc:	601a      	str	r2, [r3, #0]
 80100de:	e002      	b.n	80100e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2200      	movs	r2, #0
 80100e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80100e6:	4a04      	ldr	r2, [pc, #16]	@ (80100f8 <prvSampleTimeNow+0x3c>)
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80100ec:	68fb      	ldr	r3, [r7, #12]
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	24001360 	.word	0x24001360

080100fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b086      	sub	sp, #24
 8010100:	af00      	add	r7, sp, #0
 8010102:	60f8      	str	r0, [r7, #12]
 8010104:	60b9      	str	r1, [r7, #8]
 8010106:	607a      	str	r2, [r7, #4]
 8010108:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801010a:	2300      	movs	r3, #0
 801010c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	68ba      	ldr	r2, [r7, #8]
 8010112:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	68fa      	ldr	r2, [r7, #12]
 8010118:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801011a:	68ba      	ldr	r2, [r7, #8]
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	429a      	cmp	r2, r3
 8010120:	d812      	bhi.n	8010148 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010122:	687a      	ldr	r2, [r7, #4]
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	1ad2      	subs	r2, r2, r3
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	699b      	ldr	r3, [r3, #24]
 801012c:	429a      	cmp	r2, r3
 801012e:	d302      	bcc.n	8010136 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010130:	2301      	movs	r3, #1
 8010132:	617b      	str	r3, [r7, #20]
 8010134:	e01b      	b.n	801016e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010136:	4b10      	ldr	r3, [pc, #64]	@ (8010178 <prvInsertTimerInActiveList+0x7c>)
 8010138:	681a      	ldr	r2, [r3, #0]
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	3304      	adds	r3, #4
 801013e:	4619      	mov	r1, r3
 8010140:	4610      	mov	r0, r2
 8010142:	f7fd fcac 	bl	800da9e <vListInsert>
 8010146:	e012      	b.n	801016e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	429a      	cmp	r2, r3
 801014e:	d206      	bcs.n	801015e <prvInsertTimerInActiveList+0x62>
 8010150:	68ba      	ldr	r2, [r7, #8]
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	429a      	cmp	r2, r3
 8010156:	d302      	bcc.n	801015e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010158:	2301      	movs	r3, #1
 801015a:	617b      	str	r3, [r7, #20]
 801015c:	e007      	b.n	801016e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801015e:	4b07      	ldr	r3, [pc, #28]	@ (801017c <prvInsertTimerInActiveList+0x80>)
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	3304      	adds	r3, #4
 8010166:	4619      	mov	r1, r3
 8010168:	4610      	mov	r0, r2
 801016a:	f7fd fc98 	bl	800da9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801016e:	697b      	ldr	r3, [r7, #20]
}
 8010170:	4618      	mov	r0, r3
 8010172:	3718      	adds	r7, #24
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}
 8010178:	24001354 	.word	0x24001354
 801017c:	24001350 	.word	0x24001350

08010180 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b08e      	sub	sp, #56	@ 0x38
 8010184:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010186:	e0ce      	b.n	8010326 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2b00      	cmp	r3, #0
 801018c:	da19      	bge.n	80101c2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801018e:	1d3b      	adds	r3, r7, #4
 8010190:	3304      	adds	r3, #4
 8010192:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010196:	2b00      	cmp	r3, #0
 8010198:	d10b      	bne.n	80101b2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801019a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801019e:	f383 8811 	msr	BASEPRI, r3
 80101a2:	f3bf 8f6f 	isb	sy
 80101a6:	f3bf 8f4f 	dsb	sy
 80101aa:	61fb      	str	r3, [r7, #28]
}
 80101ac:	bf00      	nop
 80101ae:	bf00      	nop
 80101b0:	e7fd      	b.n	80101ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80101b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101b8:	6850      	ldr	r0, [r2, #4]
 80101ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101bc:	6892      	ldr	r2, [r2, #8]
 80101be:	4611      	mov	r1, r2
 80101c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	f2c0 80ae 	blt.w	8010326 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80101ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101d0:	695b      	ldr	r3, [r3, #20]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d004      	beq.n	80101e0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80101d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101d8:	3304      	adds	r3, #4
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fd fc98 	bl	800db10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80101e0:	463b      	mov	r3, r7
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7ff ff6a 	bl	80100bc <prvSampleTimeNow>
 80101e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2b09      	cmp	r3, #9
 80101ee:	f200 8097 	bhi.w	8010320 <prvProcessReceivedCommands+0x1a0>
 80101f2:	a201      	add	r2, pc, #4	@ (adr r2, 80101f8 <prvProcessReceivedCommands+0x78>)
 80101f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101f8:	08010221 	.word	0x08010221
 80101fc:	08010221 	.word	0x08010221
 8010200:	08010221 	.word	0x08010221
 8010204:	08010297 	.word	0x08010297
 8010208:	080102ab 	.word	0x080102ab
 801020c:	080102f7 	.word	0x080102f7
 8010210:	08010221 	.word	0x08010221
 8010214:	08010221 	.word	0x08010221
 8010218:	08010297 	.word	0x08010297
 801021c:	080102ab 	.word	0x080102ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010222:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010226:	f043 0301 	orr.w	r3, r3, #1
 801022a:	b2da      	uxtb	r2, r3
 801022c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801022e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010232:	68ba      	ldr	r2, [r7, #8]
 8010234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010236:	699b      	ldr	r3, [r3, #24]
 8010238:	18d1      	adds	r1, r2, r3
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801023e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010240:	f7ff ff5c 	bl	80100fc <prvInsertTimerInActiveList>
 8010244:	4603      	mov	r3, r0
 8010246:	2b00      	cmp	r3, #0
 8010248:	d06c      	beq.n	8010324 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801024a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801024c:	6a1b      	ldr	r3, [r3, #32]
 801024e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010250:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010254:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010258:	f003 0304 	and.w	r3, r3, #4
 801025c:	2b00      	cmp	r3, #0
 801025e:	d061      	beq.n	8010324 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010260:	68ba      	ldr	r2, [r7, #8]
 8010262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010264:	699b      	ldr	r3, [r3, #24]
 8010266:	441a      	add	r2, r3
 8010268:	2300      	movs	r3, #0
 801026a:	9300      	str	r3, [sp, #0]
 801026c:	2300      	movs	r3, #0
 801026e:	2100      	movs	r1, #0
 8010270:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010272:	f7ff fe01 	bl	800fe78 <xTimerGenericCommand>
 8010276:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010278:	6a3b      	ldr	r3, [r7, #32]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d152      	bne.n	8010324 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801027e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010282:	f383 8811 	msr	BASEPRI, r3
 8010286:	f3bf 8f6f 	isb	sy
 801028a:	f3bf 8f4f 	dsb	sy
 801028e:	61bb      	str	r3, [r7, #24]
}
 8010290:	bf00      	nop
 8010292:	bf00      	nop
 8010294:	e7fd      	b.n	8010292 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010298:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801029c:	f023 0301 	bic.w	r3, r3, #1
 80102a0:	b2da      	uxtb	r2, r3
 80102a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80102a8:	e03d      	b.n	8010326 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80102aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80102b0:	f043 0301 	orr.w	r3, r3, #1
 80102b4:	b2da      	uxtb	r2, r3
 80102b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80102bc:	68ba      	ldr	r2, [r7, #8]
 80102be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80102c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102c4:	699b      	ldr	r3, [r3, #24]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d10b      	bne.n	80102e2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80102ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102ce:	f383 8811 	msr	BASEPRI, r3
 80102d2:	f3bf 8f6f 	isb	sy
 80102d6:	f3bf 8f4f 	dsb	sy
 80102da:	617b      	str	r3, [r7, #20]
}
 80102dc:	bf00      	nop
 80102de:	bf00      	nop
 80102e0:	e7fd      	b.n	80102de <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80102e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102e4:	699a      	ldr	r2, [r3, #24]
 80102e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102e8:	18d1      	adds	r1, r2, r3
 80102ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80102ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80102f0:	f7ff ff04 	bl	80100fc <prvInsertTimerInActiveList>
					break;
 80102f4:	e017      	b.n	8010326 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80102f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80102fc:	f003 0302 	and.w	r3, r3, #2
 8010300:	2b00      	cmp	r3, #0
 8010302:	d103      	bne.n	801030c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010304:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010306:	f000 fbe7 	bl	8010ad8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801030a:	e00c      	b.n	8010326 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801030c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801030e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010312:	f023 0301 	bic.w	r3, r3, #1
 8010316:	b2da      	uxtb	r2, r3
 8010318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801031a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801031e:	e002      	b.n	8010326 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8010320:	bf00      	nop
 8010322:	e000      	b.n	8010326 <prvProcessReceivedCommands+0x1a6>
					break;
 8010324:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010326:	4b08      	ldr	r3, [pc, #32]	@ (8010348 <prvProcessReceivedCommands+0x1c8>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	1d39      	adds	r1, r7, #4
 801032c:	2200      	movs	r2, #0
 801032e:	4618      	mov	r0, r3
 8010330:	f7fe f8b4 	bl	800e49c <xQueueReceive>
 8010334:	4603      	mov	r3, r0
 8010336:	2b00      	cmp	r3, #0
 8010338:	f47f af26 	bne.w	8010188 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801033c:	bf00      	nop
 801033e:	bf00      	nop
 8010340:	3730      	adds	r7, #48	@ 0x30
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}
 8010346:	bf00      	nop
 8010348:	24001358 	.word	0x24001358

0801034c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b088      	sub	sp, #32
 8010350:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010352:	e049      	b.n	80103e8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010354:	4b2e      	ldr	r3, [pc, #184]	@ (8010410 <prvSwitchTimerLists+0xc4>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801035e:	4b2c      	ldr	r3, [pc, #176]	@ (8010410 <prvSwitchTimerLists+0xc4>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	68db      	ldr	r3, [r3, #12]
 8010364:	68db      	ldr	r3, [r3, #12]
 8010366:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	3304      	adds	r3, #4
 801036c:	4618      	mov	r0, r3
 801036e:	f7fd fbcf 	bl	800db10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	6a1b      	ldr	r3, [r3, #32]
 8010376:	68f8      	ldr	r0, [r7, #12]
 8010378:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010380:	f003 0304 	and.w	r3, r3, #4
 8010384:	2b00      	cmp	r3, #0
 8010386:	d02f      	beq.n	80103e8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	699b      	ldr	r3, [r3, #24]
 801038c:	693a      	ldr	r2, [r7, #16]
 801038e:	4413      	add	r3, r2
 8010390:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010392:	68ba      	ldr	r2, [r7, #8]
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	429a      	cmp	r2, r3
 8010398:	d90e      	bls.n	80103b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	68ba      	ldr	r2, [r7, #8]
 801039e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	68fa      	ldr	r2, [r7, #12]
 80103a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80103a6:	4b1a      	ldr	r3, [pc, #104]	@ (8010410 <prvSwitchTimerLists+0xc4>)
 80103a8:	681a      	ldr	r2, [r3, #0]
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	3304      	adds	r3, #4
 80103ae:	4619      	mov	r1, r3
 80103b0:	4610      	mov	r0, r2
 80103b2:	f7fd fb74 	bl	800da9e <vListInsert>
 80103b6:	e017      	b.n	80103e8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80103b8:	2300      	movs	r3, #0
 80103ba:	9300      	str	r3, [sp, #0]
 80103bc:	2300      	movs	r3, #0
 80103be:	693a      	ldr	r2, [r7, #16]
 80103c0:	2100      	movs	r1, #0
 80103c2:	68f8      	ldr	r0, [r7, #12]
 80103c4:	f7ff fd58 	bl	800fe78 <xTimerGenericCommand>
 80103c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d10b      	bne.n	80103e8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80103d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103d4:	f383 8811 	msr	BASEPRI, r3
 80103d8:	f3bf 8f6f 	isb	sy
 80103dc:	f3bf 8f4f 	dsb	sy
 80103e0:	603b      	str	r3, [r7, #0]
}
 80103e2:	bf00      	nop
 80103e4:	bf00      	nop
 80103e6:	e7fd      	b.n	80103e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80103e8:	4b09      	ldr	r3, [pc, #36]	@ (8010410 <prvSwitchTimerLists+0xc4>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d1b0      	bne.n	8010354 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80103f2:	4b07      	ldr	r3, [pc, #28]	@ (8010410 <prvSwitchTimerLists+0xc4>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80103f8:	4b06      	ldr	r3, [pc, #24]	@ (8010414 <prvSwitchTimerLists+0xc8>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	4a04      	ldr	r2, [pc, #16]	@ (8010410 <prvSwitchTimerLists+0xc4>)
 80103fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010400:	4a04      	ldr	r2, [pc, #16]	@ (8010414 <prvSwitchTimerLists+0xc8>)
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	6013      	str	r3, [r2, #0]
}
 8010406:	bf00      	nop
 8010408:	3718      	adds	r7, #24
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
 801040e:	bf00      	nop
 8010410:	24001350 	.word	0x24001350
 8010414:	24001354 	.word	0x24001354

08010418 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b082      	sub	sp, #8
 801041c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801041e:	f000 f96b 	bl	80106f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010422:	4b15      	ldr	r3, [pc, #84]	@ (8010478 <prvCheckForValidListAndQueue+0x60>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d120      	bne.n	801046c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801042a:	4814      	ldr	r0, [pc, #80]	@ (801047c <prvCheckForValidListAndQueue+0x64>)
 801042c:	f7fd fae6 	bl	800d9fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010430:	4813      	ldr	r0, [pc, #76]	@ (8010480 <prvCheckForValidListAndQueue+0x68>)
 8010432:	f7fd fae3 	bl	800d9fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010436:	4b13      	ldr	r3, [pc, #76]	@ (8010484 <prvCheckForValidListAndQueue+0x6c>)
 8010438:	4a10      	ldr	r2, [pc, #64]	@ (801047c <prvCheckForValidListAndQueue+0x64>)
 801043a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801043c:	4b12      	ldr	r3, [pc, #72]	@ (8010488 <prvCheckForValidListAndQueue+0x70>)
 801043e:	4a10      	ldr	r2, [pc, #64]	@ (8010480 <prvCheckForValidListAndQueue+0x68>)
 8010440:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010442:	2300      	movs	r3, #0
 8010444:	9300      	str	r3, [sp, #0]
 8010446:	4b11      	ldr	r3, [pc, #68]	@ (801048c <prvCheckForValidListAndQueue+0x74>)
 8010448:	4a11      	ldr	r2, [pc, #68]	@ (8010490 <prvCheckForValidListAndQueue+0x78>)
 801044a:	2110      	movs	r1, #16
 801044c:	200a      	movs	r0, #10
 801044e:	f7fd fbf3 	bl	800dc38 <xQueueGenericCreateStatic>
 8010452:	4603      	mov	r3, r0
 8010454:	4a08      	ldr	r2, [pc, #32]	@ (8010478 <prvCheckForValidListAndQueue+0x60>)
 8010456:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010458:	4b07      	ldr	r3, [pc, #28]	@ (8010478 <prvCheckForValidListAndQueue+0x60>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d005      	beq.n	801046c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010460:	4b05      	ldr	r3, [pc, #20]	@ (8010478 <prvCheckForValidListAndQueue+0x60>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	490b      	ldr	r1, [pc, #44]	@ (8010494 <prvCheckForValidListAndQueue+0x7c>)
 8010466:	4618      	mov	r0, r3
 8010468:	f7fe fbd8 	bl	800ec1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801046c:	f000 f976 	bl	801075c <vPortExitCritical>
}
 8010470:	bf00      	nop
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
 8010476:	bf00      	nop
 8010478:	24001358 	.word	0x24001358
 801047c:	24001328 	.word	0x24001328
 8010480:	2400133c 	.word	0x2400133c
 8010484:	24001350 	.word	0x24001350
 8010488:	24001354 	.word	0x24001354
 801048c:	24001404 	.word	0x24001404
 8010490:	24001364 	.word	0x24001364
 8010494:	0801c80c 	.word	0x0801c80c

08010498 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010498:	b480      	push	{r7}
 801049a:	b085      	sub	sp, #20
 801049c:	af00      	add	r7, sp, #0
 801049e:	60f8      	str	r0, [r7, #12]
 80104a0:	60b9      	str	r1, [r7, #8]
 80104a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	3b04      	subs	r3, #4
 80104a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80104b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	3b04      	subs	r3, #4
 80104b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	f023 0201 	bic.w	r2, r3, #1
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	3b04      	subs	r3, #4
 80104c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80104c8:	4a0c      	ldr	r2, [pc, #48]	@ (80104fc <pxPortInitialiseStack+0x64>)
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	3b14      	subs	r3, #20
 80104d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80104d4:	687a      	ldr	r2, [r7, #4]
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	3b04      	subs	r3, #4
 80104de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	f06f 0202 	mvn.w	r2, #2
 80104e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	3b20      	subs	r3, #32
 80104ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80104ee:	68fb      	ldr	r3, [r7, #12]
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	3714      	adds	r7, #20
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr
 80104fc:	08010501 	.word	0x08010501

08010500 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010500:	b480      	push	{r7}
 8010502:	b085      	sub	sp, #20
 8010504:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010506:	2300      	movs	r3, #0
 8010508:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801050a:	4b13      	ldr	r3, [pc, #76]	@ (8010558 <prvTaskExitError+0x58>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010512:	d00b      	beq.n	801052c <prvTaskExitError+0x2c>
	__asm volatile
 8010514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010518:	f383 8811 	msr	BASEPRI, r3
 801051c:	f3bf 8f6f 	isb	sy
 8010520:	f3bf 8f4f 	dsb	sy
 8010524:	60fb      	str	r3, [r7, #12]
}
 8010526:	bf00      	nop
 8010528:	bf00      	nop
 801052a:	e7fd      	b.n	8010528 <prvTaskExitError+0x28>
	__asm volatile
 801052c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010530:	f383 8811 	msr	BASEPRI, r3
 8010534:	f3bf 8f6f 	isb	sy
 8010538:	f3bf 8f4f 	dsb	sy
 801053c:	60bb      	str	r3, [r7, #8]
}
 801053e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010540:	bf00      	nop
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d0fc      	beq.n	8010542 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010548:	bf00      	nop
 801054a:	bf00      	nop
 801054c:	3714      	adds	r7, #20
 801054e:	46bd      	mov	sp, r7
 8010550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010554:	4770      	bx	lr
 8010556:	bf00      	nop
 8010558:	24000024 	.word	0x24000024
 801055c:	00000000 	.word	0x00000000

08010560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010560:	4b07      	ldr	r3, [pc, #28]	@ (8010580 <pxCurrentTCBConst2>)
 8010562:	6819      	ldr	r1, [r3, #0]
 8010564:	6808      	ldr	r0, [r1, #0]
 8010566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801056a:	f380 8809 	msr	PSP, r0
 801056e:	f3bf 8f6f 	isb	sy
 8010572:	f04f 0000 	mov.w	r0, #0
 8010576:	f380 8811 	msr	BASEPRI, r0
 801057a:	4770      	bx	lr
 801057c:	f3af 8000 	nop.w

08010580 <pxCurrentTCBConst2>:
 8010580:	24000e28 	.word	0x24000e28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010584:	bf00      	nop
 8010586:	bf00      	nop

08010588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010588:	4808      	ldr	r0, [pc, #32]	@ (80105ac <prvPortStartFirstTask+0x24>)
 801058a:	6800      	ldr	r0, [r0, #0]
 801058c:	6800      	ldr	r0, [r0, #0]
 801058e:	f380 8808 	msr	MSP, r0
 8010592:	f04f 0000 	mov.w	r0, #0
 8010596:	f380 8814 	msr	CONTROL, r0
 801059a:	b662      	cpsie	i
 801059c:	b661      	cpsie	f
 801059e:	f3bf 8f4f 	dsb	sy
 80105a2:	f3bf 8f6f 	isb	sy
 80105a6:	df00      	svc	0
 80105a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80105aa:	bf00      	nop
 80105ac:	e000ed08 	.word	0xe000ed08

080105b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b086      	sub	sp, #24
 80105b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80105b6:	4b47      	ldr	r3, [pc, #284]	@ (80106d4 <xPortStartScheduler+0x124>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	4a47      	ldr	r2, [pc, #284]	@ (80106d8 <xPortStartScheduler+0x128>)
 80105bc:	4293      	cmp	r3, r2
 80105be:	d10b      	bne.n	80105d8 <xPortStartScheduler+0x28>
	__asm volatile
 80105c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105c4:	f383 8811 	msr	BASEPRI, r3
 80105c8:	f3bf 8f6f 	isb	sy
 80105cc:	f3bf 8f4f 	dsb	sy
 80105d0:	60fb      	str	r3, [r7, #12]
}
 80105d2:	bf00      	nop
 80105d4:	bf00      	nop
 80105d6:	e7fd      	b.n	80105d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80105d8:	4b3e      	ldr	r3, [pc, #248]	@ (80106d4 <xPortStartScheduler+0x124>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	4a3f      	ldr	r2, [pc, #252]	@ (80106dc <xPortStartScheduler+0x12c>)
 80105de:	4293      	cmp	r3, r2
 80105e0:	d10b      	bne.n	80105fa <xPortStartScheduler+0x4a>
	__asm volatile
 80105e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105e6:	f383 8811 	msr	BASEPRI, r3
 80105ea:	f3bf 8f6f 	isb	sy
 80105ee:	f3bf 8f4f 	dsb	sy
 80105f2:	613b      	str	r3, [r7, #16]
}
 80105f4:	bf00      	nop
 80105f6:	bf00      	nop
 80105f8:	e7fd      	b.n	80105f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80105fa:	4b39      	ldr	r3, [pc, #228]	@ (80106e0 <xPortStartScheduler+0x130>)
 80105fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	b2db      	uxtb	r3, r3
 8010604:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010606:	697b      	ldr	r3, [r7, #20]
 8010608:	22ff      	movs	r2, #255	@ 0xff
 801060a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	781b      	ldrb	r3, [r3, #0]
 8010610:	b2db      	uxtb	r3, r3
 8010612:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010614:	78fb      	ldrb	r3, [r7, #3]
 8010616:	b2db      	uxtb	r3, r3
 8010618:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801061c:	b2da      	uxtb	r2, r3
 801061e:	4b31      	ldr	r3, [pc, #196]	@ (80106e4 <xPortStartScheduler+0x134>)
 8010620:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010622:	4b31      	ldr	r3, [pc, #196]	@ (80106e8 <xPortStartScheduler+0x138>)
 8010624:	2207      	movs	r2, #7
 8010626:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010628:	e009      	b.n	801063e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801062a:	4b2f      	ldr	r3, [pc, #188]	@ (80106e8 <xPortStartScheduler+0x138>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	3b01      	subs	r3, #1
 8010630:	4a2d      	ldr	r2, [pc, #180]	@ (80106e8 <xPortStartScheduler+0x138>)
 8010632:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010634:	78fb      	ldrb	r3, [r7, #3]
 8010636:	b2db      	uxtb	r3, r3
 8010638:	005b      	lsls	r3, r3, #1
 801063a:	b2db      	uxtb	r3, r3
 801063c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801063e:	78fb      	ldrb	r3, [r7, #3]
 8010640:	b2db      	uxtb	r3, r3
 8010642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010646:	2b80      	cmp	r3, #128	@ 0x80
 8010648:	d0ef      	beq.n	801062a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801064a:	4b27      	ldr	r3, [pc, #156]	@ (80106e8 <xPortStartScheduler+0x138>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	f1c3 0307 	rsb	r3, r3, #7
 8010652:	2b04      	cmp	r3, #4
 8010654:	d00b      	beq.n	801066e <xPortStartScheduler+0xbe>
	__asm volatile
 8010656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801065a:	f383 8811 	msr	BASEPRI, r3
 801065e:	f3bf 8f6f 	isb	sy
 8010662:	f3bf 8f4f 	dsb	sy
 8010666:	60bb      	str	r3, [r7, #8]
}
 8010668:	bf00      	nop
 801066a:	bf00      	nop
 801066c:	e7fd      	b.n	801066a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801066e:	4b1e      	ldr	r3, [pc, #120]	@ (80106e8 <xPortStartScheduler+0x138>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	021b      	lsls	r3, r3, #8
 8010674:	4a1c      	ldr	r2, [pc, #112]	@ (80106e8 <xPortStartScheduler+0x138>)
 8010676:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010678:	4b1b      	ldr	r3, [pc, #108]	@ (80106e8 <xPortStartScheduler+0x138>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010680:	4a19      	ldr	r2, [pc, #100]	@ (80106e8 <xPortStartScheduler+0x138>)
 8010682:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	b2da      	uxtb	r2, r3
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801068c:	4b17      	ldr	r3, [pc, #92]	@ (80106ec <xPortStartScheduler+0x13c>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	4a16      	ldr	r2, [pc, #88]	@ (80106ec <xPortStartScheduler+0x13c>)
 8010692:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010696:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010698:	4b14      	ldr	r3, [pc, #80]	@ (80106ec <xPortStartScheduler+0x13c>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	4a13      	ldr	r2, [pc, #76]	@ (80106ec <xPortStartScheduler+0x13c>)
 801069e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80106a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80106a4:	f000 f8da 	bl	801085c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80106a8:	4b11      	ldr	r3, [pc, #68]	@ (80106f0 <xPortStartScheduler+0x140>)
 80106aa:	2200      	movs	r2, #0
 80106ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80106ae:	f000 f8f9 	bl	80108a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80106b2:	4b10      	ldr	r3, [pc, #64]	@ (80106f4 <xPortStartScheduler+0x144>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	4a0f      	ldr	r2, [pc, #60]	@ (80106f4 <xPortStartScheduler+0x144>)
 80106b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80106bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80106be:	f7ff ff63 	bl	8010588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80106c2:	f7fe ff1f 	bl	800f504 <vTaskSwitchContext>
	prvTaskExitError();
 80106c6:	f7ff ff1b 	bl	8010500 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80106ca:	2300      	movs	r3, #0
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3718      	adds	r7, #24
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}
 80106d4:	e000ed00 	.word	0xe000ed00
 80106d8:	410fc271 	.word	0x410fc271
 80106dc:	410fc270 	.word	0x410fc270
 80106e0:	e000e400 	.word	0xe000e400
 80106e4:	24001454 	.word	0x24001454
 80106e8:	24001458 	.word	0x24001458
 80106ec:	e000ed20 	.word	0xe000ed20
 80106f0:	24000024 	.word	0x24000024
 80106f4:	e000ef34 	.word	0xe000ef34

080106f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80106f8:	b480      	push	{r7}
 80106fa:	b083      	sub	sp, #12
 80106fc:	af00      	add	r7, sp, #0
	__asm volatile
 80106fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010702:	f383 8811 	msr	BASEPRI, r3
 8010706:	f3bf 8f6f 	isb	sy
 801070a:	f3bf 8f4f 	dsb	sy
 801070e:	607b      	str	r3, [r7, #4]
}
 8010710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010712:	4b10      	ldr	r3, [pc, #64]	@ (8010754 <vPortEnterCritical+0x5c>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	3301      	adds	r3, #1
 8010718:	4a0e      	ldr	r2, [pc, #56]	@ (8010754 <vPortEnterCritical+0x5c>)
 801071a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801071c:	4b0d      	ldr	r3, [pc, #52]	@ (8010754 <vPortEnterCritical+0x5c>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	2b01      	cmp	r3, #1
 8010722:	d110      	bne.n	8010746 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010724:	4b0c      	ldr	r3, [pc, #48]	@ (8010758 <vPortEnterCritical+0x60>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	b2db      	uxtb	r3, r3
 801072a:	2b00      	cmp	r3, #0
 801072c:	d00b      	beq.n	8010746 <vPortEnterCritical+0x4e>
	__asm volatile
 801072e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010732:	f383 8811 	msr	BASEPRI, r3
 8010736:	f3bf 8f6f 	isb	sy
 801073a:	f3bf 8f4f 	dsb	sy
 801073e:	603b      	str	r3, [r7, #0]
}
 8010740:	bf00      	nop
 8010742:	bf00      	nop
 8010744:	e7fd      	b.n	8010742 <vPortEnterCritical+0x4a>
	}
}
 8010746:	bf00      	nop
 8010748:	370c      	adds	r7, #12
 801074a:	46bd      	mov	sp, r7
 801074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010750:	4770      	bx	lr
 8010752:	bf00      	nop
 8010754:	24000024 	.word	0x24000024
 8010758:	e000ed04 	.word	0xe000ed04

0801075c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801075c:	b480      	push	{r7}
 801075e:	b083      	sub	sp, #12
 8010760:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010762:	4b12      	ldr	r3, [pc, #72]	@ (80107ac <vPortExitCritical+0x50>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d10b      	bne.n	8010782 <vPortExitCritical+0x26>
	__asm volatile
 801076a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801076e:	f383 8811 	msr	BASEPRI, r3
 8010772:	f3bf 8f6f 	isb	sy
 8010776:	f3bf 8f4f 	dsb	sy
 801077a:	607b      	str	r3, [r7, #4]
}
 801077c:	bf00      	nop
 801077e:	bf00      	nop
 8010780:	e7fd      	b.n	801077e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010782:	4b0a      	ldr	r3, [pc, #40]	@ (80107ac <vPortExitCritical+0x50>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	3b01      	subs	r3, #1
 8010788:	4a08      	ldr	r2, [pc, #32]	@ (80107ac <vPortExitCritical+0x50>)
 801078a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801078c:	4b07      	ldr	r3, [pc, #28]	@ (80107ac <vPortExitCritical+0x50>)
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d105      	bne.n	80107a0 <vPortExitCritical+0x44>
 8010794:	2300      	movs	r3, #0
 8010796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	f383 8811 	msr	BASEPRI, r3
}
 801079e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80107a0:	bf00      	nop
 80107a2:	370c      	adds	r7, #12
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr
 80107ac:	24000024 	.word	0x24000024

080107b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80107b0:	f3ef 8009 	mrs	r0, PSP
 80107b4:	f3bf 8f6f 	isb	sy
 80107b8:	4b15      	ldr	r3, [pc, #84]	@ (8010810 <pxCurrentTCBConst>)
 80107ba:	681a      	ldr	r2, [r3, #0]
 80107bc:	f01e 0f10 	tst.w	lr, #16
 80107c0:	bf08      	it	eq
 80107c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80107c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ca:	6010      	str	r0, [r2, #0]
 80107cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80107d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80107d4:	f380 8811 	msr	BASEPRI, r0
 80107d8:	f3bf 8f4f 	dsb	sy
 80107dc:	f3bf 8f6f 	isb	sy
 80107e0:	f7fe fe90 	bl	800f504 <vTaskSwitchContext>
 80107e4:	f04f 0000 	mov.w	r0, #0
 80107e8:	f380 8811 	msr	BASEPRI, r0
 80107ec:	bc09      	pop	{r0, r3}
 80107ee:	6819      	ldr	r1, [r3, #0]
 80107f0:	6808      	ldr	r0, [r1, #0]
 80107f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f6:	f01e 0f10 	tst.w	lr, #16
 80107fa:	bf08      	it	eq
 80107fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010800:	f380 8809 	msr	PSP, r0
 8010804:	f3bf 8f6f 	isb	sy
 8010808:	4770      	bx	lr
 801080a:	bf00      	nop
 801080c:	f3af 8000 	nop.w

08010810 <pxCurrentTCBConst>:
 8010810:	24000e28 	.word	0x24000e28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010814:	bf00      	nop
 8010816:	bf00      	nop

08010818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b082      	sub	sp, #8
 801081c:	af00      	add	r7, sp, #0
	__asm volatile
 801081e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010822:	f383 8811 	msr	BASEPRI, r3
 8010826:	f3bf 8f6f 	isb	sy
 801082a:	f3bf 8f4f 	dsb	sy
 801082e:	607b      	str	r3, [r7, #4]
}
 8010830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010832:	f7fe fdad 	bl	800f390 <xTaskIncrementTick>
 8010836:	4603      	mov	r3, r0
 8010838:	2b00      	cmp	r3, #0
 801083a:	d003      	beq.n	8010844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801083c:	4b06      	ldr	r3, [pc, #24]	@ (8010858 <xPortSysTickHandler+0x40>)
 801083e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010842:	601a      	str	r2, [r3, #0]
 8010844:	2300      	movs	r3, #0
 8010846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	f383 8811 	msr	BASEPRI, r3
}
 801084e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010850:	bf00      	nop
 8010852:	3708      	adds	r7, #8
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}
 8010858:	e000ed04 	.word	0xe000ed04

0801085c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801085c:	b480      	push	{r7}
 801085e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010860:	4b0b      	ldr	r3, [pc, #44]	@ (8010890 <vPortSetupTimerInterrupt+0x34>)
 8010862:	2200      	movs	r2, #0
 8010864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010866:	4b0b      	ldr	r3, [pc, #44]	@ (8010894 <vPortSetupTimerInterrupt+0x38>)
 8010868:	2200      	movs	r2, #0
 801086a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801086c:	4b0a      	ldr	r3, [pc, #40]	@ (8010898 <vPortSetupTimerInterrupt+0x3c>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	4a0a      	ldr	r2, [pc, #40]	@ (801089c <vPortSetupTimerInterrupt+0x40>)
 8010872:	fba2 2303 	umull	r2, r3, r2, r3
 8010876:	099b      	lsrs	r3, r3, #6
 8010878:	4a09      	ldr	r2, [pc, #36]	@ (80108a0 <vPortSetupTimerInterrupt+0x44>)
 801087a:	3b01      	subs	r3, #1
 801087c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801087e:	4b04      	ldr	r3, [pc, #16]	@ (8010890 <vPortSetupTimerInterrupt+0x34>)
 8010880:	2207      	movs	r2, #7
 8010882:	601a      	str	r2, [r3, #0]
}
 8010884:	bf00      	nop
 8010886:	46bd      	mov	sp, r7
 8010888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088c:	4770      	bx	lr
 801088e:	bf00      	nop
 8010890:	e000e010 	.word	0xe000e010
 8010894:	e000e018 	.word	0xe000e018
 8010898:	24000000 	.word	0x24000000
 801089c:	10624dd3 	.word	0x10624dd3
 80108a0:	e000e014 	.word	0xe000e014

080108a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80108a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80108b4 <vPortEnableVFP+0x10>
 80108a8:	6801      	ldr	r1, [r0, #0]
 80108aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80108ae:	6001      	str	r1, [r0, #0]
 80108b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80108b2:	bf00      	nop
 80108b4:	e000ed88 	.word	0xe000ed88

080108b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80108b8:	b480      	push	{r7}
 80108ba:	b085      	sub	sp, #20
 80108bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80108be:	f3ef 8305 	mrs	r3, IPSR
 80108c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	2b0f      	cmp	r3, #15
 80108c8:	d915      	bls.n	80108f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80108ca:	4a18      	ldr	r2, [pc, #96]	@ (801092c <vPortValidateInterruptPriority+0x74>)
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	4413      	add	r3, r2
 80108d0:	781b      	ldrb	r3, [r3, #0]
 80108d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80108d4:	4b16      	ldr	r3, [pc, #88]	@ (8010930 <vPortValidateInterruptPriority+0x78>)
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	7afa      	ldrb	r2, [r7, #11]
 80108da:	429a      	cmp	r2, r3
 80108dc:	d20b      	bcs.n	80108f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80108de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108e2:	f383 8811 	msr	BASEPRI, r3
 80108e6:	f3bf 8f6f 	isb	sy
 80108ea:	f3bf 8f4f 	dsb	sy
 80108ee:	607b      	str	r3, [r7, #4]
}
 80108f0:	bf00      	nop
 80108f2:	bf00      	nop
 80108f4:	e7fd      	b.n	80108f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80108f6:	4b0f      	ldr	r3, [pc, #60]	@ (8010934 <vPortValidateInterruptPriority+0x7c>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80108fe:	4b0e      	ldr	r3, [pc, #56]	@ (8010938 <vPortValidateInterruptPriority+0x80>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	429a      	cmp	r2, r3
 8010904:	d90b      	bls.n	801091e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801090a:	f383 8811 	msr	BASEPRI, r3
 801090e:	f3bf 8f6f 	isb	sy
 8010912:	f3bf 8f4f 	dsb	sy
 8010916:	603b      	str	r3, [r7, #0]
}
 8010918:	bf00      	nop
 801091a:	bf00      	nop
 801091c:	e7fd      	b.n	801091a <vPortValidateInterruptPriority+0x62>
	}
 801091e:	bf00      	nop
 8010920:	3714      	adds	r7, #20
 8010922:	46bd      	mov	sp, r7
 8010924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010928:	4770      	bx	lr
 801092a:	bf00      	nop
 801092c:	e000e3f0 	.word	0xe000e3f0
 8010930:	24001454 	.word	0x24001454
 8010934:	e000ed0c 	.word	0xe000ed0c
 8010938:	24001458 	.word	0x24001458

0801093c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b08a      	sub	sp, #40	@ 0x28
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010944:	2300      	movs	r3, #0
 8010946:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010948:	f7fe fc54 	bl	800f1f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801094c:	4b5c      	ldr	r3, [pc, #368]	@ (8010ac0 <pvPortMalloc+0x184>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d101      	bne.n	8010958 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010954:	f000 f924 	bl	8010ba0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010958:	4b5a      	ldr	r3, [pc, #360]	@ (8010ac4 <pvPortMalloc+0x188>)
 801095a:	681a      	ldr	r2, [r3, #0]
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	4013      	ands	r3, r2
 8010960:	2b00      	cmp	r3, #0
 8010962:	f040 8095 	bne.w	8010a90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d01e      	beq.n	80109aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801096c:	2208      	movs	r2, #8
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	4413      	add	r3, r2
 8010972:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f003 0307 	and.w	r3, r3, #7
 801097a:	2b00      	cmp	r3, #0
 801097c:	d015      	beq.n	80109aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f023 0307 	bic.w	r3, r3, #7
 8010984:	3308      	adds	r3, #8
 8010986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f003 0307 	and.w	r3, r3, #7
 801098e:	2b00      	cmp	r3, #0
 8010990:	d00b      	beq.n	80109aa <pvPortMalloc+0x6e>
	__asm volatile
 8010992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010996:	f383 8811 	msr	BASEPRI, r3
 801099a:	f3bf 8f6f 	isb	sy
 801099e:	f3bf 8f4f 	dsb	sy
 80109a2:	617b      	str	r3, [r7, #20]
}
 80109a4:	bf00      	nop
 80109a6:	bf00      	nop
 80109a8:	e7fd      	b.n	80109a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d06f      	beq.n	8010a90 <pvPortMalloc+0x154>
 80109b0:	4b45      	ldr	r3, [pc, #276]	@ (8010ac8 <pvPortMalloc+0x18c>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	429a      	cmp	r2, r3
 80109b8:	d86a      	bhi.n	8010a90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80109ba:	4b44      	ldr	r3, [pc, #272]	@ (8010acc <pvPortMalloc+0x190>)
 80109bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80109be:	4b43      	ldr	r3, [pc, #268]	@ (8010acc <pvPortMalloc+0x190>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80109c4:	e004      	b.n	80109d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80109c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80109ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80109d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	687a      	ldr	r2, [r7, #4]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d903      	bls.n	80109e2 <pvPortMalloc+0xa6>
 80109da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d1f1      	bne.n	80109c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80109e2:	4b37      	ldr	r3, [pc, #220]	@ (8010ac0 <pvPortMalloc+0x184>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d051      	beq.n	8010a90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80109ec:	6a3b      	ldr	r3, [r7, #32]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	2208      	movs	r2, #8
 80109f2:	4413      	add	r3, r2
 80109f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80109f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109f8:	681a      	ldr	r2, [r3, #0]
 80109fa:	6a3b      	ldr	r3, [r7, #32]
 80109fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80109fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a00:	685a      	ldr	r2, [r3, #4]
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	1ad2      	subs	r2, r2, r3
 8010a06:	2308      	movs	r3, #8
 8010a08:	005b      	lsls	r3, r3, #1
 8010a0a:	429a      	cmp	r2, r3
 8010a0c:	d920      	bls.n	8010a50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	4413      	add	r3, r2
 8010a14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a16:	69bb      	ldr	r3, [r7, #24]
 8010a18:	f003 0307 	and.w	r3, r3, #7
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d00b      	beq.n	8010a38 <pvPortMalloc+0xfc>
	__asm volatile
 8010a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a24:	f383 8811 	msr	BASEPRI, r3
 8010a28:	f3bf 8f6f 	isb	sy
 8010a2c:	f3bf 8f4f 	dsb	sy
 8010a30:	613b      	str	r3, [r7, #16]
}
 8010a32:	bf00      	nop
 8010a34:	bf00      	nop
 8010a36:	e7fd      	b.n	8010a34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a3a:	685a      	ldr	r2, [r3, #4]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	1ad2      	subs	r2, r2, r3
 8010a40:	69bb      	ldr	r3, [r7, #24]
 8010a42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a46:	687a      	ldr	r2, [r7, #4]
 8010a48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010a4a:	69b8      	ldr	r0, [r7, #24]
 8010a4c:	f000 f90a 	bl	8010c64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010a50:	4b1d      	ldr	r3, [pc, #116]	@ (8010ac8 <pvPortMalloc+0x18c>)
 8010a52:	681a      	ldr	r2, [r3, #0]
 8010a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a56:	685b      	ldr	r3, [r3, #4]
 8010a58:	1ad3      	subs	r3, r2, r3
 8010a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8010ac8 <pvPortMalloc+0x18c>)
 8010a5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8010ac8 <pvPortMalloc+0x18c>)
 8010a60:	681a      	ldr	r2, [r3, #0]
 8010a62:	4b1b      	ldr	r3, [pc, #108]	@ (8010ad0 <pvPortMalloc+0x194>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	429a      	cmp	r2, r3
 8010a68:	d203      	bcs.n	8010a72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010a6a:	4b17      	ldr	r3, [pc, #92]	@ (8010ac8 <pvPortMalloc+0x18c>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	4a18      	ldr	r2, [pc, #96]	@ (8010ad0 <pvPortMalloc+0x194>)
 8010a70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a74:	685a      	ldr	r2, [r3, #4]
 8010a76:	4b13      	ldr	r3, [pc, #76]	@ (8010ac4 <pvPortMalloc+0x188>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	431a      	orrs	r2, r3
 8010a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a82:	2200      	movs	r2, #0
 8010a84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010a86:	4b13      	ldr	r3, [pc, #76]	@ (8010ad4 <pvPortMalloc+0x198>)
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	3301      	adds	r3, #1
 8010a8c:	4a11      	ldr	r2, [pc, #68]	@ (8010ad4 <pvPortMalloc+0x198>)
 8010a8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010a90:	f7fe fbbe 	bl	800f210 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a94:	69fb      	ldr	r3, [r7, #28]
 8010a96:	f003 0307 	and.w	r3, r3, #7
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d00b      	beq.n	8010ab6 <pvPortMalloc+0x17a>
	__asm volatile
 8010a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aa2:	f383 8811 	msr	BASEPRI, r3
 8010aa6:	f3bf 8f6f 	isb	sy
 8010aaa:	f3bf 8f4f 	dsb	sy
 8010aae:	60fb      	str	r3, [r7, #12]
}
 8010ab0:	bf00      	nop
 8010ab2:	bf00      	nop
 8010ab4:	e7fd      	b.n	8010ab2 <pvPortMalloc+0x176>
	return pvReturn;
 8010ab6:	69fb      	ldr	r3, [r7, #28]
}
 8010ab8:	4618      	mov	r0, r3
 8010aba:	3728      	adds	r7, #40	@ 0x28
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}
 8010ac0:	24005064 	.word	0x24005064
 8010ac4:	24005078 	.word	0x24005078
 8010ac8:	24005068 	.word	0x24005068
 8010acc:	2400505c 	.word	0x2400505c
 8010ad0:	2400506c 	.word	0x2400506c
 8010ad4:	24005070 	.word	0x24005070

08010ad8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b086      	sub	sp, #24
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d04f      	beq.n	8010b8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010aea:	2308      	movs	r3, #8
 8010aec:	425b      	negs	r3, r3
 8010aee:	697a      	ldr	r2, [r7, #20]
 8010af0:	4413      	add	r3, r2
 8010af2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010af8:	693b      	ldr	r3, [r7, #16]
 8010afa:	685a      	ldr	r2, [r3, #4]
 8010afc:	4b25      	ldr	r3, [pc, #148]	@ (8010b94 <vPortFree+0xbc>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	4013      	ands	r3, r2
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d10b      	bne.n	8010b1e <vPortFree+0x46>
	__asm volatile
 8010b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b0a:	f383 8811 	msr	BASEPRI, r3
 8010b0e:	f3bf 8f6f 	isb	sy
 8010b12:	f3bf 8f4f 	dsb	sy
 8010b16:	60fb      	str	r3, [r7, #12]
}
 8010b18:	bf00      	nop
 8010b1a:	bf00      	nop
 8010b1c:	e7fd      	b.n	8010b1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d00b      	beq.n	8010b3e <vPortFree+0x66>
	__asm volatile
 8010b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b2a:	f383 8811 	msr	BASEPRI, r3
 8010b2e:	f3bf 8f6f 	isb	sy
 8010b32:	f3bf 8f4f 	dsb	sy
 8010b36:	60bb      	str	r3, [r7, #8]
}
 8010b38:	bf00      	nop
 8010b3a:	bf00      	nop
 8010b3c:	e7fd      	b.n	8010b3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010b3e:	693b      	ldr	r3, [r7, #16]
 8010b40:	685a      	ldr	r2, [r3, #4]
 8010b42:	4b14      	ldr	r3, [pc, #80]	@ (8010b94 <vPortFree+0xbc>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	4013      	ands	r3, r2
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d01e      	beq.n	8010b8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d11a      	bne.n	8010b8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	685a      	ldr	r2, [r3, #4]
 8010b58:	4b0e      	ldr	r3, [pc, #56]	@ (8010b94 <vPortFree+0xbc>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	43db      	mvns	r3, r3
 8010b5e:	401a      	ands	r2, r3
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010b64:	f7fe fb46 	bl	800f1f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	685a      	ldr	r2, [r3, #4]
 8010b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8010b98 <vPortFree+0xc0>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	4413      	add	r3, r2
 8010b72:	4a09      	ldr	r2, [pc, #36]	@ (8010b98 <vPortFree+0xc0>)
 8010b74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010b76:	6938      	ldr	r0, [r7, #16]
 8010b78:	f000 f874 	bl	8010c64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010b7c:	4b07      	ldr	r3, [pc, #28]	@ (8010b9c <vPortFree+0xc4>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	3301      	adds	r3, #1
 8010b82:	4a06      	ldr	r2, [pc, #24]	@ (8010b9c <vPortFree+0xc4>)
 8010b84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010b86:	f7fe fb43 	bl	800f210 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010b8a:	bf00      	nop
 8010b8c:	3718      	adds	r7, #24
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
 8010b92:	bf00      	nop
 8010b94:	24005078 	.word	0x24005078
 8010b98:	24005068 	.word	0x24005068
 8010b9c:	24005074 	.word	0x24005074

08010ba0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	b085      	sub	sp, #20
 8010ba4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010ba6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8010baa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010bac:	4b27      	ldr	r3, [pc, #156]	@ (8010c4c <prvHeapInit+0xac>)
 8010bae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	f003 0307 	and.w	r3, r3, #7
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d00c      	beq.n	8010bd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	3307      	adds	r3, #7
 8010bbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	f023 0307 	bic.w	r3, r3, #7
 8010bc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010bc8:	68ba      	ldr	r2, [r7, #8]
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	1ad3      	subs	r3, r2, r3
 8010bce:	4a1f      	ldr	r2, [pc, #124]	@ (8010c4c <prvHeapInit+0xac>)
 8010bd0:	4413      	add	r3, r2
 8010bd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8010c50 <prvHeapInit+0xb0>)
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010bde:	4b1c      	ldr	r3, [pc, #112]	@ (8010c50 <prvHeapInit+0xb0>)
 8010be0:	2200      	movs	r2, #0
 8010be2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	68ba      	ldr	r2, [r7, #8]
 8010be8:	4413      	add	r3, r2
 8010bea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010bec:	2208      	movs	r2, #8
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	1a9b      	subs	r3, r3, r2
 8010bf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	f023 0307 	bic.w	r3, r3, #7
 8010bfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	4a15      	ldr	r2, [pc, #84]	@ (8010c54 <prvHeapInit+0xb4>)
 8010c00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010c02:	4b14      	ldr	r3, [pc, #80]	@ (8010c54 <prvHeapInit+0xb4>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	2200      	movs	r2, #0
 8010c08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010c0a:	4b12      	ldr	r3, [pc, #72]	@ (8010c54 <prvHeapInit+0xb4>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	68fa      	ldr	r2, [r7, #12]
 8010c1a:	1ad2      	subs	r2, r2, r3
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010c20:	4b0c      	ldr	r3, [pc, #48]	@ (8010c54 <prvHeapInit+0xb4>)
 8010c22:	681a      	ldr	r2, [r3, #0]
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	685b      	ldr	r3, [r3, #4]
 8010c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8010c58 <prvHeapInit+0xb8>)
 8010c2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	685b      	ldr	r3, [r3, #4]
 8010c34:	4a09      	ldr	r2, [pc, #36]	@ (8010c5c <prvHeapInit+0xbc>)
 8010c36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010c38:	4b09      	ldr	r3, [pc, #36]	@ (8010c60 <prvHeapInit+0xc0>)
 8010c3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010c3e:	601a      	str	r2, [r3, #0]
}
 8010c40:	bf00      	nop
 8010c42:	3714      	adds	r7, #20
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr
 8010c4c:	2400145c 	.word	0x2400145c
 8010c50:	2400505c 	.word	0x2400505c
 8010c54:	24005064 	.word	0x24005064
 8010c58:	2400506c 	.word	0x2400506c
 8010c5c:	24005068 	.word	0x24005068
 8010c60:	24005078 	.word	0x24005078

08010c64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010c64:	b480      	push	{r7}
 8010c66:	b085      	sub	sp, #20
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010c6c:	4b28      	ldr	r3, [pc, #160]	@ (8010d10 <prvInsertBlockIntoFreeList+0xac>)
 8010c6e:	60fb      	str	r3, [r7, #12]
 8010c70:	e002      	b.n	8010c78 <prvInsertBlockIntoFreeList+0x14>
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	60fb      	str	r3, [r7, #12]
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d8f7      	bhi.n	8010c72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	685b      	ldr	r3, [r3, #4]
 8010c8a:	68ba      	ldr	r2, [r7, #8]
 8010c8c:	4413      	add	r3, r2
 8010c8e:	687a      	ldr	r2, [r7, #4]
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d108      	bne.n	8010ca6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	685a      	ldr	r2, [r3, #4]
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	441a      	add	r2, r3
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	685b      	ldr	r3, [r3, #4]
 8010cae:	68ba      	ldr	r2, [r7, #8]
 8010cb0:	441a      	add	r2, r3
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d118      	bne.n	8010cec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	681a      	ldr	r2, [r3, #0]
 8010cbe:	4b15      	ldr	r3, [pc, #84]	@ (8010d14 <prvInsertBlockIntoFreeList+0xb0>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	429a      	cmp	r2, r3
 8010cc4:	d00d      	beq.n	8010ce2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	685a      	ldr	r2, [r3, #4]
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	685b      	ldr	r3, [r3, #4]
 8010cd0:	441a      	add	r2, r3
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	681a      	ldr	r2, [r3, #0]
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	601a      	str	r2, [r3, #0]
 8010ce0:	e008      	b.n	8010cf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8010d14 <prvInsertBlockIntoFreeList+0xb0>)
 8010ce4:	681a      	ldr	r2, [r3, #0]
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	601a      	str	r2, [r3, #0]
 8010cea:	e003      	b.n	8010cf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	681a      	ldr	r2, [r3, #0]
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010cf4:	68fa      	ldr	r2, [r7, #12]
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d002      	beq.n	8010d02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	687a      	ldr	r2, [r7, #4]
 8010d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d02:	bf00      	nop
 8010d04:	3714      	adds	r7, #20
 8010d06:	46bd      	mov	sp, r7
 8010d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0c:	4770      	bx	lr
 8010d0e:	bf00      	nop
 8010d10:	2400505c 	.word	0x2400505c
 8010d14:	24005064 	.word	0x24005064

08010d18 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b084      	sub	sp, #16
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
 8010d20:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8010d22:	f007 fb89 	bl	8018438 <sys_timeouts_sleeptime>
 8010d26:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d2e:	d10b      	bne.n	8010d48 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8010d30:	4813      	ldr	r0, [pc, #76]	@ (8010d80 <tcpip_timeouts_mbox_fetch+0x68>)
 8010d32:	f00a f906 	bl	801af42 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8010d36:	2200      	movs	r2, #0
 8010d38:	6839      	ldr	r1, [r7, #0]
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f00a f88e 	bl	801ae5c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010d40:	480f      	ldr	r0, [pc, #60]	@ (8010d80 <tcpip_timeouts_mbox_fetch+0x68>)
 8010d42:	f00a f8ef 	bl	801af24 <sys_mutex_lock>
    return;
 8010d46:	e018      	b.n	8010d7a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d102      	bne.n	8010d54 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8010d4e:	f007 fb39 	bl	80183c4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010d52:	e7e6      	b.n	8010d22 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8010d54:	480a      	ldr	r0, [pc, #40]	@ (8010d80 <tcpip_timeouts_mbox_fetch+0x68>)
 8010d56:	f00a f8f4 	bl	801af42 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8010d5a:	68fa      	ldr	r2, [r7, #12]
 8010d5c:	6839      	ldr	r1, [r7, #0]
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f00a f87c 	bl	801ae5c <sys_arch_mbox_fetch>
 8010d64:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8010d66:	4806      	ldr	r0, [pc, #24]	@ (8010d80 <tcpip_timeouts_mbox_fetch+0x68>)
 8010d68:	f00a f8dc 	bl	801af24 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d72:	d102      	bne.n	8010d7a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010d74:	f007 fb26 	bl	80183c4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010d78:	e7d3      	b.n	8010d22 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8010d7a:	3710      	adds	r7, #16
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}
 8010d80:	24005088 	.word	0x24005088

08010d84 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b084      	sub	sp, #16
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8010d8c:	4810      	ldr	r0, [pc, #64]	@ (8010dd0 <tcpip_thread+0x4c>)
 8010d8e:	f00a f8c9 	bl	801af24 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8010d92:	4b10      	ldr	r3, [pc, #64]	@ (8010dd4 <tcpip_thread+0x50>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d005      	beq.n	8010da6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8010d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8010dd4 <tcpip_thread+0x50>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8010dd8 <tcpip_thread+0x54>)
 8010da0:	6812      	ldr	r2, [r2, #0]
 8010da2:	4610      	mov	r0, r2
 8010da4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010da6:	f107 030c 	add.w	r3, r7, #12
 8010daa:	4619      	mov	r1, r3
 8010dac:	480b      	ldr	r0, [pc, #44]	@ (8010ddc <tcpip_thread+0x58>)
 8010dae:	f7ff ffb3 	bl	8010d18 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d106      	bne.n	8010dc6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010db8:	4b09      	ldr	r3, [pc, #36]	@ (8010de0 <tcpip_thread+0x5c>)
 8010dba:	2291      	movs	r2, #145	@ 0x91
 8010dbc:	4909      	ldr	r1, [pc, #36]	@ (8010de4 <tcpip_thread+0x60>)
 8010dbe:	480a      	ldr	r0, [pc, #40]	@ (8010de8 <tcpip_thread+0x64>)
 8010dc0:	f00a fb48 	bl	801b454 <iprintf>
      continue;
 8010dc4:	e003      	b.n	8010dce <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f000 f80f 	bl	8010dec <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010dce:	e7ea      	b.n	8010da6 <tcpip_thread+0x22>
 8010dd0:	24005088 	.word	0x24005088
 8010dd4:	2400507c 	.word	0x2400507c
 8010dd8:	24005080 	.word	0x24005080
 8010ddc:	24005084 	.word	0x24005084
 8010de0:	0801c814 	.word	0x0801c814
 8010de4:	0801c844 	.word	0x0801c844
 8010de8:	0801c864 	.word	0x0801c864

08010dec <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b082      	sub	sp, #8
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	2b02      	cmp	r3, #2
 8010dfa:	d026      	beq.n	8010e4a <tcpip_thread_handle_msg+0x5e>
 8010dfc:	2b02      	cmp	r3, #2
 8010dfe:	dc2b      	bgt.n	8010e58 <tcpip_thread_handle_msg+0x6c>
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d002      	beq.n	8010e0a <tcpip_thread_handle_msg+0x1e>
 8010e04:	2b01      	cmp	r3, #1
 8010e06:	d015      	beq.n	8010e34 <tcpip_thread_handle_msg+0x48>
 8010e08:	e026      	b.n	8010e58 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	68db      	ldr	r3, [r3, #12]
 8010e0e:	687a      	ldr	r2, [r7, #4]
 8010e10:	6850      	ldr	r0, [r2, #4]
 8010e12:	687a      	ldr	r2, [r7, #4]
 8010e14:	6892      	ldr	r2, [r2, #8]
 8010e16:	4611      	mov	r1, r2
 8010e18:	4798      	blx	r3
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d004      	beq.n	8010e2a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	685b      	ldr	r3, [r3, #4]
 8010e24:	4618      	mov	r0, r3
 8010e26:	f001 fdd3 	bl	80129d0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010e2a:	6879      	ldr	r1, [r7, #4]
 8010e2c:	2009      	movs	r0, #9
 8010e2e:	f000 ff2b 	bl	8011c88 <memp_free>
      break;
 8010e32:	e018      	b.n	8010e66 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	685b      	ldr	r3, [r3, #4]
 8010e38:	687a      	ldr	r2, [r7, #4]
 8010e3a:	6892      	ldr	r2, [r2, #8]
 8010e3c:	4610      	mov	r0, r2
 8010e3e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8010e40:	6879      	ldr	r1, [r7, #4]
 8010e42:	2008      	movs	r0, #8
 8010e44:	f000 ff20 	bl	8011c88 <memp_free>
      break;
 8010e48:	e00d      	b.n	8010e66 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	685b      	ldr	r3, [r3, #4]
 8010e4e:	687a      	ldr	r2, [r7, #4]
 8010e50:	6892      	ldr	r2, [r2, #8]
 8010e52:	4610      	mov	r0, r2
 8010e54:	4798      	blx	r3
      break;
 8010e56:	e006      	b.n	8010e66 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010e58:	4b05      	ldr	r3, [pc, #20]	@ (8010e70 <tcpip_thread_handle_msg+0x84>)
 8010e5a:	22cf      	movs	r2, #207	@ 0xcf
 8010e5c:	4905      	ldr	r1, [pc, #20]	@ (8010e74 <tcpip_thread_handle_msg+0x88>)
 8010e5e:	4806      	ldr	r0, [pc, #24]	@ (8010e78 <tcpip_thread_handle_msg+0x8c>)
 8010e60:	f00a faf8 	bl	801b454 <iprintf>
      break;
 8010e64:	bf00      	nop
  }
}
 8010e66:	bf00      	nop
 8010e68:	3708      	adds	r7, #8
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}
 8010e6e:	bf00      	nop
 8010e70:	0801c814 	.word	0x0801c814
 8010e74:	0801c844 	.word	0x0801c844
 8010e78:	0801c864 	.word	0x0801c864

08010e7c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b086      	sub	sp, #24
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	60f8      	str	r0, [r7, #12]
 8010e84:	60b9      	str	r1, [r7, #8]
 8010e86:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010e88:	481a      	ldr	r0, [pc, #104]	@ (8010ef4 <tcpip_inpkt+0x78>)
 8010e8a:	f00a f818 	bl	801aebe <sys_mbox_valid>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d105      	bne.n	8010ea0 <tcpip_inpkt+0x24>
 8010e94:	4b18      	ldr	r3, [pc, #96]	@ (8010ef8 <tcpip_inpkt+0x7c>)
 8010e96:	22fc      	movs	r2, #252	@ 0xfc
 8010e98:	4918      	ldr	r1, [pc, #96]	@ (8010efc <tcpip_inpkt+0x80>)
 8010e9a:	4819      	ldr	r0, [pc, #100]	@ (8010f00 <tcpip_inpkt+0x84>)
 8010e9c:	f00a fada 	bl	801b454 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8010ea0:	2009      	movs	r0, #9
 8010ea2:	f000 fe7b 	bl	8011b9c <memp_malloc>
 8010ea6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d102      	bne.n	8010eb4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8010eae:	f04f 33ff 	mov.w	r3, #4294967295
 8010eb2:	e01a      	b.n	8010eea <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8010eb4:	697b      	ldr	r3, [r7, #20]
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	68fa      	ldr	r2, [r7, #12]
 8010ebe:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	68ba      	ldr	r2, [r7, #8]
 8010ec4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	687a      	ldr	r2, [r7, #4]
 8010eca:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010ecc:	6979      	ldr	r1, [r7, #20]
 8010ece:	4809      	ldr	r0, [pc, #36]	@ (8010ef4 <tcpip_inpkt+0x78>)
 8010ed0:	f009 ffaa 	bl	801ae28 <sys_mbox_trypost>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d006      	beq.n	8010ee8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010eda:	6979      	ldr	r1, [r7, #20]
 8010edc:	2009      	movs	r0, #9
 8010ede:	f000 fed3 	bl	8011c88 <memp_free>
    return ERR_MEM;
 8010ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ee6:	e000      	b.n	8010eea <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8010ee8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3718      	adds	r7, #24
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	24005084 	.word	0x24005084
 8010ef8:	0801c814 	.word	0x0801c814
 8010efc:	0801c88c 	.word	0x0801c88c
 8010f00:	0801c864 	.word	0x0801c864

08010f04 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b082      	sub	sp, #8
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010f14:	f003 0318 	and.w	r3, r3, #24
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d006      	beq.n	8010f2a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8010f1c:	4a08      	ldr	r2, [pc, #32]	@ (8010f40 <tcpip_input+0x3c>)
 8010f1e:	6839      	ldr	r1, [r7, #0]
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f7ff ffab 	bl	8010e7c <tcpip_inpkt>
 8010f26:	4603      	mov	r3, r0
 8010f28:	e005      	b.n	8010f36 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8010f2a:	4a06      	ldr	r2, [pc, #24]	@ (8010f44 <tcpip_input+0x40>)
 8010f2c:	6839      	ldr	r1, [r7, #0]
 8010f2e:	6878      	ldr	r0, [r7, #4]
 8010f30:	f7ff ffa4 	bl	8010e7c <tcpip_inpkt>
 8010f34:	4603      	mov	r3, r0
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3708      	adds	r7, #8
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}
 8010f3e:	bf00      	nop
 8010f40:	0801ac49 	.word	0x0801ac49
 8010f44:	08019b51 	.word	0x08019b51

08010f48 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b084      	sub	sp, #16
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010f52:	4819      	ldr	r0, [pc, #100]	@ (8010fb8 <tcpip_try_callback+0x70>)
 8010f54:	f009 ffb3 	bl	801aebe <sys_mbox_valid>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d106      	bne.n	8010f6c <tcpip_try_callback+0x24>
 8010f5e:	4b17      	ldr	r3, [pc, #92]	@ (8010fbc <tcpip_try_callback+0x74>)
 8010f60:	f240 125d 	movw	r2, #349	@ 0x15d
 8010f64:	4916      	ldr	r1, [pc, #88]	@ (8010fc0 <tcpip_try_callback+0x78>)
 8010f66:	4817      	ldr	r0, [pc, #92]	@ (8010fc4 <tcpip_try_callback+0x7c>)
 8010f68:	f00a fa74 	bl	801b454 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8010f6c:	2008      	movs	r0, #8
 8010f6e:	f000 fe15 	bl	8011b9c <memp_malloc>
 8010f72:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d102      	bne.n	8010f80 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8010f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8010f7e:	e017      	b.n	8010fb0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	2201      	movs	r2, #1
 8010f84:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	683a      	ldr	r2, [r7, #0]
 8010f90:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010f92:	68f9      	ldr	r1, [r7, #12]
 8010f94:	4808      	ldr	r0, [pc, #32]	@ (8010fb8 <tcpip_try_callback+0x70>)
 8010f96:	f009 ff47 	bl	801ae28 <sys_mbox_trypost>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d006      	beq.n	8010fae <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8010fa0:	68f9      	ldr	r1, [r7, #12]
 8010fa2:	2008      	movs	r0, #8
 8010fa4:	f000 fe70 	bl	8011c88 <memp_free>
    return ERR_MEM;
 8010fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8010fac:	e000      	b.n	8010fb0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8010fae:	2300      	movs	r3, #0
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3710      	adds	r7, #16
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}
 8010fb8:	24005084 	.word	0x24005084
 8010fbc:	0801c814 	.word	0x0801c814
 8010fc0:	0801c88c 	.word	0x0801c88c
 8010fc4:	0801c864 	.word	0x0801c864

08010fc8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b084      	sub	sp, #16
 8010fcc:	af02      	add	r7, sp, #8
 8010fce:	6078      	str	r0, [r7, #4]
 8010fd0:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010fd2:	f000 f92e 	bl	8011232 <lwip_init>

  tcpip_init_done = initfunc;
 8010fd6:	4a17      	ldr	r2, [pc, #92]	@ (8011034 <tcpip_init+0x6c>)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8010fdc:	4a16      	ldr	r2, [pc, #88]	@ (8011038 <tcpip_init+0x70>)
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8010fe2:	2106      	movs	r1, #6
 8010fe4:	4815      	ldr	r0, [pc, #84]	@ (801103c <tcpip_init+0x74>)
 8010fe6:	f009 ff05 	bl	801adf4 <sys_mbox_new>
 8010fea:	4603      	mov	r3, r0
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d006      	beq.n	8010ffe <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010ff0:	4b13      	ldr	r3, [pc, #76]	@ (8011040 <tcpip_init+0x78>)
 8010ff2:	f240 2261 	movw	r2, #609	@ 0x261
 8010ff6:	4913      	ldr	r1, [pc, #76]	@ (8011044 <tcpip_init+0x7c>)
 8010ff8:	4813      	ldr	r0, [pc, #76]	@ (8011048 <tcpip_init+0x80>)
 8010ffa:	f00a fa2b 	bl	801b454 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8010ffe:	4813      	ldr	r0, [pc, #76]	@ (801104c <tcpip_init+0x84>)
 8011000:	f009 ff7a 	bl	801aef8 <sys_mutex_new>
 8011004:	4603      	mov	r3, r0
 8011006:	2b00      	cmp	r3, #0
 8011008:	d006      	beq.n	8011018 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801100a:	4b0d      	ldr	r3, [pc, #52]	@ (8011040 <tcpip_init+0x78>)
 801100c:	f240 2265 	movw	r2, #613	@ 0x265
 8011010:	490f      	ldr	r1, [pc, #60]	@ (8011050 <tcpip_init+0x88>)
 8011012:	480d      	ldr	r0, [pc, #52]	@ (8011048 <tcpip_init+0x80>)
 8011014:	f00a fa1e 	bl	801b454 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8011018:	2318      	movs	r3, #24
 801101a:	9300      	str	r3, [sp, #0]
 801101c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011020:	2200      	movs	r2, #0
 8011022:	490c      	ldr	r1, [pc, #48]	@ (8011054 <tcpip_init+0x8c>)
 8011024:	480c      	ldr	r0, [pc, #48]	@ (8011058 <tcpip_init+0x90>)
 8011026:	f009 ff99 	bl	801af5c <sys_thread_new>
}
 801102a:	bf00      	nop
 801102c:	3708      	adds	r7, #8
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
 8011032:	bf00      	nop
 8011034:	2400507c 	.word	0x2400507c
 8011038:	24005080 	.word	0x24005080
 801103c:	24005084 	.word	0x24005084
 8011040:	0801c814 	.word	0x0801c814
 8011044:	0801c89c 	.word	0x0801c89c
 8011048:	0801c864 	.word	0x0801c864
 801104c:	24005088 	.word	0x24005088
 8011050:	0801c8c0 	.word	0x0801c8c0
 8011054:	08010d85 	.word	0x08010d85
 8011058:	0801c8e4 	.word	0x0801c8e4

0801105c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801105c:	b480      	push	{r7}
 801105e:	b083      	sub	sp, #12
 8011060:	af00      	add	r7, sp, #0
 8011062:	4603      	mov	r3, r0
 8011064:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8011066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801106a:	021b      	lsls	r3, r3, #8
 801106c:	b21a      	sxth	r2, r3
 801106e:	88fb      	ldrh	r3, [r7, #6]
 8011070:	0a1b      	lsrs	r3, r3, #8
 8011072:	b29b      	uxth	r3, r3
 8011074:	b21b      	sxth	r3, r3
 8011076:	4313      	orrs	r3, r2
 8011078:	b21b      	sxth	r3, r3
 801107a:	b29b      	uxth	r3, r3
}
 801107c:	4618      	mov	r0, r3
 801107e:	370c      	adds	r7, #12
 8011080:	46bd      	mov	sp, r7
 8011082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011086:	4770      	bx	lr

08011088 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8011088:	b480      	push	{r7}
 801108a:	b083      	sub	sp, #12
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	061a      	lsls	r2, r3, #24
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	021b      	lsls	r3, r3, #8
 8011098:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801109c:	431a      	orrs	r2, r3
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	0a1b      	lsrs	r3, r3, #8
 80110a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80110a6:	431a      	orrs	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	0e1b      	lsrs	r3, r3, #24
 80110ac:	4313      	orrs	r3, r2
}
 80110ae:	4618      	mov	r0, r3
 80110b0:	370c      	adds	r7, #12
 80110b2:	46bd      	mov	sp, r7
 80110b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b8:	4770      	bx	lr

080110ba <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80110ba:	b480      	push	{r7}
 80110bc:	b089      	sub	sp, #36	@ 0x24
 80110be:	af00      	add	r7, sp, #0
 80110c0:	6078      	str	r0, [r7, #4]
 80110c2:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80110c8:	2300      	movs	r3, #0
 80110ca:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80110cc:	2300      	movs	r3, #0
 80110ce:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80110d0:	69fb      	ldr	r3, [r7, #28]
 80110d2:	f003 0301 	and.w	r3, r3, #1
 80110d6:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80110d8:	693b      	ldr	r3, [r7, #16]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d00d      	beq.n	80110fa <lwip_standard_chksum+0x40>
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	dd0a      	ble.n	80110fa <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80110e4:	69fa      	ldr	r2, [r7, #28]
 80110e6:	1c53      	adds	r3, r2, #1
 80110e8:	61fb      	str	r3, [r7, #28]
 80110ea:	f107 030e 	add.w	r3, r7, #14
 80110ee:	3301      	adds	r3, #1
 80110f0:	7812      	ldrb	r2, [r2, #0]
 80110f2:	701a      	strb	r2, [r3, #0]
    len--;
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	3b01      	subs	r3, #1
 80110f8:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80110fa:	69fb      	ldr	r3, [r7, #28]
 80110fc:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80110fe:	e00a      	b.n	8011116 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8011100:	69bb      	ldr	r3, [r7, #24]
 8011102:	1c9a      	adds	r2, r3, #2
 8011104:	61ba      	str	r2, [r7, #24]
 8011106:	881b      	ldrh	r3, [r3, #0]
 8011108:	461a      	mov	r2, r3
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	4413      	add	r3, r2
 801110e:	617b      	str	r3, [r7, #20]
    len -= 2;
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	3b02      	subs	r3, #2
 8011114:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	2b01      	cmp	r3, #1
 801111a:	dcf1      	bgt.n	8011100 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	2b00      	cmp	r3, #0
 8011120:	dd04      	ble.n	801112c <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8011122:	f107 030e 	add.w	r3, r7, #14
 8011126:	69ba      	ldr	r2, [r7, #24]
 8011128:	7812      	ldrb	r2, [r2, #0]
 801112a:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801112c:	89fb      	ldrh	r3, [r7, #14]
 801112e:	461a      	mov	r2, r3
 8011130:	697b      	ldr	r3, [r7, #20]
 8011132:	4413      	add	r3, r2
 8011134:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	0c1a      	lsrs	r2, r3, #16
 801113a:	697b      	ldr	r3, [r7, #20]
 801113c:	b29b      	uxth	r3, r3
 801113e:	4413      	add	r3, r2
 8011140:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	0c1a      	lsrs	r2, r3, #16
 8011146:	697b      	ldr	r3, [r7, #20]
 8011148:	b29b      	uxth	r3, r3
 801114a:	4413      	add	r3, r2
 801114c:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d007      	beq.n	8011164 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8011154:	697b      	ldr	r3, [r7, #20]
 8011156:	021b      	lsls	r3, r3, #8
 8011158:	b29a      	uxth	r2, r3
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	0a1b      	lsrs	r3, r3, #8
 801115e:	b2db      	uxtb	r3, r3
 8011160:	4313      	orrs	r3, r2
 8011162:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	b29b      	uxth	r3, r3
}
 8011168:	4618      	mov	r0, r3
 801116a:	3724      	adds	r7, #36	@ 0x24
 801116c:	46bd      	mov	sp, r7
 801116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011172:	4770      	bx	lr

08011174 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	460b      	mov	r3, r1
 801117e:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8011180:	887b      	ldrh	r3, [r7, #2]
 8011182:	4619      	mov	r1, r3
 8011184:	6878      	ldr	r0, [r7, #4]
 8011186:	f7ff ff98 	bl	80110ba <lwip_standard_chksum>
 801118a:	4603      	mov	r3, r0
 801118c:	43db      	mvns	r3, r3
 801118e:	b29b      	uxth	r3, r3
}
 8011190:	4618      	mov	r0, r3
 8011192:	3708      	adds	r7, #8
 8011194:	46bd      	mov	sp, r7
 8011196:	bd80      	pop	{r7, pc}

08011198 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b086      	sub	sp, #24
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80111a0:	2300      	movs	r3, #0
 80111a2:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80111a4:	2300      	movs	r3, #0
 80111a6:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	613b      	str	r3, [r7, #16]
 80111ac:	e02b      	b.n	8011206 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	685a      	ldr	r2, [r3, #4]
 80111b2:	693b      	ldr	r3, [r7, #16]
 80111b4:	895b      	ldrh	r3, [r3, #10]
 80111b6:	4619      	mov	r1, r3
 80111b8:	4610      	mov	r0, r2
 80111ba:	f7ff ff7e 	bl	80110ba <lwip_standard_chksum>
 80111be:	4603      	mov	r3, r0
 80111c0:	461a      	mov	r2, r3
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	4413      	add	r3, r2
 80111c6:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	0c1a      	lsrs	r2, r3, #16
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	b29b      	uxth	r3, r3
 80111d0:	4413      	add	r3, r2
 80111d2:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	895b      	ldrh	r3, [r3, #10]
 80111d8:	f003 0301 	and.w	r3, r3, #1
 80111dc:	b29b      	uxth	r3, r3
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d00e      	beq.n	8011200 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	bf0c      	ite	eq
 80111e8:	2301      	moveq	r3, #1
 80111ea:	2300      	movne	r3, #0
 80111ec:	b2db      	uxtb	r3, r3
 80111ee:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	021b      	lsls	r3, r3, #8
 80111f4:	b29a      	uxth	r2, r3
 80111f6:	697b      	ldr	r3, [r7, #20]
 80111f8:	0a1b      	lsrs	r3, r3, #8
 80111fa:	b2db      	uxtb	r3, r3
 80111fc:	4313      	orrs	r3, r2
 80111fe:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8011200:	693b      	ldr	r3, [r7, #16]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	613b      	str	r3, [r7, #16]
 8011206:	693b      	ldr	r3, [r7, #16]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d1d0      	bne.n	80111ae <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d007      	beq.n	8011222 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	021b      	lsls	r3, r3, #8
 8011216:	b29a      	uxth	r2, r3
 8011218:	697b      	ldr	r3, [r7, #20]
 801121a:	0a1b      	lsrs	r3, r3, #8
 801121c:	b2db      	uxtb	r3, r3
 801121e:	4313      	orrs	r3, r2
 8011220:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8011222:	697b      	ldr	r3, [r7, #20]
 8011224:	b29b      	uxth	r3, r3
 8011226:	43db      	mvns	r3, r3
 8011228:	b29b      	uxth	r3, r3
}
 801122a:	4618      	mov	r0, r3
 801122c:	3718      	adds	r7, #24
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}

08011232 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8011232:	b580      	push	{r7, lr}
 8011234:	b082      	sub	sp, #8
 8011236:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8011238:	2300      	movs	r3, #0
 801123a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801123c:	f009 fe50 	bl	801aee0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8011240:	f000 f8d8 	bl	80113f4 <mem_init>
  memp_init();
 8011244:	f000 fc3c 	bl	8011ac0 <memp_init>
  pbuf_init();
  netif_init();
 8011248:	f000 fd48 	bl	8011cdc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801124c:	f007 f92c 	bl	80184a8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8011250:	f001 fe58 	bl	8012f04 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8011254:	f007 f86e 	bl	8018334 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8011258:	bf00      	nop
 801125a:	3708      	adds	r7, #8
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}

08011260 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011260:	b480      	push	{r7}
 8011262:	b083      	sub	sp, #12
 8011264:	af00      	add	r7, sp, #0
 8011266:	4603      	mov	r3, r0
 8011268:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801126a:	4b05      	ldr	r3, [pc, #20]	@ (8011280 <ptr_to_mem+0x20>)
 801126c:	681a      	ldr	r2, [r3, #0]
 801126e:	88fb      	ldrh	r3, [r7, #6]
 8011270:	4413      	add	r3, r2
}
 8011272:	4618      	mov	r0, r3
 8011274:	370c      	adds	r7, #12
 8011276:	46bd      	mov	sp, r7
 8011278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127c:	4770      	bx	lr
 801127e:	bf00      	nop
 8011280:	240050a4 	.word	0x240050a4

08011284 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8011284:	b480      	push	{r7}
 8011286:	b083      	sub	sp, #12
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801128c:	4b05      	ldr	r3, [pc, #20]	@ (80112a4 <mem_to_ptr+0x20>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	687a      	ldr	r2, [r7, #4]
 8011292:	1ad3      	subs	r3, r2, r3
 8011294:	b29b      	uxth	r3, r3
}
 8011296:	4618      	mov	r0, r3
 8011298:	370c      	adds	r7, #12
 801129a:	46bd      	mov	sp, r7
 801129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a0:	4770      	bx	lr
 80112a2:	bf00      	nop
 80112a4:	240050a4 	.word	0x240050a4

080112a8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80112a8:	b590      	push	{r4, r7, lr}
 80112aa:	b085      	sub	sp, #20
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80112b0:	4b47      	ldr	r3, [pc, #284]	@ (80113d0 <plug_holes+0x128>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	687a      	ldr	r2, [r7, #4]
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d206      	bcs.n	80112c8 <plug_holes+0x20>
 80112ba:	4b46      	ldr	r3, [pc, #280]	@ (80113d4 <plug_holes+0x12c>)
 80112bc:	f240 12df 	movw	r2, #479	@ 0x1df
 80112c0:	4945      	ldr	r1, [pc, #276]	@ (80113d8 <plug_holes+0x130>)
 80112c2:	4846      	ldr	r0, [pc, #280]	@ (80113dc <plug_holes+0x134>)
 80112c4:	f00a f8c6 	bl	801b454 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80112c8:	4b45      	ldr	r3, [pc, #276]	@ (80113e0 <plug_holes+0x138>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	687a      	ldr	r2, [r7, #4]
 80112ce:	429a      	cmp	r2, r3
 80112d0:	d306      	bcc.n	80112e0 <plug_holes+0x38>
 80112d2:	4b40      	ldr	r3, [pc, #256]	@ (80113d4 <plug_holes+0x12c>)
 80112d4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80112d8:	4942      	ldr	r1, [pc, #264]	@ (80113e4 <plug_holes+0x13c>)
 80112da:	4840      	ldr	r0, [pc, #256]	@ (80113dc <plug_holes+0x134>)
 80112dc:	f00a f8ba 	bl	801b454 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	791b      	ldrb	r3, [r3, #4]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d006      	beq.n	80112f6 <plug_holes+0x4e>
 80112e8:	4b3a      	ldr	r3, [pc, #232]	@ (80113d4 <plug_holes+0x12c>)
 80112ea:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80112ee:	493e      	ldr	r1, [pc, #248]	@ (80113e8 <plug_holes+0x140>)
 80112f0:	483a      	ldr	r0, [pc, #232]	@ (80113dc <plug_holes+0x134>)
 80112f2:	f00a f8af 	bl	801b454 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	881b      	ldrh	r3, [r3, #0]
 80112fa:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 80112fe:	4293      	cmp	r3, r2
 8011300:	d906      	bls.n	8011310 <plug_holes+0x68>
 8011302:	4b34      	ldr	r3, [pc, #208]	@ (80113d4 <plug_holes+0x12c>)
 8011304:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8011308:	4938      	ldr	r1, [pc, #224]	@ (80113ec <plug_holes+0x144>)
 801130a:	4834      	ldr	r0, [pc, #208]	@ (80113dc <plug_holes+0x134>)
 801130c:	f00a f8a2 	bl	801b454 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	881b      	ldrh	r3, [r3, #0]
 8011314:	4618      	mov	r0, r3
 8011316:	f7ff ffa3 	bl	8011260 <ptr_to_mem>
 801131a:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801131c:	687a      	ldr	r2, [r7, #4]
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	429a      	cmp	r2, r3
 8011322:	d025      	beq.n	8011370 <plug_holes+0xc8>
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	791b      	ldrb	r3, [r3, #4]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d121      	bne.n	8011370 <plug_holes+0xc8>
 801132c:	4b2c      	ldr	r3, [pc, #176]	@ (80113e0 <plug_holes+0x138>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	68fa      	ldr	r2, [r7, #12]
 8011332:	429a      	cmp	r2, r3
 8011334:	d01c      	beq.n	8011370 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8011336:	4b2e      	ldr	r3, [pc, #184]	@ (80113f0 <plug_holes+0x148>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	68fa      	ldr	r2, [r7, #12]
 801133c:	429a      	cmp	r2, r3
 801133e:	d102      	bne.n	8011346 <plug_holes+0x9e>
      lfree = mem;
 8011340:	4a2b      	ldr	r2, [pc, #172]	@ (80113f0 <plug_holes+0x148>)
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	881a      	ldrh	r2, [r3, #0]
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	881b      	ldrh	r3, [r3, #0]
 8011352:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8011356:	4293      	cmp	r3, r2
 8011358:	d00a      	beq.n	8011370 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	881b      	ldrh	r3, [r3, #0]
 801135e:	4618      	mov	r0, r3
 8011360:	f7ff ff7e 	bl	8011260 <ptr_to_mem>
 8011364:	4604      	mov	r4, r0
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f7ff ff8c 	bl	8011284 <mem_to_ptr>
 801136c:	4603      	mov	r3, r0
 801136e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	885b      	ldrh	r3, [r3, #2]
 8011374:	4618      	mov	r0, r3
 8011376:	f7ff ff73 	bl	8011260 <ptr_to_mem>
 801137a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801137c:	68ba      	ldr	r2, [r7, #8]
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	429a      	cmp	r2, r3
 8011382:	d020      	beq.n	80113c6 <plug_holes+0x11e>
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	791b      	ldrb	r3, [r3, #4]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d11c      	bne.n	80113c6 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801138c:	4b18      	ldr	r3, [pc, #96]	@ (80113f0 <plug_holes+0x148>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	687a      	ldr	r2, [r7, #4]
 8011392:	429a      	cmp	r2, r3
 8011394:	d102      	bne.n	801139c <plug_holes+0xf4>
      lfree = pmem;
 8011396:	4a16      	ldr	r2, [pc, #88]	@ (80113f0 <plug_holes+0x148>)
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	881a      	ldrh	r2, [r3, #0]
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	881b      	ldrh	r3, [r3, #0]
 80113a8:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 80113ac:	4293      	cmp	r3, r2
 80113ae:	d00a      	beq.n	80113c6 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	881b      	ldrh	r3, [r3, #0]
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7ff ff53 	bl	8011260 <ptr_to_mem>
 80113ba:	4604      	mov	r4, r0
 80113bc:	68b8      	ldr	r0, [r7, #8]
 80113be:	f7ff ff61 	bl	8011284 <mem_to_ptr>
 80113c2:	4603      	mov	r3, r0
 80113c4:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80113c6:	bf00      	nop
 80113c8:	3714      	adds	r7, #20
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd90      	pop	{r4, r7, pc}
 80113ce:	bf00      	nop
 80113d0:	240050a4 	.word	0x240050a4
 80113d4:	0801c8f4 	.word	0x0801c8f4
 80113d8:	0801c924 	.word	0x0801c924
 80113dc:	0801c93c 	.word	0x0801c93c
 80113e0:	240050a8 	.word	0x240050a8
 80113e4:	0801c964 	.word	0x0801c964
 80113e8:	0801c980 	.word	0x0801c980
 80113ec:	0801c99c 	.word	0x0801c99c
 80113f0:	240050b0 	.word	0x240050b0

080113f4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b082      	sub	sp, #8
 80113f8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80113fa:	4b1d      	ldr	r3, [pc, #116]	@ (8011470 <mem_init+0x7c>)
 80113fc:	4a1d      	ldr	r2, [pc, #116]	@ (8011474 <mem_init+0x80>)
 80113fe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8011400:	4b1b      	ldr	r3, [pc, #108]	@ (8011470 <mem_init+0x7c>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 801140c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	2200      	movs	r2, #0
 8011412:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2200      	movs	r2, #0
 8011418:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801141a:	f647 50e8 	movw	r0, #32232	@ 0x7de8
 801141e:	f7ff ff1f 	bl	8011260 <ptr_to_mem>
 8011422:	4603      	mov	r3, r0
 8011424:	4a14      	ldr	r2, [pc, #80]	@ (8011478 <mem_init+0x84>)
 8011426:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8011428:	4b13      	ldr	r3, [pc, #76]	@ (8011478 <mem_init+0x84>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	2201      	movs	r2, #1
 801142e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011430:	4b11      	ldr	r3, [pc, #68]	@ (8011478 <mem_init+0x84>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8011438:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801143a:	4b0f      	ldr	r3, [pc, #60]	@ (8011478 <mem_init+0x84>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8011442:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011444:	4b0a      	ldr	r3, [pc, #40]	@ (8011470 <mem_init+0x7c>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	4a0c      	ldr	r2, [pc, #48]	@ (801147c <mem_init+0x88>)
 801144a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801144c:	480c      	ldr	r0, [pc, #48]	@ (8011480 <mem_init+0x8c>)
 801144e:	f009 fd53 	bl	801aef8 <sys_mutex_new>
 8011452:	4603      	mov	r3, r0
 8011454:	2b00      	cmp	r3, #0
 8011456:	d006      	beq.n	8011466 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011458:	4b0a      	ldr	r3, [pc, #40]	@ (8011484 <mem_init+0x90>)
 801145a:	f240 221f 	movw	r2, #543	@ 0x21f
 801145e:	490a      	ldr	r1, [pc, #40]	@ (8011488 <mem_init+0x94>)
 8011460:	480a      	ldr	r0, [pc, #40]	@ (801148c <mem_init+0x98>)
 8011462:	f009 fff7 	bl	801b454 <iprintf>
  }
}
 8011466:	bf00      	nop
 8011468:	3708      	adds	r7, #8
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}
 801146e:	bf00      	nop
 8011470:	240050a4 	.word	0x240050a4
 8011474:	30000200 	.word	0x30000200
 8011478:	240050a8 	.word	0x240050a8
 801147c:	240050b0 	.word	0x240050b0
 8011480:	240050ac 	.word	0x240050ac
 8011484:	0801c8f4 	.word	0x0801c8f4
 8011488:	0801c9c8 	.word	0x0801c9c8
 801148c:	0801c93c 	.word	0x0801c93c

08011490 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b086      	sub	sp, #24
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011498:	6878      	ldr	r0, [r7, #4]
 801149a:	f7ff fef3 	bl	8011284 <mem_to_ptr>
 801149e:	4603      	mov	r3, r0
 80114a0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	881b      	ldrh	r3, [r3, #0]
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7ff feda 	bl	8011260 <ptr_to_mem>
 80114ac:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	885b      	ldrh	r3, [r3, #2]
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7ff fed4 	bl	8011260 <ptr_to_mem>
 80114b8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	881b      	ldrh	r3, [r3, #0]
 80114be:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 80114c2:	4293      	cmp	r3, r2
 80114c4:	d819      	bhi.n	80114fa <mem_link_valid+0x6a>
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	885b      	ldrh	r3, [r3, #2]
 80114ca:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 80114ce:	4293      	cmp	r3, r2
 80114d0:	d813      	bhi.n	80114fa <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80114d6:	8afa      	ldrh	r2, [r7, #22]
 80114d8:	429a      	cmp	r2, r3
 80114da:	d004      	beq.n	80114e6 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	881b      	ldrh	r3, [r3, #0]
 80114e0:	8afa      	ldrh	r2, [r7, #22]
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d109      	bne.n	80114fa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80114e6:	4b08      	ldr	r3, [pc, #32]	@ (8011508 <mem_link_valid+0x78>)
 80114e8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80114ea:	693a      	ldr	r2, [r7, #16]
 80114ec:	429a      	cmp	r2, r3
 80114ee:	d006      	beq.n	80114fe <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	885b      	ldrh	r3, [r3, #2]
 80114f4:	8afa      	ldrh	r2, [r7, #22]
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d001      	beq.n	80114fe <mem_link_valid+0x6e>
    return 0;
 80114fa:	2300      	movs	r3, #0
 80114fc:	e000      	b.n	8011500 <mem_link_valid+0x70>
  }
  return 1;
 80114fe:	2301      	movs	r3, #1
}
 8011500:	4618      	mov	r0, r3
 8011502:	3718      	adds	r7, #24
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}
 8011508:	240050a8 	.word	0x240050a8

0801150c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b088      	sub	sp, #32
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d070      	beq.n	80115fc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	f003 0303 	and.w	r3, r3, #3
 8011520:	2b00      	cmp	r3, #0
 8011522:	d00d      	beq.n	8011540 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011524:	4b37      	ldr	r3, [pc, #220]	@ (8011604 <mem_free+0xf8>)
 8011526:	f240 2273 	movw	r2, #627	@ 0x273
 801152a:	4937      	ldr	r1, [pc, #220]	@ (8011608 <mem_free+0xfc>)
 801152c:	4837      	ldr	r0, [pc, #220]	@ (801160c <mem_free+0x100>)
 801152e:	f009 ff91 	bl	801b454 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011532:	f009 fd33 	bl	801af9c <sys_arch_protect>
 8011536:	60f8      	str	r0, [r7, #12]
 8011538:	68f8      	ldr	r0, [r7, #12]
 801153a:	f009 fd3d 	bl	801afb8 <sys_arch_unprotect>
    return;
 801153e:	e05e      	b.n	80115fe <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	3b08      	subs	r3, #8
 8011544:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8011546:	4b32      	ldr	r3, [pc, #200]	@ (8011610 <mem_free+0x104>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	69fa      	ldr	r2, [r7, #28]
 801154c:	429a      	cmp	r2, r3
 801154e:	d306      	bcc.n	801155e <mem_free+0x52>
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f103 020c 	add.w	r2, r3, #12
 8011556:	4b2f      	ldr	r3, [pc, #188]	@ (8011614 <mem_free+0x108>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	429a      	cmp	r2, r3
 801155c:	d90d      	bls.n	801157a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801155e:	4b29      	ldr	r3, [pc, #164]	@ (8011604 <mem_free+0xf8>)
 8011560:	f240 227f 	movw	r2, #639	@ 0x27f
 8011564:	492c      	ldr	r1, [pc, #176]	@ (8011618 <mem_free+0x10c>)
 8011566:	4829      	ldr	r0, [pc, #164]	@ (801160c <mem_free+0x100>)
 8011568:	f009 ff74 	bl	801b454 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801156c:	f009 fd16 	bl	801af9c <sys_arch_protect>
 8011570:	6138      	str	r0, [r7, #16]
 8011572:	6938      	ldr	r0, [r7, #16]
 8011574:	f009 fd20 	bl	801afb8 <sys_arch_unprotect>
    return;
 8011578:	e041      	b.n	80115fe <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801157a:	4828      	ldr	r0, [pc, #160]	@ (801161c <mem_free+0x110>)
 801157c:	f009 fcd2 	bl	801af24 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011580:	69fb      	ldr	r3, [r7, #28]
 8011582:	791b      	ldrb	r3, [r3, #4]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d110      	bne.n	80115aa <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011588:	4b1e      	ldr	r3, [pc, #120]	@ (8011604 <mem_free+0xf8>)
 801158a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 801158e:	4924      	ldr	r1, [pc, #144]	@ (8011620 <mem_free+0x114>)
 8011590:	481e      	ldr	r0, [pc, #120]	@ (801160c <mem_free+0x100>)
 8011592:	f009 ff5f 	bl	801b454 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011596:	4821      	ldr	r0, [pc, #132]	@ (801161c <mem_free+0x110>)
 8011598:	f009 fcd3 	bl	801af42 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801159c:	f009 fcfe 	bl	801af9c <sys_arch_protect>
 80115a0:	6178      	str	r0, [r7, #20]
 80115a2:	6978      	ldr	r0, [r7, #20]
 80115a4:	f009 fd08 	bl	801afb8 <sys_arch_unprotect>
    return;
 80115a8:	e029      	b.n	80115fe <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80115aa:	69f8      	ldr	r0, [r7, #28]
 80115ac:	f7ff ff70 	bl	8011490 <mem_link_valid>
 80115b0:	4603      	mov	r3, r0
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d110      	bne.n	80115d8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80115b6:	4b13      	ldr	r3, [pc, #76]	@ (8011604 <mem_free+0xf8>)
 80115b8:	f240 2295 	movw	r2, #661	@ 0x295
 80115bc:	4919      	ldr	r1, [pc, #100]	@ (8011624 <mem_free+0x118>)
 80115be:	4813      	ldr	r0, [pc, #76]	@ (801160c <mem_free+0x100>)
 80115c0:	f009 ff48 	bl	801b454 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80115c4:	4815      	ldr	r0, [pc, #84]	@ (801161c <mem_free+0x110>)
 80115c6:	f009 fcbc 	bl	801af42 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80115ca:	f009 fce7 	bl	801af9c <sys_arch_protect>
 80115ce:	61b8      	str	r0, [r7, #24]
 80115d0:	69b8      	ldr	r0, [r7, #24]
 80115d2:	f009 fcf1 	bl	801afb8 <sys_arch_unprotect>
    return;
 80115d6:	e012      	b.n	80115fe <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80115d8:	69fb      	ldr	r3, [r7, #28]
 80115da:	2200      	movs	r2, #0
 80115dc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80115de:	4b12      	ldr	r3, [pc, #72]	@ (8011628 <mem_free+0x11c>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	69fa      	ldr	r2, [r7, #28]
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d202      	bcs.n	80115ee <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80115e8:	4a0f      	ldr	r2, [pc, #60]	@ (8011628 <mem_free+0x11c>)
 80115ea:	69fb      	ldr	r3, [r7, #28]
 80115ec:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80115ee:	69f8      	ldr	r0, [r7, #28]
 80115f0:	f7ff fe5a 	bl	80112a8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80115f4:	4809      	ldr	r0, [pc, #36]	@ (801161c <mem_free+0x110>)
 80115f6:	f009 fca4 	bl	801af42 <sys_mutex_unlock>
 80115fa:	e000      	b.n	80115fe <mem_free+0xf2>
    return;
 80115fc:	bf00      	nop
}
 80115fe:	3720      	adds	r7, #32
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}
 8011604:	0801c8f4 	.word	0x0801c8f4
 8011608:	0801c9e4 	.word	0x0801c9e4
 801160c:	0801c93c 	.word	0x0801c93c
 8011610:	240050a4 	.word	0x240050a4
 8011614:	240050a8 	.word	0x240050a8
 8011618:	0801ca08 	.word	0x0801ca08
 801161c:	240050ac 	.word	0x240050ac
 8011620:	0801ca24 	.word	0x0801ca24
 8011624:	0801ca4c 	.word	0x0801ca4c
 8011628:	240050b0 	.word	0x240050b0

0801162c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b088      	sub	sp, #32
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	460b      	mov	r3, r1
 8011636:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8011638:	887b      	ldrh	r3, [r7, #2]
 801163a:	3303      	adds	r3, #3
 801163c:	b29b      	uxth	r3, r3
 801163e:	f023 0303 	bic.w	r3, r3, #3
 8011642:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011644:	8bfb      	ldrh	r3, [r7, #30]
 8011646:	2b0b      	cmp	r3, #11
 8011648:	d801      	bhi.n	801164e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801164a:	230c      	movs	r3, #12
 801164c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801164e:	8bfb      	ldrh	r3, [r7, #30]
 8011650:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8011654:	4293      	cmp	r3, r2
 8011656:	d803      	bhi.n	8011660 <mem_trim+0x34>
 8011658:	8bfa      	ldrh	r2, [r7, #30]
 801165a:	887b      	ldrh	r3, [r7, #2]
 801165c:	429a      	cmp	r2, r3
 801165e:	d201      	bcs.n	8011664 <mem_trim+0x38>
    return NULL;
 8011660:	2300      	movs	r3, #0
 8011662:	e0dc      	b.n	801181e <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011664:	4b70      	ldr	r3, [pc, #448]	@ (8011828 <mem_trim+0x1fc>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	687a      	ldr	r2, [r7, #4]
 801166a:	429a      	cmp	r2, r3
 801166c:	d304      	bcc.n	8011678 <mem_trim+0x4c>
 801166e:	4b6f      	ldr	r3, [pc, #444]	@ (801182c <mem_trim+0x200>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	687a      	ldr	r2, [r7, #4]
 8011674:	429a      	cmp	r2, r3
 8011676:	d306      	bcc.n	8011686 <mem_trim+0x5a>
 8011678:	4b6d      	ldr	r3, [pc, #436]	@ (8011830 <mem_trim+0x204>)
 801167a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801167e:	496d      	ldr	r1, [pc, #436]	@ (8011834 <mem_trim+0x208>)
 8011680:	486d      	ldr	r0, [pc, #436]	@ (8011838 <mem_trim+0x20c>)
 8011682:	f009 fee7 	bl	801b454 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011686:	4b68      	ldr	r3, [pc, #416]	@ (8011828 <mem_trim+0x1fc>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	687a      	ldr	r2, [r7, #4]
 801168c:	429a      	cmp	r2, r3
 801168e:	d304      	bcc.n	801169a <mem_trim+0x6e>
 8011690:	4b66      	ldr	r3, [pc, #408]	@ (801182c <mem_trim+0x200>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	687a      	ldr	r2, [r7, #4]
 8011696:	429a      	cmp	r2, r3
 8011698:	d307      	bcc.n	80116aa <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801169a:	f009 fc7f 	bl	801af9c <sys_arch_protect>
 801169e:	60b8      	str	r0, [r7, #8]
 80116a0:	68b8      	ldr	r0, [r7, #8]
 80116a2:	f009 fc89 	bl	801afb8 <sys_arch_unprotect>
    return rmem;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	e0b9      	b.n	801181e <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	3b08      	subs	r3, #8
 80116ae:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80116b0:	69b8      	ldr	r0, [r7, #24]
 80116b2:	f7ff fde7 	bl	8011284 <mem_to_ptr>
 80116b6:	4603      	mov	r3, r0
 80116b8:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80116ba:	69bb      	ldr	r3, [r7, #24]
 80116bc:	881a      	ldrh	r2, [r3, #0]
 80116be:	8afb      	ldrh	r3, [r7, #22]
 80116c0:	1ad3      	subs	r3, r2, r3
 80116c2:	b29b      	uxth	r3, r3
 80116c4:	3b08      	subs	r3, #8
 80116c6:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80116c8:	8bfa      	ldrh	r2, [r7, #30]
 80116ca:	8abb      	ldrh	r3, [r7, #20]
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d906      	bls.n	80116de <mem_trim+0xb2>
 80116d0:	4b57      	ldr	r3, [pc, #348]	@ (8011830 <mem_trim+0x204>)
 80116d2:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80116d6:	4959      	ldr	r1, [pc, #356]	@ (801183c <mem_trim+0x210>)
 80116d8:	4857      	ldr	r0, [pc, #348]	@ (8011838 <mem_trim+0x20c>)
 80116da:	f009 febb 	bl	801b454 <iprintf>
  if (newsize > size) {
 80116de:	8bfa      	ldrh	r2, [r7, #30]
 80116e0:	8abb      	ldrh	r3, [r7, #20]
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d901      	bls.n	80116ea <mem_trim+0xbe>
    /* not supported */
    return NULL;
 80116e6:	2300      	movs	r3, #0
 80116e8:	e099      	b.n	801181e <mem_trim+0x1f2>
  }
  if (newsize == size) {
 80116ea:	8bfa      	ldrh	r2, [r7, #30]
 80116ec:	8abb      	ldrh	r3, [r7, #20]
 80116ee:	429a      	cmp	r2, r3
 80116f0:	d101      	bne.n	80116f6 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	e093      	b.n	801181e <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80116f6:	4852      	ldr	r0, [pc, #328]	@ (8011840 <mem_trim+0x214>)
 80116f8:	f009 fc14 	bl	801af24 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80116fc:	69bb      	ldr	r3, [r7, #24]
 80116fe:	881b      	ldrh	r3, [r3, #0]
 8011700:	4618      	mov	r0, r3
 8011702:	f7ff fdad 	bl	8011260 <ptr_to_mem>
 8011706:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011708:	693b      	ldr	r3, [r7, #16]
 801170a:	791b      	ldrb	r3, [r3, #4]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d141      	bne.n	8011794 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011710:	69bb      	ldr	r3, [r7, #24]
 8011712:	881b      	ldrh	r3, [r3, #0]
 8011714:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8011718:	4293      	cmp	r3, r2
 801171a:	d106      	bne.n	801172a <mem_trim+0xfe>
 801171c:	4b44      	ldr	r3, [pc, #272]	@ (8011830 <mem_trim+0x204>)
 801171e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8011722:	4948      	ldr	r1, [pc, #288]	@ (8011844 <mem_trim+0x218>)
 8011724:	4844      	ldr	r0, [pc, #272]	@ (8011838 <mem_trim+0x20c>)
 8011726:	f009 fe95 	bl	801b454 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	881b      	ldrh	r3, [r3, #0]
 801172e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011730:	8afa      	ldrh	r2, [r7, #22]
 8011732:	8bfb      	ldrh	r3, [r7, #30]
 8011734:	4413      	add	r3, r2
 8011736:	b29b      	uxth	r3, r3
 8011738:	3308      	adds	r3, #8
 801173a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801173c:	4b42      	ldr	r3, [pc, #264]	@ (8011848 <mem_trim+0x21c>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	693a      	ldr	r2, [r7, #16]
 8011742:	429a      	cmp	r2, r3
 8011744:	d106      	bne.n	8011754 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 8011746:	89fb      	ldrh	r3, [r7, #14]
 8011748:	4618      	mov	r0, r3
 801174a:	f7ff fd89 	bl	8011260 <ptr_to_mem>
 801174e:	4603      	mov	r3, r0
 8011750:	4a3d      	ldr	r2, [pc, #244]	@ (8011848 <mem_trim+0x21c>)
 8011752:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011754:	89fb      	ldrh	r3, [r7, #14]
 8011756:	4618      	mov	r0, r3
 8011758:	f7ff fd82 	bl	8011260 <ptr_to_mem>
 801175c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801175e:	693b      	ldr	r3, [r7, #16]
 8011760:	2200      	movs	r2, #0
 8011762:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	89ba      	ldrh	r2, [r7, #12]
 8011768:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801176a:	693b      	ldr	r3, [r7, #16]
 801176c:	8afa      	ldrh	r2, [r7, #22]
 801176e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011770:	69bb      	ldr	r3, [r7, #24]
 8011772:	89fa      	ldrh	r2, [r7, #14]
 8011774:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	881b      	ldrh	r3, [r3, #0]
 801177a:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 801177e:	4293      	cmp	r3, r2
 8011780:	d049      	beq.n	8011816 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011782:	693b      	ldr	r3, [r7, #16]
 8011784:	881b      	ldrh	r3, [r3, #0]
 8011786:	4618      	mov	r0, r3
 8011788:	f7ff fd6a 	bl	8011260 <ptr_to_mem>
 801178c:	4602      	mov	r2, r0
 801178e:	89fb      	ldrh	r3, [r7, #14]
 8011790:	8053      	strh	r3, [r2, #2]
 8011792:	e040      	b.n	8011816 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011794:	8bfb      	ldrh	r3, [r7, #30]
 8011796:	f103 0214 	add.w	r2, r3, #20
 801179a:	8abb      	ldrh	r3, [r7, #20]
 801179c:	429a      	cmp	r2, r3
 801179e:	d83a      	bhi.n	8011816 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80117a0:	8afa      	ldrh	r2, [r7, #22]
 80117a2:	8bfb      	ldrh	r3, [r7, #30]
 80117a4:	4413      	add	r3, r2
 80117a6:	b29b      	uxth	r3, r3
 80117a8:	3308      	adds	r3, #8
 80117aa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80117ac:	69bb      	ldr	r3, [r7, #24]
 80117ae:	881b      	ldrh	r3, [r3, #0]
 80117b0:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 80117b4:	4293      	cmp	r3, r2
 80117b6:	d106      	bne.n	80117c6 <mem_trim+0x19a>
 80117b8:	4b1d      	ldr	r3, [pc, #116]	@ (8011830 <mem_trim+0x204>)
 80117ba:	f240 3216 	movw	r2, #790	@ 0x316
 80117be:	4921      	ldr	r1, [pc, #132]	@ (8011844 <mem_trim+0x218>)
 80117c0:	481d      	ldr	r0, [pc, #116]	@ (8011838 <mem_trim+0x20c>)
 80117c2:	f009 fe47 	bl	801b454 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80117c6:	89fb      	ldrh	r3, [r7, #14]
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7ff fd49 	bl	8011260 <ptr_to_mem>
 80117ce:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80117d0:	4b1d      	ldr	r3, [pc, #116]	@ (8011848 <mem_trim+0x21c>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	693a      	ldr	r2, [r7, #16]
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d202      	bcs.n	80117e0 <mem_trim+0x1b4>
      lfree = mem2;
 80117da:	4a1b      	ldr	r2, [pc, #108]	@ (8011848 <mem_trim+0x21c>)
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80117e0:	693b      	ldr	r3, [r7, #16]
 80117e2:	2200      	movs	r2, #0
 80117e4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80117e6:	69bb      	ldr	r3, [r7, #24]
 80117e8:	881a      	ldrh	r2, [r3, #0]
 80117ea:	693b      	ldr	r3, [r7, #16]
 80117ec:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80117ee:	693b      	ldr	r3, [r7, #16]
 80117f0:	8afa      	ldrh	r2, [r7, #22]
 80117f2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80117f4:	69bb      	ldr	r3, [r7, #24]
 80117f6:	89fa      	ldrh	r2, [r7, #14]
 80117f8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80117fa:	693b      	ldr	r3, [r7, #16]
 80117fc:	881b      	ldrh	r3, [r3, #0]
 80117fe:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8011802:	4293      	cmp	r3, r2
 8011804:	d007      	beq.n	8011816 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011806:	693b      	ldr	r3, [r7, #16]
 8011808:	881b      	ldrh	r3, [r3, #0]
 801180a:	4618      	mov	r0, r3
 801180c:	f7ff fd28 	bl	8011260 <ptr_to_mem>
 8011810:	4602      	mov	r2, r0
 8011812:	89fb      	ldrh	r3, [r7, #14]
 8011814:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011816:	480a      	ldr	r0, [pc, #40]	@ (8011840 <mem_trim+0x214>)
 8011818:	f009 fb93 	bl	801af42 <sys_mutex_unlock>
  return rmem;
 801181c:	687b      	ldr	r3, [r7, #4]
}
 801181e:	4618      	mov	r0, r3
 8011820:	3720      	adds	r7, #32
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}
 8011826:	bf00      	nop
 8011828:	240050a4 	.word	0x240050a4
 801182c:	240050a8 	.word	0x240050a8
 8011830:	0801c8f4 	.word	0x0801c8f4
 8011834:	0801ca80 	.word	0x0801ca80
 8011838:	0801c93c 	.word	0x0801c93c
 801183c:	0801ca98 	.word	0x0801ca98
 8011840:	240050ac 	.word	0x240050ac
 8011844:	0801cab8 	.word	0x0801cab8
 8011848:	240050b0 	.word	0x240050b0

0801184c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b088      	sub	sp, #32
 8011850:	af00      	add	r7, sp, #0
 8011852:	4603      	mov	r3, r0
 8011854:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011856:	88fb      	ldrh	r3, [r7, #6]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d101      	bne.n	8011860 <mem_malloc+0x14>
    return NULL;
 801185c:	2300      	movs	r3, #0
 801185e:	e0e6      	b.n	8011a2e <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011860:	88fb      	ldrh	r3, [r7, #6]
 8011862:	3303      	adds	r3, #3
 8011864:	b29b      	uxth	r3, r3
 8011866:	f023 0303 	bic.w	r3, r3, #3
 801186a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801186c:	8bbb      	ldrh	r3, [r7, #28]
 801186e:	2b0b      	cmp	r3, #11
 8011870:	d801      	bhi.n	8011876 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011872:	230c      	movs	r3, #12
 8011874:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011876:	8bbb      	ldrh	r3, [r7, #28]
 8011878:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 801187c:	4293      	cmp	r3, r2
 801187e:	d803      	bhi.n	8011888 <mem_malloc+0x3c>
 8011880:	8bba      	ldrh	r2, [r7, #28]
 8011882:	88fb      	ldrh	r3, [r7, #6]
 8011884:	429a      	cmp	r2, r3
 8011886:	d201      	bcs.n	801188c <mem_malloc+0x40>
    return NULL;
 8011888:	2300      	movs	r3, #0
 801188a:	e0d0      	b.n	8011a2e <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801188c:	486a      	ldr	r0, [pc, #424]	@ (8011a38 <mem_malloc+0x1ec>)
 801188e:	f009 fb49 	bl	801af24 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011892:	4b6a      	ldr	r3, [pc, #424]	@ (8011a3c <mem_malloc+0x1f0>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	4618      	mov	r0, r3
 8011898:	f7ff fcf4 	bl	8011284 <mem_to_ptr>
 801189c:	4603      	mov	r3, r0
 801189e:	83fb      	strh	r3, [r7, #30]
 80118a0:	e0b9      	b.n	8011a16 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80118a2:	8bfb      	ldrh	r3, [r7, #30]
 80118a4:	4618      	mov	r0, r3
 80118a6:	f7ff fcdb 	bl	8011260 <ptr_to_mem>
 80118aa:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80118ac:	697b      	ldr	r3, [r7, #20]
 80118ae:	791b      	ldrb	r3, [r3, #4]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	f040 80a9 	bne.w	8011a08 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	881b      	ldrh	r3, [r3, #0]
 80118ba:	461a      	mov	r2, r3
 80118bc:	8bfb      	ldrh	r3, [r7, #30]
 80118be:	1ad3      	subs	r3, r2, r3
 80118c0:	f1a3 0208 	sub.w	r2, r3, #8
 80118c4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80118c6:	429a      	cmp	r2, r3
 80118c8:	f0c0 809e 	bcc.w	8011a08 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	881b      	ldrh	r3, [r3, #0]
 80118d0:	461a      	mov	r2, r3
 80118d2:	8bfb      	ldrh	r3, [r7, #30]
 80118d4:	1ad3      	subs	r3, r2, r3
 80118d6:	f1a3 0208 	sub.w	r2, r3, #8
 80118da:	8bbb      	ldrh	r3, [r7, #28]
 80118dc:	3314      	adds	r3, #20
 80118de:	429a      	cmp	r2, r3
 80118e0:	d335      	bcc.n	801194e <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80118e2:	8bfa      	ldrh	r2, [r7, #30]
 80118e4:	8bbb      	ldrh	r3, [r7, #28]
 80118e6:	4413      	add	r3, r2
 80118e8:	b29b      	uxth	r3, r3
 80118ea:	3308      	adds	r3, #8
 80118ec:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80118ee:	8a7b      	ldrh	r3, [r7, #18]
 80118f0:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 80118f4:	4293      	cmp	r3, r2
 80118f6:	d106      	bne.n	8011906 <mem_malloc+0xba>
 80118f8:	4b51      	ldr	r3, [pc, #324]	@ (8011a40 <mem_malloc+0x1f4>)
 80118fa:	f240 3287 	movw	r2, #903	@ 0x387
 80118fe:	4951      	ldr	r1, [pc, #324]	@ (8011a44 <mem_malloc+0x1f8>)
 8011900:	4851      	ldr	r0, [pc, #324]	@ (8011a48 <mem_malloc+0x1fc>)
 8011902:	f009 fda7 	bl	801b454 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011906:	8a7b      	ldrh	r3, [r7, #18]
 8011908:	4618      	mov	r0, r3
 801190a:	f7ff fca9 	bl	8011260 <ptr_to_mem>
 801190e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	2200      	movs	r2, #0
 8011914:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011916:	697b      	ldr	r3, [r7, #20]
 8011918:	881a      	ldrh	r2, [r3, #0]
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	8bfa      	ldrh	r2, [r7, #30]
 8011922:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	8a7a      	ldrh	r2, [r7, #18]
 8011928:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	2201      	movs	r2, #1
 801192e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	881b      	ldrh	r3, [r3, #0]
 8011934:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8011938:	4293      	cmp	r3, r2
 801193a:	d00b      	beq.n	8011954 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	881b      	ldrh	r3, [r3, #0]
 8011940:	4618      	mov	r0, r3
 8011942:	f7ff fc8d 	bl	8011260 <ptr_to_mem>
 8011946:	4602      	mov	r2, r0
 8011948:	8a7b      	ldrh	r3, [r7, #18]
 801194a:	8053      	strh	r3, [r2, #2]
 801194c:	e002      	b.n	8011954 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	2201      	movs	r2, #1
 8011952:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011954:	4b39      	ldr	r3, [pc, #228]	@ (8011a3c <mem_malloc+0x1f0>)
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	697a      	ldr	r2, [r7, #20]
 801195a:	429a      	cmp	r2, r3
 801195c:	d127      	bne.n	80119ae <mem_malloc+0x162>
          struct mem *cur = lfree;
 801195e:	4b37      	ldr	r3, [pc, #220]	@ (8011a3c <mem_malloc+0x1f0>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011964:	e005      	b.n	8011972 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011966:	69bb      	ldr	r3, [r7, #24]
 8011968:	881b      	ldrh	r3, [r3, #0]
 801196a:	4618      	mov	r0, r3
 801196c:	f7ff fc78 	bl	8011260 <ptr_to_mem>
 8011970:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011972:	69bb      	ldr	r3, [r7, #24]
 8011974:	791b      	ldrb	r3, [r3, #4]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d004      	beq.n	8011984 <mem_malloc+0x138>
 801197a:	4b34      	ldr	r3, [pc, #208]	@ (8011a4c <mem_malloc+0x200>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	69ba      	ldr	r2, [r7, #24]
 8011980:	429a      	cmp	r2, r3
 8011982:	d1f0      	bne.n	8011966 <mem_malloc+0x11a>
          }
          lfree = cur;
 8011984:	4a2d      	ldr	r2, [pc, #180]	@ (8011a3c <mem_malloc+0x1f0>)
 8011986:	69bb      	ldr	r3, [r7, #24]
 8011988:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801198a:	4b2c      	ldr	r3, [pc, #176]	@ (8011a3c <mem_malloc+0x1f0>)
 801198c:	681a      	ldr	r2, [r3, #0]
 801198e:	4b2f      	ldr	r3, [pc, #188]	@ (8011a4c <mem_malloc+0x200>)
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	429a      	cmp	r2, r3
 8011994:	d00b      	beq.n	80119ae <mem_malloc+0x162>
 8011996:	4b29      	ldr	r3, [pc, #164]	@ (8011a3c <mem_malloc+0x1f0>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	791b      	ldrb	r3, [r3, #4]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d006      	beq.n	80119ae <mem_malloc+0x162>
 80119a0:	4b27      	ldr	r3, [pc, #156]	@ (8011a40 <mem_malloc+0x1f4>)
 80119a2:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80119a6:	492a      	ldr	r1, [pc, #168]	@ (8011a50 <mem_malloc+0x204>)
 80119a8:	4827      	ldr	r0, [pc, #156]	@ (8011a48 <mem_malloc+0x1fc>)
 80119aa:	f009 fd53 	bl	801b454 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80119ae:	4822      	ldr	r0, [pc, #136]	@ (8011a38 <mem_malloc+0x1ec>)
 80119b0:	f009 fac7 	bl	801af42 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80119b4:	8bba      	ldrh	r2, [r7, #28]
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	4413      	add	r3, r2
 80119ba:	3308      	adds	r3, #8
 80119bc:	4a23      	ldr	r2, [pc, #140]	@ (8011a4c <mem_malloc+0x200>)
 80119be:	6812      	ldr	r2, [r2, #0]
 80119c0:	4293      	cmp	r3, r2
 80119c2:	d906      	bls.n	80119d2 <mem_malloc+0x186>
 80119c4:	4b1e      	ldr	r3, [pc, #120]	@ (8011a40 <mem_malloc+0x1f4>)
 80119c6:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80119ca:	4922      	ldr	r1, [pc, #136]	@ (8011a54 <mem_malloc+0x208>)
 80119cc:	481e      	ldr	r0, [pc, #120]	@ (8011a48 <mem_malloc+0x1fc>)
 80119ce:	f009 fd41 	bl	801b454 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	f003 0303 	and.w	r3, r3, #3
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d006      	beq.n	80119ea <mem_malloc+0x19e>
 80119dc:	4b18      	ldr	r3, [pc, #96]	@ (8011a40 <mem_malloc+0x1f4>)
 80119de:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80119e2:	491d      	ldr	r1, [pc, #116]	@ (8011a58 <mem_malloc+0x20c>)
 80119e4:	4818      	ldr	r0, [pc, #96]	@ (8011a48 <mem_malloc+0x1fc>)
 80119e6:	f009 fd35 	bl	801b454 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	f003 0303 	and.w	r3, r3, #3
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d006      	beq.n	8011a02 <mem_malloc+0x1b6>
 80119f4:	4b12      	ldr	r3, [pc, #72]	@ (8011a40 <mem_malloc+0x1f4>)
 80119f6:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80119fa:	4918      	ldr	r1, [pc, #96]	@ (8011a5c <mem_malloc+0x210>)
 80119fc:	4812      	ldr	r0, [pc, #72]	@ (8011a48 <mem_malloc+0x1fc>)
 80119fe:	f009 fd29 	bl	801b454 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011a02:	697b      	ldr	r3, [r7, #20]
 8011a04:	3308      	adds	r3, #8
 8011a06:	e012      	b.n	8011a2e <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 8011a08:	8bfb      	ldrh	r3, [r7, #30]
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7ff fc28 	bl	8011260 <ptr_to_mem>
 8011a10:	4603      	mov	r3, r0
 8011a12:	881b      	ldrh	r3, [r3, #0]
 8011a14:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011a16:	8bfa      	ldrh	r2, [r7, #30]
 8011a18:	8bb9      	ldrh	r1, [r7, #28]
 8011a1a:	f647 53e8 	movw	r3, #32232	@ 0x7de8
 8011a1e:	1a5b      	subs	r3, r3, r1
 8011a20:	429a      	cmp	r2, r3
 8011a22:	f4ff af3e 	bcc.w	80118a2 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011a26:	4804      	ldr	r0, [pc, #16]	@ (8011a38 <mem_malloc+0x1ec>)
 8011a28:	f009 fa8b 	bl	801af42 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011a2c:	2300      	movs	r3, #0
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3720      	adds	r7, #32
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}
 8011a36:	bf00      	nop
 8011a38:	240050ac 	.word	0x240050ac
 8011a3c:	240050b0 	.word	0x240050b0
 8011a40:	0801c8f4 	.word	0x0801c8f4
 8011a44:	0801cab8 	.word	0x0801cab8
 8011a48:	0801c93c 	.word	0x0801c93c
 8011a4c:	240050a8 	.word	0x240050a8
 8011a50:	0801cacc 	.word	0x0801cacc
 8011a54:	0801cae8 	.word	0x0801cae8
 8011a58:	0801cb18 	.word	0x0801cb18
 8011a5c:	0801cb48 	.word	0x0801cb48

08011a60 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011a60:	b480      	push	{r7}
 8011a62:	b085      	sub	sp, #20
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	689b      	ldr	r3, [r3, #8]
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	685b      	ldr	r3, [r3, #4]
 8011a74:	3303      	adds	r3, #3
 8011a76:	f023 0303 	bic.w	r3, r3, #3
 8011a7a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	60fb      	str	r3, [r7, #12]
 8011a80:	e011      	b.n	8011aa6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	689b      	ldr	r3, [r3, #8]
 8011a86:	681a      	ldr	r2, [r3, #0]
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	689b      	ldr	r3, [r3, #8]
 8011a90:	68ba      	ldr	r2, [r7, #8]
 8011a92:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	881b      	ldrh	r3, [r3, #0]
 8011a98:	461a      	mov	r2, r3
 8011a9a:	68bb      	ldr	r3, [r7, #8]
 8011a9c:	4413      	add	r3, r2
 8011a9e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	3301      	adds	r3, #1
 8011aa4:	60fb      	str	r3, [r7, #12]
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	885b      	ldrh	r3, [r3, #2]
 8011aaa:	461a      	mov	r2, r3
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	4293      	cmp	r3, r2
 8011ab0:	dbe7      	blt.n	8011a82 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011ab2:	bf00      	nop
 8011ab4:	bf00      	nop
 8011ab6:	3714      	adds	r7, #20
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abe:	4770      	bx	lr

08011ac0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b082      	sub	sp, #8
 8011ac4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	80fb      	strh	r3, [r7, #6]
 8011aca:	e009      	b.n	8011ae0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011acc:	88fb      	ldrh	r3, [r7, #6]
 8011ace:	4a08      	ldr	r2, [pc, #32]	@ (8011af0 <memp_init+0x30>)
 8011ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f7ff ffc3 	bl	8011a60 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011ada:	88fb      	ldrh	r3, [r7, #6]
 8011adc:	3301      	adds	r3, #1
 8011ade:	80fb      	strh	r3, [r7, #6]
 8011ae0:	88fb      	ldrh	r3, [r7, #6]
 8011ae2:	2b0c      	cmp	r3, #12
 8011ae4:	d9f2      	bls.n	8011acc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011ae6:	bf00      	nop
 8011ae8:	bf00      	nop
 8011aea:	3708      	adds	r7, #8
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bd80      	pop	{r7, pc}
 8011af0:	0801f3a0 	.word	0x0801f3a0

08011af4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b084      	sub	sp, #16
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011afc:	f009 fa4e 	bl	801af9c <sys_arch_protect>
 8011b00:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	689b      	ldr	r3, [r3, #8]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d015      	beq.n	8011b3c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	689b      	ldr	r3, [r3, #8]
 8011b14:	68ba      	ldr	r2, [r7, #8]
 8011b16:	6812      	ldr	r2, [r2, #0]
 8011b18:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011b1a:	68bb      	ldr	r3, [r7, #8]
 8011b1c:	f003 0303 	and.w	r3, r3, #3
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d006      	beq.n	8011b32 <do_memp_malloc_pool+0x3e>
 8011b24:	4b09      	ldr	r3, [pc, #36]	@ (8011b4c <do_memp_malloc_pool+0x58>)
 8011b26:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8011b2a:	4909      	ldr	r1, [pc, #36]	@ (8011b50 <do_memp_malloc_pool+0x5c>)
 8011b2c:	4809      	ldr	r0, [pc, #36]	@ (8011b54 <do_memp_malloc_pool+0x60>)
 8011b2e:	f009 fc91 	bl	801b454 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011b32:	68f8      	ldr	r0, [r7, #12]
 8011b34:	f009 fa40 	bl	801afb8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	e003      	b.n	8011b44 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011b3c:	68f8      	ldr	r0, [r7, #12]
 8011b3e:	f009 fa3b 	bl	801afb8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011b42:	2300      	movs	r3, #0
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	3710      	adds	r7, #16
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}
 8011b4c:	0801cb6c 	.word	0x0801cb6c
 8011b50:	0801cb9c 	.word	0x0801cb9c
 8011b54:	0801cbc0 	.word	0x0801cbc0

08011b58 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b082      	sub	sp, #8
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d106      	bne.n	8011b74 <memp_malloc_pool+0x1c>
 8011b66:	4b0a      	ldr	r3, [pc, #40]	@ (8011b90 <memp_malloc_pool+0x38>)
 8011b68:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8011b6c:	4909      	ldr	r1, [pc, #36]	@ (8011b94 <memp_malloc_pool+0x3c>)
 8011b6e:	480a      	ldr	r0, [pc, #40]	@ (8011b98 <memp_malloc_pool+0x40>)
 8011b70:	f009 fc70 	bl	801b454 <iprintf>
  if (desc == NULL) {
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d101      	bne.n	8011b7e <memp_malloc_pool+0x26>
    return NULL;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	e003      	b.n	8011b86 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	f7ff ffb8 	bl	8011af4 <do_memp_malloc_pool>
 8011b84:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	3708      	adds	r7, #8
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}
 8011b8e:	bf00      	nop
 8011b90:	0801cb6c 	.word	0x0801cb6c
 8011b94:	0801cbe8 	.word	0x0801cbe8
 8011b98:	0801cbc0 	.word	0x0801cbc0

08011b9c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b084      	sub	sp, #16
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011ba6:	79fb      	ldrb	r3, [r7, #7]
 8011ba8:	2b0c      	cmp	r3, #12
 8011baa:	d908      	bls.n	8011bbe <memp_malloc+0x22>
 8011bac:	4b0a      	ldr	r3, [pc, #40]	@ (8011bd8 <memp_malloc+0x3c>)
 8011bae:	f240 1257 	movw	r2, #343	@ 0x157
 8011bb2:	490a      	ldr	r1, [pc, #40]	@ (8011bdc <memp_malloc+0x40>)
 8011bb4:	480a      	ldr	r0, [pc, #40]	@ (8011be0 <memp_malloc+0x44>)
 8011bb6:	f009 fc4d 	bl	801b454 <iprintf>
 8011bba:	2300      	movs	r3, #0
 8011bbc:	e008      	b.n	8011bd0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011bbe:	79fb      	ldrb	r3, [r7, #7]
 8011bc0:	4a08      	ldr	r2, [pc, #32]	@ (8011be4 <memp_malloc+0x48>)
 8011bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f7ff ff94 	bl	8011af4 <do_memp_malloc_pool>
 8011bcc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011bce:	68fb      	ldr	r3, [r7, #12]
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3710      	adds	r7, #16
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}
 8011bd8:	0801cb6c 	.word	0x0801cb6c
 8011bdc:	0801cbfc 	.word	0x0801cbfc
 8011be0:	0801cbc0 	.word	0x0801cbc0
 8011be4:	0801f3a0 	.word	0x0801f3a0

08011be8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b084      	sub	sp, #16
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	f003 0303 	and.w	r3, r3, #3
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d006      	beq.n	8011c0a <do_memp_free_pool+0x22>
 8011bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8011c34 <do_memp_free_pool+0x4c>)
 8011bfe:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8011c02:	490d      	ldr	r1, [pc, #52]	@ (8011c38 <do_memp_free_pool+0x50>)
 8011c04:	480d      	ldr	r0, [pc, #52]	@ (8011c3c <do_memp_free_pool+0x54>)
 8011c06:	f009 fc25 	bl	801b454 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8011c0e:	f009 f9c5 	bl	801af9c <sys_arch_protect>
 8011c12:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	689b      	ldr	r3, [r3, #8]
 8011c18:	681a      	ldr	r2, [r3, #0]
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	689b      	ldr	r3, [r3, #8]
 8011c22:	68fa      	ldr	r2, [r7, #12]
 8011c24:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8011c26:	68b8      	ldr	r0, [r7, #8]
 8011c28:	f009 f9c6 	bl	801afb8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8011c2c:	bf00      	nop
 8011c2e:	3710      	adds	r7, #16
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}
 8011c34:	0801cb6c 	.word	0x0801cb6c
 8011c38:	0801cc1c 	.word	0x0801cc1c
 8011c3c:	0801cbc0 	.word	0x0801cbc0

08011c40 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
 8011c48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d106      	bne.n	8011c5e <memp_free_pool+0x1e>
 8011c50:	4b0a      	ldr	r3, [pc, #40]	@ (8011c7c <memp_free_pool+0x3c>)
 8011c52:	f240 1295 	movw	r2, #405	@ 0x195
 8011c56:	490a      	ldr	r1, [pc, #40]	@ (8011c80 <memp_free_pool+0x40>)
 8011c58:	480a      	ldr	r0, [pc, #40]	@ (8011c84 <memp_free_pool+0x44>)
 8011c5a:	f009 fbfb 	bl	801b454 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d007      	beq.n	8011c74 <memp_free_pool+0x34>
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d004      	beq.n	8011c74 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8011c6a:	6839      	ldr	r1, [r7, #0]
 8011c6c:	6878      	ldr	r0, [r7, #4]
 8011c6e:	f7ff ffbb 	bl	8011be8 <do_memp_free_pool>
 8011c72:	e000      	b.n	8011c76 <memp_free_pool+0x36>
    return;
 8011c74:	bf00      	nop
}
 8011c76:	3708      	adds	r7, #8
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}
 8011c7c:	0801cb6c 	.word	0x0801cb6c
 8011c80:	0801cbe8 	.word	0x0801cbe8
 8011c84:	0801cbc0 	.word	0x0801cbc0

08011c88 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	4603      	mov	r3, r0
 8011c90:	6039      	str	r1, [r7, #0]
 8011c92:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011c94:	79fb      	ldrb	r3, [r7, #7]
 8011c96:	2b0c      	cmp	r3, #12
 8011c98:	d907      	bls.n	8011caa <memp_free+0x22>
 8011c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8011ccc <memp_free+0x44>)
 8011c9c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8011ca0:	490b      	ldr	r1, [pc, #44]	@ (8011cd0 <memp_free+0x48>)
 8011ca2:	480c      	ldr	r0, [pc, #48]	@ (8011cd4 <memp_free+0x4c>)
 8011ca4:	f009 fbd6 	bl	801b454 <iprintf>
 8011ca8:	e00c      	b.n	8011cc4 <memp_free+0x3c>

  if (mem == NULL) {
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d008      	beq.n	8011cc2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011cb0:	79fb      	ldrb	r3, [r7, #7]
 8011cb2:	4a09      	ldr	r2, [pc, #36]	@ (8011cd8 <memp_free+0x50>)
 8011cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011cb8:	6839      	ldr	r1, [r7, #0]
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f7ff ff94 	bl	8011be8 <do_memp_free_pool>
 8011cc0:	e000      	b.n	8011cc4 <memp_free+0x3c>
    return;
 8011cc2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011cc4:	3708      	adds	r7, #8
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}
 8011cca:	bf00      	nop
 8011ccc:	0801cb6c 	.word	0x0801cb6c
 8011cd0:	0801cc3c 	.word	0x0801cc3c
 8011cd4:	0801cbc0 	.word	0x0801cbc0
 8011cd8:	0801f3a0 	.word	0x0801f3a0

08011cdc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011cdc:	b480      	push	{r7}
 8011cde:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011ce0:	bf00      	nop
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce8:	4770      	bx	lr
	...

08011cec <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b086      	sub	sp, #24
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	60f8      	str	r0, [r7, #12]
 8011cf4:	60b9      	str	r1, [r7, #8]
 8011cf6:	607a      	str	r2, [r7, #4]
 8011cf8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d108      	bne.n	8011d12 <netif_add+0x26>
 8011d00:	4b57      	ldr	r3, [pc, #348]	@ (8011e60 <netif_add+0x174>)
 8011d02:	f240 1227 	movw	r2, #295	@ 0x127
 8011d06:	4957      	ldr	r1, [pc, #348]	@ (8011e64 <netif_add+0x178>)
 8011d08:	4857      	ldr	r0, [pc, #348]	@ (8011e68 <netif_add+0x17c>)
 8011d0a:	f009 fba3 	bl	801b454 <iprintf>
 8011d0e:	2300      	movs	r3, #0
 8011d10:	e0a2      	b.n	8011e58 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8011d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d108      	bne.n	8011d2a <netif_add+0x3e>
 8011d18:	4b51      	ldr	r3, [pc, #324]	@ (8011e60 <netif_add+0x174>)
 8011d1a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8011d1e:	4953      	ldr	r1, [pc, #332]	@ (8011e6c <netif_add+0x180>)
 8011d20:	4851      	ldr	r0, [pc, #324]	@ (8011e68 <netif_add+0x17c>)
 8011d22:	f009 fb97 	bl	801b454 <iprintf>
 8011d26:	2300      	movs	r3, #0
 8011d28:	e096      	b.n	8011e58 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d101      	bne.n	8011d34 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8011d30:	4b4f      	ldr	r3, [pc, #316]	@ (8011e70 <netif_add+0x184>)
 8011d32:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d101      	bne.n	8011d3e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8011d3a:	4b4d      	ldr	r3, [pc, #308]	@ (8011e70 <netif_add+0x184>)
 8011d3c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d101      	bne.n	8011d48 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8011d44:	4b4a      	ldr	r3, [pc, #296]	@ (8011e70 <netif_add+0x184>)
 8011d46:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	2200      	movs	r2, #0
 8011d52:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	2200      	movs	r2, #0
 8011d58:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	4a45      	ldr	r2, [pc, #276]	@ (8011e74 <netif_add+0x188>)
 8011d5e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	2200      	movs	r2, #0
 8011d64:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	2200      	movs	r2, #0
 8011d6a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	2200      	movs	r2, #0
 8011d72:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	6a3a      	ldr	r2, [r7, #32]
 8011d78:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8011d7a:	4b3f      	ldr	r3, [pc, #252]	@ (8011e78 <netif_add+0x18c>)
 8011d7c:	781a      	ldrb	r2, [r3, #0]
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011d88:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	687a      	ldr	r2, [r7, #4]
 8011d8e:	68b9      	ldr	r1, [r7, #8]
 8011d90:	68f8      	ldr	r0, [r7, #12]
 8011d92:	f000 f913 	bl	8011fbc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8011d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d98:	68f8      	ldr	r0, [r7, #12]
 8011d9a:	4798      	blx	r3
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d001      	beq.n	8011da6 <netif_add+0xba>
    return NULL;
 8011da2:	2300      	movs	r3, #0
 8011da4:	e058      	b.n	8011e58 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011dac:	2bff      	cmp	r3, #255	@ 0xff
 8011dae:	d103      	bne.n	8011db8 <netif_add+0xcc>
        netif->num = 0;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	2200      	movs	r2, #0
 8011db4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8011db8:	2300      	movs	r3, #0
 8011dba:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8011e7c <netif_add+0x190>)
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	617b      	str	r3, [r7, #20]
 8011dc2:	e02b      	b.n	8011e1c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8011dc4:	697a      	ldr	r2, [r7, #20]
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d106      	bne.n	8011dda <netif_add+0xee>
 8011dcc:	4b24      	ldr	r3, [pc, #144]	@ (8011e60 <netif_add+0x174>)
 8011dce:	f240 128b 	movw	r2, #395	@ 0x18b
 8011dd2:	492b      	ldr	r1, [pc, #172]	@ (8011e80 <netif_add+0x194>)
 8011dd4:	4824      	ldr	r0, [pc, #144]	@ (8011e68 <netif_add+0x17c>)
 8011dd6:	f009 fb3d 	bl	801b454 <iprintf>
        num_netifs++;
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	3301      	adds	r3, #1
 8011dde:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8011de0:	693b      	ldr	r3, [r7, #16]
 8011de2:	2bff      	cmp	r3, #255	@ 0xff
 8011de4:	dd06      	ble.n	8011df4 <netif_add+0x108>
 8011de6:	4b1e      	ldr	r3, [pc, #120]	@ (8011e60 <netif_add+0x174>)
 8011de8:	f240 128d 	movw	r2, #397	@ 0x18d
 8011dec:	4925      	ldr	r1, [pc, #148]	@ (8011e84 <netif_add+0x198>)
 8011dee:	481e      	ldr	r0, [pc, #120]	@ (8011e68 <netif_add+0x17c>)
 8011df0:	f009 fb30 	bl	801b454 <iprintf>
        if (netif2->num == netif->num) {
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011e00:	429a      	cmp	r2, r3
 8011e02:	d108      	bne.n	8011e16 <netif_add+0x12a>
          netif->num++;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011e0a:	3301      	adds	r3, #1
 8011e0c:	b2da      	uxtb	r2, r3
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8011e14:	e005      	b.n	8011e22 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	617b      	str	r3, [r7, #20]
 8011e1c:	697b      	ldr	r3, [r7, #20]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d1d0      	bne.n	8011dc4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d1be      	bne.n	8011da6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011e2e:	2bfe      	cmp	r3, #254	@ 0xfe
 8011e30:	d103      	bne.n	8011e3a <netif_add+0x14e>
    netif_num = 0;
 8011e32:	4b11      	ldr	r3, [pc, #68]	@ (8011e78 <netif_add+0x18c>)
 8011e34:	2200      	movs	r2, #0
 8011e36:	701a      	strb	r2, [r3, #0]
 8011e38:	e006      	b.n	8011e48 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011e40:	3301      	adds	r3, #1
 8011e42:	b2da      	uxtb	r2, r3
 8011e44:	4b0c      	ldr	r3, [pc, #48]	@ (8011e78 <netif_add+0x18c>)
 8011e46:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8011e48:	4b0c      	ldr	r3, [pc, #48]	@ (8011e7c <netif_add+0x190>)
 8011e4a:	681a      	ldr	r2, [r3, #0]
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011e50:	4a0a      	ldr	r2, [pc, #40]	@ (8011e7c <netif_add+0x190>)
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8011e56:	68fb      	ldr	r3, [r7, #12]
}
 8011e58:	4618      	mov	r0, r3
 8011e5a:	3718      	adds	r7, #24
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}
 8011e60:	0801cc58 	.word	0x0801cc58
 8011e64:	0801ccec 	.word	0x0801ccec
 8011e68:	0801cca8 	.word	0x0801cca8
 8011e6c:	0801cd08 	.word	0x0801cd08
 8011e70:	0801f414 	.word	0x0801f414
 8011e74:	08012297 	.word	0x08012297
 8011e78:	24008188 	.word	0x24008188
 8011e7c:	24008180 	.word	0x24008180
 8011e80:	0801cd2c 	.word	0x0801cd2c
 8011e84:	0801cd40 	.word	0x0801cd40

08011e88 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b082      	sub	sp, #8
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
 8011e90:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8011e92:	6839      	ldr	r1, [r7, #0]
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f002 fb7f 	bl	8014598 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8011e9a:	6839      	ldr	r1, [r7, #0]
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f006 fc8d 	bl	80187bc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011ea2:	bf00      	nop
 8011ea4:	3708      	adds	r7, #8
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}
	...

08011eac <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b086      	sub	sp, #24
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	60f8      	str	r0, [r7, #12]
 8011eb4:	60b9      	str	r1, [r7, #8]
 8011eb6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8011eb8:	68bb      	ldr	r3, [r7, #8]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d106      	bne.n	8011ecc <netif_do_set_ipaddr+0x20>
 8011ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8011f34 <netif_do_set_ipaddr+0x88>)
 8011ec0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8011ec4:	491c      	ldr	r1, [pc, #112]	@ (8011f38 <netif_do_set_ipaddr+0x8c>)
 8011ec6:	481d      	ldr	r0, [pc, #116]	@ (8011f3c <netif_do_set_ipaddr+0x90>)
 8011ec8:	f009 fac4 	bl	801b454 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d106      	bne.n	8011ee0 <netif_do_set_ipaddr+0x34>
 8011ed2:	4b18      	ldr	r3, [pc, #96]	@ (8011f34 <netif_do_set_ipaddr+0x88>)
 8011ed4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8011ed8:	4917      	ldr	r1, [pc, #92]	@ (8011f38 <netif_do_set_ipaddr+0x8c>)
 8011eda:	4818      	ldr	r0, [pc, #96]	@ (8011f3c <netif_do_set_ipaddr+0x90>)
 8011edc:	f009 faba 	bl	801b454 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011ee0:	68bb      	ldr	r3, [r7, #8]
 8011ee2:	681a      	ldr	r2, [r3, #0]
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	3304      	adds	r3, #4
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d01c      	beq.n	8011f28 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	3304      	adds	r3, #4
 8011ef8:	681a      	ldr	r2, [r3, #0]
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011efe:	f107 0314 	add.w	r3, r7, #20
 8011f02:	4619      	mov	r1, r3
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f7ff ffbf 	bl	8011e88 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8011f0a:	68bb      	ldr	r3, [r7, #8]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d002      	beq.n	8011f16 <netif_do_set_ipaddr+0x6a>
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	e000      	b.n	8011f18 <netif_do_set_ipaddr+0x6c>
 8011f16:	2300      	movs	r3, #0
 8011f18:	68fa      	ldr	r2, [r7, #12]
 8011f1a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011f1c:	2101      	movs	r1, #1
 8011f1e:	68f8      	ldr	r0, [r7, #12]
 8011f20:	f000 f8d2 	bl	80120c8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8011f24:	2301      	movs	r3, #1
 8011f26:	e000      	b.n	8011f2a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011f28:	2300      	movs	r3, #0
}
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	3718      	adds	r7, #24
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}
 8011f32:	bf00      	nop
 8011f34:	0801cc58 	.word	0x0801cc58
 8011f38:	0801cd70 	.word	0x0801cd70
 8011f3c:	0801cca8 	.word	0x0801cca8

08011f40 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011f40:	b480      	push	{r7}
 8011f42:	b085      	sub	sp, #20
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	60f8      	str	r0, [r7, #12]
 8011f48:	60b9      	str	r1, [r7, #8]
 8011f4a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	681a      	ldr	r2, [r3, #0]
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	3308      	adds	r3, #8
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	429a      	cmp	r2, r3
 8011f58:	d00a      	beq.n	8011f70 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8011f5a:	68bb      	ldr	r3, [r7, #8]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d002      	beq.n	8011f66 <netif_do_set_netmask+0x26>
 8011f60:	68bb      	ldr	r3, [r7, #8]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	e000      	b.n	8011f68 <netif_do_set_netmask+0x28>
 8011f66:	2300      	movs	r3, #0
 8011f68:	68fa      	ldr	r2, [r7, #12]
 8011f6a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8011f6c:	2301      	movs	r3, #1
 8011f6e:	e000      	b.n	8011f72 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011f70:	2300      	movs	r3, #0
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	3714      	adds	r7, #20
 8011f76:	46bd      	mov	sp, r7
 8011f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7c:	4770      	bx	lr

08011f7e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8011f7e:	b480      	push	{r7}
 8011f80:	b085      	sub	sp, #20
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	60f8      	str	r0, [r7, #12]
 8011f86:	60b9      	str	r1, [r7, #8]
 8011f88:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	681a      	ldr	r2, [r3, #0]
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	330c      	adds	r3, #12
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d00a      	beq.n	8011fae <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8011f98:	68bb      	ldr	r3, [r7, #8]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d002      	beq.n	8011fa4 <netif_do_set_gw+0x26>
 8011f9e:	68bb      	ldr	r3, [r7, #8]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	e000      	b.n	8011fa6 <netif_do_set_gw+0x28>
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	68fa      	ldr	r2, [r7, #12]
 8011fa8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8011faa:	2301      	movs	r3, #1
 8011fac:	e000      	b.n	8011fb0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8011fae:	2300      	movs	r3, #0
}
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	3714      	adds	r7, #20
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fba:	4770      	bx	lr

08011fbc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b088      	sub	sp, #32
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	60f8      	str	r0, [r7, #12]
 8011fc4:	60b9      	str	r1, [r7, #8]
 8011fc6:	607a      	str	r2, [r7, #4]
 8011fc8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011fce:	2300      	movs	r3, #0
 8011fd0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d101      	bne.n	8011fdc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011fd8:	4b1c      	ldr	r3, [pc, #112]	@ (801204c <netif_set_addr+0x90>)
 8011fda:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d101      	bne.n	8011fe6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011fe2:	4b1a      	ldr	r3, [pc, #104]	@ (801204c <netif_set_addr+0x90>)
 8011fe4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d101      	bne.n	8011ff0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011fec:	4b17      	ldr	r3, [pc, #92]	@ (801204c <netif_set_addr+0x90>)
 8011fee:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d003      	beq.n	8011ffe <netif_set_addr+0x42>
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d101      	bne.n	8012002 <netif_set_addr+0x46>
 8011ffe:	2301      	movs	r3, #1
 8012000:	e000      	b.n	8012004 <netif_set_addr+0x48>
 8012002:	2300      	movs	r3, #0
 8012004:	617b      	str	r3, [r7, #20]
  if (remove) {
 8012006:	697b      	ldr	r3, [r7, #20]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d006      	beq.n	801201a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801200c:	f107 0310 	add.w	r3, r7, #16
 8012010:	461a      	mov	r2, r3
 8012012:	68b9      	ldr	r1, [r7, #8]
 8012014:	68f8      	ldr	r0, [r7, #12]
 8012016:	f7ff ff49 	bl	8011eac <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801201a:	69fa      	ldr	r2, [r7, #28]
 801201c:	6879      	ldr	r1, [r7, #4]
 801201e:	68f8      	ldr	r0, [r7, #12]
 8012020:	f7ff ff8e 	bl	8011f40 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8012024:	69ba      	ldr	r2, [r7, #24]
 8012026:	6839      	ldr	r1, [r7, #0]
 8012028:	68f8      	ldr	r0, [r7, #12]
 801202a:	f7ff ffa8 	bl	8011f7e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801202e:	697b      	ldr	r3, [r7, #20]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d106      	bne.n	8012042 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012034:	f107 0310 	add.w	r3, r7, #16
 8012038:	461a      	mov	r2, r3
 801203a:	68b9      	ldr	r1, [r7, #8]
 801203c:	68f8      	ldr	r0, [r7, #12]
 801203e:	f7ff ff35 	bl	8011eac <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8012042:	bf00      	nop
 8012044:	3720      	adds	r7, #32
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}
 801204a:	bf00      	nop
 801204c:	0801f414 	.word	0x0801f414

08012050 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8012050:	b480      	push	{r7}
 8012052:	b083      	sub	sp, #12
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8012058:	4a04      	ldr	r2, [pc, #16]	@ (801206c <netif_set_default+0x1c>)
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801205e:	bf00      	nop
 8012060:	370c      	adds	r7, #12
 8012062:	46bd      	mov	sp, r7
 8012064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012068:	4770      	bx	lr
 801206a:	bf00      	nop
 801206c:	24008184 	.word	0x24008184

08012070 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b082      	sub	sp, #8
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d107      	bne.n	801208e <netif_set_up+0x1e>
 801207e:	4b0f      	ldr	r3, [pc, #60]	@ (80120bc <netif_set_up+0x4c>)
 8012080:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8012084:	490e      	ldr	r1, [pc, #56]	@ (80120c0 <netif_set_up+0x50>)
 8012086:	480f      	ldr	r0, [pc, #60]	@ (80120c4 <netif_set_up+0x54>)
 8012088:	f009 f9e4 	bl	801b454 <iprintf>
 801208c:	e013      	b.n	80120b6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012094:	f003 0301 	and.w	r3, r3, #1
 8012098:	2b00      	cmp	r3, #0
 801209a:	d10c      	bne.n	80120b6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80120a2:	f043 0301 	orr.w	r3, r3, #1
 80120a6:	b2da      	uxtb	r2, r3
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80120ae:	2103      	movs	r1, #3
 80120b0:	6878      	ldr	r0, [r7, #4]
 80120b2:	f000 f809 	bl	80120c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80120b6:	3708      	adds	r7, #8
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}
 80120bc:	0801cc58 	.word	0x0801cc58
 80120c0:	0801cde0 	.word	0x0801cde0
 80120c4:	0801cca8 	.word	0x0801cca8

080120c8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	460b      	mov	r3, r1
 80120d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d106      	bne.n	80120e8 <netif_issue_reports+0x20>
 80120da:	4b18      	ldr	r3, [pc, #96]	@ (801213c <netif_issue_reports+0x74>)
 80120dc:	f240 326d 	movw	r2, #877	@ 0x36d
 80120e0:	4917      	ldr	r1, [pc, #92]	@ (8012140 <netif_issue_reports+0x78>)
 80120e2:	4818      	ldr	r0, [pc, #96]	@ (8012144 <netif_issue_reports+0x7c>)
 80120e4:	f009 f9b6 	bl	801b454 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80120ee:	f003 0304 	and.w	r3, r3, #4
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d01e      	beq.n	8012134 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80120fc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012100:	2b00      	cmp	r3, #0
 8012102:	d017      	beq.n	8012134 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012104:	78fb      	ldrb	r3, [r7, #3]
 8012106:	f003 0301 	and.w	r3, r3, #1
 801210a:	2b00      	cmp	r3, #0
 801210c:	d013      	beq.n	8012136 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	3304      	adds	r3, #4
 8012112:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012114:	2b00      	cmp	r3, #0
 8012116:	d00e      	beq.n	8012136 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801211e:	f003 0308 	and.w	r3, r3, #8
 8012122:	2b00      	cmp	r3, #0
 8012124:	d007      	beq.n	8012136 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	3304      	adds	r3, #4
 801212a:	4619      	mov	r1, r3
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f007 faaf 	bl	8019690 <etharp_request>
 8012132:	e000      	b.n	8012136 <netif_issue_reports+0x6e>
    return;
 8012134:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8012136:	3708      	adds	r7, #8
 8012138:	46bd      	mov	sp, r7
 801213a:	bd80      	pop	{r7, pc}
 801213c:	0801cc58 	.word	0x0801cc58
 8012140:	0801cdfc 	.word	0x0801cdfc
 8012144:	0801cca8 	.word	0x0801cca8

08012148 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b082      	sub	sp, #8
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d107      	bne.n	8012166 <netif_set_down+0x1e>
 8012156:	4b12      	ldr	r3, [pc, #72]	@ (80121a0 <netif_set_down+0x58>)
 8012158:	f240 329b 	movw	r2, #923	@ 0x39b
 801215c:	4911      	ldr	r1, [pc, #68]	@ (80121a4 <netif_set_down+0x5c>)
 801215e:	4812      	ldr	r0, [pc, #72]	@ (80121a8 <netif_set_down+0x60>)
 8012160:	f009 f978 	bl	801b454 <iprintf>
 8012164:	e019      	b.n	801219a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801216c:	f003 0301 	and.w	r3, r3, #1
 8012170:	2b00      	cmp	r3, #0
 8012172:	d012      	beq.n	801219a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801217a:	f023 0301 	bic.w	r3, r3, #1
 801217e:	b2da      	uxtb	r2, r3
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801218c:	f003 0308 	and.w	r3, r3, #8
 8012190:	2b00      	cmp	r3, #0
 8012192:	d002      	beq.n	801219a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f006 fe39 	bl	8018e0c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801219a:	3708      	adds	r7, #8
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}
 80121a0:	0801cc58 	.word	0x0801cc58
 80121a4:	0801ce20 	.word	0x0801ce20
 80121a8:	0801cca8 	.word	0x0801cca8

080121ac <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b082      	sub	sp, #8
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d107      	bne.n	80121ca <netif_set_link_up+0x1e>
 80121ba:	4b13      	ldr	r3, [pc, #76]	@ (8012208 <netif_set_link_up+0x5c>)
 80121bc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80121c0:	4912      	ldr	r1, [pc, #72]	@ (801220c <netif_set_link_up+0x60>)
 80121c2:	4813      	ldr	r0, [pc, #76]	@ (8012210 <netif_set_link_up+0x64>)
 80121c4:	f009 f946 	bl	801b454 <iprintf>
 80121c8:	e01b      	b.n	8012202 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80121d0:	f003 0304 	and.w	r3, r3, #4
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d114      	bne.n	8012202 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80121de:	f043 0304 	orr.w	r3, r3, #4
 80121e2:	b2da      	uxtb	r2, r3
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80121ea:	2103      	movs	r1, #3
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f7ff ff6b 	bl	80120c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	69db      	ldr	r3, [r3, #28]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d003      	beq.n	8012202 <netif_set_link_up+0x56>
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	69db      	ldr	r3, [r3, #28]
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012202:	3708      	adds	r7, #8
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}
 8012208:	0801cc58 	.word	0x0801cc58
 801220c:	0801ce40 	.word	0x0801ce40
 8012210:	0801cca8 	.word	0x0801cca8

08012214 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b082      	sub	sp, #8
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d107      	bne.n	8012232 <netif_set_link_down+0x1e>
 8012222:	4b11      	ldr	r3, [pc, #68]	@ (8012268 <netif_set_link_down+0x54>)
 8012224:	f240 4206 	movw	r2, #1030	@ 0x406
 8012228:	4910      	ldr	r1, [pc, #64]	@ (801226c <netif_set_link_down+0x58>)
 801222a:	4811      	ldr	r0, [pc, #68]	@ (8012270 <netif_set_link_down+0x5c>)
 801222c:	f009 f912 	bl	801b454 <iprintf>
 8012230:	e017      	b.n	8012262 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012238:	f003 0304 	and.w	r3, r3, #4
 801223c:	2b00      	cmp	r3, #0
 801223e:	d010      	beq.n	8012262 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012246:	f023 0304 	bic.w	r3, r3, #4
 801224a:	b2da      	uxtb	r2, r3
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	69db      	ldr	r3, [r3, #28]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d003      	beq.n	8012262 <netif_set_link_down+0x4e>
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	69db      	ldr	r3, [r3, #28]
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012262:	3708      	adds	r7, #8
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}
 8012268:	0801cc58 	.word	0x0801cc58
 801226c:	0801ce64 	.word	0x0801ce64
 8012270:	0801cca8 	.word	0x0801cca8

08012274 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8012274:	b480      	push	{r7}
 8012276:	b083      	sub	sp, #12
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d002      	beq.n	801228a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	683a      	ldr	r2, [r7, #0]
 8012288:	61da      	str	r2, [r3, #28]
  }
}
 801228a:	bf00      	nop
 801228c:	370c      	adds	r7, #12
 801228e:	46bd      	mov	sp, r7
 8012290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012294:	4770      	bx	lr

08012296 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8012296:	b480      	push	{r7}
 8012298:	b085      	sub	sp, #20
 801229a:	af00      	add	r7, sp, #0
 801229c:	60f8      	str	r0, [r7, #12]
 801229e:	60b9      	str	r1, [r7, #8]
 80122a0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80122a2:	f06f 030b 	mvn.w	r3, #11
}
 80122a6:	4618      	mov	r0, r3
 80122a8:	3714      	adds	r7, #20
 80122aa:	46bd      	mov	sp, r7
 80122ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b0:	4770      	bx	lr
	...

080122b4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80122b4:	b480      	push	{r7}
 80122b6:	b085      	sub	sp, #20
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	4603      	mov	r3, r0
 80122bc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80122be:	79fb      	ldrb	r3, [r7, #7]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d013      	beq.n	80122ec <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80122c4:	4b0d      	ldr	r3, [pc, #52]	@ (80122fc <netif_get_by_index+0x48>)
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	60fb      	str	r3, [r7, #12]
 80122ca:	e00c      	b.n	80122e6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80122d2:	3301      	adds	r3, #1
 80122d4:	b2db      	uxtb	r3, r3
 80122d6:	79fa      	ldrb	r2, [r7, #7]
 80122d8:	429a      	cmp	r2, r3
 80122da:	d101      	bne.n	80122e0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	e006      	b.n	80122ee <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	60fb      	str	r3, [r7, #12]
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d1ef      	bne.n	80122cc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80122ec:	2300      	movs	r3, #0
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3714      	adds	r7, #20
 80122f2:	46bd      	mov	sp, r7
 80122f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f8:	4770      	bx	lr
 80122fa:	bf00      	nop
 80122fc:	24008180 	.word	0x24008180

08012300 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b082      	sub	sp, #8
 8012304:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8012306:	f008 fe49 	bl	801af9c <sys_arch_protect>
 801230a:	6038      	str	r0, [r7, #0]
 801230c:	4b0d      	ldr	r3, [pc, #52]	@ (8012344 <pbuf_free_ooseq+0x44>)
 801230e:	2200      	movs	r2, #0
 8012310:	701a      	strb	r2, [r3, #0]
 8012312:	6838      	ldr	r0, [r7, #0]
 8012314:	f008 fe50 	bl	801afb8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012318:	4b0b      	ldr	r3, [pc, #44]	@ (8012348 <pbuf_free_ooseq+0x48>)
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	607b      	str	r3, [r7, #4]
 801231e:	e00a      	b.n	8012336 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012324:	2b00      	cmp	r3, #0
 8012326:	d003      	beq.n	8012330 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f002 f973 	bl	8014614 <tcp_free_ooseq>
      return;
 801232e:	e005      	b.n	801233c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	68db      	ldr	r3, [r3, #12]
 8012334:	607b      	str	r3, [r7, #4]
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d1f1      	bne.n	8012320 <pbuf_free_ooseq+0x20>
    }
  }
}
 801233c:	3708      	adds	r7, #8
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}
 8012342:	bf00      	nop
 8012344:	24008189 	.word	0x24008189
 8012348:	24008198 	.word	0x24008198

0801234c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b082      	sub	sp, #8
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8012354:	f7ff ffd4 	bl	8012300 <pbuf_free_ooseq>
}
 8012358:	bf00      	nop
 801235a:	3708      	adds	r7, #8
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}

08012360 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b082      	sub	sp, #8
 8012364:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8012366:	f008 fe19 	bl	801af9c <sys_arch_protect>
 801236a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801236c:	4b0f      	ldr	r3, [pc, #60]	@ (80123ac <pbuf_pool_is_empty+0x4c>)
 801236e:	781b      	ldrb	r3, [r3, #0]
 8012370:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8012372:	4b0e      	ldr	r3, [pc, #56]	@ (80123ac <pbuf_pool_is_empty+0x4c>)
 8012374:	2201      	movs	r2, #1
 8012376:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f008 fe1d 	bl	801afb8 <sys_arch_unprotect>

  if (!queued) {
 801237e:	78fb      	ldrb	r3, [r7, #3]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d10f      	bne.n	80123a4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8012384:	2100      	movs	r1, #0
 8012386:	480a      	ldr	r0, [pc, #40]	@ (80123b0 <pbuf_pool_is_empty+0x50>)
 8012388:	f7fe fdde 	bl	8010f48 <tcpip_try_callback>
 801238c:	4603      	mov	r3, r0
 801238e:	2b00      	cmp	r3, #0
 8012390:	d008      	beq.n	80123a4 <pbuf_pool_is_empty+0x44>
 8012392:	f008 fe03 	bl	801af9c <sys_arch_protect>
 8012396:	6078      	str	r0, [r7, #4]
 8012398:	4b04      	ldr	r3, [pc, #16]	@ (80123ac <pbuf_pool_is_empty+0x4c>)
 801239a:	2200      	movs	r2, #0
 801239c:	701a      	strb	r2, [r3, #0]
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f008 fe0a 	bl	801afb8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80123a4:	bf00      	nop
 80123a6:	3708      	adds	r7, #8
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}
 80123ac:	24008189 	.word	0x24008189
 80123b0:	0801234d 	.word	0x0801234d

080123b4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80123b4:	b480      	push	{r7}
 80123b6:	b085      	sub	sp, #20
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	60f8      	str	r0, [r7, #12]
 80123bc:	60b9      	str	r1, [r7, #8]
 80123be:	4611      	mov	r1, r2
 80123c0:	461a      	mov	r2, r3
 80123c2:	460b      	mov	r3, r1
 80123c4:	80fb      	strh	r3, [r7, #6]
 80123c6:	4613      	mov	r3, r2
 80123c8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	2200      	movs	r2, #0
 80123ce:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	68ba      	ldr	r2, [r7, #8]
 80123d4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	88fa      	ldrh	r2, [r7, #6]
 80123da:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	88ba      	ldrh	r2, [r7, #4]
 80123e0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80123e2:	8b3b      	ldrh	r3, [r7, #24]
 80123e4:	b2da      	uxtb	r2, r3
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	7f3a      	ldrb	r2, [r7, #28]
 80123ee:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	2201      	movs	r2, #1
 80123f4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	2200      	movs	r2, #0
 80123fa:	73da      	strb	r2, [r3, #15]
}
 80123fc:	bf00      	nop
 80123fe:	3714      	adds	r7, #20
 8012400:	46bd      	mov	sp, r7
 8012402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012406:	4770      	bx	lr

08012408 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b08c      	sub	sp, #48	@ 0x30
 801240c:	af02      	add	r7, sp, #8
 801240e:	4603      	mov	r3, r0
 8012410:	71fb      	strb	r3, [r7, #7]
 8012412:	460b      	mov	r3, r1
 8012414:	80bb      	strh	r3, [r7, #4]
 8012416:	4613      	mov	r3, r2
 8012418:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801241a:	79fb      	ldrb	r3, [r7, #7]
 801241c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801241e:	887b      	ldrh	r3, [r7, #2]
 8012420:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8012424:	d07f      	beq.n	8012526 <pbuf_alloc+0x11e>
 8012426:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801242a:	f300 80c8 	bgt.w	80125be <pbuf_alloc+0x1b6>
 801242e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8012432:	d010      	beq.n	8012456 <pbuf_alloc+0x4e>
 8012434:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8012438:	f300 80c1 	bgt.w	80125be <pbuf_alloc+0x1b6>
 801243c:	2b01      	cmp	r3, #1
 801243e:	d002      	beq.n	8012446 <pbuf_alloc+0x3e>
 8012440:	2b41      	cmp	r3, #65	@ 0x41
 8012442:	f040 80bc 	bne.w	80125be <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8012446:	887a      	ldrh	r2, [r7, #2]
 8012448:	88bb      	ldrh	r3, [r7, #4]
 801244a:	4619      	mov	r1, r3
 801244c:	2000      	movs	r0, #0
 801244e:	f000 f8d1 	bl	80125f4 <pbuf_alloc_reference>
 8012452:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8012454:	e0bd      	b.n	80125d2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8012456:	2300      	movs	r3, #0
 8012458:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 801245a:	2300      	movs	r3, #0
 801245c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801245e:	88bb      	ldrh	r3, [r7, #4]
 8012460:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8012462:	200c      	movs	r0, #12
 8012464:	f7ff fb9a 	bl	8011b9c <memp_malloc>
 8012468:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d109      	bne.n	8012484 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012470:	f7ff ff76 	bl	8012360 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8012474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012476:	2b00      	cmp	r3, #0
 8012478:	d002      	beq.n	8012480 <pbuf_alloc+0x78>
            pbuf_free(p);
 801247a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801247c:	f000 faa8 	bl	80129d0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012480:	2300      	movs	r3, #0
 8012482:	e0a7      	b.n	80125d4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012484:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012486:	3303      	adds	r3, #3
 8012488:	b29b      	uxth	r3, r3
 801248a:	f023 0303 	bic.w	r3, r3, #3
 801248e:	b29b      	uxth	r3, r3
 8012490:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8012494:	b29b      	uxth	r3, r3
 8012496:	8b7a      	ldrh	r2, [r7, #26]
 8012498:	4293      	cmp	r3, r2
 801249a:	bf28      	it	cs
 801249c:	4613      	movcs	r3, r2
 801249e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80124a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80124a2:	3310      	adds	r3, #16
 80124a4:	693a      	ldr	r2, [r7, #16]
 80124a6:	4413      	add	r3, r2
 80124a8:	3303      	adds	r3, #3
 80124aa:	f023 0303 	bic.w	r3, r3, #3
 80124ae:	4618      	mov	r0, r3
 80124b0:	89f9      	ldrh	r1, [r7, #14]
 80124b2:	8b7a      	ldrh	r2, [r7, #26]
 80124b4:	2300      	movs	r3, #0
 80124b6:	9301      	str	r3, [sp, #4]
 80124b8:	887b      	ldrh	r3, [r7, #2]
 80124ba:	9300      	str	r3, [sp, #0]
 80124bc:	460b      	mov	r3, r1
 80124be:	4601      	mov	r1, r0
 80124c0:	6938      	ldr	r0, [r7, #16]
 80124c2:	f7ff ff77 	bl	80123b4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	685b      	ldr	r3, [r3, #4]
 80124ca:	f003 0303 	and.w	r3, r3, #3
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d006      	beq.n	80124e0 <pbuf_alloc+0xd8>
 80124d2:	4b42      	ldr	r3, [pc, #264]	@ (80125dc <pbuf_alloc+0x1d4>)
 80124d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80124d8:	4941      	ldr	r1, [pc, #260]	@ (80125e0 <pbuf_alloc+0x1d8>)
 80124da:	4842      	ldr	r0, [pc, #264]	@ (80125e4 <pbuf_alloc+0x1dc>)
 80124dc:	f008 ffba 	bl	801b454 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80124e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80124e2:	3303      	adds	r3, #3
 80124e4:	f023 0303 	bic.w	r3, r3, #3
 80124e8:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80124ec:	d106      	bne.n	80124fc <pbuf_alloc+0xf4>
 80124ee:	4b3b      	ldr	r3, [pc, #236]	@ (80125dc <pbuf_alloc+0x1d4>)
 80124f0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80124f4:	493c      	ldr	r1, [pc, #240]	@ (80125e8 <pbuf_alloc+0x1e0>)
 80124f6:	483b      	ldr	r0, [pc, #236]	@ (80125e4 <pbuf_alloc+0x1dc>)
 80124f8:	f008 ffac 	bl	801b454 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80124fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d102      	bne.n	8012508 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	627b      	str	r3, [r7, #36]	@ 0x24
 8012506:	e002      	b.n	801250e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012508:	69fb      	ldr	r3, [r7, #28]
 801250a:	693a      	ldr	r2, [r7, #16]
 801250c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801250e:	693b      	ldr	r3, [r7, #16]
 8012510:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8012512:	8b7a      	ldrh	r2, [r7, #26]
 8012514:	89fb      	ldrh	r3, [r7, #14]
 8012516:	1ad3      	subs	r3, r2, r3
 8012518:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801251a:	2300      	movs	r3, #0
 801251c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801251e:	8b7b      	ldrh	r3, [r7, #26]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d19e      	bne.n	8012462 <pbuf_alloc+0x5a>
      break;
 8012524:	e055      	b.n	80125d2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8012526:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012528:	3303      	adds	r3, #3
 801252a:	b29b      	uxth	r3, r3
 801252c:	f023 0303 	bic.w	r3, r3, #3
 8012530:	b29a      	uxth	r2, r3
 8012532:	88bb      	ldrh	r3, [r7, #4]
 8012534:	3303      	adds	r3, #3
 8012536:	b29b      	uxth	r3, r3
 8012538:	f023 0303 	bic.w	r3, r3, #3
 801253c:	b29b      	uxth	r3, r3
 801253e:	4413      	add	r3, r2
 8012540:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8012542:	8b3b      	ldrh	r3, [r7, #24]
 8012544:	3310      	adds	r3, #16
 8012546:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012548:	8b3a      	ldrh	r2, [r7, #24]
 801254a:	88bb      	ldrh	r3, [r7, #4]
 801254c:	3303      	adds	r3, #3
 801254e:	f023 0303 	bic.w	r3, r3, #3
 8012552:	429a      	cmp	r2, r3
 8012554:	d306      	bcc.n	8012564 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8012556:	8afa      	ldrh	r2, [r7, #22]
 8012558:	88bb      	ldrh	r3, [r7, #4]
 801255a:	3303      	adds	r3, #3
 801255c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012560:	429a      	cmp	r2, r3
 8012562:	d201      	bcs.n	8012568 <pbuf_alloc+0x160>
        return NULL;
 8012564:	2300      	movs	r3, #0
 8012566:	e035      	b.n	80125d4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012568:	8afb      	ldrh	r3, [r7, #22]
 801256a:	4618      	mov	r0, r3
 801256c:	f7ff f96e 	bl	801184c <mem_malloc>
 8012570:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8012572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012574:	2b00      	cmp	r3, #0
 8012576:	d101      	bne.n	801257c <pbuf_alloc+0x174>
        return NULL;
 8012578:	2300      	movs	r3, #0
 801257a:	e02b      	b.n	80125d4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801257c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801257e:	3310      	adds	r3, #16
 8012580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012582:	4413      	add	r3, r2
 8012584:	3303      	adds	r3, #3
 8012586:	f023 0303 	bic.w	r3, r3, #3
 801258a:	4618      	mov	r0, r3
 801258c:	88b9      	ldrh	r1, [r7, #4]
 801258e:	88ba      	ldrh	r2, [r7, #4]
 8012590:	2300      	movs	r3, #0
 8012592:	9301      	str	r3, [sp, #4]
 8012594:	887b      	ldrh	r3, [r7, #2]
 8012596:	9300      	str	r3, [sp, #0]
 8012598:	460b      	mov	r3, r1
 801259a:	4601      	mov	r1, r0
 801259c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801259e:	f7ff ff09 	bl	80123b4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80125a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125a4:	685b      	ldr	r3, [r3, #4]
 80125a6:	f003 0303 	and.w	r3, r3, #3
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d010      	beq.n	80125d0 <pbuf_alloc+0x1c8>
 80125ae:	4b0b      	ldr	r3, [pc, #44]	@ (80125dc <pbuf_alloc+0x1d4>)
 80125b0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80125b4:	490d      	ldr	r1, [pc, #52]	@ (80125ec <pbuf_alloc+0x1e4>)
 80125b6:	480b      	ldr	r0, [pc, #44]	@ (80125e4 <pbuf_alloc+0x1dc>)
 80125b8:	f008 ff4c 	bl	801b454 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80125bc:	e008      	b.n	80125d0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80125be:	4b07      	ldr	r3, [pc, #28]	@ (80125dc <pbuf_alloc+0x1d4>)
 80125c0:	f240 1227 	movw	r2, #295	@ 0x127
 80125c4:	490a      	ldr	r1, [pc, #40]	@ (80125f0 <pbuf_alloc+0x1e8>)
 80125c6:	4807      	ldr	r0, [pc, #28]	@ (80125e4 <pbuf_alloc+0x1dc>)
 80125c8:	f008 ff44 	bl	801b454 <iprintf>
      return NULL;
 80125cc:	2300      	movs	r3, #0
 80125ce:	e001      	b.n	80125d4 <pbuf_alloc+0x1cc>
      break;
 80125d0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80125d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80125d4:	4618      	mov	r0, r3
 80125d6:	3728      	adds	r7, #40	@ 0x28
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}
 80125dc:	0801ce88 	.word	0x0801ce88
 80125e0:	0801ceb8 	.word	0x0801ceb8
 80125e4:	0801cee8 	.word	0x0801cee8
 80125e8:	0801cf10 	.word	0x0801cf10
 80125ec:	0801cf44 	.word	0x0801cf44
 80125f0:	0801cf70 	.word	0x0801cf70

080125f4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b086      	sub	sp, #24
 80125f8:	af02      	add	r7, sp, #8
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	460b      	mov	r3, r1
 80125fe:	807b      	strh	r3, [r7, #2]
 8012600:	4613      	mov	r3, r2
 8012602:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8012604:	883b      	ldrh	r3, [r7, #0]
 8012606:	2b41      	cmp	r3, #65	@ 0x41
 8012608:	d009      	beq.n	801261e <pbuf_alloc_reference+0x2a>
 801260a:	883b      	ldrh	r3, [r7, #0]
 801260c:	2b01      	cmp	r3, #1
 801260e:	d006      	beq.n	801261e <pbuf_alloc_reference+0x2a>
 8012610:	4b0f      	ldr	r3, [pc, #60]	@ (8012650 <pbuf_alloc_reference+0x5c>)
 8012612:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8012616:	490f      	ldr	r1, [pc, #60]	@ (8012654 <pbuf_alloc_reference+0x60>)
 8012618:	480f      	ldr	r0, [pc, #60]	@ (8012658 <pbuf_alloc_reference+0x64>)
 801261a:	f008 ff1b 	bl	801b454 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801261e:	200b      	movs	r0, #11
 8012620:	f7ff fabc 	bl	8011b9c <memp_malloc>
 8012624:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d101      	bne.n	8012630 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801262c:	2300      	movs	r3, #0
 801262e:	e00b      	b.n	8012648 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012630:	8879      	ldrh	r1, [r7, #2]
 8012632:	887a      	ldrh	r2, [r7, #2]
 8012634:	2300      	movs	r3, #0
 8012636:	9301      	str	r3, [sp, #4]
 8012638:	883b      	ldrh	r3, [r7, #0]
 801263a:	9300      	str	r3, [sp, #0]
 801263c:	460b      	mov	r3, r1
 801263e:	6879      	ldr	r1, [r7, #4]
 8012640:	68f8      	ldr	r0, [r7, #12]
 8012642:	f7ff feb7 	bl	80123b4 <pbuf_init_alloced_pbuf>
  return p;
 8012646:	68fb      	ldr	r3, [r7, #12]
}
 8012648:	4618      	mov	r0, r3
 801264a:	3710      	adds	r7, #16
 801264c:	46bd      	mov	sp, r7
 801264e:	bd80      	pop	{r7, pc}
 8012650:	0801ce88 	.word	0x0801ce88
 8012654:	0801cf8c 	.word	0x0801cf8c
 8012658:	0801cee8 	.word	0x0801cee8

0801265c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b088      	sub	sp, #32
 8012660:	af02      	add	r7, sp, #8
 8012662:	607b      	str	r3, [r7, #4]
 8012664:	4603      	mov	r3, r0
 8012666:	73fb      	strb	r3, [r7, #15]
 8012668:	460b      	mov	r3, r1
 801266a:	81bb      	strh	r3, [r7, #12]
 801266c:	4613      	mov	r3, r2
 801266e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012670:	7bfb      	ldrb	r3, [r7, #15]
 8012672:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8012674:	8a7b      	ldrh	r3, [r7, #18]
 8012676:	3303      	adds	r3, #3
 8012678:	f023 0203 	bic.w	r2, r3, #3
 801267c:	89bb      	ldrh	r3, [r7, #12]
 801267e:	441a      	add	r2, r3
 8012680:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012682:	429a      	cmp	r2, r3
 8012684:	d901      	bls.n	801268a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8012686:	2300      	movs	r3, #0
 8012688:	e018      	b.n	80126bc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801268a:	6a3b      	ldr	r3, [r7, #32]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d007      	beq.n	80126a0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012690:	8a7b      	ldrh	r3, [r7, #18]
 8012692:	3303      	adds	r3, #3
 8012694:	f023 0303 	bic.w	r3, r3, #3
 8012698:	6a3a      	ldr	r2, [r7, #32]
 801269a:	4413      	add	r3, r2
 801269c:	617b      	str	r3, [r7, #20]
 801269e:	e001      	b.n	80126a4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80126a0:	2300      	movs	r3, #0
 80126a2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80126a4:	6878      	ldr	r0, [r7, #4]
 80126a6:	89b9      	ldrh	r1, [r7, #12]
 80126a8:	89ba      	ldrh	r2, [r7, #12]
 80126aa:	2302      	movs	r3, #2
 80126ac:	9301      	str	r3, [sp, #4]
 80126ae:	897b      	ldrh	r3, [r7, #10]
 80126b0:	9300      	str	r3, [sp, #0]
 80126b2:	460b      	mov	r3, r1
 80126b4:	6979      	ldr	r1, [r7, #20]
 80126b6:	f7ff fe7d 	bl	80123b4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80126ba:	687b      	ldr	r3, [r7, #4]
}
 80126bc:	4618      	mov	r0, r3
 80126be:	3718      	adds	r7, #24
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}

080126c4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b084      	sub	sp, #16
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	460b      	mov	r3, r1
 80126ce:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d106      	bne.n	80126e4 <pbuf_realloc+0x20>
 80126d6:	4b3a      	ldr	r3, [pc, #232]	@ (80127c0 <pbuf_realloc+0xfc>)
 80126d8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80126dc:	4939      	ldr	r1, [pc, #228]	@ (80127c4 <pbuf_realloc+0x100>)
 80126de:	483a      	ldr	r0, [pc, #232]	@ (80127c8 <pbuf_realloc+0x104>)
 80126e0:	f008 feb8 	bl	801b454 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	891b      	ldrh	r3, [r3, #8]
 80126e8:	887a      	ldrh	r2, [r7, #2]
 80126ea:	429a      	cmp	r2, r3
 80126ec:	d263      	bcs.n	80127b6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	891a      	ldrh	r2, [r3, #8]
 80126f2:	887b      	ldrh	r3, [r7, #2]
 80126f4:	1ad3      	subs	r3, r2, r3
 80126f6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80126f8:	887b      	ldrh	r3, [r7, #2]
 80126fa:	817b      	strh	r3, [r7, #10]
  q = p;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012700:	e018      	b.n	8012734 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	895b      	ldrh	r3, [r3, #10]
 8012706:	897a      	ldrh	r2, [r7, #10]
 8012708:	1ad3      	subs	r3, r2, r3
 801270a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	891a      	ldrh	r2, [r3, #8]
 8012710:	893b      	ldrh	r3, [r7, #8]
 8012712:	1ad3      	subs	r3, r2, r3
 8012714:	b29a      	uxth	r2, r3
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d106      	bne.n	8012734 <pbuf_realloc+0x70>
 8012726:	4b26      	ldr	r3, [pc, #152]	@ (80127c0 <pbuf_realloc+0xfc>)
 8012728:	f240 12af 	movw	r2, #431	@ 0x1af
 801272c:	4927      	ldr	r1, [pc, #156]	@ (80127cc <pbuf_realloc+0x108>)
 801272e:	4826      	ldr	r0, [pc, #152]	@ (80127c8 <pbuf_realloc+0x104>)
 8012730:	f008 fe90 	bl	801b454 <iprintf>
  while (rem_len > q->len) {
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	895b      	ldrh	r3, [r3, #10]
 8012738:	897a      	ldrh	r2, [r7, #10]
 801273a:	429a      	cmp	r2, r3
 801273c:	d8e1      	bhi.n	8012702 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	7b1b      	ldrb	r3, [r3, #12]
 8012742:	f003 030f 	and.w	r3, r3, #15
 8012746:	2b00      	cmp	r3, #0
 8012748:	d121      	bne.n	801278e <pbuf_realloc+0xca>
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	895b      	ldrh	r3, [r3, #10]
 801274e:	897a      	ldrh	r2, [r7, #10]
 8012750:	429a      	cmp	r2, r3
 8012752:	d01c      	beq.n	801278e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	7b5b      	ldrb	r3, [r3, #13]
 8012758:	f003 0302 	and.w	r3, r3, #2
 801275c:	2b00      	cmp	r3, #0
 801275e:	d116      	bne.n	801278e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	685a      	ldr	r2, [r3, #4]
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	1ad3      	subs	r3, r2, r3
 8012768:	b29a      	uxth	r2, r3
 801276a:	897b      	ldrh	r3, [r7, #10]
 801276c:	4413      	add	r3, r2
 801276e:	b29b      	uxth	r3, r3
 8012770:	4619      	mov	r1, r3
 8012772:	68f8      	ldr	r0, [r7, #12]
 8012774:	f7fe ff5a 	bl	801162c <mem_trim>
 8012778:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d106      	bne.n	801278e <pbuf_realloc+0xca>
 8012780:	4b0f      	ldr	r3, [pc, #60]	@ (80127c0 <pbuf_realloc+0xfc>)
 8012782:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8012786:	4912      	ldr	r1, [pc, #72]	@ (80127d0 <pbuf_realloc+0x10c>)
 8012788:	480f      	ldr	r0, [pc, #60]	@ (80127c8 <pbuf_realloc+0x104>)
 801278a:	f008 fe63 	bl	801b454 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	897a      	ldrh	r2, [r7, #10]
 8012792:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	895a      	ldrh	r2, [r3, #10]
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d004      	beq.n	80127ae <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	4618      	mov	r0, r3
 80127aa:	f000 f911 	bl	80129d0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	2200      	movs	r2, #0
 80127b2:	601a      	str	r2, [r3, #0]
 80127b4:	e000      	b.n	80127b8 <pbuf_realloc+0xf4>
    return;
 80127b6:	bf00      	nop

}
 80127b8:	3710      	adds	r7, #16
 80127ba:	46bd      	mov	sp, r7
 80127bc:	bd80      	pop	{r7, pc}
 80127be:	bf00      	nop
 80127c0:	0801ce88 	.word	0x0801ce88
 80127c4:	0801cfa0 	.word	0x0801cfa0
 80127c8:	0801cee8 	.word	0x0801cee8
 80127cc:	0801cfb8 	.word	0x0801cfb8
 80127d0:	0801cfd0 	.word	0x0801cfd0

080127d4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b086      	sub	sp, #24
 80127d8:	af00      	add	r7, sp, #0
 80127da:	60f8      	str	r0, [r7, #12]
 80127dc:	60b9      	str	r1, [r7, #8]
 80127de:	4613      	mov	r3, r2
 80127e0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d106      	bne.n	80127f6 <pbuf_add_header_impl+0x22>
 80127e8:	4b2b      	ldr	r3, [pc, #172]	@ (8012898 <pbuf_add_header_impl+0xc4>)
 80127ea:	f240 12df 	movw	r2, #479	@ 0x1df
 80127ee:	492b      	ldr	r1, [pc, #172]	@ (801289c <pbuf_add_header_impl+0xc8>)
 80127f0:	482b      	ldr	r0, [pc, #172]	@ (80128a0 <pbuf_add_header_impl+0xcc>)
 80127f2:	f008 fe2f 	bl	801b454 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d003      	beq.n	8012804 <pbuf_add_header_impl+0x30>
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012802:	d301      	bcc.n	8012808 <pbuf_add_header_impl+0x34>
    return 1;
 8012804:	2301      	movs	r3, #1
 8012806:	e043      	b.n	8012890 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d101      	bne.n	8012812 <pbuf_add_header_impl+0x3e>
    return 0;
 801280e:	2300      	movs	r3, #0
 8012810:	e03e      	b.n	8012890 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012812:	68bb      	ldr	r3, [r7, #8]
 8012814:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	891a      	ldrh	r2, [r3, #8]
 801281a:	8a7b      	ldrh	r3, [r7, #18]
 801281c:	4413      	add	r3, r2
 801281e:	b29b      	uxth	r3, r3
 8012820:	8a7a      	ldrh	r2, [r7, #18]
 8012822:	429a      	cmp	r2, r3
 8012824:	d901      	bls.n	801282a <pbuf_add_header_impl+0x56>
    return 1;
 8012826:	2301      	movs	r3, #1
 8012828:	e032      	b.n	8012890 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	7b1b      	ldrb	r3, [r3, #12]
 801282e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012830:	8a3b      	ldrh	r3, [r7, #16]
 8012832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012836:	2b00      	cmp	r3, #0
 8012838:	d00c      	beq.n	8012854 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	685a      	ldr	r2, [r3, #4]
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	425b      	negs	r3, r3
 8012842:	4413      	add	r3, r2
 8012844:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	3310      	adds	r3, #16
 801284a:	697a      	ldr	r2, [r7, #20]
 801284c:	429a      	cmp	r2, r3
 801284e:	d20d      	bcs.n	801286c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012850:	2301      	movs	r3, #1
 8012852:	e01d      	b.n	8012890 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012854:	79fb      	ldrb	r3, [r7, #7]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d006      	beq.n	8012868 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	685a      	ldr	r2, [r3, #4]
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	425b      	negs	r3, r3
 8012862:	4413      	add	r3, r2
 8012864:	617b      	str	r3, [r7, #20]
 8012866:	e001      	b.n	801286c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012868:	2301      	movs	r3, #1
 801286a:	e011      	b.n	8012890 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	697a      	ldr	r2, [r7, #20]
 8012870:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	895a      	ldrh	r2, [r3, #10]
 8012876:	8a7b      	ldrh	r3, [r7, #18]
 8012878:	4413      	add	r3, r2
 801287a:	b29a      	uxth	r2, r3
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	891a      	ldrh	r2, [r3, #8]
 8012884:	8a7b      	ldrh	r3, [r7, #18]
 8012886:	4413      	add	r3, r2
 8012888:	b29a      	uxth	r2, r3
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	811a      	strh	r2, [r3, #8]


  return 0;
 801288e:	2300      	movs	r3, #0
}
 8012890:	4618      	mov	r0, r3
 8012892:	3718      	adds	r7, #24
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}
 8012898:	0801ce88 	.word	0x0801ce88
 801289c:	0801cfec 	.word	0x0801cfec
 80128a0:	0801cee8 	.word	0x0801cee8

080128a4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b082      	sub	sp, #8
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
 80128ac:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80128ae:	2200      	movs	r2, #0
 80128b0:	6839      	ldr	r1, [r7, #0]
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f7ff ff8e 	bl	80127d4 <pbuf_add_header_impl>
 80128b8:	4603      	mov	r3, r0
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3708      	adds	r7, #8
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}
	...

080128c4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b084      	sub	sp, #16
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
 80128cc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d106      	bne.n	80128e2 <pbuf_remove_header+0x1e>
 80128d4:	4b20      	ldr	r3, [pc, #128]	@ (8012958 <pbuf_remove_header+0x94>)
 80128d6:	f240 224b 	movw	r2, #587	@ 0x24b
 80128da:	4920      	ldr	r1, [pc, #128]	@ (801295c <pbuf_remove_header+0x98>)
 80128dc:	4820      	ldr	r0, [pc, #128]	@ (8012960 <pbuf_remove_header+0x9c>)
 80128de:	f008 fdb9 	bl	801b454 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d003      	beq.n	80128f0 <pbuf_remove_header+0x2c>
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80128ee:	d301      	bcc.n	80128f4 <pbuf_remove_header+0x30>
    return 1;
 80128f0:	2301      	movs	r3, #1
 80128f2:	e02c      	b.n	801294e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d101      	bne.n	80128fe <pbuf_remove_header+0x3a>
    return 0;
 80128fa:	2300      	movs	r3, #0
 80128fc:	e027      	b.n	801294e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	895b      	ldrh	r3, [r3, #10]
 8012906:	89fa      	ldrh	r2, [r7, #14]
 8012908:	429a      	cmp	r2, r3
 801290a:	d908      	bls.n	801291e <pbuf_remove_header+0x5a>
 801290c:	4b12      	ldr	r3, [pc, #72]	@ (8012958 <pbuf_remove_header+0x94>)
 801290e:	f240 2255 	movw	r2, #597	@ 0x255
 8012912:	4914      	ldr	r1, [pc, #80]	@ (8012964 <pbuf_remove_header+0xa0>)
 8012914:	4812      	ldr	r0, [pc, #72]	@ (8012960 <pbuf_remove_header+0x9c>)
 8012916:	f008 fd9d 	bl	801b454 <iprintf>
 801291a:	2301      	movs	r3, #1
 801291c:	e017      	b.n	801294e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	685b      	ldr	r3, [r3, #4]
 8012922:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	685a      	ldr	r2, [r3, #4]
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	441a      	add	r2, r3
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	895a      	ldrh	r2, [r3, #10]
 8012934:	89fb      	ldrh	r3, [r7, #14]
 8012936:	1ad3      	subs	r3, r2, r3
 8012938:	b29a      	uxth	r2, r3
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	891a      	ldrh	r2, [r3, #8]
 8012942:	89fb      	ldrh	r3, [r7, #14]
 8012944:	1ad3      	subs	r3, r2, r3
 8012946:	b29a      	uxth	r2, r3
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801294c:	2300      	movs	r3, #0
}
 801294e:	4618      	mov	r0, r3
 8012950:	3710      	adds	r7, #16
 8012952:	46bd      	mov	sp, r7
 8012954:	bd80      	pop	{r7, pc}
 8012956:	bf00      	nop
 8012958:	0801ce88 	.word	0x0801ce88
 801295c:	0801cfec 	.word	0x0801cfec
 8012960:	0801cee8 	.word	0x0801cee8
 8012964:	0801cff8 	.word	0x0801cff8

08012968 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b082      	sub	sp, #8
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	460b      	mov	r3, r1
 8012972:	807b      	strh	r3, [r7, #2]
 8012974:	4613      	mov	r3, r2
 8012976:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012978:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801297c:	2b00      	cmp	r3, #0
 801297e:	da08      	bge.n	8012992 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012980:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012984:	425b      	negs	r3, r3
 8012986:	4619      	mov	r1, r3
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f7ff ff9b 	bl	80128c4 <pbuf_remove_header>
 801298e:	4603      	mov	r3, r0
 8012990:	e007      	b.n	80129a2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012992:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012996:	787a      	ldrb	r2, [r7, #1]
 8012998:	4619      	mov	r1, r3
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f7ff ff1a 	bl	80127d4 <pbuf_add_header_impl>
 80129a0:	4603      	mov	r3, r0
  }
}
 80129a2:	4618      	mov	r0, r3
 80129a4:	3708      	adds	r7, #8
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}

080129aa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80129aa:	b580      	push	{r7, lr}
 80129ac:	b082      	sub	sp, #8
 80129ae:	af00      	add	r7, sp, #0
 80129b0:	6078      	str	r0, [r7, #4]
 80129b2:	460b      	mov	r3, r1
 80129b4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80129b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80129ba:	2201      	movs	r2, #1
 80129bc:	4619      	mov	r1, r3
 80129be:	6878      	ldr	r0, [r7, #4]
 80129c0:	f7ff ffd2 	bl	8012968 <pbuf_header_impl>
 80129c4:	4603      	mov	r3, r0
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3708      	adds	r7, #8
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}
	...

080129d0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b088      	sub	sp, #32
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d10b      	bne.n	80129f6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d106      	bne.n	80129f2 <pbuf_free+0x22>
 80129e4:	4b3b      	ldr	r3, [pc, #236]	@ (8012ad4 <pbuf_free+0x104>)
 80129e6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80129ea:	493b      	ldr	r1, [pc, #236]	@ (8012ad8 <pbuf_free+0x108>)
 80129ec:	483b      	ldr	r0, [pc, #236]	@ (8012adc <pbuf_free+0x10c>)
 80129ee:	f008 fd31 	bl	801b454 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80129f2:	2300      	movs	r3, #0
 80129f4:	e069      	b.n	8012aca <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80129f6:	2300      	movs	r3, #0
 80129f8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80129fa:	e062      	b.n	8012ac2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80129fc:	f008 face 	bl	801af9c <sys_arch_protect>
 8012a00:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	7b9b      	ldrb	r3, [r3, #14]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d106      	bne.n	8012a18 <pbuf_free+0x48>
 8012a0a:	4b32      	ldr	r3, [pc, #200]	@ (8012ad4 <pbuf_free+0x104>)
 8012a0c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8012a10:	4933      	ldr	r1, [pc, #204]	@ (8012ae0 <pbuf_free+0x110>)
 8012a12:	4832      	ldr	r0, [pc, #200]	@ (8012adc <pbuf_free+0x10c>)
 8012a14:	f008 fd1e 	bl	801b454 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	7b9b      	ldrb	r3, [r3, #14]
 8012a1c:	3b01      	subs	r3, #1
 8012a1e:	b2da      	uxtb	r2, r3
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	739a      	strb	r2, [r3, #14]
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	7b9b      	ldrb	r3, [r3, #14]
 8012a28:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012a2a:	69b8      	ldr	r0, [r7, #24]
 8012a2c:	f008 fac4 	bl	801afb8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012a30:	7dfb      	ldrb	r3, [r7, #23]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d143      	bne.n	8012abe <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	7b1b      	ldrb	r3, [r3, #12]
 8012a40:	f003 030f 	and.w	r3, r3, #15
 8012a44:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	7b5b      	ldrb	r3, [r3, #13]
 8012a4a:	f003 0302 	and.w	r3, r3, #2
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d011      	beq.n	8012a76 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012a56:	68bb      	ldr	r3, [r7, #8]
 8012a58:	691b      	ldr	r3, [r3, #16]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d106      	bne.n	8012a6c <pbuf_free+0x9c>
 8012a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8012ad4 <pbuf_free+0x104>)
 8012a60:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8012a64:	491f      	ldr	r1, [pc, #124]	@ (8012ae4 <pbuf_free+0x114>)
 8012a66:	481d      	ldr	r0, [pc, #116]	@ (8012adc <pbuf_free+0x10c>)
 8012a68:	f008 fcf4 	bl	801b454 <iprintf>
        pc->custom_free_function(p);
 8012a6c:	68bb      	ldr	r3, [r7, #8]
 8012a6e:	691b      	ldr	r3, [r3, #16]
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	4798      	blx	r3
 8012a74:	e01d      	b.n	8012ab2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012a76:	7bfb      	ldrb	r3, [r7, #15]
 8012a78:	2b02      	cmp	r3, #2
 8012a7a:	d104      	bne.n	8012a86 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012a7c:	6879      	ldr	r1, [r7, #4]
 8012a7e:	200c      	movs	r0, #12
 8012a80:	f7ff f902 	bl	8011c88 <memp_free>
 8012a84:	e015      	b.n	8012ab2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012a86:	7bfb      	ldrb	r3, [r7, #15]
 8012a88:	2b01      	cmp	r3, #1
 8012a8a:	d104      	bne.n	8012a96 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012a8c:	6879      	ldr	r1, [r7, #4]
 8012a8e:	200b      	movs	r0, #11
 8012a90:	f7ff f8fa 	bl	8011c88 <memp_free>
 8012a94:	e00d      	b.n	8012ab2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012a96:	7bfb      	ldrb	r3, [r7, #15]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d103      	bne.n	8012aa4 <pbuf_free+0xd4>
          mem_free(p);
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	f7fe fd35 	bl	801150c <mem_free>
 8012aa2:	e006      	b.n	8012ab2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8012ad4 <pbuf_free+0x104>)
 8012aa6:	f240 320f 	movw	r2, #783	@ 0x30f
 8012aaa:	490f      	ldr	r1, [pc, #60]	@ (8012ae8 <pbuf_free+0x118>)
 8012aac:	480b      	ldr	r0, [pc, #44]	@ (8012adc <pbuf_free+0x10c>)
 8012aae:	f008 fcd1 	bl	801b454 <iprintf>
        }
      }
      count++;
 8012ab2:	7ffb      	ldrb	r3, [r7, #31]
 8012ab4:	3301      	adds	r3, #1
 8012ab6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	607b      	str	r3, [r7, #4]
 8012abc:	e001      	b.n	8012ac2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012abe:	2300      	movs	r3, #0
 8012ac0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d199      	bne.n	80129fc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012ac8:	7ffb      	ldrb	r3, [r7, #31]
}
 8012aca:	4618      	mov	r0, r3
 8012acc:	3720      	adds	r7, #32
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	bd80      	pop	{r7, pc}
 8012ad2:	bf00      	nop
 8012ad4:	0801ce88 	.word	0x0801ce88
 8012ad8:	0801cfec 	.word	0x0801cfec
 8012adc:	0801cee8 	.word	0x0801cee8
 8012ae0:	0801d018 	.word	0x0801d018
 8012ae4:	0801d030 	.word	0x0801d030
 8012ae8:	0801d054 	.word	0x0801d054

08012aec <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012aec:	b480      	push	{r7}
 8012aee:	b085      	sub	sp, #20
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012af4:	2300      	movs	r3, #0
 8012af6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012af8:	e005      	b.n	8012b06 <pbuf_clen+0x1a>
    ++len;
 8012afa:	89fb      	ldrh	r3, [r7, #14]
 8012afc:	3301      	adds	r3, #1
 8012afe:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d1f6      	bne.n	8012afa <pbuf_clen+0xe>
  }
  return len;
 8012b0c:	89fb      	ldrh	r3, [r7, #14]
}
 8012b0e:	4618      	mov	r0, r3
 8012b10:	3714      	adds	r7, #20
 8012b12:	46bd      	mov	sp, r7
 8012b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b18:	4770      	bx	lr
	...

08012b1c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b084      	sub	sp, #16
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d016      	beq.n	8012b58 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012b2a:	f008 fa37 	bl	801af9c <sys_arch_protect>
 8012b2e:	60f8      	str	r0, [r7, #12]
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	7b9b      	ldrb	r3, [r3, #14]
 8012b34:	3301      	adds	r3, #1
 8012b36:	b2da      	uxtb	r2, r3
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	739a      	strb	r2, [r3, #14]
 8012b3c:	68f8      	ldr	r0, [r7, #12]
 8012b3e:	f008 fa3b 	bl	801afb8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	7b9b      	ldrb	r3, [r3, #14]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d106      	bne.n	8012b58 <pbuf_ref+0x3c>
 8012b4a:	4b05      	ldr	r3, [pc, #20]	@ (8012b60 <pbuf_ref+0x44>)
 8012b4c:	f240 3242 	movw	r2, #834	@ 0x342
 8012b50:	4904      	ldr	r1, [pc, #16]	@ (8012b64 <pbuf_ref+0x48>)
 8012b52:	4805      	ldr	r0, [pc, #20]	@ (8012b68 <pbuf_ref+0x4c>)
 8012b54:	f008 fc7e 	bl	801b454 <iprintf>
  }
}
 8012b58:	bf00      	nop
 8012b5a:	3710      	adds	r7, #16
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}
 8012b60:	0801ce88 	.word	0x0801ce88
 8012b64:	0801d068 	.word	0x0801d068
 8012b68:	0801cee8 	.word	0x0801cee8

08012b6c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b084      	sub	sp, #16
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d002      	beq.n	8012b82 <pbuf_cat+0x16>
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d107      	bne.n	8012b92 <pbuf_cat+0x26>
 8012b82:	4b20      	ldr	r3, [pc, #128]	@ (8012c04 <pbuf_cat+0x98>)
 8012b84:	f240 3259 	movw	r2, #857	@ 0x359
 8012b88:	491f      	ldr	r1, [pc, #124]	@ (8012c08 <pbuf_cat+0x9c>)
 8012b8a:	4820      	ldr	r0, [pc, #128]	@ (8012c0c <pbuf_cat+0xa0>)
 8012b8c:	f008 fc62 	bl	801b454 <iprintf>
 8012b90:	e034      	b.n	8012bfc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	60fb      	str	r3, [r7, #12]
 8012b96:	e00a      	b.n	8012bae <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	891a      	ldrh	r2, [r3, #8]
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	891b      	ldrh	r3, [r3, #8]
 8012ba0:	4413      	add	r3, r2
 8012ba2:	b29a      	uxth	r2, r3
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	60fb      	str	r3, [r7, #12]
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d1f0      	bne.n	8012b98 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	891a      	ldrh	r2, [r3, #8]
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	895b      	ldrh	r3, [r3, #10]
 8012bbe:	429a      	cmp	r2, r3
 8012bc0:	d006      	beq.n	8012bd0 <pbuf_cat+0x64>
 8012bc2:	4b10      	ldr	r3, [pc, #64]	@ (8012c04 <pbuf_cat+0x98>)
 8012bc4:	f240 3262 	movw	r2, #866	@ 0x362
 8012bc8:	4911      	ldr	r1, [pc, #68]	@ (8012c10 <pbuf_cat+0xa4>)
 8012bca:	4810      	ldr	r0, [pc, #64]	@ (8012c0c <pbuf_cat+0xa0>)
 8012bcc:	f008 fc42 	bl	801b454 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d006      	beq.n	8012be6 <pbuf_cat+0x7a>
 8012bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8012c04 <pbuf_cat+0x98>)
 8012bda:	f240 3263 	movw	r2, #867	@ 0x363
 8012bde:	490d      	ldr	r1, [pc, #52]	@ (8012c14 <pbuf_cat+0xa8>)
 8012be0:	480a      	ldr	r0, [pc, #40]	@ (8012c0c <pbuf_cat+0xa0>)
 8012be2:	f008 fc37 	bl	801b454 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	891a      	ldrh	r2, [r3, #8]
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	891b      	ldrh	r3, [r3, #8]
 8012bee:	4413      	add	r3, r2
 8012bf0:	b29a      	uxth	r2, r3
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	683a      	ldr	r2, [r7, #0]
 8012bfa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012bfc:	3710      	adds	r7, #16
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	0801ce88 	.word	0x0801ce88
 8012c08:	0801d07c 	.word	0x0801d07c
 8012c0c:	0801cee8 	.word	0x0801cee8
 8012c10:	0801d0b4 	.word	0x0801d0b4
 8012c14:	0801d0e4 	.word	0x0801d0e4

08012c18 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b086      	sub	sp, #24
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
 8012c20:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8012c22:	2300      	movs	r3, #0
 8012c24:	617b      	str	r3, [r7, #20]
 8012c26:	2300      	movs	r3, #0
 8012c28:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d008      	beq.n	8012c42 <pbuf_copy+0x2a>
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d005      	beq.n	8012c42 <pbuf_copy+0x2a>
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	891a      	ldrh	r2, [r3, #8]
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	891b      	ldrh	r3, [r3, #8]
 8012c3e:	429a      	cmp	r2, r3
 8012c40:	d209      	bcs.n	8012c56 <pbuf_copy+0x3e>
 8012c42:	4b57      	ldr	r3, [pc, #348]	@ (8012da0 <pbuf_copy+0x188>)
 8012c44:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8012c48:	4956      	ldr	r1, [pc, #344]	@ (8012da4 <pbuf_copy+0x18c>)
 8012c4a:	4857      	ldr	r0, [pc, #348]	@ (8012da8 <pbuf_copy+0x190>)
 8012c4c:	f008 fc02 	bl	801b454 <iprintf>
 8012c50:	f06f 030f 	mvn.w	r3, #15
 8012c54:	e09f      	b.n	8012d96 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	895b      	ldrh	r3, [r3, #10]
 8012c5a:	461a      	mov	r2, r3
 8012c5c:	697b      	ldr	r3, [r7, #20]
 8012c5e:	1ad2      	subs	r2, r2, r3
 8012c60:	683b      	ldr	r3, [r7, #0]
 8012c62:	895b      	ldrh	r3, [r3, #10]
 8012c64:	4619      	mov	r1, r3
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	1acb      	subs	r3, r1, r3
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d306      	bcc.n	8012c7c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	895b      	ldrh	r3, [r3, #10]
 8012c72:	461a      	mov	r2, r3
 8012c74:	693b      	ldr	r3, [r7, #16]
 8012c76:	1ad3      	subs	r3, r2, r3
 8012c78:	60fb      	str	r3, [r7, #12]
 8012c7a:	e005      	b.n	8012c88 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	895b      	ldrh	r3, [r3, #10]
 8012c80:	461a      	mov	r2, r3
 8012c82:	697b      	ldr	r3, [r7, #20]
 8012c84:	1ad3      	subs	r3, r2, r3
 8012c86:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	685a      	ldr	r2, [r3, #4]
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	18d0      	adds	r0, r2, r3
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	685a      	ldr	r2, [r3, #4]
 8012c94:	693b      	ldr	r3, [r7, #16]
 8012c96:	4413      	add	r3, r2
 8012c98:	68fa      	ldr	r2, [r7, #12]
 8012c9a:	4619      	mov	r1, r3
 8012c9c:	f008 fdbd 	bl	801b81a <memcpy>
    offset_to += len;
 8012ca0:	697a      	ldr	r2, [r7, #20]
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	4413      	add	r3, r2
 8012ca6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012ca8:	693a      	ldr	r2, [r7, #16]
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	4413      	add	r3, r2
 8012cae:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	895b      	ldrh	r3, [r3, #10]
 8012cb4:	461a      	mov	r2, r3
 8012cb6:	697b      	ldr	r3, [r7, #20]
 8012cb8:	4293      	cmp	r3, r2
 8012cba:	d906      	bls.n	8012cca <pbuf_copy+0xb2>
 8012cbc:	4b38      	ldr	r3, [pc, #224]	@ (8012da0 <pbuf_copy+0x188>)
 8012cbe:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8012cc2:	493a      	ldr	r1, [pc, #232]	@ (8012dac <pbuf_copy+0x194>)
 8012cc4:	4838      	ldr	r0, [pc, #224]	@ (8012da8 <pbuf_copy+0x190>)
 8012cc6:	f008 fbc5 	bl	801b454 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8012cca:	683b      	ldr	r3, [r7, #0]
 8012ccc:	895b      	ldrh	r3, [r3, #10]
 8012cce:	461a      	mov	r2, r3
 8012cd0:	693b      	ldr	r3, [r7, #16]
 8012cd2:	4293      	cmp	r3, r2
 8012cd4:	d906      	bls.n	8012ce4 <pbuf_copy+0xcc>
 8012cd6:	4b32      	ldr	r3, [pc, #200]	@ (8012da0 <pbuf_copy+0x188>)
 8012cd8:	f240 32da 	movw	r2, #986	@ 0x3da
 8012cdc:	4934      	ldr	r1, [pc, #208]	@ (8012db0 <pbuf_copy+0x198>)
 8012cde:	4832      	ldr	r0, [pc, #200]	@ (8012da8 <pbuf_copy+0x190>)
 8012ce0:	f008 fbb8 	bl	801b454 <iprintf>
    if (offset_from >= p_from->len) {
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	895b      	ldrh	r3, [r3, #10]
 8012ce8:	461a      	mov	r2, r3
 8012cea:	693b      	ldr	r3, [r7, #16]
 8012cec:	4293      	cmp	r3, r2
 8012cee:	d304      	bcc.n	8012cfa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	895b      	ldrh	r3, [r3, #10]
 8012cfe:	461a      	mov	r2, r3
 8012d00:	697b      	ldr	r3, [r7, #20]
 8012d02:	4293      	cmp	r3, r2
 8012d04:	d114      	bne.n	8012d30 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8012d06:	2300      	movs	r3, #0
 8012d08:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d10c      	bne.n	8012d30 <pbuf_copy+0x118>
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d009      	beq.n	8012d30 <pbuf_copy+0x118>
 8012d1c:	4b20      	ldr	r3, [pc, #128]	@ (8012da0 <pbuf_copy+0x188>)
 8012d1e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8012d22:	4924      	ldr	r1, [pc, #144]	@ (8012db4 <pbuf_copy+0x19c>)
 8012d24:	4820      	ldr	r0, [pc, #128]	@ (8012da8 <pbuf_copy+0x190>)
 8012d26:	f008 fb95 	bl	801b454 <iprintf>
 8012d2a:	f06f 030f 	mvn.w	r3, #15
 8012d2e:	e032      	b.n	8012d96 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d013      	beq.n	8012d5e <pbuf_copy+0x146>
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	895a      	ldrh	r2, [r3, #10]
 8012d3a:	683b      	ldr	r3, [r7, #0]
 8012d3c:	891b      	ldrh	r3, [r3, #8]
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d10d      	bne.n	8012d5e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012d42:	683b      	ldr	r3, [r7, #0]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d009      	beq.n	8012d5e <pbuf_copy+0x146>
 8012d4a:	4b15      	ldr	r3, [pc, #84]	@ (8012da0 <pbuf_copy+0x188>)
 8012d4c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8012d50:	4919      	ldr	r1, [pc, #100]	@ (8012db8 <pbuf_copy+0x1a0>)
 8012d52:	4815      	ldr	r0, [pc, #84]	@ (8012da8 <pbuf_copy+0x190>)
 8012d54:	f008 fb7e 	bl	801b454 <iprintf>
 8012d58:	f06f 0305 	mvn.w	r3, #5
 8012d5c:	e01b      	b.n	8012d96 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d013      	beq.n	8012d8c <pbuf_copy+0x174>
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	895a      	ldrh	r2, [r3, #10]
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	891b      	ldrh	r3, [r3, #8]
 8012d6c:	429a      	cmp	r2, r3
 8012d6e:	d10d      	bne.n	8012d8c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d009      	beq.n	8012d8c <pbuf_copy+0x174>
 8012d78:	4b09      	ldr	r3, [pc, #36]	@ (8012da0 <pbuf_copy+0x188>)
 8012d7a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8012d7e:	490e      	ldr	r1, [pc, #56]	@ (8012db8 <pbuf_copy+0x1a0>)
 8012d80:	4809      	ldr	r0, [pc, #36]	@ (8012da8 <pbuf_copy+0x190>)
 8012d82:	f008 fb67 	bl	801b454 <iprintf>
 8012d86:	f06f 0305 	mvn.w	r3, #5
 8012d8a:	e004      	b.n	8012d96 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	f47f af61 	bne.w	8012c56 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012d94:	2300      	movs	r3, #0
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	3718      	adds	r7, #24
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}
 8012d9e:	bf00      	nop
 8012da0:	0801ce88 	.word	0x0801ce88
 8012da4:	0801d130 	.word	0x0801d130
 8012da8:	0801cee8 	.word	0x0801cee8
 8012dac:	0801d160 	.word	0x0801d160
 8012db0:	0801d178 	.word	0x0801d178
 8012db4:	0801d194 	.word	0x0801d194
 8012db8:	0801d1a4 	.word	0x0801d1a4

08012dbc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b088      	sub	sp, #32
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	60f8      	str	r0, [r7, #12]
 8012dc4:	60b9      	str	r1, [r7, #8]
 8012dc6:	4611      	mov	r1, r2
 8012dc8:	461a      	mov	r2, r3
 8012dca:	460b      	mov	r3, r1
 8012dcc:	80fb      	strh	r3, [r7, #6]
 8012dce:	4613      	mov	r3, r2
 8012dd0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d108      	bne.n	8012df2 <pbuf_copy_partial+0x36>
 8012de0:	4b2b      	ldr	r3, [pc, #172]	@ (8012e90 <pbuf_copy_partial+0xd4>)
 8012de2:	f240 420a 	movw	r2, #1034	@ 0x40a
 8012de6:	492b      	ldr	r1, [pc, #172]	@ (8012e94 <pbuf_copy_partial+0xd8>)
 8012de8:	482b      	ldr	r0, [pc, #172]	@ (8012e98 <pbuf_copy_partial+0xdc>)
 8012dea:	f008 fb33 	bl	801b454 <iprintf>
 8012dee:	2300      	movs	r3, #0
 8012df0:	e04a      	b.n	8012e88 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d108      	bne.n	8012e0a <pbuf_copy_partial+0x4e>
 8012df8:	4b25      	ldr	r3, [pc, #148]	@ (8012e90 <pbuf_copy_partial+0xd4>)
 8012dfa:	f240 420b 	movw	r2, #1035	@ 0x40b
 8012dfe:	4927      	ldr	r1, [pc, #156]	@ (8012e9c <pbuf_copy_partial+0xe0>)
 8012e00:	4825      	ldr	r0, [pc, #148]	@ (8012e98 <pbuf_copy_partial+0xdc>)
 8012e02:	f008 fb27 	bl	801b454 <iprintf>
 8012e06:	2300      	movs	r3, #0
 8012e08:	e03e      	b.n	8012e88 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	61fb      	str	r3, [r7, #28]
 8012e0e:	e034      	b.n	8012e7a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012e10:	88bb      	ldrh	r3, [r7, #4]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d00a      	beq.n	8012e2c <pbuf_copy_partial+0x70>
 8012e16:	69fb      	ldr	r3, [r7, #28]
 8012e18:	895b      	ldrh	r3, [r3, #10]
 8012e1a:	88ba      	ldrh	r2, [r7, #4]
 8012e1c:	429a      	cmp	r2, r3
 8012e1e:	d305      	bcc.n	8012e2c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012e20:	69fb      	ldr	r3, [r7, #28]
 8012e22:	895b      	ldrh	r3, [r3, #10]
 8012e24:	88ba      	ldrh	r2, [r7, #4]
 8012e26:	1ad3      	subs	r3, r2, r3
 8012e28:	80bb      	strh	r3, [r7, #4]
 8012e2a:	e023      	b.n	8012e74 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8012e2c:	69fb      	ldr	r3, [r7, #28]
 8012e2e:	895a      	ldrh	r2, [r3, #10]
 8012e30:	88bb      	ldrh	r3, [r7, #4]
 8012e32:	1ad3      	subs	r3, r2, r3
 8012e34:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8012e36:	8b3a      	ldrh	r2, [r7, #24]
 8012e38:	88fb      	ldrh	r3, [r7, #6]
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d901      	bls.n	8012e42 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8012e3e:	88fb      	ldrh	r3, [r7, #6]
 8012e40:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8012e42:	8b7b      	ldrh	r3, [r7, #26]
 8012e44:	68ba      	ldr	r2, [r7, #8]
 8012e46:	18d0      	adds	r0, r2, r3
 8012e48:	69fb      	ldr	r3, [r7, #28]
 8012e4a:	685a      	ldr	r2, [r3, #4]
 8012e4c:	88bb      	ldrh	r3, [r7, #4]
 8012e4e:	4413      	add	r3, r2
 8012e50:	8b3a      	ldrh	r2, [r7, #24]
 8012e52:	4619      	mov	r1, r3
 8012e54:	f008 fce1 	bl	801b81a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8012e58:	8afa      	ldrh	r2, [r7, #22]
 8012e5a:	8b3b      	ldrh	r3, [r7, #24]
 8012e5c:	4413      	add	r3, r2
 8012e5e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8012e60:	8b7a      	ldrh	r2, [r7, #26]
 8012e62:	8b3b      	ldrh	r3, [r7, #24]
 8012e64:	4413      	add	r3, r2
 8012e66:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8012e68:	88fa      	ldrh	r2, [r7, #6]
 8012e6a:	8b3b      	ldrh	r3, [r7, #24]
 8012e6c:	1ad3      	subs	r3, r2, r3
 8012e6e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8012e70:	2300      	movs	r3, #0
 8012e72:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012e74:	69fb      	ldr	r3, [r7, #28]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	61fb      	str	r3, [r7, #28]
 8012e7a:	88fb      	ldrh	r3, [r7, #6]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d002      	beq.n	8012e86 <pbuf_copy_partial+0xca>
 8012e80:	69fb      	ldr	r3, [r7, #28]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d1c4      	bne.n	8012e10 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8012e86:	8afb      	ldrh	r3, [r7, #22]
}
 8012e88:	4618      	mov	r0, r3
 8012e8a:	3720      	adds	r7, #32
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}
 8012e90:	0801ce88 	.word	0x0801ce88
 8012e94:	0801d1d0 	.word	0x0801d1d0
 8012e98:	0801cee8 	.word	0x0801cee8
 8012e9c:	0801d1f0 	.word	0x0801d1f0

08012ea0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b084      	sub	sp, #16
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	603a      	str	r2, [r7, #0]
 8012eaa:	71fb      	strb	r3, [r7, #7]
 8012eac:	460b      	mov	r3, r1
 8012eae:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	8919      	ldrh	r1, [r3, #8]
 8012eb4:	88ba      	ldrh	r2, [r7, #4]
 8012eb6:	79fb      	ldrb	r3, [r7, #7]
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7ff faa5 	bl	8012408 <pbuf_alloc>
 8012ebe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d101      	bne.n	8012eca <pbuf_clone+0x2a>
    return NULL;
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	e011      	b.n	8012eee <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8012eca:	6839      	ldr	r1, [r7, #0]
 8012ecc:	68f8      	ldr	r0, [r7, #12]
 8012ece:	f7ff fea3 	bl	8012c18 <pbuf_copy>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8012ed6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d006      	beq.n	8012eec <pbuf_clone+0x4c>
 8012ede:	4b06      	ldr	r3, [pc, #24]	@ (8012ef8 <pbuf_clone+0x58>)
 8012ee0:	f240 5224 	movw	r2, #1316	@ 0x524
 8012ee4:	4905      	ldr	r1, [pc, #20]	@ (8012efc <pbuf_clone+0x5c>)
 8012ee6:	4806      	ldr	r0, [pc, #24]	@ (8012f00 <pbuf_clone+0x60>)
 8012ee8:	f008 fab4 	bl	801b454 <iprintf>
  return q;
 8012eec:	68fb      	ldr	r3, [r7, #12]
}
 8012eee:	4618      	mov	r0, r3
 8012ef0:	3710      	adds	r7, #16
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	bd80      	pop	{r7, pc}
 8012ef6:	bf00      	nop
 8012ef8:	0801ce88 	.word	0x0801ce88
 8012efc:	0801d2fc 	.word	0x0801d2fc
 8012f00:	0801cee8 	.word	0x0801cee8

08012f04 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012f08:	f008 f992 	bl	801b230 <rand>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	b29b      	uxth	r3, r3
 8012f10:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012f14:	b29b      	uxth	r3, r3
 8012f16:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012f1a:	b29a      	uxth	r2, r3
 8012f1c:	4b01      	ldr	r3, [pc, #4]	@ (8012f24 <tcp_init+0x20>)
 8012f1e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012f20:	bf00      	nop
 8012f22:	bd80      	pop	{r7, pc}
 8012f24:	24000028 	.word	0x24000028

08012f28 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b082      	sub	sp, #8
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	7d1b      	ldrb	r3, [r3, #20]
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	d105      	bne.n	8012f44 <tcp_free+0x1c>
 8012f38:	4b06      	ldr	r3, [pc, #24]	@ (8012f54 <tcp_free+0x2c>)
 8012f3a:	22d4      	movs	r2, #212	@ 0xd4
 8012f3c:	4906      	ldr	r1, [pc, #24]	@ (8012f58 <tcp_free+0x30>)
 8012f3e:	4807      	ldr	r0, [pc, #28]	@ (8012f5c <tcp_free+0x34>)
 8012f40:	f008 fa88 	bl	801b454 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8012f44:	6879      	ldr	r1, [r7, #4]
 8012f46:	2001      	movs	r0, #1
 8012f48:	f7fe fe9e 	bl	8011c88 <memp_free>
}
 8012f4c:	bf00      	nop
 8012f4e:	3708      	adds	r7, #8
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}
 8012f54:	0801d388 	.word	0x0801d388
 8012f58:	0801d3b8 	.word	0x0801d3b8
 8012f5c:	0801d3cc 	.word	0x0801d3cc

08012f60 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b082      	sub	sp, #8
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	7d1b      	ldrb	r3, [r3, #20]
 8012f6c:	2b01      	cmp	r3, #1
 8012f6e:	d105      	bne.n	8012f7c <tcp_free_listen+0x1c>
 8012f70:	4b06      	ldr	r3, [pc, #24]	@ (8012f8c <tcp_free_listen+0x2c>)
 8012f72:	22df      	movs	r2, #223	@ 0xdf
 8012f74:	4906      	ldr	r1, [pc, #24]	@ (8012f90 <tcp_free_listen+0x30>)
 8012f76:	4807      	ldr	r0, [pc, #28]	@ (8012f94 <tcp_free_listen+0x34>)
 8012f78:	f008 fa6c 	bl	801b454 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8012f7c:	6879      	ldr	r1, [r7, #4]
 8012f7e:	2002      	movs	r0, #2
 8012f80:	f7fe fe82 	bl	8011c88 <memp_free>
}
 8012f84:	bf00      	nop
 8012f86:	3708      	adds	r7, #8
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}
 8012f8c:	0801d388 	.word	0x0801d388
 8012f90:	0801d3f4 	.word	0x0801d3f4
 8012f94:	0801d3cc 	.word	0x0801d3cc

08012f98 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012f9c:	f000 fea4 	bl	8013ce8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012fa0:	4b07      	ldr	r3, [pc, #28]	@ (8012fc0 <tcp_tmr+0x28>)
 8012fa2:	781b      	ldrb	r3, [r3, #0]
 8012fa4:	3301      	adds	r3, #1
 8012fa6:	b2da      	uxtb	r2, r3
 8012fa8:	4b05      	ldr	r3, [pc, #20]	@ (8012fc0 <tcp_tmr+0x28>)
 8012faa:	701a      	strb	r2, [r3, #0]
 8012fac:	4b04      	ldr	r3, [pc, #16]	@ (8012fc0 <tcp_tmr+0x28>)
 8012fae:	781b      	ldrb	r3, [r3, #0]
 8012fb0:	f003 0301 	and.w	r3, r3, #1
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d001      	beq.n	8012fbc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012fb8:	f000 fb54 	bl	8013664 <tcp_slowtmr>
  }
}
 8012fbc:	bf00      	nop
 8012fbe:	bd80      	pop	{r7, pc}
 8012fc0:	240081a1 	.word	0x240081a1

08012fc4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b084      	sub	sp, #16
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
 8012fcc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d105      	bne.n	8012fe0 <tcp_remove_listener+0x1c>
 8012fd4:	4b0d      	ldr	r3, [pc, #52]	@ (801300c <tcp_remove_listener+0x48>)
 8012fd6:	22ff      	movs	r2, #255	@ 0xff
 8012fd8:	490d      	ldr	r1, [pc, #52]	@ (8013010 <tcp_remove_listener+0x4c>)
 8012fda:	480e      	ldr	r0, [pc, #56]	@ (8013014 <tcp_remove_listener+0x50>)
 8012fdc:	f008 fa3a 	bl	801b454 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	60fb      	str	r3, [r7, #12]
 8012fe4:	e00a      	b.n	8012ffc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012fea:	683a      	ldr	r2, [r7, #0]
 8012fec:	429a      	cmp	r2, r3
 8012fee:	d102      	bne.n	8012ff6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	68db      	ldr	r3, [r3, #12]
 8012ffa:	60fb      	str	r3, [r7, #12]
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d1f1      	bne.n	8012fe6 <tcp_remove_listener+0x22>
    }
  }
}
 8013002:	bf00      	nop
 8013004:	bf00      	nop
 8013006:	3710      	adds	r7, #16
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}
 801300c:	0801d388 	.word	0x0801d388
 8013010:	0801d410 	.word	0x0801d410
 8013014:	0801d3cc 	.word	0x0801d3cc

08013018 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b084      	sub	sp, #16
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d106      	bne.n	8013034 <tcp_listen_closed+0x1c>
 8013026:	4b14      	ldr	r3, [pc, #80]	@ (8013078 <tcp_listen_closed+0x60>)
 8013028:	f240 1211 	movw	r2, #273	@ 0x111
 801302c:	4913      	ldr	r1, [pc, #76]	@ (801307c <tcp_listen_closed+0x64>)
 801302e:	4814      	ldr	r0, [pc, #80]	@ (8013080 <tcp_listen_closed+0x68>)
 8013030:	f008 fa10 	bl	801b454 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	7d1b      	ldrb	r3, [r3, #20]
 8013038:	2b01      	cmp	r3, #1
 801303a:	d006      	beq.n	801304a <tcp_listen_closed+0x32>
 801303c:	4b0e      	ldr	r3, [pc, #56]	@ (8013078 <tcp_listen_closed+0x60>)
 801303e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8013042:	4910      	ldr	r1, [pc, #64]	@ (8013084 <tcp_listen_closed+0x6c>)
 8013044:	480e      	ldr	r0, [pc, #56]	@ (8013080 <tcp_listen_closed+0x68>)
 8013046:	f008 fa05 	bl	801b454 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801304a:	2301      	movs	r3, #1
 801304c:	60fb      	str	r3, [r7, #12]
 801304e:	e00b      	b.n	8013068 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8013050:	4a0d      	ldr	r2, [pc, #52]	@ (8013088 <tcp_listen_closed+0x70>)
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	6879      	ldr	r1, [r7, #4]
 801305c:	4618      	mov	r0, r3
 801305e:	f7ff ffb1 	bl	8012fc4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	3301      	adds	r3, #1
 8013066:	60fb      	str	r3, [r7, #12]
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	2b03      	cmp	r3, #3
 801306c:	d9f0      	bls.n	8013050 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801306e:	bf00      	nop
 8013070:	bf00      	nop
 8013072:	3710      	adds	r7, #16
 8013074:	46bd      	mov	sp, r7
 8013076:	bd80      	pop	{r7, pc}
 8013078:	0801d388 	.word	0x0801d388
 801307c:	0801d438 	.word	0x0801d438
 8013080:	0801d3cc 	.word	0x0801d3cc
 8013084:	0801d444 	.word	0x0801d444
 8013088:	0801f3ec 	.word	0x0801f3ec

0801308c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801308c:	b5b0      	push	{r4, r5, r7, lr}
 801308e:	b088      	sub	sp, #32
 8013090:	af04      	add	r7, sp, #16
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	460b      	mov	r3, r1
 8013096:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d106      	bne.n	80130ac <tcp_close_shutdown+0x20>
 801309e:	4b63      	ldr	r3, [pc, #396]	@ (801322c <tcp_close_shutdown+0x1a0>)
 80130a0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80130a4:	4962      	ldr	r1, [pc, #392]	@ (8013230 <tcp_close_shutdown+0x1a4>)
 80130a6:	4863      	ldr	r0, [pc, #396]	@ (8013234 <tcp_close_shutdown+0x1a8>)
 80130a8:	f008 f9d4 	bl	801b454 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80130ac:	78fb      	ldrb	r3, [r7, #3]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d066      	beq.n	8013180 <tcp_close_shutdown+0xf4>
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	7d1b      	ldrb	r3, [r3, #20]
 80130b6:	2b04      	cmp	r3, #4
 80130b8:	d003      	beq.n	80130c2 <tcp_close_shutdown+0x36>
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	7d1b      	ldrb	r3, [r3, #20]
 80130be:	2b07      	cmp	r3, #7
 80130c0:	d15e      	bne.n	8013180 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d104      	bne.n	80130d4 <tcp_close_shutdown+0x48>
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130ce:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80130d2:	d055      	beq.n	8013180 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	8b5b      	ldrh	r3, [r3, #26]
 80130d8:	f003 0310 	and.w	r3, r3, #16
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d106      	bne.n	80130ee <tcp_close_shutdown+0x62>
 80130e0:	4b52      	ldr	r3, [pc, #328]	@ (801322c <tcp_close_shutdown+0x1a0>)
 80130e2:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80130e6:	4954      	ldr	r1, [pc, #336]	@ (8013238 <tcp_close_shutdown+0x1ac>)
 80130e8:	4852      	ldr	r0, [pc, #328]	@ (8013234 <tcp_close_shutdown+0x1a8>)
 80130ea:	f008 f9b3 	bl	801b454 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80130f6:	687d      	ldr	r5, [r7, #4]
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	3304      	adds	r3, #4
 80130fc:	687a      	ldr	r2, [r7, #4]
 80130fe:	8ad2      	ldrh	r2, [r2, #22]
 8013100:	6879      	ldr	r1, [r7, #4]
 8013102:	8b09      	ldrh	r1, [r1, #24]
 8013104:	9102      	str	r1, [sp, #8]
 8013106:	9201      	str	r2, [sp, #4]
 8013108:	9300      	str	r3, [sp, #0]
 801310a:	462b      	mov	r3, r5
 801310c:	4622      	mov	r2, r4
 801310e:	4601      	mov	r1, r0
 8013110:	6878      	ldr	r0, [r7, #4]
 8013112:	f004 fe8d 	bl	8017e30 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8013116:	6878      	ldr	r0, [r7, #4]
 8013118:	f001 f8c8 	bl	80142ac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801311c:	4b47      	ldr	r3, [pc, #284]	@ (801323c <tcp_close_shutdown+0x1b0>)
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	687a      	ldr	r2, [r7, #4]
 8013122:	429a      	cmp	r2, r3
 8013124:	d105      	bne.n	8013132 <tcp_close_shutdown+0xa6>
 8013126:	4b45      	ldr	r3, [pc, #276]	@ (801323c <tcp_close_shutdown+0x1b0>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	68db      	ldr	r3, [r3, #12]
 801312c:	4a43      	ldr	r2, [pc, #268]	@ (801323c <tcp_close_shutdown+0x1b0>)
 801312e:	6013      	str	r3, [r2, #0]
 8013130:	e013      	b.n	801315a <tcp_close_shutdown+0xce>
 8013132:	4b42      	ldr	r3, [pc, #264]	@ (801323c <tcp_close_shutdown+0x1b0>)
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	60fb      	str	r3, [r7, #12]
 8013138:	e00c      	b.n	8013154 <tcp_close_shutdown+0xc8>
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	68db      	ldr	r3, [r3, #12]
 801313e:	687a      	ldr	r2, [r7, #4]
 8013140:	429a      	cmp	r2, r3
 8013142:	d104      	bne.n	801314e <tcp_close_shutdown+0xc2>
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	68da      	ldr	r2, [r3, #12]
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	60da      	str	r2, [r3, #12]
 801314c:	e005      	b.n	801315a <tcp_close_shutdown+0xce>
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	68db      	ldr	r3, [r3, #12]
 8013152:	60fb      	str	r3, [r7, #12]
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d1ef      	bne.n	801313a <tcp_close_shutdown+0xae>
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	2200      	movs	r2, #0
 801315e:	60da      	str	r2, [r3, #12]
 8013160:	4b37      	ldr	r3, [pc, #220]	@ (8013240 <tcp_close_shutdown+0x1b4>)
 8013162:	2201      	movs	r2, #1
 8013164:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8013166:	4b37      	ldr	r3, [pc, #220]	@ (8013244 <tcp_close_shutdown+0x1b8>)
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	687a      	ldr	r2, [r7, #4]
 801316c:	429a      	cmp	r2, r3
 801316e:	d102      	bne.n	8013176 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8013170:	f003 fd5c 	bl	8016c2c <tcp_trigger_input_pcb_close>
 8013174:	e002      	b.n	801317c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8013176:	6878      	ldr	r0, [r7, #4]
 8013178:	f7ff fed6 	bl	8012f28 <tcp_free>
      }
      return ERR_OK;
 801317c:	2300      	movs	r3, #0
 801317e:	e050      	b.n	8013222 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	7d1b      	ldrb	r3, [r3, #20]
 8013184:	2b02      	cmp	r3, #2
 8013186:	d03b      	beq.n	8013200 <tcp_close_shutdown+0x174>
 8013188:	2b02      	cmp	r3, #2
 801318a:	dc44      	bgt.n	8013216 <tcp_close_shutdown+0x18a>
 801318c:	2b00      	cmp	r3, #0
 801318e:	d002      	beq.n	8013196 <tcp_close_shutdown+0x10a>
 8013190:	2b01      	cmp	r3, #1
 8013192:	d02a      	beq.n	80131ea <tcp_close_shutdown+0x15e>
 8013194:	e03f      	b.n	8013216 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	8adb      	ldrh	r3, [r3, #22]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d021      	beq.n	80131e2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801319e:	4b2a      	ldr	r3, [pc, #168]	@ (8013248 <tcp_close_shutdown+0x1bc>)
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	687a      	ldr	r2, [r7, #4]
 80131a4:	429a      	cmp	r2, r3
 80131a6:	d105      	bne.n	80131b4 <tcp_close_shutdown+0x128>
 80131a8:	4b27      	ldr	r3, [pc, #156]	@ (8013248 <tcp_close_shutdown+0x1bc>)
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	68db      	ldr	r3, [r3, #12]
 80131ae:	4a26      	ldr	r2, [pc, #152]	@ (8013248 <tcp_close_shutdown+0x1bc>)
 80131b0:	6013      	str	r3, [r2, #0]
 80131b2:	e013      	b.n	80131dc <tcp_close_shutdown+0x150>
 80131b4:	4b24      	ldr	r3, [pc, #144]	@ (8013248 <tcp_close_shutdown+0x1bc>)
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	60bb      	str	r3, [r7, #8]
 80131ba:	e00c      	b.n	80131d6 <tcp_close_shutdown+0x14a>
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	68db      	ldr	r3, [r3, #12]
 80131c0:	687a      	ldr	r2, [r7, #4]
 80131c2:	429a      	cmp	r2, r3
 80131c4:	d104      	bne.n	80131d0 <tcp_close_shutdown+0x144>
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	68da      	ldr	r2, [r3, #12]
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	60da      	str	r2, [r3, #12]
 80131ce:	e005      	b.n	80131dc <tcp_close_shutdown+0x150>
 80131d0:	68bb      	ldr	r3, [r7, #8]
 80131d2:	68db      	ldr	r3, [r3, #12]
 80131d4:	60bb      	str	r3, [r7, #8]
 80131d6:	68bb      	ldr	r3, [r7, #8]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d1ef      	bne.n	80131bc <tcp_close_shutdown+0x130>
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2200      	movs	r2, #0
 80131e0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80131e2:	6878      	ldr	r0, [r7, #4]
 80131e4:	f7ff fea0 	bl	8012f28 <tcp_free>
      break;
 80131e8:	e01a      	b.n	8013220 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f7ff ff14 	bl	8013018 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80131f0:	6879      	ldr	r1, [r7, #4]
 80131f2:	4816      	ldr	r0, [pc, #88]	@ (801324c <tcp_close_shutdown+0x1c0>)
 80131f4:	f001 f8aa 	bl	801434c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	f7ff feb1 	bl	8012f60 <tcp_free_listen>
      break;
 80131fe:	e00f      	b.n	8013220 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013200:	6879      	ldr	r1, [r7, #4]
 8013202:	480e      	ldr	r0, [pc, #56]	@ (801323c <tcp_close_shutdown+0x1b0>)
 8013204:	f001 f8a2 	bl	801434c <tcp_pcb_remove>
 8013208:	4b0d      	ldr	r3, [pc, #52]	@ (8013240 <tcp_close_shutdown+0x1b4>)
 801320a:	2201      	movs	r2, #1
 801320c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f7ff fe8a 	bl	8012f28 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8013214:	e004      	b.n	8013220 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8013216:	6878      	ldr	r0, [r7, #4]
 8013218:	f000 f81a 	bl	8013250 <tcp_close_shutdown_fin>
 801321c:	4603      	mov	r3, r0
 801321e:	e000      	b.n	8013222 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8013220:	2300      	movs	r3, #0
}
 8013222:	4618      	mov	r0, r3
 8013224:	3710      	adds	r7, #16
 8013226:	46bd      	mov	sp, r7
 8013228:	bdb0      	pop	{r4, r5, r7, pc}
 801322a:	bf00      	nop
 801322c:	0801d388 	.word	0x0801d388
 8013230:	0801d45c 	.word	0x0801d45c
 8013234:	0801d3cc 	.word	0x0801d3cc
 8013238:	0801d47c 	.word	0x0801d47c
 801323c:	24008198 	.word	0x24008198
 8013240:	240081a0 	.word	0x240081a0
 8013244:	240081d8 	.word	0x240081d8
 8013248:	24008190 	.word	0x24008190
 801324c:	24008194 	.word	0x24008194

08013250 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b084      	sub	sp, #16
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d106      	bne.n	801326c <tcp_close_shutdown_fin+0x1c>
 801325e:	4b2e      	ldr	r3, [pc, #184]	@ (8013318 <tcp_close_shutdown_fin+0xc8>)
 8013260:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8013264:	492d      	ldr	r1, [pc, #180]	@ (801331c <tcp_close_shutdown_fin+0xcc>)
 8013266:	482e      	ldr	r0, [pc, #184]	@ (8013320 <tcp_close_shutdown_fin+0xd0>)
 8013268:	f008 f8f4 	bl	801b454 <iprintf>

  switch (pcb->state) {
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	7d1b      	ldrb	r3, [r3, #20]
 8013270:	2b07      	cmp	r3, #7
 8013272:	d020      	beq.n	80132b6 <tcp_close_shutdown_fin+0x66>
 8013274:	2b07      	cmp	r3, #7
 8013276:	dc2b      	bgt.n	80132d0 <tcp_close_shutdown_fin+0x80>
 8013278:	2b03      	cmp	r3, #3
 801327a:	d002      	beq.n	8013282 <tcp_close_shutdown_fin+0x32>
 801327c:	2b04      	cmp	r3, #4
 801327e:	d00d      	beq.n	801329c <tcp_close_shutdown_fin+0x4c>
 8013280:	e026      	b.n	80132d0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f003 fee2 	bl	801704c <tcp_send_fin>
 8013288:	4603      	mov	r3, r0
 801328a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801328c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d11f      	bne.n	80132d4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	2205      	movs	r2, #5
 8013298:	751a      	strb	r2, [r3, #20]
      }
      break;
 801329a:	e01b      	b.n	80132d4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801329c:	6878      	ldr	r0, [r7, #4]
 801329e:	f003 fed5 	bl	801704c <tcp_send_fin>
 80132a2:	4603      	mov	r3, r0
 80132a4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80132a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d114      	bne.n	80132d8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	2205      	movs	r2, #5
 80132b2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80132b4:	e010      	b.n	80132d8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	f003 fec8 	bl	801704c <tcp_send_fin>
 80132bc:	4603      	mov	r3, r0
 80132be:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80132c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d109      	bne.n	80132dc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2209      	movs	r2, #9
 80132cc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80132ce:	e005      	b.n	80132dc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80132d0:	2300      	movs	r3, #0
 80132d2:	e01c      	b.n	801330e <tcp_close_shutdown_fin+0xbe>
      break;
 80132d4:	bf00      	nop
 80132d6:	e002      	b.n	80132de <tcp_close_shutdown_fin+0x8e>
      break;
 80132d8:	bf00      	nop
 80132da:	e000      	b.n	80132de <tcp_close_shutdown_fin+0x8e>
      break;
 80132dc:	bf00      	nop
  }

  if (err == ERR_OK) {
 80132de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d103      	bne.n	80132ee <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f003 ffee 	bl	80172c8 <tcp_output>
 80132ec:	e00d      	b.n	801330a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80132ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80132f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132f6:	d108      	bne.n	801330a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	8b5b      	ldrh	r3, [r3, #26]
 80132fc:	f043 0308 	orr.w	r3, r3, #8
 8013300:	b29a      	uxth	r2, r3
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8013306:	2300      	movs	r3, #0
 8013308:	e001      	b.n	801330e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801330a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801330e:	4618      	mov	r0, r3
 8013310:	3710      	adds	r7, #16
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
 8013316:	bf00      	nop
 8013318:	0801d388 	.word	0x0801d388
 801331c:	0801d438 	.word	0x0801d438
 8013320:	0801d3cc 	.word	0x0801d3cc

08013324 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b082      	sub	sp, #8
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d109      	bne.n	8013346 <tcp_close+0x22>
 8013332:	4b0f      	ldr	r3, [pc, #60]	@ (8013370 <tcp_close+0x4c>)
 8013334:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8013338:	490e      	ldr	r1, [pc, #56]	@ (8013374 <tcp_close+0x50>)
 801333a:	480f      	ldr	r0, [pc, #60]	@ (8013378 <tcp_close+0x54>)
 801333c:	f008 f88a 	bl	801b454 <iprintf>
 8013340:	f06f 030f 	mvn.w	r3, #15
 8013344:	e00f      	b.n	8013366 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	7d1b      	ldrb	r3, [r3, #20]
 801334a:	2b01      	cmp	r3, #1
 801334c:	d006      	beq.n	801335c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	8b5b      	ldrh	r3, [r3, #26]
 8013352:	f043 0310 	orr.w	r3, r3, #16
 8013356:	b29a      	uxth	r2, r3
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801335c:	2101      	movs	r1, #1
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f7ff fe94 	bl	801308c <tcp_close_shutdown>
 8013364:	4603      	mov	r3, r0
}
 8013366:	4618      	mov	r0, r3
 8013368:	3708      	adds	r7, #8
 801336a:	46bd      	mov	sp, r7
 801336c:	bd80      	pop	{r7, pc}
 801336e:	bf00      	nop
 8013370:	0801d388 	.word	0x0801d388
 8013374:	0801d498 	.word	0x0801d498
 8013378:	0801d3cc 	.word	0x0801d3cc

0801337c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b08e      	sub	sp, #56	@ 0x38
 8013380:	af04      	add	r7, sp, #16
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d107      	bne.n	801339c <tcp_abandon+0x20>
 801338c:	4b52      	ldr	r3, [pc, #328]	@ (80134d8 <tcp_abandon+0x15c>)
 801338e:	f240 223d 	movw	r2, #573	@ 0x23d
 8013392:	4952      	ldr	r1, [pc, #328]	@ (80134dc <tcp_abandon+0x160>)
 8013394:	4852      	ldr	r0, [pc, #328]	@ (80134e0 <tcp_abandon+0x164>)
 8013396:	f008 f85d 	bl	801b454 <iprintf>
 801339a:	e099      	b.n	80134d0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	7d1b      	ldrb	r3, [r3, #20]
 80133a0:	2b01      	cmp	r3, #1
 80133a2:	d106      	bne.n	80133b2 <tcp_abandon+0x36>
 80133a4:	4b4c      	ldr	r3, [pc, #304]	@ (80134d8 <tcp_abandon+0x15c>)
 80133a6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80133aa:	494e      	ldr	r1, [pc, #312]	@ (80134e4 <tcp_abandon+0x168>)
 80133ac:	484c      	ldr	r0, [pc, #304]	@ (80134e0 <tcp_abandon+0x164>)
 80133ae:	f008 f851 	bl	801b454 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	7d1b      	ldrb	r3, [r3, #20]
 80133b6:	2b0a      	cmp	r3, #10
 80133b8:	d107      	bne.n	80133ca <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80133ba:	6879      	ldr	r1, [r7, #4]
 80133bc:	484a      	ldr	r0, [pc, #296]	@ (80134e8 <tcp_abandon+0x16c>)
 80133be:	f000 ffc5 	bl	801434c <tcp_pcb_remove>
    tcp_free(pcb);
 80133c2:	6878      	ldr	r0, [r7, #4]
 80133c4:	f7ff fdb0 	bl	8012f28 <tcp_free>
 80133c8:	e082      	b.n	80134d0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80133ca:	2300      	movs	r3, #0
 80133cc:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80133ce:	2300      	movs	r3, #0
 80133d0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80133d6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133dc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80133e4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	691b      	ldr	r3, [r3, #16]
 80133ea:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	7d1b      	ldrb	r3, [r3, #20]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d126      	bne.n	8013442 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	8adb      	ldrh	r3, [r3, #22]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d02e      	beq.n	801345a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80133fc:	4b3b      	ldr	r3, [pc, #236]	@ (80134ec <tcp_abandon+0x170>)
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	687a      	ldr	r2, [r7, #4]
 8013402:	429a      	cmp	r2, r3
 8013404:	d105      	bne.n	8013412 <tcp_abandon+0x96>
 8013406:	4b39      	ldr	r3, [pc, #228]	@ (80134ec <tcp_abandon+0x170>)
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	68db      	ldr	r3, [r3, #12]
 801340c:	4a37      	ldr	r2, [pc, #220]	@ (80134ec <tcp_abandon+0x170>)
 801340e:	6013      	str	r3, [r2, #0]
 8013410:	e013      	b.n	801343a <tcp_abandon+0xbe>
 8013412:	4b36      	ldr	r3, [pc, #216]	@ (80134ec <tcp_abandon+0x170>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	61fb      	str	r3, [r7, #28]
 8013418:	e00c      	b.n	8013434 <tcp_abandon+0xb8>
 801341a:	69fb      	ldr	r3, [r7, #28]
 801341c:	68db      	ldr	r3, [r3, #12]
 801341e:	687a      	ldr	r2, [r7, #4]
 8013420:	429a      	cmp	r2, r3
 8013422:	d104      	bne.n	801342e <tcp_abandon+0xb2>
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	68da      	ldr	r2, [r3, #12]
 8013428:	69fb      	ldr	r3, [r7, #28]
 801342a:	60da      	str	r2, [r3, #12]
 801342c:	e005      	b.n	801343a <tcp_abandon+0xbe>
 801342e:	69fb      	ldr	r3, [r7, #28]
 8013430:	68db      	ldr	r3, [r3, #12]
 8013432:	61fb      	str	r3, [r7, #28]
 8013434:	69fb      	ldr	r3, [r7, #28]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d1ef      	bne.n	801341a <tcp_abandon+0x9e>
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	2200      	movs	r2, #0
 801343e:	60da      	str	r2, [r3, #12]
 8013440:	e00b      	b.n	801345a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	8adb      	ldrh	r3, [r3, #22]
 801344a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801344c:	6879      	ldr	r1, [r7, #4]
 801344e:	4828      	ldr	r0, [pc, #160]	@ (80134f0 <tcp_abandon+0x174>)
 8013450:	f000 ff7c 	bl	801434c <tcp_pcb_remove>
 8013454:	4b27      	ldr	r3, [pc, #156]	@ (80134f4 <tcp_abandon+0x178>)
 8013456:	2201      	movs	r2, #1
 8013458:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801345e:	2b00      	cmp	r3, #0
 8013460:	d004      	beq.n	801346c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013466:	4618      	mov	r0, r3
 8013468:	f000 fd1e 	bl	8013ea8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013470:	2b00      	cmp	r3, #0
 8013472:	d004      	beq.n	801347e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013478:	4618      	mov	r0, r3
 801347a:	f000 fd15 	bl	8013ea8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013482:	2b00      	cmp	r3, #0
 8013484:	d004      	beq.n	8013490 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801348a:	4618      	mov	r0, r3
 801348c:	f000 fd0c 	bl	8013ea8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013492:	2b00      	cmp	r3, #0
 8013494:	d00e      	beq.n	80134b4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8013496:	6879      	ldr	r1, [r7, #4]
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	3304      	adds	r3, #4
 801349c:	687a      	ldr	r2, [r7, #4]
 801349e:	8b12      	ldrh	r2, [r2, #24]
 80134a0:	9202      	str	r2, [sp, #8]
 80134a2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80134a4:	9201      	str	r2, [sp, #4]
 80134a6:	9300      	str	r3, [sp, #0]
 80134a8:	460b      	mov	r3, r1
 80134aa:	697a      	ldr	r2, [r7, #20]
 80134ac:	69b9      	ldr	r1, [r7, #24]
 80134ae:	6878      	ldr	r0, [r7, #4]
 80134b0:	f004 fcbe 	bl	8017e30 <tcp_rst>
    }
    last_state = pcb->state;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	7d1b      	ldrb	r3, [r3, #20]
 80134b8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f7ff fd34 	bl	8012f28 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80134c0:	693b      	ldr	r3, [r7, #16]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d004      	beq.n	80134d0 <tcp_abandon+0x154>
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	f06f 010c 	mvn.w	r1, #12
 80134cc:	68f8      	ldr	r0, [r7, #12]
 80134ce:	4798      	blx	r3
  }
}
 80134d0:	3728      	adds	r7, #40	@ 0x28
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}
 80134d6:	bf00      	nop
 80134d8:	0801d388 	.word	0x0801d388
 80134dc:	0801d4cc 	.word	0x0801d4cc
 80134e0:	0801d3cc 	.word	0x0801d3cc
 80134e4:	0801d4e8 	.word	0x0801d4e8
 80134e8:	2400819c 	.word	0x2400819c
 80134ec:	24008190 	.word	0x24008190
 80134f0:	24008198 	.word	0x24008198
 80134f4:	240081a0 	.word	0x240081a0

080134f8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b082      	sub	sp, #8
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013500:	2101      	movs	r1, #1
 8013502:	6878      	ldr	r0, [r7, #4]
 8013504:	f7ff ff3a 	bl	801337c <tcp_abandon>
}
 8013508:	bf00      	nop
 801350a:	3708      	adds	r7, #8
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}

08013510 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b084      	sub	sp, #16
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d106      	bne.n	801352c <tcp_update_rcv_ann_wnd+0x1c>
 801351e:	4b25      	ldr	r3, [pc, #148]	@ (80135b4 <tcp_update_rcv_ann_wnd+0xa4>)
 8013520:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8013524:	4924      	ldr	r1, [pc, #144]	@ (80135b8 <tcp_update_rcv_ann_wnd+0xa8>)
 8013526:	4825      	ldr	r0, [pc, #148]	@ (80135bc <tcp_update_rcv_ann_wnd+0xac>)
 8013528:	f007 ff94 	bl	801b454 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013530:	687a      	ldr	r2, [r7, #4]
 8013532:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8013534:	4413      	add	r3, r2
 8013536:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801353c:	687a      	ldr	r2, [r7, #4]
 801353e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8013540:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8013544:	bf28      	it	cs
 8013546:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801354a:	b292      	uxth	r2, r2
 801354c:	4413      	add	r3, r2
 801354e:	68fa      	ldr	r2, [r7, #12]
 8013550:	1ad3      	subs	r3, r2, r3
 8013552:	2b00      	cmp	r3, #0
 8013554:	db08      	blt.n	8013568 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013562:	68fa      	ldr	r2, [r7, #12]
 8013564:	1ad3      	subs	r3, r2, r3
 8013566:	e020      	b.n	80135aa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013570:	1ad3      	subs	r3, r2, r3
 8013572:	2b00      	cmp	r3, #0
 8013574:	dd03      	ble.n	801357e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	2200      	movs	r2, #0
 801357a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801357c:	e014      	b.n	80135a8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013586:	1ad3      	subs	r3, r2, r3
 8013588:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013590:	d306      	bcc.n	80135a0 <tcp_update_rcv_ann_wnd+0x90>
 8013592:	4b08      	ldr	r3, [pc, #32]	@ (80135b4 <tcp_update_rcv_ann_wnd+0xa4>)
 8013594:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8013598:	4909      	ldr	r1, [pc, #36]	@ (80135c0 <tcp_update_rcv_ann_wnd+0xb0>)
 801359a:	4808      	ldr	r0, [pc, #32]	@ (80135bc <tcp_update_rcv_ann_wnd+0xac>)
 801359c:	f007 ff5a 	bl	801b454 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80135a0:	68bb      	ldr	r3, [r7, #8]
 80135a2:	b29a      	uxth	r2, r3
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80135a8:	2300      	movs	r3, #0
  }
}
 80135aa:	4618      	mov	r0, r3
 80135ac:	3710      	adds	r7, #16
 80135ae:	46bd      	mov	sp, r7
 80135b0:	bd80      	pop	{r7, pc}
 80135b2:	bf00      	nop
 80135b4:	0801d388 	.word	0x0801d388
 80135b8:	0801d5e4 	.word	0x0801d5e4
 80135bc:	0801d3cc 	.word	0x0801d3cc
 80135c0:	0801d608 	.word	0x0801d608

080135c4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b084      	sub	sp, #16
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
 80135cc:	460b      	mov	r3, r1
 80135ce:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d107      	bne.n	80135e6 <tcp_recved+0x22>
 80135d6:	4b1f      	ldr	r3, [pc, #124]	@ (8013654 <tcp_recved+0x90>)
 80135d8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80135dc:	491e      	ldr	r1, [pc, #120]	@ (8013658 <tcp_recved+0x94>)
 80135de:	481f      	ldr	r0, [pc, #124]	@ (801365c <tcp_recved+0x98>)
 80135e0:	f007 ff38 	bl	801b454 <iprintf>
 80135e4:	e032      	b.n	801364c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	7d1b      	ldrb	r3, [r3, #20]
 80135ea:	2b01      	cmp	r3, #1
 80135ec:	d106      	bne.n	80135fc <tcp_recved+0x38>
 80135ee:	4b19      	ldr	r3, [pc, #100]	@ (8013654 <tcp_recved+0x90>)
 80135f0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80135f4:	491a      	ldr	r1, [pc, #104]	@ (8013660 <tcp_recved+0x9c>)
 80135f6:	4819      	ldr	r0, [pc, #100]	@ (801365c <tcp_recved+0x98>)
 80135f8:	f007 ff2c 	bl	801b454 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013600:	887b      	ldrh	r3, [r7, #2]
 8013602:	4413      	add	r3, r2
 8013604:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013606:	89fb      	ldrh	r3, [r7, #14]
 8013608:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801360c:	d804      	bhi.n	8013618 <tcp_recved+0x54>
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013612:	89fa      	ldrh	r2, [r7, #14]
 8013614:	429a      	cmp	r2, r3
 8013616:	d204      	bcs.n	8013622 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801361e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8013620:	e002      	b.n	8013628 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	89fa      	ldrh	r2, [r7, #14]
 8013626:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f7ff ff71 	bl	8013510 <tcp_update_rcv_ann_wnd>
 801362e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8013636:	d309      	bcc.n	801364c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	8b5b      	ldrh	r3, [r3, #26]
 801363c:	f043 0302 	orr.w	r3, r3, #2
 8013640:	b29a      	uxth	r2, r3
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013646:	6878      	ldr	r0, [r7, #4]
 8013648:	f003 fe3e 	bl	80172c8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801364c:	3710      	adds	r7, #16
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}
 8013652:	bf00      	nop
 8013654:	0801d388 	.word	0x0801d388
 8013658:	0801d624 	.word	0x0801d624
 801365c:	0801d3cc 	.word	0x0801d3cc
 8013660:	0801d63c 	.word	0x0801d63c

08013664 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013664:	b5b0      	push	{r4, r5, r7, lr}
 8013666:	b090      	sub	sp, #64	@ 0x40
 8013668:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801366a:	2300      	movs	r3, #0
 801366c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8013670:	4b95      	ldr	r3, [pc, #596]	@ (80138c8 <tcp_slowtmr+0x264>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	3301      	adds	r3, #1
 8013676:	4a94      	ldr	r2, [pc, #592]	@ (80138c8 <tcp_slowtmr+0x264>)
 8013678:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801367a:	4b94      	ldr	r3, [pc, #592]	@ (80138cc <tcp_slowtmr+0x268>)
 801367c:	781b      	ldrb	r3, [r3, #0]
 801367e:	3301      	adds	r3, #1
 8013680:	b2da      	uxtb	r2, r3
 8013682:	4b92      	ldr	r3, [pc, #584]	@ (80138cc <tcp_slowtmr+0x268>)
 8013684:	701a      	strb	r2, [r3, #0]
 8013686:	e000      	b.n	801368a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8013688:	bf00      	nop
  prev = NULL;
 801368a:	2300      	movs	r3, #0
 801368c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801368e:	4b90      	ldr	r3, [pc, #576]	@ (80138d0 <tcp_slowtmr+0x26c>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013694:	e29d      	b.n	8013bd2 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013698:	7d1b      	ldrb	r3, [r3, #20]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d106      	bne.n	80136ac <tcp_slowtmr+0x48>
 801369e:	4b8d      	ldr	r3, [pc, #564]	@ (80138d4 <tcp_slowtmr+0x270>)
 80136a0:	f240 42be 	movw	r2, #1214	@ 0x4be
 80136a4:	498c      	ldr	r1, [pc, #560]	@ (80138d8 <tcp_slowtmr+0x274>)
 80136a6:	488d      	ldr	r0, [pc, #564]	@ (80138dc <tcp_slowtmr+0x278>)
 80136a8:	f007 fed4 	bl	801b454 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80136ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136ae:	7d1b      	ldrb	r3, [r3, #20]
 80136b0:	2b01      	cmp	r3, #1
 80136b2:	d106      	bne.n	80136c2 <tcp_slowtmr+0x5e>
 80136b4:	4b87      	ldr	r3, [pc, #540]	@ (80138d4 <tcp_slowtmr+0x270>)
 80136b6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80136ba:	4989      	ldr	r1, [pc, #548]	@ (80138e0 <tcp_slowtmr+0x27c>)
 80136bc:	4887      	ldr	r0, [pc, #540]	@ (80138dc <tcp_slowtmr+0x278>)
 80136be:	f007 fec9 	bl	801b454 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80136c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136c4:	7d1b      	ldrb	r3, [r3, #20]
 80136c6:	2b0a      	cmp	r3, #10
 80136c8:	d106      	bne.n	80136d8 <tcp_slowtmr+0x74>
 80136ca:	4b82      	ldr	r3, [pc, #520]	@ (80138d4 <tcp_slowtmr+0x270>)
 80136cc:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80136d0:	4984      	ldr	r1, [pc, #528]	@ (80138e4 <tcp_slowtmr+0x280>)
 80136d2:	4882      	ldr	r0, [pc, #520]	@ (80138dc <tcp_slowtmr+0x278>)
 80136d4:	f007 febe 	bl	801b454 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80136d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136da:	7f9a      	ldrb	r2, [r3, #30]
 80136dc:	4b7b      	ldr	r3, [pc, #492]	@ (80138cc <tcp_slowtmr+0x268>)
 80136de:	781b      	ldrb	r3, [r3, #0]
 80136e0:	429a      	cmp	r2, r3
 80136e2:	d105      	bne.n	80136f0 <tcp_slowtmr+0x8c>
      prev = pcb;
 80136e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80136e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136ea:	68db      	ldr	r3, [r3, #12]
 80136ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80136ee:	e270      	b.n	8013bd2 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 80136f0:	4b76      	ldr	r3, [pc, #472]	@ (80138cc <tcp_slowtmr+0x268>)
 80136f2:	781a      	ldrb	r2, [r3, #0]
 80136f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136f6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80136f8:	2300      	movs	r3, #0
 80136fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80136fe:	2300      	movs	r3, #0
 8013700:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013706:	7d1b      	ldrb	r3, [r3, #20]
 8013708:	2b02      	cmp	r3, #2
 801370a:	d10a      	bne.n	8013722 <tcp_slowtmr+0xbe>
 801370c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801370e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013712:	2b05      	cmp	r3, #5
 8013714:	d905      	bls.n	8013722 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8013716:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801371a:	3301      	adds	r3, #1
 801371c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013720:	e11e      	b.n	8013960 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8013722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013724:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013728:	2b0b      	cmp	r3, #11
 801372a:	d905      	bls.n	8013738 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 801372c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013730:	3301      	adds	r3, #1
 8013732:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013736:	e113      	b.n	8013960 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8013738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801373a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801373e:	2b00      	cmp	r3, #0
 8013740:	d075      	beq.n	801382e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8013742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013746:	2b00      	cmp	r3, #0
 8013748:	d006      	beq.n	8013758 <tcp_slowtmr+0xf4>
 801374a:	4b62      	ldr	r3, [pc, #392]	@ (80138d4 <tcp_slowtmr+0x270>)
 801374c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8013750:	4965      	ldr	r1, [pc, #404]	@ (80138e8 <tcp_slowtmr+0x284>)
 8013752:	4862      	ldr	r0, [pc, #392]	@ (80138dc <tcp_slowtmr+0x278>)
 8013754:	f007 fe7e 	bl	801b454 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801375a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801375c:	2b00      	cmp	r3, #0
 801375e:	d106      	bne.n	801376e <tcp_slowtmr+0x10a>
 8013760:	4b5c      	ldr	r3, [pc, #368]	@ (80138d4 <tcp_slowtmr+0x270>)
 8013762:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8013766:	4961      	ldr	r1, [pc, #388]	@ (80138ec <tcp_slowtmr+0x288>)
 8013768:	485c      	ldr	r0, [pc, #368]	@ (80138dc <tcp_slowtmr+0x278>)
 801376a:	f007 fe73 	bl	801b454 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801376e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013770:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013774:	2b0b      	cmp	r3, #11
 8013776:	d905      	bls.n	8013784 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8013778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801377c:	3301      	adds	r3, #1
 801377e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013782:	e0ed      	b.n	8013960 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013786:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801378a:	3b01      	subs	r3, #1
 801378c:	4a58      	ldr	r2, [pc, #352]	@ (80138f0 <tcp_slowtmr+0x28c>)
 801378e:	5cd3      	ldrb	r3, [r2, r3]
 8013790:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013794:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013798:	7c7a      	ldrb	r2, [r7, #17]
 801379a:	429a      	cmp	r2, r3
 801379c:	d907      	bls.n	80137ae <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801379e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137a0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80137a4:	3301      	adds	r3, #1
 80137a6:	b2da      	uxtb	r2, r3
 80137a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137aa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80137ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137b0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80137b4:	7c7a      	ldrb	r2, [r7, #17]
 80137b6:	429a      	cmp	r2, r3
 80137b8:	f200 80d2 	bhi.w	8013960 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80137bc:	2301      	movs	r3, #1
 80137be:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80137c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d108      	bne.n	80137dc <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80137ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80137cc:	f004 fc24 	bl	8018018 <tcp_zero_window_probe>
 80137d0:	4603      	mov	r3, r0
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d014      	beq.n	8013800 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80137d6:	2300      	movs	r3, #0
 80137d8:	623b      	str	r3, [r7, #32]
 80137da:	e011      	b.n	8013800 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80137dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80137e2:	4619      	mov	r1, r3
 80137e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80137e6:	f003 fae9 	bl	8016dbc <tcp_split_unsent_seg>
 80137ea:	4603      	mov	r3, r0
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d107      	bne.n	8013800 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80137f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80137f2:	f003 fd69 	bl	80172c8 <tcp_output>
 80137f6:	4603      	mov	r3, r0
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d101      	bne.n	8013800 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80137fc:	2300      	movs	r3, #0
 80137fe:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8013800:	6a3b      	ldr	r3, [r7, #32]
 8013802:	2b00      	cmp	r3, #0
 8013804:	f000 80ac 	beq.w	8013960 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8013808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801380a:	2200      	movs	r2, #0
 801380c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013812:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013816:	2b06      	cmp	r3, #6
 8013818:	f200 80a2 	bhi.w	8013960 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801381c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801381e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013822:	3301      	adds	r3, #1
 8013824:	b2da      	uxtb	r2, r3
 8013826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013828:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 801382c:	e098      	b.n	8013960 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801382e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013830:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013834:	2b00      	cmp	r3, #0
 8013836:	db0f      	blt.n	8013858 <tcp_slowtmr+0x1f4>
 8013838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801383a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801383e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013842:	4293      	cmp	r3, r2
 8013844:	d008      	beq.n	8013858 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8013846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013848:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801384c:	b29b      	uxth	r3, r3
 801384e:	3301      	adds	r3, #1
 8013850:	b29b      	uxth	r3, r3
 8013852:	b21a      	sxth	r2, r3
 8013854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013856:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8013858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801385a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801385e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013860:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8013864:	429a      	cmp	r2, r3
 8013866:	db7b      	blt.n	8013960 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8013868:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801386a:	f004 f821 	bl	80178b0 <tcp_rexmit_rto_prepare>
 801386e:	4603      	mov	r3, r0
 8013870:	2b00      	cmp	r3, #0
 8013872:	d007      	beq.n	8013884 <tcp_slowtmr+0x220>
 8013874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013878:	2b00      	cmp	r3, #0
 801387a:	d171      	bne.n	8013960 <tcp_slowtmr+0x2fc>
 801387c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801387e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013880:	2b00      	cmp	r3, #0
 8013882:	d06d      	beq.n	8013960 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8013884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013886:	7d1b      	ldrb	r3, [r3, #20]
 8013888:	2b02      	cmp	r3, #2
 801388a:	d03a      	beq.n	8013902 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801388c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801388e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013892:	2b0c      	cmp	r3, #12
 8013894:	bf28      	it	cs
 8013896:	230c      	movcs	r3, #12
 8013898:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801389a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801389c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80138a0:	10db      	asrs	r3, r3, #3
 80138a2:	b21b      	sxth	r3, r3
 80138a4:	461a      	mov	r2, r3
 80138a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138a8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80138ac:	4413      	add	r3, r2
 80138ae:	7efa      	ldrb	r2, [r7, #27]
 80138b0:	4910      	ldr	r1, [pc, #64]	@ (80138f4 <tcp_slowtmr+0x290>)
 80138b2:	5c8a      	ldrb	r2, [r1, r2]
 80138b4:	4093      	lsls	r3, r2
 80138b6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80138b8:	697b      	ldr	r3, [r7, #20]
 80138ba:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80138be:	4293      	cmp	r3, r2
 80138c0:	dc1a      	bgt.n	80138f8 <tcp_slowtmr+0x294>
 80138c2:	697b      	ldr	r3, [r7, #20]
 80138c4:	b21a      	sxth	r2, r3
 80138c6:	e019      	b.n	80138fc <tcp_slowtmr+0x298>
 80138c8:	2400818c 	.word	0x2400818c
 80138cc:	240081a2 	.word	0x240081a2
 80138d0:	24008198 	.word	0x24008198
 80138d4:	0801d388 	.word	0x0801d388
 80138d8:	0801d6cc 	.word	0x0801d6cc
 80138dc:	0801d3cc 	.word	0x0801d3cc
 80138e0:	0801d6f8 	.word	0x0801d6f8
 80138e4:	0801d724 	.word	0x0801d724
 80138e8:	0801d754 	.word	0x0801d754
 80138ec:	0801d788 	.word	0x0801d788
 80138f0:	0801f3e4 	.word	0x0801f3e4
 80138f4:	0801f3d4 	.word	0x0801f3d4
 80138f8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80138fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8013902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013904:	2200      	movs	r2, #0
 8013906:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801390a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801390e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013910:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013914:	4293      	cmp	r3, r2
 8013916:	bf28      	it	cs
 8013918:	4613      	movcs	r3, r2
 801391a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801391c:	8a7b      	ldrh	r3, [r7, #18]
 801391e:	085b      	lsrs	r3, r3, #1
 8013920:	b29a      	uxth	r2, r3
 8013922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013924:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8013928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801392a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801392e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013930:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013932:	005b      	lsls	r3, r3, #1
 8013934:	b29b      	uxth	r3, r3
 8013936:	429a      	cmp	r2, r3
 8013938:	d206      	bcs.n	8013948 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801393a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801393c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801393e:	005b      	lsls	r3, r3, #1
 8013940:	b29a      	uxth	r2, r3
 8013942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013944:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8013948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801394a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801394c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801394e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8013952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013954:	2200      	movs	r2, #0
 8013956:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801395a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801395c:	f004 f818 	bl	8017990 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8013960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013962:	7d1b      	ldrb	r3, [r3, #20]
 8013964:	2b06      	cmp	r3, #6
 8013966:	d111      	bne.n	801398c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8013968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801396a:	8b5b      	ldrh	r3, [r3, #26]
 801396c:	f003 0310 	and.w	r3, r3, #16
 8013970:	2b00      	cmp	r3, #0
 8013972:	d00b      	beq.n	801398c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013974:	4b9c      	ldr	r3, [pc, #624]	@ (8013be8 <tcp_slowtmr+0x584>)
 8013976:	681a      	ldr	r2, [r3, #0]
 8013978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801397a:	6a1b      	ldr	r3, [r3, #32]
 801397c:	1ad3      	subs	r3, r2, r3
 801397e:	2b28      	cmp	r3, #40	@ 0x28
 8013980:	d904      	bls.n	801398c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8013982:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013986:	3301      	adds	r3, #1
 8013988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801398c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801398e:	7a5b      	ldrb	r3, [r3, #9]
 8013990:	f003 0308 	and.w	r3, r3, #8
 8013994:	2b00      	cmp	r3, #0
 8013996:	d04a      	beq.n	8013a2e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8013998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801399a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801399c:	2b04      	cmp	r3, #4
 801399e:	d003      	beq.n	80139a8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80139a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139a2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80139a4:	2b07      	cmp	r3, #7
 80139a6:	d142      	bne.n	8013a2e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80139a8:	4b8f      	ldr	r3, [pc, #572]	@ (8013be8 <tcp_slowtmr+0x584>)
 80139aa:	681a      	ldr	r2, [r3, #0]
 80139ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ae:	6a1b      	ldr	r3, [r3, #32]
 80139b0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80139b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139b4:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80139b8:	4b8c      	ldr	r3, [pc, #560]	@ (8013bec <tcp_slowtmr+0x588>)
 80139ba:	440b      	add	r3, r1
 80139bc:	498c      	ldr	r1, [pc, #560]	@ (8013bf0 <tcp_slowtmr+0x58c>)
 80139be:	fba1 1303 	umull	r1, r3, r1, r3
 80139c2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80139c4:	429a      	cmp	r2, r3
 80139c6:	d90a      	bls.n	80139de <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80139c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80139cc:	3301      	adds	r3, #1
 80139ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80139d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80139d6:	3301      	adds	r3, #1
 80139d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80139dc:	e027      	b.n	8013a2e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80139de:	4b82      	ldr	r3, [pc, #520]	@ (8013be8 <tcp_slowtmr+0x584>)
 80139e0:	681a      	ldr	r2, [r3, #0]
 80139e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139e4:	6a1b      	ldr	r3, [r3, #32]
 80139e6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80139e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ea:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80139ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139f0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80139f4:	4618      	mov	r0, r3
 80139f6:	4b7f      	ldr	r3, [pc, #508]	@ (8013bf4 <tcp_slowtmr+0x590>)
 80139f8:	fb00 f303 	mul.w	r3, r0, r3
 80139fc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80139fe:	497c      	ldr	r1, [pc, #496]	@ (8013bf0 <tcp_slowtmr+0x58c>)
 8013a00:	fba1 1303 	umull	r1, r3, r1, r3
 8013a04:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013a06:	429a      	cmp	r2, r3
 8013a08:	d911      	bls.n	8013a2e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8013a0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013a0c:	f004 fac4 	bl	8017f98 <tcp_keepalive>
 8013a10:	4603      	mov	r3, r0
 8013a12:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8013a16:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d107      	bne.n	8013a2e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8013a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a20:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8013a24:	3301      	adds	r3, #1
 8013a26:	b2da      	uxtb	r2, r3
 8013a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a2a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8013a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d011      	beq.n	8013a5a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8013a36:	4b6c      	ldr	r3, [pc, #432]	@ (8013be8 <tcp_slowtmr+0x584>)
 8013a38:	681a      	ldr	r2, [r3, #0]
 8013a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a3c:	6a1b      	ldr	r3, [r3, #32]
 8013a3e:	1ad2      	subs	r2, r2, r3
 8013a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a42:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8013a46:	4619      	mov	r1, r3
 8013a48:	460b      	mov	r3, r1
 8013a4a:	005b      	lsls	r3, r3, #1
 8013a4c:	440b      	add	r3, r1
 8013a4e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8013a50:	429a      	cmp	r2, r3
 8013a52:	d302      	bcc.n	8013a5a <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8013a54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013a56:	f000 fddd 	bl	8014614 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8013a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a5c:	7d1b      	ldrb	r3, [r3, #20]
 8013a5e:	2b03      	cmp	r3, #3
 8013a60:	d10b      	bne.n	8013a7a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013a62:	4b61      	ldr	r3, [pc, #388]	@ (8013be8 <tcp_slowtmr+0x584>)
 8013a64:	681a      	ldr	r2, [r3, #0]
 8013a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a68:	6a1b      	ldr	r3, [r3, #32]
 8013a6a:	1ad3      	subs	r3, r2, r3
 8013a6c:	2b28      	cmp	r3, #40	@ 0x28
 8013a6e:	d904      	bls.n	8013a7a <tcp_slowtmr+0x416>
        ++pcb_remove;
 8013a70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013a74:	3301      	adds	r3, #1
 8013a76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8013a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a7c:	7d1b      	ldrb	r3, [r3, #20]
 8013a7e:	2b09      	cmp	r3, #9
 8013a80:	d10b      	bne.n	8013a9a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013a82:	4b59      	ldr	r3, [pc, #356]	@ (8013be8 <tcp_slowtmr+0x584>)
 8013a84:	681a      	ldr	r2, [r3, #0]
 8013a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a88:	6a1b      	ldr	r3, [r3, #32]
 8013a8a:	1ad3      	subs	r3, r2, r3
 8013a8c:	2bf0      	cmp	r3, #240	@ 0xf0
 8013a8e:	d904      	bls.n	8013a9a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8013a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013a94:	3301      	adds	r3, #1
 8013a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8013a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d060      	beq.n	8013b64 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8013aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013aa8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8013aaa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013aac:	f000 fbfe 	bl	80142ac <tcp_pcb_purge>
      if (prev != NULL) {
 8013ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d010      	beq.n	8013ad8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8013ab6:	4b50      	ldr	r3, [pc, #320]	@ (8013bf8 <tcp_slowtmr+0x594>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013abc:	429a      	cmp	r2, r3
 8013abe:	d106      	bne.n	8013ace <tcp_slowtmr+0x46a>
 8013ac0:	4b4e      	ldr	r3, [pc, #312]	@ (8013bfc <tcp_slowtmr+0x598>)
 8013ac2:	f240 526d 	movw	r2, #1389	@ 0x56d
 8013ac6:	494e      	ldr	r1, [pc, #312]	@ (8013c00 <tcp_slowtmr+0x59c>)
 8013ac8:	484e      	ldr	r0, [pc, #312]	@ (8013c04 <tcp_slowtmr+0x5a0>)
 8013aca:	f007 fcc3 	bl	801b454 <iprintf>
        prev->next = pcb->next;
 8013ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ad0:	68da      	ldr	r2, [r3, #12]
 8013ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ad4:	60da      	str	r2, [r3, #12]
 8013ad6:	e00f      	b.n	8013af8 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013ad8:	4b47      	ldr	r3, [pc, #284]	@ (8013bf8 <tcp_slowtmr+0x594>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	d006      	beq.n	8013af0 <tcp_slowtmr+0x48c>
 8013ae2:	4b46      	ldr	r3, [pc, #280]	@ (8013bfc <tcp_slowtmr+0x598>)
 8013ae4:	f240 5271 	movw	r2, #1393	@ 0x571
 8013ae8:	4947      	ldr	r1, [pc, #284]	@ (8013c08 <tcp_slowtmr+0x5a4>)
 8013aea:	4846      	ldr	r0, [pc, #280]	@ (8013c04 <tcp_slowtmr+0x5a0>)
 8013aec:	f007 fcb2 	bl	801b454 <iprintf>
        tcp_active_pcbs = pcb->next;
 8013af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013af2:	68db      	ldr	r3, [r3, #12]
 8013af4:	4a40      	ldr	r2, [pc, #256]	@ (8013bf8 <tcp_slowtmr+0x594>)
 8013af6:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8013af8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d013      	beq.n	8013b28 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b02:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8013b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b06:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013b08:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8013b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b0c:	3304      	adds	r3, #4
 8013b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013b10:	8ad2      	ldrh	r2, [r2, #22]
 8013b12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013b14:	8b09      	ldrh	r1, [r1, #24]
 8013b16:	9102      	str	r1, [sp, #8]
 8013b18:	9201      	str	r2, [sp, #4]
 8013b1a:	9300      	str	r3, [sp, #0]
 8013b1c:	462b      	mov	r3, r5
 8013b1e:	4622      	mov	r2, r4
 8013b20:	4601      	mov	r1, r0
 8013b22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013b24:	f004 f984 	bl	8017e30 <tcp_rst>
      err_arg = pcb->callback_arg;
 8013b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b2a:	691b      	ldr	r3, [r3, #16]
 8013b2c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8013b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b30:	7d1b      	ldrb	r3, [r3, #20]
 8013b32:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8013b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b36:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b3a:	68db      	ldr	r3, [r3, #12]
 8013b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8013b3e:	6838      	ldr	r0, [r7, #0]
 8013b40:	f7ff f9f2 	bl	8012f28 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8013b44:	4b31      	ldr	r3, [pc, #196]	@ (8013c0c <tcp_slowtmr+0x5a8>)
 8013b46:	2200      	movs	r2, #0
 8013b48:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d004      	beq.n	8013b5a <tcp_slowtmr+0x4f6>
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	f06f 010c 	mvn.w	r1, #12
 8013b56:	68b8      	ldr	r0, [r7, #8]
 8013b58:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8013b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8013c0c <tcp_slowtmr+0x5a8>)
 8013b5c:	781b      	ldrb	r3, [r3, #0]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d037      	beq.n	8013bd2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8013b62:	e592      	b.n	801368a <tcp_slowtmr+0x26>
      prev = pcb;
 8013b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b66:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b6a:	68db      	ldr	r3, [r3, #12]
 8013b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8013b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b70:	7f1b      	ldrb	r3, [r3, #28]
 8013b72:	3301      	adds	r3, #1
 8013b74:	b2da      	uxtb	r2, r3
 8013b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b78:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8013b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b7c:	7f1a      	ldrb	r2, [r3, #28]
 8013b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b80:	7f5b      	ldrb	r3, [r3, #29]
 8013b82:	429a      	cmp	r2, r3
 8013b84:	d325      	bcc.n	8013bd2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8013b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b88:	2200      	movs	r2, #0
 8013b8a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8013b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8013c0c <tcp_slowtmr+0x5a8>)
 8013b8e:	2200      	movs	r2, #0
 8013b90:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8013b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d00b      	beq.n	8013bb4 <tcp_slowtmr+0x550>
 8013b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013ba2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013ba4:	6912      	ldr	r2, [r2, #16]
 8013ba6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013ba8:	4610      	mov	r0, r2
 8013baa:	4798      	blx	r3
 8013bac:	4603      	mov	r3, r0
 8013bae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8013bb2:	e002      	b.n	8013bba <tcp_slowtmr+0x556>
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8013bba:	4b14      	ldr	r3, [pc, #80]	@ (8013c0c <tcp_slowtmr+0x5a8>)
 8013bbc:	781b      	ldrb	r3, [r3, #0]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	f47f ad62 	bne.w	8013688 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013bc4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d102      	bne.n	8013bd2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8013bcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013bce:	f003 fb7b 	bl	80172c8 <tcp_output>
  while (pcb != NULL) {
 8013bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	f47f ad5e 	bne.w	8013696 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8013bda:	2300      	movs	r3, #0
 8013bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8013bde:	4b0c      	ldr	r3, [pc, #48]	@ (8013c10 <tcp_slowtmr+0x5ac>)
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013be4:	e069      	b.n	8013cba <tcp_slowtmr+0x656>
 8013be6:	bf00      	nop
 8013be8:	2400818c 	.word	0x2400818c
 8013bec:	000a4cb8 	.word	0x000a4cb8
 8013bf0:	10624dd3 	.word	0x10624dd3
 8013bf4:	000124f8 	.word	0x000124f8
 8013bf8:	24008198 	.word	0x24008198
 8013bfc:	0801d388 	.word	0x0801d388
 8013c00:	0801d7c0 	.word	0x0801d7c0
 8013c04:	0801d3cc 	.word	0x0801d3cc
 8013c08:	0801d7ec 	.word	0x0801d7ec
 8013c0c:	240081a0 	.word	0x240081a0
 8013c10:	2400819c 	.word	0x2400819c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c16:	7d1b      	ldrb	r3, [r3, #20]
 8013c18:	2b0a      	cmp	r3, #10
 8013c1a:	d006      	beq.n	8013c2a <tcp_slowtmr+0x5c6>
 8013c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8013ccc <tcp_slowtmr+0x668>)
 8013c1e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8013c22:	492b      	ldr	r1, [pc, #172]	@ (8013cd0 <tcp_slowtmr+0x66c>)
 8013c24:	482b      	ldr	r0, [pc, #172]	@ (8013cd4 <tcp_slowtmr+0x670>)
 8013c26:	f007 fc15 	bl	801b454 <iprintf>
    pcb_remove = 0;
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013c30:	4b29      	ldr	r3, [pc, #164]	@ (8013cd8 <tcp_slowtmr+0x674>)
 8013c32:	681a      	ldr	r2, [r3, #0]
 8013c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c36:	6a1b      	ldr	r3, [r3, #32]
 8013c38:	1ad3      	subs	r3, r2, r3
 8013c3a:	2bf0      	cmp	r3, #240	@ 0xf0
 8013c3c:	d904      	bls.n	8013c48 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8013c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013c42:	3301      	adds	r3, #1
 8013c44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013c48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d02f      	beq.n	8013cb0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8013c50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013c52:	f000 fb2b 	bl	80142ac <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8013c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d010      	beq.n	8013c7e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8013cdc <tcp_slowtmr+0x678>)
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013c62:	429a      	cmp	r2, r3
 8013c64:	d106      	bne.n	8013c74 <tcp_slowtmr+0x610>
 8013c66:	4b19      	ldr	r3, [pc, #100]	@ (8013ccc <tcp_slowtmr+0x668>)
 8013c68:	f240 52af 	movw	r2, #1455	@ 0x5af
 8013c6c:	491c      	ldr	r1, [pc, #112]	@ (8013ce0 <tcp_slowtmr+0x67c>)
 8013c6e:	4819      	ldr	r0, [pc, #100]	@ (8013cd4 <tcp_slowtmr+0x670>)
 8013c70:	f007 fbf0 	bl	801b454 <iprintf>
        prev->next = pcb->next;
 8013c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c76:	68da      	ldr	r2, [r3, #12]
 8013c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c7a:	60da      	str	r2, [r3, #12]
 8013c7c:	e00f      	b.n	8013c9e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8013c7e:	4b17      	ldr	r3, [pc, #92]	@ (8013cdc <tcp_slowtmr+0x678>)
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013c84:	429a      	cmp	r2, r3
 8013c86:	d006      	beq.n	8013c96 <tcp_slowtmr+0x632>
 8013c88:	4b10      	ldr	r3, [pc, #64]	@ (8013ccc <tcp_slowtmr+0x668>)
 8013c8a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8013c8e:	4915      	ldr	r1, [pc, #84]	@ (8013ce4 <tcp_slowtmr+0x680>)
 8013c90:	4810      	ldr	r0, [pc, #64]	@ (8013cd4 <tcp_slowtmr+0x670>)
 8013c92:	f007 fbdf 	bl	801b454 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8013c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c98:	68db      	ldr	r3, [r3, #12]
 8013c9a:	4a10      	ldr	r2, [pc, #64]	@ (8013cdc <tcp_slowtmr+0x678>)
 8013c9c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8013c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ca0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8013ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ca4:	68db      	ldr	r3, [r3, #12]
 8013ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8013ca8:	69f8      	ldr	r0, [r7, #28]
 8013caa:	f7ff f93d 	bl	8012f28 <tcp_free>
 8013cae:	e004      	b.n	8013cba <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8013cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cb6:	68db      	ldr	r3, [r3, #12]
 8013cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d1a9      	bne.n	8013c14 <tcp_slowtmr+0x5b0>
    }
  }
}
 8013cc0:	bf00      	nop
 8013cc2:	bf00      	nop
 8013cc4:	3730      	adds	r7, #48	@ 0x30
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8013cca:	bf00      	nop
 8013ccc:	0801d388 	.word	0x0801d388
 8013cd0:	0801d818 	.word	0x0801d818
 8013cd4:	0801d3cc 	.word	0x0801d3cc
 8013cd8:	2400818c 	.word	0x2400818c
 8013cdc:	2400819c 	.word	0x2400819c
 8013ce0:	0801d848 	.word	0x0801d848
 8013ce4:	0801d870 	.word	0x0801d870

08013ce8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b082      	sub	sp, #8
 8013cec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8013cee:	4b2d      	ldr	r3, [pc, #180]	@ (8013da4 <tcp_fasttmr+0xbc>)
 8013cf0:	781b      	ldrb	r3, [r3, #0]
 8013cf2:	3301      	adds	r3, #1
 8013cf4:	b2da      	uxtb	r2, r3
 8013cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8013da4 <tcp_fasttmr+0xbc>)
 8013cf8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013cfa:	4b2b      	ldr	r3, [pc, #172]	@ (8013da8 <tcp_fasttmr+0xc0>)
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013d00:	e048      	b.n	8013d94 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	7f9a      	ldrb	r2, [r3, #30]
 8013d06:	4b27      	ldr	r3, [pc, #156]	@ (8013da4 <tcp_fasttmr+0xbc>)
 8013d08:	781b      	ldrb	r3, [r3, #0]
 8013d0a:	429a      	cmp	r2, r3
 8013d0c:	d03f      	beq.n	8013d8e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8013d0e:	4b25      	ldr	r3, [pc, #148]	@ (8013da4 <tcp_fasttmr+0xbc>)
 8013d10:	781a      	ldrb	r2, [r3, #0]
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	8b5b      	ldrh	r3, [r3, #26]
 8013d1a:	f003 0301 	and.w	r3, r3, #1
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d010      	beq.n	8013d44 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	8b5b      	ldrh	r3, [r3, #26]
 8013d26:	f043 0302 	orr.w	r3, r3, #2
 8013d2a:	b29a      	uxth	r2, r3
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	f003 fac9 	bl	80172c8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	8b5b      	ldrh	r3, [r3, #26]
 8013d3a:	f023 0303 	bic.w	r3, r3, #3
 8013d3e:	b29a      	uxth	r2, r3
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	8b5b      	ldrh	r3, [r3, #26]
 8013d48:	f003 0308 	and.w	r3, r3, #8
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d009      	beq.n	8013d64 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	8b5b      	ldrh	r3, [r3, #26]
 8013d54:	f023 0308 	bic.w	r3, r3, #8
 8013d58:	b29a      	uxth	r2, r3
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8013d5e:	6878      	ldr	r0, [r7, #4]
 8013d60:	f7ff fa76 	bl	8013250 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	68db      	ldr	r3, [r3, #12]
 8013d68:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d00a      	beq.n	8013d88 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8013d72:	4b0e      	ldr	r3, [pc, #56]	@ (8013dac <tcp_fasttmr+0xc4>)
 8013d74:	2200      	movs	r2, #0
 8013d76:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013d78:	6878      	ldr	r0, [r7, #4]
 8013d7a:	f000 f819 	bl	8013db0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8013d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8013dac <tcp_fasttmr+0xc4>)
 8013d80:	781b      	ldrb	r3, [r3, #0]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d000      	beq.n	8013d88 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8013d86:	e7b8      	b.n	8013cfa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	607b      	str	r3, [r7, #4]
 8013d8c:	e002      	b.n	8013d94 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	68db      	ldr	r3, [r3, #12]
 8013d92:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d1b3      	bne.n	8013d02 <tcp_fasttmr+0x1a>
    }
  }
}
 8013d9a:	bf00      	nop
 8013d9c:	bf00      	nop
 8013d9e:	3708      	adds	r7, #8
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}
 8013da4:	240081a2 	.word	0x240081a2
 8013da8:	24008198 	.word	0x24008198
 8013dac:	240081a0 	.word	0x240081a0

08013db0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013db0:	b590      	push	{r4, r7, lr}
 8013db2:	b085      	sub	sp, #20
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d109      	bne.n	8013dd2 <tcp_process_refused_data+0x22>
 8013dbe:	4b37      	ldr	r3, [pc, #220]	@ (8013e9c <tcp_process_refused_data+0xec>)
 8013dc0:	f240 6209 	movw	r2, #1545	@ 0x609
 8013dc4:	4936      	ldr	r1, [pc, #216]	@ (8013ea0 <tcp_process_refused_data+0xf0>)
 8013dc6:	4837      	ldr	r0, [pc, #220]	@ (8013ea4 <tcp_process_refused_data+0xf4>)
 8013dc8:	f007 fb44 	bl	801b454 <iprintf>
 8013dcc:	f06f 030f 	mvn.w	r3, #15
 8013dd0:	e060      	b.n	8013e94 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013dd6:	7b5b      	ldrb	r3, [r3, #13]
 8013dd8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013dde:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	2200      	movs	r2, #0
 8013de4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d00b      	beq.n	8013e08 <tcp_process_refused_data+0x58>
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	6918      	ldr	r0, [r3, #16]
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	68ba      	ldr	r2, [r7, #8]
 8013dfe:	6879      	ldr	r1, [r7, #4]
 8013e00:	47a0      	blx	r4
 8013e02:	4603      	mov	r3, r0
 8013e04:	73fb      	strb	r3, [r7, #15]
 8013e06:	e007      	b.n	8013e18 <tcp_process_refused_data+0x68>
 8013e08:	2300      	movs	r3, #0
 8013e0a:	68ba      	ldr	r2, [r7, #8]
 8013e0c:	6879      	ldr	r1, [r7, #4]
 8013e0e:	2000      	movs	r0, #0
 8013e10:	f000 f8a4 	bl	8013f5c <tcp_recv_null>
 8013e14:	4603      	mov	r3, r0
 8013e16:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d12a      	bne.n	8013e76 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013e20:	7bbb      	ldrb	r3, [r7, #14]
 8013e22:	f003 0320 	and.w	r3, r3, #32
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d033      	beq.n	8013e92 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013e2e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013e32:	d005      	beq.n	8013e40 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013e38:	3301      	adds	r3, #1
 8013e3a:	b29a      	uxth	r2, r3
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d00b      	beq.n	8013e62 <tcp_process_refused_data+0xb2>
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	6918      	ldr	r0, [r3, #16]
 8013e54:	2300      	movs	r3, #0
 8013e56:	2200      	movs	r2, #0
 8013e58:	6879      	ldr	r1, [r7, #4]
 8013e5a:	47a0      	blx	r4
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	73fb      	strb	r3, [r7, #15]
 8013e60:	e001      	b.n	8013e66 <tcp_process_refused_data+0xb6>
 8013e62:	2300      	movs	r3, #0
 8013e64:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8013e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e6a:	f113 0f0d 	cmn.w	r3, #13
 8013e6e:	d110      	bne.n	8013e92 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8013e70:	f06f 030c 	mvn.w	r3, #12
 8013e74:	e00e      	b.n	8013e94 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8013e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e7a:	f113 0f0d 	cmn.w	r3, #13
 8013e7e:	d102      	bne.n	8013e86 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013e80:	f06f 030c 	mvn.w	r3, #12
 8013e84:	e006      	b.n	8013e94 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	68ba      	ldr	r2, [r7, #8]
 8013e8a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8013e8c:	f06f 0304 	mvn.w	r3, #4
 8013e90:	e000      	b.n	8013e94 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8013e92:	2300      	movs	r3, #0
}
 8013e94:	4618      	mov	r0, r3
 8013e96:	3714      	adds	r7, #20
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd90      	pop	{r4, r7, pc}
 8013e9c:	0801d388 	.word	0x0801d388
 8013ea0:	0801d898 	.word	0x0801d898
 8013ea4:	0801d3cc 	.word	0x0801d3cc

08013ea8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b084      	sub	sp, #16
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013eb0:	e007      	b.n	8013ec2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013eb8:	6878      	ldr	r0, [r7, #4]
 8013eba:	f000 f80a 	bl	8013ed2 <tcp_seg_free>
    seg = next;
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d1f4      	bne.n	8013eb2 <tcp_segs_free+0xa>
  }
}
 8013ec8:	bf00      	nop
 8013eca:	bf00      	nop
 8013ecc:	3710      	adds	r7, #16
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}

08013ed2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013ed2:	b580      	push	{r7, lr}
 8013ed4:	b082      	sub	sp, #8
 8013ed6:	af00      	add	r7, sp, #0
 8013ed8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d00c      	beq.n	8013efa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	685b      	ldr	r3, [r3, #4]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d004      	beq.n	8013ef2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	685b      	ldr	r3, [r3, #4]
 8013eec:	4618      	mov	r0, r3
 8013eee:	f7fe fd6f 	bl	80129d0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013ef2:	6879      	ldr	r1, [r7, #4]
 8013ef4:	2003      	movs	r0, #3
 8013ef6:	f7fd fec7 	bl	8011c88 <memp_free>
  }
}
 8013efa:	bf00      	nop
 8013efc:	3708      	adds	r7, #8
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd80      	pop	{r7, pc}
	...

08013f04 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b084      	sub	sp, #16
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d106      	bne.n	8013f20 <tcp_seg_copy+0x1c>
 8013f12:	4b0f      	ldr	r3, [pc, #60]	@ (8013f50 <tcp_seg_copy+0x4c>)
 8013f14:	f240 6282 	movw	r2, #1666	@ 0x682
 8013f18:	490e      	ldr	r1, [pc, #56]	@ (8013f54 <tcp_seg_copy+0x50>)
 8013f1a:	480f      	ldr	r0, [pc, #60]	@ (8013f58 <tcp_seg_copy+0x54>)
 8013f1c:	f007 fa9a 	bl	801b454 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013f20:	2003      	movs	r0, #3
 8013f22:	f7fd fe3b 	bl	8011b9c <memp_malloc>
 8013f26:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d101      	bne.n	8013f32 <tcp_seg_copy+0x2e>
    return NULL;
 8013f2e:	2300      	movs	r3, #0
 8013f30:	e00a      	b.n	8013f48 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8013f32:	2210      	movs	r2, #16
 8013f34:	6879      	ldr	r1, [r7, #4]
 8013f36:	68f8      	ldr	r0, [r7, #12]
 8013f38:	f007 fc6f 	bl	801b81a <memcpy>
  pbuf_ref(cseg->p);
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	685b      	ldr	r3, [r3, #4]
 8013f40:	4618      	mov	r0, r3
 8013f42:	f7fe fdeb 	bl	8012b1c <pbuf_ref>
  return cseg;
 8013f46:	68fb      	ldr	r3, [r7, #12]
}
 8013f48:	4618      	mov	r0, r3
 8013f4a:	3710      	adds	r7, #16
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bd80      	pop	{r7, pc}
 8013f50:	0801d388 	.word	0x0801d388
 8013f54:	0801d8dc 	.word	0x0801d8dc
 8013f58:	0801d3cc 	.word	0x0801d3cc

08013f5c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b084      	sub	sp, #16
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	60f8      	str	r0, [r7, #12]
 8013f64:	60b9      	str	r1, [r7, #8]
 8013f66:	607a      	str	r2, [r7, #4]
 8013f68:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8013f6a:	68bb      	ldr	r3, [r7, #8]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d109      	bne.n	8013f84 <tcp_recv_null+0x28>
 8013f70:	4b12      	ldr	r3, [pc, #72]	@ (8013fbc <tcp_recv_null+0x60>)
 8013f72:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013f76:	4912      	ldr	r1, [pc, #72]	@ (8013fc0 <tcp_recv_null+0x64>)
 8013f78:	4812      	ldr	r0, [pc, #72]	@ (8013fc4 <tcp_recv_null+0x68>)
 8013f7a:	f007 fa6b 	bl	801b454 <iprintf>
 8013f7e:	f06f 030f 	mvn.w	r3, #15
 8013f82:	e016      	b.n	8013fb2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d009      	beq.n	8013f9e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	891b      	ldrh	r3, [r3, #8]
 8013f8e:	4619      	mov	r1, r3
 8013f90:	68b8      	ldr	r0, [r7, #8]
 8013f92:	f7ff fb17 	bl	80135c4 <tcp_recved>
    pbuf_free(p);
 8013f96:	6878      	ldr	r0, [r7, #4]
 8013f98:	f7fe fd1a 	bl	80129d0 <pbuf_free>
 8013f9c:	e008      	b.n	8013fb0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013f9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d104      	bne.n	8013fb0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013fa6:	68b8      	ldr	r0, [r7, #8]
 8013fa8:	f7ff f9bc 	bl	8013324 <tcp_close>
 8013fac:	4603      	mov	r3, r0
 8013fae:	e000      	b.n	8013fb2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013fb0:	2300      	movs	r3, #0
}
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	3710      	adds	r7, #16
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}
 8013fba:	bf00      	nop
 8013fbc:	0801d388 	.word	0x0801d388
 8013fc0:	0801d8f8 	.word	0x0801d8f8
 8013fc4:	0801d3cc 	.word	0x0801d3cc

08013fc8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b086      	sub	sp, #24
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	4603      	mov	r3, r0
 8013fd0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	db01      	blt.n	8013fde <tcp_kill_prio+0x16>
 8013fda:	79fb      	ldrb	r3, [r7, #7]
 8013fdc:	e000      	b.n	8013fe0 <tcp_kill_prio+0x18>
 8013fde:	237f      	movs	r3, #127	@ 0x7f
 8013fe0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013fe2:	7afb      	ldrb	r3, [r7, #11]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d034      	beq.n	8014052 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013fe8:	7afb      	ldrb	r3, [r7, #11]
 8013fea:	3b01      	subs	r3, #1
 8013fec:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013fee:	2300      	movs	r3, #0
 8013ff0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ff6:	4b19      	ldr	r3, [pc, #100]	@ (801405c <tcp_kill_prio+0x94>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	617b      	str	r3, [r7, #20]
 8013ffc:	e01f      	b.n	801403e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013ffe:	697b      	ldr	r3, [r7, #20]
 8014000:	7d5b      	ldrb	r3, [r3, #21]
 8014002:	7afa      	ldrb	r2, [r7, #11]
 8014004:	429a      	cmp	r2, r3
 8014006:	d80c      	bhi.n	8014022 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014008:	697b      	ldr	r3, [r7, #20]
 801400a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801400c:	7afa      	ldrb	r2, [r7, #11]
 801400e:	429a      	cmp	r2, r3
 8014010:	d112      	bne.n	8014038 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014012:	4b13      	ldr	r3, [pc, #76]	@ (8014060 <tcp_kill_prio+0x98>)
 8014014:	681a      	ldr	r2, [r3, #0]
 8014016:	697b      	ldr	r3, [r7, #20]
 8014018:	6a1b      	ldr	r3, [r3, #32]
 801401a:	1ad3      	subs	r3, r2, r3
 801401c:	68fa      	ldr	r2, [r7, #12]
 801401e:	429a      	cmp	r2, r3
 8014020:	d80a      	bhi.n	8014038 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8014022:	4b0f      	ldr	r3, [pc, #60]	@ (8014060 <tcp_kill_prio+0x98>)
 8014024:	681a      	ldr	r2, [r3, #0]
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	6a1b      	ldr	r3, [r3, #32]
 801402a:	1ad3      	subs	r3, r2, r3
 801402c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	7d5b      	ldrb	r3, [r3, #21]
 8014036:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014038:	697b      	ldr	r3, [r7, #20]
 801403a:	68db      	ldr	r3, [r3, #12]
 801403c:	617b      	str	r3, [r7, #20]
 801403e:	697b      	ldr	r3, [r7, #20]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d1dc      	bne.n	8013ffe <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014044:	693b      	ldr	r3, [r7, #16]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d004      	beq.n	8014054 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801404a:	6938      	ldr	r0, [r7, #16]
 801404c:	f7ff fa54 	bl	80134f8 <tcp_abort>
 8014050:	e000      	b.n	8014054 <tcp_kill_prio+0x8c>
    return;
 8014052:	bf00      	nop
  }
}
 8014054:	3718      	adds	r7, #24
 8014056:	46bd      	mov	sp, r7
 8014058:	bd80      	pop	{r7, pc}
 801405a:	bf00      	nop
 801405c:	24008198 	.word	0x24008198
 8014060:	2400818c 	.word	0x2400818c

08014064 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b086      	sub	sp, #24
 8014068:	af00      	add	r7, sp, #0
 801406a:	4603      	mov	r3, r0
 801406c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801406e:	79fb      	ldrb	r3, [r7, #7]
 8014070:	2b08      	cmp	r3, #8
 8014072:	d009      	beq.n	8014088 <tcp_kill_state+0x24>
 8014074:	79fb      	ldrb	r3, [r7, #7]
 8014076:	2b09      	cmp	r3, #9
 8014078:	d006      	beq.n	8014088 <tcp_kill_state+0x24>
 801407a:	4b1a      	ldr	r3, [pc, #104]	@ (80140e4 <tcp_kill_state+0x80>)
 801407c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8014080:	4919      	ldr	r1, [pc, #100]	@ (80140e8 <tcp_kill_state+0x84>)
 8014082:	481a      	ldr	r0, [pc, #104]	@ (80140ec <tcp_kill_state+0x88>)
 8014084:	f007 f9e6 	bl	801b454 <iprintf>

  inactivity = 0;
 8014088:	2300      	movs	r3, #0
 801408a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801408c:	2300      	movs	r3, #0
 801408e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014090:	4b17      	ldr	r3, [pc, #92]	@ (80140f0 <tcp_kill_state+0x8c>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	617b      	str	r3, [r7, #20]
 8014096:	e017      	b.n	80140c8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014098:	697b      	ldr	r3, [r7, #20]
 801409a:	7d1b      	ldrb	r3, [r3, #20]
 801409c:	79fa      	ldrb	r2, [r7, #7]
 801409e:	429a      	cmp	r2, r3
 80140a0:	d10f      	bne.n	80140c2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80140a2:	4b14      	ldr	r3, [pc, #80]	@ (80140f4 <tcp_kill_state+0x90>)
 80140a4:	681a      	ldr	r2, [r3, #0]
 80140a6:	697b      	ldr	r3, [r7, #20]
 80140a8:	6a1b      	ldr	r3, [r3, #32]
 80140aa:	1ad3      	subs	r3, r2, r3
 80140ac:	68fa      	ldr	r2, [r7, #12]
 80140ae:	429a      	cmp	r2, r3
 80140b0:	d807      	bhi.n	80140c2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80140b2:	4b10      	ldr	r3, [pc, #64]	@ (80140f4 <tcp_kill_state+0x90>)
 80140b4:	681a      	ldr	r2, [r3, #0]
 80140b6:	697b      	ldr	r3, [r7, #20]
 80140b8:	6a1b      	ldr	r3, [r3, #32]
 80140ba:	1ad3      	subs	r3, r2, r3
 80140bc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80140c2:	697b      	ldr	r3, [r7, #20]
 80140c4:	68db      	ldr	r3, [r3, #12]
 80140c6:	617b      	str	r3, [r7, #20]
 80140c8:	697b      	ldr	r3, [r7, #20]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d1e4      	bne.n	8014098 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80140ce:	693b      	ldr	r3, [r7, #16]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d003      	beq.n	80140dc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80140d4:	2100      	movs	r1, #0
 80140d6:	6938      	ldr	r0, [r7, #16]
 80140d8:	f7ff f950 	bl	801337c <tcp_abandon>
  }
}
 80140dc:	bf00      	nop
 80140de:	3718      	adds	r7, #24
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}
 80140e4:	0801d388 	.word	0x0801d388
 80140e8:	0801d914 	.word	0x0801d914
 80140ec:	0801d3cc 	.word	0x0801d3cc
 80140f0:	24008198 	.word	0x24008198
 80140f4:	2400818c 	.word	0x2400818c

080140f8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b084      	sub	sp, #16
 80140fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80140fe:	2300      	movs	r3, #0
 8014100:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8014102:	2300      	movs	r3, #0
 8014104:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014106:	4b12      	ldr	r3, [pc, #72]	@ (8014150 <tcp_kill_timewait+0x58>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	60fb      	str	r3, [r7, #12]
 801410c:	e012      	b.n	8014134 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801410e:	4b11      	ldr	r3, [pc, #68]	@ (8014154 <tcp_kill_timewait+0x5c>)
 8014110:	681a      	ldr	r2, [r3, #0]
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	6a1b      	ldr	r3, [r3, #32]
 8014116:	1ad3      	subs	r3, r2, r3
 8014118:	687a      	ldr	r2, [r7, #4]
 801411a:	429a      	cmp	r2, r3
 801411c:	d807      	bhi.n	801412e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801411e:	4b0d      	ldr	r3, [pc, #52]	@ (8014154 <tcp_kill_timewait+0x5c>)
 8014120:	681a      	ldr	r2, [r3, #0]
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	6a1b      	ldr	r3, [r3, #32]
 8014126:	1ad3      	subs	r3, r2, r3
 8014128:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	68db      	ldr	r3, [r3, #12]
 8014132:	60fb      	str	r3, [r7, #12]
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d1e9      	bne.n	801410e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801413a:	68bb      	ldr	r3, [r7, #8]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d002      	beq.n	8014146 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014140:	68b8      	ldr	r0, [r7, #8]
 8014142:	f7ff f9d9 	bl	80134f8 <tcp_abort>
  }
}
 8014146:	bf00      	nop
 8014148:	3710      	adds	r7, #16
 801414a:	46bd      	mov	sp, r7
 801414c:	bd80      	pop	{r7, pc}
 801414e:	bf00      	nop
 8014150:	2400819c 	.word	0x2400819c
 8014154:	2400818c 	.word	0x2400818c

08014158 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b082      	sub	sp, #8
 801415c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801415e:	4b10      	ldr	r3, [pc, #64]	@ (80141a0 <tcp_handle_closepend+0x48>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014164:	e014      	b.n	8014190 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	68db      	ldr	r3, [r3, #12]
 801416a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	8b5b      	ldrh	r3, [r3, #26]
 8014170:	f003 0308 	and.w	r3, r3, #8
 8014174:	2b00      	cmp	r3, #0
 8014176:	d009      	beq.n	801418c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	8b5b      	ldrh	r3, [r3, #26]
 801417c:	f023 0308 	bic.w	r3, r3, #8
 8014180:	b29a      	uxth	r2, r3
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	f7ff f862 	bl	8013250 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801418c:	683b      	ldr	r3, [r7, #0]
 801418e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d1e7      	bne.n	8014166 <tcp_handle_closepend+0xe>
  }
}
 8014196:	bf00      	nop
 8014198:	bf00      	nop
 801419a:	3708      	adds	r7, #8
 801419c:	46bd      	mov	sp, r7
 801419e:	bd80      	pop	{r7, pc}
 80141a0:	24008198 	.word	0x24008198

080141a4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b084      	sub	sp, #16
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	4603      	mov	r3, r0
 80141ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80141ae:	2001      	movs	r0, #1
 80141b0:	f7fd fcf4 	bl	8011b9c <memp_malloc>
 80141b4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d126      	bne.n	801420a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80141bc:	f7ff ffcc 	bl	8014158 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80141c0:	f7ff ff9a 	bl	80140f8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80141c4:	2001      	movs	r0, #1
 80141c6:	f7fd fce9 	bl	8011b9c <memp_malloc>
 80141ca:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d11b      	bne.n	801420a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80141d2:	2009      	movs	r0, #9
 80141d4:	f7ff ff46 	bl	8014064 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80141d8:	2001      	movs	r0, #1
 80141da:	f7fd fcdf 	bl	8011b9c <memp_malloc>
 80141de:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d111      	bne.n	801420a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80141e6:	2008      	movs	r0, #8
 80141e8:	f7ff ff3c 	bl	8014064 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80141ec:	2001      	movs	r0, #1
 80141ee:	f7fd fcd5 	bl	8011b9c <memp_malloc>
 80141f2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d107      	bne.n	801420a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80141fa:	79fb      	ldrb	r3, [r7, #7]
 80141fc:	4618      	mov	r0, r3
 80141fe:	f7ff fee3 	bl	8013fc8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014202:	2001      	movs	r0, #1
 8014204:	f7fd fcca 	bl	8011b9c <memp_malloc>
 8014208:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d03f      	beq.n	8014290 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014210:	229c      	movs	r2, #156	@ 0x9c
 8014212:	2100      	movs	r1, #0
 8014214:	68f8      	ldr	r0, [r7, #12]
 8014216:	f007 fa17 	bl	801b648 <memset>
    pcb->prio = prio;
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	79fa      	ldrb	r2, [r7, #7]
 801421e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8014226:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8014230:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	22ff      	movs	r2, #255	@ 0xff
 801423e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8014246:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	2206      	movs	r2, #6
 801424c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	2206      	movs	r2, #6
 8014254:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801425c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	2201      	movs	r2, #1
 8014262:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8014266:	4b0d      	ldr	r3, [pc, #52]	@ (801429c <tcp_alloc+0xf8>)
 8014268:	681a      	ldr	r2, [r3, #0]
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801426e:	4b0c      	ldr	r3, [pc, #48]	@ (80142a0 <tcp_alloc+0xfc>)
 8014270:	781a      	ldrb	r2, [r3, #0]
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801427c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	4a08      	ldr	r2, [pc, #32]	@ (80142a4 <tcp_alloc+0x100>)
 8014284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	4a07      	ldr	r2, [pc, #28]	@ (80142a8 <tcp_alloc+0x104>)
 801428c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014290:	68fb      	ldr	r3, [r7, #12]
}
 8014292:	4618      	mov	r0, r3
 8014294:	3710      	adds	r7, #16
 8014296:	46bd      	mov	sp, r7
 8014298:	bd80      	pop	{r7, pc}
 801429a:	bf00      	nop
 801429c:	2400818c 	.word	0x2400818c
 80142a0:	240081a2 	.word	0x240081a2
 80142a4:	08013f5d 	.word	0x08013f5d
 80142a8:	006ddd00 	.word	0x006ddd00

080142ac <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b082      	sub	sp, #8
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d107      	bne.n	80142ca <tcp_pcb_purge+0x1e>
 80142ba:	4b21      	ldr	r3, [pc, #132]	@ (8014340 <tcp_pcb_purge+0x94>)
 80142bc:	f640 0251 	movw	r2, #2129	@ 0x851
 80142c0:	4920      	ldr	r1, [pc, #128]	@ (8014344 <tcp_pcb_purge+0x98>)
 80142c2:	4821      	ldr	r0, [pc, #132]	@ (8014348 <tcp_pcb_purge+0x9c>)
 80142c4:	f007 f8c6 	bl	801b454 <iprintf>
 80142c8:	e037      	b.n	801433a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	7d1b      	ldrb	r3, [r3, #20]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d033      	beq.n	801433a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80142d6:	2b0a      	cmp	r3, #10
 80142d8:	d02f      	beq.n	801433a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80142de:	2b01      	cmp	r3, #1
 80142e0:	d02b      	beq.n	801433a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d007      	beq.n	80142fa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80142ee:	4618      	mov	r0, r3
 80142f0:	f7fe fb6e 	bl	80129d0 <pbuf_free>
      pcb->refused_data = NULL;
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	2200      	movs	r2, #0
 80142f8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d002      	beq.n	8014308 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f000 f986 	bl	8014614 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801430e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014314:	4618      	mov	r0, r3
 8014316:	f7ff fdc7 	bl	8013ea8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801431e:	4618      	mov	r0, r3
 8014320:	f7ff fdc2 	bl	8013ea8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	2200      	movs	r2, #0
 8014328:	66da      	str	r2, [r3, #108]	@ 0x6c
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	2200      	movs	r2, #0
 8014336:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801433a:	3708      	adds	r7, #8
 801433c:	46bd      	mov	sp, r7
 801433e:	bd80      	pop	{r7, pc}
 8014340:	0801d388 	.word	0x0801d388
 8014344:	0801d9d4 	.word	0x0801d9d4
 8014348:	0801d3cc 	.word	0x0801d3cc

0801434c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801434c:	b580      	push	{r7, lr}
 801434e:	b084      	sub	sp, #16
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
 8014354:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d106      	bne.n	801436a <tcp_pcb_remove+0x1e>
 801435c:	4b3e      	ldr	r3, [pc, #248]	@ (8014458 <tcp_pcb_remove+0x10c>)
 801435e:	f640 0283 	movw	r2, #2179	@ 0x883
 8014362:	493e      	ldr	r1, [pc, #248]	@ (801445c <tcp_pcb_remove+0x110>)
 8014364:	483e      	ldr	r0, [pc, #248]	@ (8014460 <tcp_pcb_remove+0x114>)
 8014366:	f007 f875 	bl	801b454 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d106      	bne.n	801437e <tcp_pcb_remove+0x32>
 8014370:	4b39      	ldr	r3, [pc, #228]	@ (8014458 <tcp_pcb_remove+0x10c>)
 8014372:	f640 0284 	movw	r2, #2180	@ 0x884
 8014376:	493b      	ldr	r1, [pc, #236]	@ (8014464 <tcp_pcb_remove+0x118>)
 8014378:	4839      	ldr	r0, [pc, #228]	@ (8014460 <tcp_pcb_remove+0x114>)
 801437a:	f007 f86b 	bl	801b454 <iprintf>

  TCP_RMV(pcblist, pcb);
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	683a      	ldr	r2, [r7, #0]
 8014384:	429a      	cmp	r2, r3
 8014386:	d105      	bne.n	8014394 <tcp_pcb_remove+0x48>
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	68da      	ldr	r2, [r3, #12]
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	601a      	str	r2, [r3, #0]
 8014392:	e013      	b.n	80143bc <tcp_pcb_remove+0x70>
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	60fb      	str	r3, [r7, #12]
 801439a:	e00c      	b.n	80143b6 <tcp_pcb_remove+0x6a>
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	68db      	ldr	r3, [r3, #12]
 80143a0:	683a      	ldr	r2, [r7, #0]
 80143a2:	429a      	cmp	r2, r3
 80143a4:	d104      	bne.n	80143b0 <tcp_pcb_remove+0x64>
 80143a6:	683b      	ldr	r3, [r7, #0]
 80143a8:	68da      	ldr	r2, [r3, #12]
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	60da      	str	r2, [r3, #12]
 80143ae:	e005      	b.n	80143bc <tcp_pcb_remove+0x70>
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	68db      	ldr	r3, [r3, #12]
 80143b4:	60fb      	str	r3, [r7, #12]
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d1ef      	bne.n	801439c <tcp_pcb_remove+0x50>
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	2200      	movs	r2, #0
 80143c0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80143c2:	6838      	ldr	r0, [r7, #0]
 80143c4:	f7ff ff72 	bl	80142ac <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80143c8:	683b      	ldr	r3, [r7, #0]
 80143ca:	7d1b      	ldrb	r3, [r3, #20]
 80143cc:	2b0a      	cmp	r3, #10
 80143ce:	d013      	beq.n	80143f8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80143d0:	683b      	ldr	r3, [r7, #0]
 80143d2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80143d4:	2b01      	cmp	r3, #1
 80143d6:	d00f      	beq.n	80143f8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80143d8:	683b      	ldr	r3, [r7, #0]
 80143da:	8b5b      	ldrh	r3, [r3, #26]
 80143dc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d009      	beq.n	80143f8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80143e4:	683b      	ldr	r3, [r7, #0]
 80143e6:	8b5b      	ldrh	r3, [r3, #26]
 80143e8:	f043 0302 	orr.w	r3, r3, #2
 80143ec:	b29a      	uxth	r2, r3
 80143ee:	683b      	ldr	r3, [r7, #0]
 80143f0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80143f2:	6838      	ldr	r0, [r7, #0]
 80143f4:	f002 ff68 	bl	80172c8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	7d1b      	ldrb	r3, [r3, #20]
 80143fc:	2b01      	cmp	r3, #1
 80143fe:	d020      	beq.n	8014442 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014404:	2b00      	cmp	r3, #0
 8014406:	d006      	beq.n	8014416 <tcp_pcb_remove+0xca>
 8014408:	4b13      	ldr	r3, [pc, #76]	@ (8014458 <tcp_pcb_remove+0x10c>)
 801440a:	f640 0293 	movw	r2, #2195	@ 0x893
 801440e:	4916      	ldr	r1, [pc, #88]	@ (8014468 <tcp_pcb_remove+0x11c>)
 8014410:	4813      	ldr	r0, [pc, #76]	@ (8014460 <tcp_pcb_remove+0x114>)
 8014412:	f007 f81f 	bl	801b454 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801441a:	2b00      	cmp	r3, #0
 801441c:	d006      	beq.n	801442c <tcp_pcb_remove+0xe0>
 801441e:	4b0e      	ldr	r3, [pc, #56]	@ (8014458 <tcp_pcb_remove+0x10c>)
 8014420:	f640 0294 	movw	r2, #2196	@ 0x894
 8014424:	4911      	ldr	r1, [pc, #68]	@ (801446c <tcp_pcb_remove+0x120>)
 8014426:	480e      	ldr	r0, [pc, #56]	@ (8014460 <tcp_pcb_remove+0x114>)
 8014428:	f007 f814 	bl	801b454 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801442c:	683b      	ldr	r3, [r7, #0]
 801442e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014430:	2b00      	cmp	r3, #0
 8014432:	d006      	beq.n	8014442 <tcp_pcb_remove+0xf6>
 8014434:	4b08      	ldr	r3, [pc, #32]	@ (8014458 <tcp_pcb_remove+0x10c>)
 8014436:	f640 0296 	movw	r2, #2198	@ 0x896
 801443a:	490d      	ldr	r1, [pc, #52]	@ (8014470 <tcp_pcb_remove+0x124>)
 801443c:	4808      	ldr	r0, [pc, #32]	@ (8014460 <tcp_pcb_remove+0x114>)
 801443e:	f007 f809 	bl	801b454 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014442:	683b      	ldr	r3, [r7, #0]
 8014444:	2200      	movs	r2, #0
 8014446:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014448:	683b      	ldr	r3, [r7, #0]
 801444a:	2200      	movs	r2, #0
 801444c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801444e:	bf00      	nop
 8014450:	3710      	adds	r7, #16
 8014452:	46bd      	mov	sp, r7
 8014454:	bd80      	pop	{r7, pc}
 8014456:	bf00      	nop
 8014458:	0801d388 	.word	0x0801d388
 801445c:	0801d9f0 	.word	0x0801d9f0
 8014460:	0801d3cc 	.word	0x0801d3cc
 8014464:	0801da0c 	.word	0x0801da0c
 8014468:	0801da2c 	.word	0x0801da2c
 801446c:	0801da44 	.word	0x0801da44
 8014470:	0801da60 	.word	0x0801da60

08014474 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b082      	sub	sp, #8
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d106      	bne.n	8014490 <tcp_next_iss+0x1c>
 8014482:	4b0a      	ldr	r3, [pc, #40]	@ (80144ac <tcp_next_iss+0x38>)
 8014484:	f640 02af 	movw	r2, #2223	@ 0x8af
 8014488:	4909      	ldr	r1, [pc, #36]	@ (80144b0 <tcp_next_iss+0x3c>)
 801448a:	480a      	ldr	r0, [pc, #40]	@ (80144b4 <tcp_next_iss+0x40>)
 801448c:	f006 ffe2 	bl	801b454 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014490:	4b09      	ldr	r3, [pc, #36]	@ (80144b8 <tcp_next_iss+0x44>)
 8014492:	681a      	ldr	r2, [r3, #0]
 8014494:	4b09      	ldr	r3, [pc, #36]	@ (80144bc <tcp_next_iss+0x48>)
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	4413      	add	r3, r2
 801449a:	4a07      	ldr	r2, [pc, #28]	@ (80144b8 <tcp_next_iss+0x44>)
 801449c:	6013      	str	r3, [r2, #0]
  return iss;
 801449e:	4b06      	ldr	r3, [pc, #24]	@ (80144b8 <tcp_next_iss+0x44>)
 80144a0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80144a2:	4618      	mov	r0, r3
 80144a4:	3708      	adds	r7, #8
 80144a6:	46bd      	mov	sp, r7
 80144a8:	bd80      	pop	{r7, pc}
 80144aa:	bf00      	nop
 80144ac:	0801d388 	.word	0x0801d388
 80144b0:	0801da78 	.word	0x0801da78
 80144b4:	0801d3cc 	.word	0x0801d3cc
 80144b8:	2400002c 	.word	0x2400002c
 80144bc:	2400818c 	.word	0x2400818c

080144c0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b086      	sub	sp, #24
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	4603      	mov	r3, r0
 80144c8:	60b9      	str	r1, [r7, #8]
 80144ca:	607a      	str	r2, [r7, #4]
 80144cc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d106      	bne.n	80144e2 <tcp_eff_send_mss_netif+0x22>
 80144d4:	4b14      	ldr	r3, [pc, #80]	@ (8014528 <tcp_eff_send_mss_netif+0x68>)
 80144d6:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80144da:	4914      	ldr	r1, [pc, #80]	@ (801452c <tcp_eff_send_mss_netif+0x6c>)
 80144dc:	4814      	ldr	r0, [pc, #80]	@ (8014530 <tcp_eff_send_mss_netif+0x70>)
 80144de:	f006 ffb9 	bl	801b454 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80144e2:	68bb      	ldr	r3, [r7, #8]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d101      	bne.n	80144ec <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80144e8:	89fb      	ldrh	r3, [r7, #14]
 80144ea:	e019      	b.n	8014520 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80144f0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80144f2:	8afb      	ldrh	r3, [r7, #22]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d012      	beq.n	801451e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80144f8:	2328      	movs	r3, #40	@ 0x28
 80144fa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80144fc:	8afa      	ldrh	r2, [r7, #22]
 80144fe:	8abb      	ldrh	r3, [r7, #20]
 8014500:	429a      	cmp	r2, r3
 8014502:	d904      	bls.n	801450e <tcp_eff_send_mss_netif+0x4e>
 8014504:	8afa      	ldrh	r2, [r7, #22]
 8014506:	8abb      	ldrh	r3, [r7, #20]
 8014508:	1ad3      	subs	r3, r2, r3
 801450a:	b29b      	uxth	r3, r3
 801450c:	e000      	b.n	8014510 <tcp_eff_send_mss_netif+0x50>
 801450e:	2300      	movs	r3, #0
 8014510:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8014512:	8a7a      	ldrh	r2, [r7, #18]
 8014514:	89fb      	ldrh	r3, [r7, #14]
 8014516:	4293      	cmp	r3, r2
 8014518:	bf28      	it	cs
 801451a:	4613      	movcs	r3, r2
 801451c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801451e:	89fb      	ldrh	r3, [r7, #14]
}
 8014520:	4618      	mov	r0, r3
 8014522:	3718      	adds	r7, #24
 8014524:	46bd      	mov	sp, r7
 8014526:	bd80      	pop	{r7, pc}
 8014528:	0801d388 	.word	0x0801d388
 801452c:	0801da94 	.word	0x0801da94
 8014530:	0801d3cc 	.word	0x0801d3cc

08014534 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b084      	sub	sp, #16
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
 801453c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801453e:	683b      	ldr	r3, [r7, #0]
 8014540:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d119      	bne.n	801457c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8014548:	4b10      	ldr	r3, [pc, #64]	@ (801458c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801454a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801454e:	4910      	ldr	r1, [pc, #64]	@ (8014590 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014550:	4810      	ldr	r0, [pc, #64]	@ (8014594 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8014552:	f006 ff7f 	bl	801b454 <iprintf>

  while (pcb != NULL) {
 8014556:	e011      	b.n	801457c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	681a      	ldr	r2, [r3, #0]
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	429a      	cmp	r2, r3
 8014562:	d108      	bne.n	8014576 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	68db      	ldr	r3, [r3, #12]
 8014568:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801456a:	68f8      	ldr	r0, [r7, #12]
 801456c:	f7fe ffc4 	bl	80134f8 <tcp_abort>
      pcb = next;
 8014570:	68bb      	ldr	r3, [r7, #8]
 8014572:	60fb      	str	r3, [r7, #12]
 8014574:	e002      	b.n	801457c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	68db      	ldr	r3, [r3, #12]
 801457a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d1ea      	bne.n	8014558 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014582:	bf00      	nop
 8014584:	bf00      	nop
 8014586:	3710      	adds	r7, #16
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}
 801458c:	0801d388 	.word	0x0801d388
 8014590:	0801dabc 	.word	0x0801dabc
 8014594:	0801d3cc 	.word	0x0801d3cc

08014598 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b084      	sub	sp, #16
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
 80145a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d02a      	beq.n	80145fe <tcp_netif_ip_addr_changed+0x66>
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d026      	beq.n	80145fe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80145b0:	4b15      	ldr	r3, [pc, #84]	@ (8014608 <tcp_netif_ip_addr_changed+0x70>)
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	4619      	mov	r1, r3
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f7ff ffbc 	bl	8014534 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80145bc:	4b13      	ldr	r3, [pc, #76]	@ (801460c <tcp_netif_ip_addr_changed+0x74>)
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	4619      	mov	r1, r3
 80145c2:	6878      	ldr	r0, [r7, #4]
 80145c4:	f7ff ffb6 	bl	8014534 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80145c8:	683b      	ldr	r3, [r7, #0]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d017      	beq.n	80145fe <tcp_netif_ip_addr_changed+0x66>
 80145ce:	683b      	ldr	r3, [r7, #0]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d013      	beq.n	80145fe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80145d6:	4b0e      	ldr	r3, [pc, #56]	@ (8014610 <tcp_netif_ip_addr_changed+0x78>)
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	60fb      	str	r3, [r7, #12]
 80145dc:	e00c      	b.n	80145f8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	681a      	ldr	r2, [r3, #0]
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	429a      	cmp	r2, r3
 80145e8:	d103      	bne.n	80145f2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80145ea:	683b      	ldr	r3, [r7, #0]
 80145ec:	681a      	ldr	r2, [r3, #0]
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	68db      	ldr	r3, [r3, #12]
 80145f6:	60fb      	str	r3, [r7, #12]
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d1ef      	bne.n	80145de <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80145fe:	bf00      	nop
 8014600:	3710      	adds	r7, #16
 8014602:	46bd      	mov	sp, r7
 8014604:	bd80      	pop	{r7, pc}
 8014606:	bf00      	nop
 8014608:	24008198 	.word	0x24008198
 801460c:	24008190 	.word	0x24008190
 8014610:	24008194 	.word	0x24008194

08014614 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014614:	b580      	push	{r7, lr}
 8014616:	b082      	sub	sp, #8
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014620:	2b00      	cmp	r3, #0
 8014622:	d007      	beq.n	8014634 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014628:	4618      	mov	r0, r3
 801462a:	f7ff fc3d 	bl	8013ea8 <tcp_segs_free>
    pcb->ooseq = NULL;
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	2200      	movs	r2, #0
 8014632:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014634:	bf00      	nop
 8014636:	3708      	adds	r7, #8
 8014638:	46bd      	mov	sp, r7
 801463a:	bd80      	pop	{r7, pc}

0801463c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801463c:	b590      	push	{r4, r7, lr}
 801463e:	b08d      	sub	sp, #52	@ 0x34
 8014640:	af04      	add	r7, sp, #16
 8014642:	6078      	str	r0, [r7, #4]
 8014644:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d105      	bne.n	8014658 <tcp_input+0x1c>
 801464c:	4b9b      	ldr	r3, [pc, #620]	@ (80148bc <tcp_input+0x280>)
 801464e:	2283      	movs	r2, #131	@ 0x83
 8014650:	499b      	ldr	r1, [pc, #620]	@ (80148c0 <tcp_input+0x284>)
 8014652:	489c      	ldr	r0, [pc, #624]	@ (80148c4 <tcp_input+0x288>)
 8014654:	f006 fefe 	bl	801b454 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	685b      	ldr	r3, [r3, #4]
 801465c:	4a9a      	ldr	r2, [pc, #616]	@ (80148c8 <tcp_input+0x28c>)
 801465e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	895b      	ldrh	r3, [r3, #10]
 8014664:	2b13      	cmp	r3, #19
 8014666:	f240 83d1 	bls.w	8014e0c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801466a:	4b98      	ldr	r3, [pc, #608]	@ (80148cc <tcp_input+0x290>)
 801466c:	695b      	ldr	r3, [r3, #20]
 801466e:	4a97      	ldr	r2, [pc, #604]	@ (80148cc <tcp_input+0x290>)
 8014670:	6812      	ldr	r2, [r2, #0]
 8014672:	4611      	mov	r1, r2
 8014674:	4618      	mov	r0, r3
 8014676:	f005 fc67 	bl	8019f48 <ip4_addr_isbroadcast_u32>
 801467a:	4603      	mov	r3, r0
 801467c:	2b00      	cmp	r3, #0
 801467e:	f040 83c7 	bne.w	8014e10 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8014682:	4b92      	ldr	r3, [pc, #584]	@ (80148cc <tcp_input+0x290>)
 8014684:	695b      	ldr	r3, [r3, #20]
 8014686:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801468a:	2be0      	cmp	r3, #224	@ 0xe0
 801468c:	f000 83c0 	beq.w	8014e10 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014690:	4b8d      	ldr	r3, [pc, #564]	@ (80148c8 <tcp_input+0x28c>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	899b      	ldrh	r3, [r3, #12]
 8014696:	b29b      	uxth	r3, r3
 8014698:	4618      	mov	r0, r3
 801469a:	f7fc fcdf 	bl	801105c <lwip_htons>
 801469e:	4603      	mov	r3, r0
 80146a0:	0b1b      	lsrs	r3, r3, #12
 80146a2:	b29b      	uxth	r3, r3
 80146a4:	b2db      	uxtb	r3, r3
 80146a6:	009b      	lsls	r3, r3, #2
 80146a8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80146aa:	7cbb      	ldrb	r3, [r7, #18]
 80146ac:	2b13      	cmp	r3, #19
 80146ae:	f240 83b1 	bls.w	8014e14 <tcp_input+0x7d8>
 80146b2:	7cbb      	ldrb	r3, [r7, #18]
 80146b4:	b29a      	uxth	r2, r3
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	891b      	ldrh	r3, [r3, #8]
 80146ba:	429a      	cmp	r2, r3
 80146bc:	f200 83aa 	bhi.w	8014e14 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80146c0:	7cbb      	ldrb	r3, [r7, #18]
 80146c2:	b29b      	uxth	r3, r3
 80146c4:	3b14      	subs	r3, #20
 80146c6:	b29a      	uxth	r2, r3
 80146c8:	4b81      	ldr	r3, [pc, #516]	@ (80148d0 <tcp_input+0x294>)
 80146ca:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80146cc:	4b81      	ldr	r3, [pc, #516]	@ (80148d4 <tcp_input+0x298>)
 80146ce:	2200      	movs	r2, #0
 80146d0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	895a      	ldrh	r2, [r3, #10]
 80146d6:	7cbb      	ldrb	r3, [r7, #18]
 80146d8:	b29b      	uxth	r3, r3
 80146da:	429a      	cmp	r2, r3
 80146dc:	d309      	bcc.n	80146f2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80146de:	4b7c      	ldr	r3, [pc, #496]	@ (80148d0 <tcp_input+0x294>)
 80146e0:	881a      	ldrh	r2, [r3, #0]
 80146e2:	4b7d      	ldr	r3, [pc, #500]	@ (80148d8 <tcp_input+0x29c>)
 80146e4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80146e6:	7cbb      	ldrb	r3, [r7, #18]
 80146e8:	4619      	mov	r1, r3
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	f7fe f8ea 	bl	80128c4 <pbuf_remove_header>
 80146f0:	e04e      	b.n	8014790 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d105      	bne.n	8014706 <tcp_input+0xca>
 80146fa:	4b70      	ldr	r3, [pc, #448]	@ (80148bc <tcp_input+0x280>)
 80146fc:	22c2      	movs	r2, #194	@ 0xc2
 80146fe:	4977      	ldr	r1, [pc, #476]	@ (80148dc <tcp_input+0x2a0>)
 8014700:	4870      	ldr	r0, [pc, #448]	@ (80148c4 <tcp_input+0x288>)
 8014702:	f006 fea7 	bl	801b454 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8014706:	2114      	movs	r1, #20
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f7fe f8db 	bl	80128c4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	895a      	ldrh	r2, [r3, #10]
 8014712:	4b71      	ldr	r3, [pc, #452]	@ (80148d8 <tcp_input+0x29c>)
 8014714:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8014716:	4b6e      	ldr	r3, [pc, #440]	@ (80148d0 <tcp_input+0x294>)
 8014718:	881a      	ldrh	r2, [r3, #0]
 801471a:	4b6f      	ldr	r3, [pc, #444]	@ (80148d8 <tcp_input+0x29c>)
 801471c:	881b      	ldrh	r3, [r3, #0]
 801471e:	1ad3      	subs	r3, r2, r3
 8014720:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8014722:	4b6d      	ldr	r3, [pc, #436]	@ (80148d8 <tcp_input+0x29c>)
 8014724:	881b      	ldrh	r3, [r3, #0]
 8014726:	4619      	mov	r1, r3
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f7fe f8cb 	bl	80128c4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	895b      	ldrh	r3, [r3, #10]
 8014734:	8a3a      	ldrh	r2, [r7, #16]
 8014736:	429a      	cmp	r2, r3
 8014738:	f200 836e 	bhi.w	8014e18 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	685b      	ldr	r3, [r3, #4]
 8014742:	4a64      	ldr	r2, [pc, #400]	@ (80148d4 <tcp_input+0x298>)
 8014744:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	8a3a      	ldrh	r2, [r7, #16]
 801474c:	4611      	mov	r1, r2
 801474e:	4618      	mov	r0, r3
 8014750:	f7fe f8b8 	bl	80128c4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	891a      	ldrh	r2, [r3, #8]
 8014758:	8a3b      	ldrh	r3, [r7, #16]
 801475a:	1ad3      	subs	r3, r2, r3
 801475c:	b29a      	uxth	r2, r3
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	895b      	ldrh	r3, [r3, #10]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d005      	beq.n	8014776 <tcp_input+0x13a>
 801476a:	4b54      	ldr	r3, [pc, #336]	@ (80148bc <tcp_input+0x280>)
 801476c:	22df      	movs	r2, #223	@ 0xdf
 801476e:	495c      	ldr	r1, [pc, #368]	@ (80148e0 <tcp_input+0x2a4>)
 8014770:	4854      	ldr	r0, [pc, #336]	@ (80148c4 <tcp_input+0x288>)
 8014772:	f006 fe6f 	bl	801b454 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	891a      	ldrh	r2, [r3, #8]
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	891b      	ldrh	r3, [r3, #8]
 8014780:	429a      	cmp	r2, r3
 8014782:	d005      	beq.n	8014790 <tcp_input+0x154>
 8014784:	4b4d      	ldr	r3, [pc, #308]	@ (80148bc <tcp_input+0x280>)
 8014786:	22e0      	movs	r2, #224	@ 0xe0
 8014788:	4956      	ldr	r1, [pc, #344]	@ (80148e4 <tcp_input+0x2a8>)
 801478a:	484e      	ldr	r0, [pc, #312]	@ (80148c4 <tcp_input+0x288>)
 801478c:	f006 fe62 	bl	801b454 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8014790:	4b4d      	ldr	r3, [pc, #308]	@ (80148c8 <tcp_input+0x28c>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	881b      	ldrh	r3, [r3, #0]
 8014796:	b29b      	uxth	r3, r3
 8014798:	4a4b      	ldr	r2, [pc, #300]	@ (80148c8 <tcp_input+0x28c>)
 801479a:	6814      	ldr	r4, [r2, #0]
 801479c:	4618      	mov	r0, r3
 801479e:	f7fc fc5d 	bl	801105c <lwip_htons>
 80147a2:	4603      	mov	r3, r0
 80147a4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80147a6:	4b48      	ldr	r3, [pc, #288]	@ (80148c8 <tcp_input+0x28c>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	885b      	ldrh	r3, [r3, #2]
 80147ac:	b29b      	uxth	r3, r3
 80147ae:	4a46      	ldr	r2, [pc, #280]	@ (80148c8 <tcp_input+0x28c>)
 80147b0:	6814      	ldr	r4, [r2, #0]
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7fc fc52 	bl	801105c <lwip_htons>
 80147b8:	4603      	mov	r3, r0
 80147ba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80147bc:	4b42      	ldr	r3, [pc, #264]	@ (80148c8 <tcp_input+0x28c>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	685b      	ldr	r3, [r3, #4]
 80147c2:	4a41      	ldr	r2, [pc, #260]	@ (80148c8 <tcp_input+0x28c>)
 80147c4:	6814      	ldr	r4, [r2, #0]
 80147c6:	4618      	mov	r0, r3
 80147c8:	f7fc fc5e 	bl	8011088 <lwip_htonl>
 80147cc:	4603      	mov	r3, r0
 80147ce:	6063      	str	r3, [r4, #4]
 80147d0:	6863      	ldr	r3, [r4, #4]
 80147d2:	4a45      	ldr	r2, [pc, #276]	@ (80148e8 <tcp_input+0x2ac>)
 80147d4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80147d6:	4b3c      	ldr	r3, [pc, #240]	@ (80148c8 <tcp_input+0x28c>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	689b      	ldr	r3, [r3, #8]
 80147dc:	4a3a      	ldr	r2, [pc, #232]	@ (80148c8 <tcp_input+0x28c>)
 80147de:	6814      	ldr	r4, [r2, #0]
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7fc fc51 	bl	8011088 <lwip_htonl>
 80147e6:	4603      	mov	r3, r0
 80147e8:	60a3      	str	r3, [r4, #8]
 80147ea:	68a3      	ldr	r3, [r4, #8]
 80147ec:	4a3f      	ldr	r2, [pc, #252]	@ (80148ec <tcp_input+0x2b0>)
 80147ee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80147f0:	4b35      	ldr	r3, [pc, #212]	@ (80148c8 <tcp_input+0x28c>)
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	89db      	ldrh	r3, [r3, #14]
 80147f6:	b29b      	uxth	r3, r3
 80147f8:	4a33      	ldr	r2, [pc, #204]	@ (80148c8 <tcp_input+0x28c>)
 80147fa:	6814      	ldr	r4, [r2, #0]
 80147fc:	4618      	mov	r0, r3
 80147fe:	f7fc fc2d 	bl	801105c <lwip_htons>
 8014802:	4603      	mov	r3, r0
 8014804:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8014806:	4b30      	ldr	r3, [pc, #192]	@ (80148c8 <tcp_input+0x28c>)
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	899b      	ldrh	r3, [r3, #12]
 801480c:	b29b      	uxth	r3, r3
 801480e:	4618      	mov	r0, r3
 8014810:	f7fc fc24 	bl	801105c <lwip_htons>
 8014814:	4603      	mov	r3, r0
 8014816:	b2db      	uxtb	r3, r3
 8014818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801481c:	b2da      	uxtb	r2, r3
 801481e:	4b34      	ldr	r3, [pc, #208]	@ (80148f0 <tcp_input+0x2b4>)
 8014820:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	891a      	ldrh	r2, [r3, #8]
 8014826:	4b33      	ldr	r3, [pc, #204]	@ (80148f4 <tcp_input+0x2b8>)
 8014828:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801482a:	4b31      	ldr	r3, [pc, #196]	@ (80148f0 <tcp_input+0x2b4>)
 801482c:	781b      	ldrb	r3, [r3, #0]
 801482e:	f003 0303 	and.w	r3, r3, #3
 8014832:	2b00      	cmp	r3, #0
 8014834:	d00c      	beq.n	8014850 <tcp_input+0x214>
    tcplen++;
 8014836:	4b2f      	ldr	r3, [pc, #188]	@ (80148f4 <tcp_input+0x2b8>)
 8014838:	881b      	ldrh	r3, [r3, #0]
 801483a:	3301      	adds	r3, #1
 801483c:	b29a      	uxth	r2, r3
 801483e:	4b2d      	ldr	r3, [pc, #180]	@ (80148f4 <tcp_input+0x2b8>)
 8014840:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	891a      	ldrh	r2, [r3, #8]
 8014846:	4b2b      	ldr	r3, [pc, #172]	@ (80148f4 <tcp_input+0x2b8>)
 8014848:	881b      	ldrh	r3, [r3, #0]
 801484a:	429a      	cmp	r2, r3
 801484c:	f200 82e6 	bhi.w	8014e1c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8014850:	2300      	movs	r3, #0
 8014852:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014854:	4b28      	ldr	r3, [pc, #160]	@ (80148f8 <tcp_input+0x2bc>)
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	61fb      	str	r3, [r7, #28]
 801485a:	e09d      	b.n	8014998 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801485c:	69fb      	ldr	r3, [r7, #28]
 801485e:	7d1b      	ldrb	r3, [r3, #20]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d105      	bne.n	8014870 <tcp_input+0x234>
 8014864:	4b15      	ldr	r3, [pc, #84]	@ (80148bc <tcp_input+0x280>)
 8014866:	22fb      	movs	r2, #251	@ 0xfb
 8014868:	4924      	ldr	r1, [pc, #144]	@ (80148fc <tcp_input+0x2c0>)
 801486a:	4816      	ldr	r0, [pc, #88]	@ (80148c4 <tcp_input+0x288>)
 801486c:	f006 fdf2 	bl	801b454 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8014870:	69fb      	ldr	r3, [r7, #28]
 8014872:	7d1b      	ldrb	r3, [r3, #20]
 8014874:	2b0a      	cmp	r3, #10
 8014876:	d105      	bne.n	8014884 <tcp_input+0x248>
 8014878:	4b10      	ldr	r3, [pc, #64]	@ (80148bc <tcp_input+0x280>)
 801487a:	22fc      	movs	r2, #252	@ 0xfc
 801487c:	4920      	ldr	r1, [pc, #128]	@ (8014900 <tcp_input+0x2c4>)
 801487e:	4811      	ldr	r0, [pc, #68]	@ (80148c4 <tcp_input+0x288>)
 8014880:	f006 fde8 	bl	801b454 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8014884:	69fb      	ldr	r3, [r7, #28]
 8014886:	7d1b      	ldrb	r3, [r3, #20]
 8014888:	2b01      	cmp	r3, #1
 801488a:	d105      	bne.n	8014898 <tcp_input+0x25c>
 801488c:	4b0b      	ldr	r3, [pc, #44]	@ (80148bc <tcp_input+0x280>)
 801488e:	22fd      	movs	r2, #253	@ 0xfd
 8014890:	491c      	ldr	r1, [pc, #112]	@ (8014904 <tcp_input+0x2c8>)
 8014892:	480c      	ldr	r0, [pc, #48]	@ (80148c4 <tcp_input+0x288>)
 8014894:	f006 fdde 	bl	801b454 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014898:	69fb      	ldr	r3, [r7, #28]
 801489a:	7a1b      	ldrb	r3, [r3, #8]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d033      	beq.n	8014908 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80148a0:	69fb      	ldr	r3, [r7, #28]
 80148a2:	7a1a      	ldrb	r2, [r3, #8]
 80148a4:	4b09      	ldr	r3, [pc, #36]	@ (80148cc <tcp_input+0x290>)
 80148a6:	685b      	ldr	r3, [r3, #4]
 80148a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80148ac:	3301      	adds	r3, #1
 80148ae:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80148b0:	429a      	cmp	r2, r3
 80148b2:	d029      	beq.n	8014908 <tcp_input+0x2cc>
      prev = pcb;
 80148b4:	69fb      	ldr	r3, [r7, #28]
 80148b6:	61bb      	str	r3, [r7, #24]
      continue;
 80148b8:	e06b      	b.n	8014992 <tcp_input+0x356>
 80148ba:	bf00      	nop
 80148bc:	0801daf0 	.word	0x0801daf0
 80148c0:	0801db24 	.word	0x0801db24
 80148c4:	0801db3c 	.word	0x0801db3c
 80148c8:	240081b4 	.word	0x240081b4
 80148cc:	2400508c 	.word	0x2400508c
 80148d0:	240081b8 	.word	0x240081b8
 80148d4:	240081bc 	.word	0x240081bc
 80148d8:	240081ba 	.word	0x240081ba
 80148dc:	0801db64 	.word	0x0801db64
 80148e0:	0801db74 	.word	0x0801db74
 80148e4:	0801db80 	.word	0x0801db80
 80148e8:	240081c4 	.word	0x240081c4
 80148ec:	240081c8 	.word	0x240081c8
 80148f0:	240081d0 	.word	0x240081d0
 80148f4:	240081ce 	.word	0x240081ce
 80148f8:	24008198 	.word	0x24008198
 80148fc:	0801dba0 	.word	0x0801dba0
 8014900:	0801dbc8 	.word	0x0801dbc8
 8014904:	0801dbf4 	.word	0x0801dbf4
    }

    if (pcb->remote_port == tcphdr->src &&
 8014908:	69fb      	ldr	r3, [r7, #28]
 801490a:	8b1a      	ldrh	r2, [r3, #24]
 801490c:	4b72      	ldr	r3, [pc, #456]	@ (8014ad8 <tcp_input+0x49c>)
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	881b      	ldrh	r3, [r3, #0]
 8014912:	b29b      	uxth	r3, r3
 8014914:	429a      	cmp	r2, r3
 8014916:	d13a      	bne.n	801498e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8014918:	69fb      	ldr	r3, [r7, #28]
 801491a:	8ada      	ldrh	r2, [r3, #22]
 801491c:	4b6e      	ldr	r3, [pc, #440]	@ (8014ad8 <tcp_input+0x49c>)
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	885b      	ldrh	r3, [r3, #2]
 8014922:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8014924:	429a      	cmp	r2, r3
 8014926:	d132      	bne.n	801498e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014928:	69fb      	ldr	r3, [r7, #28]
 801492a:	685a      	ldr	r2, [r3, #4]
 801492c:	4b6b      	ldr	r3, [pc, #428]	@ (8014adc <tcp_input+0x4a0>)
 801492e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8014930:	429a      	cmp	r2, r3
 8014932:	d12c      	bne.n	801498e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014934:	69fb      	ldr	r3, [r7, #28]
 8014936:	681a      	ldr	r2, [r3, #0]
 8014938:	4b68      	ldr	r3, [pc, #416]	@ (8014adc <tcp_input+0x4a0>)
 801493a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801493c:	429a      	cmp	r2, r3
 801493e:	d126      	bne.n	801498e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8014940:	69fb      	ldr	r3, [r7, #28]
 8014942:	68db      	ldr	r3, [r3, #12]
 8014944:	69fa      	ldr	r2, [r7, #28]
 8014946:	429a      	cmp	r2, r3
 8014948:	d106      	bne.n	8014958 <tcp_input+0x31c>
 801494a:	4b65      	ldr	r3, [pc, #404]	@ (8014ae0 <tcp_input+0x4a4>)
 801494c:	f240 120d 	movw	r2, #269	@ 0x10d
 8014950:	4964      	ldr	r1, [pc, #400]	@ (8014ae4 <tcp_input+0x4a8>)
 8014952:	4865      	ldr	r0, [pc, #404]	@ (8014ae8 <tcp_input+0x4ac>)
 8014954:	f006 fd7e 	bl	801b454 <iprintf>
      if (prev != NULL) {
 8014958:	69bb      	ldr	r3, [r7, #24]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d00a      	beq.n	8014974 <tcp_input+0x338>
        prev->next = pcb->next;
 801495e:	69fb      	ldr	r3, [r7, #28]
 8014960:	68da      	ldr	r2, [r3, #12]
 8014962:	69bb      	ldr	r3, [r7, #24]
 8014964:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8014966:	4b61      	ldr	r3, [pc, #388]	@ (8014aec <tcp_input+0x4b0>)
 8014968:	681a      	ldr	r2, [r3, #0]
 801496a:	69fb      	ldr	r3, [r7, #28]
 801496c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801496e:	4a5f      	ldr	r2, [pc, #380]	@ (8014aec <tcp_input+0x4b0>)
 8014970:	69fb      	ldr	r3, [r7, #28]
 8014972:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8014974:	69fb      	ldr	r3, [r7, #28]
 8014976:	68db      	ldr	r3, [r3, #12]
 8014978:	69fa      	ldr	r2, [r7, #28]
 801497a:	429a      	cmp	r2, r3
 801497c:	d111      	bne.n	80149a2 <tcp_input+0x366>
 801497e:	4b58      	ldr	r3, [pc, #352]	@ (8014ae0 <tcp_input+0x4a4>)
 8014980:	f240 1215 	movw	r2, #277	@ 0x115
 8014984:	495a      	ldr	r1, [pc, #360]	@ (8014af0 <tcp_input+0x4b4>)
 8014986:	4858      	ldr	r0, [pc, #352]	@ (8014ae8 <tcp_input+0x4ac>)
 8014988:	f006 fd64 	bl	801b454 <iprintf>
      break;
 801498c:	e009      	b.n	80149a2 <tcp_input+0x366>
    }
    prev = pcb;
 801498e:	69fb      	ldr	r3, [r7, #28]
 8014990:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014992:	69fb      	ldr	r3, [r7, #28]
 8014994:	68db      	ldr	r3, [r3, #12]
 8014996:	61fb      	str	r3, [r7, #28]
 8014998:	69fb      	ldr	r3, [r7, #28]
 801499a:	2b00      	cmp	r3, #0
 801499c:	f47f af5e 	bne.w	801485c <tcp_input+0x220>
 80149a0:	e000      	b.n	80149a4 <tcp_input+0x368>
      break;
 80149a2:	bf00      	nop
  }

  if (pcb == NULL) {
 80149a4:	69fb      	ldr	r3, [r7, #28]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	f040 80aa 	bne.w	8014b00 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80149ac:	4b51      	ldr	r3, [pc, #324]	@ (8014af4 <tcp_input+0x4b8>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	61fb      	str	r3, [r7, #28]
 80149b2:	e03f      	b.n	8014a34 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80149b4:	69fb      	ldr	r3, [r7, #28]
 80149b6:	7d1b      	ldrb	r3, [r3, #20]
 80149b8:	2b0a      	cmp	r3, #10
 80149ba:	d006      	beq.n	80149ca <tcp_input+0x38e>
 80149bc:	4b48      	ldr	r3, [pc, #288]	@ (8014ae0 <tcp_input+0x4a4>)
 80149be:	f240 121f 	movw	r2, #287	@ 0x11f
 80149c2:	494d      	ldr	r1, [pc, #308]	@ (8014af8 <tcp_input+0x4bc>)
 80149c4:	4848      	ldr	r0, [pc, #288]	@ (8014ae8 <tcp_input+0x4ac>)
 80149c6:	f006 fd45 	bl	801b454 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80149ca:	69fb      	ldr	r3, [r7, #28]
 80149cc:	7a1b      	ldrb	r3, [r3, #8]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d009      	beq.n	80149e6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80149d2:	69fb      	ldr	r3, [r7, #28]
 80149d4:	7a1a      	ldrb	r2, [r3, #8]
 80149d6:	4b41      	ldr	r3, [pc, #260]	@ (8014adc <tcp_input+0x4a0>)
 80149d8:	685b      	ldr	r3, [r3, #4]
 80149da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80149de:	3301      	adds	r3, #1
 80149e0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80149e2:	429a      	cmp	r2, r3
 80149e4:	d122      	bne.n	8014a2c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80149e6:	69fb      	ldr	r3, [r7, #28]
 80149e8:	8b1a      	ldrh	r2, [r3, #24]
 80149ea:	4b3b      	ldr	r3, [pc, #236]	@ (8014ad8 <tcp_input+0x49c>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	881b      	ldrh	r3, [r3, #0]
 80149f0:	b29b      	uxth	r3, r3
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d11b      	bne.n	8014a2e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80149f6:	69fb      	ldr	r3, [r7, #28]
 80149f8:	8ada      	ldrh	r2, [r3, #22]
 80149fa:	4b37      	ldr	r3, [pc, #220]	@ (8014ad8 <tcp_input+0x49c>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	885b      	ldrh	r3, [r3, #2]
 8014a00:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8014a02:	429a      	cmp	r2, r3
 8014a04:	d113      	bne.n	8014a2e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014a06:	69fb      	ldr	r3, [r7, #28]
 8014a08:	685a      	ldr	r2, [r3, #4]
 8014a0a:	4b34      	ldr	r3, [pc, #208]	@ (8014adc <tcp_input+0x4a0>)
 8014a0c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8014a0e:	429a      	cmp	r2, r3
 8014a10:	d10d      	bne.n	8014a2e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014a12:	69fb      	ldr	r3, [r7, #28]
 8014a14:	681a      	ldr	r2, [r3, #0]
 8014a16:	4b31      	ldr	r3, [pc, #196]	@ (8014adc <tcp_input+0x4a0>)
 8014a18:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014a1a:	429a      	cmp	r2, r3
 8014a1c:	d107      	bne.n	8014a2e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8014a1e:	69f8      	ldr	r0, [r7, #28]
 8014a20:	f000 fb56 	bl	80150d0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8014a24:	6878      	ldr	r0, [r7, #4]
 8014a26:	f7fd ffd3 	bl	80129d0 <pbuf_free>
        return;
 8014a2a:	e1fd      	b.n	8014e28 <tcp_input+0x7ec>
        continue;
 8014a2c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014a2e:	69fb      	ldr	r3, [r7, #28]
 8014a30:	68db      	ldr	r3, [r3, #12]
 8014a32:	61fb      	str	r3, [r7, #28]
 8014a34:	69fb      	ldr	r3, [r7, #28]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d1bc      	bne.n	80149b4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8014afc <tcp_input+0x4c0>)
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	617b      	str	r3, [r7, #20]
 8014a44:	e02a      	b.n	8014a9c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014a46:	697b      	ldr	r3, [r7, #20]
 8014a48:	7a1b      	ldrb	r3, [r3, #8]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d00c      	beq.n	8014a68 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014a4e:	697b      	ldr	r3, [r7, #20]
 8014a50:	7a1a      	ldrb	r2, [r3, #8]
 8014a52:	4b22      	ldr	r3, [pc, #136]	@ (8014adc <tcp_input+0x4a0>)
 8014a54:	685b      	ldr	r3, [r3, #4]
 8014a56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014a5a:	3301      	adds	r3, #1
 8014a5c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014a5e:	429a      	cmp	r2, r3
 8014a60:	d002      	beq.n	8014a68 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8014a62:	697b      	ldr	r3, [r7, #20]
 8014a64:	61bb      	str	r3, [r7, #24]
        continue;
 8014a66:	e016      	b.n	8014a96 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8014a68:	697b      	ldr	r3, [r7, #20]
 8014a6a:	8ada      	ldrh	r2, [r3, #22]
 8014a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8014ad8 <tcp_input+0x49c>)
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	885b      	ldrh	r3, [r3, #2]
 8014a72:	b29b      	uxth	r3, r3
 8014a74:	429a      	cmp	r2, r3
 8014a76:	d10c      	bne.n	8014a92 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8014a78:	697b      	ldr	r3, [r7, #20]
 8014a7a:	681a      	ldr	r2, [r3, #0]
 8014a7c:	4b17      	ldr	r3, [pc, #92]	@ (8014adc <tcp_input+0x4a0>)
 8014a7e:	695b      	ldr	r3, [r3, #20]
 8014a80:	429a      	cmp	r2, r3
 8014a82:	d00f      	beq.n	8014aa4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8014a84:	697b      	ldr	r3, [r7, #20]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d00d      	beq.n	8014aa6 <tcp_input+0x46a>
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d009      	beq.n	8014aa6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8014a92:	697b      	ldr	r3, [r7, #20]
 8014a94:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014a96:	697b      	ldr	r3, [r7, #20]
 8014a98:	68db      	ldr	r3, [r3, #12]
 8014a9a:	617b      	str	r3, [r7, #20]
 8014a9c:	697b      	ldr	r3, [r7, #20]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d1d1      	bne.n	8014a46 <tcp_input+0x40a>
 8014aa2:	e000      	b.n	8014aa6 <tcp_input+0x46a>
            break;
 8014aa4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d029      	beq.n	8014b00 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8014aac:	69bb      	ldr	r3, [r7, #24]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d00a      	beq.n	8014ac8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8014ab2:	697b      	ldr	r3, [r7, #20]
 8014ab4:	68da      	ldr	r2, [r3, #12]
 8014ab6:	69bb      	ldr	r3, [r7, #24]
 8014ab8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8014aba:	4b10      	ldr	r3, [pc, #64]	@ (8014afc <tcp_input+0x4c0>)
 8014abc:	681a      	ldr	r2, [r3, #0]
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8014ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8014afc <tcp_input+0x4c0>)
 8014ac4:	697b      	ldr	r3, [r7, #20]
 8014ac6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8014ac8:	6978      	ldr	r0, [r7, #20]
 8014aca:	f000 fa03 	bl	8014ed4 <tcp_listen_input>
      }
      pbuf_free(p);
 8014ace:	6878      	ldr	r0, [r7, #4]
 8014ad0:	f7fd ff7e 	bl	80129d0 <pbuf_free>
      return;
 8014ad4:	e1a8      	b.n	8014e28 <tcp_input+0x7ec>
 8014ad6:	bf00      	nop
 8014ad8:	240081b4 	.word	0x240081b4
 8014adc:	2400508c 	.word	0x2400508c
 8014ae0:	0801daf0 	.word	0x0801daf0
 8014ae4:	0801dc1c 	.word	0x0801dc1c
 8014ae8:	0801db3c 	.word	0x0801db3c
 8014aec:	24008198 	.word	0x24008198
 8014af0:	0801dc48 	.word	0x0801dc48
 8014af4:	2400819c 	.word	0x2400819c
 8014af8:	0801dc74 	.word	0x0801dc74
 8014afc:	24008194 	.word	0x24008194
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8014b00:	69fb      	ldr	r3, [r7, #28]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	f000 8158 	beq.w	8014db8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8014b08:	4b95      	ldr	r3, [pc, #596]	@ (8014d60 <tcp_input+0x724>)
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	891a      	ldrh	r2, [r3, #8]
 8014b12:	4b93      	ldr	r3, [pc, #588]	@ (8014d60 <tcp_input+0x724>)
 8014b14:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8014b16:	4a92      	ldr	r2, [pc, #584]	@ (8014d60 <tcp_input+0x724>)
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8014b1c:	4b91      	ldr	r3, [pc, #580]	@ (8014d64 <tcp_input+0x728>)
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	4a8f      	ldr	r2, [pc, #572]	@ (8014d60 <tcp_input+0x724>)
 8014b22:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8014b24:	4b90      	ldr	r3, [pc, #576]	@ (8014d68 <tcp_input+0x72c>)
 8014b26:	2200      	movs	r2, #0
 8014b28:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8014b2a:	4b90      	ldr	r3, [pc, #576]	@ (8014d6c <tcp_input+0x730>)
 8014b2c:	2200      	movs	r2, #0
 8014b2e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8014b30:	4b8f      	ldr	r3, [pc, #572]	@ (8014d70 <tcp_input+0x734>)
 8014b32:	2200      	movs	r2, #0
 8014b34:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8014b36:	4b8f      	ldr	r3, [pc, #572]	@ (8014d74 <tcp_input+0x738>)
 8014b38:	781b      	ldrb	r3, [r3, #0]
 8014b3a:	f003 0308 	and.w	r3, r3, #8
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d006      	beq.n	8014b50 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	7b5b      	ldrb	r3, [r3, #13]
 8014b46:	f043 0301 	orr.w	r3, r3, #1
 8014b4a:	b2da      	uxtb	r2, r3
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8014b50:	69fb      	ldr	r3, [r7, #28]
 8014b52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d017      	beq.n	8014b88 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014b58:	69f8      	ldr	r0, [r7, #28]
 8014b5a:	f7ff f929 	bl	8013db0 <tcp_process_refused_data>
 8014b5e:	4603      	mov	r3, r0
 8014b60:	f113 0f0d 	cmn.w	r3, #13
 8014b64:	d007      	beq.n	8014b76 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014b66:	69fb      	ldr	r3, [r7, #28]
 8014b68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d00c      	beq.n	8014b88 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014b6e:	4b82      	ldr	r3, [pc, #520]	@ (8014d78 <tcp_input+0x73c>)
 8014b70:	881b      	ldrh	r3, [r3, #0]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d008      	beq.n	8014b88 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8014b76:	69fb      	ldr	r3, [r7, #28]
 8014b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	f040 80e3 	bne.w	8014d46 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014b80:	69f8      	ldr	r0, [r7, #28]
 8014b82:	f003 f9a7 	bl	8017ed4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8014b86:	e0de      	b.n	8014d46 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8014b88:	4a7c      	ldr	r2, [pc, #496]	@ (8014d7c <tcp_input+0x740>)
 8014b8a:	69fb      	ldr	r3, [r7, #28]
 8014b8c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8014b8e:	69f8      	ldr	r0, [r7, #28]
 8014b90:	f000 fb18 	bl	80151c4 <tcp_process>
 8014b94:	4603      	mov	r3, r0
 8014b96:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8014b98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014b9c:	f113 0f0d 	cmn.w	r3, #13
 8014ba0:	f000 80d3 	beq.w	8014d4a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8014ba4:	4b71      	ldr	r3, [pc, #452]	@ (8014d6c <tcp_input+0x730>)
 8014ba6:	781b      	ldrb	r3, [r3, #0]
 8014ba8:	f003 0308 	and.w	r3, r3, #8
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d015      	beq.n	8014bdc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014bb0:	69fb      	ldr	r3, [r7, #28]
 8014bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d008      	beq.n	8014bcc <tcp_input+0x590>
 8014bba:	69fb      	ldr	r3, [r7, #28]
 8014bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014bc0:	69fa      	ldr	r2, [r7, #28]
 8014bc2:	6912      	ldr	r2, [r2, #16]
 8014bc4:	f06f 010d 	mvn.w	r1, #13
 8014bc8:	4610      	mov	r0, r2
 8014bca:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014bcc:	69f9      	ldr	r1, [r7, #28]
 8014bce:	486c      	ldr	r0, [pc, #432]	@ (8014d80 <tcp_input+0x744>)
 8014bd0:	f7ff fbbc 	bl	801434c <tcp_pcb_remove>
        tcp_free(pcb);
 8014bd4:	69f8      	ldr	r0, [r7, #28]
 8014bd6:	f7fe f9a7 	bl	8012f28 <tcp_free>
 8014bda:	e0da      	b.n	8014d92 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8014bdc:	2300      	movs	r3, #0
 8014bde:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8014be0:	4b63      	ldr	r3, [pc, #396]	@ (8014d70 <tcp_input+0x734>)
 8014be2:	881b      	ldrh	r3, [r3, #0]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d01d      	beq.n	8014c24 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014be8:	4b61      	ldr	r3, [pc, #388]	@ (8014d70 <tcp_input+0x734>)
 8014bea:	881b      	ldrh	r3, [r3, #0]
 8014bec:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8014bee:	69fb      	ldr	r3, [r7, #28]
 8014bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d00a      	beq.n	8014c0e <tcp_input+0x5d2>
 8014bf8:	69fb      	ldr	r3, [r7, #28]
 8014bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014bfe:	69fa      	ldr	r2, [r7, #28]
 8014c00:	6910      	ldr	r0, [r2, #16]
 8014c02:	89fa      	ldrh	r2, [r7, #14]
 8014c04:	69f9      	ldr	r1, [r7, #28]
 8014c06:	4798      	blx	r3
 8014c08:	4603      	mov	r3, r0
 8014c0a:	74fb      	strb	r3, [r7, #19]
 8014c0c:	e001      	b.n	8014c12 <tcp_input+0x5d6>
 8014c0e:	2300      	movs	r3, #0
 8014c10:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014c12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014c16:	f113 0f0d 	cmn.w	r3, #13
 8014c1a:	f000 8098 	beq.w	8014d4e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8014c1e:	4b54      	ldr	r3, [pc, #336]	@ (8014d70 <tcp_input+0x734>)
 8014c20:	2200      	movs	r2, #0
 8014c22:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8014c24:	69f8      	ldr	r0, [r7, #28]
 8014c26:	f000 f915 	bl	8014e54 <tcp_input_delayed_close>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	f040 8090 	bne.w	8014d52 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8014c32:	4b4d      	ldr	r3, [pc, #308]	@ (8014d68 <tcp_input+0x72c>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d041      	beq.n	8014cbe <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8014c3a:	69fb      	ldr	r3, [r7, #28]
 8014c3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d006      	beq.n	8014c50 <tcp_input+0x614>
 8014c42:	4b50      	ldr	r3, [pc, #320]	@ (8014d84 <tcp_input+0x748>)
 8014c44:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8014c48:	494f      	ldr	r1, [pc, #316]	@ (8014d88 <tcp_input+0x74c>)
 8014c4a:	4850      	ldr	r0, [pc, #320]	@ (8014d8c <tcp_input+0x750>)
 8014c4c:	f006 fc02 	bl	801b454 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014c50:	69fb      	ldr	r3, [r7, #28]
 8014c52:	8b5b      	ldrh	r3, [r3, #26]
 8014c54:	f003 0310 	and.w	r3, r3, #16
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d008      	beq.n	8014c6e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014c5c:	4b42      	ldr	r3, [pc, #264]	@ (8014d68 <tcp_input+0x72c>)
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	4618      	mov	r0, r3
 8014c62:	f7fd feb5 	bl	80129d0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8014c66:	69f8      	ldr	r0, [r7, #28]
 8014c68:	f7fe fc46 	bl	80134f8 <tcp_abort>
            goto aborted;
 8014c6c:	e091      	b.n	8014d92 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8014c6e:	69fb      	ldr	r3, [r7, #28]
 8014c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d00c      	beq.n	8014c92 <tcp_input+0x656>
 8014c78:	69fb      	ldr	r3, [r7, #28]
 8014c7a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014c7e:	69fb      	ldr	r3, [r7, #28]
 8014c80:	6918      	ldr	r0, [r3, #16]
 8014c82:	4b39      	ldr	r3, [pc, #228]	@ (8014d68 <tcp_input+0x72c>)
 8014c84:	681a      	ldr	r2, [r3, #0]
 8014c86:	2300      	movs	r3, #0
 8014c88:	69f9      	ldr	r1, [r7, #28]
 8014c8a:	47a0      	blx	r4
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	74fb      	strb	r3, [r7, #19]
 8014c90:	e008      	b.n	8014ca4 <tcp_input+0x668>
 8014c92:	4b35      	ldr	r3, [pc, #212]	@ (8014d68 <tcp_input+0x72c>)
 8014c94:	681a      	ldr	r2, [r3, #0]
 8014c96:	2300      	movs	r3, #0
 8014c98:	69f9      	ldr	r1, [r7, #28]
 8014c9a:	2000      	movs	r0, #0
 8014c9c:	f7ff f95e 	bl	8013f5c <tcp_recv_null>
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014ca4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014ca8:	f113 0f0d 	cmn.w	r3, #13
 8014cac:	d053      	beq.n	8014d56 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8014cae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d003      	beq.n	8014cbe <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014cb6:	4b2c      	ldr	r3, [pc, #176]	@ (8014d68 <tcp_input+0x72c>)
 8014cb8:	681a      	ldr	r2, [r3, #0]
 8014cba:	69fb      	ldr	r3, [r7, #28]
 8014cbc:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8014cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8014d6c <tcp_input+0x730>)
 8014cc0:	781b      	ldrb	r3, [r3, #0]
 8014cc2:	f003 0320 	and.w	r3, r3, #32
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d030      	beq.n	8014d2c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8014cca:	69fb      	ldr	r3, [r7, #28]
 8014ccc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d009      	beq.n	8014ce6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8014cd2:	69fb      	ldr	r3, [r7, #28]
 8014cd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014cd6:	7b5a      	ldrb	r2, [r3, #13]
 8014cd8:	69fb      	ldr	r3, [r7, #28]
 8014cda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014cdc:	f042 0220 	orr.w	r2, r2, #32
 8014ce0:	b2d2      	uxtb	r2, r2
 8014ce2:	735a      	strb	r2, [r3, #13]
 8014ce4:	e022      	b.n	8014d2c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014ce6:	69fb      	ldr	r3, [r7, #28]
 8014ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014cea:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014cee:	d005      	beq.n	8014cfc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8014cf0:	69fb      	ldr	r3, [r7, #28]
 8014cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014cf4:	3301      	adds	r3, #1
 8014cf6:	b29a      	uxth	r2, r3
 8014cf8:	69fb      	ldr	r3, [r7, #28]
 8014cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014cfc:	69fb      	ldr	r3, [r7, #28]
 8014cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d00b      	beq.n	8014d1e <tcp_input+0x6e2>
 8014d06:	69fb      	ldr	r3, [r7, #28]
 8014d08:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014d0c:	69fb      	ldr	r3, [r7, #28]
 8014d0e:	6918      	ldr	r0, [r3, #16]
 8014d10:	2300      	movs	r3, #0
 8014d12:	2200      	movs	r2, #0
 8014d14:	69f9      	ldr	r1, [r7, #28]
 8014d16:	47a0      	blx	r4
 8014d18:	4603      	mov	r3, r0
 8014d1a:	74fb      	strb	r3, [r7, #19]
 8014d1c:	e001      	b.n	8014d22 <tcp_input+0x6e6>
 8014d1e:	2300      	movs	r3, #0
 8014d20:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014d22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014d26:	f113 0f0d 	cmn.w	r3, #13
 8014d2a:	d016      	beq.n	8014d5a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014d2c:	4b13      	ldr	r3, [pc, #76]	@ (8014d7c <tcp_input+0x740>)
 8014d2e:	2200      	movs	r2, #0
 8014d30:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8014d32:	69f8      	ldr	r0, [r7, #28]
 8014d34:	f000 f88e 	bl	8014e54 <tcp_input_delayed_close>
 8014d38:	4603      	mov	r3, r0
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d128      	bne.n	8014d90 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014d3e:	69f8      	ldr	r0, [r7, #28]
 8014d40:	f002 fac2 	bl	80172c8 <tcp_output>
 8014d44:	e025      	b.n	8014d92 <tcp_input+0x756>
        goto aborted;
 8014d46:	bf00      	nop
 8014d48:	e023      	b.n	8014d92 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8014d4a:	bf00      	nop
 8014d4c:	e021      	b.n	8014d92 <tcp_input+0x756>
              goto aborted;
 8014d4e:	bf00      	nop
 8014d50:	e01f      	b.n	8014d92 <tcp_input+0x756>
          goto aborted;
 8014d52:	bf00      	nop
 8014d54:	e01d      	b.n	8014d92 <tcp_input+0x756>
            goto aborted;
 8014d56:	bf00      	nop
 8014d58:	e01b      	b.n	8014d92 <tcp_input+0x756>
              goto aborted;
 8014d5a:	bf00      	nop
 8014d5c:	e019      	b.n	8014d92 <tcp_input+0x756>
 8014d5e:	bf00      	nop
 8014d60:	240081a4 	.word	0x240081a4
 8014d64:	240081b4 	.word	0x240081b4
 8014d68:	240081d4 	.word	0x240081d4
 8014d6c:	240081d1 	.word	0x240081d1
 8014d70:	240081cc 	.word	0x240081cc
 8014d74:	240081d0 	.word	0x240081d0
 8014d78:	240081ce 	.word	0x240081ce
 8014d7c:	240081d8 	.word	0x240081d8
 8014d80:	24008198 	.word	0x24008198
 8014d84:	0801daf0 	.word	0x0801daf0
 8014d88:	0801dca4 	.word	0x0801dca4
 8014d8c:	0801db3c 	.word	0x0801db3c
          goto aborted;
 8014d90:	bf00      	nop
    tcp_input_pcb = NULL;
 8014d92:	4b27      	ldr	r3, [pc, #156]	@ (8014e30 <tcp_input+0x7f4>)
 8014d94:	2200      	movs	r2, #0
 8014d96:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014d98:	4b26      	ldr	r3, [pc, #152]	@ (8014e34 <tcp_input+0x7f8>)
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8014d9e:	4b26      	ldr	r3, [pc, #152]	@ (8014e38 <tcp_input+0x7fc>)
 8014da0:	685b      	ldr	r3, [r3, #4]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d03f      	beq.n	8014e26 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8014da6:	4b24      	ldr	r3, [pc, #144]	@ (8014e38 <tcp_input+0x7fc>)
 8014da8:	685b      	ldr	r3, [r3, #4]
 8014daa:	4618      	mov	r0, r3
 8014dac:	f7fd fe10 	bl	80129d0 <pbuf_free>
      inseg.p = NULL;
 8014db0:	4b21      	ldr	r3, [pc, #132]	@ (8014e38 <tcp_input+0x7fc>)
 8014db2:	2200      	movs	r2, #0
 8014db4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014db6:	e036      	b.n	8014e26 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014db8:	4b20      	ldr	r3, [pc, #128]	@ (8014e3c <tcp_input+0x800>)
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	899b      	ldrh	r3, [r3, #12]
 8014dbe:	b29b      	uxth	r3, r3
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f7fc f94b 	bl	801105c <lwip_htons>
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	b2db      	uxtb	r3, r3
 8014dca:	f003 0304 	and.w	r3, r3, #4
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d118      	bne.n	8014e04 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8014e40 <tcp_input+0x804>)
 8014dd4:	6819      	ldr	r1, [r3, #0]
 8014dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8014e44 <tcp_input+0x808>)
 8014dd8:	881b      	ldrh	r3, [r3, #0]
 8014dda:	461a      	mov	r2, r3
 8014ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8014e48 <tcp_input+0x80c>)
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014de2:	4b16      	ldr	r3, [pc, #88]	@ (8014e3c <tcp_input+0x800>)
 8014de4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014de6:	885b      	ldrh	r3, [r3, #2]
 8014de8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014dea:	4a14      	ldr	r2, [pc, #80]	@ (8014e3c <tcp_input+0x800>)
 8014dec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014dee:	8812      	ldrh	r2, [r2, #0]
 8014df0:	b292      	uxth	r2, r2
 8014df2:	9202      	str	r2, [sp, #8]
 8014df4:	9301      	str	r3, [sp, #4]
 8014df6:	4b15      	ldr	r3, [pc, #84]	@ (8014e4c <tcp_input+0x810>)
 8014df8:	9300      	str	r3, [sp, #0]
 8014dfa:	4b15      	ldr	r3, [pc, #84]	@ (8014e50 <tcp_input+0x814>)
 8014dfc:	4602      	mov	r2, r0
 8014dfe:	2000      	movs	r0, #0
 8014e00:	f003 f816 	bl	8017e30 <tcp_rst>
    pbuf_free(p);
 8014e04:	6878      	ldr	r0, [r7, #4]
 8014e06:	f7fd fde3 	bl	80129d0 <pbuf_free>
  return;
 8014e0a:	e00c      	b.n	8014e26 <tcp_input+0x7ea>
    goto dropped;
 8014e0c:	bf00      	nop
 8014e0e:	e006      	b.n	8014e1e <tcp_input+0x7e2>
    goto dropped;
 8014e10:	bf00      	nop
 8014e12:	e004      	b.n	8014e1e <tcp_input+0x7e2>
    goto dropped;
 8014e14:	bf00      	nop
 8014e16:	e002      	b.n	8014e1e <tcp_input+0x7e2>
      goto dropped;
 8014e18:	bf00      	nop
 8014e1a:	e000      	b.n	8014e1e <tcp_input+0x7e2>
      goto dropped;
 8014e1c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014e1e:	6878      	ldr	r0, [r7, #4]
 8014e20:	f7fd fdd6 	bl	80129d0 <pbuf_free>
 8014e24:	e000      	b.n	8014e28 <tcp_input+0x7ec>
  return;
 8014e26:	bf00      	nop
}
 8014e28:	3724      	adds	r7, #36	@ 0x24
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd90      	pop	{r4, r7, pc}
 8014e2e:	bf00      	nop
 8014e30:	240081d8 	.word	0x240081d8
 8014e34:	240081d4 	.word	0x240081d4
 8014e38:	240081a4 	.word	0x240081a4
 8014e3c:	240081b4 	.word	0x240081b4
 8014e40:	240081c8 	.word	0x240081c8
 8014e44:	240081ce 	.word	0x240081ce
 8014e48:	240081c4 	.word	0x240081c4
 8014e4c:	2400509c 	.word	0x2400509c
 8014e50:	240050a0 	.word	0x240050a0

08014e54 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b082      	sub	sp, #8
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d106      	bne.n	8014e70 <tcp_input_delayed_close+0x1c>
 8014e62:	4b17      	ldr	r3, [pc, #92]	@ (8014ec0 <tcp_input_delayed_close+0x6c>)
 8014e64:	f240 225a 	movw	r2, #602	@ 0x25a
 8014e68:	4916      	ldr	r1, [pc, #88]	@ (8014ec4 <tcp_input_delayed_close+0x70>)
 8014e6a:	4817      	ldr	r0, [pc, #92]	@ (8014ec8 <tcp_input_delayed_close+0x74>)
 8014e6c:	f006 faf2 	bl	801b454 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014e70:	4b16      	ldr	r3, [pc, #88]	@ (8014ecc <tcp_input_delayed_close+0x78>)
 8014e72:	781b      	ldrb	r3, [r3, #0]
 8014e74:	f003 0310 	and.w	r3, r3, #16
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d01c      	beq.n	8014eb6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	8b5b      	ldrh	r3, [r3, #26]
 8014e80:	f003 0310 	and.w	r3, r3, #16
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d10d      	bne.n	8014ea4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d008      	beq.n	8014ea4 <tcp_input_delayed_close+0x50>
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014e98:	687a      	ldr	r2, [r7, #4]
 8014e9a:	6912      	ldr	r2, [r2, #16]
 8014e9c:	f06f 010e 	mvn.w	r1, #14
 8014ea0:	4610      	mov	r0, r2
 8014ea2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014ea4:	6879      	ldr	r1, [r7, #4]
 8014ea6:	480a      	ldr	r0, [pc, #40]	@ (8014ed0 <tcp_input_delayed_close+0x7c>)
 8014ea8:	f7ff fa50 	bl	801434c <tcp_pcb_remove>
    tcp_free(pcb);
 8014eac:	6878      	ldr	r0, [r7, #4]
 8014eae:	f7fe f83b 	bl	8012f28 <tcp_free>
    return 1;
 8014eb2:	2301      	movs	r3, #1
 8014eb4:	e000      	b.n	8014eb8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8014eb6:	2300      	movs	r3, #0
}
 8014eb8:	4618      	mov	r0, r3
 8014eba:	3708      	adds	r7, #8
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	bd80      	pop	{r7, pc}
 8014ec0:	0801daf0 	.word	0x0801daf0
 8014ec4:	0801dcc0 	.word	0x0801dcc0
 8014ec8:	0801db3c 	.word	0x0801db3c
 8014ecc:	240081d1 	.word	0x240081d1
 8014ed0:	24008198 	.word	0x24008198

08014ed4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014ed4:	b590      	push	{r4, r7, lr}
 8014ed6:	b08b      	sub	sp, #44	@ 0x2c
 8014ed8:	af04      	add	r7, sp, #16
 8014eda:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014edc:	4b6f      	ldr	r3, [pc, #444]	@ (801509c <tcp_listen_input+0x1c8>)
 8014ede:	781b      	ldrb	r3, [r3, #0]
 8014ee0:	f003 0304 	and.w	r3, r3, #4
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	f040 80d2 	bne.w	801508e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d106      	bne.n	8014efe <tcp_listen_input+0x2a>
 8014ef0:	4b6b      	ldr	r3, [pc, #428]	@ (80150a0 <tcp_listen_input+0x1cc>)
 8014ef2:	f240 2281 	movw	r2, #641	@ 0x281
 8014ef6:	496b      	ldr	r1, [pc, #428]	@ (80150a4 <tcp_listen_input+0x1d0>)
 8014ef8:	486b      	ldr	r0, [pc, #428]	@ (80150a8 <tcp_listen_input+0x1d4>)
 8014efa:	f006 faab 	bl	801b454 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014efe:	4b67      	ldr	r3, [pc, #412]	@ (801509c <tcp_listen_input+0x1c8>)
 8014f00:	781b      	ldrb	r3, [r3, #0]
 8014f02:	f003 0310 	and.w	r3, r3, #16
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d019      	beq.n	8014f3e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f0a:	4b68      	ldr	r3, [pc, #416]	@ (80150ac <tcp_listen_input+0x1d8>)
 8014f0c:	6819      	ldr	r1, [r3, #0]
 8014f0e:	4b68      	ldr	r3, [pc, #416]	@ (80150b0 <tcp_listen_input+0x1dc>)
 8014f10:	881b      	ldrh	r3, [r3, #0]
 8014f12:	461a      	mov	r2, r3
 8014f14:	4b67      	ldr	r3, [pc, #412]	@ (80150b4 <tcp_listen_input+0x1e0>)
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f1a:	4b67      	ldr	r3, [pc, #412]	@ (80150b8 <tcp_listen_input+0x1e4>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f1e:	885b      	ldrh	r3, [r3, #2]
 8014f20:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f22:	4a65      	ldr	r2, [pc, #404]	@ (80150b8 <tcp_listen_input+0x1e4>)
 8014f24:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f26:	8812      	ldrh	r2, [r2, #0]
 8014f28:	b292      	uxth	r2, r2
 8014f2a:	9202      	str	r2, [sp, #8]
 8014f2c:	9301      	str	r3, [sp, #4]
 8014f2e:	4b63      	ldr	r3, [pc, #396]	@ (80150bc <tcp_listen_input+0x1e8>)
 8014f30:	9300      	str	r3, [sp, #0]
 8014f32:	4b63      	ldr	r3, [pc, #396]	@ (80150c0 <tcp_listen_input+0x1ec>)
 8014f34:	4602      	mov	r2, r0
 8014f36:	6878      	ldr	r0, [r7, #4]
 8014f38:	f002 ff7a 	bl	8017e30 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014f3c:	e0a9      	b.n	8015092 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014f3e:	4b57      	ldr	r3, [pc, #348]	@ (801509c <tcp_listen_input+0x1c8>)
 8014f40:	781b      	ldrb	r3, [r3, #0]
 8014f42:	f003 0302 	and.w	r3, r3, #2
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	f000 80a3 	beq.w	8015092 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	7d5b      	ldrb	r3, [r3, #21]
 8014f50:	4618      	mov	r0, r3
 8014f52:	f7ff f927 	bl	80141a4 <tcp_alloc>
 8014f56:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014f58:	697b      	ldr	r3, [r7, #20]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d111      	bne.n	8014f82 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	699b      	ldr	r3, [r3, #24]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d00a      	beq.n	8014f7c <tcp_listen_input+0xa8>
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	699b      	ldr	r3, [r3, #24]
 8014f6a:	687a      	ldr	r2, [r7, #4]
 8014f6c:	6910      	ldr	r0, [r2, #16]
 8014f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8014f72:	2100      	movs	r1, #0
 8014f74:	4798      	blx	r3
 8014f76:	4603      	mov	r3, r0
 8014f78:	73bb      	strb	r3, [r7, #14]
      return;
 8014f7a:	e08b      	b.n	8015094 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014f7c:	23f0      	movs	r3, #240	@ 0xf0
 8014f7e:	73bb      	strb	r3, [r7, #14]
      return;
 8014f80:	e088      	b.n	8015094 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014f82:	4b50      	ldr	r3, [pc, #320]	@ (80150c4 <tcp_listen_input+0x1f0>)
 8014f84:	695a      	ldr	r2, [r3, #20]
 8014f86:	697b      	ldr	r3, [r7, #20]
 8014f88:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014f8a:	4b4e      	ldr	r3, [pc, #312]	@ (80150c4 <tcp_listen_input+0x1f0>)
 8014f8c:	691a      	ldr	r2, [r3, #16]
 8014f8e:	697b      	ldr	r3, [r7, #20]
 8014f90:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	8ada      	ldrh	r2, [r3, #22]
 8014f96:	697b      	ldr	r3, [r7, #20]
 8014f98:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014f9a:	4b47      	ldr	r3, [pc, #284]	@ (80150b8 <tcp_listen_input+0x1e4>)
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	881b      	ldrh	r3, [r3, #0]
 8014fa0:	b29a      	uxth	r2, r3
 8014fa2:	697b      	ldr	r3, [r7, #20]
 8014fa4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014fa6:	697b      	ldr	r3, [r7, #20]
 8014fa8:	2203      	movs	r2, #3
 8014faa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014fac:	4b41      	ldr	r3, [pc, #260]	@ (80150b4 <tcp_listen_input+0x1e0>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	1c5a      	adds	r2, r3, #1
 8014fb2:	697b      	ldr	r3, [r7, #20]
 8014fb4:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014fb6:	697b      	ldr	r3, [r7, #20]
 8014fb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014fba:	697b      	ldr	r3, [r7, #20]
 8014fbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8014fbe:	6978      	ldr	r0, [r7, #20]
 8014fc0:	f7ff fa58 	bl	8014474 <tcp_next_iss>
 8014fc4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014fc6:	697b      	ldr	r3, [r7, #20]
 8014fc8:	693a      	ldr	r2, [r7, #16]
 8014fca:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8014fcc:	697b      	ldr	r3, [r7, #20]
 8014fce:	693a      	ldr	r2, [r7, #16]
 8014fd0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8014fd2:	697b      	ldr	r3, [r7, #20]
 8014fd4:	693a      	ldr	r2, [r7, #16]
 8014fd6:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8014fd8:	697b      	ldr	r3, [r7, #20]
 8014fda:	693a      	ldr	r2, [r7, #16]
 8014fdc:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014fde:	4b35      	ldr	r3, [pc, #212]	@ (80150b4 <tcp_listen_input+0x1e0>)
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	1e5a      	subs	r2, r3, #1
 8014fe4:	697b      	ldr	r3, [r7, #20]
 8014fe6:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	691a      	ldr	r2, [r3, #16]
 8014fec:	697b      	ldr	r3, [r7, #20]
 8014fee:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014ff0:	697b      	ldr	r3, [r7, #20]
 8014ff2:	687a      	ldr	r2, [r7, #4]
 8014ff4:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	7a5b      	ldrb	r3, [r3, #9]
 8014ffa:	f003 030c 	and.w	r3, r3, #12
 8014ffe:	b2da      	uxtb	r2, r3
 8015000:	697b      	ldr	r3, [r7, #20]
 8015002:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	7a1a      	ldrb	r2, [r3, #8]
 8015008:	697b      	ldr	r3, [r7, #20]
 801500a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801500c:	4b2e      	ldr	r3, [pc, #184]	@ (80150c8 <tcp_listen_input+0x1f4>)
 801500e:	681a      	ldr	r2, [r3, #0]
 8015010:	697b      	ldr	r3, [r7, #20]
 8015012:	60da      	str	r2, [r3, #12]
 8015014:	4a2c      	ldr	r2, [pc, #176]	@ (80150c8 <tcp_listen_input+0x1f4>)
 8015016:	697b      	ldr	r3, [r7, #20]
 8015018:	6013      	str	r3, [r2, #0]
 801501a:	f003 f8cb 	bl	80181b4 <tcp_timer_needed>
 801501e:	4b2b      	ldr	r3, [pc, #172]	@ (80150cc <tcp_listen_input+0x1f8>)
 8015020:	2201      	movs	r2, #1
 8015022:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015024:	6978      	ldr	r0, [r7, #20]
 8015026:	f001 fd8b 	bl	8016b40 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801502a:	4b23      	ldr	r3, [pc, #140]	@ (80150b8 <tcp_listen_input+0x1e4>)
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	89db      	ldrh	r3, [r3, #14]
 8015030:	b29a      	uxth	r2, r3
 8015032:	697b      	ldr	r3, [r7, #20]
 8015034:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8015038:	697b      	ldr	r3, [r7, #20]
 801503a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801503e:	697b      	ldr	r3, [r7, #20]
 8015040:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015044:	697b      	ldr	r3, [r7, #20]
 8015046:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8015048:	697b      	ldr	r3, [r7, #20]
 801504a:	3304      	adds	r3, #4
 801504c:	4618      	mov	r0, r3
 801504e:	f004 fce5 	bl	8019a1c <ip4_route>
 8015052:	4601      	mov	r1, r0
 8015054:	697b      	ldr	r3, [r7, #20]
 8015056:	3304      	adds	r3, #4
 8015058:	461a      	mov	r2, r3
 801505a:	4620      	mov	r0, r4
 801505c:	f7ff fa30 	bl	80144c0 <tcp_eff_send_mss_netif>
 8015060:	4603      	mov	r3, r0
 8015062:	461a      	mov	r2, r3
 8015064:	697b      	ldr	r3, [r7, #20]
 8015066:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015068:	2112      	movs	r1, #18
 801506a:	6978      	ldr	r0, [r7, #20]
 801506c:	f002 f83e 	bl	80170ec <tcp_enqueue_flags>
 8015070:	4603      	mov	r3, r0
 8015072:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d004      	beq.n	8015086 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801507c:	2100      	movs	r1, #0
 801507e:	6978      	ldr	r0, [r7, #20]
 8015080:	f7fe f97c 	bl	801337c <tcp_abandon>
      return;
 8015084:	e006      	b.n	8015094 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8015086:	6978      	ldr	r0, [r7, #20]
 8015088:	f002 f91e 	bl	80172c8 <tcp_output>
  return;
 801508c:	e001      	b.n	8015092 <tcp_listen_input+0x1be>
    return;
 801508e:	bf00      	nop
 8015090:	e000      	b.n	8015094 <tcp_listen_input+0x1c0>
  return;
 8015092:	bf00      	nop
}
 8015094:	371c      	adds	r7, #28
 8015096:	46bd      	mov	sp, r7
 8015098:	bd90      	pop	{r4, r7, pc}
 801509a:	bf00      	nop
 801509c:	240081d0 	.word	0x240081d0
 80150a0:	0801daf0 	.word	0x0801daf0
 80150a4:	0801dce8 	.word	0x0801dce8
 80150a8:	0801db3c 	.word	0x0801db3c
 80150ac:	240081c8 	.word	0x240081c8
 80150b0:	240081ce 	.word	0x240081ce
 80150b4:	240081c4 	.word	0x240081c4
 80150b8:	240081b4 	.word	0x240081b4
 80150bc:	2400509c 	.word	0x2400509c
 80150c0:	240050a0 	.word	0x240050a0
 80150c4:	2400508c 	.word	0x2400508c
 80150c8:	24008198 	.word	0x24008198
 80150cc:	240081a0 	.word	0x240081a0

080150d0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b086      	sub	sp, #24
 80150d4:	af04      	add	r7, sp, #16
 80150d6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80150d8:	4b2f      	ldr	r3, [pc, #188]	@ (8015198 <tcp_timewait_input+0xc8>)
 80150da:	781b      	ldrb	r3, [r3, #0]
 80150dc:	f003 0304 	and.w	r3, r3, #4
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d153      	bne.n	801518c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d106      	bne.n	80150f8 <tcp_timewait_input+0x28>
 80150ea:	4b2c      	ldr	r3, [pc, #176]	@ (801519c <tcp_timewait_input+0xcc>)
 80150ec:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80150f0:	492b      	ldr	r1, [pc, #172]	@ (80151a0 <tcp_timewait_input+0xd0>)
 80150f2:	482c      	ldr	r0, [pc, #176]	@ (80151a4 <tcp_timewait_input+0xd4>)
 80150f4:	f006 f9ae 	bl	801b454 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80150f8:	4b27      	ldr	r3, [pc, #156]	@ (8015198 <tcp_timewait_input+0xc8>)
 80150fa:	781b      	ldrb	r3, [r3, #0]
 80150fc:	f003 0302 	and.w	r3, r3, #2
 8015100:	2b00      	cmp	r3, #0
 8015102:	d02a      	beq.n	801515a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015104:	4b28      	ldr	r3, [pc, #160]	@ (80151a8 <tcp_timewait_input+0xd8>)
 8015106:	681a      	ldr	r2, [r3, #0]
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801510c:	1ad3      	subs	r3, r2, r3
 801510e:	2b00      	cmp	r3, #0
 8015110:	db2d      	blt.n	801516e <tcp_timewait_input+0x9e>
 8015112:	4b25      	ldr	r3, [pc, #148]	@ (80151a8 <tcp_timewait_input+0xd8>)
 8015114:	681a      	ldr	r2, [r3, #0]
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801511a:	6879      	ldr	r1, [r7, #4]
 801511c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801511e:	440b      	add	r3, r1
 8015120:	1ad3      	subs	r3, r2, r3
 8015122:	2b00      	cmp	r3, #0
 8015124:	dc23      	bgt.n	801516e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015126:	4b21      	ldr	r3, [pc, #132]	@ (80151ac <tcp_timewait_input+0xdc>)
 8015128:	6819      	ldr	r1, [r3, #0]
 801512a:	4b21      	ldr	r3, [pc, #132]	@ (80151b0 <tcp_timewait_input+0xe0>)
 801512c:	881b      	ldrh	r3, [r3, #0]
 801512e:	461a      	mov	r2, r3
 8015130:	4b1d      	ldr	r3, [pc, #116]	@ (80151a8 <tcp_timewait_input+0xd8>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015136:	4b1f      	ldr	r3, [pc, #124]	@ (80151b4 <tcp_timewait_input+0xe4>)
 8015138:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801513a:	885b      	ldrh	r3, [r3, #2]
 801513c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801513e:	4a1d      	ldr	r2, [pc, #116]	@ (80151b4 <tcp_timewait_input+0xe4>)
 8015140:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015142:	8812      	ldrh	r2, [r2, #0]
 8015144:	b292      	uxth	r2, r2
 8015146:	9202      	str	r2, [sp, #8]
 8015148:	9301      	str	r3, [sp, #4]
 801514a:	4b1b      	ldr	r3, [pc, #108]	@ (80151b8 <tcp_timewait_input+0xe8>)
 801514c:	9300      	str	r3, [sp, #0]
 801514e:	4b1b      	ldr	r3, [pc, #108]	@ (80151bc <tcp_timewait_input+0xec>)
 8015150:	4602      	mov	r2, r0
 8015152:	6878      	ldr	r0, [r7, #4]
 8015154:	f002 fe6c 	bl	8017e30 <tcp_rst>
      return;
 8015158:	e01b      	b.n	8015192 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801515a:	4b0f      	ldr	r3, [pc, #60]	@ (8015198 <tcp_timewait_input+0xc8>)
 801515c:	781b      	ldrb	r3, [r3, #0]
 801515e:	f003 0301 	and.w	r3, r3, #1
 8015162:	2b00      	cmp	r3, #0
 8015164:	d003      	beq.n	801516e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8015166:	4b16      	ldr	r3, [pc, #88]	@ (80151c0 <tcp_timewait_input+0xf0>)
 8015168:	681a      	ldr	r2, [r3, #0]
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801516e:	4b10      	ldr	r3, [pc, #64]	@ (80151b0 <tcp_timewait_input+0xe0>)
 8015170:	881b      	ldrh	r3, [r3, #0]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d00c      	beq.n	8015190 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	8b5b      	ldrh	r3, [r3, #26]
 801517a:	f043 0302 	orr.w	r3, r3, #2
 801517e:	b29a      	uxth	r2, r3
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f002 f89f 	bl	80172c8 <tcp_output>
  }
  return;
 801518a:	e001      	b.n	8015190 <tcp_timewait_input+0xc0>
    return;
 801518c:	bf00      	nop
 801518e:	e000      	b.n	8015192 <tcp_timewait_input+0xc2>
  return;
 8015190:	bf00      	nop
}
 8015192:	3708      	adds	r7, #8
 8015194:	46bd      	mov	sp, r7
 8015196:	bd80      	pop	{r7, pc}
 8015198:	240081d0 	.word	0x240081d0
 801519c:	0801daf0 	.word	0x0801daf0
 80151a0:	0801dd08 	.word	0x0801dd08
 80151a4:	0801db3c 	.word	0x0801db3c
 80151a8:	240081c4 	.word	0x240081c4
 80151ac:	240081c8 	.word	0x240081c8
 80151b0:	240081ce 	.word	0x240081ce
 80151b4:	240081b4 	.word	0x240081b4
 80151b8:	2400509c 	.word	0x2400509c
 80151bc:	240050a0 	.word	0x240050a0
 80151c0:	2400818c 	.word	0x2400818c

080151c4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80151c4:	b590      	push	{r4, r7, lr}
 80151c6:	b08d      	sub	sp, #52	@ 0x34
 80151c8:	af04      	add	r7, sp, #16
 80151ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80151cc:	2300      	movs	r3, #0
 80151ce:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80151d0:	2300      	movs	r3, #0
 80151d2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d106      	bne.n	80151e8 <tcp_process+0x24>
 80151da:	4b9d      	ldr	r3, [pc, #628]	@ (8015450 <tcp_process+0x28c>)
 80151dc:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80151e0:	499c      	ldr	r1, [pc, #624]	@ (8015454 <tcp_process+0x290>)
 80151e2:	489d      	ldr	r0, [pc, #628]	@ (8015458 <tcp_process+0x294>)
 80151e4:	f006 f936 	bl	801b454 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80151e8:	4b9c      	ldr	r3, [pc, #624]	@ (801545c <tcp_process+0x298>)
 80151ea:	781b      	ldrb	r3, [r3, #0]
 80151ec:	f003 0304 	and.w	r3, r3, #4
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d04e      	beq.n	8015292 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	7d1b      	ldrb	r3, [r3, #20]
 80151f8:	2b02      	cmp	r3, #2
 80151fa:	d108      	bne.n	801520e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015200:	4b97      	ldr	r3, [pc, #604]	@ (8015460 <tcp_process+0x29c>)
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	429a      	cmp	r2, r3
 8015206:	d123      	bne.n	8015250 <tcp_process+0x8c>
        acceptable = 1;
 8015208:	2301      	movs	r3, #1
 801520a:	76fb      	strb	r3, [r7, #27]
 801520c:	e020      	b.n	8015250 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015212:	4b94      	ldr	r3, [pc, #592]	@ (8015464 <tcp_process+0x2a0>)
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	429a      	cmp	r2, r3
 8015218:	d102      	bne.n	8015220 <tcp_process+0x5c>
        acceptable = 1;
 801521a:	2301      	movs	r3, #1
 801521c:	76fb      	strb	r3, [r7, #27]
 801521e:	e017      	b.n	8015250 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015220:	4b90      	ldr	r3, [pc, #576]	@ (8015464 <tcp_process+0x2a0>)
 8015222:	681a      	ldr	r2, [r3, #0]
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015228:	1ad3      	subs	r3, r2, r3
 801522a:	2b00      	cmp	r3, #0
 801522c:	db10      	blt.n	8015250 <tcp_process+0x8c>
 801522e:	4b8d      	ldr	r3, [pc, #564]	@ (8015464 <tcp_process+0x2a0>)
 8015230:	681a      	ldr	r2, [r3, #0]
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015236:	6879      	ldr	r1, [r7, #4]
 8015238:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801523a:	440b      	add	r3, r1
 801523c:	1ad3      	subs	r3, r2, r3
 801523e:	2b00      	cmp	r3, #0
 8015240:	dc06      	bgt.n	8015250 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	8b5b      	ldrh	r3, [r3, #26]
 8015246:	f043 0302 	orr.w	r3, r3, #2
 801524a:	b29a      	uxth	r2, r3
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015250:	7efb      	ldrb	r3, [r7, #27]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d01b      	beq.n	801528e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	7d1b      	ldrb	r3, [r3, #20]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d106      	bne.n	801526c <tcp_process+0xa8>
 801525e:	4b7c      	ldr	r3, [pc, #496]	@ (8015450 <tcp_process+0x28c>)
 8015260:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8015264:	4980      	ldr	r1, [pc, #512]	@ (8015468 <tcp_process+0x2a4>)
 8015266:	487c      	ldr	r0, [pc, #496]	@ (8015458 <tcp_process+0x294>)
 8015268:	f006 f8f4 	bl	801b454 <iprintf>
      recv_flags |= TF_RESET;
 801526c:	4b7f      	ldr	r3, [pc, #508]	@ (801546c <tcp_process+0x2a8>)
 801526e:	781b      	ldrb	r3, [r3, #0]
 8015270:	f043 0308 	orr.w	r3, r3, #8
 8015274:	b2da      	uxtb	r2, r3
 8015276:	4b7d      	ldr	r3, [pc, #500]	@ (801546c <tcp_process+0x2a8>)
 8015278:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	8b5b      	ldrh	r3, [r3, #26]
 801527e:	f023 0301 	bic.w	r3, r3, #1
 8015282:	b29a      	uxth	r2, r3
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015288:	f06f 030d 	mvn.w	r3, #13
 801528c:	e37a      	b.n	8015984 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801528e:	2300      	movs	r3, #0
 8015290:	e378      	b.n	8015984 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015292:	4b72      	ldr	r3, [pc, #456]	@ (801545c <tcp_process+0x298>)
 8015294:	781b      	ldrb	r3, [r3, #0]
 8015296:	f003 0302 	and.w	r3, r3, #2
 801529a:	2b00      	cmp	r3, #0
 801529c:	d010      	beq.n	80152c0 <tcp_process+0xfc>
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	7d1b      	ldrb	r3, [r3, #20]
 80152a2:	2b02      	cmp	r3, #2
 80152a4:	d00c      	beq.n	80152c0 <tcp_process+0xfc>
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	7d1b      	ldrb	r3, [r3, #20]
 80152aa:	2b03      	cmp	r3, #3
 80152ac:	d008      	beq.n	80152c0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	8b5b      	ldrh	r3, [r3, #26]
 80152b2:	f043 0302 	orr.w	r3, r3, #2
 80152b6:	b29a      	uxth	r2, r3
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80152bc:	2300      	movs	r3, #0
 80152be:	e361      	b.n	8015984 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	8b5b      	ldrh	r3, [r3, #26]
 80152c4:	f003 0310 	and.w	r3, r3, #16
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d103      	bne.n	80152d4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80152cc:	4b68      	ldr	r3, [pc, #416]	@ (8015470 <tcp_process+0x2ac>)
 80152ce:	681a      	ldr	r2, [r3, #0]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	2200      	movs	r2, #0
 80152d8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	2200      	movs	r2, #0
 80152e0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80152e4:	6878      	ldr	r0, [r7, #4]
 80152e6:	f001 fc2b 	bl	8016b40 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	7d1b      	ldrb	r3, [r3, #20]
 80152ee:	3b02      	subs	r3, #2
 80152f0:	2b07      	cmp	r3, #7
 80152f2:	f200 8337 	bhi.w	8015964 <tcp_process+0x7a0>
 80152f6:	a201      	add	r2, pc, #4	@ (adr r2, 80152fc <tcp_process+0x138>)
 80152f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152fc:	0801531d 	.word	0x0801531d
 8015300:	0801554d 	.word	0x0801554d
 8015304:	080156c5 	.word	0x080156c5
 8015308:	080156ef 	.word	0x080156ef
 801530c:	08015813 	.word	0x08015813
 8015310:	080156c5 	.word	0x080156c5
 8015314:	0801589f 	.word	0x0801589f
 8015318:	0801592f 	.word	0x0801592f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801531c:	4b4f      	ldr	r3, [pc, #316]	@ (801545c <tcp_process+0x298>)
 801531e:	781b      	ldrb	r3, [r3, #0]
 8015320:	f003 0310 	and.w	r3, r3, #16
 8015324:	2b00      	cmp	r3, #0
 8015326:	f000 80e4 	beq.w	80154f2 <tcp_process+0x32e>
 801532a:	4b4c      	ldr	r3, [pc, #304]	@ (801545c <tcp_process+0x298>)
 801532c:	781b      	ldrb	r3, [r3, #0]
 801532e:	f003 0302 	and.w	r3, r3, #2
 8015332:	2b00      	cmp	r3, #0
 8015334:	f000 80dd 	beq.w	80154f2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801533c:	1c5a      	adds	r2, r3, #1
 801533e:	4b48      	ldr	r3, [pc, #288]	@ (8015460 <tcp_process+0x29c>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	429a      	cmp	r2, r3
 8015344:	f040 80d5 	bne.w	80154f2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015348:	4b46      	ldr	r3, [pc, #280]	@ (8015464 <tcp_process+0x2a0>)
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	1c5a      	adds	r2, r3, #1
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801535a:	4b41      	ldr	r3, [pc, #260]	@ (8015460 <tcp_process+0x29c>)
 801535c:	681a      	ldr	r2, [r3, #0]
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015362:	4b44      	ldr	r3, [pc, #272]	@ (8015474 <tcp_process+0x2b0>)
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	89db      	ldrh	r3, [r3, #14]
 8015368:	b29a      	uxth	r2, r3
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801537c:	4b39      	ldr	r3, [pc, #228]	@ (8015464 <tcp_process+0x2a0>)
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	1e5a      	subs	r2, r3, #1
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	2204      	movs	r2, #4
 801538a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	3304      	adds	r3, #4
 8015394:	4618      	mov	r0, r3
 8015396:	f004 fb41 	bl	8019a1c <ip4_route>
 801539a:	4601      	mov	r1, r0
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	3304      	adds	r3, #4
 80153a0:	461a      	mov	r2, r3
 80153a2:	4620      	mov	r0, r4
 80153a4:	f7ff f88c 	bl	80144c0 <tcp_eff_send_mss_netif>
 80153a8:	4603      	mov	r3, r0
 80153aa:	461a      	mov	r2, r3
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80153b4:	009a      	lsls	r2, r3, #2
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80153ba:	005b      	lsls	r3, r3, #1
 80153bc:	f241 111c 	movw	r1, #4380	@ 0x111c
 80153c0:	428b      	cmp	r3, r1
 80153c2:	bf38      	it	cc
 80153c4:	460b      	movcc	r3, r1
 80153c6:	429a      	cmp	r2, r3
 80153c8:	d204      	bcs.n	80153d4 <tcp_process+0x210>
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80153ce:	009b      	lsls	r3, r3, #2
 80153d0:	b29b      	uxth	r3, r3
 80153d2:	e00d      	b.n	80153f0 <tcp_process+0x22c>
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80153d8:	005b      	lsls	r3, r3, #1
 80153da:	f241 121c 	movw	r2, #4380	@ 0x111c
 80153de:	4293      	cmp	r3, r2
 80153e0:	d904      	bls.n	80153ec <tcp_process+0x228>
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80153e6:	005b      	lsls	r3, r3, #1
 80153e8:	b29b      	uxth	r3, r3
 80153ea:	e001      	b.n	80153f0 <tcp_process+0x22c>
 80153ec:	f241 131c 	movw	r3, #4380	@ 0x111c
 80153f0:	687a      	ldr	r2, [r7, #4]
 80153f2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d106      	bne.n	801540e <tcp_process+0x24a>
 8015400:	4b13      	ldr	r3, [pc, #76]	@ (8015450 <tcp_process+0x28c>)
 8015402:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8015406:	491c      	ldr	r1, [pc, #112]	@ (8015478 <tcp_process+0x2b4>)
 8015408:	4813      	ldr	r0, [pc, #76]	@ (8015458 <tcp_process+0x294>)
 801540a:	f006 f823 	bl	801b454 <iprintf>
        --pcb->snd_queuelen;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015414:	3b01      	subs	r3, #1
 8015416:	b29a      	uxth	r2, r3
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015422:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015424:	69fb      	ldr	r3, [r7, #28]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d12a      	bne.n	8015480 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801542e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015430:	69fb      	ldr	r3, [r7, #28]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d106      	bne.n	8015444 <tcp_process+0x280>
 8015436:	4b06      	ldr	r3, [pc, #24]	@ (8015450 <tcp_process+0x28c>)
 8015438:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801543c:	490f      	ldr	r1, [pc, #60]	@ (801547c <tcp_process+0x2b8>)
 801543e:	4806      	ldr	r0, [pc, #24]	@ (8015458 <tcp_process+0x294>)
 8015440:	f006 f808 	bl	801b454 <iprintf>
          pcb->unsent = rseg->next;
 8015444:	69fb      	ldr	r3, [r7, #28]
 8015446:	681a      	ldr	r2, [r3, #0]
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	66da      	str	r2, [r3, #108]	@ 0x6c
 801544c:	e01c      	b.n	8015488 <tcp_process+0x2c4>
 801544e:	bf00      	nop
 8015450:	0801daf0 	.word	0x0801daf0
 8015454:	0801dd28 	.word	0x0801dd28
 8015458:	0801db3c 	.word	0x0801db3c
 801545c:	240081d0 	.word	0x240081d0
 8015460:	240081c8 	.word	0x240081c8
 8015464:	240081c4 	.word	0x240081c4
 8015468:	0801dd44 	.word	0x0801dd44
 801546c:	240081d1 	.word	0x240081d1
 8015470:	2400818c 	.word	0x2400818c
 8015474:	240081b4 	.word	0x240081b4
 8015478:	0801dd64 	.word	0x0801dd64
 801547c:	0801dd7c 	.word	0x0801dd7c
        } else {
          pcb->unacked = rseg->next;
 8015480:	69fb      	ldr	r3, [r7, #28]
 8015482:	681a      	ldr	r2, [r3, #0]
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8015488:	69f8      	ldr	r0, [r7, #28]
 801548a:	f7fe fd22 	bl	8013ed2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015492:	2b00      	cmp	r3, #0
 8015494:	d104      	bne.n	80154a0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801549c:	861a      	strh	r2, [r3, #48]	@ 0x30
 801549e:	e006      	b.n	80154ae <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	2200      	movs	r2, #0
 80154a4:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	2200      	movs	r2, #0
 80154aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d00a      	beq.n	80154ce <tcp_process+0x30a>
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80154be:	687a      	ldr	r2, [r7, #4]
 80154c0:	6910      	ldr	r0, [r2, #16]
 80154c2:	2200      	movs	r2, #0
 80154c4:	6879      	ldr	r1, [r7, #4]
 80154c6:	4798      	blx	r3
 80154c8:	4603      	mov	r3, r0
 80154ca:	76bb      	strb	r3, [r7, #26]
 80154cc:	e001      	b.n	80154d2 <tcp_process+0x30e>
 80154ce:	2300      	movs	r3, #0
 80154d0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80154d2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80154d6:	f113 0f0d 	cmn.w	r3, #13
 80154da:	d102      	bne.n	80154e2 <tcp_process+0x31e>
          return ERR_ABRT;
 80154dc:	f06f 030c 	mvn.w	r3, #12
 80154e0:	e250      	b.n	8015984 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	8b5b      	ldrh	r3, [r3, #26]
 80154e6:	f043 0302 	orr.w	r3, r3, #2
 80154ea:	b29a      	uxth	r2, r3
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80154f0:	e23a      	b.n	8015968 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80154f2:	4b98      	ldr	r3, [pc, #608]	@ (8015754 <tcp_process+0x590>)
 80154f4:	781b      	ldrb	r3, [r3, #0]
 80154f6:	f003 0310 	and.w	r3, r3, #16
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	f000 8234 	beq.w	8015968 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015500:	4b95      	ldr	r3, [pc, #596]	@ (8015758 <tcp_process+0x594>)
 8015502:	6819      	ldr	r1, [r3, #0]
 8015504:	4b95      	ldr	r3, [pc, #596]	@ (801575c <tcp_process+0x598>)
 8015506:	881b      	ldrh	r3, [r3, #0]
 8015508:	461a      	mov	r2, r3
 801550a:	4b95      	ldr	r3, [pc, #596]	@ (8015760 <tcp_process+0x59c>)
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015510:	4b94      	ldr	r3, [pc, #592]	@ (8015764 <tcp_process+0x5a0>)
 8015512:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015514:	885b      	ldrh	r3, [r3, #2]
 8015516:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015518:	4a92      	ldr	r2, [pc, #584]	@ (8015764 <tcp_process+0x5a0>)
 801551a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801551c:	8812      	ldrh	r2, [r2, #0]
 801551e:	b292      	uxth	r2, r2
 8015520:	9202      	str	r2, [sp, #8]
 8015522:	9301      	str	r3, [sp, #4]
 8015524:	4b90      	ldr	r3, [pc, #576]	@ (8015768 <tcp_process+0x5a4>)
 8015526:	9300      	str	r3, [sp, #0]
 8015528:	4b90      	ldr	r3, [pc, #576]	@ (801576c <tcp_process+0x5a8>)
 801552a:	4602      	mov	r2, r0
 801552c:	6878      	ldr	r0, [r7, #4]
 801552e:	f002 fc7f 	bl	8017e30 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015538:	2b05      	cmp	r3, #5
 801553a:	f200 8215 	bhi.w	8015968 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	2200      	movs	r2, #0
 8015542:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8015544:	6878      	ldr	r0, [r7, #4]
 8015546:	f002 fa4b 	bl	80179e0 <tcp_rexmit_rto>
      break;
 801554a:	e20d      	b.n	8015968 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801554c:	4b81      	ldr	r3, [pc, #516]	@ (8015754 <tcp_process+0x590>)
 801554e:	781b      	ldrb	r3, [r3, #0]
 8015550:	f003 0310 	and.w	r3, r3, #16
 8015554:	2b00      	cmp	r3, #0
 8015556:	f000 80a1 	beq.w	801569c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801555a:	4b7f      	ldr	r3, [pc, #508]	@ (8015758 <tcp_process+0x594>)
 801555c:	681a      	ldr	r2, [r3, #0]
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015562:	1ad3      	subs	r3, r2, r3
 8015564:	3b01      	subs	r3, #1
 8015566:	2b00      	cmp	r3, #0
 8015568:	db7e      	blt.n	8015668 <tcp_process+0x4a4>
 801556a:	4b7b      	ldr	r3, [pc, #492]	@ (8015758 <tcp_process+0x594>)
 801556c:	681a      	ldr	r2, [r3, #0]
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015572:	1ad3      	subs	r3, r2, r3
 8015574:	2b00      	cmp	r3, #0
 8015576:	dc77      	bgt.n	8015668 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	2204      	movs	r2, #4
 801557c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015582:	2b00      	cmp	r3, #0
 8015584:	d102      	bne.n	801558c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015586:	23fa      	movs	r3, #250	@ 0xfa
 8015588:	76bb      	strb	r3, [r7, #26]
 801558a:	e01d      	b.n	80155c8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015590:	699b      	ldr	r3, [r3, #24]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d106      	bne.n	80155a4 <tcp_process+0x3e0>
 8015596:	4b76      	ldr	r3, [pc, #472]	@ (8015770 <tcp_process+0x5ac>)
 8015598:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801559c:	4975      	ldr	r1, [pc, #468]	@ (8015774 <tcp_process+0x5b0>)
 801559e:	4876      	ldr	r0, [pc, #472]	@ (8015778 <tcp_process+0x5b4>)
 80155a0:	f005 ff58 	bl	801b454 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80155a8:	699b      	ldr	r3, [r3, #24]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d00a      	beq.n	80155c4 <tcp_process+0x400>
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80155b2:	699b      	ldr	r3, [r3, #24]
 80155b4:	687a      	ldr	r2, [r7, #4]
 80155b6:	6910      	ldr	r0, [r2, #16]
 80155b8:	2200      	movs	r2, #0
 80155ba:	6879      	ldr	r1, [r7, #4]
 80155bc:	4798      	blx	r3
 80155be:	4603      	mov	r3, r0
 80155c0:	76bb      	strb	r3, [r7, #26]
 80155c2:	e001      	b.n	80155c8 <tcp_process+0x404>
 80155c4:	23f0      	movs	r3, #240	@ 0xf0
 80155c6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80155c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d00a      	beq.n	80155e6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80155d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80155d4:	f113 0f0d 	cmn.w	r3, #13
 80155d8:	d002      	beq.n	80155e0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80155da:	6878      	ldr	r0, [r7, #4]
 80155dc:	f7fd ff8c 	bl	80134f8 <tcp_abort>
            }
            return ERR_ABRT;
 80155e0:	f06f 030c 	mvn.w	r3, #12
 80155e4:	e1ce      	b.n	8015984 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80155e6:	6878      	ldr	r0, [r7, #4]
 80155e8:	f000 fae0 	bl	8015bac <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80155ec:	4b63      	ldr	r3, [pc, #396]	@ (801577c <tcp_process+0x5b8>)
 80155ee:	881b      	ldrh	r3, [r3, #0]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d005      	beq.n	8015600 <tcp_process+0x43c>
            recv_acked--;
 80155f4:	4b61      	ldr	r3, [pc, #388]	@ (801577c <tcp_process+0x5b8>)
 80155f6:	881b      	ldrh	r3, [r3, #0]
 80155f8:	3b01      	subs	r3, #1
 80155fa:	b29a      	uxth	r2, r3
 80155fc:	4b5f      	ldr	r3, [pc, #380]	@ (801577c <tcp_process+0x5b8>)
 80155fe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015604:	009a      	lsls	r2, r3, #2
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801560a:	005b      	lsls	r3, r3, #1
 801560c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8015610:	428b      	cmp	r3, r1
 8015612:	bf38      	it	cc
 8015614:	460b      	movcc	r3, r1
 8015616:	429a      	cmp	r2, r3
 8015618:	d204      	bcs.n	8015624 <tcp_process+0x460>
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801561e:	009b      	lsls	r3, r3, #2
 8015620:	b29b      	uxth	r3, r3
 8015622:	e00d      	b.n	8015640 <tcp_process+0x47c>
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015628:	005b      	lsls	r3, r3, #1
 801562a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801562e:	4293      	cmp	r3, r2
 8015630:	d904      	bls.n	801563c <tcp_process+0x478>
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015636:	005b      	lsls	r3, r3, #1
 8015638:	b29b      	uxth	r3, r3
 801563a:	e001      	b.n	8015640 <tcp_process+0x47c>
 801563c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8015640:	687a      	ldr	r2, [r7, #4]
 8015642:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8015646:	4b4e      	ldr	r3, [pc, #312]	@ (8015780 <tcp_process+0x5bc>)
 8015648:	781b      	ldrb	r3, [r3, #0]
 801564a:	f003 0320 	and.w	r3, r3, #32
 801564e:	2b00      	cmp	r3, #0
 8015650:	d037      	beq.n	80156c2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	8b5b      	ldrh	r3, [r3, #26]
 8015656:	f043 0302 	orr.w	r3, r3, #2
 801565a:	b29a      	uxth	r2, r3
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	2207      	movs	r2, #7
 8015664:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8015666:	e02c      	b.n	80156c2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015668:	4b3b      	ldr	r3, [pc, #236]	@ (8015758 <tcp_process+0x594>)
 801566a:	6819      	ldr	r1, [r3, #0]
 801566c:	4b3b      	ldr	r3, [pc, #236]	@ (801575c <tcp_process+0x598>)
 801566e:	881b      	ldrh	r3, [r3, #0]
 8015670:	461a      	mov	r2, r3
 8015672:	4b3b      	ldr	r3, [pc, #236]	@ (8015760 <tcp_process+0x59c>)
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015678:	4b3a      	ldr	r3, [pc, #232]	@ (8015764 <tcp_process+0x5a0>)
 801567a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801567c:	885b      	ldrh	r3, [r3, #2]
 801567e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015680:	4a38      	ldr	r2, [pc, #224]	@ (8015764 <tcp_process+0x5a0>)
 8015682:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015684:	8812      	ldrh	r2, [r2, #0]
 8015686:	b292      	uxth	r2, r2
 8015688:	9202      	str	r2, [sp, #8]
 801568a:	9301      	str	r3, [sp, #4]
 801568c:	4b36      	ldr	r3, [pc, #216]	@ (8015768 <tcp_process+0x5a4>)
 801568e:	9300      	str	r3, [sp, #0]
 8015690:	4b36      	ldr	r3, [pc, #216]	@ (801576c <tcp_process+0x5a8>)
 8015692:	4602      	mov	r2, r0
 8015694:	6878      	ldr	r0, [r7, #4]
 8015696:	f002 fbcb 	bl	8017e30 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801569a:	e167      	b.n	801596c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801569c:	4b2d      	ldr	r3, [pc, #180]	@ (8015754 <tcp_process+0x590>)
 801569e:	781b      	ldrb	r3, [r3, #0]
 80156a0:	f003 0302 	and.w	r3, r3, #2
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	f000 8161 	beq.w	801596c <tcp_process+0x7a8>
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156ae:	1e5a      	subs	r2, r3, #1
 80156b0:	4b2b      	ldr	r3, [pc, #172]	@ (8015760 <tcp_process+0x59c>)
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	429a      	cmp	r2, r3
 80156b6:	f040 8159 	bne.w	801596c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	f002 f9b2 	bl	8017a24 <tcp_rexmit>
      break;
 80156c0:	e154      	b.n	801596c <tcp_process+0x7a8>
 80156c2:	e153      	b.n	801596c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80156c4:	6878      	ldr	r0, [r7, #4]
 80156c6:	f000 fa71 	bl	8015bac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80156ca:	4b2d      	ldr	r3, [pc, #180]	@ (8015780 <tcp_process+0x5bc>)
 80156cc:	781b      	ldrb	r3, [r3, #0]
 80156ce:	f003 0320 	and.w	r3, r3, #32
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	f000 814c 	beq.w	8015970 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	8b5b      	ldrh	r3, [r3, #26]
 80156dc:	f043 0302 	orr.w	r3, r3, #2
 80156e0:	b29a      	uxth	r2, r3
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	2207      	movs	r2, #7
 80156ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 80156ec:	e140      	b.n	8015970 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80156ee:	6878      	ldr	r0, [r7, #4]
 80156f0:	f000 fa5c 	bl	8015bac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80156f4:	4b22      	ldr	r3, [pc, #136]	@ (8015780 <tcp_process+0x5bc>)
 80156f6:	781b      	ldrb	r3, [r3, #0]
 80156f8:	f003 0320 	and.w	r3, r3, #32
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d071      	beq.n	80157e4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015700:	4b14      	ldr	r3, [pc, #80]	@ (8015754 <tcp_process+0x590>)
 8015702:	781b      	ldrb	r3, [r3, #0]
 8015704:	f003 0310 	and.w	r3, r3, #16
 8015708:	2b00      	cmp	r3, #0
 801570a:	d060      	beq.n	80157ce <tcp_process+0x60a>
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015710:	4b11      	ldr	r3, [pc, #68]	@ (8015758 <tcp_process+0x594>)
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	429a      	cmp	r2, r3
 8015716:	d15a      	bne.n	80157ce <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801571c:	2b00      	cmp	r3, #0
 801571e:	d156      	bne.n	80157ce <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	8b5b      	ldrh	r3, [r3, #26]
 8015724:	f043 0302 	orr.w	r3, r3, #2
 8015728:	b29a      	uxth	r2, r3
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801572e:	6878      	ldr	r0, [r7, #4]
 8015730:	f7fe fdbc 	bl	80142ac <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8015734:	4b13      	ldr	r3, [pc, #76]	@ (8015784 <tcp_process+0x5c0>)
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	687a      	ldr	r2, [r7, #4]
 801573a:	429a      	cmp	r2, r3
 801573c:	d105      	bne.n	801574a <tcp_process+0x586>
 801573e:	4b11      	ldr	r3, [pc, #68]	@ (8015784 <tcp_process+0x5c0>)
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	68db      	ldr	r3, [r3, #12]
 8015744:	4a0f      	ldr	r2, [pc, #60]	@ (8015784 <tcp_process+0x5c0>)
 8015746:	6013      	str	r3, [r2, #0]
 8015748:	e02e      	b.n	80157a8 <tcp_process+0x5e4>
 801574a:	4b0e      	ldr	r3, [pc, #56]	@ (8015784 <tcp_process+0x5c0>)
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	617b      	str	r3, [r7, #20]
 8015750:	e027      	b.n	80157a2 <tcp_process+0x5de>
 8015752:	bf00      	nop
 8015754:	240081d0 	.word	0x240081d0
 8015758:	240081c8 	.word	0x240081c8
 801575c:	240081ce 	.word	0x240081ce
 8015760:	240081c4 	.word	0x240081c4
 8015764:	240081b4 	.word	0x240081b4
 8015768:	2400509c 	.word	0x2400509c
 801576c:	240050a0 	.word	0x240050a0
 8015770:	0801daf0 	.word	0x0801daf0
 8015774:	0801dd90 	.word	0x0801dd90
 8015778:	0801db3c 	.word	0x0801db3c
 801577c:	240081cc 	.word	0x240081cc
 8015780:	240081d1 	.word	0x240081d1
 8015784:	24008198 	.word	0x24008198
 8015788:	697b      	ldr	r3, [r7, #20]
 801578a:	68db      	ldr	r3, [r3, #12]
 801578c:	687a      	ldr	r2, [r7, #4]
 801578e:	429a      	cmp	r2, r3
 8015790:	d104      	bne.n	801579c <tcp_process+0x5d8>
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	68da      	ldr	r2, [r3, #12]
 8015796:	697b      	ldr	r3, [r7, #20]
 8015798:	60da      	str	r2, [r3, #12]
 801579a:	e005      	b.n	80157a8 <tcp_process+0x5e4>
 801579c:	697b      	ldr	r3, [r7, #20]
 801579e:	68db      	ldr	r3, [r3, #12]
 80157a0:	617b      	str	r3, [r7, #20]
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d1ef      	bne.n	8015788 <tcp_process+0x5c4>
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	2200      	movs	r2, #0
 80157ac:	60da      	str	r2, [r3, #12]
 80157ae:	4b77      	ldr	r3, [pc, #476]	@ (801598c <tcp_process+0x7c8>)
 80157b0:	2201      	movs	r2, #1
 80157b2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	220a      	movs	r2, #10
 80157b8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80157ba:	4b75      	ldr	r3, [pc, #468]	@ (8015990 <tcp_process+0x7cc>)
 80157bc:	681a      	ldr	r2, [r3, #0]
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	60da      	str	r2, [r3, #12]
 80157c2:	4a73      	ldr	r2, [pc, #460]	@ (8015990 <tcp_process+0x7cc>)
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	6013      	str	r3, [r2, #0]
 80157c8:	f002 fcf4 	bl	80181b4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80157cc:	e0d2      	b.n	8015974 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	8b5b      	ldrh	r3, [r3, #26]
 80157d2:	f043 0302 	orr.w	r3, r3, #2
 80157d6:	b29a      	uxth	r2, r3
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	2208      	movs	r2, #8
 80157e0:	751a      	strb	r2, [r3, #20]
      break;
 80157e2:	e0c7      	b.n	8015974 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80157e4:	4b6b      	ldr	r3, [pc, #428]	@ (8015994 <tcp_process+0x7d0>)
 80157e6:	781b      	ldrb	r3, [r3, #0]
 80157e8:	f003 0310 	and.w	r3, r3, #16
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	f000 80c1 	beq.w	8015974 <tcp_process+0x7b0>
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80157f6:	4b68      	ldr	r3, [pc, #416]	@ (8015998 <tcp_process+0x7d4>)
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	429a      	cmp	r2, r3
 80157fc:	f040 80ba 	bne.w	8015974 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015804:	2b00      	cmp	r3, #0
 8015806:	f040 80b5 	bne.w	8015974 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	2206      	movs	r2, #6
 801580e:	751a      	strb	r2, [r3, #20]
      break;
 8015810:	e0b0      	b.n	8015974 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8015812:	6878      	ldr	r0, [r7, #4]
 8015814:	f000 f9ca 	bl	8015bac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015818:	4b60      	ldr	r3, [pc, #384]	@ (801599c <tcp_process+0x7d8>)
 801581a:	781b      	ldrb	r3, [r3, #0]
 801581c:	f003 0320 	and.w	r3, r3, #32
 8015820:	2b00      	cmp	r3, #0
 8015822:	f000 80a9 	beq.w	8015978 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	8b5b      	ldrh	r3, [r3, #26]
 801582a:	f043 0302 	orr.w	r3, r3, #2
 801582e:	b29a      	uxth	r2, r3
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8015834:	6878      	ldr	r0, [r7, #4]
 8015836:	f7fe fd39 	bl	80142ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801583a:	4b59      	ldr	r3, [pc, #356]	@ (80159a0 <tcp_process+0x7dc>)
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	687a      	ldr	r2, [r7, #4]
 8015840:	429a      	cmp	r2, r3
 8015842:	d105      	bne.n	8015850 <tcp_process+0x68c>
 8015844:	4b56      	ldr	r3, [pc, #344]	@ (80159a0 <tcp_process+0x7dc>)
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	68db      	ldr	r3, [r3, #12]
 801584a:	4a55      	ldr	r2, [pc, #340]	@ (80159a0 <tcp_process+0x7dc>)
 801584c:	6013      	str	r3, [r2, #0]
 801584e:	e013      	b.n	8015878 <tcp_process+0x6b4>
 8015850:	4b53      	ldr	r3, [pc, #332]	@ (80159a0 <tcp_process+0x7dc>)
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	613b      	str	r3, [r7, #16]
 8015856:	e00c      	b.n	8015872 <tcp_process+0x6ae>
 8015858:	693b      	ldr	r3, [r7, #16]
 801585a:	68db      	ldr	r3, [r3, #12]
 801585c:	687a      	ldr	r2, [r7, #4]
 801585e:	429a      	cmp	r2, r3
 8015860:	d104      	bne.n	801586c <tcp_process+0x6a8>
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	68da      	ldr	r2, [r3, #12]
 8015866:	693b      	ldr	r3, [r7, #16]
 8015868:	60da      	str	r2, [r3, #12]
 801586a:	e005      	b.n	8015878 <tcp_process+0x6b4>
 801586c:	693b      	ldr	r3, [r7, #16]
 801586e:	68db      	ldr	r3, [r3, #12]
 8015870:	613b      	str	r3, [r7, #16]
 8015872:	693b      	ldr	r3, [r7, #16]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d1ef      	bne.n	8015858 <tcp_process+0x694>
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	2200      	movs	r2, #0
 801587c:	60da      	str	r2, [r3, #12]
 801587e:	4b43      	ldr	r3, [pc, #268]	@ (801598c <tcp_process+0x7c8>)
 8015880:	2201      	movs	r2, #1
 8015882:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	220a      	movs	r2, #10
 8015888:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801588a:	4b41      	ldr	r3, [pc, #260]	@ (8015990 <tcp_process+0x7cc>)
 801588c:	681a      	ldr	r2, [r3, #0]
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	60da      	str	r2, [r3, #12]
 8015892:	4a3f      	ldr	r2, [pc, #252]	@ (8015990 <tcp_process+0x7cc>)
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	6013      	str	r3, [r2, #0]
 8015898:	f002 fc8c 	bl	80181b4 <tcp_timer_needed>
      }
      break;
 801589c:	e06c      	b.n	8015978 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801589e:	6878      	ldr	r0, [r7, #4]
 80158a0:	f000 f984 	bl	8015bac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80158a4:	4b3b      	ldr	r3, [pc, #236]	@ (8015994 <tcp_process+0x7d0>)
 80158a6:	781b      	ldrb	r3, [r3, #0]
 80158a8:	f003 0310 	and.w	r3, r3, #16
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d065      	beq.n	801597c <tcp_process+0x7b8>
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80158b4:	4b38      	ldr	r3, [pc, #224]	@ (8015998 <tcp_process+0x7d4>)
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	429a      	cmp	r2, r3
 80158ba:	d15f      	bne.n	801597c <tcp_process+0x7b8>
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d15b      	bne.n	801597c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80158c4:	6878      	ldr	r0, [r7, #4]
 80158c6:	f7fe fcf1 	bl	80142ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80158ca:	4b35      	ldr	r3, [pc, #212]	@ (80159a0 <tcp_process+0x7dc>)
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	687a      	ldr	r2, [r7, #4]
 80158d0:	429a      	cmp	r2, r3
 80158d2:	d105      	bne.n	80158e0 <tcp_process+0x71c>
 80158d4:	4b32      	ldr	r3, [pc, #200]	@ (80159a0 <tcp_process+0x7dc>)
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	68db      	ldr	r3, [r3, #12]
 80158da:	4a31      	ldr	r2, [pc, #196]	@ (80159a0 <tcp_process+0x7dc>)
 80158dc:	6013      	str	r3, [r2, #0]
 80158de:	e013      	b.n	8015908 <tcp_process+0x744>
 80158e0:	4b2f      	ldr	r3, [pc, #188]	@ (80159a0 <tcp_process+0x7dc>)
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	60fb      	str	r3, [r7, #12]
 80158e6:	e00c      	b.n	8015902 <tcp_process+0x73e>
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	68db      	ldr	r3, [r3, #12]
 80158ec:	687a      	ldr	r2, [r7, #4]
 80158ee:	429a      	cmp	r2, r3
 80158f0:	d104      	bne.n	80158fc <tcp_process+0x738>
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	68da      	ldr	r2, [r3, #12]
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	60da      	str	r2, [r3, #12]
 80158fa:	e005      	b.n	8015908 <tcp_process+0x744>
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	68db      	ldr	r3, [r3, #12]
 8015900:	60fb      	str	r3, [r7, #12]
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d1ef      	bne.n	80158e8 <tcp_process+0x724>
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	2200      	movs	r2, #0
 801590c:	60da      	str	r2, [r3, #12]
 801590e:	4b1f      	ldr	r3, [pc, #124]	@ (801598c <tcp_process+0x7c8>)
 8015910:	2201      	movs	r2, #1
 8015912:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	220a      	movs	r2, #10
 8015918:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801591a:	4b1d      	ldr	r3, [pc, #116]	@ (8015990 <tcp_process+0x7cc>)
 801591c:	681a      	ldr	r2, [r3, #0]
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	60da      	str	r2, [r3, #12]
 8015922:	4a1b      	ldr	r2, [pc, #108]	@ (8015990 <tcp_process+0x7cc>)
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6013      	str	r3, [r2, #0]
 8015928:	f002 fc44 	bl	80181b4 <tcp_timer_needed>
      }
      break;
 801592c:	e026      	b.n	801597c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801592e:	6878      	ldr	r0, [r7, #4]
 8015930:	f000 f93c 	bl	8015bac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015934:	4b17      	ldr	r3, [pc, #92]	@ (8015994 <tcp_process+0x7d0>)
 8015936:	781b      	ldrb	r3, [r3, #0]
 8015938:	f003 0310 	and.w	r3, r3, #16
 801593c:	2b00      	cmp	r3, #0
 801593e:	d01f      	beq.n	8015980 <tcp_process+0x7bc>
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015944:	4b14      	ldr	r3, [pc, #80]	@ (8015998 <tcp_process+0x7d4>)
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	429a      	cmp	r2, r3
 801594a:	d119      	bne.n	8015980 <tcp_process+0x7bc>
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015950:	2b00      	cmp	r3, #0
 8015952:	d115      	bne.n	8015980 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8015954:	4b11      	ldr	r3, [pc, #68]	@ (801599c <tcp_process+0x7d8>)
 8015956:	781b      	ldrb	r3, [r3, #0]
 8015958:	f043 0310 	orr.w	r3, r3, #16
 801595c:	b2da      	uxtb	r2, r3
 801595e:	4b0f      	ldr	r3, [pc, #60]	@ (801599c <tcp_process+0x7d8>)
 8015960:	701a      	strb	r2, [r3, #0]
      }
      break;
 8015962:	e00d      	b.n	8015980 <tcp_process+0x7bc>
    default:
      break;
 8015964:	bf00      	nop
 8015966:	e00c      	b.n	8015982 <tcp_process+0x7be>
      break;
 8015968:	bf00      	nop
 801596a:	e00a      	b.n	8015982 <tcp_process+0x7be>
      break;
 801596c:	bf00      	nop
 801596e:	e008      	b.n	8015982 <tcp_process+0x7be>
      break;
 8015970:	bf00      	nop
 8015972:	e006      	b.n	8015982 <tcp_process+0x7be>
      break;
 8015974:	bf00      	nop
 8015976:	e004      	b.n	8015982 <tcp_process+0x7be>
      break;
 8015978:	bf00      	nop
 801597a:	e002      	b.n	8015982 <tcp_process+0x7be>
      break;
 801597c:	bf00      	nop
 801597e:	e000      	b.n	8015982 <tcp_process+0x7be>
      break;
 8015980:	bf00      	nop
  }
  return ERR_OK;
 8015982:	2300      	movs	r3, #0
}
 8015984:	4618      	mov	r0, r3
 8015986:	3724      	adds	r7, #36	@ 0x24
 8015988:	46bd      	mov	sp, r7
 801598a:	bd90      	pop	{r4, r7, pc}
 801598c:	240081a0 	.word	0x240081a0
 8015990:	2400819c 	.word	0x2400819c
 8015994:	240081d0 	.word	0x240081d0
 8015998:	240081c8 	.word	0x240081c8
 801599c:	240081d1 	.word	0x240081d1
 80159a0:	24008198 	.word	0x24008198

080159a4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80159a4:	b590      	push	{r4, r7, lr}
 80159a6:	b085      	sub	sp, #20
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
 80159ac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d106      	bne.n	80159c2 <tcp_oos_insert_segment+0x1e>
 80159b4:	4b3b      	ldr	r3, [pc, #236]	@ (8015aa4 <tcp_oos_insert_segment+0x100>)
 80159b6:	f240 421f 	movw	r2, #1055	@ 0x41f
 80159ba:	493b      	ldr	r1, [pc, #236]	@ (8015aa8 <tcp_oos_insert_segment+0x104>)
 80159bc:	483b      	ldr	r0, [pc, #236]	@ (8015aac <tcp_oos_insert_segment+0x108>)
 80159be:	f005 fd49 	bl	801b454 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	68db      	ldr	r3, [r3, #12]
 80159c6:	899b      	ldrh	r3, [r3, #12]
 80159c8:	b29b      	uxth	r3, r3
 80159ca:	4618      	mov	r0, r3
 80159cc:	f7fb fb46 	bl	801105c <lwip_htons>
 80159d0:	4603      	mov	r3, r0
 80159d2:	b2db      	uxtb	r3, r3
 80159d4:	f003 0301 	and.w	r3, r3, #1
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d028      	beq.n	8015a2e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80159dc:	6838      	ldr	r0, [r7, #0]
 80159de:	f7fe fa63 	bl	8013ea8 <tcp_segs_free>
    next = NULL;
 80159e2:	2300      	movs	r3, #0
 80159e4:	603b      	str	r3, [r7, #0]
 80159e6:	e056      	b.n	8015a96 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80159e8:	683b      	ldr	r3, [r7, #0]
 80159ea:	68db      	ldr	r3, [r3, #12]
 80159ec:	899b      	ldrh	r3, [r3, #12]
 80159ee:	b29b      	uxth	r3, r3
 80159f0:	4618      	mov	r0, r3
 80159f2:	f7fb fb33 	bl	801105c <lwip_htons>
 80159f6:	4603      	mov	r3, r0
 80159f8:	b2db      	uxtb	r3, r3
 80159fa:	f003 0301 	and.w	r3, r3, #1
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d00d      	beq.n	8015a1e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	68db      	ldr	r3, [r3, #12]
 8015a06:	899b      	ldrh	r3, [r3, #12]
 8015a08:	b29c      	uxth	r4, r3
 8015a0a:	2001      	movs	r0, #1
 8015a0c:	f7fb fb26 	bl	801105c <lwip_htons>
 8015a10:	4603      	mov	r3, r0
 8015a12:	461a      	mov	r2, r3
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	68db      	ldr	r3, [r3, #12]
 8015a18:	4322      	orrs	r2, r4
 8015a1a:	b292      	uxth	r2, r2
 8015a1c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8015a1e:	683b      	ldr	r3, [r7, #0]
 8015a20:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8015a22:	683b      	ldr	r3, [r7, #0]
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8015a28:	68f8      	ldr	r0, [r7, #12]
 8015a2a:	f7fe fa52 	bl	8013ed2 <tcp_seg_free>
    while (next &&
 8015a2e:	683b      	ldr	r3, [r7, #0]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d00e      	beq.n	8015a52 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	891b      	ldrh	r3, [r3, #8]
 8015a38:	461a      	mov	r2, r3
 8015a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8015ab0 <tcp_oos_insert_segment+0x10c>)
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	441a      	add	r2, r3
 8015a40:	683b      	ldr	r3, [r7, #0]
 8015a42:	68db      	ldr	r3, [r3, #12]
 8015a44:	685b      	ldr	r3, [r3, #4]
 8015a46:	6839      	ldr	r1, [r7, #0]
 8015a48:	8909      	ldrh	r1, [r1, #8]
 8015a4a:	440b      	add	r3, r1
 8015a4c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	daca      	bge.n	80159e8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8015a52:	683b      	ldr	r3, [r7, #0]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d01e      	beq.n	8015a96 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	891b      	ldrh	r3, [r3, #8]
 8015a5c:	461a      	mov	r2, r3
 8015a5e:	4b14      	ldr	r3, [pc, #80]	@ (8015ab0 <tcp_oos_insert_segment+0x10c>)
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	441a      	add	r2, r3
 8015a64:	683b      	ldr	r3, [r7, #0]
 8015a66:	68db      	ldr	r3, [r3, #12]
 8015a68:	685b      	ldr	r3, [r3, #4]
 8015a6a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	dd12      	ble.n	8015a96 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8015a70:	683b      	ldr	r3, [r7, #0]
 8015a72:	68db      	ldr	r3, [r3, #12]
 8015a74:	685b      	ldr	r3, [r3, #4]
 8015a76:	b29a      	uxth	r2, r3
 8015a78:	4b0d      	ldr	r3, [pc, #52]	@ (8015ab0 <tcp_oos_insert_segment+0x10c>)
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	b29b      	uxth	r3, r3
 8015a7e:	1ad3      	subs	r3, r2, r3
 8015a80:	b29a      	uxth	r2, r3
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	685a      	ldr	r2, [r3, #4]
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	891b      	ldrh	r3, [r3, #8]
 8015a8e:	4619      	mov	r1, r3
 8015a90:	4610      	mov	r0, r2
 8015a92:	f7fc fe17 	bl	80126c4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	683a      	ldr	r2, [r7, #0]
 8015a9a:	601a      	str	r2, [r3, #0]
}
 8015a9c:	bf00      	nop
 8015a9e:	3714      	adds	r7, #20
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd90      	pop	{r4, r7, pc}
 8015aa4:	0801daf0 	.word	0x0801daf0
 8015aa8:	0801ddb0 	.word	0x0801ddb0
 8015aac:	0801db3c 	.word	0x0801db3c
 8015ab0:	240081c4 	.word	0x240081c4

08015ab4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8015ab4:	b5b0      	push	{r4, r5, r7, lr}
 8015ab6:	b086      	sub	sp, #24
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	60f8      	str	r0, [r7, #12]
 8015abc:	60b9      	str	r1, [r7, #8]
 8015abe:	607a      	str	r2, [r7, #4]
 8015ac0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8015ac2:	e03e      	b.n	8015b42 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8015ac4:	68bb      	ldr	r3, [r7, #8]
 8015ac6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8015ac8:	68bb      	ldr	r3, [r7, #8]
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8015ace:	697b      	ldr	r3, [r7, #20]
 8015ad0:	685b      	ldr	r3, [r3, #4]
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f7fd f80a 	bl	8012aec <pbuf_clen>
 8015ad8:	4603      	mov	r3, r0
 8015ada:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015ae2:	8a7a      	ldrh	r2, [r7, #18]
 8015ae4:	429a      	cmp	r2, r3
 8015ae6:	d906      	bls.n	8015af6 <tcp_free_acked_segments+0x42>
 8015ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8015b94 <tcp_free_acked_segments+0xe0>)
 8015aea:	f240 4257 	movw	r2, #1111	@ 0x457
 8015aee:	492a      	ldr	r1, [pc, #168]	@ (8015b98 <tcp_free_acked_segments+0xe4>)
 8015af0:	482a      	ldr	r0, [pc, #168]	@ (8015b9c <tcp_free_acked_segments+0xe8>)
 8015af2:	f005 fcaf 	bl	801b454 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8015afc:	8a7b      	ldrh	r3, [r7, #18]
 8015afe:	1ad3      	subs	r3, r2, r3
 8015b00:	b29a      	uxth	r2, r3
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8015b08:	697b      	ldr	r3, [r7, #20]
 8015b0a:	891a      	ldrh	r2, [r3, #8]
 8015b0c:	4b24      	ldr	r3, [pc, #144]	@ (8015ba0 <tcp_free_acked_segments+0xec>)
 8015b0e:	881b      	ldrh	r3, [r3, #0]
 8015b10:	4413      	add	r3, r2
 8015b12:	b29a      	uxth	r2, r3
 8015b14:	4b22      	ldr	r3, [pc, #136]	@ (8015ba0 <tcp_free_acked_segments+0xec>)
 8015b16:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8015b18:	6978      	ldr	r0, [r7, #20]
 8015b1a:	f7fe f9da 	bl	8013ed2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d00c      	beq.n	8015b42 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015b28:	68bb      	ldr	r3, [r7, #8]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d109      	bne.n	8015b42 <tcp_free_acked_segments+0x8e>
 8015b2e:	683b      	ldr	r3, [r7, #0]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d106      	bne.n	8015b42 <tcp_free_acked_segments+0x8e>
 8015b34:	4b17      	ldr	r3, [pc, #92]	@ (8015b94 <tcp_free_acked_segments+0xe0>)
 8015b36:	f240 4261 	movw	r2, #1121	@ 0x461
 8015b3a:	491a      	ldr	r1, [pc, #104]	@ (8015ba4 <tcp_free_acked_segments+0xf0>)
 8015b3c:	4817      	ldr	r0, [pc, #92]	@ (8015b9c <tcp_free_acked_segments+0xe8>)
 8015b3e:	f005 fc89 	bl	801b454 <iprintf>
  while (seg_list != NULL &&
 8015b42:	68bb      	ldr	r3, [r7, #8]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d020      	beq.n	8015b8a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015b48:	68bb      	ldr	r3, [r7, #8]
 8015b4a:	68db      	ldr	r3, [r3, #12]
 8015b4c:	685b      	ldr	r3, [r3, #4]
 8015b4e:	4618      	mov	r0, r3
 8015b50:	f7fb fa9a 	bl	8011088 <lwip_htonl>
 8015b54:	4604      	mov	r4, r0
 8015b56:	68bb      	ldr	r3, [r7, #8]
 8015b58:	891b      	ldrh	r3, [r3, #8]
 8015b5a:	461d      	mov	r5, r3
 8015b5c:	68bb      	ldr	r3, [r7, #8]
 8015b5e:	68db      	ldr	r3, [r3, #12]
 8015b60:	899b      	ldrh	r3, [r3, #12]
 8015b62:	b29b      	uxth	r3, r3
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7fb fa79 	bl	801105c <lwip_htons>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	b2db      	uxtb	r3, r3
 8015b6e:	f003 0303 	and.w	r3, r3, #3
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d001      	beq.n	8015b7a <tcp_free_acked_segments+0xc6>
 8015b76:	2301      	movs	r3, #1
 8015b78:	e000      	b.n	8015b7c <tcp_free_acked_segments+0xc8>
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	442b      	add	r3, r5
 8015b7e:	18e2      	adds	r2, r4, r3
 8015b80:	4b09      	ldr	r3, [pc, #36]	@ (8015ba8 <tcp_free_acked_segments+0xf4>)
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	dd9c      	ble.n	8015ac4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8015b8a:	68bb      	ldr	r3, [r7, #8]
}
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	3718      	adds	r7, #24
 8015b90:	46bd      	mov	sp, r7
 8015b92:	bdb0      	pop	{r4, r5, r7, pc}
 8015b94:	0801daf0 	.word	0x0801daf0
 8015b98:	0801ddd8 	.word	0x0801ddd8
 8015b9c:	0801db3c 	.word	0x0801db3c
 8015ba0:	240081cc 	.word	0x240081cc
 8015ba4:	0801de00 	.word	0x0801de00
 8015ba8:	240081c8 	.word	0x240081c8

08015bac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015bac:	b5b0      	push	{r4, r5, r7, lr}
 8015bae:	b094      	sub	sp, #80	@ 0x50
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d106      	bne.n	8015bcc <tcp_receive+0x20>
 8015bbe:	4b91      	ldr	r3, [pc, #580]	@ (8015e04 <tcp_receive+0x258>)
 8015bc0:	f240 427b 	movw	r2, #1147	@ 0x47b
 8015bc4:	4990      	ldr	r1, [pc, #576]	@ (8015e08 <tcp_receive+0x25c>)
 8015bc6:	4891      	ldr	r0, [pc, #580]	@ (8015e0c <tcp_receive+0x260>)
 8015bc8:	f005 fc44 	bl	801b454 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	7d1b      	ldrb	r3, [r3, #20]
 8015bd0:	2b03      	cmp	r3, #3
 8015bd2:	d806      	bhi.n	8015be2 <tcp_receive+0x36>
 8015bd4:	4b8b      	ldr	r3, [pc, #556]	@ (8015e04 <tcp_receive+0x258>)
 8015bd6:	f240 427c 	movw	r2, #1148	@ 0x47c
 8015bda:	498d      	ldr	r1, [pc, #564]	@ (8015e10 <tcp_receive+0x264>)
 8015bdc:	488b      	ldr	r0, [pc, #556]	@ (8015e0c <tcp_receive+0x260>)
 8015bde:	f005 fc39 	bl	801b454 <iprintf>

  if (flags & TCP_ACK) {
 8015be2:	4b8c      	ldr	r3, [pc, #560]	@ (8015e14 <tcp_receive+0x268>)
 8015be4:	781b      	ldrb	r3, [r3, #0]
 8015be6:	f003 0310 	and.w	r3, r3, #16
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	f000 8264 	beq.w	80160b8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015bf6:	461a      	mov	r2, r3
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015bfc:	4413      	add	r3, r2
 8015bfe:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8015c04:	4b84      	ldr	r3, [pc, #528]	@ (8015e18 <tcp_receive+0x26c>)
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	1ad3      	subs	r3, r2, r3
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	db1b      	blt.n	8015c46 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8015c12:	4b81      	ldr	r3, [pc, #516]	@ (8015e18 <tcp_receive+0x26c>)
 8015c14:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015c16:	429a      	cmp	r2, r3
 8015c18:	d106      	bne.n	8015c28 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015c1e:	4b7f      	ldr	r3, [pc, #508]	@ (8015e1c <tcp_receive+0x270>)
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	1ad3      	subs	r3, r2, r3
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	db0e      	blt.n	8015c46 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015c2c:	4b7b      	ldr	r3, [pc, #492]	@ (8015e1c <tcp_receive+0x270>)
 8015c2e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015c30:	429a      	cmp	r2, r3
 8015c32:	d125      	bne.n	8015c80 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015c34:	4b7a      	ldr	r3, [pc, #488]	@ (8015e20 <tcp_receive+0x274>)
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	89db      	ldrh	r3, [r3, #14]
 8015c3a:	b29a      	uxth	r2, r3
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015c42:	429a      	cmp	r2, r3
 8015c44:	d91c      	bls.n	8015c80 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8015c46:	4b76      	ldr	r3, [pc, #472]	@ (8015e20 <tcp_receive+0x274>)
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	89db      	ldrh	r3, [r3, #14]
 8015c4c:	b29a      	uxth	r2, r3
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015c60:	429a      	cmp	r2, r3
 8015c62:	d205      	bcs.n	8015c70 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8015c70:	4b69      	ldr	r3, [pc, #420]	@ (8015e18 <tcp_receive+0x26c>)
 8015c72:	681a      	ldr	r2, [r3, #0]
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8015c78:	4b68      	ldr	r3, [pc, #416]	@ (8015e1c <tcp_receive+0x270>)
 8015c7a:	681a      	ldr	r2, [r3, #0]
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015c80:	4b66      	ldr	r3, [pc, #408]	@ (8015e1c <tcp_receive+0x270>)
 8015c82:	681a      	ldr	r2, [r3, #0]
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015c88:	1ad3      	subs	r3, r2, r3
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	dc58      	bgt.n	8015d40 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8015c8e:	4b65      	ldr	r3, [pc, #404]	@ (8015e24 <tcp_receive+0x278>)
 8015c90:	881b      	ldrh	r3, [r3, #0]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d14b      	bne.n	8015d2e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015c9a:	687a      	ldr	r2, [r7, #4]
 8015c9c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8015ca0:	4413      	add	r3, r2
 8015ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	d142      	bne.n	8015d2e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	db3d      	blt.n	8015d2e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015cb6:	4b59      	ldr	r3, [pc, #356]	@ (8015e1c <tcp_receive+0x270>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	429a      	cmp	r2, r3
 8015cbc:	d137      	bne.n	8015d2e <tcp_receive+0x182>
              found_dupack = 1;
 8015cbe:	2301      	movs	r3, #1
 8015cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015cc8:	2bff      	cmp	r3, #255	@ 0xff
 8015cca:	d007      	beq.n	8015cdc <tcp_receive+0x130>
                ++pcb->dupacks;
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015cd2:	3301      	adds	r3, #1
 8015cd4:	b2da      	uxtb	r2, r3
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015ce2:	2b03      	cmp	r3, #3
 8015ce4:	d91b      	bls.n	8015d1e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015cf0:	4413      	add	r3, r2
 8015cf2:	b29a      	uxth	r2, r3
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015cfa:	429a      	cmp	r2, r3
 8015cfc:	d30a      	bcc.n	8015d14 <tcp_receive+0x168>
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015d08:	4413      	add	r3, r2
 8015d0a:	b29a      	uxth	r2, r3
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015d12:	e004      	b.n	8015d1e <tcp_receive+0x172>
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015d1a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015d24:	2b02      	cmp	r3, #2
 8015d26:	d902      	bls.n	8015d2e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	f001 fee7 	bl	8017afc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8015d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	f040 8161 	bne.w	8015ff8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	2200      	movs	r2, #0
 8015d3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015d3e:	e15b      	b.n	8015ff8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015d40:	4b36      	ldr	r3, [pc, #216]	@ (8015e1c <tcp_receive+0x270>)
 8015d42:	681a      	ldr	r2, [r3, #0]
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015d48:	1ad3      	subs	r3, r2, r3
 8015d4a:	3b01      	subs	r3, #1
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	f2c0 814e 	blt.w	8015fee <tcp_receive+0x442>
 8015d52:	4b32      	ldr	r3, [pc, #200]	@ (8015e1c <tcp_receive+0x270>)
 8015d54:	681a      	ldr	r2, [r3, #0]
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015d5a:	1ad3      	subs	r3, r2, r3
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	f300 8146 	bgt.w	8015fee <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	8b5b      	ldrh	r3, [r3, #26]
 8015d66:	f003 0304 	and.w	r3, r3, #4
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d010      	beq.n	8015d90 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	8b5b      	ldrh	r3, [r3, #26]
 8015d72:	f023 0304 	bic.w	r3, r3, #4
 8015d76:	b29a      	uxth	r2, r3
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2200      	movs	r2, #0
 8015d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015d9e:	10db      	asrs	r3, r3, #3
 8015da0:	b21b      	sxth	r3, r3
 8015da2:	b29a      	uxth	r2, r3
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015daa:	b29b      	uxth	r3, r3
 8015dac:	4413      	add	r3, r2
 8015dae:	b29b      	uxth	r3, r3
 8015db0:	b21a      	sxth	r2, r3
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015db8:	4b18      	ldr	r3, [pc, #96]	@ (8015e1c <tcp_receive+0x270>)
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	b29a      	uxth	r2, r3
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015dc2:	b29b      	uxth	r3, r3
 8015dc4:	1ad3      	subs	r3, r2, r3
 8015dc6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	2200      	movs	r2, #0
 8015dcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8015dd0:	4b12      	ldr	r3, [pc, #72]	@ (8015e1c <tcp_receive+0x270>)
 8015dd2:	681a      	ldr	r2, [r3, #0]
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	7d1b      	ldrb	r3, [r3, #20]
 8015ddc:	2b03      	cmp	r3, #3
 8015dde:	f240 8097 	bls.w	8015f10 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015dee:	429a      	cmp	r2, r3
 8015df0:	d245      	bcs.n	8015e7e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	8b5b      	ldrh	r3, [r3, #26]
 8015df6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d014      	beq.n	8015e28 <tcp_receive+0x27c>
 8015dfe:	2301      	movs	r3, #1
 8015e00:	e013      	b.n	8015e2a <tcp_receive+0x27e>
 8015e02:	bf00      	nop
 8015e04:	0801daf0 	.word	0x0801daf0
 8015e08:	0801de20 	.word	0x0801de20
 8015e0c:	0801db3c 	.word	0x0801db3c
 8015e10:	0801de3c 	.word	0x0801de3c
 8015e14:	240081d0 	.word	0x240081d0
 8015e18:	240081c4 	.word	0x240081c4
 8015e1c:	240081c8 	.word	0x240081c8
 8015e20:	240081b4 	.word	0x240081b4
 8015e24:	240081ce 	.word	0x240081ce
 8015e28:	2302      	movs	r3, #2
 8015e2a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015e2e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015e32:	b29a      	uxth	r2, r3
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015e38:	fb12 f303 	smulbb	r3, r2, r3
 8015e3c:	b29b      	uxth	r3, r3
 8015e3e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015e40:	4293      	cmp	r3, r2
 8015e42:	bf28      	it	cs
 8015e44:	4613      	movcs	r3, r2
 8015e46:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015e4e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015e50:	4413      	add	r3, r2
 8015e52:	b29a      	uxth	r2, r3
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	d309      	bcc.n	8015e72 <tcp_receive+0x2c6>
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015e64:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015e66:	4413      	add	r3, r2
 8015e68:	b29a      	uxth	r2, r3
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015e70:	e04e      	b.n	8015f10 <tcp_receive+0x364>
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015e78:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015e7c:	e048      	b.n	8015f10 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015e84:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015e86:	4413      	add	r3, r2
 8015e88:	b29a      	uxth	r2, r3
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015e90:	429a      	cmp	r2, r3
 8015e92:	d309      	bcc.n	8015ea8 <tcp_receive+0x2fc>
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015e9a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015e9c:	4413      	add	r3, r2
 8015e9e:	b29a      	uxth	r2, r3
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015ea6:	e004      	b.n	8015eb2 <tcp_receive+0x306>
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015eae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015ebe:	429a      	cmp	r2, r3
 8015ec0:	d326      	bcc.n	8015f10 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015ece:	1ad3      	subs	r3, r2, r3
 8015ed0:	b29a      	uxth	r2, r3
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015ee2:	4413      	add	r3, r2
 8015ee4:	b29a      	uxth	r2, r3
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015eec:	429a      	cmp	r2, r3
 8015eee:	d30a      	bcc.n	8015f06 <tcp_receive+0x35a>
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015efa:	4413      	add	r3, r2
 8015efc:	b29a      	uxth	r2, r3
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015f04:	e004      	b.n	8015f10 <tcp_receive+0x364>
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015f0c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f18:	4a98      	ldr	r2, [pc, #608]	@ (801617c <tcp_receive+0x5d0>)
 8015f1a:	6878      	ldr	r0, [r7, #4]
 8015f1c:	f7ff fdca 	bl	8015ab4 <tcp_free_acked_segments>
 8015f20:	4602      	mov	r2, r0
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f2e:	4a94      	ldr	r2, [pc, #592]	@ (8016180 <tcp_receive+0x5d4>)
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f7ff fdbf 	bl	8015ab4 <tcp_free_acked_segments>
 8015f36:	4602      	mov	r2, r0
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d104      	bne.n	8015f4e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015f4a:	861a      	strh	r2, [r3, #48]	@ 0x30
 8015f4c:	e002      	b.n	8015f54 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	2200      	movs	r2, #0
 8015f52:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	2200      	movs	r2, #0
 8015f58:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d103      	bne.n	8015f6a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	2200      	movs	r2, #0
 8015f66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8015f70:	4b84      	ldr	r3, [pc, #528]	@ (8016184 <tcp_receive+0x5d8>)
 8015f72:	881b      	ldrh	r3, [r3, #0]
 8015f74:	4413      	add	r3, r2
 8015f76:	b29a      	uxth	r2, r3
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	8b5b      	ldrh	r3, [r3, #26]
 8015f82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d035      	beq.n	8015ff6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d118      	bne.n	8015fc4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d00c      	beq.n	8015fb4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015fa2:	68db      	ldr	r3, [r3, #12]
 8015fa4:	685b      	ldr	r3, [r3, #4]
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	f7fb f86e 	bl	8011088 <lwip_htonl>
 8015fac:	4603      	mov	r3, r0
 8015fae:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	dc20      	bgt.n	8015ff6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	8b5b      	ldrh	r3, [r3, #26]
 8015fb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015fbc:	b29a      	uxth	r2, r3
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015fc2:	e018      	b.n	8015ff6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015fcc:	68db      	ldr	r3, [r3, #12]
 8015fce:	685b      	ldr	r3, [r3, #4]
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f7fb f859 	bl	8011088 <lwip_htonl>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	1ae3      	subs	r3, r4, r3
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	dc0b      	bgt.n	8015ff6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	8b5b      	ldrh	r3, [r3, #26]
 8015fe2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015fe6:	b29a      	uxth	r2, r3
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015fec:	e003      	b.n	8015ff6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	f001 ff70 	bl	8017ed4 <tcp_send_empty_ack>
 8015ff4:	e000      	b.n	8015ff8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015ff6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d05b      	beq.n	80160b8 <tcp_receive+0x50c>
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016004:	4b60      	ldr	r3, [pc, #384]	@ (8016188 <tcp_receive+0x5dc>)
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	1ad3      	subs	r3, r2, r3
 801600a:	2b00      	cmp	r3, #0
 801600c:	da54      	bge.n	80160b8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801600e:	4b5f      	ldr	r3, [pc, #380]	@ (801618c <tcp_receive+0x5e0>)
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	b29a      	uxth	r2, r3
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016018:	b29b      	uxth	r3, r3
 801601a:	1ad3      	subs	r3, r2, r3
 801601c:	b29b      	uxth	r3, r3
 801601e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016022:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801602c:	10db      	asrs	r3, r3, #3
 801602e:	b21b      	sxth	r3, r3
 8016030:	b29b      	uxth	r3, r3
 8016032:	1ad3      	subs	r3, r2, r3
 8016034:	b29b      	uxth	r3, r3
 8016036:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016040:	b29a      	uxth	r2, r3
 8016042:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016046:	4413      	add	r3, r2
 8016048:	b29b      	uxth	r3, r3
 801604a:	b21a      	sxth	r2, r3
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8016050:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8016054:	2b00      	cmp	r3, #0
 8016056:	da05      	bge.n	8016064 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8016058:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801605c:	425b      	negs	r3, r3
 801605e:	b29b      	uxth	r3, r3
 8016060:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016064:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801606e:	109b      	asrs	r3, r3, #2
 8016070:	b21b      	sxth	r3, r3
 8016072:	b29b      	uxth	r3, r3
 8016074:	1ad3      	subs	r3, r2, r3
 8016076:	b29b      	uxth	r3, r3
 8016078:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016082:	b29a      	uxth	r2, r3
 8016084:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016088:	4413      	add	r3, r2
 801608a:	b29b      	uxth	r3, r3
 801608c:	b21a      	sxth	r2, r3
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016098:	10db      	asrs	r3, r3, #3
 801609a:	b21b      	sxth	r3, r3
 801609c:	b29a      	uxth	r2, r3
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80160a4:	b29b      	uxth	r3, r3
 80160a6:	4413      	add	r3, r2
 80160a8:	b29b      	uxth	r3, r3
 80160aa:	b21a      	sxth	r2, r3
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2200      	movs	r2, #0
 80160b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80160b8:	4b35      	ldr	r3, [pc, #212]	@ (8016190 <tcp_receive+0x5e4>)
 80160ba:	881b      	ldrh	r3, [r3, #0]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	f000 84df 	beq.w	8016a80 <tcp_receive+0xed4>
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	7d1b      	ldrb	r3, [r3, #20]
 80160c6:	2b06      	cmp	r3, #6
 80160c8:	f200 84da 	bhi.w	8016a80 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80160d0:	4b30      	ldr	r3, [pc, #192]	@ (8016194 <tcp_receive+0x5e8>)
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	1ad3      	subs	r3, r2, r3
 80160d6:	3b01      	subs	r3, #1
 80160d8:	2b00      	cmp	r3, #0
 80160da:	f2c0 808f 	blt.w	80161fc <tcp_receive+0x650>
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80160e2:	4b2b      	ldr	r3, [pc, #172]	@ (8016190 <tcp_receive+0x5e4>)
 80160e4:	881b      	ldrh	r3, [r3, #0]
 80160e6:	4619      	mov	r1, r3
 80160e8:	4b2a      	ldr	r3, [pc, #168]	@ (8016194 <tcp_receive+0x5e8>)
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	440b      	add	r3, r1
 80160ee:	1ad3      	subs	r3, r2, r3
 80160f0:	3301      	adds	r3, #1
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	f300 8082 	bgt.w	80161fc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80160f8:	4b27      	ldr	r3, [pc, #156]	@ (8016198 <tcp_receive+0x5ec>)
 80160fa:	685b      	ldr	r3, [r3, #4]
 80160fc:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016102:	4b24      	ldr	r3, [pc, #144]	@ (8016194 <tcp_receive+0x5e8>)
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	1ad3      	subs	r3, r2, r3
 8016108:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801610a:	4b23      	ldr	r3, [pc, #140]	@ (8016198 <tcp_receive+0x5ec>)
 801610c:	685b      	ldr	r3, [r3, #4]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d106      	bne.n	8016120 <tcp_receive+0x574>
 8016112:	4b22      	ldr	r3, [pc, #136]	@ (801619c <tcp_receive+0x5f0>)
 8016114:	f240 5294 	movw	r2, #1428	@ 0x594
 8016118:	4921      	ldr	r1, [pc, #132]	@ (80161a0 <tcp_receive+0x5f4>)
 801611a:	4822      	ldr	r0, [pc, #136]	@ (80161a4 <tcp_receive+0x5f8>)
 801611c:	f005 f99a 	bl	801b454 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016122:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8016126:	4293      	cmp	r3, r2
 8016128:	d906      	bls.n	8016138 <tcp_receive+0x58c>
 801612a:	4b1c      	ldr	r3, [pc, #112]	@ (801619c <tcp_receive+0x5f0>)
 801612c:	f240 5295 	movw	r2, #1429	@ 0x595
 8016130:	491d      	ldr	r1, [pc, #116]	@ (80161a8 <tcp_receive+0x5fc>)
 8016132:	481c      	ldr	r0, [pc, #112]	@ (80161a4 <tcp_receive+0x5f8>)
 8016134:	f005 f98e 	bl	801b454 <iprintf>
      off = (u16_t)off32;
 8016138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801613a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801613e:	4b16      	ldr	r3, [pc, #88]	@ (8016198 <tcp_receive+0x5ec>)
 8016140:	685b      	ldr	r3, [r3, #4]
 8016142:	891b      	ldrh	r3, [r3, #8]
 8016144:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016148:	429a      	cmp	r2, r3
 801614a:	d906      	bls.n	801615a <tcp_receive+0x5ae>
 801614c:	4b13      	ldr	r3, [pc, #76]	@ (801619c <tcp_receive+0x5f0>)
 801614e:	f240 5297 	movw	r2, #1431	@ 0x597
 8016152:	4916      	ldr	r1, [pc, #88]	@ (80161ac <tcp_receive+0x600>)
 8016154:	4813      	ldr	r0, [pc, #76]	@ (80161a4 <tcp_receive+0x5f8>)
 8016156:	f005 f97d 	bl	801b454 <iprintf>
      inseg.len -= off;
 801615a:	4b0f      	ldr	r3, [pc, #60]	@ (8016198 <tcp_receive+0x5ec>)
 801615c:	891a      	ldrh	r2, [r3, #8]
 801615e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016162:	1ad3      	subs	r3, r2, r3
 8016164:	b29a      	uxth	r2, r3
 8016166:	4b0c      	ldr	r3, [pc, #48]	@ (8016198 <tcp_receive+0x5ec>)
 8016168:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801616a:	4b0b      	ldr	r3, [pc, #44]	@ (8016198 <tcp_receive+0x5ec>)
 801616c:	685b      	ldr	r3, [r3, #4]
 801616e:	891a      	ldrh	r2, [r3, #8]
 8016170:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016174:	1ad3      	subs	r3, r2, r3
 8016176:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8016178:	e02a      	b.n	80161d0 <tcp_receive+0x624>
 801617a:	bf00      	nop
 801617c:	0801de58 	.word	0x0801de58
 8016180:	0801de60 	.word	0x0801de60
 8016184:	240081cc 	.word	0x240081cc
 8016188:	240081c8 	.word	0x240081c8
 801618c:	2400818c 	.word	0x2400818c
 8016190:	240081ce 	.word	0x240081ce
 8016194:	240081c4 	.word	0x240081c4
 8016198:	240081a4 	.word	0x240081a4
 801619c:	0801daf0 	.word	0x0801daf0
 80161a0:	0801de68 	.word	0x0801de68
 80161a4:	0801db3c 	.word	0x0801db3c
 80161a8:	0801de78 	.word	0x0801de78
 80161ac:	0801de88 	.word	0x0801de88
        off -= p->len;
 80161b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80161b2:	895b      	ldrh	r3, [r3, #10]
 80161b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80161b8:	1ad3      	subs	r3, r2, r3
 80161ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80161be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80161c0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80161c2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80161c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80161c6:	2200      	movs	r2, #0
 80161c8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80161ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80161d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80161d2:	895b      	ldrh	r3, [r3, #10]
 80161d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80161d8:	429a      	cmp	r2, r3
 80161da:	d8e9      	bhi.n	80161b0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80161dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80161e0:	4619      	mov	r1, r3
 80161e2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80161e4:	f7fc fb6e 	bl	80128c4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161ec:	4a90      	ldr	r2, [pc, #576]	@ (8016430 <tcp_receive+0x884>)
 80161ee:	6013      	str	r3, [r2, #0]
 80161f0:	4b90      	ldr	r3, [pc, #576]	@ (8016434 <tcp_receive+0x888>)
 80161f2:	68db      	ldr	r3, [r3, #12]
 80161f4:	4a8e      	ldr	r2, [pc, #568]	@ (8016430 <tcp_receive+0x884>)
 80161f6:	6812      	ldr	r2, [r2, #0]
 80161f8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80161fa:	e00d      	b.n	8016218 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80161fc:	4b8c      	ldr	r3, [pc, #560]	@ (8016430 <tcp_receive+0x884>)
 80161fe:	681a      	ldr	r2, [r3, #0]
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016204:	1ad3      	subs	r3, r2, r3
 8016206:	2b00      	cmp	r3, #0
 8016208:	da06      	bge.n	8016218 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	8b5b      	ldrh	r3, [r3, #26]
 801620e:	f043 0302 	orr.w	r3, r3, #2
 8016212:	b29a      	uxth	r2, r3
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016218:	4b85      	ldr	r3, [pc, #532]	@ (8016430 <tcp_receive+0x884>)
 801621a:	681a      	ldr	r2, [r3, #0]
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016220:	1ad3      	subs	r3, r2, r3
 8016222:	2b00      	cmp	r3, #0
 8016224:	f2c0 8427 	blt.w	8016a76 <tcp_receive+0xeca>
 8016228:	4b81      	ldr	r3, [pc, #516]	@ (8016430 <tcp_receive+0x884>)
 801622a:	681a      	ldr	r2, [r3, #0]
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016230:	6879      	ldr	r1, [r7, #4]
 8016232:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016234:	440b      	add	r3, r1
 8016236:	1ad3      	subs	r3, r2, r3
 8016238:	3301      	adds	r3, #1
 801623a:	2b00      	cmp	r3, #0
 801623c:	f300 841b 	bgt.w	8016a76 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016244:	4b7a      	ldr	r3, [pc, #488]	@ (8016430 <tcp_receive+0x884>)
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	429a      	cmp	r2, r3
 801624a:	f040 8298 	bne.w	801677e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801624e:	4b79      	ldr	r3, [pc, #484]	@ (8016434 <tcp_receive+0x888>)
 8016250:	891c      	ldrh	r4, [r3, #8]
 8016252:	4b78      	ldr	r3, [pc, #480]	@ (8016434 <tcp_receive+0x888>)
 8016254:	68db      	ldr	r3, [r3, #12]
 8016256:	899b      	ldrh	r3, [r3, #12]
 8016258:	b29b      	uxth	r3, r3
 801625a:	4618      	mov	r0, r3
 801625c:	f7fa fefe 	bl	801105c <lwip_htons>
 8016260:	4603      	mov	r3, r0
 8016262:	b2db      	uxtb	r3, r3
 8016264:	f003 0303 	and.w	r3, r3, #3
 8016268:	2b00      	cmp	r3, #0
 801626a:	d001      	beq.n	8016270 <tcp_receive+0x6c4>
 801626c:	2301      	movs	r3, #1
 801626e:	e000      	b.n	8016272 <tcp_receive+0x6c6>
 8016270:	2300      	movs	r3, #0
 8016272:	4423      	add	r3, r4
 8016274:	b29a      	uxth	r2, r3
 8016276:	4b70      	ldr	r3, [pc, #448]	@ (8016438 <tcp_receive+0x88c>)
 8016278:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801627e:	4b6e      	ldr	r3, [pc, #440]	@ (8016438 <tcp_receive+0x88c>)
 8016280:	881b      	ldrh	r3, [r3, #0]
 8016282:	429a      	cmp	r2, r3
 8016284:	d274      	bcs.n	8016370 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016286:	4b6b      	ldr	r3, [pc, #428]	@ (8016434 <tcp_receive+0x888>)
 8016288:	68db      	ldr	r3, [r3, #12]
 801628a:	899b      	ldrh	r3, [r3, #12]
 801628c:	b29b      	uxth	r3, r3
 801628e:	4618      	mov	r0, r3
 8016290:	f7fa fee4 	bl	801105c <lwip_htons>
 8016294:	4603      	mov	r3, r0
 8016296:	b2db      	uxtb	r3, r3
 8016298:	f003 0301 	and.w	r3, r3, #1
 801629c:	2b00      	cmp	r3, #0
 801629e:	d01e      	beq.n	80162de <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80162a0:	4b64      	ldr	r3, [pc, #400]	@ (8016434 <tcp_receive+0x888>)
 80162a2:	68db      	ldr	r3, [r3, #12]
 80162a4:	899b      	ldrh	r3, [r3, #12]
 80162a6:	b29b      	uxth	r3, r3
 80162a8:	b21b      	sxth	r3, r3
 80162aa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80162ae:	b21c      	sxth	r4, r3
 80162b0:	4b60      	ldr	r3, [pc, #384]	@ (8016434 <tcp_receive+0x888>)
 80162b2:	68db      	ldr	r3, [r3, #12]
 80162b4:	899b      	ldrh	r3, [r3, #12]
 80162b6:	b29b      	uxth	r3, r3
 80162b8:	4618      	mov	r0, r3
 80162ba:	f7fa fecf 	bl	801105c <lwip_htons>
 80162be:	4603      	mov	r3, r0
 80162c0:	b2db      	uxtb	r3, r3
 80162c2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80162c6:	b29b      	uxth	r3, r3
 80162c8:	4618      	mov	r0, r3
 80162ca:	f7fa fec7 	bl	801105c <lwip_htons>
 80162ce:	4603      	mov	r3, r0
 80162d0:	b21b      	sxth	r3, r3
 80162d2:	4323      	orrs	r3, r4
 80162d4:	b21a      	sxth	r2, r3
 80162d6:	4b57      	ldr	r3, [pc, #348]	@ (8016434 <tcp_receive+0x888>)
 80162d8:	68db      	ldr	r3, [r3, #12]
 80162da:	b292      	uxth	r2, r2
 80162dc:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80162e2:	4b54      	ldr	r3, [pc, #336]	@ (8016434 <tcp_receive+0x888>)
 80162e4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80162e6:	4b53      	ldr	r3, [pc, #332]	@ (8016434 <tcp_receive+0x888>)
 80162e8:	68db      	ldr	r3, [r3, #12]
 80162ea:	899b      	ldrh	r3, [r3, #12]
 80162ec:	b29b      	uxth	r3, r3
 80162ee:	4618      	mov	r0, r3
 80162f0:	f7fa feb4 	bl	801105c <lwip_htons>
 80162f4:	4603      	mov	r3, r0
 80162f6:	b2db      	uxtb	r3, r3
 80162f8:	f003 0302 	and.w	r3, r3, #2
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d005      	beq.n	801630c <tcp_receive+0x760>
            inseg.len -= 1;
 8016300:	4b4c      	ldr	r3, [pc, #304]	@ (8016434 <tcp_receive+0x888>)
 8016302:	891b      	ldrh	r3, [r3, #8]
 8016304:	3b01      	subs	r3, #1
 8016306:	b29a      	uxth	r2, r3
 8016308:	4b4a      	ldr	r3, [pc, #296]	@ (8016434 <tcp_receive+0x888>)
 801630a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801630c:	4b49      	ldr	r3, [pc, #292]	@ (8016434 <tcp_receive+0x888>)
 801630e:	685b      	ldr	r3, [r3, #4]
 8016310:	4a48      	ldr	r2, [pc, #288]	@ (8016434 <tcp_receive+0x888>)
 8016312:	8912      	ldrh	r2, [r2, #8]
 8016314:	4611      	mov	r1, r2
 8016316:	4618      	mov	r0, r3
 8016318:	f7fc f9d4 	bl	80126c4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801631c:	4b45      	ldr	r3, [pc, #276]	@ (8016434 <tcp_receive+0x888>)
 801631e:	891c      	ldrh	r4, [r3, #8]
 8016320:	4b44      	ldr	r3, [pc, #272]	@ (8016434 <tcp_receive+0x888>)
 8016322:	68db      	ldr	r3, [r3, #12]
 8016324:	899b      	ldrh	r3, [r3, #12]
 8016326:	b29b      	uxth	r3, r3
 8016328:	4618      	mov	r0, r3
 801632a:	f7fa fe97 	bl	801105c <lwip_htons>
 801632e:	4603      	mov	r3, r0
 8016330:	b2db      	uxtb	r3, r3
 8016332:	f003 0303 	and.w	r3, r3, #3
 8016336:	2b00      	cmp	r3, #0
 8016338:	d001      	beq.n	801633e <tcp_receive+0x792>
 801633a:	2301      	movs	r3, #1
 801633c:	e000      	b.n	8016340 <tcp_receive+0x794>
 801633e:	2300      	movs	r3, #0
 8016340:	4423      	add	r3, r4
 8016342:	b29a      	uxth	r2, r3
 8016344:	4b3c      	ldr	r3, [pc, #240]	@ (8016438 <tcp_receive+0x88c>)
 8016346:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016348:	4b3b      	ldr	r3, [pc, #236]	@ (8016438 <tcp_receive+0x88c>)
 801634a:	881b      	ldrh	r3, [r3, #0]
 801634c:	461a      	mov	r2, r3
 801634e:	4b38      	ldr	r3, [pc, #224]	@ (8016430 <tcp_receive+0x884>)
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	441a      	add	r2, r3
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016358:	6879      	ldr	r1, [r7, #4]
 801635a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801635c:	440b      	add	r3, r1
 801635e:	429a      	cmp	r2, r3
 8016360:	d006      	beq.n	8016370 <tcp_receive+0x7c4>
 8016362:	4b36      	ldr	r3, [pc, #216]	@ (801643c <tcp_receive+0x890>)
 8016364:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8016368:	4935      	ldr	r1, [pc, #212]	@ (8016440 <tcp_receive+0x894>)
 801636a:	4836      	ldr	r0, [pc, #216]	@ (8016444 <tcp_receive+0x898>)
 801636c:	f005 f872 	bl	801b454 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016374:	2b00      	cmp	r3, #0
 8016376:	f000 80e6 	beq.w	8016546 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801637a:	4b2e      	ldr	r3, [pc, #184]	@ (8016434 <tcp_receive+0x888>)
 801637c:	68db      	ldr	r3, [r3, #12]
 801637e:	899b      	ldrh	r3, [r3, #12]
 8016380:	b29b      	uxth	r3, r3
 8016382:	4618      	mov	r0, r3
 8016384:	f7fa fe6a 	bl	801105c <lwip_htons>
 8016388:	4603      	mov	r3, r0
 801638a:	b2db      	uxtb	r3, r3
 801638c:	f003 0301 	and.w	r3, r3, #1
 8016390:	2b00      	cmp	r3, #0
 8016392:	d010      	beq.n	80163b6 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8016394:	e00a      	b.n	80163ac <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801639a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80163a0:	681a      	ldr	r2, [r3, #0]
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80163a6:	68f8      	ldr	r0, [r7, #12]
 80163a8:	f7fd fd93 	bl	8013ed2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d1f0      	bne.n	8016396 <tcp_receive+0x7ea>
 80163b4:	e0c7      	b.n	8016546 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80163ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80163bc:	e051      	b.n	8016462 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80163be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163c0:	68db      	ldr	r3, [r3, #12]
 80163c2:	899b      	ldrh	r3, [r3, #12]
 80163c4:	b29b      	uxth	r3, r3
 80163c6:	4618      	mov	r0, r3
 80163c8:	f7fa fe48 	bl	801105c <lwip_htons>
 80163cc:	4603      	mov	r3, r0
 80163ce:	b2db      	uxtb	r3, r3
 80163d0:	f003 0301 	and.w	r3, r3, #1
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d03c      	beq.n	8016452 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80163d8:	4b16      	ldr	r3, [pc, #88]	@ (8016434 <tcp_receive+0x888>)
 80163da:	68db      	ldr	r3, [r3, #12]
 80163dc:	899b      	ldrh	r3, [r3, #12]
 80163de:	b29b      	uxth	r3, r3
 80163e0:	4618      	mov	r0, r3
 80163e2:	f7fa fe3b 	bl	801105c <lwip_htons>
 80163e6:	4603      	mov	r3, r0
 80163e8:	b2db      	uxtb	r3, r3
 80163ea:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d12f      	bne.n	8016452 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80163f2:	4b10      	ldr	r3, [pc, #64]	@ (8016434 <tcp_receive+0x888>)
 80163f4:	68db      	ldr	r3, [r3, #12]
 80163f6:	899b      	ldrh	r3, [r3, #12]
 80163f8:	b29c      	uxth	r4, r3
 80163fa:	2001      	movs	r0, #1
 80163fc:	f7fa fe2e 	bl	801105c <lwip_htons>
 8016400:	4603      	mov	r3, r0
 8016402:	461a      	mov	r2, r3
 8016404:	4b0b      	ldr	r3, [pc, #44]	@ (8016434 <tcp_receive+0x888>)
 8016406:	68db      	ldr	r3, [r3, #12]
 8016408:	4322      	orrs	r2, r4
 801640a:	b292      	uxth	r2, r2
 801640c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801640e:	4b09      	ldr	r3, [pc, #36]	@ (8016434 <tcp_receive+0x888>)
 8016410:	891c      	ldrh	r4, [r3, #8]
 8016412:	4b08      	ldr	r3, [pc, #32]	@ (8016434 <tcp_receive+0x888>)
 8016414:	68db      	ldr	r3, [r3, #12]
 8016416:	899b      	ldrh	r3, [r3, #12]
 8016418:	b29b      	uxth	r3, r3
 801641a:	4618      	mov	r0, r3
 801641c:	f7fa fe1e 	bl	801105c <lwip_htons>
 8016420:	4603      	mov	r3, r0
 8016422:	b2db      	uxtb	r3, r3
 8016424:	f003 0303 	and.w	r3, r3, #3
 8016428:	2b00      	cmp	r3, #0
 801642a:	d00d      	beq.n	8016448 <tcp_receive+0x89c>
 801642c:	2301      	movs	r3, #1
 801642e:	e00c      	b.n	801644a <tcp_receive+0x89e>
 8016430:	240081c4 	.word	0x240081c4
 8016434:	240081a4 	.word	0x240081a4
 8016438:	240081ce 	.word	0x240081ce
 801643c:	0801daf0 	.word	0x0801daf0
 8016440:	0801de98 	.word	0x0801de98
 8016444:	0801db3c 	.word	0x0801db3c
 8016448:	2300      	movs	r3, #0
 801644a:	4423      	add	r3, r4
 801644c:	b29a      	uxth	r2, r3
 801644e:	4b98      	ldr	r3, [pc, #608]	@ (80166b0 <tcp_receive+0xb04>)
 8016450:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016454:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801645c:	6938      	ldr	r0, [r7, #16]
 801645e:	f7fd fd38 	bl	8013ed2 <tcp_seg_free>
            while (next &&
 8016462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016464:	2b00      	cmp	r3, #0
 8016466:	d00e      	beq.n	8016486 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016468:	4b91      	ldr	r3, [pc, #580]	@ (80166b0 <tcp_receive+0xb04>)
 801646a:	881b      	ldrh	r3, [r3, #0]
 801646c:	461a      	mov	r2, r3
 801646e:	4b91      	ldr	r3, [pc, #580]	@ (80166b4 <tcp_receive+0xb08>)
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	441a      	add	r2, r3
 8016474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016476:	68db      	ldr	r3, [r3, #12]
 8016478:	685b      	ldr	r3, [r3, #4]
 801647a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801647c:	8909      	ldrh	r1, [r1, #8]
 801647e:	440b      	add	r3, r1
 8016480:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016482:	2b00      	cmp	r3, #0
 8016484:	da9b      	bge.n	80163be <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016488:	2b00      	cmp	r3, #0
 801648a:	d059      	beq.n	8016540 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801648c:	4b88      	ldr	r3, [pc, #544]	@ (80166b0 <tcp_receive+0xb04>)
 801648e:	881b      	ldrh	r3, [r3, #0]
 8016490:	461a      	mov	r2, r3
 8016492:	4b88      	ldr	r3, [pc, #544]	@ (80166b4 <tcp_receive+0xb08>)
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	441a      	add	r2, r3
 8016498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801649a:	68db      	ldr	r3, [r3, #12]
 801649c:	685b      	ldr	r3, [r3, #4]
 801649e:	1ad3      	subs	r3, r2, r3
            if (next &&
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	dd4d      	ble.n	8016540 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80164a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80164a6:	68db      	ldr	r3, [r3, #12]
 80164a8:	685b      	ldr	r3, [r3, #4]
 80164aa:	b29a      	uxth	r2, r3
 80164ac:	4b81      	ldr	r3, [pc, #516]	@ (80166b4 <tcp_receive+0xb08>)
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	b29b      	uxth	r3, r3
 80164b2:	1ad3      	subs	r3, r2, r3
 80164b4:	b29a      	uxth	r2, r3
 80164b6:	4b80      	ldr	r3, [pc, #512]	@ (80166b8 <tcp_receive+0xb0c>)
 80164b8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80164ba:	4b7f      	ldr	r3, [pc, #508]	@ (80166b8 <tcp_receive+0xb0c>)
 80164bc:	68db      	ldr	r3, [r3, #12]
 80164be:	899b      	ldrh	r3, [r3, #12]
 80164c0:	b29b      	uxth	r3, r3
 80164c2:	4618      	mov	r0, r3
 80164c4:	f7fa fdca 	bl	801105c <lwip_htons>
 80164c8:	4603      	mov	r3, r0
 80164ca:	b2db      	uxtb	r3, r3
 80164cc:	f003 0302 	and.w	r3, r3, #2
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d005      	beq.n	80164e0 <tcp_receive+0x934>
                inseg.len -= 1;
 80164d4:	4b78      	ldr	r3, [pc, #480]	@ (80166b8 <tcp_receive+0xb0c>)
 80164d6:	891b      	ldrh	r3, [r3, #8]
 80164d8:	3b01      	subs	r3, #1
 80164da:	b29a      	uxth	r2, r3
 80164dc:	4b76      	ldr	r3, [pc, #472]	@ (80166b8 <tcp_receive+0xb0c>)
 80164de:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80164e0:	4b75      	ldr	r3, [pc, #468]	@ (80166b8 <tcp_receive+0xb0c>)
 80164e2:	685b      	ldr	r3, [r3, #4]
 80164e4:	4a74      	ldr	r2, [pc, #464]	@ (80166b8 <tcp_receive+0xb0c>)
 80164e6:	8912      	ldrh	r2, [r2, #8]
 80164e8:	4611      	mov	r1, r2
 80164ea:	4618      	mov	r0, r3
 80164ec:	f7fc f8ea 	bl	80126c4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80164f0:	4b71      	ldr	r3, [pc, #452]	@ (80166b8 <tcp_receive+0xb0c>)
 80164f2:	891c      	ldrh	r4, [r3, #8]
 80164f4:	4b70      	ldr	r3, [pc, #448]	@ (80166b8 <tcp_receive+0xb0c>)
 80164f6:	68db      	ldr	r3, [r3, #12]
 80164f8:	899b      	ldrh	r3, [r3, #12]
 80164fa:	b29b      	uxth	r3, r3
 80164fc:	4618      	mov	r0, r3
 80164fe:	f7fa fdad 	bl	801105c <lwip_htons>
 8016502:	4603      	mov	r3, r0
 8016504:	b2db      	uxtb	r3, r3
 8016506:	f003 0303 	and.w	r3, r3, #3
 801650a:	2b00      	cmp	r3, #0
 801650c:	d001      	beq.n	8016512 <tcp_receive+0x966>
 801650e:	2301      	movs	r3, #1
 8016510:	e000      	b.n	8016514 <tcp_receive+0x968>
 8016512:	2300      	movs	r3, #0
 8016514:	4423      	add	r3, r4
 8016516:	b29a      	uxth	r2, r3
 8016518:	4b65      	ldr	r3, [pc, #404]	@ (80166b0 <tcp_receive+0xb04>)
 801651a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801651c:	4b64      	ldr	r3, [pc, #400]	@ (80166b0 <tcp_receive+0xb04>)
 801651e:	881b      	ldrh	r3, [r3, #0]
 8016520:	461a      	mov	r2, r3
 8016522:	4b64      	ldr	r3, [pc, #400]	@ (80166b4 <tcp_receive+0xb08>)
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	441a      	add	r2, r3
 8016528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801652a:	68db      	ldr	r3, [r3, #12]
 801652c:	685b      	ldr	r3, [r3, #4]
 801652e:	429a      	cmp	r2, r3
 8016530:	d006      	beq.n	8016540 <tcp_receive+0x994>
 8016532:	4b62      	ldr	r3, [pc, #392]	@ (80166bc <tcp_receive+0xb10>)
 8016534:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8016538:	4961      	ldr	r1, [pc, #388]	@ (80166c0 <tcp_receive+0xb14>)
 801653a:	4862      	ldr	r0, [pc, #392]	@ (80166c4 <tcp_receive+0xb18>)
 801653c:	f004 ff8a 	bl	801b454 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016544:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8016546:	4b5a      	ldr	r3, [pc, #360]	@ (80166b0 <tcp_receive+0xb04>)
 8016548:	881b      	ldrh	r3, [r3, #0]
 801654a:	461a      	mov	r2, r3
 801654c:	4b59      	ldr	r3, [pc, #356]	@ (80166b4 <tcp_receive+0xb08>)
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	441a      	add	r2, r3
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801655a:	4b55      	ldr	r3, [pc, #340]	@ (80166b0 <tcp_receive+0xb04>)
 801655c:	881b      	ldrh	r3, [r3, #0]
 801655e:	429a      	cmp	r2, r3
 8016560:	d206      	bcs.n	8016570 <tcp_receive+0x9c4>
 8016562:	4b56      	ldr	r3, [pc, #344]	@ (80166bc <tcp_receive+0xb10>)
 8016564:	f240 6207 	movw	r2, #1543	@ 0x607
 8016568:	4957      	ldr	r1, [pc, #348]	@ (80166c8 <tcp_receive+0xb1c>)
 801656a:	4856      	ldr	r0, [pc, #344]	@ (80166c4 <tcp_receive+0xb18>)
 801656c:	f004 ff72 	bl	801b454 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016574:	4b4e      	ldr	r3, [pc, #312]	@ (80166b0 <tcp_receive+0xb04>)
 8016576:	881b      	ldrh	r3, [r3, #0]
 8016578:	1ad3      	subs	r3, r2, r3
 801657a:	b29a      	uxth	r2, r3
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016580:	6878      	ldr	r0, [r7, #4]
 8016582:	f7fc ffc5 	bl	8013510 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8016586:	4b4c      	ldr	r3, [pc, #304]	@ (80166b8 <tcp_receive+0xb0c>)
 8016588:	685b      	ldr	r3, [r3, #4]
 801658a:	891b      	ldrh	r3, [r3, #8]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d006      	beq.n	801659e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8016590:	4b49      	ldr	r3, [pc, #292]	@ (80166b8 <tcp_receive+0xb0c>)
 8016592:	685b      	ldr	r3, [r3, #4]
 8016594:	4a4d      	ldr	r2, [pc, #308]	@ (80166cc <tcp_receive+0xb20>)
 8016596:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016598:	4b47      	ldr	r3, [pc, #284]	@ (80166b8 <tcp_receive+0xb0c>)
 801659a:	2200      	movs	r2, #0
 801659c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801659e:	4b46      	ldr	r3, [pc, #280]	@ (80166b8 <tcp_receive+0xb0c>)
 80165a0:	68db      	ldr	r3, [r3, #12]
 80165a2:	899b      	ldrh	r3, [r3, #12]
 80165a4:	b29b      	uxth	r3, r3
 80165a6:	4618      	mov	r0, r3
 80165a8:	f7fa fd58 	bl	801105c <lwip_htons>
 80165ac:	4603      	mov	r3, r0
 80165ae:	b2db      	uxtb	r3, r3
 80165b0:	f003 0301 	and.w	r3, r3, #1
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	f000 80b8 	beq.w	801672a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80165ba:	4b45      	ldr	r3, [pc, #276]	@ (80166d0 <tcp_receive+0xb24>)
 80165bc:	781b      	ldrb	r3, [r3, #0]
 80165be:	f043 0320 	orr.w	r3, r3, #32
 80165c2:	b2da      	uxtb	r2, r3
 80165c4:	4b42      	ldr	r3, [pc, #264]	@ (80166d0 <tcp_receive+0xb24>)
 80165c6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80165c8:	e0af      	b.n	801672a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80165ce:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80165d4:	68db      	ldr	r3, [r3, #12]
 80165d6:	685b      	ldr	r3, [r3, #4]
 80165d8:	4a36      	ldr	r2, [pc, #216]	@ (80166b4 <tcp_receive+0xb08>)
 80165da:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80165dc:	68bb      	ldr	r3, [r7, #8]
 80165de:	891b      	ldrh	r3, [r3, #8]
 80165e0:	461c      	mov	r4, r3
 80165e2:	68bb      	ldr	r3, [r7, #8]
 80165e4:	68db      	ldr	r3, [r3, #12]
 80165e6:	899b      	ldrh	r3, [r3, #12]
 80165e8:	b29b      	uxth	r3, r3
 80165ea:	4618      	mov	r0, r3
 80165ec:	f7fa fd36 	bl	801105c <lwip_htons>
 80165f0:	4603      	mov	r3, r0
 80165f2:	b2db      	uxtb	r3, r3
 80165f4:	f003 0303 	and.w	r3, r3, #3
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d001      	beq.n	8016600 <tcp_receive+0xa54>
 80165fc:	2301      	movs	r3, #1
 80165fe:	e000      	b.n	8016602 <tcp_receive+0xa56>
 8016600:	2300      	movs	r3, #0
 8016602:	191a      	adds	r2, r3, r4
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016608:	441a      	add	r2, r3
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016612:	461c      	mov	r4, r3
 8016614:	68bb      	ldr	r3, [r7, #8]
 8016616:	891b      	ldrh	r3, [r3, #8]
 8016618:	461d      	mov	r5, r3
 801661a:	68bb      	ldr	r3, [r7, #8]
 801661c:	68db      	ldr	r3, [r3, #12]
 801661e:	899b      	ldrh	r3, [r3, #12]
 8016620:	b29b      	uxth	r3, r3
 8016622:	4618      	mov	r0, r3
 8016624:	f7fa fd1a 	bl	801105c <lwip_htons>
 8016628:	4603      	mov	r3, r0
 801662a:	b2db      	uxtb	r3, r3
 801662c:	f003 0303 	and.w	r3, r3, #3
 8016630:	2b00      	cmp	r3, #0
 8016632:	d001      	beq.n	8016638 <tcp_receive+0xa8c>
 8016634:	2301      	movs	r3, #1
 8016636:	e000      	b.n	801663a <tcp_receive+0xa8e>
 8016638:	2300      	movs	r3, #0
 801663a:	442b      	add	r3, r5
 801663c:	429c      	cmp	r4, r3
 801663e:	d206      	bcs.n	801664e <tcp_receive+0xaa2>
 8016640:	4b1e      	ldr	r3, [pc, #120]	@ (80166bc <tcp_receive+0xb10>)
 8016642:	f240 622b 	movw	r2, #1579	@ 0x62b
 8016646:	4923      	ldr	r1, [pc, #140]	@ (80166d4 <tcp_receive+0xb28>)
 8016648:	481e      	ldr	r0, [pc, #120]	@ (80166c4 <tcp_receive+0xb18>)
 801664a:	f004 ff03 	bl	801b454 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801664e:	68bb      	ldr	r3, [r7, #8]
 8016650:	891b      	ldrh	r3, [r3, #8]
 8016652:	461c      	mov	r4, r3
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	68db      	ldr	r3, [r3, #12]
 8016658:	899b      	ldrh	r3, [r3, #12]
 801665a:	b29b      	uxth	r3, r3
 801665c:	4618      	mov	r0, r3
 801665e:	f7fa fcfd 	bl	801105c <lwip_htons>
 8016662:	4603      	mov	r3, r0
 8016664:	b2db      	uxtb	r3, r3
 8016666:	f003 0303 	and.w	r3, r3, #3
 801666a:	2b00      	cmp	r3, #0
 801666c:	d001      	beq.n	8016672 <tcp_receive+0xac6>
 801666e:	2301      	movs	r3, #1
 8016670:	e000      	b.n	8016674 <tcp_receive+0xac8>
 8016672:	2300      	movs	r3, #0
 8016674:	1919      	adds	r1, r3, r4
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801667a:	b28b      	uxth	r3, r1
 801667c:	1ad3      	subs	r3, r2, r3
 801667e:	b29a      	uxth	r2, r3
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8016684:	6878      	ldr	r0, [r7, #4]
 8016686:	f7fc ff43 	bl	8013510 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801668a:	68bb      	ldr	r3, [r7, #8]
 801668c:	685b      	ldr	r3, [r3, #4]
 801668e:	891b      	ldrh	r3, [r3, #8]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d028      	beq.n	80166e6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8016694:	4b0d      	ldr	r3, [pc, #52]	@ (80166cc <tcp_receive+0xb20>)
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d01d      	beq.n	80166d8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801669c:	4b0b      	ldr	r3, [pc, #44]	@ (80166cc <tcp_receive+0xb20>)
 801669e:	681a      	ldr	r2, [r3, #0]
 80166a0:	68bb      	ldr	r3, [r7, #8]
 80166a2:	685b      	ldr	r3, [r3, #4]
 80166a4:	4619      	mov	r1, r3
 80166a6:	4610      	mov	r0, r2
 80166a8:	f7fc fa60 	bl	8012b6c <pbuf_cat>
 80166ac:	e018      	b.n	80166e0 <tcp_receive+0xb34>
 80166ae:	bf00      	nop
 80166b0:	240081ce 	.word	0x240081ce
 80166b4:	240081c4 	.word	0x240081c4
 80166b8:	240081a4 	.word	0x240081a4
 80166bc:	0801daf0 	.word	0x0801daf0
 80166c0:	0801ded0 	.word	0x0801ded0
 80166c4:	0801db3c 	.word	0x0801db3c
 80166c8:	0801df0c 	.word	0x0801df0c
 80166cc:	240081d4 	.word	0x240081d4
 80166d0:	240081d1 	.word	0x240081d1
 80166d4:	0801df2c 	.word	0x0801df2c
            } else {
              recv_data = cseg->p;
 80166d8:	68bb      	ldr	r3, [r7, #8]
 80166da:	685b      	ldr	r3, [r3, #4]
 80166dc:	4a70      	ldr	r2, [pc, #448]	@ (80168a0 <tcp_receive+0xcf4>)
 80166de:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80166e0:	68bb      	ldr	r3, [r7, #8]
 80166e2:	2200      	movs	r2, #0
 80166e4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80166e6:	68bb      	ldr	r3, [r7, #8]
 80166e8:	68db      	ldr	r3, [r3, #12]
 80166ea:	899b      	ldrh	r3, [r3, #12]
 80166ec:	b29b      	uxth	r3, r3
 80166ee:	4618      	mov	r0, r3
 80166f0:	f7fa fcb4 	bl	801105c <lwip_htons>
 80166f4:	4603      	mov	r3, r0
 80166f6:	b2db      	uxtb	r3, r3
 80166f8:	f003 0301 	and.w	r3, r3, #1
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d00d      	beq.n	801671c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016700:	4b68      	ldr	r3, [pc, #416]	@ (80168a4 <tcp_receive+0xcf8>)
 8016702:	781b      	ldrb	r3, [r3, #0]
 8016704:	f043 0320 	orr.w	r3, r3, #32
 8016708:	b2da      	uxtb	r2, r3
 801670a:	4b66      	ldr	r3, [pc, #408]	@ (80168a4 <tcp_receive+0xcf8>)
 801670c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	7d1b      	ldrb	r3, [r3, #20]
 8016712:	2b04      	cmp	r3, #4
 8016714:	d102      	bne.n	801671c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	2207      	movs	r2, #7
 801671a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801671c:	68bb      	ldr	r3, [r7, #8]
 801671e:	681a      	ldr	r2, [r3, #0]
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8016724:	68b8      	ldr	r0, [r7, #8]
 8016726:	f7fd fbd4 	bl	8013ed2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801672e:	2b00      	cmp	r3, #0
 8016730:	d008      	beq.n	8016744 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016736:	68db      	ldr	r3, [r3, #12]
 8016738:	685a      	ldr	r2, [r3, #4]
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801673e:	429a      	cmp	r2, r3
 8016740:	f43f af43 	beq.w	80165ca <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	8b5b      	ldrh	r3, [r3, #26]
 8016748:	f003 0301 	and.w	r3, r3, #1
 801674c:	2b00      	cmp	r3, #0
 801674e:	d00e      	beq.n	801676e <tcp_receive+0xbc2>
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	8b5b      	ldrh	r3, [r3, #26]
 8016754:	f023 0301 	bic.w	r3, r3, #1
 8016758:	b29a      	uxth	r2, r3
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	835a      	strh	r2, [r3, #26]
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	8b5b      	ldrh	r3, [r3, #26]
 8016762:	f043 0302 	orr.w	r3, r3, #2
 8016766:	b29a      	uxth	r2, r3
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801676c:	e187      	b.n	8016a7e <tcp_receive+0xed2>
        tcp_ack(pcb);
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	8b5b      	ldrh	r3, [r3, #26]
 8016772:	f043 0301 	orr.w	r3, r3, #1
 8016776:	b29a      	uxth	r2, r3
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801677c:	e17f      	b.n	8016a7e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016782:	2b00      	cmp	r3, #0
 8016784:	d106      	bne.n	8016794 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8016786:	4848      	ldr	r0, [pc, #288]	@ (80168a8 <tcp_receive+0xcfc>)
 8016788:	f7fd fbbc 	bl	8013f04 <tcp_seg_copy>
 801678c:	4602      	mov	r2, r0
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	675a      	str	r2, [r3, #116]	@ 0x74
 8016792:	e16c      	b.n	8016a6e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8016794:	2300      	movs	r3, #0
 8016796:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801679c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801679e:	e156      	b.n	8016a4e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80167a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167a2:	68db      	ldr	r3, [r3, #12]
 80167a4:	685a      	ldr	r2, [r3, #4]
 80167a6:	4b41      	ldr	r3, [pc, #260]	@ (80168ac <tcp_receive+0xd00>)
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	429a      	cmp	r2, r3
 80167ac:	d11d      	bne.n	80167ea <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80167ae:	4b3e      	ldr	r3, [pc, #248]	@ (80168a8 <tcp_receive+0xcfc>)
 80167b0:	891a      	ldrh	r2, [r3, #8]
 80167b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167b4:	891b      	ldrh	r3, [r3, #8]
 80167b6:	429a      	cmp	r2, r3
 80167b8:	f240 814e 	bls.w	8016a58 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80167bc:	483a      	ldr	r0, [pc, #232]	@ (80168a8 <tcp_receive+0xcfc>)
 80167be:	f7fd fba1 	bl	8013f04 <tcp_seg_copy>
 80167c2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80167c4:	697b      	ldr	r3, [r7, #20]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	f000 8148 	beq.w	8016a5c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80167cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d003      	beq.n	80167da <tcp_receive+0xc2e>
                    prev->next = cseg;
 80167d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167d4:	697a      	ldr	r2, [r7, #20]
 80167d6:	601a      	str	r2, [r3, #0]
 80167d8:	e002      	b.n	80167e0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	697a      	ldr	r2, [r7, #20]
 80167de:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80167e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80167e2:	6978      	ldr	r0, [r7, #20]
 80167e4:	f7ff f8de 	bl	80159a4 <tcp_oos_insert_segment>
                }
                break;
 80167e8:	e138      	b.n	8016a5c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80167ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d117      	bne.n	8016820 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80167f0:	4b2e      	ldr	r3, [pc, #184]	@ (80168ac <tcp_receive+0xd00>)
 80167f2:	681a      	ldr	r2, [r3, #0]
 80167f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167f6:	68db      	ldr	r3, [r3, #12]
 80167f8:	685b      	ldr	r3, [r3, #4]
 80167fa:	1ad3      	subs	r3, r2, r3
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	da57      	bge.n	80168b0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016800:	4829      	ldr	r0, [pc, #164]	@ (80168a8 <tcp_receive+0xcfc>)
 8016802:	f7fd fb7f 	bl	8013f04 <tcp_seg_copy>
 8016806:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8016808:	69bb      	ldr	r3, [r7, #24]
 801680a:	2b00      	cmp	r3, #0
 801680c:	f000 8128 	beq.w	8016a60 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	69ba      	ldr	r2, [r7, #24]
 8016814:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8016816:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016818:	69b8      	ldr	r0, [r7, #24]
 801681a:	f7ff f8c3 	bl	80159a4 <tcp_oos_insert_segment>
                  }
                  break;
 801681e:	e11f      	b.n	8016a60 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8016820:	4b22      	ldr	r3, [pc, #136]	@ (80168ac <tcp_receive+0xd00>)
 8016822:	681a      	ldr	r2, [r3, #0]
 8016824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016826:	68db      	ldr	r3, [r3, #12]
 8016828:	685b      	ldr	r3, [r3, #4]
 801682a:	1ad3      	subs	r3, r2, r3
 801682c:	3b01      	subs	r3, #1
 801682e:	2b00      	cmp	r3, #0
 8016830:	db3e      	blt.n	80168b0 <tcp_receive+0xd04>
 8016832:	4b1e      	ldr	r3, [pc, #120]	@ (80168ac <tcp_receive+0xd00>)
 8016834:	681a      	ldr	r2, [r3, #0]
 8016836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016838:	68db      	ldr	r3, [r3, #12]
 801683a:	685b      	ldr	r3, [r3, #4]
 801683c:	1ad3      	subs	r3, r2, r3
 801683e:	3301      	adds	r3, #1
 8016840:	2b00      	cmp	r3, #0
 8016842:	dc35      	bgt.n	80168b0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016844:	4818      	ldr	r0, [pc, #96]	@ (80168a8 <tcp_receive+0xcfc>)
 8016846:	f7fd fb5d 	bl	8013f04 <tcp_seg_copy>
 801684a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801684c:	69fb      	ldr	r3, [r7, #28]
 801684e:	2b00      	cmp	r3, #0
 8016850:	f000 8108 	beq.w	8016a64 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8016854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016856:	68db      	ldr	r3, [r3, #12]
 8016858:	685b      	ldr	r3, [r3, #4]
 801685a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801685c:	8912      	ldrh	r2, [r2, #8]
 801685e:	441a      	add	r2, r3
 8016860:	4b12      	ldr	r3, [pc, #72]	@ (80168ac <tcp_receive+0xd00>)
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	1ad3      	subs	r3, r2, r3
 8016866:	2b00      	cmp	r3, #0
 8016868:	dd12      	ble.n	8016890 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801686a:	4b10      	ldr	r3, [pc, #64]	@ (80168ac <tcp_receive+0xd00>)
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	b29a      	uxth	r2, r3
 8016870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016872:	68db      	ldr	r3, [r3, #12]
 8016874:	685b      	ldr	r3, [r3, #4]
 8016876:	b29b      	uxth	r3, r3
 8016878:	1ad3      	subs	r3, r2, r3
 801687a:	b29a      	uxth	r2, r3
 801687c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801687e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8016880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016882:	685a      	ldr	r2, [r3, #4]
 8016884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016886:	891b      	ldrh	r3, [r3, #8]
 8016888:	4619      	mov	r1, r3
 801688a:	4610      	mov	r0, r2
 801688c:	f7fb ff1a 	bl	80126c4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8016890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016892:	69fa      	ldr	r2, [r7, #28]
 8016894:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8016896:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016898:	69f8      	ldr	r0, [r7, #28]
 801689a:	f7ff f883 	bl	80159a4 <tcp_oos_insert_segment>
                  }
                  break;
 801689e:	e0e1      	b.n	8016a64 <tcp_receive+0xeb8>
 80168a0:	240081d4 	.word	0x240081d4
 80168a4:	240081d1 	.word	0x240081d1
 80168a8:	240081a4 	.word	0x240081a4
 80168ac:	240081c4 	.word	0x240081c4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80168b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168b2:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80168b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	f040 80c5 	bne.w	8016a48 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80168be:	4b7f      	ldr	r3, [pc, #508]	@ (8016abc <tcp_receive+0xf10>)
 80168c0:	681a      	ldr	r2, [r3, #0]
 80168c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168c4:	68db      	ldr	r3, [r3, #12]
 80168c6:	685b      	ldr	r3, [r3, #4]
 80168c8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	f340 80bc 	ble.w	8016a48 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80168d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168d2:	68db      	ldr	r3, [r3, #12]
 80168d4:	899b      	ldrh	r3, [r3, #12]
 80168d6:	b29b      	uxth	r3, r3
 80168d8:	4618      	mov	r0, r3
 80168da:	f7fa fbbf 	bl	801105c <lwip_htons>
 80168de:	4603      	mov	r3, r0
 80168e0:	b2db      	uxtb	r3, r3
 80168e2:	f003 0301 	and.w	r3, r3, #1
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	f040 80be 	bne.w	8016a68 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80168ec:	4874      	ldr	r0, [pc, #464]	@ (8016ac0 <tcp_receive+0xf14>)
 80168ee:	f7fd fb09 	bl	8013f04 <tcp_seg_copy>
 80168f2:	4602      	mov	r2, r0
 80168f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168f6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80168f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	f000 80b5 	beq.w	8016a6c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8016902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016904:	68db      	ldr	r3, [r3, #12]
 8016906:	685b      	ldr	r3, [r3, #4]
 8016908:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801690a:	8912      	ldrh	r2, [r2, #8]
 801690c:	441a      	add	r2, r3
 801690e:	4b6b      	ldr	r3, [pc, #428]	@ (8016abc <tcp_receive+0xf10>)
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	1ad3      	subs	r3, r2, r3
 8016914:	2b00      	cmp	r3, #0
 8016916:	dd12      	ble.n	801693e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016918:	4b68      	ldr	r3, [pc, #416]	@ (8016abc <tcp_receive+0xf10>)
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	b29a      	uxth	r2, r3
 801691e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016920:	68db      	ldr	r3, [r3, #12]
 8016922:	685b      	ldr	r3, [r3, #4]
 8016924:	b29b      	uxth	r3, r3
 8016926:	1ad3      	subs	r3, r2, r3
 8016928:	b29a      	uxth	r2, r3
 801692a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801692c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801692e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016930:	685a      	ldr	r2, [r3, #4]
 8016932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016934:	891b      	ldrh	r3, [r3, #8]
 8016936:	4619      	mov	r1, r3
 8016938:	4610      	mov	r0, r2
 801693a:	f7fb fec3 	bl	80126c4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801693e:	4b61      	ldr	r3, [pc, #388]	@ (8016ac4 <tcp_receive+0xf18>)
 8016940:	881b      	ldrh	r3, [r3, #0]
 8016942:	461a      	mov	r2, r3
 8016944:	4b5d      	ldr	r3, [pc, #372]	@ (8016abc <tcp_receive+0xf10>)
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	441a      	add	r2, r3
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801694e:	6879      	ldr	r1, [r7, #4]
 8016950:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016952:	440b      	add	r3, r1
 8016954:	1ad3      	subs	r3, r2, r3
 8016956:	2b00      	cmp	r3, #0
 8016958:	f340 8088 	ble.w	8016a6c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801695c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	68db      	ldr	r3, [r3, #12]
 8016962:	899b      	ldrh	r3, [r3, #12]
 8016964:	b29b      	uxth	r3, r3
 8016966:	4618      	mov	r0, r3
 8016968:	f7fa fb78 	bl	801105c <lwip_htons>
 801696c:	4603      	mov	r3, r0
 801696e:	b2db      	uxtb	r3, r3
 8016970:	f003 0301 	and.w	r3, r3, #1
 8016974:	2b00      	cmp	r3, #0
 8016976:	d021      	beq.n	80169bc <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	68db      	ldr	r3, [r3, #12]
 801697e:	899b      	ldrh	r3, [r3, #12]
 8016980:	b29b      	uxth	r3, r3
 8016982:	b21b      	sxth	r3, r3
 8016984:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8016988:	b21c      	sxth	r4, r3
 801698a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	68db      	ldr	r3, [r3, #12]
 8016990:	899b      	ldrh	r3, [r3, #12]
 8016992:	b29b      	uxth	r3, r3
 8016994:	4618      	mov	r0, r3
 8016996:	f7fa fb61 	bl	801105c <lwip_htons>
 801699a:	4603      	mov	r3, r0
 801699c:	b2db      	uxtb	r3, r3
 801699e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80169a2:	b29b      	uxth	r3, r3
 80169a4:	4618      	mov	r0, r3
 80169a6:	f7fa fb59 	bl	801105c <lwip_htons>
 80169aa:	4603      	mov	r3, r0
 80169ac:	b21b      	sxth	r3, r3
 80169ae:	4323      	orrs	r3, r4
 80169b0:	b21a      	sxth	r2, r3
 80169b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	68db      	ldr	r3, [r3, #12]
 80169b8:	b292      	uxth	r2, r2
 80169ba:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80169c0:	b29a      	uxth	r2, r3
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80169c6:	4413      	add	r3, r2
 80169c8:	b299      	uxth	r1, r3
 80169ca:	4b3c      	ldr	r3, [pc, #240]	@ (8016abc <tcp_receive+0xf10>)
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	b29a      	uxth	r2, r3
 80169d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	1a8a      	subs	r2, r1, r2
 80169d6:	b292      	uxth	r2, r2
 80169d8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80169da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	685a      	ldr	r2, [r3, #4]
 80169e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	891b      	ldrh	r3, [r3, #8]
 80169e6:	4619      	mov	r1, r3
 80169e8:	4610      	mov	r0, r2
 80169ea:	f7fb fe6b 	bl	80126c4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80169ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	891c      	ldrh	r4, [r3, #8]
 80169f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	68db      	ldr	r3, [r3, #12]
 80169fa:	899b      	ldrh	r3, [r3, #12]
 80169fc:	b29b      	uxth	r3, r3
 80169fe:	4618      	mov	r0, r3
 8016a00:	f7fa fb2c 	bl	801105c <lwip_htons>
 8016a04:	4603      	mov	r3, r0
 8016a06:	b2db      	uxtb	r3, r3
 8016a08:	f003 0303 	and.w	r3, r3, #3
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d001      	beq.n	8016a14 <tcp_receive+0xe68>
 8016a10:	2301      	movs	r3, #1
 8016a12:	e000      	b.n	8016a16 <tcp_receive+0xe6a>
 8016a14:	2300      	movs	r3, #0
 8016a16:	4423      	add	r3, r4
 8016a18:	b29a      	uxth	r2, r3
 8016a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8016ac4 <tcp_receive+0xf18>)
 8016a1c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016a1e:	4b29      	ldr	r3, [pc, #164]	@ (8016ac4 <tcp_receive+0xf18>)
 8016a20:	881b      	ldrh	r3, [r3, #0]
 8016a22:	461a      	mov	r2, r3
 8016a24:	4b25      	ldr	r3, [pc, #148]	@ (8016abc <tcp_receive+0xf10>)
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	441a      	add	r2, r3
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a2e:	6879      	ldr	r1, [r7, #4]
 8016a30:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016a32:	440b      	add	r3, r1
 8016a34:	429a      	cmp	r2, r3
 8016a36:	d019      	beq.n	8016a6c <tcp_receive+0xec0>
 8016a38:	4b23      	ldr	r3, [pc, #140]	@ (8016ac8 <tcp_receive+0xf1c>)
 8016a3a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8016a3e:	4923      	ldr	r1, [pc, #140]	@ (8016acc <tcp_receive+0xf20>)
 8016a40:	4823      	ldr	r0, [pc, #140]	@ (8016ad0 <tcp_receive+0xf24>)
 8016a42:	f004 fd07 	bl	801b454 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8016a46:	e011      	b.n	8016a6c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	f47f aea5 	bne.w	80167a0 <tcp_receive+0xbf4>
 8016a56:	e00a      	b.n	8016a6e <tcp_receive+0xec2>
                break;
 8016a58:	bf00      	nop
 8016a5a:	e008      	b.n	8016a6e <tcp_receive+0xec2>
                break;
 8016a5c:	bf00      	nop
 8016a5e:	e006      	b.n	8016a6e <tcp_receive+0xec2>
                  break;
 8016a60:	bf00      	nop
 8016a62:	e004      	b.n	8016a6e <tcp_receive+0xec2>
                  break;
 8016a64:	bf00      	nop
 8016a66:	e002      	b.n	8016a6e <tcp_receive+0xec2>
                  break;
 8016a68:	bf00      	nop
 8016a6a:	e000      	b.n	8016a6e <tcp_receive+0xec2>
                break;
 8016a6c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8016a6e:	6878      	ldr	r0, [r7, #4]
 8016a70:	f001 fa30 	bl	8017ed4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8016a74:	e003      	b.n	8016a7e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8016a76:	6878      	ldr	r0, [r7, #4]
 8016a78:	f001 fa2c 	bl	8017ed4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016a7c:	e01a      	b.n	8016ab4 <tcp_receive+0xf08>
 8016a7e:	e019      	b.n	8016ab4 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8016a80:	4b0e      	ldr	r3, [pc, #56]	@ (8016abc <tcp_receive+0xf10>)
 8016a82:	681a      	ldr	r2, [r3, #0]
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a88:	1ad3      	subs	r3, r2, r3
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	db0a      	blt.n	8016aa4 <tcp_receive+0xef8>
 8016a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8016abc <tcp_receive+0xf10>)
 8016a90:	681a      	ldr	r2, [r3, #0]
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a96:	6879      	ldr	r1, [r7, #4]
 8016a98:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016a9a:	440b      	add	r3, r1
 8016a9c:	1ad3      	subs	r3, r2, r3
 8016a9e:	3301      	adds	r3, #1
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	dd07      	ble.n	8016ab4 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	8b5b      	ldrh	r3, [r3, #26]
 8016aa8:	f043 0302 	orr.w	r3, r3, #2
 8016aac:	b29a      	uxth	r2, r3
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8016ab2:	e7ff      	b.n	8016ab4 <tcp_receive+0xf08>
 8016ab4:	bf00      	nop
 8016ab6:	3750      	adds	r7, #80	@ 0x50
 8016ab8:	46bd      	mov	sp, r7
 8016aba:	bdb0      	pop	{r4, r5, r7, pc}
 8016abc:	240081c4 	.word	0x240081c4
 8016ac0:	240081a4 	.word	0x240081a4
 8016ac4:	240081ce 	.word	0x240081ce
 8016ac8:	0801daf0 	.word	0x0801daf0
 8016acc:	0801de98 	.word	0x0801de98
 8016ad0:	0801db3c 	.word	0x0801db3c

08016ad4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8016ad4:	b480      	push	{r7}
 8016ad6:	b083      	sub	sp, #12
 8016ad8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8016ada:	4b15      	ldr	r3, [pc, #84]	@ (8016b30 <tcp_get_next_optbyte+0x5c>)
 8016adc:	881b      	ldrh	r3, [r3, #0]
 8016ade:	1c5a      	adds	r2, r3, #1
 8016ae0:	b291      	uxth	r1, r2
 8016ae2:	4a13      	ldr	r2, [pc, #76]	@ (8016b30 <tcp_get_next_optbyte+0x5c>)
 8016ae4:	8011      	strh	r1, [r2, #0]
 8016ae6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016ae8:	4b12      	ldr	r3, [pc, #72]	@ (8016b34 <tcp_get_next_optbyte+0x60>)
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d004      	beq.n	8016afa <tcp_get_next_optbyte+0x26>
 8016af0:	4b11      	ldr	r3, [pc, #68]	@ (8016b38 <tcp_get_next_optbyte+0x64>)
 8016af2:	881b      	ldrh	r3, [r3, #0]
 8016af4:	88fa      	ldrh	r2, [r7, #6]
 8016af6:	429a      	cmp	r2, r3
 8016af8:	d208      	bcs.n	8016b0c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8016afa:	4b10      	ldr	r3, [pc, #64]	@ (8016b3c <tcp_get_next_optbyte+0x68>)
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	3314      	adds	r3, #20
 8016b00:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8016b02:	88fb      	ldrh	r3, [r7, #6]
 8016b04:	683a      	ldr	r2, [r7, #0]
 8016b06:	4413      	add	r3, r2
 8016b08:	781b      	ldrb	r3, [r3, #0]
 8016b0a:	e00b      	b.n	8016b24 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8016b0c:	88fb      	ldrh	r3, [r7, #6]
 8016b0e:	b2da      	uxtb	r2, r3
 8016b10:	4b09      	ldr	r3, [pc, #36]	@ (8016b38 <tcp_get_next_optbyte+0x64>)
 8016b12:	881b      	ldrh	r3, [r3, #0]
 8016b14:	b2db      	uxtb	r3, r3
 8016b16:	1ad3      	subs	r3, r2, r3
 8016b18:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8016b1a:	4b06      	ldr	r3, [pc, #24]	@ (8016b34 <tcp_get_next_optbyte+0x60>)
 8016b1c:	681a      	ldr	r2, [r3, #0]
 8016b1e:	797b      	ldrb	r3, [r7, #5]
 8016b20:	4413      	add	r3, r2
 8016b22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016b24:	4618      	mov	r0, r3
 8016b26:	370c      	adds	r7, #12
 8016b28:	46bd      	mov	sp, r7
 8016b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b2e:	4770      	bx	lr
 8016b30:	240081c0 	.word	0x240081c0
 8016b34:	240081bc 	.word	0x240081bc
 8016b38:	240081ba 	.word	0x240081ba
 8016b3c:	240081b4 	.word	0x240081b4

08016b40 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b084      	sub	sp, #16
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d106      	bne.n	8016b5c <tcp_parseopt+0x1c>
 8016b4e:	4b32      	ldr	r3, [pc, #200]	@ (8016c18 <tcp_parseopt+0xd8>)
 8016b50:	f240 727d 	movw	r2, #1917	@ 0x77d
 8016b54:	4931      	ldr	r1, [pc, #196]	@ (8016c1c <tcp_parseopt+0xdc>)
 8016b56:	4832      	ldr	r0, [pc, #200]	@ (8016c20 <tcp_parseopt+0xe0>)
 8016b58:	f004 fc7c 	bl	801b454 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8016b5c:	4b31      	ldr	r3, [pc, #196]	@ (8016c24 <tcp_parseopt+0xe4>)
 8016b5e:	881b      	ldrh	r3, [r3, #0]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d056      	beq.n	8016c12 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016b64:	4b30      	ldr	r3, [pc, #192]	@ (8016c28 <tcp_parseopt+0xe8>)
 8016b66:	2200      	movs	r2, #0
 8016b68:	801a      	strh	r2, [r3, #0]
 8016b6a:	e046      	b.n	8016bfa <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8016b6c:	f7ff ffb2 	bl	8016ad4 <tcp_get_next_optbyte>
 8016b70:	4603      	mov	r3, r0
 8016b72:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8016b74:	7bfb      	ldrb	r3, [r7, #15]
 8016b76:	2b02      	cmp	r3, #2
 8016b78:	d006      	beq.n	8016b88 <tcp_parseopt+0x48>
 8016b7a:	2b02      	cmp	r3, #2
 8016b7c:	dc2a      	bgt.n	8016bd4 <tcp_parseopt+0x94>
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d042      	beq.n	8016c08 <tcp_parseopt+0xc8>
 8016b82:	2b01      	cmp	r3, #1
 8016b84:	d038      	beq.n	8016bf8 <tcp_parseopt+0xb8>
 8016b86:	e025      	b.n	8016bd4 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016b88:	f7ff ffa4 	bl	8016ad4 <tcp_get_next_optbyte>
 8016b8c:	4603      	mov	r3, r0
 8016b8e:	2b04      	cmp	r3, #4
 8016b90:	d13c      	bne.n	8016c0c <tcp_parseopt+0xcc>
 8016b92:	4b25      	ldr	r3, [pc, #148]	@ (8016c28 <tcp_parseopt+0xe8>)
 8016b94:	881b      	ldrh	r3, [r3, #0]
 8016b96:	3301      	adds	r3, #1
 8016b98:	4a22      	ldr	r2, [pc, #136]	@ (8016c24 <tcp_parseopt+0xe4>)
 8016b9a:	8812      	ldrh	r2, [r2, #0]
 8016b9c:	4293      	cmp	r3, r2
 8016b9e:	da35      	bge.n	8016c0c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8016ba0:	f7ff ff98 	bl	8016ad4 <tcp_get_next_optbyte>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	021b      	lsls	r3, r3, #8
 8016ba8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016baa:	f7ff ff93 	bl	8016ad4 <tcp_get_next_optbyte>
 8016bae:	4603      	mov	r3, r0
 8016bb0:	461a      	mov	r2, r3
 8016bb2:	89bb      	ldrh	r3, [r7, #12]
 8016bb4:	4313      	orrs	r3, r2
 8016bb6:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016bb8:	89bb      	ldrh	r3, [r7, #12]
 8016bba:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8016bbe:	d804      	bhi.n	8016bca <tcp_parseopt+0x8a>
 8016bc0:	89bb      	ldrh	r3, [r7, #12]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d001      	beq.n	8016bca <tcp_parseopt+0x8a>
 8016bc6:	89ba      	ldrh	r2, [r7, #12]
 8016bc8:	e001      	b.n	8016bce <tcp_parseopt+0x8e>
 8016bca:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8016bd2:	e012      	b.n	8016bfa <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8016bd4:	f7ff ff7e 	bl	8016ad4 <tcp_get_next_optbyte>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8016bdc:	7afb      	ldrb	r3, [r7, #11]
 8016bde:	2b01      	cmp	r3, #1
 8016be0:	d916      	bls.n	8016c10 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8016be2:	7afb      	ldrb	r3, [r7, #11]
 8016be4:	b29a      	uxth	r2, r3
 8016be6:	4b10      	ldr	r3, [pc, #64]	@ (8016c28 <tcp_parseopt+0xe8>)
 8016be8:	881b      	ldrh	r3, [r3, #0]
 8016bea:	4413      	add	r3, r2
 8016bec:	b29b      	uxth	r3, r3
 8016bee:	3b02      	subs	r3, #2
 8016bf0:	b29a      	uxth	r2, r3
 8016bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8016c28 <tcp_parseopt+0xe8>)
 8016bf4:	801a      	strh	r2, [r3, #0]
 8016bf6:	e000      	b.n	8016bfa <tcp_parseopt+0xba>
          break;
 8016bf8:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8016c28 <tcp_parseopt+0xe8>)
 8016bfc:	881a      	ldrh	r2, [r3, #0]
 8016bfe:	4b09      	ldr	r3, [pc, #36]	@ (8016c24 <tcp_parseopt+0xe4>)
 8016c00:	881b      	ldrh	r3, [r3, #0]
 8016c02:	429a      	cmp	r2, r3
 8016c04:	d3b2      	bcc.n	8016b6c <tcp_parseopt+0x2c>
 8016c06:	e004      	b.n	8016c12 <tcp_parseopt+0xd2>
          return;
 8016c08:	bf00      	nop
 8016c0a:	e002      	b.n	8016c12 <tcp_parseopt+0xd2>
            return;
 8016c0c:	bf00      	nop
 8016c0e:	e000      	b.n	8016c12 <tcp_parseopt+0xd2>
            return;
 8016c10:	bf00      	nop
      }
    }
  }
}
 8016c12:	3710      	adds	r7, #16
 8016c14:	46bd      	mov	sp, r7
 8016c16:	bd80      	pop	{r7, pc}
 8016c18:	0801daf0 	.word	0x0801daf0
 8016c1c:	0801df54 	.word	0x0801df54
 8016c20:	0801db3c 	.word	0x0801db3c
 8016c24:	240081b8 	.word	0x240081b8
 8016c28:	240081c0 	.word	0x240081c0

08016c2c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016c2c:	b480      	push	{r7}
 8016c2e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016c30:	4b05      	ldr	r3, [pc, #20]	@ (8016c48 <tcp_trigger_input_pcb_close+0x1c>)
 8016c32:	781b      	ldrb	r3, [r3, #0]
 8016c34:	f043 0310 	orr.w	r3, r3, #16
 8016c38:	b2da      	uxtb	r2, r3
 8016c3a:	4b03      	ldr	r3, [pc, #12]	@ (8016c48 <tcp_trigger_input_pcb_close+0x1c>)
 8016c3c:	701a      	strb	r2, [r3, #0]
}
 8016c3e:	bf00      	nop
 8016c40:	46bd      	mov	sp, r7
 8016c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c46:	4770      	bx	lr
 8016c48:	240081d1 	.word	0x240081d1

08016c4c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b084      	sub	sp, #16
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	60f8      	str	r0, [r7, #12]
 8016c54:	60b9      	str	r1, [r7, #8]
 8016c56:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d00a      	beq.n	8016c74 <tcp_route+0x28>
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	7a1b      	ldrb	r3, [r3, #8]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d006      	beq.n	8016c74 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	7a1b      	ldrb	r3, [r3, #8]
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	f7fb fb22 	bl	80122b4 <netif_get_by_index>
 8016c70:	4603      	mov	r3, r0
 8016c72:	e003      	b.n	8016c7c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016c74:	6878      	ldr	r0, [r7, #4]
 8016c76:	f002 fed1 	bl	8019a1c <ip4_route>
 8016c7a:	4603      	mov	r3, r0
  }
}
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	3710      	adds	r7, #16
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}

08016c84 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8016c84:	b590      	push	{r4, r7, lr}
 8016c86:	b087      	sub	sp, #28
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	60f8      	str	r0, [r7, #12]
 8016c8c:	60b9      	str	r1, [r7, #8]
 8016c8e:	603b      	str	r3, [r7, #0]
 8016c90:	4613      	mov	r3, r2
 8016c92:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d105      	bne.n	8016ca6 <tcp_create_segment+0x22>
 8016c9a:	4b43      	ldr	r3, [pc, #268]	@ (8016da8 <tcp_create_segment+0x124>)
 8016c9c:	22a3      	movs	r2, #163	@ 0xa3
 8016c9e:	4943      	ldr	r1, [pc, #268]	@ (8016dac <tcp_create_segment+0x128>)
 8016ca0:	4843      	ldr	r0, [pc, #268]	@ (8016db0 <tcp_create_segment+0x12c>)
 8016ca2:	f004 fbd7 	bl	801b454 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8016ca6:	68bb      	ldr	r3, [r7, #8]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d105      	bne.n	8016cb8 <tcp_create_segment+0x34>
 8016cac:	4b3e      	ldr	r3, [pc, #248]	@ (8016da8 <tcp_create_segment+0x124>)
 8016cae:	22a4      	movs	r2, #164	@ 0xa4
 8016cb0:	4940      	ldr	r1, [pc, #256]	@ (8016db4 <tcp_create_segment+0x130>)
 8016cb2:	483f      	ldr	r0, [pc, #252]	@ (8016db0 <tcp_create_segment+0x12c>)
 8016cb4:	f004 fbce 	bl	801b454 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016cb8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016cbc:	009b      	lsls	r3, r3, #2
 8016cbe:	b2db      	uxtb	r3, r3
 8016cc0:	f003 0304 	and.w	r3, r3, #4
 8016cc4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8016cc6:	2003      	movs	r0, #3
 8016cc8:	f7fa ff68 	bl	8011b9c <memp_malloc>
 8016ccc:	6138      	str	r0, [r7, #16]
 8016cce:	693b      	ldr	r3, [r7, #16]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d104      	bne.n	8016cde <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016cd4:	68b8      	ldr	r0, [r7, #8]
 8016cd6:	f7fb fe7b 	bl	80129d0 <pbuf_free>
    return NULL;
 8016cda:	2300      	movs	r3, #0
 8016cdc:	e060      	b.n	8016da0 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8016cde:	693b      	ldr	r3, [r7, #16]
 8016ce0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8016ce4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8016ce6:	693b      	ldr	r3, [r7, #16]
 8016ce8:	2200      	movs	r2, #0
 8016cea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016cec:	693b      	ldr	r3, [r7, #16]
 8016cee:	68ba      	ldr	r2, [r7, #8]
 8016cf0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8016cf2:	68bb      	ldr	r3, [r7, #8]
 8016cf4:	891a      	ldrh	r2, [r3, #8]
 8016cf6:	7dfb      	ldrb	r3, [r7, #23]
 8016cf8:	b29b      	uxth	r3, r3
 8016cfa:	429a      	cmp	r2, r3
 8016cfc:	d205      	bcs.n	8016d0a <tcp_create_segment+0x86>
 8016cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8016da8 <tcp_create_segment+0x124>)
 8016d00:	22b0      	movs	r2, #176	@ 0xb0
 8016d02:	492d      	ldr	r1, [pc, #180]	@ (8016db8 <tcp_create_segment+0x134>)
 8016d04:	482a      	ldr	r0, [pc, #168]	@ (8016db0 <tcp_create_segment+0x12c>)
 8016d06:	f004 fba5 	bl	801b454 <iprintf>
  seg->len = p->tot_len - optlen;
 8016d0a:	68bb      	ldr	r3, [r7, #8]
 8016d0c:	891a      	ldrh	r2, [r3, #8]
 8016d0e:	7dfb      	ldrb	r3, [r7, #23]
 8016d10:	b29b      	uxth	r3, r3
 8016d12:	1ad3      	subs	r3, r2, r3
 8016d14:	b29a      	uxth	r2, r3
 8016d16:	693b      	ldr	r3, [r7, #16]
 8016d18:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016d1a:	2114      	movs	r1, #20
 8016d1c:	68b8      	ldr	r0, [r7, #8]
 8016d1e:	f7fb fdc1 	bl	80128a4 <pbuf_add_header>
 8016d22:	4603      	mov	r3, r0
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d004      	beq.n	8016d32 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016d28:	6938      	ldr	r0, [r7, #16]
 8016d2a:	f7fd f8d2 	bl	8013ed2 <tcp_seg_free>
    return NULL;
 8016d2e:	2300      	movs	r3, #0
 8016d30:	e036      	b.n	8016da0 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8016d32:	693b      	ldr	r3, [r7, #16]
 8016d34:	685b      	ldr	r3, [r3, #4]
 8016d36:	685a      	ldr	r2, [r3, #4]
 8016d38:	693b      	ldr	r3, [r7, #16]
 8016d3a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	8ada      	ldrh	r2, [r3, #22]
 8016d40:	693b      	ldr	r3, [r7, #16]
 8016d42:	68dc      	ldr	r4, [r3, #12]
 8016d44:	4610      	mov	r0, r2
 8016d46:	f7fa f989 	bl	801105c <lwip_htons>
 8016d4a:	4603      	mov	r3, r0
 8016d4c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	8b1a      	ldrh	r2, [r3, #24]
 8016d52:	693b      	ldr	r3, [r7, #16]
 8016d54:	68dc      	ldr	r4, [r3, #12]
 8016d56:	4610      	mov	r0, r2
 8016d58:	f7fa f980 	bl	801105c <lwip_htons>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8016d60:	693b      	ldr	r3, [r7, #16]
 8016d62:	68dc      	ldr	r4, [r3, #12]
 8016d64:	6838      	ldr	r0, [r7, #0]
 8016d66:	f7fa f98f 	bl	8011088 <lwip_htonl>
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8016d6e:	7dfb      	ldrb	r3, [r7, #23]
 8016d70:	089b      	lsrs	r3, r3, #2
 8016d72:	b2db      	uxtb	r3, r3
 8016d74:	3305      	adds	r3, #5
 8016d76:	b29b      	uxth	r3, r3
 8016d78:	031b      	lsls	r3, r3, #12
 8016d7a:	b29a      	uxth	r2, r3
 8016d7c:	79fb      	ldrb	r3, [r7, #7]
 8016d7e:	b29b      	uxth	r3, r3
 8016d80:	4313      	orrs	r3, r2
 8016d82:	b29a      	uxth	r2, r3
 8016d84:	693b      	ldr	r3, [r7, #16]
 8016d86:	68dc      	ldr	r4, [r3, #12]
 8016d88:	4610      	mov	r0, r2
 8016d8a:	f7fa f967 	bl	801105c <lwip_htons>
 8016d8e:	4603      	mov	r3, r0
 8016d90:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8016d92:	693b      	ldr	r3, [r7, #16]
 8016d94:	68db      	ldr	r3, [r3, #12]
 8016d96:	2200      	movs	r2, #0
 8016d98:	749a      	strb	r2, [r3, #18]
 8016d9a:	2200      	movs	r2, #0
 8016d9c:	74da      	strb	r2, [r3, #19]
  return seg;
 8016d9e:	693b      	ldr	r3, [r7, #16]
}
 8016da0:	4618      	mov	r0, r3
 8016da2:	371c      	adds	r7, #28
 8016da4:	46bd      	mov	sp, r7
 8016da6:	bd90      	pop	{r4, r7, pc}
 8016da8:	0801df70 	.word	0x0801df70
 8016dac:	0801dfa4 	.word	0x0801dfa4
 8016db0:	0801dfc4 	.word	0x0801dfc4
 8016db4:	0801dfec 	.word	0x0801dfec
 8016db8:	0801e010 	.word	0x0801e010

08016dbc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016dbc:	b590      	push	{r4, r7, lr}
 8016dbe:	b08b      	sub	sp, #44	@ 0x2c
 8016dc0:	af02      	add	r7, sp, #8
 8016dc2:	6078      	str	r0, [r7, #4]
 8016dc4:	460b      	mov	r3, r1
 8016dc6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016dc8:	2300      	movs	r3, #0
 8016dca:	61fb      	str	r3, [r7, #28]
 8016dcc:	2300      	movs	r3, #0
 8016dce:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d106      	bne.n	8016de8 <tcp_split_unsent_seg+0x2c>
 8016dda:	4b95      	ldr	r3, [pc, #596]	@ (8017030 <tcp_split_unsent_seg+0x274>)
 8016ddc:	f240 324b 	movw	r2, #843	@ 0x34b
 8016de0:	4994      	ldr	r1, [pc, #592]	@ (8017034 <tcp_split_unsent_seg+0x278>)
 8016de2:	4895      	ldr	r0, [pc, #596]	@ (8017038 <tcp_split_unsent_seg+0x27c>)
 8016de4:	f004 fb36 	bl	801b454 <iprintf>

  useg = pcb->unsent;
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016dec:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016dee:	697b      	ldr	r3, [r7, #20]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d102      	bne.n	8016dfa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016df4:	f04f 33ff 	mov.w	r3, #4294967295
 8016df8:	e116      	b.n	8017028 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016dfa:	887b      	ldrh	r3, [r7, #2]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d109      	bne.n	8016e14 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016e00:	4b8b      	ldr	r3, [pc, #556]	@ (8017030 <tcp_split_unsent_seg+0x274>)
 8016e02:	f240 3253 	movw	r2, #851	@ 0x353
 8016e06:	498d      	ldr	r1, [pc, #564]	@ (801703c <tcp_split_unsent_seg+0x280>)
 8016e08:	488b      	ldr	r0, [pc, #556]	@ (8017038 <tcp_split_unsent_seg+0x27c>)
 8016e0a:	f004 fb23 	bl	801b454 <iprintf>
    return ERR_VAL;
 8016e0e:	f06f 0305 	mvn.w	r3, #5
 8016e12:	e109      	b.n	8017028 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016e14:	697b      	ldr	r3, [r7, #20]
 8016e16:	891b      	ldrh	r3, [r3, #8]
 8016e18:	887a      	ldrh	r2, [r7, #2]
 8016e1a:	429a      	cmp	r2, r3
 8016e1c:	d301      	bcc.n	8016e22 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016e1e:	2300      	movs	r3, #0
 8016e20:	e102      	b.n	8017028 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016e26:	887a      	ldrh	r2, [r7, #2]
 8016e28:	429a      	cmp	r2, r3
 8016e2a:	d906      	bls.n	8016e3a <tcp_split_unsent_seg+0x7e>
 8016e2c:	4b80      	ldr	r3, [pc, #512]	@ (8017030 <tcp_split_unsent_seg+0x274>)
 8016e2e:	f240 325b 	movw	r2, #859	@ 0x35b
 8016e32:	4983      	ldr	r1, [pc, #524]	@ (8017040 <tcp_split_unsent_seg+0x284>)
 8016e34:	4880      	ldr	r0, [pc, #512]	@ (8017038 <tcp_split_unsent_seg+0x27c>)
 8016e36:	f004 fb0d 	bl	801b454 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016e3a:	697b      	ldr	r3, [r7, #20]
 8016e3c:	891b      	ldrh	r3, [r3, #8]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d106      	bne.n	8016e50 <tcp_split_unsent_seg+0x94>
 8016e42:	4b7b      	ldr	r3, [pc, #492]	@ (8017030 <tcp_split_unsent_seg+0x274>)
 8016e44:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8016e48:	497e      	ldr	r1, [pc, #504]	@ (8017044 <tcp_split_unsent_seg+0x288>)
 8016e4a:	487b      	ldr	r0, [pc, #492]	@ (8017038 <tcp_split_unsent_seg+0x27c>)
 8016e4c:	f004 fb02 	bl	801b454 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016e50:	697b      	ldr	r3, [r7, #20]
 8016e52:	7a9b      	ldrb	r3, [r3, #10]
 8016e54:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016e56:	7bfb      	ldrb	r3, [r7, #15]
 8016e58:	009b      	lsls	r3, r3, #2
 8016e5a:	b2db      	uxtb	r3, r3
 8016e5c:	f003 0304 	and.w	r3, r3, #4
 8016e60:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8016e62:	697b      	ldr	r3, [r7, #20]
 8016e64:	891a      	ldrh	r2, [r3, #8]
 8016e66:	887b      	ldrh	r3, [r7, #2]
 8016e68:	1ad3      	subs	r3, r2, r3
 8016e6a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016e6c:	7bbb      	ldrb	r3, [r7, #14]
 8016e6e:	b29a      	uxth	r2, r3
 8016e70:	89bb      	ldrh	r3, [r7, #12]
 8016e72:	4413      	add	r3, r2
 8016e74:	b29b      	uxth	r3, r3
 8016e76:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016e7a:	4619      	mov	r1, r3
 8016e7c:	2036      	movs	r0, #54	@ 0x36
 8016e7e:	f7fb fac3 	bl	8012408 <pbuf_alloc>
 8016e82:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016e84:	693b      	ldr	r3, [r7, #16]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	f000 80b7 	beq.w	8016ffa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016e8c:	697b      	ldr	r3, [r7, #20]
 8016e8e:	685b      	ldr	r3, [r3, #4]
 8016e90:	891a      	ldrh	r2, [r3, #8]
 8016e92:	697b      	ldr	r3, [r7, #20]
 8016e94:	891b      	ldrh	r3, [r3, #8]
 8016e96:	1ad3      	subs	r3, r2, r3
 8016e98:	b29a      	uxth	r2, r3
 8016e9a:	887b      	ldrh	r3, [r7, #2]
 8016e9c:	4413      	add	r3, r2
 8016e9e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016ea0:	697b      	ldr	r3, [r7, #20]
 8016ea2:	6858      	ldr	r0, [r3, #4]
 8016ea4:	693b      	ldr	r3, [r7, #16]
 8016ea6:	685a      	ldr	r2, [r3, #4]
 8016ea8:	7bbb      	ldrb	r3, [r7, #14]
 8016eaa:	18d1      	adds	r1, r2, r3
 8016eac:	897b      	ldrh	r3, [r7, #10]
 8016eae:	89ba      	ldrh	r2, [r7, #12]
 8016eb0:	f7fb ff84 	bl	8012dbc <pbuf_copy_partial>
 8016eb4:	4603      	mov	r3, r0
 8016eb6:	461a      	mov	r2, r3
 8016eb8:	89bb      	ldrh	r3, [r7, #12]
 8016eba:	4293      	cmp	r3, r2
 8016ebc:	f040 809f 	bne.w	8016ffe <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016ec0:	697b      	ldr	r3, [r7, #20]
 8016ec2:	68db      	ldr	r3, [r3, #12]
 8016ec4:	899b      	ldrh	r3, [r3, #12]
 8016ec6:	b29b      	uxth	r3, r3
 8016ec8:	4618      	mov	r0, r3
 8016eca:	f7fa f8c7 	bl	801105c <lwip_htons>
 8016ece:	4603      	mov	r3, r0
 8016ed0:	b2db      	uxtb	r3, r3
 8016ed2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016ed6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016ed8:	2300      	movs	r3, #0
 8016eda:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016edc:	7efb      	ldrb	r3, [r7, #27]
 8016ede:	f003 0308 	and.w	r3, r3, #8
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d007      	beq.n	8016ef6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016ee6:	7efb      	ldrb	r3, [r7, #27]
 8016ee8:	f023 0308 	bic.w	r3, r3, #8
 8016eec:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016eee:	7ebb      	ldrb	r3, [r7, #26]
 8016ef0:	f043 0308 	orr.w	r3, r3, #8
 8016ef4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8016ef6:	7efb      	ldrb	r3, [r7, #27]
 8016ef8:	f003 0301 	and.w	r3, r3, #1
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d007      	beq.n	8016f10 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016f00:	7efb      	ldrb	r3, [r7, #27]
 8016f02:	f023 0301 	bic.w	r3, r3, #1
 8016f06:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016f08:	7ebb      	ldrb	r3, [r7, #26]
 8016f0a:	f043 0301 	orr.w	r3, r3, #1
 8016f0e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016f10:	697b      	ldr	r3, [r7, #20]
 8016f12:	68db      	ldr	r3, [r3, #12]
 8016f14:	685b      	ldr	r3, [r3, #4]
 8016f16:	4618      	mov	r0, r3
 8016f18:	f7fa f8b6 	bl	8011088 <lwip_htonl>
 8016f1c:	4602      	mov	r2, r0
 8016f1e:	887b      	ldrh	r3, [r7, #2]
 8016f20:	18d1      	adds	r1, r2, r3
 8016f22:	7eba      	ldrb	r2, [r7, #26]
 8016f24:	7bfb      	ldrb	r3, [r7, #15]
 8016f26:	9300      	str	r3, [sp, #0]
 8016f28:	460b      	mov	r3, r1
 8016f2a:	6939      	ldr	r1, [r7, #16]
 8016f2c:	6878      	ldr	r0, [r7, #4]
 8016f2e:	f7ff fea9 	bl	8016c84 <tcp_create_segment>
 8016f32:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016f34:	69fb      	ldr	r3, [r7, #28]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d063      	beq.n	8017002 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016f3a:	697b      	ldr	r3, [r7, #20]
 8016f3c:	685b      	ldr	r3, [r3, #4]
 8016f3e:	4618      	mov	r0, r3
 8016f40:	f7fb fdd4 	bl	8012aec <pbuf_clen>
 8016f44:	4603      	mov	r3, r0
 8016f46:	461a      	mov	r2, r3
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016f4e:	1a9b      	subs	r3, r3, r2
 8016f50:	b29a      	uxth	r2, r3
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016f58:	697b      	ldr	r3, [r7, #20]
 8016f5a:	6858      	ldr	r0, [r3, #4]
 8016f5c:	697b      	ldr	r3, [r7, #20]
 8016f5e:	685b      	ldr	r3, [r3, #4]
 8016f60:	891a      	ldrh	r2, [r3, #8]
 8016f62:	89bb      	ldrh	r3, [r7, #12]
 8016f64:	1ad3      	subs	r3, r2, r3
 8016f66:	b29b      	uxth	r3, r3
 8016f68:	4619      	mov	r1, r3
 8016f6a:	f7fb fbab 	bl	80126c4 <pbuf_realloc>
  useg->len -= remainder;
 8016f6e:	697b      	ldr	r3, [r7, #20]
 8016f70:	891a      	ldrh	r2, [r3, #8]
 8016f72:	89bb      	ldrh	r3, [r7, #12]
 8016f74:	1ad3      	subs	r3, r2, r3
 8016f76:	b29a      	uxth	r2, r3
 8016f78:	697b      	ldr	r3, [r7, #20]
 8016f7a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016f7c:	697b      	ldr	r3, [r7, #20]
 8016f7e:	68db      	ldr	r3, [r3, #12]
 8016f80:	899b      	ldrh	r3, [r3, #12]
 8016f82:	b29c      	uxth	r4, r3
 8016f84:	7efb      	ldrb	r3, [r7, #27]
 8016f86:	b29b      	uxth	r3, r3
 8016f88:	4618      	mov	r0, r3
 8016f8a:	f7fa f867 	bl	801105c <lwip_htons>
 8016f8e:	4603      	mov	r3, r0
 8016f90:	461a      	mov	r2, r3
 8016f92:	697b      	ldr	r3, [r7, #20]
 8016f94:	68db      	ldr	r3, [r3, #12]
 8016f96:	4322      	orrs	r2, r4
 8016f98:	b292      	uxth	r2, r2
 8016f9a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016f9c:	697b      	ldr	r3, [r7, #20]
 8016f9e:	685b      	ldr	r3, [r3, #4]
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	f7fb fda3 	bl	8012aec <pbuf_clen>
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	461a      	mov	r2, r3
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016fb0:	4413      	add	r3, r2
 8016fb2:	b29a      	uxth	r2, r3
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016fba:	69fb      	ldr	r3, [r7, #28]
 8016fbc:	685b      	ldr	r3, [r3, #4]
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	f7fb fd94 	bl	8012aec <pbuf_clen>
 8016fc4:	4603      	mov	r3, r0
 8016fc6:	461a      	mov	r2, r3
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016fce:	4413      	add	r3, r2
 8016fd0:	b29a      	uxth	r2, r3
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016fd8:	697b      	ldr	r3, [r7, #20]
 8016fda:	681a      	ldr	r2, [r3, #0]
 8016fdc:	69fb      	ldr	r3, [r7, #28]
 8016fde:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016fe0:	697b      	ldr	r3, [r7, #20]
 8016fe2:	69fa      	ldr	r2, [r7, #28]
 8016fe4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016fe6:	69fb      	ldr	r3, [r7, #28]
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d103      	bne.n	8016ff6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	e016      	b.n	8017028 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016ffa:	bf00      	nop
 8016ffc:	e002      	b.n	8017004 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016ffe:	bf00      	nop
 8017000:	e000      	b.n	8017004 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017002:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8017004:	69fb      	ldr	r3, [r7, #28]
 8017006:	2b00      	cmp	r3, #0
 8017008:	d006      	beq.n	8017018 <tcp_split_unsent_seg+0x25c>
 801700a:	4b09      	ldr	r3, [pc, #36]	@ (8017030 <tcp_split_unsent_seg+0x274>)
 801700c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8017010:	490d      	ldr	r1, [pc, #52]	@ (8017048 <tcp_split_unsent_seg+0x28c>)
 8017012:	4809      	ldr	r0, [pc, #36]	@ (8017038 <tcp_split_unsent_seg+0x27c>)
 8017014:	f004 fa1e 	bl	801b454 <iprintf>
  if (p != NULL) {
 8017018:	693b      	ldr	r3, [r7, #16]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d002      	beq.n	8017024 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801701e:	6938      	ldr	r0, [r7, #16]
 8017020:	f7fb fcd6 	bl	80129d0 <pbuf_free>
  }

  return ERR_MEM;
 8017024:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017028:	4618      	mov	r0, r3
 801702a:	3724      	adds	r7, #36	@ 0x24
 801702c:	46bd      	mov	sp, r7
 801702e:	bd90      	pop	{r4, r7, pc}
 8017030:	0801df70 	.word	0x0801df70
 8017034:	0801e304 	.word	0x0801e304
 8017038:	0801dfc4 	.word	0x0801dfc4
 801703c:	0801e328 	.word	0x0801e328
 8017040:	0801e34c 	.word	0x0801e34c
 8017044:	0801e35c 	.word	0x0801e35c
 8017048:	0801e36c 	.word	0x0801e36c

0801704c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801704c:	b590      	push	{r4, r7, lr}
 801704e:	b085      	sub	sp, #20
 8017050:	af00      	add	r7, sp, #0
 8017052:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d106      	bne.n	8017068 <tcp_send_fin+0x1c>
 801705a:	4b21      	ldr	r3, [pc, #132]	@ (80170e0 <tcp_send_fin+0x94>)
 801705c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8017060:	4920      	ldr	r1, [pc, #128]	@ (80170e4 <tcp_send_fin+0x98>)
 8017062:	4821      	ldr	r0, [pc, #132]	@ (80170e8 <tcp_send_fin+0x9c>)
 8017064:	f004 f9f6 	bl	801b454 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801706c:	2b00      	cmp	r3, #0
 801706e:	d02e      	beq.n	80170ce <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017074:	60fb      	str	r3, [r7, #12]
 8017076:	e002      	b.n	801707e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d1f8      	bne.n	8017078 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	68db      	ldr	r3, [r3, #12]
 801708a:	899b      	ldrh	r3, [r3, #12]
 801708c:	b29b      	uxth	r3, r3
 801708e:	4618      	mov	r0, r3
 8017090:	f7f9 ffe4 	bl	801105c <lwip_htons>
 8017094:	4603      	mov	r3, r0
 8017096:	b2db      	uxtb	r3, r3
 8017098:	f003 0307 	and.w	r3, r3, #7
 801709c:	2b00      	cmp	r3, #0
 801709e:	d116      	bne.n	80170ce <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	68db      	ldr	r3, [r3, #12]
 80170a4:	899b      	ldrh	r3, [r3, #12]
 80170a6:	b29c      	uxth	r4, r3
 80170a8:	2001      	movs	r0, #1
 80170aa:	f7f9 ffd7 	bl	801105c <lwip_htons>
 80170ae:	4603      	mov	r3, r0
 80170b0:	461a      	mov	r2, r3
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	68db      	ldr	r3, [r3, #12]
 80170b6:	4322      	orrs	r2, r4
 80170b8:	b292      	uxth	r2, r2
 80170ba:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	8b5b      	ldrh	r3, [r3, #26]
 80170c0:	f043 0320 	orr.w	r3, r3, #32
 80170c4:	b29a      	uxth	r2, r3
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80170ca:	2300      	movs	r3, #0
 80170cc:	e004      	b.n	80170d8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80170ce:	2101      	movs	r1, #1
 80170d0:	6878      	ldr	r0, [r7, #4]
 80170d2:	f000 f80b 	bl	80170ec <tcp_enqueue_flags>
 80170d6:	4603      	mov	r3, r0
}
 80170d8:	4618      	mov	r0, r3
 80170da:	3714      	adds	r7, #20
 80170dc:	46bd      	mov	sp, r7
 80170de:	bd90      	pop	{r4, r7, pc}
 80170e0:	0801df70 	.word	0x0801df70
 80170e4:	0801e378 	.word	0x0801e378
 80170e8:	0801dfc4 	.word	0x0801dfc4

080170ec <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80170ec:	b580      	push	{r7, lr}
 80170ee:	b08a      	sub	sp, #40	@ 0x28
 80170f0:	af02      	add	r7, sp, #8
 80170f2:	6078      	str	r0, [r7, #4]
 80170f4:	460b      	mov	r3, r1
 80170f6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80170f8:	2300      	movs	r3, #0
 80170fa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80170fc:	2300      	movs	r3, #0
 80170fe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8017100:	78fb      	ldrb	r3, [r7, #3]
 8017102:	f003 0303 	and.w	r3, r3, #3
 8017106:	2b00      	cmp	r3, #0
 8017108:	d106      	bne.n	8017118 <tcp_enqueue_flags+0x2c>
 801710a:	4b67      	ldr	r3, [pc, #412]	@ (80172a8 <tcp_enqueue_flags+0x1bc>)
 801710c:	f240 4211 	movw	r2, #1041	@ 0x411
 8017110:	4966      	ldr	r1, [pc, #408]	@ (80172ac <tcp_enqueue_flags+0x1c0>)
 8017112:	4867      	ldr	r0, [pc, #412]	@ (80172b0 <tcp_enqueue_flags+0x1c4>)
 8017114:	f004 f99e 	bl	801b454 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	2b00      	cmp	r3, #0
 801711c:	d106      	bne.n	801712c <tcp_enqueue_flags+0x40>
 801711e:	4b62      	ldr	r3, [pc, #392]	@ (80172a8 <tcp_enqueue_flags+0x1bc>)
 8017120:	f240 4213 	movw	r2, #1043	@ 0x413
 8017124:	4963      	ldr	r1, [pc, #396]	@ (80172b4 <tcp_enqueue_flags+0x1c8>)
 8017126:	4862      	ldr	r0, [pc, #392]	@ (80172b0 <tcp_enqueue_flags+0x1c4>)
 8017128:	f004 f994 	bl	801b454 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801712c:	78fb      	ldrb	r3, [r7, #3]
 801712e:	f003 0302 	and.w	r3, r3, #2
 8017132:	2b00      	cmp	r3, #0
 8017134:	d001      	beq.n	801713a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8017136:	2301      	movs	r3, #1
 8017138:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801713a:	7ffb      	ldrb	r3, [r7, #31]
 801713c:	009b      	lsls	r3, r3, #2
 801713e:	b2db      	uxtb	r3, r3
 8017140:	f003 0304 	and.w	r3, r3, #4
 8017144:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017146:	7dfb      	ldrb	r3, [r7, #23]
 8017148:	b29b      	uxth	r3, r3
 801714a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801714e:	4619      	mov	r1, r3
 8017150:	2036      	movs	r0, #54	@ 0x36
 8017152:	f7fb f959 	bl	8012408 <pbuf_alloc>
 8017156:	6138      	str	r0, [r7, #16]
 8017158:	693b      	ldr	r3, [r7, #16]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d109      	bne.n	8017172 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	8b5b      	ldrh	r3, [r3, #26]
 8017162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017166:	b29a      	uxth	r2, r3
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801716c:	f04f 33ff 	mov.w	r3, #4294967295
 8017170:	e095      	b.n	801729e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8017172:	693b      	ldr	r3, [r7, #16]
 8017174:	895a      	ldrh	r2, [r3, #10]
 8017176:	7dfb      	ldrb	r3, [r7, #23]
 8017178:	b29b      	uxth	r3, r3
 801717a:	429a      	cmp	r2, r3
 801717c:	d206      	bcs.n	801718c <tcp_enqueue_flags+0xa0>
 801717e:	4b4a      	ldr	r3, [pc, #296]	@ (80172a8 <tcp_enqueue_flags+0x1bc>)
 8017180:	f240 4239 	movw	r2, #1081	@ 0x439
 8017184:	494c      	ldr	r1, [pc, #304]	@ (80172b8 <tcp_enqueue_flags+0x1cc>)
 8017186:	484a      	ldr	r0, [pc, #296]	@ (80172b0 <tcp_enqueue_flags+0x1c4>)
 8017188:	f004 f964 	bl	801b454 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8017190:	78fa      	ldrb	r2, [r7, #3]
 8017192:	7ffb      	ldrb	r3, [r7, #31]
 8017194:	9300      	str	r3, [sp, #0]
 8017196:	460b      	mov	r3, r1
 8017198:	6939      	ldr	r1, [r7, #16]
 801719a:	6878      	ldr	r0, [r7, #4]
 801719c:	f7ff fd72 	bl	8016c84 <tcp_create_segment>
 80171a0:	60f8      	str	r0, [r7, #12]
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d109      	bne.n	80171bc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	8b5b      	ldrh	r3, [r3, #26]
 80171ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80171b0:	b29a      	uxth	r2, r3
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80171b6:	f04f 33ff 	mov.w	r3, #4294967295
 80171ba:	e070      	b.n	801729e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	68db      	ldr	r3, [r3, #12]
 80171c0:	f003 0303 	and.w	r3, r3, #3
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d006      	beq.n	80171d6 <tcp_enqueue_flags+0xea>
 80171c8:	4b37      	ldr	r3, [pc, #220]	@ (80172a8 <tcp_enqueue_flags+0x1bc>)
 80171ca:	f240 4242 	movw	r2, #1090	@ 0x442
 80171ce:	493b      	ldr	r1, [pc, #236]	@ (80172bc <tcp_enqueue_flags+0x1d0>)
 80171d0:	4837      	ldr	r0, [pc, #220]	@ (80172b0 <tcp_enqueue_flags+0x1c4>)
 80171d2:	f004 f93f 	bl	801b454 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	891b      	ldrh	r3, [r3, #8]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d006      	beq.n	80171ec <tcp_enqueue_flags+0x100>
 80171de:	4b32      	ldr	r3, [pc, #200]	@ (80172a8 <tcp_enqueue_flags+0x1bc>)
 80171e0:	f240 4243 	movw	r2, #1091	@ 0x443
 80171e4:	4936      	ldr	r1, [pc, #216]	@ (80172c0 <tcp_enqueue_flags+0x1d4>)
 80171e6:	4832      	ldr	r0, [pc, #200]	@ (80172b0 <tcp_enqueue_flags+0x1c4>)
 80171e8:	f004 f934 	bl	801b454 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d103      	bne.n	80171fc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	68fa      	ldr	r2, [r7, #12]
 80171f8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80171fa:	e00d      	b.n	8017218 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017200:	61bb      	str	r3, [r7, #24]
 8017202:	e002      	b.n	801720a <tcp_enqueue_flags+0x11e>
 8017204:	69bb      	ldr	r3, [r7, #24]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	61bb      	str	r3, [r7, #24]
 801720a:	69bb      	ldr	r3, [r7, #24]
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d1f8      	bne.n	8017204 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8017212:	69bb      	ldr	r3, [r7, #24]
 8017214:	68fa      	ldr	r2, [r7, #12]
 8017216:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	2200      	movs	r2, #0
 801721c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8017220:	78fb      	ldrb	r3, [r7, #3]
 8017222:	f003 0302 	and.w	r3, r3, #2
 8017226:	2b00      	cmp	r3, #0
 8017228:	d104      	bne.n	8017234 <tcp_enqueue_flags+0x148>
 801722a:	78fb      	ldrb	r3, [r7, #3]
 801722c:	f003 0301 	and.w	r3, r3, #1
 8017230:	2b00      	cmp	r3, #0
 8017232:	d004      	beq.n	801723e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017238:	1c5a      	adds	r2, r3, #1
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801723e:	78fb      	ldrb	r3, [r7, #3]
 8017240:	f003 0301 	and.w	r3, r3, #1
 8017244:	2b00      	cmp	r3, #0
 8017246:	d006      	beq.n	8017256 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	8b5b      	ldrh	r3, [r3, #26]
 801724c:	f043 0320 	orr.w	r3, r3, #32
 8017250:	b29a      	uxth	r2, r3
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	685b      	ldr	r3, [r3, #4]
 801725a:	4618      	mov	r0, r3
 801725c:	f7fb fc46 	bl	8012aec <pbuf_clen>
 8017260:	4603      	mov	r3, r0
 8017262:	461a      	mov	r2, r3
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801726a:	4413      	add	r3, r2
 801726c:	b29a      	uxth	r2, r3
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801727a:	2b00      	cmp	r3, #0
 801727c:	d00e      	beq.n	801729c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017282:	2b00      	cmp	r3, #0
 8017284:	d10a      	bne.n	801729c <tcp_enqueue_flags+0x1b0>
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801728a:	2b00      	cmp	r3, #0
 801728c:	d106      	bne.n	801729c <tcp_enqueue_flags+0x1b0>
 801728e:	4b06      	ldr	r3, [pc, #24]	@ (80172a8 <tcp_enqueue_flags+0x1bc>)
 8017290:	f240 4265 	movw	r2, #1125	@ 0x465
 8017294:	490b      	ldr	r1, [pc, #44]	@ (80172c4 <tcp_enqueue_flags+0x1d8>)
 8017296:	4806      	ldr	r0, [pc, #24]	@ (80172b0 <tcp_enqueue_flags+0x1c4>)
 8017298:	f004 f8dc 	bl	801b454 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801729c:	2300      	movs	r3, #0
}
 801729e:	4618      	mov	r0, r3
 80172a0:	3720      	adds	r7, #32
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bd80      	pop	{r7, pc}
 80172a6:	bf00      	nop
 80172a8:	0801df70 	.word	0x0801df70
 80172ac:	0801e394 	.word	0x0801e394
 80172b0:	0801dfc4 	.word	0x0801dfc4
 80172b4:	0801e3ec 	.word	0x0801e3ec
 80172b8:	0801e40c 	.word	0x0801e40c
 80172bc:	0801e448 	.word	0x0801e448
 80172c0:	0801e460 	.word	0x0801e460
 80172c4:	0801e48c 	.word	0x0801e48c

080172c8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80172c8:	b5b0      	push	{r4, r5, r7, lr}
 80172ca:	b08a      	sub	sp, #40	@ 0x28
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d106      	bne.n	80172e4 <tcp_output+0x1c>
 80172d6:	4b8a      	ldr	r3, [pc, #552]	@ (8017500 <tcp_output+0x238>)
 80172d8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80172dc:	4989      	ldr	r1, [pc, #548]	@ (8017504 <tcp_output+0x23c>)
 80172de:	488a      	ldr	r0, [pc, #552]	@ (8017508 <tcp_output+0x240>)
 80172e0:	f004 f8b8 	bl	801b454 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	7d1b      	ldrb	r3, [r3, #20]
 80172e8:	2b01      	cmp	r3, #1
 80172ea:	d106      	bne.n	80172fa <tcp_output+0x32>
 80172ec:	4b84      	ldr	r3, [pc, #528]	@ (8017500 <tcp_output+0x238>)
 80172ee:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80172f2:	4986      	ldr	r1, [pc, #536]	@ (801750c <tcp_output+0x244>)
 80172f4:	4884      	ldr	r0, [pc, #528]	@ (8017508 <tcp_output+0x240>)
 80172f6:	f004 f8ad 	bl	801b454 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80172fa:	4b85      	ldr	r3, [pc, #532]	@ (8017510 <tcp_output+0x248>)
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	687a      	ldr	r2, [r7, #4]
 8017300:	429a      	cmp	r2, r3
 8017302:	d101      	bne.n	8017308 <tcp_output+0x40>
    return ERR_OK;
 8017304:	2300      	movs	r3, #0
 8017306:	e1ce      	b.n	80176a6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017314:	4293      	cmp	r3, r2
 8017316:	bf28      	it	cs
 8017318:	4613      	movcs	r3, r2
 801731a:	b29b      	uxth	r3, r3
 801731c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017322:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8017324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017326:	2b00      	cmp	r3, #0
 8017328:	d10b      	bne.n	8017342 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	8b5b      	ldrh	r3, [r3, #26]
 801732e:	f003 0302 	and.w	r3, r3, #2
 8017332:	2b00      	cmp	r3, #0
 8017334:	f000 81aa 	beq.w	801768c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8017338:	6878      	ldr	r0, [r7, #4]
 801733a:	f000 fdcb 	bl	8017ed4 <tcp_send_empty_ack>
 801733e:	4603      	mov	r3, r0
 8017340:	e1b1      	b.n	80176a6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8017342:	6879      	ldr	r1, [r7, #4]
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	3304      	adds	r3, #4
 8017348:	461a      	mov	r2, r3
 801734a:	6878      	ldr	r0, [r7, #4]
 801734c:	f7ff fc7e 	bl	8016c4c <tcp_route>
 8017350:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8017352:	697b      	ldr	r3, [r7, #20]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d102      	bne.n	801735e <tcp_output+0x96>
    return ERR_RTE;
 8017358:	f06f 0303 	mvn.w	r3, #3
 801735c:	e1a3      	b.n	80176a6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d003      	beq.n	801736c <tcp_output+0xa4>
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d111      	bne.n	8017390 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801736c:	697b      	ldr	r3, [r7, #20]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d002      	beq.n	8017378 <tcp_output+0xb0>
 8017372:	697b      	ldr	r3, [r7, #20]
 8017374:	3304      	adds	r3, #4
 8017376:	e000      	b.n	801737a <tcp_output+0xb2>
 8017378:	2300      	movs	r3, #0
 801737a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801737c:	693b      	ldr	r3, [r7, #16]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d102      	bne.n	8017388 <tcp_output+0xc0>
      return ERR_RTE;
 8017382:	f06f 0303 	mvn.w	r3, #3
 8017386:	e18e      	b.n	80176a6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017388:	693b      	ldr	r3, [r7, #16]
 801738a:	681a      	ldr	r2, [r3, #0]
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8017390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017392:	68db      	ldr	r3, [r3, #12]
 8017394:	685b      	ldr	r3, [r3, #4]
 8017396:	4618      	mov	r0, r3
 8017398:	f7f9 fe76 	bl	8011088 <lwip_htonl>
 801739c:	4602      	mov	r2, r0
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80173a2:	1ad3      	subs	r3, r2, r3
 80173a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80173a6:	8912      	ldrh	r2, [r2, #8]
 80173a8:	4413      	add	r3, r2
 80173aa:	69ba      	ldr	r2, [r7, #24]
 80173ac:	429a      	cmp	r2, r3
 80173ae:	d227      	bcs.n	8017400 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80173b6:	461a      	mov	r2, r3
 80173b8:	69bb      	ldr	r3, [r7, #24]
 80173ba:	4293      	cmp	r3, r2
 80173bc:	d114      	bne.n	80173e8 <tcp_output+0x120>
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d110      	bne.n	80173e8 <tcp_output+0x120>
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d10b      	bne.n	80173e8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	2200      	movs	r2, #0
 80173d4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	2201      	movs	r2, #1
 80173dc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	2200      	movs	r2, #0
 80173e4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	8b5b      	ldrh	r3, [r3, #26]
 80173ec:	f003 0302 	and.w	r3, r3, #2
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	f000 814d 	beq.w	8017690 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80173f6:	6878      	ldr	r0, [r7, #4]
 80173f8:	f000 fd6c 	bl	8017ed4 <tcp_send_empty_ack>
 80173fc:	4603      	mov	r3, r0
 80173fe:	e152      	b.n	80176a6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	2200      	movs	r2, #0
 8017404:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801740c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801740e:	6a3b      	ldr	r3, [r7, #32]
 8017410:	2b00      	cmp	r3, #0
 8017412:	f000 811c 	beq.w	801764e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8017416:	e002      	b.n	801741e <tcp_output+0x156>
 8017418:	6a3b      	ldr	r3, [r7, #32]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	623b      	str	r3, [r7, #32]
 801741e:	6a3b      	ldr	r3, [r7, #32]
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d1f8      	bne.n	8017418 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8017426:	e112      	b.n	801764e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8017428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801742a:	68db      	ldr	r3, [r3, #12]
 801742c:	899b      	ldrh	r3, [r3, #12]
 801742e:	b29b      	uxth	r3, r3
 8017430:	4618      	mov	r0, r3
 8017432:	f7f9 fe13 	bl	801105c <lwip_htons>
 8017436:	4603      	mov	r3, r0
 8017438:	b2db      	uxtb	r3, r3
 801743a:	f003 0304 	and.w	r3, r3, #4
 801743e:	2b00      	cmp	r3, #0
 8017440:	d006      	beq.n	8017450 <tcp_output+0x188>
 8017442:	4b2f      	ldr	r3, [pc, #188]	@ (8017500 <tcp_output+0x238>)
 8017444:	f240 5236 	movw	r2, #1334	@ 0x536
 8017448:	4932      	ldr	r1, [pc, #200]	@ (8017514 <tcp_output+0x24c>)
 801744a:	482f      	ldr	r0, [pc, #188]	@ (8017508 <tcp_output+0x240>)
 801744c:	f004 f802 	bl	801b454 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017454:	2b00      	cmp	r3, #0
 8017456:	d01f      	beq.n	8017498 <tcp_output+0x1d0>
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	8b5b      	ldrh	r3, [r3, #26]
 801745c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8017460:	2b00      	cmp	r3, #0
 8017462:	d119      	bne.n	8017498 <tcp_output+0x1d0>
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017468:	2b00      	cmp	r3, #0
 801746a:	d00b      	beq.n	8017484 <tcp_output+0x1bc>
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d110      	bne.n	8017498 <tcp_output+0x1d0>
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801747a:	891a      	ldrh	r2, [r3, #8]
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017480:	429a      	cmp	r2, r3
 8017482:	d209      	bcs.n	8017498 <tcp_output+0x1d0>
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801748a:	2b00      	cmp	r3, #0
 801748c:	d004      	beq.n	8017498 <tcp_output+0x1d0>
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017494:	2b08      	cmp	r3, #8
 8017496:	d901      	bls.n	801749c <tcp_output+0x1d4>
 8017498:	2301      	movs	r3, #1
 801749a:	e000      	b.n	801749e <tcp_output+0x1d6>
 801749c:	2300      	movs	r3, #0
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d106      	bne.n	80174b0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	8b5b      	ldrh	r3, [r3, #26]
 80174a6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	f000 80e4 	beq.w	8017678 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	7d1b      	ldrb	r3, [r3, #20]
 80174b4:	2b02      	cmp	r3, #2
 80174b6:	d00d      	beq.n	80174d4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80174b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174ba:	68db      	ldr	r3, [r3, #12]
 80174bc:	899b      	ldrh	r3, [r3, #12]
 80174be:	b29c      	uxth	r4, r3
 80174c0:	2010      	movs	r0, #16
 80174c2:	f7f9 fdcb 	bl	801105c <lwip_htons>
 80174c6:	4603      	mov	r3, r0
 80174c8:	461a      	mov	r2, r3
 80174ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174cc:	68db      	ldr	r3, [r3, #12]
 80174ce:	4322      	orrs	r2, r4
 80174d0:	b292      	uxth	r2, r2
 80174d2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80174d4:	697a      	ldr	r2, [r7, #20]
 80174d6:	6879      	ldr	r1, [r7, #4]
 80174d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80174da:	f000 f909 	bl	80176f0 <tcp_output_segment>
 80174de:	4603      	mov	r3, r0
 80174e0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80174e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d016      	beq.n	8017518 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	8b5b      	ldrh	r3, [r3, #26]
 80174ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80174f2:	b29a      	uxth	r2, r3
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	835a      	strh	r2, [r3, #26]
      return err;
 80174f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80174fc:	e0d3      	b.n	80176a6 <tcp_output+0x3de>
 80174fe:	bf00      	nop
 8017500:	0801df70 	.word	0x0801df70
 8017504:	0801e4b4 	.word	0x0801e4b4
 8017508:	0801dfc4 	.word	0x0801dfc4
 801750c:	0801e4cc 	.word	0x0801e4cc
 8017510:	240081d8 	.word	0x240081d8
 8017514:	0801e4f4 	.word	0x0801e4f4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8017518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801751a:	681a      	ldr	r2, [r3, #0]
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	7d1b      	ldrb	r3, [r3, #20]
 8017524:	2b02      	cmp	r3, #2
 8017526:	d006      	beq.n	8017536 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	8b5b      	ldrh	r3, [r3, #26]
 801752c:	f023 0303 	bic.w	r3, r3, #3
 8017530:	b29a      	uxth	r2, r3
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017538:	68db      	ldr	r3, [r3, #12]
 801753a:	685b      	ldr	r3, [r3, #4]
 801753c:	4618      	mov	r0, r3
 801753e:	f7f9 fda3 	bl	8011088 <lwip_htonl>
 8017542:	4604      	mov	r4, r0
 8017544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017546:	891b      	ldrh	r3, [r3, #8]
 8017548:	461d      	mov	r5, r3
 801754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801754c:	68db      	ldr	r3, [r3, #12]
 801754e:	899b      	ldrh	r3, [r3, #12]
 8017550:	b29b      	uxth	r3, r3
 8017552:	4618      	mov	r0, r3
 8017554:	f7f9 fd82 	bl	801105c <lwip_htons>
 8017558:	4603      	mov	r3, r0
 801755a:	b2db      	uxtb	r3, r3
 801755c:	f003 0303 	and.w	r3, r3, #3
 8017560:	2b00      	cmp	r3, #0
 8017562:	d001      	beq.n	8017568 <tcp_output+0x2a0>
 8017564:	2301      	movs	r3, #1
 8017566:	e000      	b.n	801756a <tcp_output+0x2a2>
 8017568:	2300      	movs	r3, #0
 801756a:	442b      	add	r3, r5
 801756c:	4423      	add	r3, r4
 801756e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017574:	68bb      	ldr	r3, [r7, #8]
 8017576:	1ad3      	subs	r3, r2, r3
 8017578:	2b00      	cmp	r3, #0
 801757a:	da02      	bge.n	8017582 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	68ba      	ldr	r2, [r7, #8]
 8017580:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8017582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017584:	891b      	ldrh	r3, [r3, #8]
 8017586:	461c      	mov	r4, r3
 8017588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801758a:	68db      	ldr	r3, [r3, #12]
 801758c:	899b      	ldrh	r3, [r3, #12]
 801758e:	b29b      	uxth	r3, r3
 8017590:	4618      	mov	r0, r3
 8017592:	f7f9 fd63 	bl	801105c <lwip_htons>
 8017596:	4603      	mov	r3, r0
 8017598:	b2db      	uxtb	r3, r3
 801759a:	f003 0303 	and.w	r3, r3, #3
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d001      	beq.n	80175a6 <tcp_output+0x2de>
 80175a2:	2301      	movs	r3, #1
 80175a4:	e000      	b.n	80175a8 <tcp_output+0x2e0>
 80175a6:	2300      	movs	r3, #0
 80175a8:	4423      	add	r3, r4
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d049      	beq.n	8017642 <tcp_output+0x37a>
      seg->next = NULL;
 80175ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175b0:	2200      	movs	r2, #0
 80175b2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d105      	bne.n	80175c8 <tcp_output+0x300>
        pcb->unacked = seg;
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80175c0:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80175c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175c4:	623b      	str	r3, [r7, #32]
 80175c6:	e03f      	b.n	8017648 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80175c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175ca:	68db      	ldr	r3, [r3, #12]
 80175cc:	685b      	ldr	r3, [r3, #4]
 80175ce:	4618      	mov	r0, r3
 80175d0:	f7f9 fd5a 	bl	8011088 <lwip_htonl>
 80175d4:	4604      	mov	r4, r0
 80175d6:	6a3b      	ldr	r3, [r7, #32]
 80175d8:	68db      	ldr	r3, [r3, #12]
 80175da:	685b      	ldr	r3, [r3, #4]
 80175dc:	4618      	mov	r0, r3
 80175de:	f7f9 fd53 	bl	8011088 <lwip_htonl>
 80175e2:	4603      	mov	r3, r0
 80175e4:	1ae3      	subs	r3, r4, r3
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	da24      	bge.n	8017634 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	3370      	adds	r3, #112	@ 0x70
 80175ee:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80175f0:	e002      	b.n	80175f8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80175f2:	69fb      	ldr	r3, [r7, #28]
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80175f8:	69fb      	ldr	r3, [r7, #28]
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d011      	beq.n	8017624 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017600:	69fb      	ldr	r3, [r7, #28]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	68db      	ldr	r3, [r3, #12]
 8017606:	685b      	ldr	r3, [r3, #4]
 8017608:	4618      	mov	r0, r3
 801760a:	f7f9 fd3d 	bl	8011088 <lwip_htonl>
 801760e:	4604      	mov	r4, r0
 8017610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017612:	68db      	ldr	r3, [r3, #12]
 8017614:	685b      	ldr	r3, [r3, #4]
 8017616:	4618      	mov	r0, r3
 8017618:	f7f9 fd36 	bl	8011088 <lwip_htonl>
 801761c:	4603      	mov	r3, r0
 801761e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8017620:	2b00      	cmp	r3, #0
 8017622:	dbe6      	blt.n	80175f2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8017624:	69fb      	ldr	r3, [r7, #28]
 8017626:	681a      	ldr	r2, [r3, #0]
 8017628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801762a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801762c:	69fb      	ldr	r3, [r7, #28]
 801762e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017630:	601a      	str	r2, [r3, #0]
 8017632:	e009      	b.n	8017648 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8017634:	6a3b      	ldr	r3, [r7, #32]
 8017636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017638:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801763a:	6a3b      	ldr	r3, [r7, #32]
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	623b      	str	r3, [r7, #32]
 8017640:	e002      	b.n	8017648 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8017642:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017644:	f7fc fc45 	bl	8013ed2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801764c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801764e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017650:	2b00      	cmp	r3, #0
 8017652:	d012      	beq.n	801767a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8017654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017656:	68db      	ldr	r3, [r3, #12]
 8017658:	685b      	ldr	r3, [r3, #4]
 801765a:	4618      	mov	r0, r3
 801765c:	f7f9 fd14 	bl	8011088 <lwip_htonl>
 8017660:	4602      	mov	r2, r0
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017666:	1ad3      	subs	r3, r2, r3
 8017668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801766a:	8912      	ldrh	r2, [r2, #8]
 801766c:	4413      	add	r3, r2
  while (seg != NULL &&
 801766e:	69ba      	ldr	r2, [r7, #24]
 8017670:	429a      	cmp	r2, r3
 8017672:	f4bf aed9 	bcs.w	8017428 <tcp_output+0x160>
 8017676:	e000      	b.n	801767a <tcp_output+0x3b2>
      break;
 8017678:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801767e:	2b00      	cmp	r3, #0
 8017680:	d108      	bne.n	8017694 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	2200      	movs	r2, #0
 8017686:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801768a:	e004      	b.n	8017696 <tcp_output+0x3ce>
    goto output_done;
 801768c:	bf00      	nop
 801768e:	e002      	b.n	8017696 <tcp_output+0x3ce>
    goto output_done;
 8017690:	bf00      	nop
 8017692:	e000      	b.n	8017696 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017694:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	8b5b      	ldrh	r3, [r3, #26]
 801769a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801769e:	b29a      	uxth	r2, r3
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80176a4:	2300      	movs	r3, #0
}
 80176a6:	4618      	mov	r0, r3
 80176a8:	3728      	adds	r7, #40	@ 0x28
 80176aa:	46bd      	mov	sp, r7
 80176ac:	bdb0      	pop	{r4, r5, r7, pc}
 80176ae:	bf00      	nop

080176b0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b082      	sub	sp, #8
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d106      	bne.n	80176cc <tcp_output_segment_busy+0x1c>
 80176be:	4b09      	ldr	r3, [pc, #36]	@ (80176e4 <tcp_output_segment_busy+0x34>)
 80176c0:	f240 529a 	movw	r2, #1434	@ 0x59a
 80176c4:	4908      	ldr	r1, [pc, #32]	@ (80176e8 <tcp_output_segment_busy+0x38>)
 80176c6:	4809      	ldr	r0, [pc, #36]	@ (80176ec <tcp_output_segment_busy+0x3c>)
 80176c8:	f003 fec4 	bl	801b454 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	685b      	ldr	r3, [r3, #4]
 80176d0:	7b9b      	ldrb	r3, [r3, #14]
 80176d2:	2b01      	cmp	r3, #1
 80176d4:	d001      	beq.n	80176da <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80176d6:	2301      	movs	r3, #1
 80176d8:	e000      	b.n	80176dc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80176da:	2300      	movs	r3, #0
}
 80176dc:	4618      	mov	r0, r3
 80176de:	3708      	adds	r7, #8
 80176e0:	46bd      	mov	sp, r7
 80176e2:	bd80      	pop	{r7, pc}
 80176e4:	0801df70 	.word	0x0801df70
 80176e8:	0801e50c 	.word	0x0801e50c
 80176ec:	0801dfc4 	.word	0x0801dfc4

080176f0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80176f0:	b5b0      	push	{r4, r5, r7, lr}
 80176f2:	b08c      	sub	sp, #48	@ 0x30
 80176f4:	af04      	add	r7, sp, #16
 80176f6:	60f8      	str	r0, [r7, #12]
 80176f8:	60b9      	str	r1, [r7, #8]
 80176fa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d106      	bne.n	8017710 <tcp_output_segment+0x20>
 8017702:	4b64      	ldr	r3, [pc, #400]	@ (8017894 <tcp_output_segment+0x1a4>)
 8017704:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8017708:	4963      	ldr	r1, [pc, #396]	@ (8017898 <tcp_output_segment+0x1a8>)
 801770a:	4864      	ldr	r0, [pc, #400]	@ (801789c <tcp_output_segment+0x1ac>)
 801770c:	f003 fea2 	bl	801b454 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8017710:	68bb      	ldr	r3, [r7, #8]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d106      	bne.n	8017724 <tcp_output_segment+0x34>
 8017716:	4b5f      	ldr	r3, [pc, #380]	@ (8017894 <tcp_output_segment+0x1a4>)
 8017718:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801771c:	4960      	ldr	r1, [pc, #384]	@ (80178a0 <tcp_output_segment+0x1b0>)
 801771e:	485f      	ldr	r0, [pc, #380]	@ (801789c <tcp_output_segment+0x1ac>)
 8017720:	f003 fe98 	bl	801b454 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d106      	bne.n	8017738 <tcp_output_segment+0x48>
 801772a:	4b5a      	ldr	r3, [pc, #360]	@ (8017894 <tcp_output_segment+0x1a4>)
 801772c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8017730:	495c      	ldr	r1, [pc, #368]	@ (80178a4 <tcp_output_segment+0x1b4>)
 8017732:	485a      	ldr	r0, [pc, #360]	@ (801789c <tcp_output_segment+0x1ac>)
 8017734:	f003 fe8e 	bl	801b454 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8017738:	68f8      	ldr	r0, [r7, #12]
 801773a:	f7ff ffb9 	bl	80176b0 <tcp_output_segment_busy>
 801773e:	4603      	mov	r3, r0
 8017740:	2b00      	cmp	r3, #0
 8017742:	d001      	beq.n	8017748 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017744:	2300      	movs	r3, #0
 8017746:	e0a1      	b.n	801788c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017748:	68bb      	ldr	r3, [r7, #8]
 801774a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	68dc      	ldr	r4, [r3, #12]
 8017750:	4610      	mov	r0, r2
 8017752:	f7f9 fc99 	bl	8011088 <lwip_htonl>
 8017756:	4603      	mov	r3, r0
 8017758:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801775a:	68bb      	ldr	r3, [r7, #8]
 801775c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	68dc      	ldr	r4, [r3, #12]
 8017762:	4610      	mov	r0, r2
 8017764:	f7f9 fc7a 	bl	801105c <lwip_htons>
 8017768:	4603      	mov	r3, r0
 801776a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801776c:	68bb      	ldr	r3, [r7, #8]
 801776e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017770:	68ba      	ldr	r2, [r7, #8]
 8017772:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8017774:	441a      	add	r2, r3
 8017776:	68bb      	ldr	r3, [r7, #8]
 8017778:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	68db      	ldr	r3, [r3, #12]
 801777e:	3314      	adds	r3, #20
 8017780:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	7a9b      	ldrb	r3, [r3, #10]
 8017786:	f003 0301 	and.w	r3, r3, #1
 801778a:	2b00      	cmp	r3, #0
 801778c:	d015      	beq.n	80177ba <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801778e:	68bb      	ldr	r3, [r7, #8]
 8017790:	3304      	adds	r3, #4
 8017792:	461a      	mov	r2, r3
 8017794:	6879      	ldr	r1, [r7, #4]
 8017796:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801779a:	f7fc fe91 	bl	80144c0 <tcp_eff_send_mss_netif>
 801779e:	4603      	mov	r3, r0
 80177a0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80177a2:	8b7b      	ldrh	r3, [r7, #26]
 80177a4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80177a8:	4618      	mov	r0, r3
 80177aa:	f7f9 fc6d 	bl	8011088 <lwip_htonl>
 80177ae:	4602      	mov	r2, r0
 80177b0:	69fb      	ldr	r3, [r7, #28]
 80177b2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80177b4:	69fb      	ldr	r3, [r7, #28]
 80177b6:	3304      	adds	r3, #4
 80177b8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80177ba:	68bb      	ldr	r3, [r7, #8]
 80177bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	da02      	bge.n	80177ca <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80177c4:	68bb      	ldr	r3, [r7, #8]
 80177c6:	2200      	movs	r2, #0
 80177c8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80177ca:	68bb      	ldr	r3, [r7, #8]
 80177cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d10c      	bne.n	80177ec <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80177d2:	4b35      	ldr	r3, [pc, #212]	@ (80178a8 <tcp_output_segment+0x1b8>)
 80177d4:	681a      	ldr	r2, [r3, #0]
 80177d6:	68bb      	ldr	r3, [r7, #8]
 80177d8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	68db      	ldr	r3, [r3, #12]
 80177de:	685b      	ldr	r3, [r3, #4]
 80177e0:	4618      	mov	r0, r3
 80177e2:	f7f9 fc51 	bl	8011088 <lwip_htonl>
 80177e6:	4602      	mov	r2, r0
 80177e8:	68bb      	ldr	r3, [r7, #8]
 80177ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	68da      	ldr	r2, [r3, #12]
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	685b      	ldr	r3, [r3, #4]
 80177f4:	685b      	ldr	r3, [r3, #4]
 80177f6:	1ad3      	subs	r3, r2, r3
 80177f8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	685b      	ldr	r3, [r3, #4]
 80177fe:	8959      	ldrh	r1, [r3, #10]
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	685b      	ldr	r3, [r3, #4]
 8017804:	8b3a      	ldrh	r2, [r7, #24]
 8017806:	1a8a      	subs	r2, r1, r2
 8017808:	b292      	uxth	r2, r2
 801780a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	685b      	ldr	r3, [r3, #4]
 8017810:	8919      	ldrh	r1, [r3, #8]
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	685b      	ldr	r3, [r3, #4]
 8017816:	8b3a      	ldrh	r2, [r7, #24]
 8017818:	1a8a      	subs	r2, r1, r2
 801781a:	b292      	uxth	r2, r2
 801781c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	685b      	ldr	r3, [r3, #4]
 8017822:	68fa      	ldr	r2, [r7, #12]
 8017824:	68d2      	ldr	r2, [r2, #12]
 8017826:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	68db      	ldr	r3, [r3, #12]
 801782c:	2200      	movs	r2, #0
 801782e:	741a      	strb	r2, [r3, #16]
 8017830:	2200      	movs	r2, #0
 8017832:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	68da      	ldr	r2, [r3, #12]
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	7a9b      	ldrb	r3, [r3, #10]
 801783c:	f003 0301 	and.w	r3, r3, #1
 8017840:	2b00      	cmp	r3, #0
 8017842:	d001      	beq.n	8017848 <tcp_output_segment+0x158>
 8017844:	2318      	movs	r3, #24
 8017846:	e000      	b.n	801784a <tcp_output_segment+0x15a>
 8017848:	2314      	movs	r3, #20
 801784a:	4413      	add	r3, r2
 801784c:	69fa      	ldr	r2, [r7, #28]
 801784e:	429a      	cmp	r2, r3
 8017850:	d006      	beq.n	8017860 <tcp_output_segment+0x170>
 8017852:	4b10      	ldr	r3, [pc, #64]	@ (8017894 <tcp_output_segment+0x1a4>)
 8017854:	f240 621c 	movw	r2, #1564	@ 0x61c
 8017858:	4914      	ldr	r1, [pc, #80]	@ (80178ac <tcp_output_segment+0x1bc>)
 801785a:	4810      	ldr	r0, [pc, #64]	@ (801789c <tcp_output_segment+0x1ac>)
 801785c:	f003 fdfa 	bl	801b454 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	6858      	ldr	r0, [r3, #4]
 8017864:	68b9      	ldr	r1, [r7, #8]
 8017866:	68bb      	ldr	r3, [r7, #8]
 8017868:	1d1c      	adds	r4, r3, #4
 801786a:	68bb      	ldr	r3, [r7, #8]
 801786c:	7add      	ldrb	r5, [r3, #11]
 801786e:	68bb      	ldr	r3, [r7, #8]
 8017870:	7a9b      	ldrb	r3, [r3, #10]
 8017872:	687a      	ldr	r2, [r7, #4]
 8017874:	9202      	str	r2, [sp, #8]
 8017876:	2206      	movs	r2, #6
 8017878:	9201      	str	r2, [sp, #4]
 801787a:	9300      	str	r3, [sp, #0]
 801787c:	462b      	mov	r3, r5
 801787e:	4622      	mov	r2, r4
 8017880:	f002 fa8a 	bl	8019d98 <ip4_output_if>
 8017884:	4603      	mov	r3, r0
 8017886:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017888:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801788c:	4618      	mov	r0, r3
 801788e:	3720      	adds	r7, #32
 8017890:	46bd      	mov	sp, r7
 8017892:	bdb0      	pop	{r4, r5, r7, pc}
 8017894:	0801df70 	.word	0x0801df70
 8017898:	0801e534 	.word	0x0801e534
 801789c:	0801dfc4 	.word	0x0801dfc4
 80178a0:	0801e554 	.word	0x0801e554
 80178a4:	0801e574 	.word	0x0801e574
 80178a8:	2400818c 	.word	0x2400818c
 80178ac:	0801e598 	.word	0x0801e598

080178b0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80178b0:	b5b0      	push	{r4, r5, r7, lr}
 80178b2:	b084      	sub	sp, #16
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d106      	bne.n	80178cc <tcp_rexmit_rto_prepare+0x1c>
 80178be:	4b31      	ldr	r3, [pc, #196]	@ (8017984 <tcp_rexmit_rto_prepare+0xd4>)
 80178c0:	f240 6263 	movw	r2, #1635	@ 0x663
 80178c4:	4930      	ldr	r1, [pc, #192]	@ (8017988 <tcp_rexmit_rto_prepare+0xd8>)
 80178c6:	4831      	ldr	r0, [pc, #196]	@ (801798c <tcp_rexmit_rto_prepare+0xdc>)
 80178c8:	f003 fdc4 	bl	801b454 <iprintf>

  if (pcb->unacked == NULL) {
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d102      	bne.n	80178da <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80178d4:	f06f 0305 	mvn.w	r3, #5
 80178d8:	e050      	b.n	801797c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80178de:	60fb      	str	r3, [r7, #12]
 80178e0:	e00b      	b.n	80178fa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80178e2:	68f8      	ldr	r0, [r7, #12]
 80178e4:	f7ff fee4 	bl	80176b0 <tcp_output_segment_busy>
 80178e8:	4603      	mov	r3, r0
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d002      	beq.n	80178f4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80178ee:	f06f 0305 	mvn.w	r3, #5
 80178f2:	e043      	b.n	801797c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	60fb      	str	r3, [r7, #12]
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d1ef      	bne.n	80178e2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8017902:	68f8      	ldr	r0, [r7, #12]
 8017904:	f7ff fed4 	bl	80176b0 <tcp_output_segment_busy>
 8017908:	4603      	mov	r3, r0
 801790a:	2b00      	cmp	r3, #0
 801790c:	d002      	beq.n	8017914 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801790e:	f06f 0305 	mvn.w	r3, #5
 8017912:	e033      	b.n	801797c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	2200      	movs	r2, #0
 8017928:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	8b5b      	ldrh	r3, [r3, #26]
 801792e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8017932:	b29a      	uxth	r2, r3
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	68db      	ldr	r3, [r3, #12]
 801793c:	685b      	ldr	r3, [r3, #4]
 801793e:	4618      	mov	r0, r3
 8017940:	f7f9 fba2 	bl	8011088 <lwip_htonl>
 8017944:	4604      	mov	r4, r0
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	891b      	ldrh	r3, [r3, #8]
 801794a:	461d      	mov	r5, r3
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	68db      	ldr	r3, [r3, #12]
 8017950:	899b      	ldrh	r3, [r3, #12]
 8017952:	b29b      	uxth	r3, r3
 8017954:	4618      	mov	r0, r3
 8017956:	f7f9 fb81 	bl	801105c <lwip_htons>
 801795a:	4603      	mov	r3, r0
 801795c:	b2db      	uxtb	r3, r3
 801795e:	f003 0303 	and.w	r3, r3, #3
 8017962:	2b00      	cmp	r3, #0
 8017964:	d001      	beq.n	801796a <tcp_rexmit_rto_prepare+0xba>
 8017966:	2301      	movs	r3, #1
 8017968:	e000      	b.n	801796c <tcp_rexmit_rto_prepare+0xbc>
 801796a:	2300      	movs	r3, #0
 801796c:	442b      	add	r3, r5
 801796e:	18e2      	adds	r2, r4, r3
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	2200      	movs	r2, #0
 8017978:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801797a:	2300      	movs	r3, #0
}
 801797c:	4618      	mov	r0, r3
 801797e:	3710      	adds	r7, #16
 8017980:	46bd      	mov	sp, r7
 8017982:	bdb0      	pop	{r4, r5, r7, pc}
 8017984:	0801df70 	.word	0x0801df70
 8017988:	0801e5ac 	.word	0x0801e5ac
 801798c:	0801dfc4 	.word	0x0801dfc4

08017990 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8017990:	b580      	push	{r7, lr}
 8017992:	b082      	sub	sp, #8
 8017994:	af00      	add	r7, sp, #0
 8017996:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d106      	bne.n	80179ac <tcp_rexmit_rto_commit+0x1c>
 801799e:	4b0d      	ldr	r3, [pc, #52]	@ (80179d4 <tcp_rexmit_rto_commit+0x44>)
 80179a0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80179a4:	490c      	ldr	r1, [pc, #48]	@ (80179d8 <tcp_rexmit_rto_commit+0x48>)
 80179a6:	480d      	ldr	r0, [pc, #52]	@ (80179dc <tcp_rexmit_rto_commit+0x4c>)
 80179a8:	f003 fd54 	bl	801b454 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80179b2:	2bff      	cmp	r3, #255	@ 0xff
 80179b4:	d007      	beq.n	80179c6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80179bc:	3301      	adds	r3, #1
 80179be:	b2da      	uxtb	r2, r3
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80179c6:	6878      	ldr	r0, [r7, #4]
 80179c8:	f7ff fc7e 	bl	80172c8 <tcp_output>
}
 80179cc:	bf00      	nop
 80179ce:	3708      	adds	r7, #8
 80179d0:	46bd      	mov	sp, r7
 80179d2:	bd80      	pop	{r7, pc}
 80179d4:	0801df70 	.word	0x0801df70
 80179d8:	0801e5d0 	.word	0x0801e5d0
 80179dc:	0801dfc4 	.word	0x0801dfc4

080179e0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b082      	sub	sp, #8
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d106      	bne.n	80179fc <tcp_rexmit_rto+0x1c>
 80179ee:	4b0a      	ldr	r3, [pc, #40]	@ (8017a18 <tcp_rexmit_rto+0x38>)
 80179f0:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80179f4:	4909      	ldr	r1, [pc, #36]	@ (8017a1c <tcp_rexmit_rto+0x3c>)
 80179f6:	480a      	ldr	r0, [pc, #40]	@ (8017a20 <tcp_rexmit_rto+0x40>)
 80179f8:	f003 fd2c 	bl	801b454 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80179fc:	6878      	ldr	r0, [r7, #4]
 80179fe:	f7ff ff57 	bl	80178b0 <tcp_rexmit_rto_prepare>
 8017a02:	4603      	mov	r3, r0
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d102      	bne.n	8017a0e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017a08:	6878      	ldr	r0, [r7, #4]
 8017a0a:	f7ff ffc1 	bl	8017990 <tcp_rexmit_rto_commit>
  }
}
 8017a0e:	bf00      	nop
 8017a10:	3708      	adds	r7, #8
 8017a12:	46bd      	mov	sp, r7
 8017a14:	bd80      	pop	{r7, pc}
 8017a16:	bf00      	nop
 8017a18:	0801df70 	.word	0x0801df70
 8017a1c:	0801e5f4 	.word	0x0801e5f4
 8017a20:	0801dfc4 	.word	0x0801dfc4

08017a24 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017a24:	b590      	push	{r4, r7, lr}
 8017a26:	b085      	sub	sp, #20
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d106      	bne.n	8017a40 <tcp_rexmit+0x1c>
 8017a32:	4b2f      	ldr	r3, [pc, #188]	@ (8017af0 <tcp_rexmit+0xcc>)
 8017a34:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8017a38:	492e      	ldr	r1, [pc, #184]	@ (8017af4 <tcp_rexmit+0xd0>)
 8017a3a:	482f      	ldr	r0, [pc, #188]	@ (8017af8 <tcp_rexmit+0xd4>)
 8017a3c:	f003 fd0a 	bl	801b454 <iprintf>

  if (pcb->unacked == NULL) {
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d102      	bne.n	8017a4e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017a48:	f06f 0305 	mvn.w	r3, #5
 8017a4c:	e04c      	b.n	8017ae8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a52:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017a54:	68b8      	ldr	r0, [r7, #8]
 8017a56:	f7ff fe2b 	bl	80176b0 <tcp_output_segment_busy>
 8017a5a:	4603      	mov	r3, r0
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d002      	beq.n	8017a66 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017a60:	f06f 0305 	mvn.w	r3, #5
 8017a64:	e040      	b.n	8017ae8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017a66:	68bb      	ldr	r3, [r7, #8]
 8017a68:	681a      	ldr	r2, [r3, #0]
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	336c      	adds	r3, #108	@ 0x6c
 8017a72:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017a74:	e002      	b.n	8017a7c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d011      	beq.n	8017aa8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	68db      	ldr	r3, [r3, #12]
 8017a8a:	685b      	ldr	r3, [r3, #4]
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	f7f9 fafb 	bl	8011088 <lwip_htonl>
 8017a92:	4604      	mov	r4, r0
 8017a94:	68bb      	ldr	r3, [r7, #8]
 8017a96:	68db      	ldr	r3, [r3, #12]
 8017a98:	685b      	ldr	r3, [r3, #4]
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	f7f9 faf4 	bl	8011088 <lwip_htonl>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	dbe6      	blt.n	8017a76 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	681a      	ldr	r2, [r3, #0]
 8017aac:	68bb      	ldr	r3, [r7, #8]
 8017aae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	68ba      	ldr	r2, [r7, #8]
 8017ab4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017ab6:	68bb      	ldr	r3, [r7, #8]
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d103      	bne.n	8017ac6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017acc:	2bff      	cmp	r3, #255	@ 0xff
 8017ace:	d007      	beq.n	8017ae0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017ad6:	3301      	adds	r3, #1
 8017ad8:	b2da      	uxtb	r2, r3
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	2200      	movs	r2, #0
 8017ae4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017ae6:	2300      	movs	r3, #0
}
 8017ae8:	4618      	mov	r0, r3
 8017aea:	3714      	adds	r7, #20
 8017aec:	46bd      	mov	sp, r7
 8017aee:	bd90      	pop	{r4, r7, pc}
 8017af0:	0801df70 	.word	0x0801df70
 8017af4:	0801e610 	.word	0x0801e610
 8017af8:	0801dfc4 	.word	0x0801dfc4

08017afc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b082      	sub	sp, #8
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d106      	bne.n	8017b18 <tcp_rexmit_fast+0x1c>
 8017b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8017bb4 <tcp_rexmit_fast+0xb8>)
 8017b0c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8017b10:	4929      	ldr	r1, [pc, #164]	@ (8017bb8 <tcp_rexmit_fast+0xbc>)
 8017b12:	482a      	ldr	r0, [pc, #168]	@ (8017bbc <tcp_rexmit_fast+0xc0>)
 8017b14:	f003 fc9e 	bl	801b454 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d045      	beq.n	8017bac <tcp_rexmit_fast+0xb0>
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	8b5b      	ldrh	r3, [r3, #26]
 8017b24:	f003 0304 	and.w	r3, r3, #4
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d13f      	bne.n	8017bac <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017b2c:	6878      	ldr	r0, [r7, #4]
 8017b2e:	f7ff ff79 	bl	8017a24 <tcp_rexmit>
 8017b32:	4603      	mov	r3, r0
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d139      	bne.n	8017bac <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017b44:	4293      	cmp	r3, r2
 8017b46:	bf28      	it	cs
 8017b48:	4613      	movcs	r3, r2
 8017b4a:	b29b      	uxth	r3, r3
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	da00      	bge.n	8017b52 <tcp_rexmit_fast+0x56>
 8017b50:	3301      	adds	r3, #1
 8017b52:	105b      	asrs	r3, r3, #1
 8017b54:	b29a      	uxth	r2, r3
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8017b62:	461a      	mov	r2, r3
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017b68:	005b      	lsls	r3, r3, #1
 8017b6a:	429a      	cmp	r2, r3
 8017b6c:	d206      	bcs.n	8017b7c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017b72:	005b      	lsls	r3, r3, #1
 8017b74:	b29a      	uxth	r2, r3
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017b86:	4619      	mov	r1, r3
 8017b88:	0049      	lsls	r1, r1, #1
 8017b8a:	440b      	add	r3, r1
 8017b8c:	b29b      	uxth	r3, r3
 8017b8e:	4413      	add	r3, r2
 8017b90:	b29a      	uxth	r2, r3
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	8b5b      	ldrh	r3, [r3, #26]
 8017b9c:	f043 0304 	orr.w	r3, r3, #4
 8017ba0:	b29a      	uxth	r2, r3
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	2200      	movs	r2, #0
 8017baa:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8017bac:	bf00      	nop
 8017bae:	3708      	adds	r7, #8
 8017bb0:	46bd      	mov	sp, r7
 8017bb2:	bd80      	pop	{r7, pc}
 8017bb4:	0801df70 	.word	0x0801df70
 8017bb8:	0801e628 	.word	0x0801e628
 8017bbc:	0801dfc4 	.word	0x0801dfc4

08017bc0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b086      	sub	sp, #24
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	60f8      	str	r0, [r7, #12]
 8017bc8:	607b      	str	r3, [r7, #4]
 8017bca:	460b      	mov	r3, r1
 8017bcc:	817b      	strh	r3, [r7, #10]
 8017bce:	4613      	mov	r3, r2
 8017bd0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017bd2:	897a      	ldrh	r2, [r7, #10]
 8017bd4:	893b      	ldrh	r3, [r7, #8]
 8017bd6:	4413      	add	r3, r2
 8017bd8:	b29b      	uxth	r3, r3
 8017bda:	3314      	adds	r3, #20
 8017bdc:	b29b      	uxth	r3, r3
 8017bde:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017be2:	4619      	mov	r1, r3
 8017be4:	2022      	movs	r0, #34	@ 0x22
 8017be6:	f7fa fc0f 	bl	8012408 <pbuf_alloc>
 8017bea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017bec:	697b      	ldr	r3, [r7, #20]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d04d      	beq.n	8017c8e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017bf2:	897b      	ldrh	r3, [r7, #10]
 8017bf4:	3313      	adds	r3, #19
 8017bf6:	697a      	ldr	r2, [r7, #20]
 8017bf8:	8952      	ldrh	r2, [r2, #10]
 8017bfa:	4293      	cmp	r3, r2
 8017bfc:	db06      	blt.n	8017c0c <tcp_output_alloc_header_common+0x4c>
 8017bfe:	4b26      	ldr	r3, [pc, #152]	@ (8017c98 <tcp_output_alloc_header_common+0xd8>)
 8017c00:	f240 7223 	movw	r2, #1827	@ 0x723
 8017c04:	4925      	ldr	r1, [pc, #148]	@ (8017c9c <tcp_output_alloc_header_common+0xdc>)
 8017c06:	4826      	ldr	r0, [pc, #152]	@ (8017ca0 <tcp_output_alloc_header_common+0xe0>)
 8017c08:	f003 fc24 	bl	801b454 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017c0c:	697b      	ldr	r3, [r7, #20]
 8017c0e:	685b      	ldr	r3, [r3, #4]
 8017c10:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8017c12:	8c3b      	ldrh	r3, [r7, #32]
 8017c14:	4618      	mov	r0, r3
 8017c16:	f7f9 fa21 	bl	801105c <lwip_htons>
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	461a      	mov	r2, r3
 8017c1e:	693b      	ldr	r3, [r7, #16]
 8017c20:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8017c22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c24:	4618      	mov	r0, r3
 8017c26:	f7f9 fa19 	bl	801105c <lwip_htons>
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	461a      	mov	r2, r3
 8017c2e:	693b      	ldr	r3, [r7, #16]
 8017c30:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8017c32:	693b      	ldr	r3, [r7, #16]
 8017c34:	687a      	ldr	r2, [r7, #4]
 8017c36:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017c38:	68f8      	ldr	r0, [r7, #12]
 8017c3a:	f7f9 fa25 	bl	8011088 <lwip_htonl>
 8017c3e:	4602      	mov	r2, r0
 8017c40:	693b      	ldr	r3, [r7, #16]
 8017c42:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017c44:	897b      	ldrh	r3, [r7, #10]
 8017c46:	089b      	lsrs	r3, r3, #2
 8017c48:	b29b      	uxth	r3, r3
 8017c4a:	3305      	adds	r3, #5
 8017c4c:	b29b      	uxth	r3, r3
 8017c4e:	031b      	lsls	r3, r3, #12
 8017c50:	b29a      	uxth	r2, r3
 8017c52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017c56:	b29b      	uxth	r3, r3
 8017c58:	4313      	orrs	r3, r2
 8017c5a:	b29b      	uxth	r3, r3
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	f7f9 f9fd 	bl	801105c <lwip_htons>
 8017c62:	4603      	mov	r3, r0
 8017c64:	461a      	mov	r2, r3
 8017c66:	693b      	ldr	r3, [r7, #16]
 8017c68:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017c6a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	f7f9 f9f5 	bl	801105c <lwip_htons>
 8017c72:	4603      	mov	r3, r0
 8017c74:	461a      	mov	r2, r3
 8017c76:	693b      	ldr	r3, [r7, #16]
 8017c78:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017c7a:	693b      	ldr	r3, [r7, #16]
 8017c7c:	2200      	movs	r2, #0
 8017c7e:	741a      	strb	r2, [r3, #16]
 8017c80:	2200      	movs	r2, #0
 8017c82:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017c84:	693b      	ldr	r3, [r7, #16]
 8017c86:	2200      	movs	r2, #0
 8017c88:	749a      	strb	r2, [r3, #18]
 8017c8a:	2200      	movs	r2, #0
 8017c8c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8017c8e:	697b      	ldr	r3, [r7, #20]
}
 8017c90:	4618      	mov	r0, r3
 8017c92:	3718      	adds	r7, #24
 8017c94:	46bd      	mov	sp, r7
 8017c96:	bd80      	pop	{r7, pc}
 8017c98:	0801df70 	.word	0x0801df70
 8017c9c:	0801e648 	.word	0x0801e648
 8017ca0:	0801dfc4 	.word	0x0801dfc4

08017ca4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017ca4:	b5b0      	push	{r4, r5, r7, lr}
 8017ca6:	b08a      	sub	sp, #40	@ 0x28
 8017ca8:	af04      	add	r7, sp, #16
 8017caa:	60f8      	str	r0, [r7, #12]
 8017cac:	607b      	str	r3, [r7, #4]
 8017cae:	460b      	mov	r3, r1
 8017cb0:	817b      	strh	r3, [r7, #10]
 8017cb2:	4613      	mov	r3, r2
 8017cb4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d106      	bne.n	8017cca <tcp_output_alloc_header+0x26>
 8017cbc:	4b15      	ldr	r3, [pc, #84]	@ (8017d14 <tcp_output_alloc_header+0x70>)
 8017cbe:	f240 7242 	movw	r2, #1858	@ 0x742
 8017cc2:	4915      	ldr	r1, [pc, #84]	@ (8017d18 <tcp_output_alloc_header+0x74>)
 8017cc4:	4815      	ldr	r0, [pc, #84]	@ (8017d1c <tcp_output_alloc_header+0x78>)
 8017cc6:	f003 fbc5 	bl	801b454 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	8adb      	ldrh	r3, [r3, #22]
 8017cd2:	68fa      	ldr	r2, [r7, #12]
 8017cd4:	8b12      	ldrh	r2, [r2, #24]
 8017cd6:	68f9      	ldr	r1, [r7, #12]
 8017cd8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8017cda:	893d      	ldrh	r5, [r7, #8]
 8017cdc:	897c      	ldrh	r4, [r7, #10]
 8017cde:	9103      	str	r1, [sp, #12]
 8017ce0:	2110      	movs	r1, #16
 8017ce2:	9102      	str	r1, [sp, #8]
 8017ce4:	9201      	str	r2, [sp, #4]
 8017ce6:	9300      	str	r3, [sp, #0]
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	462a      	mov	r2, r5
 8017cec:	4621      	mov	r1, r4
 8017cee:	f7ff ff67 	bl	8017bc0 <tcp_output_alloc_header_common>
 8017cf2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017cf4:	697b      	ldr	r3, [r7, #20]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d006      	beq.n	8017d08 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017cfe:	68fa      	ldr	r2, [r7, #12]
 8017d00:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8017d02:	441a      	add	r2, r3
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8017d08:	697b      	ldr	r3, [r7, #20]
}
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	3718      	adds	r7, #24
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	bdb0      	pop	{r4, r5, r7, pc}
 8017d12:	bf00      	nop
 8017d14:	0801df70 	.word	0x0801df70
 8017d18:	0801e678 	.word	0x0801e678
 8017d1c:	0801dfc4 	.word	0x0801dfc4

08017d20 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	b088      	sub	sp, #32
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	60f8      	str	r0, [r7, #12]
 8017d28:	60b9      	str	r1, [r7, #8]
 8017d2a:	4611      	mov	r1, r2
 8017d2c:	461a      	mov	r2, r3
 8017d2e:	460b      	mov	r3, r1
 8017d30:	71fb      	strb	r3, [r7, #7]
 8017d32:	4613      	mov	r3, r2
 8017d34:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8017d36:	2300      	movs	r3, #0
 8017d38:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017d3a:	68bb      	ldr	r3, [r7, #8]
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d106      	bne.n	8017d4e <tcp_output_fill_options+0x2e>
 8017d40:	4b12      	ldr	r3, [pc, #72]	@ (8017d8c <tcp_output_fill_options+0x6c>)
 8017d42:	f240 7256 	movw	r2, #1878	@ 0x756
 8017d46:	4912      	ldr	r1, [pc, #72]	@ (8017d90 <tcp_output_fill_options+0x70>)
 8017d48:	4812      	ldr	r0, [pc, #72]	@ (8017d94 <tcp_output_fill_options+0x74>)
 8017d4a:	f003 fb83 	bl	801b454 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017d4e:	68bb      	ldr	r3, [r7, #8]
 8017d50:	685b      	ldr	r3, [r3, #4]
 8017d52:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017d54:	69bb      	ldr	r3, [r7, #24]
 8017d56:	3314      	adds	r3, #20
 8017d58:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017d5a:	8bfb      	ldrh	r3, [r7, #30]
 8017d5c:	009b      	lsls	r3, r3, #2
 8017d5e:	461a      	mov	r2, r3
 8017d60:	79fb      	ldrb	r3, [r7, #7]
 8017d62:	009b      	lsls	r3, r3, #2
 8017d64:	f003 0304 	and.w	r3, r3, #4
 8017d68:	4413      	add	r3, r2
 8017d6a:	3314      	adds	r3, #20
 8017d6c:	69ba      	ldr	r2, [r7, #24]
 8017d6e:	4413      	add	r3, r2
 8017d70:	697a      	ldr	r2, [r7, #20]
 8017d72:	429a      	cmp	r2, r3
 8017d74:	d006      	beq.n	8017d84 <tcp_output_fill_options+0x64>
 8017d76:	4b05      	ldr	r3, [pc, #20]	@ (8017d8c <tcp_output_fill_options+0x6c>)
 8017d78:	f240 7275 	movw	r2, #1909	@ 0x775
 8017d7c:	4906      	ldr	r1, [pc, #24]	@ (8017d98 <tcp_output_fill_options+0x78>)
 8017d7e:	4805      	ldr	r0, [pc, #20]	@ (8017d94 <tcp_output_fill_options+0x74>)
 8017d80:	f003 fb68 	bl	801b454 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017d84:	bf00      	nop
 8017d86:	3720      	adds	r7, #32
 8017d88:	46bd      	mov	sp, r7
 8017d8a:	bd80      	pop	{r7, pc}
 8017d8c:	0801df70 	.word	0x0801df70
 8017d90:	0801e6a0 	.word	0x0801e6a0
 8017d94:	0801dfc4 	.word	0x0801dfc4
 8017d98:	0801e598 	.word	0x0801e598

08017d9c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b08a      	sub	sp, #40	@ 0x28
 8017da0:	af04      	add	r7, sp, #16
 8017da2:	60f8      	str	r0, [r7, #12]
 8017da4:	60b9      	str	r1, [r7, #8]
 8017da6:	607a      	str	r2, [r7, #4]
 8017da8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017daa:	68bb      	ldr	r3, [r7, #8]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d106      	bne.n	8017dbe <tcp_output_control_segment+0x22>
 8017db0:	4b1c      	ldr	r3, [pc, #112]	@ (8017e24 <tcp_output_control_segment+0x88>)
 8017db2:	f240 7287 	movw	r2, #1927	@ 0x787
 8017db6:	491c      	ldr	r1, [pc, #112]	@ (8017e28 <tcp_output_control_segment+0x8c>)
 8017db8:	481c      	ldr	r0, [pc, #112]	@ (8017e2c <tcp_output_control_segment+0x90>)
 8017dba:	f003 fb4b 	bl	801b454 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8017dbe:	683a      	ldr	r2, [r7, #0]
 8017dc0:	6879      	ldr	r1, [r7, #4]
 8017dc2:	68f8      	ldr	r0, [r7, #12]
 8017dc4:	f7fe ff42 	bl	8016c4c <tcp_route>
 8017dc8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017dca:	693b      	ldr	r3, [r7, #16]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d102      	bne.n	8017dd6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017dd0:	23fc      	movs	r3, #252	@ 0xfc
 8017dd2:	75fb      	strb	r3, [r7, #23]
 8017dd4:	e01c      	b.n	8017e10 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d006      	beq.n	8017dea <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	7adb      	ldrb	r3, [r3, #11]
 8017de0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	7a9b      	ldrb	r3, [r3, #10]
 8017de6:	757b      	strb	r3, [r7, #21]
 8017de8:	e003      	b.n	8017df2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017dea:	23ff      	movs	r3, #255	@ 0xff
 8017dec:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017dee:	2300      	movs	r3, #0
 8017df0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017df2:	7dba      	ldrb	r2, [r7, #22]
 8017df4:	693b      	ldr	r3, [r7, #16]
 8017df6:	9302      	str	r3, [sp, #8]
 8017df8:	2306      	movs	r3, #6
 8017dfa:	9301      	str	r3, [sp, #4]
 8017dfc:	7d7b      	ldrb	r3, [r7, #21]
 8017dfe:	9300      	str	r3, [sp, #0]
 8017e00:	4613      	mov	r3, r2
 8017e02:	683a      	ldr	r2, [r7, #0]
 8017e04:	6879      	ldr	r1, [r7, #4]
 8017e06:	68b8      	ldr	r0, [r7, #8]
 8017e08:	f001 ffc6 	bl	8019d98 <ip4_output_if>
 8017e0c:	4603      	mov	r3, r0
 8017e0e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017e10:	68b8      	ldr	r0, [r7, #8]
 8017e12:	f7fa fddd 	bl	80129d0 <pbuf_free>
  return err;
 8017e16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	3718      	adds	r7, #24
 8017e1e:	46bd      	mov	sp, r7
 8017e20:	bd80      	pop	{r7, pc}
 8017e22:	bf00      	nop
 8017e24:	0801df70 	.word	0x0801df70
 8017e28:	0801e6c8 	.word	0x0801e6c8
 8017e2c:	0801dfc4 	.word	0x0801dfc4

08017e30 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017e30:	b590      	push	{r4, r7, lr}
 8017e32:	b08b      	sub	sp, #44	@ 0x2c
 8017e34:	af04      	add	r7, sp, #16
 8017e36:	60f8      	str	r0, [r7, #12]
 8017e38:	60b9      	str	r1, [r7, #8]
 8017e3a:	607a      	str	r2, [r7, #4]
 8017e3c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017e3e:	683b      	ldr	r3, [r7, #0]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d106      	bne.n	8017e52 <tcp_rst+0x22>
 8017e44:	4b1f      	ldr	r3, [pc, #124]	@ (8017ec4 <tcp_rst+0x94>)
 8017e46:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8017e4a:	491f      	ldr	r1, [pc, #124]	@ (8017ec8 <tcp_rst+0x98>)
 8017e4c:	481f      	ldr	r0, [pc, #124]	@ (8017ecc <tcp_rst+0x9c>)
 8017e4e:	f003 fb01 	bl	801b454 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d106      	bne.n	8017e66 <tcp_rst+0x36>
 8017e58:	4b1a      	ldr	r3, [pc, #104]	@ (8017ec4 <tcp_rst+0x94>)
 8017e5a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8017e5e:	491c      	ldr	r1, [pc, #112]	@ (8017ed0 <tcp_rst+0xa0>)
 8017e60:	481a      	ldr	r0, [pc, #104]	@ (8017ecc <tcp_rst+0x9c>)
 8017e62:	f003 faf7 	bl	801b454 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017e66:	2300      	movs	r3, #0
 8017e68:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017e6a:	f246 0308 	movw	r3, #24584	@ 0x6008
 8017e6e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017e70:	7dfb      	ldrb	r3, [r7, #23]
 8017e72:	b29c      	uxth	r4, r3
 8017e74:	68b8      	ldr	r0, [r7, #8]
 8017e76:	f7f9 f907 	bl	8011088 <lwip_htonl>
 8017e7a:	4602      	mov	r2, r0
 8017e7c:	8abb      	ldrh	r3, [r7, #20]
 8017e7e:	9303      	str	r3, [sp, #12]
 8017e80:	2314      	movs	r3, #20
 8017e82:	9302      	str	r3, [sp, #8]
 8017e84:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017e86:	9301      	str	r3, [sp, #4]
 8017e88:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017e8a:	9300      	str	r3, [sp, #0]
 8017e8c:	4613      	mov	r3, r2
 8017e8e:	2200      	movs	r2, #0
 8017e90:	4621      	mov	r1, r4
 8017e92:	6878      	ldr	r0, [r7, #4]
 8017e94:	f7ff fe94 	bl	8017bc0 <tcp_output_alloc_header_common>
 8017e98:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017e9a:	693b      	ldr	r3, [r7, #16]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d00c      	beq.n	8017eba <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017ea0:	7dfb      	ldrb	r3, [r7, #23]
 8017ea2:	2200      	movs	r2, #0
 8017ea4:	6939      	ldr	r1, [r7, #16]
 8017ea6:	68f8      	ldr	r0, [r7, #12]
 8017ea8:	f7ff ff3a 	bl	8017d20 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017eae:	683a      	ldr	r2, [r7, #0]
 8017eb0:	6939      	ldr	r1, [r7, #16]
 8017eb2:	68f8      	ldr	r0, [r7, #12]
 8017eb4:	f7ff ff72 	bl	8017d9c <tcp_output_control_segment>
 8017eb8:	e000      	b.n	8017ebc <tcp_rst+0x8c>
    return;
 8017eba:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017ebc:	371c      	adds	r7, #28
 8017ebe:	46bd      	mov	sp, r7
 8017ec0:	bd90      	pop	{r4, r7, pc}
 8017ec2:	bf00      	nop
 8017ec4:	0801df70 	.word	0x0801df70
 8017ec8:	0801e6f4 	.word	0x0801e6f4
 8017ecc:	0801dfc4 	.word	0x0801dfc4
 8017ed0:	0801e710 	.word	0x0801e710

08017ed4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017ed4:	b590      	push	{r4, r7, lr}
 8017ed6:	b087      	sub	sp, #28
 8017ed8:	af00      	add	r7, sp, #0
 8017eda:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017edc:	2300      	movs	r3, #0
 8017ede:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017ee0:	2300      	movs	r3, #0
 8017ee2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d106      	bne.n	8017ef8 <tcp_send_empty_ack+0x24>
 8017eea:	4b28      	ldr	r3, [pc, #160]	@ (8017f8c <tcp_send_empty_ack+0xb8>)
 8017eec:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8017ef0:	4927      	ldr	r1, [pc, #156]	@ (8017f90 <tcp_send_empty_ack+0xbc>)
 8017ef2:	4828      	ldr	r0, [pc, #160]	@ (8017f94 <tcp_send_empty_ack+0xc0>)
 8017ef4:	f003 faae 	bl	801b454 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017ef8:	7dfb      	ldrb	r3, [r7, #23]
 8017efa:	009b      	lsls	r3, r3, #2
 8017efc:	b2db      	uxtb	r3, r3
 8017efe:	f003 0304 	and.w	r3, r3, #4
 8017f02:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017f04:	7d7b      	ldrb	r3, [r7, #21]
 8017f06:	b29c      	uxth	r4, r3
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	f7f9 f8bb 	bl	8011088 <lwip_htonl>
 8017f12:	4603      	mov	r3, r0
 8017f14:	2200      	movs	r2, #0
 8017f16:	4621      	mov	r1, r4
 8017f18:	6878      	ldr	r0, [r7, #4]
 8017f1a:	f7ff fec3 	bl	8017ca4 <tcp_output_alloc_header>
 8017f1e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017f20:	693b      	ldr	r3, [r7, #16]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d109      	bne.n	8017f3a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	8b5b      	ldrh	r3, [r3, #26]
 8017f2a:	f043 0303 	orr.w	r3, r3, #3
 8017f2e:	b29a      	uxth	r2, r3
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017f34:	f06f 0301 	mvn.w	r3, #1
 8017f38:	e023      	b.n	8017f82 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017f3a:	7dbb      	ldrb	r3, [r7, #22]
 8017f3c:	7dfa      	ldrb	r2, [r7, #23]
 8017f3e:	6939      	ldr	r1, [r7, #16]
 8017f40:	6878      	ldr	r0, [r7, #4]
 8017f42:	f7ff feed 	bl	8017d20 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017f46:	687a      	ldr	r2, [r7, #4]
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	3304      	adds	r3, #4
 8017f4c:	6939      	ldr	r1, [r7, #16]
 8017f4e:	6878      	ldr	r0, [r7, #4]
 8017f50:	f7ff ff24 	bl	8017d9c <tcp_output_control_segment>
 8017f54:	4603      	mov	r3, r0
 8017f56:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d007      	beq.n	8017f70 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	8b5b      	ldrh	r3, [r3, #26]
 8017f64:	f043 0303 	orr.w	r3, r3, #3
 8017f68:	b29a      	uxth	r2, r3
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	835a      	strh	r2, [r3, #26]
 8017f6e:	e006      	b.n	8017f7e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	8b5b      	ldrh	r3, [r3, #26]
 8017f74:	f023 0303 	bic.w	r3, r3, #3
 8017f78:	b29a      	uxth	r2, r3
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8017f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017f82:	4618      	mov	r0, r3
 8017f84:	371c      	adds	r7, #28
 8017f86:	46bd      	mov	sp, r7
 8017f88:	bd90      	pop	{r4, r7, pc}
 8017f8a:	bf00      	nop
 8017f8c:	0801df70 	.word	0x0801df70
 8017f90:	0801e72c 	.word	0x0801e72c
 8017f94:	0801dfc4 	.word	0x0801dfc4

08017f98 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017f98:	b590      	push	{r4, r7, lr}
 8017f9a:	b087      	sub	sp, #28
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017fa0:	2300      	movs	r3, #0
 8017fa2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d106      	bne.n	8017fb8 <tcp_keepalive+0x20>
 8017faa:	4b18      	ldr	r3, [pc, #96]	@ (801800c <tcp_keepalive+0x74>)
 8017fac:	f640 0224 	movw	r2, #2084	@ 0x824
 8017fb0:	4917      	ldr	r1, [pc, #92]	@ (8018010 <tcp_keepalive+0x78>)
 8017fb2:	4818      	ldr	r0, [pc, #96]	@ (8018014 <tcp_keepalive+0x7c>)
 8017fb4:	f003 fa4e 	bl	801b454 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017fb8:	7dfb      	ldrb	r3, [r7, #23]
 8017fba:	b29c      	uxth	r4, r3
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017fc0:	3b01      	subs	r3, #1
 8017fc2:	4618      	mov	r0, r3
 8017fc4:	f7f9 f860 	bl	8011088 <lwip_htonl>
 8017fc8:	4603      	mov	r3, r0
 8017fca:	2200      	movs	r2, #0
 8017fcc:	4621      	mov	r1, r4
 8017fce:	6878      	ldr	r0, [r7, #4]
 8017fd0:	f7ff fe68 	bl	8017ca4 <tcp_output_alloc_header>
 8017fd4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017fd6:	693b      	ldr	r3, [r7, #16]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d102      	bne.n	8017fe2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8017fe0:	e010      	b.n	8018004 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017fe2:	7dfb      	ldrb	r3, [r7, #23]
 8017fe4:	2200      	movs	r2, #0
 8017fe6:	6939      	ldr	r1, [r7, #16]
 8017fe8:	6878      	ldr	r0, [r7, #4]
 8017fea:	f7ff fe99 	bl	8017d20 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017fee:	687a      	ldr	r2, [r7, #4]
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	3304      	adds	r3, #4
 8017ff4:	6939      	ldr	r1, [r7, #16]
 8017ff6:	6878      	ldr	r0, [r7, #4]
 8017ff8:	f7ff fed0 	bl	8017d9c <tcp_output_control_segment>
 8017ffc:	4603      	mov	r3, r0
 8017ffe:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018000:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018004:	4618      	mov	r0, r3
 8018006:	371c      	adds	r7, #28
 8018008:	46bd      	mov	sp, r7
 801800a:	bd90      	pop	{r4, r7, pc}
 801800c:	0801df70 	.word	0x0801df70
 8018010:	0801e74c 	.word	0x0801e74c
 8018014:	0801dfc4 	.word	0x0801dfc4

08018018 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8018018:	b590      	push	{r4, r7, lr}
 801801a:	b08b      	sub	sp, #44	@ 0x2c
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018020:	2300      	movs	r3, #0
 8018022:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d106      	bne.n	801803a <tcp_zero_window_probe+0x22>
 801802c:	4b4c      	ldr	r3, [pc, #304]	@ (8018160 <tcp_zero_window_probe+0x148>)
 801802e:	f640 024f 	movw	r2, #2127	@ 0x84f
 8018032:	494c      	ldr	r1, [pc, #304]	@ (8018164 <tcp_zero_window_probe+0x14c>)
 8018034:	484c      	ldr	r0, [pc, #304]	@ (8018168 <tcp_zero_window_probe+0x150>)
 8018036:	f003 fa0d 	bl	801b454 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801803e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8018040:	6a3b      	ldr	r3, [r7, #32]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d101      	bne.n	801804a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8018046:	2300      	movs	r3, #0
 8018048:	e086      	b.n	8018158 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8018050:	2bff      	cmp	r3, #255	@ 0xff
 8018052:	d007      	beq.n	8018064 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801805a:	3301      	adds	r3, #1
 801805c:	b2da      	uxtb	r2, r3
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8018064:	6a3b      	ldr	r3, [r7, #32]
 8018066:	68db      	ldr	r3, [r3, #12]
 8018068:	899b      	ldrh	r3, [r3, #12]
 801806a:	b29b      	uxth	r3, r3
 801806c:	4618      	mov	r0, r3
 801806e:	f7f8 fff5 	bl	801105c <lwip_htons>
 8018072:	4603      	mov	r3, r0
 8018074:	b2db      	uxtb	r3, r3
 8018076:	f003 0301 	and.w	r3, r3, #1
 801807a:	2b00      	cmp	r3, #0
 801807c:	d005      	beq.n	801808a <tcp_zero_window_probe+0x72>
 801807e:	6a3b      	ldr	r3, [r7, #32]
 8018080:	891b      	ldrh	r3, [r3, #8]
 8018082:	2b00      	cmp	r3, #0
 8018084:	d101      	bne.n	801808a <tcp_zero_window_probe+0x72>
 8018086:	2301      	movs	r3, #1
 8018088:	e000      	b.n	801808c <tcp_zero_window_probe+0x74>
 801808a:	2300      	movs	r3, #0
 801808c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801808e:	7ffb      	ldrb	r3, [r7, #31]
 8018090:	2b00      	cmp	r3, #0
 8018092:	bf0c      	ite	eq
 8018094:	2301      	moveq	r3, #1
 8018096:	2300      	movne	r3, #0
 8018098:	b2db      	uxtb	r3, r3
 801809a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801809c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80180a0:	b299      	uxth	r1, r3
 80180a2:	6a3b      	ldr	r3, [r7, #32]
 80180a4:	68db      	ldr	r3, [r3, #12]
 80180a6:	685b      	ldr	r3, [r3, #4]
 80180a8:	8bba      	ldrh	r2, [r7, #28]
 80180aa:	6878      	ldr	r0, [r7, #4]
 80180ac:	f7ff fdfa 	bl	8017ca4 <tcp_output_alloc_header>
 80180b0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80180b2:	69bb      	ldr	r3, [r7, #24]
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d102      	bne.n	80180be <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80180b8:	f04f 33ff 	mov.w	r3, #4294967295
 80180bc:	e04c      	b.n	8018158 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80180be:	69bb      	ldr	r3, [r7, #24]
 80180c0:	685b      	ldr	r3, [r3, #4]
 80180c2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80180c4:	7ffb      	ldrb	r3, [r7, #31]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d011      	beq.n	80180ee <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80180ca:	697b      	ldr	r3, [r7, #20]
 80180cc:	899b      	ldrh	r3, [r3, #12]
 80180ce:	b29b      	uxth	r3, r3
 80180d0:	b21b      	sxth	r3, r3
 80180d2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80180d6:	b21c      	sxth	r4, r3
 80180d8:	2011      	movs	r0, #17
 80180da:	f7f8 ffbf 	bl	801105c <lwip_htons>
 80180de:	4603      	mov	r3, r0
 80180e0:	b21b      	sxth	r3, r3
 80180e2:	4323      	orrs	r3, r4
 80180e4:	b21b      	sxth	r3, r3
 80180e6:	b29a      	uxth	r2, r3
 80180e8:	697b      	ldr	r3, [r7, #20]
 80180ea:	819a      	strh	r2, [r3, #12]
 80180ec:	e010      	b.n	8018110 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80180ee:	69bb      	ldr	r3, [r7, #24]
 80180f0:	685b      	ldr	r3, [r3, #4]
 80180f2:	3314      	adds	r3, #20
 80180f4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80180f6:	6a3b      	ldr	r3, [r7, #32]
 80180f8:	6858      	ldr	r0, [r3, #4]
 80180fa:	6a3b      	ldr	r3, [r7, #32]
 80180fc:	685b      	ldr	r3, [r3, #4]
 80180fe:	891a      	ldrh	r2, [r3, #8]
 8018100:	6a3b      	ldr	r3, [r7, #32]
 8018102:	891b      	ldrh	r3, [r3, #8]
 8018104:	1ad3      	subs	r3, r2, r3
 8018106:	b29b      	uxth	r3, r3
 8018108:	2201      	movs	r2, #1
 801810a:	6939      	ldr	r1, [r7, #16]
 801810c:	f7fa fe56 	bl	8012dbc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8018110:	6a3b      	ldr	r3, [r7, #32]
 8018112:	68db      	ldr	r3, [r3, #12]
 8018114:	685b      	ldr	r3, [r3, #4]
 8018116:	4618      	mov	r0, r3
 8018118:	f7f8 ffb6 	bl	8011088 <lwip_htonl>
 801811c:	4603      	mov	r3, r0
 801811e:	3301      	adds	r3, #1
 8018120:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	1ad3      	subs	r3, r2, r3
 801812a:	2b00      	cmp	r3, #0
 801812c:	da02      	bge.n	8018134 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	68fa      	ldr	r2, [r7, #12]
 8018132:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018134:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018138:	2200      	movs	r2, #0
 801813a:	69b9      	ldr	r1, [r7, #24]
 801813c:	6878      	ldr	r0, [r7, #4]
 801813e:	f7ff fdef 	bl	8017d20 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018142:	687a      	ldr	r2, [r7, #4]
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	3304      	adds	r3, #4
 8018148:	69b9      	ldr	r1, [r7, #24]
 801814a:	6878      	ldr	r0, [r7, #4]
 801814c:	f7ff fe26 	bl	8017d9c <tcp_output_control_segment>
 8018150:	4603      	mov	r3, r0
 8018152:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018154:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8018158:	4618      	mov	r0, r3
 801815a:	372c      	adds	r7, #44	@ 0x2c
 801815c:	46bd      	mov	sp, r7
 801815e:	bd90      	pop	{r4, r7, pc}
 8018160:	0801df70 	.word	0x0801df70
 8018164:	0801e768 	.word	0x0801e768
 8018168:	0801dfc4 	.word	0x0801dfc4

0801816c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801816c:	b580      	push	{r7, lr}
 801816e:	b082      	sub	sp, #8
 8018170:	af00      	add	r7, sp, #0
 8018172:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8018174:	f7fa ff10 	bl	8012f98 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8018178:	4b0a      	ldr	r3, [pc, #40]	@ (80181a4 <tcpip_tcp_timer+0x38>)
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d103      	bne.n	8018188 <tcpip_tcp_timer+0x1c>
 8018180:	4b09      	ldr	r3, [pc, #36]	@ (80181a8 <tcpip_tcp_timer+0x3c>)
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	2b00      	cmp	r3, #0
 8018186:	d005      	beq.n	8018194 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018188:	2200      	movs	r2, #0
 801818a:	4908      	ldr	r1, [pc, #32]	@ (80181ac <tcpip_tcp_timer+0x40>)
 801818c:	20fa      	movs	r0, #250	@ 0xfa
 801818e:	f000 f8f3 	bl	8018378 <sys_timeout>
 8018192:	e003      	b.n	801819c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8018194:	4b06      	ldr	r3, [pc, #24]	@ (80181b0 <tcpip_tcp_timer+0x44>)
 8018196:	2200      	movs	r2, #0
 8018198:	601a      	str	r2, [r3, #0]
  }
}
 801819a:	bf00      	nop
 801819c:	bf00      	nop
 801819e:	3708      	adds	r7, #8
 80181a0:	46bd      	mov	sp, r7
 80181a2:	bd80      	pop	{r7, pc}
 80181a4:	24008198 	.word	0x24008198
 80181a8:	2400819c 	.word	0x2400819c
 80181ac:	0801816d 	.word	0x0801816d
 80181b0:	240081e4 	.word	0x240081e4

080181b4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80181b4:	b580      	push	{r7, lr}
 80181b6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80181b8:	4b0a      	ldr	r3, [pc, #40]	@ (80181e4 <tcp_timer_needed+0x30>)
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d10f      	bne.n	80181e0 <tcp_timer_needed+0x2c>
 80181c0:	4b09      	ldr	r3, [pc, #36]	@ (80181e8 <tcp_timer_needed+0x34>)
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d103      	bne.n	80181d0 <tcp_timer_needed+0x1c>
 80181c8:	4b08      	ldr	r3, [pc, #32]	@ (80181ec <tcp_timer_needed+0x38>)
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d007      	beq.n	80181e0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80181d0:	4b04      	ldr	r3, [pc, #16]	@ (80181e4 <tcp_timer_needed+0x30>)
 80181d2:	2201      	movs	r2, #1
 80181d4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80181d6:	2200      	movs	r2, #0
 80181d8:	4905      	ldr	r1, [pc, #20]	@ (80181f0 <tcp_timer_needed+0x3c>)
 80181da:	20fa      	movs	r0, #250	@ 0xfa
 80181dc:	f000 f8cc 	bl	8018378 <sys_timeout>
  }
}
 80181e0:	bf00      	nop
 80181e2:	bd80      	pop	{r7, pc}
 80181e4:	240081e4 	.word	0x240081e4
 80181e8:	24008198 	.word	0x24008198
 80181ec:	2400819c 	.word	0x2400819c
 80181f0:	0801816d 	.word	0x0801816d

080181f4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b086      	sub	sp, #24
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	60f8      	str	r0, [r7, #12]
 80181fc:	60b9      	str	r1, [r7, #8]
 80181fe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8018200:	200a      	movs	r0, #10
 8018202:	f7f9 fccb 	bl	8011b9c <memp_malloc>
 8018206:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8018208:	693b      	ldr	r3, [r7, #16]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d109      	bne.n	8018222 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801820e:	693b      	ldr	r3, [r7, #16]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d151      	bne.n	80182b8 <sys_timeout_abs+0xc4>
 8018214:	4b2a      	ldr	r3, [pc, #168]	@ (80182c0 <sys_timeout_abs+0xcc>)
 8018216:	22be      	movs	r2, #190	@ 0xbe
 8018218:	492a      	ldr	r1, [pc, #168]	@ (80182c4 <sys_timeout_abs+0xd0>)
 801821a:	482b      	ldr	r0, [pc, #172]	@ (80182c8 <sys_timeout_abs+0xd4>)
 801821c:	f003 f91a 	bl	801b454 <iprintf>
    return;
 8018220:	e04a      	b.n	80182b8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8018222:	693b      	ldr	r3, [r7, #16]
 8018224:	2200      	movs	r2, #0
 8018226:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8018228:	693b      	ldr	r3, [r7, #16]
 801822a:	68ba      	ldr	r2, [r7, #8]
 801822c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801822e:	693b      	ldr	r3, [r7, #16]
 8018230:	687a      	ldr	r2, [r7, #4]
 8018232:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8018234:	693b      	ldr	r3, [r7, #16]
 8018236:	68fa      	ldr	r2, [r7, #12]
 8018238:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801823a:	4b24      	ldr	r3, [pc, #144]	@ (80182cc <sys_timeout_abs+0xd8>)
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	2b00      	cmp	r3, #0
 8018240:	d103      	bne.n	801824a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8018242:	4a22      	ldr	r2, [pc, #136]	@ (80182cc <sys_timeout_abs+0xd8>)
 8018244:	693b      	ldr	r3, [r7, #16]
 8018246:	6013      	str	r3, [r2, #0]
    return;
 8018248:	e037      	b.n	80182ba <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801824a:	693b      	ldr	r3, [r7, #16]
 801824c:	685a      	ldr	r2, [r3, #4]
 801824e:	4b1f      	ldr	r3, [pc, #124]	@ (80182cc <sys_timeout_abs+0xd8>)
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	685b      	ldr	r3, [r3, #4]
 8018254:	1ad3      	subs	r3, r2, r3
 8018256:	0fdb      	lsrs	r3, r3, #31
 8018258:	f003 0301 	and.w	r3, r3, #1
 801825c:	b2db      	uxtb	r3, r3
 801825e:	2b00      	cmp	r3, #0
 8018260:	d007      	beq.n	8018272 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8018262:	4b1a      	ldr	r3, [pc, #104]	@ (80182cc <sys_timeout_abs+0xd8>)
 8018264:	681a      	ldr	r2, [r3, #0]
 8018266:	693b      	ldr	r3, [r7, #16]
 8018268:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801826a:	4a18      	ldr	r2, [pc, #96]	@ (80182cc <sys_timeout_abs+0xd8>)
 801826c:	693b      	ldr	r3, [r7, #16]
 801826e:	6013      	str	r3, [r2, #0]
 8018270:	e023      	b.n	80182ba <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8018272:	4b16      	ldr	r3, [pc, #88]	@ (80182cc <sys_timeout_abs+0xd8>)
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	617b      	str	r3, [r7, #20]
 8018278:	e01a      	b.n	80182b0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801827a:	697b      	ldr	r3, [r7, #20]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d00b      	beq.n	801829a <sys_timeout_abs+0xa6>
 8018282:	693b      	ldr	r3, [r7, #16]
 8018284:	685a      	ldr	r2, [r3, #4]
 8018286:	697b      	ldr	r3, [r7, #20]
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	685b      	ldr	r3, [r3, #4]
 801828c:	1ad3      	subs	r3, r2, r3
 801828e:	0fdb      	lsrs	r3, r3, #31
 8018290:	f003 0301 	and.w	r3, r3, #1
 8018294:	b2db      	uxtb	r3, r3
 8018296:	2b00      	cmp	r3, #0
 8018298:	d007      	beq.n	80182aa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801829a:	697b      	ldr	r3, [r7, #20]
 801829c:	681a      	ldr	r2, [r3, #0]
 801829e:	693b      	ldr	r3, [r7, #16]
 80182a0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80182a2:	697b      	ldr	r3, [r7, #20]
 80182a4:	693a      	ldr	r2, [r7, #16]
 80182a6:	601a      	str	r2, [r3, #0]
        break;
 80182a8:	e007      	b.n	80182ba <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80182aa:	697b      	ldr	r3, [r7, #20]
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	617b      	str	r3, [r7, #20]
 80182b0:	697b      	ldr	r3, [r7, #20]
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d1e1      	bne.n	801827a <sys_timeout_abs+0x86>
 80182b6:	e000      	b.n	80182ba <sys_timeout_abs+0xc6>
    return;
 80182b8:	bf00      	nop
      }
    }
  }
}
 80182ba:	3718      	adds	r7, #24
 80182bc:	46bd      	mov	sp, r7
 80182be:	bd80      	pop	{r7, pc}
 80182c0:	0801e78c 	.word	0x0801e78c
 80182c4:	0801e7c0 	.word	0x0801e7c0
 80182c8:	0801e800 	.word	0x0801e800
 80182cc:	240081dc 	.word	0x240081dc

080182d0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80182d0:	b580      	push	{r7, lr}
 80182d2:	b086      	sub	sp, #24
 80182d4:	af00      	add	r7, sp, #0
 80182d6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80182dc:	697b      	ldr	r3, [r7, #20]
 80182de:	685b      	ldr	r3, [r3, #4]
 80182e0:	4798      	blx	r3

  now = sys_now();
 80182e2:	f7f3 ff29 	bl	800c138 <sys_now>
 80182e6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80182e8:	697b      	ldr	r3, [r7, #20]
 80182ea:	681a      	ldr	r2, [r3, #0]
 80182ec:	4b0f      	ldr	r3, [pc, #60]	@ (801832c <lwip_cyclic_timer+0x5c>)
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	4413      	add	r3, r2
 80182f2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80182f4:	68fa      	ldr	r2, [r7, #12]
 80182f6:	693b      	ldr	r3, [r7, #16]
 80182f8:	1ad3      	subs	r3, r2, r3
 80182fa:	0fdb      	lsrs	r3, r3, #31
 80182fc:	f003 0301 	and.w	r3, r3, #1
 8018300:	b2db      	uxtb	r3, r3
 8018302:	2b00      	cmp	r3, #0
 8018304:	d009      	beq.n	801831a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8018306:	697b      	ldr	r3, [r7, #20]
 8018308:	681a      	ldr	r2, [r3, #0]
 801830a:	693b      	ldr	r3, [r7, #16]
 801830c:	4413      	add	r3, r2
 801830e:	687a      	ldr	r2, [r7, #4]
 8018310:	4907      	ldr	r1, [pc, #28]	@ (8018330 <lwip_cyclic_timer+0x60>)
 8018312:	4618      	mov	r0, r3
 8018314:	f7ff ff6e 	bl	80181f4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8018318:	e004      	b.n	8018324 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801831a:	687a      	ldr	r2, [r7, #4]
 801831c:	4904      	ldr	r1, [pc, #16]	@ (8018330 <lwip_cyclic_timer+0x60>)
 801831e:	68f8      	ldr	r0, [r7, #12]
 8018320:	f7ff ff68 	bl	80181f4 <sys_timeout_abs>
}
 8018324:	bf00      	nop
 8018326:	3718      	adds	r7, #24
 8018328:	46bd      	mov	sp, r7
 801832a:	bd80      	pop	{r7, pc}
 801832c:	240081e0 	.word	0x240081e0
 8018330:	080182d1 	.word	0x080182d1

08018334 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8018334:	b580      	push	{r7, lr}
 8018336:	b082      	sub	sp, #8
 8018338:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801833a:	2301      	movs	r3, #1
 801833c:	607b      	str	r3, [r7, #4]
 801833e:	e00e      	b.n	801835e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8018340:	4a0b      	ldr	r2, [pc, #44]	@ (8018370 <sys_timeouts_init+0x3c>)
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	00db      	lsls	r3, r3, #3
 801834c:	4a08      	ldr	r2, [pc, #32]	@ (8018370 <sys_timeouts_init+0x3c>)
 801834e:	4413      	add	r3, r2
 8018350:	461a      	mov	r2, r3
 8018352:	4908      	ldr	r1, [pc, #32]	@ (8018374 <sys_timeouts_init+0x40>)
 8018354:	f000 f810 	bl	8018378 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	3301      	adds	r3, #1
 801835c:	607b      	str	r3, [r7, #4]
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	2b02      	cmp	r3, #2
 8018362:	d9ed      	bls.n	8018340 <sys_timeouts_init+0xc>
  }
}
 8018364:	bf00      	nop
 8018366:	bf00      	nop
 8018368:	3708      	adds	r7, #8
 801836a:	46bd      	mov	sp, r7
 801836c:	bd80      	pop	{r7, pc}
 801836e:	bf00      	nop
 8018370:	0801f3fc 	.word	0x0801f3fc
 8018374:	080182d1 	.word	0x080182d1

08018378 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8018378:	b580      	push	{r7, lr}
 801837a:	b086      	sub	sp, #24
 801837c:	af00      	add	r7, sp, #0
 801837e:	60f8      	str	r0, [r7, #12]
 8018380:	60b9      	str	r1, [r7, #8]
 8018382:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801838a:	d306      	bcc.n	801839a <sys_timeout+0x22>
 801838c:	4b0a      	ldr	r3, [pc, #40]	@ (80183b8 <sys_timeout+0x40>)
 801838e:	f240 1229 	movw	r2, #297	@ 0x129
 8018392:	490a      	ldr	r1, [pc, #40]	@ (80183bc <sys_timeout+0x44>)
 8018394:	480a      	ldr	r0, [pc, #40]	@ (80183c0 <sys_timeout+0x48>)
 8018396:	f003 f85d 	bl	801b454 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801839a:	f7f3 fecd 	bl	800c138 <sys_now>
 801839e:	4602      	mov	r2, r0
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	4413      	add	r3, r2
 80183a4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80183a6:	687a      	ldr	r2, [r7, #4]
 80183a8:	68b9      	ldr	r1, [r7, #8]
 80183aa:	6978      	ldr	r0, [r7, #20]
 80183ac:	f7ff ff22 	bl	80181f4 <sys_timeout_abs>
#endif
}
 80183b0:	bf00      	nop
 80183b2:	3718      	adds	r7, #24
 80183b4:	46bd      	mov	sp, r7
 80183b6:	bd80      	pop	{r7, pc}
 80183b8:	0801e78c 	.word	0x0801e78c
 80183bc:	0801e828 	.word	0x0801e828
 80183c0:	0801e800 	.word	0x0801e800

080183c4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	b084      	sub	sp, #16
 80183c8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80183ca:	f7f3 feb5 	bl	800c138 <sys_now>
 80183ce:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80183d0:	4b17      	ldr	r3, [pc, #92]	@ (8018430 <sys_check_timeouts+0x6c>)
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80183d6:	68bb      	ldr	r3, [r7, #8]
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d022      	beq.n	8018422 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80183dc:	68bb      	ldr	r3, [r7, #8]
 80183de:	685b      	ldr	r3, [r3, #4]
 80183e0:	68fa      	ldr	r2, [r7, #12]
 80183e2:	1ad3      	subs	r3, r2, r3
 80183e4:	0fdb      	lsrs	r3, r3, #31
 80183e6:	f003 0301 	and.w	r3, r3, #1
 80183ea:	b2db      	uxtb	r3, r3
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d11a      	bne.n	8018426 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80183f0:	68bb      	ldr	r3, [r7, #8]
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	4a0e      	ldr	r2, [pc, #56]	@ (8018430 <sys_check_timeouts+0x6c>)
 80183f6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80183f8:	68bb      	ldr	r3, [r7, #8]
 80183fa:	689b      	ldr	r3, [r3, #8]
 80183fc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80183fe:	68bb      	ldr	r3, [r7, #8]
 8018400:	68db      	ldr	r3, [r3, #12]
 8018402:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8018404:	68bb      	ldr	r3, [r7, #8]
 8018406:	685b      	ldr	r3, [r3, #4]
 8018408:	4a0a      	ldr	r2, [pc, #40]	@ (8018434 <sys_check_timeouts+0x70>)
 801840a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801840c:	68b9      	ldr	r1, [r7, #8]
 801840e:	200a      	movs	r0, #10
 8018410:	f7f9 fc3a 	bl	8011c88 <memp_free>
    if (handler != NULL) {
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	2b00      	cmp	r3, #0
 8018418:	d0da      	beq.n	80183d0 <sys_check_timeouts+0xc>
      handler(arg);
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	6838      	ldr	r0, [r7, #0]
 801841e:	4798      	blx	r3
  do {
 8018420:	e7d6      	b.n	80183d0 <sys_check_timeouts+0xc>
      return;
 8018422:	bf00      	nop
 8018424:	e000      	b.n	8018428 <sys_check_timeouts+0x64>
      return;
 8018426:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8018428:	3710      	adds	r7, #16
 801842a:	46bd      	mov	sp, r7
 801842c:	bd80      	pop	{r7, pc}
 801842e:	bf00      	nop
 8018430:	240081dc 	.word	0x240081dc
 8018434:	240081e0 	.word	0x240081e0

08018438 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b082      	sub	sp, #8
 801843c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801843e:	4b16      	ldr	r3, [pc, #88]	@ (8018498 <sys_timeouts_sleeptime+0x60>)
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d102      	bne.n	801844c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8018446:	f04f 33ff 	mov.w	r3, #4294967295
 801844a:	e020      	b.n	801848e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801844c:	f7f3 fe74 	bl	800c138 <sys_now>
 8018450:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8018452:	4b11      	ldr	r3, [pc, #68]	@ (8018498 <sys_timeouts_sleeptime+0x60>)
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	685a      	ldr	r2, [r3, #4]
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	1ad3      	subs	r3, r2, r3
 801845c:	0fdb      	lsrs	r3, r3, #31
 801845e:	f003 0301 	and.w	r3, r3, #1
 8018462:	b2db      	uxtb	r3, r3
 8018464:	2b00      	cmp	r3, #0
 8018466:	d001      	beq.n	801846c <sys_timeouts_sleeptime+0x34>
    return 0;
 8018468:	2300      	movs	r3, #0
 801846a:	e010      	b.n	801848e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801846c:	4b0a      	ldr	r3, [pc, #40]	@ (8018498 <sys_timeouts_sleeptime+0x60>)
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	685a      	ldr	r2, [r3, #4]
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	1ad3      	subs	r3, r2, r3
 8018476:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8018478:	683b      	ldr	r3, [r7, #0]
 801847a:	2b00      	cmp	r3, #0
 801847c:	da06      	bge.n	801848c <sys_timeouts_sleeptime+0x54>
 801847e:	4b07      	ldr	r3, [pc, #28]	@ (801849c <sys_timeouts_sleeptime+0x64>)
 8018480:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8018484:	4906      	ldr	r1, [pc, #24]	@ (80184a0 <sys_timeouts_sleeptime+0x68>)
 8018486:	4807      	ldr	r0, [pc, #28]	@ (80184a4 <sys_timeouts_sleeptime+0x6c>)
 8018488:	f002 ffe4 	bl	801b454 <iprintf>
    return ret;
 801848c:	683b      	ldr	r3, [r7, #0]
  }
}
 801848e:	4618      	mov	r0, r3
 8018490:	3708      	adds	r7, #8
 8018492:	46bd      	mov	sp, r7
 8018494:	bd80      	pop	{r7, pc}
 8018496:	bf00      	nop
 8018498:	240081dc 	.word	0x240081dc
 801849c:	0801e78c 	.word	0x0801e78c
 80184a0:	0801e860 	.word	0x0801e860
 80184a4:	0801e800 	.word	0x0801e800

080184a8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80184a8:	b580      	push	{r7, lr}
 80184aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80184ac:	f002 fec0 	bl	801b230 <rand>
 80184b0:	4603      	mov	r3, r0
 80184b2:	b29b      	uxth	r3, r3
 80184b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80184b8:	b29b      	uxth	r3, r3
 80184ba:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80184be:	b29a      	uxth	r2, r3
 80184c0:	4b01      	ldr	r3, [pc, #4]	@ (80184c8 <udp_init+0x20>)
 80184c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80184c4:	bf00      	nop
 80184c6:	bd80      	pop	{r7, pc}
 80184c8:	24000030 	.word	0x24000030

080184cc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80184cc:	b580      	push	{r7, lr}
 80184ce:	b084      	sub	sp, #16
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	60f8      	str	r0, [r7, #12]
 80184d4:	60b9      	str	r1, [r7, #8]
 80184d6:	4613      	mov	r3, r2
 80184d8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80184da:	68fb      	ldr	r3, [r7, #12]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d105      	bne.n	80184ec <udp_input_local_match+0x20>
 80184e0:	4b27      	ldr	r3, [pc, #156]	@ (8018580 <udp_input_local_match+0xb4>)
 80184e2:	2287      	movs	r2, #135	@ 0x87
 80184e4:	4927      	ldr	r1, [pc, #156]	@ (8018584 <udp_input_local_match+0xb8>)
 80184e6:	4828      	ldr	r0, [pc, #160]	@ (8018588 <udp_input_local_match+0xbc>)
 80184e8:	f002 ffb4 	bl	801b454 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80184ec:	68bb      	ldr	r3, [r7, #8]
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d105      	bne.n	80184fe <udp_input_local_match+0x32>
 80184f2:	4b23      	ldr	r3, [pc, #140]	@ (8018580 <udp_input_local_match+0xb4>)
 80184f4:	2288      	movs	r2, #136	@ 0x88
 80184f6:	4925      	ldr	r1, [pc, #148]	@ (801858c <udp_input_local_match+0xc0>)
 80184f8:	4823      	ldr	r0, [pc, #140]	@ (8018588 <udp_input_local_match+0xbc>)
 80184fa:	f002 ffab 	bl	801b454 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	7a1b      	ldrb	r3, [r3, #8]
 8018502:	2b00      	cmp	r3, #0
 8018504:	d00b      	beq.n	801851e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	7a1a      	ldrb	r2, [r3, #8]
 801850a:	4b21      	ldr	r3, [pc, #132]	@ (8018590 <udp_input_local_match+0xc4>)
 801850c:	685b      	ldr	r3, [r3, #4]
 801850e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018512:	3301      	adds	r3, #1
 8018514:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018516:	429a      	cmp	r2, r3
 8018518:	d001      	beq.n	801851e <udp_input_local_match+0x52>
    return 0;
 801851a:	2300      	movs	r3, #0
 801851c:	e02b      	b.n	8018576 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801851e:	79fb      	ldrb	r3, [r7, #7]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d018      	beq.n	8018556 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d013      	beq.n	8018552 <udp_input_local_match+0x86>
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	2b00      	cmp	r3, #0
 8018530:	d00f      	beq.n	8018552 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018532:	4b17      	ldr	r3, [pc, #92]	@ (8018590 <udp_input_local_match+0xc4>)
 8018534:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801853a:	d00a      	beq.n	8018552 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	681a      	ldr	r2, [r3, #0]
 8018540:	4b13      	ldr	r3, [pc, #76]	@ (8018590 <udp_input_local_match+0xc4>)
 8018542:	695b      	ldr	r3, [r3, #20]
 8018544:	405a      	eors	r2, r3
 8018546:	68bb      	ldr	r3, [r7, #8]
 8018548:	3308      	adds	r3, #8
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801854e:	2b00      	cmp	r3, #0
 8018550:	d110      	bne.n	8018574 <udp_input_local_match+0xa8>
          return 1;
 8018552:	2301      	movs	r3, #1
 8018554:	e00f      	b.n	8018576 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	2b00      	cmp	r3, #0
 801855a:	d009      	beq.n	8018570 <udp_input_local_match+0xa4>
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d005      	beq.n	8018570 <udp_input_local_match+0xa4>
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	681a      	ldr	r2, [r3, #0]
 8018568:	4b09      	ldr	r3, [pc, #36]	@ (8018590 <udp_input_local_match+0xc4>)
 801856a:	695b      	ldr	r3, [r3, #20]
 801856c:	429a      	cmp	r2, r3
 801856e:	d101      	bne.n	8018574 <udp_input_local_match+0xa8>
        return 1;
 8018570:	2301      	movs	r3, #1
 8018572:	e000      	b.n	8018576 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8018574:	2300      	movs	r3, #0
}
 8018576:	4618      	mov	r0, r3
 8018578:	3710      	adds	r7, #16
 801857a:	46bd      	mov	sp, r7
 801857c:	bd80      	pop	{r7, pc}
 801857e:	bf00      	nop
 8018580:	0801e874 	.word	0x0801e874
 8018584:	0801e8a4 	.word	0x0801e8a4
 8018588:	0801e8c8 	.word	0x0801e8c8
 801858c:	0801e8f0 	.word	0x0801e8f0
 8018590:	2400508c 	.word	0x2400508c

08018594 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8018594:	b590      	push	{r4, r7, lr}
 8018596:	b08d      	sub	sp, #52	@ 0x34
 8018598:	af02      	add	r7, sp, #8
 801859a:	6078      	str	r0, [r7, #4]
 801859c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801859e:	2300      	movs	r3, #0
 80185a0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d105      	bne.n	80185b4 <udp_input+0x20>
 80185a8:	4b7c      	ldr	r3, [pc, #496]	@ (801879c <udp_input+0x208>)
 80185aa:	22cf      	movs	r2, #207	@ 0xcf
 80185ac:	497c      	ldr	r1, [pc, #496]	@ (80187a0 <udp_input+0x20c>)
 80185ae:	487d      	ldr	r0, [pc, #500]	@ (80187a4 <udp_input+0x210>)
 80185b0:	f002 ff50 	bl	801b454 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80185b4:	683b      	ldr	r3, [r7, #0]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d105      	bne.n	80185c6 <udp_input+0x32>
 80185ba:	4b78      	ldr	r3, [pc, #480]	@ (801879c <udp_input+0x208>)
 80185bc:	22d0      	movs	r2, #208	@ 0xd0
 80185be:	497a      	ldr	r1, [pc, #488]	@ (80187a8 <udp_input+0x214>)
 80185c0:	4878      	ldr	r0, [pc, #480]	@ (80187a4 <udp_input+0x210>)
 80185c2:	f002 ff47 	bl	801b454 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	895b      	ldrh	r3, [r3, #10]
 80185ca:	2b07      	cmp	r3, #7
 80185cc:	d803      	bhi.n	80185d6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80185ce:	6878      	ldr	r0, [r7, #4]
 80185d0:	f7fa f9fe 	bl	80129d0 <pbuf_free>
    goto end;
 80185d4:	e0de      	b.n	8018794 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	685b      	ldr	r3, [r3, #4]
 80185da:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80185dc:	4b73      	ldr	r3, [pc, #460]	@ (80187ac <udp_input+0x218>)
 80185de:	695b      	ldr	r3, [r3, #20]
 80185e0:	4a72      	ldr	r2, [pc, #456]	@ (80187ac <udp_input+0x218>)
 80185e2:	6812      	ldr	r2, [r2, #0]
 80185e4:	4611      	mov	r1, r2
 80185e6:	4618      	mov	r0, r3
 80185e8:	f001 fcae 	bl	8019f48 <ip4_addr_isbroadcast_u32>
 80185ec:	4603      	mov	r3, r0
 80185ee:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80185f0:	697b      	ldr	r3, [r7, #20]
 80185f2:	881b      	ldrh	r3, [r3, #0]
 80185f4:	b29b      	uxth	r3, r3
 80185f6:	4618      	mov	r0, r3
 80185f8:	f7f8 fd30 	bl	801105c <lwip_htons>
 80185fc:	4603      	mov	r3, r0
 80185fe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8018600:	697b      	ldr	r3, [r7, #20]
 8018602:	885b      	ldrh	r3, [r3, #2]
 8018604:	b29b      	uxth	r3, r3
 8018606:	4618      	mov	r0, r3
 8018608:	f7f8 fd28 	bl	801105c <lwip_htons>
 801860c:	4603      	mov	r3, r0
 801860e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8018610:	2300      	movs	r3, #0
 8018612:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8018614:	2300      	movs	r3, #0
 8018616:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8018618:	2300      	movs	r3, #0
 801861a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801861c:	4b64      	ldr	r3, [pc, #400]	@ (80187b0 <udp_input+0x21c>)
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	627b      	str	r3, [r7, #36]	@ 0x24
 8018622:	e054      	b.n	80186ce <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8018624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018626:	8a5b      	ldrh	r3, [r3, #18]
 8018628:	89fa      	ldrh	r2, [r7, #14]
 801862a:	429a      	cmp	r2, r3
 801862c:	d14a      	bne.n	80186c4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801862e:	7cfb      	ldrb	r3, [r7, #19]
 8018630:	461a      	mov	r2, r3
 8018632:	6839      	ldr	r1, [r7, #0]
 8018634:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018636:	f7ff ff49 	bl	80184cc <udp_input_local_match>
 801863a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801863c:	2b00      	cmp	r3, #0
 801863e:	d041      	beq.n	80186c4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8018640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018642:	7c1b      	ldrb	r3, [r3, #16]
 8018644:	f003 0304 	and.w	r3, r3, #4
 8018648:	2b00      	cmp	r3, #0
 801864a:	d11d      	bne.n	8018688 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801864c:	69fb      	ldr	r3, [r7, #28]
 801864e:	2b00      	cmp	r3, #0
 8018650:	d102      	bne.n	8018658 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8018652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018654:	61fb      	str	r3, [r7, #28]
 8018656:	e017      	b.n	8018688 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8018658:	7cfb      	ldrb	r3, [r7, #19]
 801865a:	2b00      	cmp	r3, #0
 801865c:	d014      	beq.n	8018688 <udp_input+0xf4>
 801865e:	4b53      	ldr	r3, [pc, #332]	@ (80187ac <udp_input+0x218>)
 8018660:	695b      	ldr	r3, [r3, #20]
 8018662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018666:	d10f      	bne.n	8018688 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018668:	69fb      	ldr	r3, [r7, #28]
 801866a:	681a      	ldr	r2, [r3, #0]
 801866c:	683b      	ldr	r3, [r7, #0]
 801866e:	3304      	adds	r3, #4
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	429a      	cmp	r2, r3
 8018674:	d008      	beq.n	8018688 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8018676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018678:	681a      	ldr	r2, [r3, #0]
 801867a:	683b      	ldr	r3, [r7, #0]
 801867c:	3304      	adds	r3, #4
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	429a      	cmp	r2, r3
 8018682:	d101      	bne.n	8018688 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8018684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018686:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8018688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801868a:	8a9b      	ldrh	r3, [r3, #20]
 801868c:	8a3a      	ldrh	r2, [r7, #16]
 801868e:	429a      	cmp	r2, r3
 8018690:	d118      	bne.n	80186c4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018694:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8018696:	2b00      	cmp	r3, #0
 8018698:	d005      	beq.n	80186a6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801869a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801869c:	685a      	ldr	r2, [r3, #4]
 801869e:	4b43      	ldr	r3, [pc, #268]	@ (80187ac <udp_input+0x218>)
 80186a0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80186a2:	429a      	cmp	r2, r3
 80186a4:	d10e      	bne.n	80186c4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80186a6:	6a3b      	ldr	r3, [r7, #32]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d014      	beq.n	80186d6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80186ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186ae:	68da      	ldr	r2, [r3, #12]
 80186b0:	6a3b      	ldr	r3, [r7, #32]
 80186b2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80186b4:	4b3e      	ldr	r3, [pc, #248]	@ (80187b0 <udp_input+0x21c>)
 80186b6:	681a      	ldr	r2, [r3, #0]
 80186b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186ba:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80186bc:	4a3c      	ldr	r2, [pc, #240]	@ (80187b0 <udp_input+0x21c>)
 80186be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186c0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80186c2:	e008      	b.n	80186d6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80186c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186c6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80186c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186ca:	68db      	ldr	r3, [r3, #12]
 80186cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80186ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d1a7      	bne.n	8018624 <udp_input+0x90>
 80186d4:	e000      	b.n	80186d8 <udp_input+0x144>
        break;
 80186d6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80186d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d101      	bne.n	80186e2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80186de:	69fb      	ldr	r3, [r7, #28]
 80186e0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80186e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d002      	beq.n	80186ee <udp_input+0x15a>
    for_us = 1;
 80186e8:	2301      	movs	r3, #1
 80186ea:	76fb      	strb	r3, [r7, #27]
 80186ec:	e00a      	b.n	8018704 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80186ee:	683b      	ldr	r3, [r7, #0]
 80186f0:	3304      	adds	r3, #4
 80186f2:	681a      	ldr	r2, [r3, #0]
 80186f4:	4b2d      	ldr	r3, [pc, #180]	@ (80187ac <udp_input+0x218>)
 80186f6:	695b      	ldr	r3, [r3, #20]
 80186f8:	429a      	cmp	r2, r3
 80186fa:	bf0c      	ite	eq
 80186fc:	2301      	moveq	r3, #1
 80186fe:	2300      	movne	r3, #0
 8018700:	b2db      	uxtb	r3, r3
 8018702:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018704:	7efb      	ldrb	r3, [r7, #27]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d041      	beq.n	801878e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801870a:	2108      	movs	r1, #8
 801870c:	6878      	ldr	r0, [r7, #4]
 801870e:	f7fa f8d9 	bl	80128c4 <pbuf_remove_header>
 8018712:	4603      	mov	r3, r0
 8018714:	2b00      	cmp	r3, #0
 8018716:	d00a      	beq.n	801872e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018718:	4b20      	ldr	r3, [pc, #128]	@ (801879c <udp_input+0x208>)
 801871a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801871e:	4925      	ldr	r1, [pc, #148]	@ (80187b4 <udp_input+0x220>)
 8018720:	4820      	ldr	r0, [pc, #128]	@ (80187a4 <udp_input+0x210>)
 8018722:	f002 fe97 	bl	801b454 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018726:	6878      	ldr	r0, [r7, #4]
 8018728:	f7fa f952 	bl	80129d0 <pbuf_free>
      goto end;
 801872c:	e032      	b.n	8018794 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801872e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018730:	2b00      	cmp	r3, #0
 8018732:	d012      	beq.n	801875a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018736:	699b      	ldr	r3, [r3, #24]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d00a      	beq.n	8018752 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801873c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801873e:	699c      	ldr	r4, [r3, #24]
 8018740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018742:	69d8      	ldr	r0, [r3, #28]
 8018744:	8a3b      	ldrh	r3, [r7, #16]
 8018746:	9300      	str	r3, [sp, #0]
 8018748:	4b1b      	ldr	r3, [pc, #108]	@ (80187b8 <udp_input+0x224>)
 801874a:	687a      	ldr	r2, [r7, #4]
 801874c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801874e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018750:	e021      	b.n	8018796 <udp_input+0x202>
        pbuf_free(p);
 8018752:	6878      	ldr	r0, [r7, #4]
 8018754:	f7fa f93c 	bl	80129d0 <pbuf_free>
        goto end;
 8018758:	e01c      	b.n	8018794 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801875a:	7cfb      	ldrb	r3, [r7, #19]
 801875c:	2b00      	cmp	r3, #0
 801875e:	d112      	bne.n	8018786 <udp_input+0x1f2>
 8018760:	4b12      	ldr	r3, [pc, #72]	@ (80187ac <udp_input+0x218>)
 8018762:	695b      	ldr	r3, [r3, #20]
 8018764:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018768:	2be0      	cmp	r3, #224	@ 0xe0
 801876a:	d00c      	beq.n	8018786 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801876c:	4b0f      	ldr	r3, [pc, #60]	@ (80187ac <udp_input+0x218>)
 801876e:	899b      	ldrh	r3, [r3, #12]
 8018770:	3308      	adds	r3, #8
 8018772:	b29b      	uxth	r3, r3
 8018774:	b21b      	sxth	r3, r3
 8018776:	4619      	mov	r1, r3
 8018778:	6878      	ldr	r0, [r7, #4]
 801877a:	f7fa f916 	bl	80129aa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801877e:	2103      	movs	r1, #3
 8018780:	6878      	ldr	r0, [r7, #4]
 8018782:	f001 f8b7 	bl	80198f4 <icmp_dest_unreach>
      pbuf_free(p);
 8018786:	6878      	ldr	r0, [r7, #4]
 8018788:	f7fa f922 	bl	80129d0 <pbuf_free>
  return;
 801878c:	e003      	b.n	8018796 <udp_input+0x202>
    pbuf_free(p);
 801878e:	6878      	ldr	r0, [r7, #4]
 8018790:	f7fa f91e 	bl	80129d0 <pbuf_free>
  return;
 8018794:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018796:	372c      	adds	r7, #44	@ 0x2c
 8018798:	46bd      	mov	sp, r7
 801879a:	bd90      	pop	{r4, r7, pc}
 801879c:	0801e874 	.word	0x0801e874
 80187a0:	0801e918 	.word	0x0801e918
 80187a4:	0801e8c8 	.word	0x0801e8c8
 80187a8:	0801e930 	.word	0x0801e930
 80187ac:	2400508c 	.word	0x2400508c
 80187b0:	240081e8 	.word	0x240081e8
 80187b4:	0801e94c 	.word	0x0801e94c
 80187b8:	2400509c 	.word	0x2400509c

080187bc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80187bc:	b480      	push	{r7}
 80187be:	b085      	sub	sp, #20
 80187c0:	af00      	add	r7, sp, #0
 80187c2:	6078      	str	r0, [r7, #4]
 80187c4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d01e      	beq.n	801880a <udp_netif_ip_addr_changed+0x4e>
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d01a      	beq.n	801880a <udp_netif_ip_addr_changed+0x4e>
 80187d4:	683b      	ldr	r3, [r7, #0]
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d017      	beq.n	801880a <udp_netif_ip_addr_changed+0x4e>
 80187da:	683b      	ldr	r3, [r7, #0]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d013      	beq.n	801880a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80187e2:	4b0d      	ldr	r3, [pc, #52]	@ (8018818 <udp_netif_ip_addr_changed+0x5c>)
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	60fb      	str	r3, [r7, #12]
 80187e8:	e00c      	b.n	8018804 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	681a      	ldr	r2, [r3, #0]
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	429a      	cmp	r2, r3
 80187f4:	d103      	bne.n	80187fe <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80187f6:	683b      	ldr	r3, [r7, #0]
 80187f8:	681a      	ldr	r2, [r3, #0]
 80187fa:	68fb      	ldr	r3, [r7, #12]
 80187fc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	68db      	ldr	r3, [r3, #12]
 8018802:	60fb      	str	r3, [r7, #12]
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	2b00      	cmp	r3, #0
 8018808:	d1ef      	bne.n	80187ea <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801880a:	bf00      	nop
 801880c:	3714      	adds	r7, #20
 801880e:	46bd      	mov	sp, r7
 8018810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018814:	4770      	bx	lr
 8018816:	bf00      	nop
 8018818:	240081e8 	.word	0x240081e8

0801881c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801881c:	b580      	push	{r7, lr}
 801881e:	b082      	sub	sp, #8
 8018820:	af00      	add	r7, sp, #0
 8018822:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018824:	4915      	ldr	r1, [pc, #84]	@ (801887c <etharp_free_entry+0x60>)
 8018826:	687a      	ldr	r2, [r7, #4]
 8018828:	4613      	mov	r3, r2
 801882a:	005b      	lsls	r3, r3, #1
 801882c:	4413      	add	r3, r2
 801882e:	00db      	lsls	r3, r3, #3
 8018830:	440b      	add	r3, r1
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d013      	beq.n	8018860 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018838:	4910      	ldr	r1, [pc, #64]	@ (801887c <etharp_free_entry+0x60>)
 801883a:	687a      	ldr	r2, [r7, #4]
 801883c:	4613      	mov	r3, r2
 801883e:	005b      	lsls	r3, r3, #1
 8018840:	4413      	add	r3, r2
 8018842:	00db      	lsls	r3, r3, #3
 8018844:	440b      	add	r3, r1
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	4618      	mov	r0, r3
 801884a:	f7fa f8c1 	bl	80129d0 <pbuf_free>
    arp_table[i].q = NULL;
 801884e:	490b      	ldr	r1, [pc, #44]	@ (801887c <etharp_free_entry+0x60>)
 8018850:	687a      	ldr	r2, [r7, #4]
 8018852:	4613      	mov	r3, r2
 8018854:	005b      	lsls	r3, r3, #1
 8018856:	4413      	add	r3, r2
 8018858:	00db      	lsls	r3, r3, #3
 801885a:	440b      	add	r3, r1
 801885c:	2200      	movs	r2, #0
 801885e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018860:	4906      	ldr	r1, [pc, #24]	@ (801887c <etharp_free_entry+0x60>)
 8018862:	687a      	ldr	r2, [r7, #4]
 8018864:	4613      	mov	r3, r2
 8018866:	005b      	lsls	r3, r3, #1
 8018868:	4413      	add	r3, r2
 801886a:	00db      	lsls	r3, r3, #3
 801886c:	440b      	add	r3, r1
 801886e:	3314      	adds	r3, #20
 8018870:	2200      	movs	r2, #0
 8018872:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018874:	bf00      	nop
 8018876:	3708      	adds	r7, #8
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}
 801887c:	240081ec 	.word	0x240081ec

08018880 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018880:	b580      	push	{r7, lr}
 8018882:	b082      	sub	sp, #8
 8018884:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018886:	2300      	movs	r3, #0
 8018888:	607b      	str	r3, [r7, #4]
 801888a:	e096      	b.n	80189ba <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801888c:	494f      	ldr	r1, [pc, #316]	@ (80189cc <etharp_tmr+0x14c>)
 801888e:	687a      	ldr	r2, [r7, #4]
 8018890:	4613      	mov	r3, r2
 8018892:	005b      	lsls	r3, r3, #1
 8018894:	4413      	add	r3, r2
 8018896:	00db      	lsls	r3, r3, #3
 8018898:	440b      	add	r3, r1
 801889a:	3314      	adds	r3, #20
 801889c:	781b      	ldrb	r3, [r3, #0]
 801889e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80188a0:	78fb      	ldrb	r3, [r7, #3]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	f000 8086 	beq.w	80189b4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80188a8:	4948      	ldr	r1, [pc, #288]	@ (80189cc <etharp_tmr+0x14c>)
 80188aa:	687a      	ldr	r2, [r7, #4]
 80188ac:	4613      	mov	r3, r2
 80188ae:	005b      	lsls	r3, r3, #1
 80188b0:	4413      	add	r3, r2
 80188b2:	00db      	lsls	r3, r3, #3
 80188b4:	440b      	add	r3, r1
 80188b6:	3312      	adds	r3, #18
 80188b8:	881b      	ldrh	r3, [r3, #0]
 80188ba:	3301      	adds	r3, #1
 80188bc:	b298      	uxth	r0, r3
 80188be:	4943      	ldr	r1, [pc, #268]	@ (80189cc <etharp_tmr+0x14c>)
 80188c0:	687a      	ldr	r2, [r7, #4]
 80188c2:	4613      	mov	r3, r2
 80188c4:	005b      	lsls	r3, r3, #1
 80188c6:	4413      	add	r3, r2
 80188c8:	00db      	lsls	r3, r3, #3
 80188ca:	440b      	add	r3, r1
 80188cc:	3312      	adds	r3, #18
 80188ce:	4602      	mov	r2, r0
 80188d0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80188d2:	493e      	ldr	r1, [pc, #248]	@ (80189cc <etharp_tmr+0x14c>)
 80188d4:	687a      	ldr	r2, [r7, #4]
 80188d6:	4613      	mov	r3, r2
 80188d8:	005b      	lsls	r3, r3, #1
 80188da:	4413      	add	r3, r2
 80188dc:	00db      	lsls	r3, r3, #3
 80188de:	440b      	add	r3, r1
 80188e0:	3312      	adds	r3, #18
 80188e2:	881b      	ldrh	r3, [r3, #0]
 80188e4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80188e8:	d215      	bcs.n	8018916 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80188ea:	4938      	ldr	r1, [pc, #224]	@ (80189cc <etharp_tmr+0x14c>)
 80188ec:	687a      	ldr	r2, [r7, #4]
 80188ee:	4613      	mov	r3, r2
 80188f0:	005b      	lsls	r3, r3, #1
 80188f2:	4413      	add	r3, r2
 80188f4:	00db      	lsls	r3, r3, #3
 80188f6:	440b      	add	r3, r1
 80188f8:	3314      	adds	r3, #20
 80188fa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80188fc:	2b01      	cmp	r3, #1
 80188fe:	d10e      	bne.n	801891e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018900:	4932      	ldr	r1, [pc, #200]	@ (80189cc <etharp_tmr+0x14c>)
 8018902:	687a      	ldr	r2, [r7, #4]
 8018904:	4613      	mov	r3, r2
 8018906:	005b      	lsls	r3, r3, #1
 8018908:	4413      	add	r3, r2
 801890a:	00db      	lsls	r3, r3, #3
 801890c:	440b      	add	r3, r1
 801890e:	3312      	adds	r3, #18
 8018910:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018912:	2b04      	cmp	r3, #4
 8018914:	d903      	bls.n	801891e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018916:	6878      	ldr	r0, [r7, #4]
 8018918:	f7ff ff80 	bl	801881c <etharp_free_entry>
 801891c:	e04a      	b.n	80189b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801891e:	492b      	ldr	r1, [pc, #172]	@ (80189cc <etharp_tmr+0x14c>)
 8018920:	687a      	ldr	r2, [r7, #4]
 8018922:	4613      	mov	r3, r2
 8018924:	005b      	lsls	r3, r3, #1
 8018926:	4413      	add	r3, r2
 8018928:	00db      	lsls	r3, r3, #3
 801892a:	440b      	add	r3, r1
 801892c:	3314      	adds	r3, #20
 801892e:	781b      	ldrb	r3, [r3, #0]
 8018930:	2b03      	cmp	r3, #3
 8018932:	d10a      	bne.n	801894a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018934:	4925      	ldr	r1, [pc, #148]	@ (80189cc <etharp_tmr+0x14c>)
 8018936:	687a      	ldr	r2, [r7, #4]
 8018938:	4613      	mov	r3, r2
 801893a:	005b      	lsls	r3, r3, #1
 801893c:	4413      	add	r3, r2
 801893e:	00db      	lsls	r3, r3, #3
 8018940:	440b      	add	r3, r1
 8018942:	3314      	adds	r3, #20
 8018944:	2204      	movs	r2, #4
 8018946:	701a      	strb	r2, [r3, #0]
 8018948:	e034      	b.n	80189b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801894a:	4920      	ldr	r1, [pc, #128]	@ (80189cc <etharp_tmr+0x14c>)
 801894c:	687a      	ldr	r2, [r7, #4]
 801894e:	4613      	mov	r3, r2
 8018950:	005b      	lsls	r3, r3, #1
 8018952:	4413      	add	r3, r2
 8018954:	00db      	lsls	r3, r3, #3
 8018956:	440b      	add	r3, r1
 8018958:	3314      	adds	r3, #20
 801895a:	781b      	ldrb	r3, [r3, #0]
 801895c:	2b04      	cmp	r3, #4
 801895e:	d10a      	bne.n	8018976 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018960:	491a      	ldr	r1, [pc, #104]	@ (80189cc <etharp_tmr+0x14c>)
 8018962:	687a      	ldr	r2, [r7, #4]
 8018964:	4613      	mov	r3, r2
 8018966:	005b      	lsls	r3, r3, #1
 8018968:	4413      	add	r3, r2
 801896a:	00db      	lsls	r3, r3, #3
 801896c:	440b      	add	r3, r1
 801896e:	3314      	adds	r3, #20
 8018970:	2202      	movs	r2, #2
 8018972:	701a      	strb	r2, [r3, #0]
 8018974:	e01e      	b.n	80189b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018976:	4915      	ldr	r1, [pc, #84]	@ (80189cc <etharp_tmr+0x14c>)
 8018978:	687a      	ldr	r2, [r7, #4]
 801897a:	4613      	mov	r3, r2
 801897c:	005b      	lsls	r3, r3, #1
 801897e:	4413      	add	r3, r2
 8018980:	00db      	lsls	r3, r3, #3
 8018982:	440b      	add	r3, r1
 8018984:	3314      	adds	r3, #20
 8018986:	781b      	ldrb	r3, [r3, #0]
 8018988:	2b01      	cmp	r3, #1
 801898a:	d113      	bne.n	80189b4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801898c:	490f      	ldr	r1, [pc, #60]	@ (80189cc <etharp_tmr+0x14c>)
 801898e:	687a      	ldr	r2, [r7, #4]
 8018990:	4613      	mov	r3, r2
 8018992:	005b      	lsls	r3, r3, #1
 8018994:	4413      	add	r3, r2
 8018996:	00db      	lsls	r3, r3, #3
 8018998:	440b      	add	r3, r1
 801899a:	3308      	adds	r3, #8
 801899c:	6818      	ldr	r0, [r3, #0]
 801899e:	687a      	ldr	r2, [r7, #4]
 80189a0:	4613      	mov	r3, r2
 80189a2:	005b      	lsls	r3, r3, #1
 80189a4:	4413      	add	r3, r2
 80189a6:	00db      	lsls	r3, r3, #3
 80189a8:	4a08      	ldr	r2, [pc, #32]	@ (80189cc <etharp_tmr+0x14c>)
 80189aa:	4413      	add	r3, r2
 80189ac:	3304      	adds	r3, #4
 80189ae:	4619      	mov	r1, r3
 80189b0:	f000 fe6e 	bl	8019690 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	3301      	adds	r3, #1
 80189b8:	607b      	str	r3, [r7, #4]
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	2b09      	cmp	r3, #9
 80189be:	f77f af65 	ble.w	801888c <etharp_tmr+0xc>
      }
    }
  }
}
 80189c2:	bf00      	nop
 80189c4:	bf00      	nop
 80189c6:	3708      	adds	r7, #8
 80189c8:	46bd      	mov	sp, r7
 80189ca:	bd80      	pop	{r7, pc}
 80189cc:	240081ec 	.word	0x240081ec

080189d0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80189d0:	b580      	push	{r7, lr}
 80189d2:	b08a      	sub	sp, #40	@ 0x28
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	60f8      	str	r0, [r7, #12]
 80189d8:	460b      	mov	r3, r1
 80189da:	607a      	str	r2, [r7, #4]
 80189dc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80189de:	230a      	movs	r3, #10
 80189e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80189e2:	230a      	movs	r3, #10
 80189e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80189e6:	230a      	movs	r3, #10
 80189e8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80189ea:	2300      	movs	r3, #0
 80189ec:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80189ee:	230a      	movs	r3, #10
 80189f0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80189f2:	2300      	movs	r3, #0
 80189f4:	83bb      	strh	r3, [r7, #28]
 80189f6:	2300      	movs	r3, #0
 80189f8:	837b      	strh	r3, [r7, #26]
 80189fa:	2300      	movs	r3, #0
 80189fc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80189fe:	2300      	movs	r3, #0
 8018a00:	843b      	strh	r3, [r7, #32]
 8018a02:	e0ae      	b.n	8018b62 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018a04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a08:	49a6      	ldr	r1, [pc, #664]	@ (8018ca4 <etharp_find_entry+0x2d4>)
 8018a0a:	4613      	mov	r3, r2
 8018a0c:	005b      	lsls	r3, r3, #1
 8018a0e:	4413      	add	r3, r2
 8018a10:	00db      	lsls	r3, r3, #3
 8018a12:	440b      	add	r3, r1
 8018a14:	3314      	adds	r3, #20
 8018a16:	781b      	ldrb	r3, [r3, #0]
 8018a18:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018a1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018a1e:	2b0a      	cmp	r3, #10
 8018a20:	d105      	bne.n	8018a2e <etharp_find_entry+0x5e>
 8018a22:	7dfb      	ldrb	r3, [r7, #23]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d102      	bne.n	8018a2e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018a28:	8c3b      	ldrh	r3, [r7, #32]
 8018a2a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8018a2c:	e095      	b.n	8018b5a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018a2e:	7dfb      	ldrb	r3, [r7, #23]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	f000 8092 	beq.w	8018b5a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018a36:	7dfb      	ldrb	r3, [r7, #23]
 8018a38:	2b01      	cmp	r3, #1
 8018a3a:	d009      	beq.n	8018a50 <etharp_find_entry+0x80>
 8018a3c:	7dfb      	ldrb	r3, [r7, #23]
 8018a3e:	2b01      	cmp	r3, #1
 8018a40:	d806      	bhi.n	8018a50 <etharp_find_entry+0x80>
 8018a42:	4b99      	ldr	r3, [pc, #612]	@ (8018ca8 <etharp_find_entry+0x2d8>)
 8018a44:	f240 1223 	movw	r2, #291	@ 0x123
 8018a48:	4998      	ldr	r1, [pc, #608]	@ (8018cac <etharp_find_entry+0x2dc>)
 8018a4a:	4899      	ldr	r0, [pc, #612]	@ (8018cb0 <etharp_find_entry+0x2e0>)
 8018a4c:	f002 fd02 	bl	801b454 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018a50:	68fb      	ldr	r3, [r7, #12]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d020      	beq.n	8018a98 <etharp_find_entry+0xc8>
 8018a56:	68fb      	ldr	r3, [r7, #12]
 8018a58:	6819      	ldr	r1, [r3, #0]
 8018a5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a5e:	4891      	ldr	r0, [pc, #580]	@ (8018ca4 <etharp_find_entry+0x2d4>)
 8018a60:	4613      	mov	r3, r2
 8018a62:	005b      	lsls	r3, r3, #1
 8018a64:	4413      	add	r3, r2
 8018a66:	00db      	lsls	r3, r3, #3
 8018a68:	4403      	add	r3, r0
 8018a6a:	3304      	adds	r3, #4
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	4299      	cmp	r1, r3
 8018a70:	d112      	bne.n	8018a98 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d00c      	beq.n	8018a92 <etharp_find_entry+0xc2>
 8018a78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a7c:	4989      	ldr	r1, [pc, #548]	@ (8018ca4 <etharp_find_entry+0x2d4>)
 8018a7e:	4613      	mov	r3, r2
 8018a80:	005b      	lsls	r3, r3, #1
 8018a82:	4413      	add	r3, r2
 8018a84:	00db      	lsls	r3, r3, #3
 8018a86:	440b      	add	r3, r1
 8018a88:	3308      	adds	r3, #8
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	687a      	ldr	r2, [r7, #4]
 8018a8e:	429a      	cmp	r2, r3
 8018a90:	d102      	bne.n	8018a98 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018a92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018a96:	e100      	b.n	8018c9a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018a98:	7dfb      	ldrb	r3, [r7, #23]
 8018a9a:	2b01      	cmp	r3, #1
 8018a9c:	d140      	bne.n	8018b20 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018a9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018aa2:	4980      	ldr	r1, [pc, #512]	@ (8018ca4 <etharp_find_entry+0x2d4>)
 8018aa4:	4613      	mov	r3, r2
 8018aa6:	005b      	lsls	r3, r3, #1
 8018aa8:	4413      	add	r3, r2
 8018aaa:	00db      	lsls	r3, r3, #3
 8018aac:	440b      	add	r3, r1
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d01a      	beq.n	8018aea <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018ab4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018ab8:	497a      	ldr	r1, [pc, #488]	@ (8018ca4 <etharp_find_entry+0x2d4>)
 8018aba:	4613      	mov	r3, r2
 8018abc:	005b      	lsls	r3, r3, #1
 8018abe:	4413      	add	r3, r2
 8018ac0:	00db      	lsls	r3, r3, #3
 8018ac2:	440b      	add	r3, r1
 8018ac4:	3312      	adds	r3, #18
 8018ac6:	881b      	ldrh	r3, [r3, #0]
 8018ac8:	8bba      	ldrh	r2, [r7, #28]
 8018aca:	429a      	cmp	r2, r3
 8018acc:	d845      	bhi.n	8018b5a <etharp_find_entry+0x18a>
            old_queue = i;
 8018ace:	8c3b      	ldrh	r3, [r7, #32]
 8018ad0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018ad2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018ad6:	4973      	ldr	r1, [pc, #460]	@ (8018ca4 <etharp_find_entry+0x2d4>)
 8018ad8:	4613      	mov	r3, r2
 8018ada:	005b      	lsls	r3, r3, #1
 8018adc:	4413      	add	r3, r2
 8018ade:	00db      	lsls	r3, r3, #3
 8018ae0:	440b      	add	r3, r1
 8018ae2:	3312      	adds	r3, #18
 8018ae4:	881b      	ldrh	r3, [r3, #0]
 8018ae6:	83bb      	strh	r3, [r7, #28]
 8018ae8:	e037      	b.n	8018b5a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018aea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018aee:	496d      	ldr	r1, [pc, #436]	@ (8018ca4 <etharp_find_entry+0x2d4>)
 8018af0:	4613      	mov	r3, r2
 8018af2:	005b      	lsls	r3, r3, #1
 8018af4:	4413      	add	r3, r2
 8018af6:	00db      	lsls	r3, r3, #3
 8018af8:	440b      	add	r3, r1
 8018afa:	3312      	adds	r3, #18
 8018afc:	881b      	ldrh	r3, [r3, #0]
 8018afe:	8b7a      	ldrh	r2, [r7, #26]
 8018b00:	429a      	cmp	r2, r3
 8018b02:	d82a      	bhi.n	8018b5a <etharp_find_entry+0x18a>
            old_pending = i;
 8018b04:	8c3b      	ldrh	r3, [r7, #32]
 8018b06:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8018b08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b0c:	4965      	ldr	r1, [pc, #404]	@ (8018ca4 <etharp_find_entry+0x2d4>)
 8018b0e:	4613      	mov	r3, r2
 8018b10:	005b      	lsls	r3, r3, #1
 8018b12:	4413      	add	r3, r2
 8018b14:	00db      	lsls	r3, r3, #3
 8018b16:	440b      	add	r3, r1
 8018b18:	3312      	adds	r3, #18
 8018b1a:	881b      	ldrh	r3, [r3, #0]
 8018b1c:	837b      	strh	r3, [r7, #26]
 8018b1e:	e01c      	b.n	8018b5a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018b20:	7dfb      	ldrb	r3, [r7, #23]
 8018b22:	2b01      	cmp	r3, #1
 8018b24:	d919      	bls.n	8018b5a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018b26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b2a:	495e      	ldr	r1, [pc, #376]	@ (8018ca4 <etharp_find_entry+0x2d4>)
 8018b2c:	4613      	mov	r3, r2
 8018b2e:	005b      	lsls	r3, r3, #1
 8018b30:	4413      	add	r3, r2
 8018b32:	00db      	lsls	r3, r3, #3
 8018b34:	440b      	add	r3, r1
 8018b36:	3312      	adds	r3, #18
 8018b38:	881b      	ldrh	r3, [r3, #0]
 8018b3a:	8b3a      	ldrh	r2, [r7, #24]
 8018b3c:	429a      	cmp	r2, r3
 8018b3e:	d80c      	bhi.n	8018b5a <etharp_find_entry+0x18a>
            old_stable = i;
 8018b40:	8c3b      	ldrh	r3, [r7, #32]
 8018b42:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8018b44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b48:	4956      	ldr	r1, [pc, #344]	@ (8018ca4 <etharp_find_entry+0x2d4>)
 8018b4a:	4613      	mov	r3, r2
 8018b4c:	005b      	lsls	r3, r3, #1
 8018b4e:	4413      	add	r3, r2
 8018b50:	00db      	lsls	r3, r3, #3
 8018b52:	440b      	add	r3, r1
 8018b54:	3312      	adds	r3, #18
 8018b56:	881b      	ldrh	r3, [r3, #0]
 8018b58:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018b5a:	8c3b      	ldrh	r3, [r7, #32]
 8018b5c:	3301      	adds	r3, #1
 8018b5e:	b29b      	uxth	r3, r3
 8018b60:	843b      	strh	r3, [r7, #32]
 8018b62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018b66:	2b09      	cmp	r3, #9
 8018b68:	f77f af4c 	ble.w	8018a04 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018b6c:	7afb      	ldrb	r3, [r7, #11]
 8018b6e:	f003 0302 	and.w	r3, r3, #2
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d108      	bne.n	8018b88 <etharp_find_entry+0x1b8>
 8018b76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018b7a:	2b0a      	cmp	r3, #10
 8018b7c:	d107      	bne.n	8018b8e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018b7e:	7afb      	ldrb	r3, [r7, #11]
 8018b80:	f003 0301 	and.w	r3, r3, #1
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d102      	bne.n	8018b8e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018b88:	f04f 33ff 	mov.w	r3, #4294967295
 8018b8c:	e085      	b.n	8018c9a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018b8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018b92:	2b09      	cmp	r3, #9
 8018b94:	dc02      	bgt.n	8018b9c <etharp_find_entry+0x1cc>
    i = empty;
 8018b96:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018b98:	843b      	strh	r3, [r7, #32]
 8018b9a:	e039      	b.n	8018c10 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018b9c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8018ba0:	2b09      	cmp	r3, #9
 8018ba2:	dc14      	bgt.n	8018bce <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018ba4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018ba6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018ba8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018bac:	493d      	ldr	r1, [pc, #244]	@ (8018ca4 <etharp_find_entry+0x2d4>)
 8018bae:	4613      	mov	r3, r2
 8018bb0:	005b      	lsls	r3, r3, #1
 8018bb2:	4413      	add	r3, r2
 8018bb4:	00db      	lsls	r3, r3, #3
 8018bb6:	440b      	add	r3, r1
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d018      	beq.n	8018bf0 <etharp_find_entry+0x220>
 8018bbe:	4b3a      	ldr	r3, [pc, #232]	@ (8018ca8 <etharp_find_entry+0x2d8>)
 8018bc0:	f240 126d 	movw	r2, #365	@ 0x16d
 8018bc4:	493b      	ldr	r1, [pc, #236]	@ (8018cb4 <etharp_find_entry+0x2e4>)
 8018bc6:	483a      	ldr	r0, [pc, #232]	@ (8018cb0 <etharp_find_entry+0x2e0>)
 8018bc8:	f002 fc44 	bl	801b454 <iprintf>
 8018bcc:	e010      	b.n	8018bf0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018bce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8018bd2:	2b09      	cmp	r3, #9
 8018bd4:	dc02      	bgt.n	8018bdc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8018bd6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018bd8:	843b      	strh	r3, [r7, #32]
 8018bda:	e009      	b.n	8018bf0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018bdc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018be0:	2b09      	cmp	r3, #9
 8018be2:	dc02      	bgt.n	8018bea <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018be4:	8bfb      	ldrh	r3, [r7, #30]
 8018be6:	843b      	strh	r3, [r7, #32]
 8018be8:	e002      	b.n	8018bf0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018bea:	f04f 33ff 	mov.w	r3, #4294967295
 8018bee:	e054      	b.n	8018c9a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018bf0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018bf4:	2b09      	cmp	r3, #9
 8018bf6:	dd06      	ble.n	8018c06 <etharp_find_entry+0x236>
 8018bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8018ca8 <etharp_find_entry+0x2d8>)
 8018bfa:	f240 127f 	movw	r2, #383	@ 0x17f
 8018bfe:	492e      	ldr	r1, [pc, #184]	@ (8018cb8 <etharp_find_entry+0x2e8>)
 8018c00:	482b      	ldr	r0, [pc, #172]	@ (8018cb0 <etharp_find_entry+0x2e0>)
 8018c02:	f002 fc27 	bl	801b454 <iprintf>
    etharp_free_entry(i);
 8018c06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	f7ff fe06 	bl	801881c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018c10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018c14:	2b09      	cmp	r3, #9
 8018c16:	dd06      	ble.n	8018c26 <etharp_find_entry+0x256>
 8018c18:	4b23      	ldr	r3, [pc, #140]	@ (8018ca8 <etharp_find_entry+0x2d8>)
 8018c1a:	f240 1283 	movw	r2, #387	@ 0x183
 8018c1e:	4926      	ldr	r1, [pc, #152]	@ (8018cb8 <etharp_find_entry+0x2e8>)
 8018c20:	4823      	ldr	r0, [pc, #140]	@ (8018cb0 <etharp_find_entry+0x2e0>)
 8018c22:	f002 fc17 	bl	801b454 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018c26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c2a:	491e      	ldr	r1, [pc, #120]	@ (8018ca4 <etharp_find_entry+0x2d4>)
 8018c2c:	4613      	mov	r3, r2
 8018c2e:	005b      	lsls	r3, r3, #1
 8018c30:	4413      	add	r3, r2
 8018c32:	00db      	lsls	r3, r3, #3
 8018c34:	440b      	add	r3, r1
 8018c36:	3314      	adds	r3, #20
 8018c38:	781b      	ldrb	r3, [r3, #0]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d006      	beq.n	8018c4c <etharp_find_entry+0x27c>
 8018c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8018ca8 <etharp_find_entry+0x2d8>)
 8018c40:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8018c44:	491d      	ldr	r1, [pc, #116]	@ (8018cbc <etharp_find_entry+0x2ec>)
 8018c46:	481a      	ldr	r0, [pc, #104]	@ (8018cb0 <etharp_find_entry+0x2e0>)
 8018c48:	f002 fc04 	bl	801b454 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d00b      	beq.n	8018c6a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018c52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	6819      	ldr	r1, [r3, #0]
 8018c5a:	4812      	ldr	r0, [pc, #72]	@ (8018ca4 <etharp_find_entry+0x2d4>)
 8018c5c:	4613      	mov	r3, r2
 8018c5e:	005b      	lsls	r3, r3, #1
 8018c60:	4413      	add	r3, r2
 8018c62:	00db      	lsls	r3, r3, #3
 8018c64:	4403      	add	r3, r0
 8018c66:	3304      	adds	r3, #4
 8018c68:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018c6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c6e:	490d      	ldr	r1, [pc, #52]	@ (8018ca4 <etharp_find_entry+0x2d4>)
 8018c70:	4613      	mov	r3, r2
 8018c72:	005b      	lsls	r3, r3, #1
 8018c74:	4413      	add	r3, r2
 8018c76:	00db      	lsls	r3, r3, #3
 8018c78:	440b      	add	r3, r1
 8018c7a:	3312      	adds	r3, #18
 8018c7c:	2200      	movs	r2, #0
 8018c7e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018c80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c84:	4907      	ldr	r1, [pc, #28]	@ (8018ca4 <etharp_find_entry+0x2d4>)
 8018c86:	4613      	mov	r3, r2
 8018c88:	005b      	lsls	r3, r3, #1
 8018c8a:	4413      	add	r3, r2
 8018c8c:	00db      	lsls	r3, r3, #3
 8018c8e:	440b      	add	r3, r1
 8018c90:	3308      	adds	r3, #8
 8018c92:	687a      	ldr	r2, [r7, #4]
 8018c94:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018c96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	3728      	adds	r7, #40	@ 0x28
 8018c9e:	46bd      	mov	sp, r7
 8018ca0:	bd80      	pop	{r7, pc}
 8018ca2:	bf00      	nop
 8018ca4:	240081ec 	.word	0x240081ec
 8018ca8:	0801ebd8 	.word	0x0801ebd8
 8018cac:	0801ec10 	.word	0x0801ec10
 8018cb0:	0801ec50 	.word	0x0801ec50
 8018cb4:	0801ec78 	.word	0x0801ec78
 8018cb8:	0801ec90 	.word	0x0801ec90
 8018cbc:	0801eca4 	.word	0x0801eca4

08018cc0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018cc0:	b580      	push	{r7, lr}
 8018cc2:	b088      	sub	sp, #32
 8018cc4:	af02      	add	r7, sp, #8
 8018cc6:	60f8      	str	r0, [r7, #12]
 8018cc8:	60b9      	str	r1, [r7, #8]
 8018cca:	607a      	str	r2, [r7, #4]
 8018ccc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018cce:	68fb      	ldr	r3, [r7, #12]
 8018cd0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018cd4:	2b06      	cmp	r3, #6
 8018cd6:	d006      	beq.n	8018ce6 <etharp_update_arp_entry+0x26>
 8018cd8:	4b48      	ldr	r3, [pc, #288]	@ (8018dfc <etharp_update_arp_entry+0x13c>)
 8018cda:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8018cde:	4948      	ldr	r1, [pc, #288]	@ (8018e00 <etharp_update_arp_entry+0x140>)
 8018ce0:	4848      	ldr	r0, [pc, #288]	@ (8018e04 <etharp_update_arp_entry+0x144>)
 8018ce2:	f002 fbb7 	bl	801b454 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018ce6:	68bb      	ldr	r3, [r7, #8]
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d012      	beq.n	8018d12 <etharp_update_arp_entry+0x52>
 8018cec:	68bb      	ldr	r3, [r7, #8]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d00e      	beq.n	8018d12 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018cf4:	68bb      	ldr	r3, [r7, #8]
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	68f9      	ldr	r1, [r7, #12]
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	f001 f924 	bl	8019f48 <ip4_addr_isbroadcast_u32>
 8018d00:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d105      	bne.n	8018d12 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018d06:	68bb      	ldr	r3, [r7, #8]
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018d0e:	2be0      	cmp	r3, #224	@ 0xe0
 8018d10:	d102      	bne.n	8018d18 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018d12:	f06f 030f 	mvn.w	r3, #15
 8018d16:	e06c      	b.n	8018df2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018d18:	78fb      	ldrb	r3, [r7, #3]
 8018d1a:	68fa      	ldr	r2, [r7, #12]
 8018d1c:	4619      	mov	r1, r3
 8018d1e:	68b8      	ldr	r0, [r7, #8]
 8018d20:	f7ff fe56 	bl	80189d0 <etharp_find_entry>
 8018d24:	4603      	mov	r3, r0
 8018d26:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018d28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	da02      	bge.n	8018d36 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018d30:	8afb      	ldrh	r3, [r7, #22]
 8018d32:	b25b      	sxtb	r3, r3
 8018d34:	e05d      	b.n	8018df2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018d36:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d3a:	4933      	ldr	r1, [pc, #204]	@ (8018e08 <etharp_update_arp_entry+0x148>)
 8018d3c:	4613      	mov	r3, r2
 8018d3e:	005b      	lsls	r3, r3, #1
 8018d40:	4413      	add	r3, r2
 8018d42:	00db      	lsls	r3, r3, #3
 8018d44:	440b      	add	r3, r1
 8018d46:	3314      	adds	r3, #20
 8018d48:	2202      	movs	r2, #2
 8018d4a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018d4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d50:	492d      	ldr	r1, [pc, #180]	@ (8018e08 <etharp_update_arp_entry+0x148>)
 8018d52:	4613      	mov	r3, r2
 8018d54:	005b      	lsls	r3, r3, #1
 8018d56:	4413      	add	r3, r2
 8018d58:	00db      	lsls	r3, r3, #3
 8018d5a:	440b      	add	r3, r1
 8018d5c:	3308      	adds	r3, #8
 8018d5e:	68fa      	ldr	r2, [r7, #12]
 8018d60:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018d62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d66:	4613      	mov	r3, r2
 8018d68:	005b      	lsls	r3, r3, #1
 8018d6a:	4413      	add	r3, r2
 8018d6c:	00db      	lsls	r3, r3, #3
 8018d6e:	3308      	adds	r3, #8
 8018d70:	4a25      	ldr	r2, [pc, #148]	@ (8018e08 <etharp_update_arp_entry+0x148>)
 8018d72:	4413      	add	r3, r2
 8018d74:	3304      	adds	r3, #4
 8018d76:	2206      	movs	r2, #6
 8018d78:	6879      	ldr	r1, [r7, #4]
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	f002 fd4d 	bl	801b81a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018d80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d84:	4920      	ldr	r1, [pc, #128]	@ (8018e08 <etharp_update_arp_entry+0x148>)
 8018d86:	4613      	mov	r3, r2
 8018d88:	005b      	lsls	r3, r3, #1
 8018d8a:	4413      	add	r3, r2
 8018d8c:	00db      	lsls	r3, r3, #3
 8018d8e:	440b      	add	r3, r1
 8018d90:	3312      	adds	r3, #18
 8018d92:	2200      	movs	r2, #0
 8018d94:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018d96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d9a:	491b      	ldr	r1, [pc, #108]	@ (8018e08 <etharp_update_arp_entry+0x148>)
 8018d9c:	4613      	mov	r3, r2
 8018d9e:	005b      	lsls	r3, r3, #1
 8018da0:	4413      	add	r3, r2
 8018da2:	00db      	lsls	r3, r3, #3
 8018da4:	440b      	add	r3, r1
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d021      	beq.n	8018df0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018dac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018db0:	4915      	ldr	r1, [pc, #84]	@ (8018e08 <etharp_update_arp_entry+0x148>)
 8018db2:	4613      	mov	r3, r2
 8018db4:	005b      	lsls	r3, r3, #1
 8018db6:	4413      	add	r3, r2
 8018db8:	00db      	lsls	r3, r3, #3
 8018dba:	440b      	add	r3, r1
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018dc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018dc4:	4910      	ldr	r1, [pc, #64]	@ (8018e08 <etharp_update_arp_entry+0x148>)
 8018dc6:	4613      	mov	r3, r2
 8018dc8:	005b      	lsls	r3, r3, #1
 8018dca:	4413      	add	r3, r2
 8018dcc:	00db      	lsls	r3, r3, #3
 8018dce:	440b      	add	r3, r1
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018dd4:	68fb      	ldr	r3, [r7, #12]
 8018dd6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8018dda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018dde:	9300      	str	r3, [sp, #0]
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	6939      	ldr	r1, [r7, #16]
 8018de4:	68f8      	ldr	r0, [r7, #12]
 8018de6:	f001 ffbd 	bl	801ad64 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018dea:	6938      	ldr	r0, [r7, #16]
 8018dec:	f7f9 fdf0 	bl	80129d0 <pbuf_free>
  }
  return ERR_OK;
 8018df0:	2300      	movs	r3, #0
}
 8018df2:	4618      	mov	r0, r3
 8018df4:	3718      	adds	r7, #24
 8018df6:	46bd      	mov	sp, r7
 8018df8:	bd80      	pop	{r7, pc}
 8018dfa:	bf00      	nop
 8018dfc:	0801ebd8 	.word	0x0801ebd8
 8018e00:	0801ecd0 	.word	0x0801ecd0
 8018e04:	0801ec50 	.word	0x0801ec50
 8018e08:	240081ec 	.word	0x240081ec

08018e0c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	b084      	sub	sp, #16
 8018e10:	af00      	add	r7, sp, #0
 8018e12:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018e14:	2300      	movs	r3, #0
 8018e16:	60fb      	str	r3, [r7, #12]
 8018e18:	e01e      	b.n	8018e58 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018e1a:	4913      	ldr	r1, [pc, #76]	@ (8018e68 <etharp_cleanup_netif+0x5c>)
 8018e1c:	68fa      	ldr	r2, [r7, #12]
 8018e1e:	4613      	mov	r3, r2
 8018e20:	005b      	lsls	r3, r3, #1
 8018e22:	4413      	add	r3, r2
 8018e24:	00db      	lsls	r3, r3, #3
 8018e26:	440b      	add	r3, r1
 8018e28:	3314      	adds	r3, #20
 8018e2a:	781b      	ldrb	r3, [r3, #0]
 8018e2c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018e2e:	7afb      	ldrb	r3, [r7, #11]
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d00e      	beq.n	8018e52 <etharp_cleanup_netif+0x46>
 8018e34:	490c      	ldr	r1, [pc, #48]	@ (8018e68 <etharp_cleanup_netif+0x5c>)
 8018e36:	68fa      	ldr	r2, [r7, #12]
 8018e38:	4613      	mov	r3, r2
 8018e3a:	005b      	lsls	r3, r3, #1
 8018e3c:	4413      	add	r3, r2
 8018e3e:	00db      	lsls	r3, r3, #3
 8018e40:	440b      	add	r3, r1
 8018e42:	3308      	adds	r3, #8
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	687a      	ldr	r2, [r7, #4]
 8018e48:	429a      	cmp	r2, r3
 8018e4a:	d102      	bne.n	8018e52 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018e4c:	68f8      	ldr	r0, [r7, #12]
 8018e4e:	f7ff fce5 	bl	801881c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	3301      	adds	r3, #1
 8018e56:	60fb      	str	r3, [r7, #12]
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	2b09      	cmp	r3, #9
 8018e5c:	dddd      	ble.n	8018e1a <etharp_cleanup_netif+0xe>
    }
  }
}
 8018e5e:	bf00      	nop
 8018e60:	bf00      	nop
 8018e62:	3710      	adds	r7, #16
 8018e64:	46bd      	mov	sp, r7
 8018e66:	bd80      	pop	{r7, pc}
 8018e68:	240081ec 	.word	0x240081ec

08018e6c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018e6c:	b5b0      	push	{r4, r5, r7, lr}
 8018e6e:	b08a      	sub	sp, #40	@ 0x28
 8018e70:	af04      	add	r7, sp, #16
 8018e72:	6078      	str	r0, [r7, #4]
 8018e74:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018e76:	683b      	ldr	r3, [r7, #0]
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d107      	bne.n	8018e8c <etharp_input+0x20>
 8018e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8018f74 <etharp_input+0x108>)
 8018e7e:	f240 228a 	movw	r2, #650	@ 0x28a
 8018e82:	493d      	ldr	r1, [pc, #244]	@ (8018f78 <etharp_input+0x10c>)
 8018e84:	483d      	ldr	r0, [pc, #244]	@ (8018f7c <etharp_input+0x110>)
 8018e86:	f002 fae5 	bl	801b454 <iprintf>
 8018e8a:	e06f      	b.n	8018f6c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	685b      	ldr	r3, [r3, #4]
 8018e90:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018e92:	693b      	ldr	r3, [r7, #16]
 8018e94:	881b      	ldrh	r3, [r3, #0]
 8018e96:	b29b      	uxth	r3, r3
 8018e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018e9c:	d10c      	bne.n	8018eb8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018e9e:	693b      	ldr	r3, [r7, #16]
 8018ea0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018ea2:	2b06      	cmp	r3, #6
 8018ea4:	d108      	bne.n	8018eb8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018ea6:	693b      	ldr	r3, [r7, #16]
 8018ea8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018eaa:	2b04      	cmp	r3, #4
 8018eac:	d104      	bne.n	8018eb8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018eae:	693b      	ldr	r3, [r7, #16]
 8018eb0:	885b      	ldrh	r3, [r3, #2]
 8018eb2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018eb4:	2b08      	cmp	r3, #8
 8018eb6:	d003      	beq.n	8018ec0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018eb8:	6878      	ldr	r0, [r7, #4]
 8018eba:	f7f9 fd89 	bl	80129d0 <pbuf_free>
    return;
 8018ebe:	e055      	b.n	8018f6c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018ec0:	693b      	ldr	r3, [r7, #16]
 8018ec2:	330e      	adds	r3, #14
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018ec8:	693b      	ldr	r3, [r7, #16]
 8018eca:	3318      	adds	r3, #24
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018ed0:	683b      	ldr	r3, [r7, #0]
 8018ed2:	3304      	adds	r3, #4
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d102      	bne.n	8018ee0 <etharp_input+0x74>
    for_us = 0;
 8018eda:	2300      	movs	r3, #0
 8018edc:	75fb      	strb	r3, [r7, #23]
 8018ede:	e009      	b.n	8018ef4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018ee0:	68ba      	ldr	r2, [r7, #8]
 8018ee2:	683b      	ldr	r3, [r7, #0]
 8018ee4:	3304      	adds	r3, #4
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	429a      	cmp	r2, r3
 8018eea:	bf0c      	ite	eq
 8018eec:	2301      	moveq	r3, #1
 8018eee:	2300      	movne	r3, #0
 8018ef0:	b2db      	uxtb	r3, r3
 8018ef2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018ef4:	693b      	ldr	r3, [r7, #16]
 8018ef6:	f103 0208 	add.w	r2, r3, #8
 8018efa:	7dfb      	ldrb	r3, [r7, #23]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d001      	beq.n	8018f04 <etharp_input+0x98>
 8018f00:	2301      	movs	r3, #1
 8018f02:	e000      	b.n	8018f06 <etharp_input+0x9a>
 8018f04:	2302      	movs	r3, #2
 8018f06:	f107 010c 	add.w	r1, r7, #12
 8018f0a:	6838      	ldr	r0, [r7, #0]
 8018f0c:	f7ff fed8 	bl	8018cc0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018f10:	693b      	ldr	r3, [r7, #16]
 8018f12:	88db      	ldrh	r3, [r3, #6]
 8018f14:	b29b      	uxth	r3, r3
 8018f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018f1a:	d003      	beq.n	8018f24 <etharp_input+0xb8>
 8018f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018f20:	d01e      	beq.n	8018f60 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018f22:	e020      	b.n	8018f66 <etharp_input+0xfa>
      if (for_us) {
 8018f24:	7dfb      	ldrb	r3, [r7, #23]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d01c      	beq.n	8018f64 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018f2a:	683b      	ldr	r3, [r7, #0]
 8018f2c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8018f30:	693b      	ldr	r3, [r7, #16]
 8018f32:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018f36:	683b      	ldr	r3, [r7, #0]
 8018f38:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8018f3c:	683b      	ldr	r3, [r7, #0]
 8018f3e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018f40:	693a      	ldr	r2, [r7, #16]
 8018f42:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018f44:	2102      	movs	r1, #2
 8018f46:	9103      	str	r1, [sp, #12]
 8018f48:	f107 010c 	add.w	r1, r7, #12
 8018f4c:	9102      	str	r1, [sp, #8]
 8018f4e:	9201      	str	r2, [sp, #4]
 8018f50:	9300      	str	r3, [sp, #0]
 8018f52:	462b      	mov	r3, r5
 8018f54:	4622      	mov	r2, r4
 8018f56:	4601      	mov	r1, r0
 8018f58:	6838      	ldr	r0, [r7, #0]
 8018f5a:	f000 faeb 	bl	8019534 <etharp_raw>
      break;
 8018f5e:	e001      	b.n	8018f64 <etharp_input+0xf8>
      break;
 8018f60:	bf00      	nop
 8018f62:	e000      	b.n	8018f66 <etharp_input+0xfa>
      break;
 8018f64:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018f66:	6878      	ldr	r0, [r7, #4]
 8018f68:	f7f9 fd32 	bl	80129d0 <pbuf_free>
}
 8018f6c:	3718      	adds	r7, #24
 8018f6e:	46bd      	mov	sp, r7
 8018f70:	bdb0      	pop	{r4, r5, r7, pc}
 8018f72:	bf00      	nop
 8018f74:	0801ebd8 	.word	0x0801ebd8
 8018f78:	0801ed28 	.word	0x0801ed28
 8018f7c:	0801ec50 	.word	0x0801ec50

08018f80 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b086      	sub	sp, #24
 8018f84:	af02      	add	r7, sp, #8
 8018f86:	60f8      	str	r0, [r7, #12]
 8018f88:	60b9      	str	r1, [r7, #8]
 8018f8a:	4613      	mov	r3, r2
 8018f8c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018f8e:	79fa      	ldrb	r2, [r7, #7]
 8018f90:	4944      	ldr	r1, [pc, #272]	@ (80190a4 <etharp_output_to_arp_index+0x124>)
 8018f92:	4613      	mov	r3, r2
 8018f94:	005b      	lsls	r3, r3, #1
 8018f96:	4413      	add	r3, r2
 8018f98:	00db      	lsls	r3, r3, #3
 8018f9a:	440b      	add	r3, r1
 8018f9c:	3314      	adds	r3, #20
 8018f9e:	781b      	ldrb	r3, [r3, #0]
 8018fa0:	2b01      	cmp	r3, #1
 8018fa2:	d806      	bhi.n	8018fb2 <etharp_output_to_arp_index+0x32>
 8018fa4:	4b40      	ldr	r3, [pc, #256]	@ (80190a8 <etharp_output_to_arp_index+0x128>)
 8018fa6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8018faa:	4940      	ldr	r1, [pc, #256]	@ (80190ac <etharp_output_to_arp_index+0x12c>)
 8018fac:	4840      	ldr	r0, [pc, #256]	@ (80190b0 <etharp_output_to_arp_index+0x130>)
 8018fae:	f002 fa51 	bl	801b454 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018fb2:	79fa      	ldrb	r2, [r7, #7]
 8018fb4:	493b      	ldr	r1, [pc, #236]	@ (80190a4 <etharp_output_to_arp_index+0x124>)
 8018fb6:	4613      	mov	r3, r2
 8018fb8:	005b      	lsls	r3, r3, #1
 8018fba:	4413      	add	r3, r2
 8018fbc:	00db      	lsls	r3, r3, #3
 8018fbe:	440b      	add	r3, r1
 8018fc0:	3314      	adds	r3, #20
 8018fc2:	781b      	ldrb	r3, [r3, #0]
 8018fc4:	2b02      	cmp	r3, #2
 8018fc6:	d153      	bne.n	8019070 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018fc8:	79fa      	ldrb	r2, [r7, #7]
 8018fca:	4936      	ldr	r1, [pc, #216]	@ (80190a4 <etharp_output_to_arp_index+0x124>)
 8018fcc:	4613      	mov	r3, r2
 8018fce:	005b      	lsls	r3, r3, #1
 8018fd0:	4413      	add	r3, r2
 8018fd2:	00db      	lsls	r3, r3, #3
 8018fd4:	440b      	add	r3, r1
 8018fd6:	3312      	adds	r3, #18
 8018fd8:	881b      	ldrh	r3, [r3, #0]
 8018fda:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8018fde:	d919      	bls.n	8019014 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018fe0:	79fa      	ldrb	r2, [r7, #7]
 8018fe2:	4613      	mov	r3, r2
 8018fe4:	005b      	lsls	r3, r3, #1
 8018fe6:	4413      	add	r3, r2
 8018fe8:	00db      	lsls	r3, r3, #3
 8018fea:	4a2e      	ldr	r2, [pc, #184]	@ (80190a4 <etharp_output_to_arp_index+0x124>)
 8018fec:	4413      	add	r3, r2
 8018fee:	3304      	adds	r3, #4
 8018ff0:	4619      	mov	r1, r3
 8018ff2:	68f8      	ldr	r0, [r7, #12]
 8018ff4:	f000 fb4c 	bl	8019690 <etharp_request>
 8018ff8:	4603      	mov	r3, r0
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d138      	bne.n	8019070 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018ffe:	79fa      	ldrb	r2, [r7, #7]
 8019000:	4928      	ldr	r1, [pc, #160]	@ (80190a4 <etharp_output_to_arp_index+0x124>)
 8019002:	4613      	mov	r3, r2
 8019004:	005b      	lsls	r3, r3, #1
 8019006:	4413      	add	r3, r2
 8019008:	00db      	lsls	r3, r3, #3
 801900a:	440b      	add	r3, r1
 801900c:	3314      	adds	r3, #20
 801900e:	2203      	movs	r2, #3
 8019010:	701a      	strb	r2, [r3, #0]
 8019012:	e02d      	b.n	8019070 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8019014:	79fa      	ldrb	r2, [r7, #7]
 8019016:	4923      	ldr	r1, [pc, #140]	@ (80190a4 <etharp_output_to_arp_index+0x124>)
 8019018:	4613      	mov	r3, r2
 801901a:	005b      	lsls	r3, r3, #1
 801901c:	4413      	add	r3, r2
 801901e:	00db      	lsls	r3, r3, #3
 8019020:	440b      	add	r3, r1
 8019022:	3312      	adds	r3, #18
 8019024:	881b      	ldrh	r3, [r3, #0]
 8019026:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801902a:	d321      	bcc.n	8019070 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801902c:	79fa      	ldrb	r2, [r7, #7]
 801902e:	4613      	mov	r3, r2
 8019030:	005b      	lsls	r3, r3, #1
 8019032:	4413      	add	r3, r2
 8019034:	00db      	lsls	r3, r3, #3
 8019036:	4a1b      	ldr	r2, [pc, #108]	@ (80190a4 <etharp_output_to_arp_index+0x124>)
 8019038:	4413      	add	r3, r2
 801903a:	1d19      	adds	r1, r3, #4
 801903c:	79fa      	ldrb	r2, [r7, #7]
 801903e:	4613      	mov	r3, r2
 8019040:	005b      	lsls	r3, r3, #1
 8019042:	4413      	add	r3, r2
 8019044:	00db      	lsls	r3, r3, #3
 8019046:	3308      	adds	r3, #8
 8019048:	4a16      	ldr	r2, [pc, #88]	@ (80190a4 <etharp_output_to_arp_index+0x124>)
 801904a:	4413      	add	r3, r2
 801904c:	3304      	adds	r3, #4
 801904e:	461a      	mov	r2, r3
 8019050:	68f8      	ldr	r0, [r7, #12]
 8019052:	f000 fafb 	bl	801964c <etharp_request_dst>
 8019056:	4603      	mov	r3, r0
 8019058:	2b00      	cmp	r3, #0
 801905a:	d109      	bne.n	8019070 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801905c:	79fa      	ldrb	r2, [r7, #7]
 801905e:	4911      	ldr	r1, [pc, #68]	@ (80190a4 <etharp_output_to_arp_index+0x124>)
 8019060:	4613      	mov	r3, r2
 8019062:	005b      	lsls	r3, r3, #1
 8019064:	4413      	add	r3, r2
 8019066:	00db      	lsls	r3, r3, #3
 8019068:	440b      	add	r3, r1
 801906a:	3314      	adds	r3, #20
 801906c:	2203      	movs	r2, #3
 801906e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8019076:	79fa      	ldrb	r2, [r7, #7]
 8019078:	4613      	mov	r3, r2
 801907a:	005b      	lsls	r3, r3, #1
 801907c:	4413      	add	r3, r2
 801907e:	00db      	lsls	r3, r3, #3
 8019080:	3308      	adds	r3, #8
 8019082:	4a08      	ldr	r2, [pc, #32]	@ (80190a4 <etharp_output_to_arp_index+0x124>)
 8019084:	4413      	add	r3, r2
 8019086:	3304      	adds	r3, #4
 8019088:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801908c:	9200      	str	r2, [sp, #0]
 801908e:	460a      	mov	r2, r1
 8019090:	68b9      	ldr	r1, [r7, #8]
 8019092:	68f8      	ldr	r0, [r7, #12]
 8019094:	f001 fe66 	bl	801ad64 <ethernet_output>
 8019098:	4603      	mov	r3, r0
}
 801909a:	4618      	mov	r0, r3
 801909c:	3710      	adds	r7, #16
 801909e:	46bd      	mov	sp, r7
 80190a0:	bd80      	pop	{r7, pc}
 80190a2:	bf00      	nop
 80190a4:	240081ec 	.word	0x240081ec
 80190a8:	0801ebd8 	.word	0x0801ebd8
 80190ac:	0801ed48 	.word	0x0801ed48
 80190b0:	0801ec50 	.word	0x0801ec50

080190b4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80190b4:	b580      	push	{r7, lr}
 80190b6:	b08a      	sub	sp, #40	@ 0x28
 80190b8:	af02      	add	r7, sp, #8
 80190ba:	60f8      	str	r0, [r7, #12]
 80190bc:	60b9      	str	r1, [r7, #8]
 80190be:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d106      	bne.n	80190d8 <etharp_output+0x24>
 80190ca:	4b73      	ldr	r3, [pc, #460]	@ (8019298 <etharp_output+0x1e4>)
 80190cc:	f240 321e 	movw	r2, #798	@ 0x31e
 80190d0:	4972      	ldr	r1, [pc, #456]	@ (801929c <etharp_output+0x1e8>)
 80190d2:	4873      	ldr	r0, [pc, #460]	@ (80192a0 <etharp_output+0x1ec>)
 80190d4:	f002 f9be 	bl	801b454 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80190d8:	68bb      	ldr	r3, [r7, #8]
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d106      	bne.n	80190ec <etharp_output+0x38>
 80190de:	4b6e      	ldr	r3, [pc, #440]	@ (8019298 <etharp_output+0x1e4>)
 80190e0:	f240 321f 	movw	r2, #799	@ 0x31f
 80190e4:	496f      	ldr	r1, [pc, #444]	@ (80192a4 <etharp_output+0x1f0>)
 80190e6:	486e      	ldr	r0, [pc, #440]	@ (80192a0 <etharp_output+0x1ec>)
 80190e8:	f002 f9b4 	bl	801b454 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d106      	bne.n	8019100 <etharp_output+0x4c>
 80190f2:	4b69      	ldr	r3, [pc, #420]	@ (8019298 <etharp_output+0x1e4>)
 80190f4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80190f8:	496b      	ldr	r1, [pc, #428]	@ (80192a8 <etharp_output+0x1f4>)
 80190fa:	4869      	ldr	r0, [pc, #420]	@ (80192a0 <etharp_output+0x1ec>)
 80190fc:	f002 f9aa 	bl	801b454 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	68f9      	ldr	r1, [r7, #12]
 8019106:	4618      	mov	r0, r3
 8019108:	f000 ff1e 	bl	8019f48 <ip4_addr_isbroadcast_u32>
 801910c:	4603      	mov	r3, r0
 801910e:	2b00      	cmp	r3, #0
 8019110:	d002      	beq.n	8019118 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8019112:	4b66      	ldr	r3, [pc, #408]	@ (80192ac <etharp_output+0x1f8>)
 8019114:	61fb      	str	r3, [r7, #28]
 8019116:	e0af      	b.n	8019278 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	681b      	ldr	r3, [r3, #0]
 801911c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019120:	2be0      	cmp	r3, #224	@ 0xe0
 8019122:	d118      	bne.n	8019156 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8019124:	2301      	movs	r3, #1
 8019126:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019128:	2300      	movs	r3, #0
 801912a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801912c:	235e      	movs	r3, #94	@ 0x5e
 801912e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	3301      	adds	r3, #1
 8019134:	781b      	ldrb	r3, [r3, #0]
 8019136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801913a:	b2db      	uxtb	r3, r3
 801913c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	3302      	adds	r3, #2
 8019142:	781b      	ldrb	r3, [r3, #0]
 8019144:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	3303      	adds	r3, #3
 801914a:	781b      	ldrb	r3, [r3, #0]
 801914c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801914e:	f107 0310 	add.w	r3, r7, #16
 8019152:	61fb      	str	r3, [r7, #28]
 8019154:	e090      	b.n	8019278 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	681a      	ldr	r2, [r3, #0]
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	3304      	adds	r3, #4
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	405a      	eors	r2, r3
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	3308      	adds	r3, #8
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	4013      	ands	r3, r2
 801916a:	2b00      	cmp	r3, #0
 801916c:	d012      	beq.n	8019194 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019174:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8019178:	4293      	cmp	r3, r2
 801917a:	d00b      	beq.n	8019194 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	330c      	adds	r3, #12
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	2b00      	cmp	r3, #0
 8019184:	d003      	beq.n	801918e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	330c      	adds	r3, #12
 801918a:	61bb      	str	r3, [r7, #24]
 801918c:	e002      	b.n	8019194 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801918e:	f06f 0303 	mvn.w	r3, #3
 8019192:	e07d      	b.n	8019290 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019194:	4b46      	ldr	r3, [pc, #280]	@ (80192b0 <etharp_output+0x1fc>)
 8019196:	781b      	ldrb	r3, [r3, #0]
 8019198:	4619      	mov	r1, r3
 801919a:	4a46      	ldr	r2, [pc, #280]	@ (80192b4 <etharp_output+0x200>)
 801919c:	460b      	mov	r3, r1
 801919e:	005b      	lsls	r3, r3, #1
 80191a0:	440b      	add	r3, r1
 80191a2:	00db      	lsls	r3, r3, #3
 80191a4:	4413      	add	r3, r2
 80191a6:	3314      	adds	r3, #20
 80191a8:	781b      	ldrb	r3, [r3, #0]
 80191aa:	2b01      	cmp	r3, #1
 80191ac:	d925      	bls.n	80191fa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80191ae:	4b40      	ldr	r3, [pc, #256]	@ (80192b0 <etharp_output+0x1fc>)
 80191b0:	781b      	ldrb	r3, [r3, #0]
 80191b2:	4619      	mov	r1, r3
 80191b4:	4a3f      	ldr	r2, [pc, #252]	@ (80192b4 <etharp_output+0x200>)
 80191b6:	460b      	mov	r3, r1
 80191b8:	005b      	lsls	r3, r3, #1
 80191ba:	440b      	add	r3, r1
 80191bc:	00db      	lsls	r3, r3, #3
 80191be:	4413      	add	r3, r2
 80191c0:	3308      	adds	r3, #8
 80191c2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80191c4:	68fa      	ldr	r2, [r7, #12]
 80191c6:	429a      	cmp	r2, r3
 80191c8:	d117      	bne.n	80191fa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80191ca:	69bb      	ldr	r3, [r7, #24]
 80191cc:	681a      	ldr	r2, [r3, #0]
 80191ce:	4b38      	ldr	r3, [pc, #224]	@ (80192b0 <etharp_output+0x1fc>)
 80191d0:	781b      	ldrb	r3, [r3, #0]
 80191d2:	4618      	mov	r0, r3
 80191d4:	4937      	ldr	r1, [pc, #220]	@ (80192b4 <etharp_output+0x200>)
 80191d6:	4603      	mov	r3, r0
 80191d8:	005b      	lsls	r3, r3, #1
 80191da:	4403      	add	r3, r0
 80191dc:	00db      	lsls	r3, r3, #3
 80191de:	440b      	add	r3, r1
 80191e0:	3304      	adds	r3, #4
 80191e2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80191e4:	429a      	cmp	r2, r3
 80191e6:	d108      	bne.n	80191fa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80191e8:	4b31      	ldr	r3, [pc, #196]	@ (80192b0 <etharp_output+0x1fc>)
 80191ea:	781b      	ldrb	r3, [r3, #0]
 80191ec:	461a      	mov	r2, r3
 80191ee:	68b9      	ldr	r1, [r7, #8]
 80191f0:	68f8      	ldr	r0, [r7, #12]
 80191f2:	f7ff fec5 	bl	8018f80 <etharp_output_to_arp_index>
 80191f6:	4603      	mov	r3, r0
 80191f8:	e04a      	b.n	8019290 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80191fa:	2300      	movs	r3, #0
 80191fc:	75fb      	strb	r3, [r7, #23]
 80191fe:	e031      	b.n	8019264 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019200:	7dfa      	ldrb	r2, [r7, #23]
 8019202:	492c      	ldr	r1, [pc, #176]	@ (80192b4 <etharp_output+0x200>)
 8019204:	4613      	mov	r3, r2
 8019206:	005b      	lsls	r3, r3, #1
 8019208:	4413      	add	r3, r2
 801920a:	00db      	lsls	r3, r3, #3
 801920c:	440b      	add	r3, r1
 801920e:	3314      	adds	r3, #20
 8019210:	781b      	ldrb	r3, [r3, #0]
 8019212:	2b01      	cmp	r3, #1
 8019214:	d923      	bls.n	801925e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8019216:	7dfa      	ldrb	r2, [r7, #23]
 8019218:	4926      	ldr	r1, [pc, #152]	@ (80192b4 <etharp_output+0x200>)
 801921a:	4613      	mov	r3, r2
 801921c:	005b      	lsls	r3, r3, #1
 801921e:	4413      	add	r3, r2
 8019220:	00db      	lsls	r3, r3, #3
 8019222:	440b      	add	r3, r1
 8019224:	3308      	adds	r3, #8
 8019226:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019228:	68fa      	ldr	r2, [r7, #12]
 801922a:	429a      	cmp	r2, r3
 801922c:	d117      	bne.n	801925e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801922e:	69bb      	ldr	r3, [r7, #24]
 8019230:	6819      	ldr	r1, [r3, #0]
 8019232:	7dfa      	ldrb	r2, [r7, #23]
 8019234:	481f      	ldr	r0, [pc, #124]	@ (80192b4 <etharp_output+0x200>)
 8019236:	4613      	mov	r3, r2
 8019238:	005b      	lsls	r3, r3, #1
 801923a:	4413      	add	r3, r2
 801923c:	00db      	lsls	r3, r3, #3
 801923e:	4403      	add	r3, r0
 8019240:	3304      	adds	r3, #4
 8019242:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8019244:	4299      	cmp	r1, r3
 8019246:	d10a      	bne.n	801925e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8019248:	4a19      	ldr	r2, [pc, #100]	@ (80192b0 <etharp_output+0x1fc>)
 801924a:	7dfb      	ldrb	r3, [r7, #23]
 801924c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801924e:	7dfb      	ldrb	r3, [r7, #23]
 8019250:	461a      	mov	r2, r3
 8019252:	68b9      	ldr	r1, [r7, #8]
 8019254:	68f8      	ldr	r0, [r7, #12]
 8019256:	f7ff fe93 	bl	8018f80 <etharp_output_to_arp_index>
 801925a:	4603      	mov	r3, r0
 801925c:	e018      	b.n	8019290 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801925e:	7dfb      	ldrb	r3, [r7, #23]
 8019260:	3301      	adds	r3, #1
 8019262:	75fb      	strb	r3, [r7, #23]
 8019264:	7dfb      	ldrb	r3, [r7, #23]
 8019266:	2b09      	cmp	r3, #9
 8019268:	d9ca      	bls.n	8019200 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801926a:	68ba      	ldr	r2, [r7, #8]
 801926c:	69b9      	ldr	r1, [r7, #24]
 801926e:	68f8      	ldr	r0, [r7, #12]
 8019270:	f000 f822 	bl	80192b8 <etharp_query>
 8019274:	4603      	mov	r3, r0
 8019276:	e00b      	b.n	8019290 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801927e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019282:	9300      	str	r3, [sp, #0]
 8019284:	69fb      	ldr	r3, [r7, #28]
 8019286:	68b9      	ldr	r1, [r7, #8]
 8019288:	68f8      	ldr	r0, [r7, #12]
 801928a:	f001 fd6b 	bl	801ad64 <ethernet_output>
 801928e:	4603      	mov	r3, r0
}
 8019290:	4618      	mov	r0, r3
 8019292:	3720      	adds	r7, #32
 8019294:	46bd      	mov	sp, r7
 8019296:	bd80      	pop	{r7, pc}
 8019298:	0801ebd8 	.word	0x0801ebd8
 801929c:	0801ed28 	.word	0x0801ed28
 80192a0:	0801ec50 	.word	0x0801ec50
 80192a4:	0801ed78 	.word	0x0801ed78
 80192a8:	0801ed18 	.word	0x0801ed18
 80192ac:	0801f418 	.word	0x0801f418
 80192b0:	240082dc 	.word	0x240082dc
 80192b4:	240081ec 	.word	0x240081ec

080192b8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80192b8:	b580      	push	{r7, lr}
 80192ba:	b08c      	sub	sp, #48	@ 0x30
 80192bc:	af02      	add	r7, sp, #8
 80192be:	60f8      	str	r0, [r7, #12]
 80192c0:	60b9      	str	r1, [r7, #8]
 80192c2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80192c4:	68fb      	ldr	r3, [r7, #12]
 80192c6:	3326      	adds	r3, #38	@ 0x26
 80192c8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80192ca:	23ff      	movs	r3, #255	@ 0xff
 80192cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80192d0:	2300      	movs	r3, #0
 80192d2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80192d4:	68bb      	ldr	r3, [r7, #8]
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	68f9      	ldr	r1, [r7, #12]
 80192da:	4618      	mov	r0, r3
 80192dc:	f000 fe34 	bl	8019f48 <ip4_addr_isbroadcast_u32>
 80192e0:	4603      	mov	r3, r0
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	d10c      	bne.n	8019300 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80192e6:	68bb      	ldr	r3, [r7, #8]
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80192ee:	2be0      	cmp	r3, #224	@ 0xe0
 80192f0:	d006      	beq.n	8019300 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80192f2:	68bb      	ldr	r3, [r7, #8]
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d003      	beq.n	8019300 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80192f8:	68bb      	ldr	r3, [r7, #8]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d102      	bne.n	8019306 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019300:	f06f 030f 	mvn.w	r3, #15
 8019304:	e101      	b.n	801950a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8019306:	68fa      	ldr	r2, [r7, #12]
 8019308:	2101      	movs	r1, #1
 801930a:	68b8      	ldr	r0, [r7, #8]
 801930c:	f7ff fb60 	bl	80189d0 <etharp_find_entry>
 8019310:	4603      	mov	r3, r0
 8019312:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019314:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019318:	2b00      	cmp	r3, #0
 801931a:	da02      	bge.n	8019322 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801931c:	8a7b      	ldrh	r3, [r7, #18]
 801931e:	b25b      	sxtb	r3, r3
 8019320:	e0f3      	b.n	801950a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8019322:	8a7b      	ldrh	r3, [r7, #18]
 8019324:	2b7e      	cmp	r3, #126	@ 0x7e
 8019326:	d906      	bls.n	8019336 <etharp_query+0x7e>
 8019328:	4b7a      	ldr	r3, [pc, #488]	@ (8019514 <etharp_query+0x25c>)
 801932a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801932e:	497a      	ldr	r1, [pc, #488]	@ (8019518 <etharp_query+0x260>)
 8019330:	487a      	ldr	r0, [pc, #488]	@ (801951c <etharp_query+0x264>)
 8019332:	f002 f88f 	bl	801b454 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8019336:	8a7b      	ldrh	r3, [r7, #18]
 8019338:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801933a:	7c7a      	ldrb	r2, [r7, #17]
 801933c:	4978      	ldr	r1, [pc, #480]	@ (8019520 <etharp_query+0x268>)
 801933e:	4613      	mov	r3, r2
 8019340:	005b      	lsls	r3, r3, #1
 8019342:	4413      	add	r3, r2
 8019344:	00db      	lsls	r3, r3, #3
 8019346:	440b      	add	r3, r1
 8019348:	3314      	adds	r3, #20
 801934a:	781b      	ldrb	r3, [r3, #0]
 801934c:	2b00      	cmp	r3, #0
 801934e:	d115      	bne.n	801937c <etharp_query+0xc4>
    is_new_entry = 1;
 8019350:	2301      	movs	r3, #1
 8019352:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019354:	7c7a      	ldrb	r2, [r7, #17]
 8019356:	4972      	ldr	r1, [pc, #456]	@ (8019520 <etharp_query+0x268>)
 8019358:	4613      	mov	r3, r2
 801935a:	005b      	lsls	r3, r3, #1
 801935c:	4413      	add	r3, r2
 801935e:	00db      	lsls	r3, r3, #3
 8019360:	440b      	add	r3, r1
 8019362:	3314      	adds	r3, #20
 8019364:	2201      	movs	r2, #1
 8019366:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019368:	7c7a      	ldrb	r2, [r7, #17]
 801936a:	496d      	ldr	r1, [pc, #436]	@ (8019520 <etharp_query+0x268>)
 801936c:	4613      	mov	r3, r2
 801936e:	005b      	lsls	r3, r3, #1
 8019370:	4413      	add	r3, r2
 8019372:	00db      	lsls	r3, r3, #3
 8019374:	440b      	add	r3, r1
 8019376:	3308      	adds	r3, #8
 8019378:	68fa      	ldr	r2, [r7, #12]
 801937a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801937c:	7c7a      	ldrb	r2, [r7, #17]
 801937e:	4968      	ldr	r1, [pc, #416]	@ (8019520 <etharp_query+0x268>)
 8019380:	4613      	mov	r3, r2
 8019382:	005b      	lsls	r3, r3, #1
 8019384:	4413      	add	r3, r2
 8019386:	00db      	lsls	r3, r3, #3
 8019388:	440b      	add	r3, r1
 801938a:	3314      	adds	r3, #20
 801938c:	781b      	ldrb	r3, [r3, #0]
 801938e:	2b01      	cmp	r3, #1
 8019390:	d011      	beq.n	80193b6 <etharp_query+0xfe>
 8019392:	7c7a      	ldrb	r2, [r7, #17]
 8019394:	4962      	ldr	r1, [pc, #392]	@ (8019520 <etharp_query+0x268>)
 8019396:	4613      	mov	r3, r2
 8019398:	005b      	lsls	r3, r3, #1
 801939a:	4413      	add	r3, r2
 801939c:	00db      	lsls	r3, r3, #3
 801939e:	440b      	add	r3, r1
 80193a0:	3314      	adds	r3, #20
 80193a2:	781b      	ldrb	r3, [r3, #0]
 80193a4:	2b01      	cmp	r3, #1
 80193a6:	d806      	bhi.n	80193b6 <etharp_query+0xfe>
 80193a8:	4b5a      	ldr	r3, [pc, #360]	@ (8019514 <etharp_query+0x25c>)
 80193aa:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80193ae:	495d      	ldr	r1, [pc, #372]	@ (8019524 <etharp_query+0x26c>)
 80193b0:	485a      	ldr	r0, [pc, #360]	@ (801951c <etharp_query+0x264>)
 80193b2:	f002 f84f 	bl	801b454 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80193b6:	6a3b      	ldr	r3, [r7, #32]
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d102      	bne.n	80193c2 <etharp_query+0x10a>
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d10c      	bne.n	80193dc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80193c2:	68b9      	ldr	r1, [r7, #8]
 80193c4:	68f8      	ldr	r0, [r7, #12]
 80193c6:	f000 f963 	bl	8019690 <etharp_request>
 80193ca:	4603      	mov	r3, r0
 80193cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d102      	bne.n	80193dc <etharp_query+0x124>
      return result;
 80193d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80193da:	e096      	b.n	801950a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d106      	bne.n	80193f0 <etharp_query+0x138>
 80193e2:	4b4c      	ldr	r3, [pc, #304]	@ (8019514 <etharp_query+0x25c>)
 80193e4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80193e8:	494f      	ldr	r1, [pc, #316]	@ (8019528 <etharp_query+0x270>)
 80193ea:	484c      	ldr	r0, [pc, #304]	@ (801951c <etharp_query+0x264>)
 80193ec:	f002 f832 	bl	801b454 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80193f0:	7c7a      	ldrb	r2, [r7, #17]
 80193f2:	494b      	ldr	r1, [pc, #300]	@ (8019520 <etharp_query+0x268>)
 80193f4:	4613      	mov	r3, r2
 80193f6:	005b      	lsls	r3, r3, #1
 80193f8:	4413      	add	r3, r2
 80193fa:	00db      	lsls	r3, r3, #3
 80193fc:	440b      	add	r3, r1
 80193fe:	3314      	adds	r3, #20
 8019400:	781b      	ldrb	r3, [r3, #0]
 8019402:	2b01      	cmp	r3, #1
 8019404:	d917      	bls.n	8019436 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8019406:	4a49      	ldr	r2, [pc, #292]	@ (801952c <etharp_query+0x274>)
 8019408:	7c7b      	ldrb	r3, [r7, #17]
 801940a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801940c:	7c7a      	ldrb	r2, [r7, #17]
 801940e:	4613      	mov	r3, r2
 8019410:	005b      	lsls	r3, r3, #1
 8019412:	4413      	add	r3, r2
 8019414:	00db      	lsls	r3, r3, #3
 8019416:	3308      	adds	r3, #8
 8019418:	4a41      	ldr	r2, [pc, #260]	@ (8019520 <etharp_query+0x268>)
 801941a:	4413      	add	r3, r2
 801941c:	3304      	adds	r3, #4
 801941e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019422:	9200      	str	r2, [sp, #0]
 8019424:	697a      	ldr	r2, [r7, #20]
 8019426:	6879      	ldr	r1, [r7, #4]
 8019428:	68f8      	ldr	r0, [r7, #12]
 801942a:	f001 fc9b 	bl	801ad64 <ethernet_output>
 801942e:	4603      	mov	r3, r0
 8019430:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019434:	e067      	b.n	8019506 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019436:	7c7a      	ldrb	r2, [r7, #17]
 8019438:	4939      	ldr	r1, [pc, #228]	@ (8019520 <etharp_query+0x268>)
 801943a:	4613      	mov	r3, r2
 801943c:	005b      	lsls	r3, r3, #1
 801943e:	4413      	add	r3, r2
 8019440:	00db      	lsls	r3, r3, #3
 8019442:	440b      	add	r3, r1
 8019444:	3314      	adds	r3, #20
 8019446:	781b      	ldrb	r3, [r3, #0]
 8019448:	2b01      	cmp	r3, #1
 801944a:	d15c      	bne.n	8019506 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801944c:	2300      	movs	r3, #0
 801944e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019454:	e01c      	b.n	8019490 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019456:	69fb      	ldr	r3, [r7, #28]
 8019458:	895a      	ldrh	r2, [r3, #10]
 801945a:	69fb      	ldr	r3, [r7, #28]
 801945c:	891b      	ldrh	r3, [r3, #8]
 801945e:	429a      	cmp	r2, r3
 8019460:	d10a      	bne.n	8019478 <etharp_query+0x1c0>
 8019462:	69fb      	ldr	r3, [r7, #28]
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	2b00      	cmp	r3, #0
 8019468:	d006      	beq.n	8019478 <etharp_query+0x1c0>
 801946a:	4b2a      	ldr	r3, [pc, #168]	@ (8019514 <etharp_query+0x25c>)
 801946c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8019470:	492f      	ldr	r1, [pc, #188]	@ (8019530 <etharp_query+0x278>)
 8019472:	482a      	ldr	r0, [pc, #168]	@ (801951c <etharp_query+0x264>)
 8019474:	f001 ffee 	bl	801b454 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019478:	69fb      	ldr	r3, [r7, #28]
 801947a:	7b1b      	ldrb	r3, [r3, #12]
 801947c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019480:	2b00      	cmp	r3, #0
 8019482:	d002      	beq.n	801948a <etharp_query+0x1d2>
        copy_needed = 1;
 8019484:	2301      	movs	r3, #1
 8019486:	61bb      	str	r3, [r7, #24]
        break;
 8019488:	e005      	b.n	8019496 <etharp_query+0x1de>
      }
      p = p->next;
 801948a:	69fb      	ldr	r3, [r7, #28]
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019490:	69fb      	ldr	r3, [r7, #28]
 8019492:	2b00      	cmp	r3, #0
 8019494:	d1df      	bne.n	8019456 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8019496:	69bb      	ldr	r3, [r7, #24]
 8019498:	2b00      	cmp	r3, #0
 801949a:	d007      	beq.n	80194ac <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801949c:	687a      	ldr	r2, [r7, #4]
 801949e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80194a2:	200e      	movs	r0, #14
 80194a4:	f7f9 fcfc 	bl	8012ea0 <pbuf_clone>
 80194a8:	61f8      	str	r0, [r7, #28]
 80194aa:	e004      	b.n	80194b6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80194b0:	69f8      	ldr	r0, [r7, #28]
 80194b2:	f7f9 fb33 	bl	8012b1c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80194b6:	69fb      	ldr	r3, [r7, #28]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d021      	beq.n	8019500 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80194bc:	7c7a      	ldrb	r2, [r7, #17]
 80194be:	4918      	ldr	r1, [pc, #96]	@ (8019520 <etharp_query+0x268>)
 80194c0:	4613      	mov	r3, r2
 80194c2:	005b      	lsls	r3, r3, #1
 80194c4:	4413      	add	r3, r2
 80194c6:	00db      	lsls	r3, r3, #3
 80194c8:	440b      	add	r3, r1
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d00a      	beq.n	80194e6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80194d0:	7c7a      	ldrb	r2, [r7, #17]
 80194d2:	4913      	ldr	r1, [pc, #76]	@ (8019520 <etharp_query+0x268>)
 80194d4:	4613      	mov	r3, r2
 80194d6:	005b      	lsls	r3, r3, #1
 80194d8:	4413      	add	r3, r2
 80194da:	00db      	lsls	r3, r3, #3
 80194dc:	440b      	add	r3, r1
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	4618      	mov	r0, r3
 80194e2:	f7f9 fa75 	bl	80129d0 <pbuf_free>
      }
      arp_table[i].q = p;
 80194e6:	7c7a      	ldrb	r2, [r7, #17]
 80194e8:	490d      	ldr	r1, [pc, #52]	@ (8019520 <etharp_query+0x268>)
 80194ea:	4613      	mov	r3, r2
 80194ec:	005b      	lsls	r3, r3, #1
 80194ee:	4413      	add	r3, r2
 80194f0:	00db      	lsls	r3, r3, #3
 80194f2:	440b      	add	r3, r1
 80194f4:	69fa      	ldr	r2, [r7, #28]
 80194f6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80194f8:	2300      	movs	r3, #0
 80194fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80194fe:	e002      	b.n	8019506 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019500:	23ff      	movs	r3, #255	@ 0xff
 8019502:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8019506:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801950a:	4618      	mov	r0, r3
 801950c:	3728      	adds	r7, #40	@ 0x28
 801950e:	46bd      	mov	sp, r7
 8019510:	bd80      	pop	{r7, pc}
 8019512:	bf00      	nop
 8019514:	0801ebd8 	.word	0x0801ebd8
 8019518:	0801ed84 	.word	0x0801ed84
 801951c:	0801ec50 	.word	0x0801ec50
 8019520:	240081ec 	.word	0x240081ec
 8019524:	0801ed94 	.word	0x0801ed94
 8019528:	0801ed78 	.word	0x0801ed78
 801952c:	240082dc 	.word	0x240082dc
 8019530:	0801edbc 	.word	0x0801edbc

08019534 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019534:	b580      	push	{r7, lr}
 8019536:	b08a      	sub	sp, #40	@ 0x28
 8019538:	af02      	add	r7, sp, #8
 801953a:	60f8      	str	r0, [r7, #12]
 801953c:	60b9      	str	r1, [r7, #8]
 801953e:	607a      	str	r2, [r7, #4]
 8019540:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019542:	2300      	movs	r3, #0
 8019544:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	2b00      	cmp	r3, #0
 801954a:	d106      	bne.n	801955a <etharp_raw+0x26>
 801954c:	4b3a      	ldr	r3, [pc, #232]	@ (8019638 <etharp_raw+0x104>)
 801954e:	f240 4257 	movw	r2, #1111	@ 0x457
 8019552:	493a      	ldr	r1, [pc, #232]	@ (801963c <etharp_raw+0x108>)
 8019554:	483a      	ldr	r0, [pc, #232]	@ (8019640 <etharp_raw+0x10c>)
 8019556:	f001 ff7d 	bl	801b454 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801955a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801955e:	211c      	movs	r1, #28
 8019560:	200e      	movs	r0, #14
 8019562:	f7f8 ff51 	bl	8012408 <pbuf_alloc>
 8019566:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019568:	69bb      	ldr	r3, [r7, #24]
 801956a:	2b00      	cmp	r3, #0
 801956c:	d102      	bne.n	8019574 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801956e:	f04f 33ff 	mov.w	r3, #4294967295
 8019572:	e05d      	b.n	8019630 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019574:	69bb      	ldr	r3, [r7, #24]
 8019576:	895b      	ldrh	r3, [r3, #10]
 8019578:	2b1b      	cmp	r3, #27
 801957a:	d806      	bhi.n	801958a <etharp_raw+0x56>
 801957c:	4b2e      	ldr	r3, [pc, #184]	@ (8019638 <etharp_raw+0x104>)
 801957e:	f240 4262 	movw	r2, #1122	@ 0x462
 8019582:	4930      	ldr	r1, [pc, #192]	@ (8019644 <etharp_raw+0x110>)
 8019584:	482e      	ldr	r0, [pc, #184]	@ (8019640 <etharp_raw+0x10c>)
 8019586:	f001 ff65 	bl	801b454 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801958a:	69bb      	ldr	r3, [r7, #24]
 801958c:	685b      	ldr	r3, [r3, #4]
 801958e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019590:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019592:	4618      	mov	r0, r3
 8019594:	f7f7 fd62 	bl	801105c <lwip_htons>
 8019598:	4603      	mov	r3, r0
 801959a:	461a      	mov	r2, r3
 801959c:	697b      	ldr	r3, [r7, #20]
 801959e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80195a0:	68fb      	ldr	r3, [r7, #12]
 80195a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80195a6:	2b06      	cmp	r3, #6
 80195a8:	d006      	beq.n	80195b8 <etharp_raw+0x84>
 80195aa:	4b23      	ldr	r3, [pc, #140]	@ (8019638 <etharp_raw+0x104>)
 80195ac:	f240 4269 	movw	r2, #1129	@ 0x469
 80195b0:	4925      	ldr	r1, [pc, #148]	@ (8019648 <etharp_raw+0x114>)
 80195b2:	4823      	ldr	r0, [pc, #140]	@ (8019640 <etharp_raw+0x10c>)
 80195b4:	f001 ff4e 	bl	801b454 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80195b8:	697b      	ldr	r3, [r7, #20]
 80195ba:	3308      	adds	r3, #8
 80195bc:	2206      	movs	r2, #6
 80195be:	6839      	ldr	r1, [r7, #0]
 80195c0:	4618      	mov	r0, r3
 80195c2:	f002 f92a 	bl	801b81a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80195c6:	697b      	ldr	r3, [r7, #20]
 80195c8:	3312      	adds	r3, #18
 80195ca:	2206      	movs	r2, #6
 80195cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80195ce:	4618      	mov	r0, r3
 80195d0:	f002 f923 	bl	801b81a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80195d4:	697b      	ldr	r3, [r7, #20]
 80195d6:	330e      	adds	r3, #14
 80195d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80195da:	6812      	ldr	r2, [r2, #0]
 80195dc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80195de:	697b      	ldr	r3, [r7, #20]
 80195e0:	3318      	adds	r3, #24
 80195e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80195e4:	6812      	ldr	r2, [r2, #0]
 80195e6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80195e8:	697b      	ldr	r3, [r7, #20]
 80195ea:	2200      	movs	r2, #0
 80195ec:	701a      	strb	r2, [r3, #0]
 80195ee:	2200      	movs	r2, #0
 80195f0:	f042 0201 	orr.w	r2, r2, #1
 80195f4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80195f6:	697b      	ldr	r3, [r7, #20]
 80195f8:	2200      	movs	r2, #0
 80195fa:	f042 0208 	orr.w	r2, r2, #8
 80195fe:	709a      	strb	r2, [r3, #2]
 8019600:	2200      	movs	r2, #0
 8019602:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019604:	697b      	ldr	r3, [r7, #20]
 8019606:	2206      	movs	r2, #6
 8019608:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801960a:	697b      	ldr	r3, [r7, #20]
 801960c:	2204      	movs	r2, #4
 801960e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019610:	f640 0306 	movw	r3, #2054	@ 0x806
 8019614:	9300      	str	r3, [sp, #0]
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	68ba      	ldr	r2, [r7, #8]
 801961a:	69b9      	ldr	r1, [r7, #24]
 801961c:	68f8      	ldr	r0, [r7, #12]
 801961e:	f001 fba1 	bl	801ad64 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019622:	69b8      	ldr	r0, [r7, #24]
 8019624:	f7f9 f9d4 	bl	80129d0 <pbuf_free>
  p = NULL;
 8019628:	2300      	movs	r3, #0
 801962a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801962c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019630:	4618      	mov	r0, r3
 8019632:	3720      	adds	r7, #32
 8019634:	46bd      	mov	sp, r7
 8019636:	bd80      	pop	{r7, pc}
 8019638:	0801ebd8 	.word	0x0801ebd8
 801963c:	0801ed28 	.word	0x0801ed28
 8019640:	0801ec50 	.word	0x0801ec50
 8019644:	0801edd8 	.word	0x0801edd8
 8019648:	0801ee0c 	.word	0x0801ee0c

0801964c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801964c:	b580      	push	{r7, lr}
 801964e:	b088      	sub	sp, #32
 8019650:	af04      	add	r7, sp, #16
 8019652:	60f8      	str	r0, [r7, #12]
 8019654:	60b9      	str	r1, [r7, #8]
 8019656:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8019664:	68fb      	ldr	r3, [r7, #12]
 8019666:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019668:	2201      	movs	r2, #1
 801966a:	9203      	str	r2, [sp, #12]
 801966c:	68ba      	ldr	r2, [r7, #8]
 801966e:	9202      	str	r2, [sp, #8]
 8019670:	4a06      	ldr	r2, [pc, #24]	@ (801968c <etharp_request_dst+0x40>)
 8019672:	9201      	str	r2, [sp, #4]
 8019674:	9300      	str	r3, [sp, #0]
 8019676:	4603      	mov	r3, r0
 8019678:	687a      	ldr	r2, [r7, #4]
 801967a:	68f8      	ldr	r0, [r7, #12]
 801967c:	f7ff ff5a 	bl	8019534 <etharp_raw>
 8019680:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019682:	4618      	mov	r0, r3
 8019684:	3710      	adds	r7, #16
 8019686:	46bd      	mov	sp, r7
 8019688:	bd80      	pop	{r7, pc}
 801968a:	bf00      	nop
 801968c:	0801f420 	.word	0x0801f420

08019690 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019690:	b580      	push	{r7, lr}
 8019692:	b082      	sub	sp, #8
 8019694:	af00      	add	r7, sp, #0
 8019696:	6078      	str	r0, [r7, #4]
 8019698:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801969a:	4a05      	ldr	r2, [pc, #20]	@ (80196b0 <etharp_request+0x20>)
 801969c:	6839      	ldr	r1, [r7, #0]
 801969e:	6878      	ldr	r0, [r7, #4]
 80196a0:	f7ff ffd4 	bl	801964c <etharp_request_dst>
 80196a4:	4603      	mov	r3, r0
}
 80196a6:	4618      	mov	r0, r3
 80196a8:	3708      	adds	r7, #8
 80196aa:	46bd      	mov	sp, r7
 80196ac:	bd80      	pop	{r7, pc}
 80196ae:	bf00      	nop
 80196b0:	0801f418 	.word	0x0801f418

080196b4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80196b4:	b580      	push	{r7, lr}
 80196b6:	b08e      	sub	sp, #56	@ 0x38
 80196b8:	af04      	add	r7, sp, #16
 80196ba:	6078      	str	r0, [r7, #4]
 80196bc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80196be:	4b87      	ldr	r3, [pc, #540]	@ (80198dc <icmp_input+0x228>)
 80196c0:	689b      	ldr	r3, [r3, #8]
 80196c2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80196c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196c6:	781b      	ldrb	r3, [r3, #0]
 80196c8:	f003 030f 	and.w	r3, r3, #15
 80196cc:	b2db      	uxtb	r3, r3
 80196ce:	009b      	lsls	r3, r3, #2
 80196d0:	b2db      	uxtb	r3, r3
 80196d2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80196d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80196d6:	2b13      	cmp	r3, #19
 80196d8:	f240 80e8 	bls.w	80198ac <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	895b      	ldrh	r3, [r3, #10]
 80196e0:	2b03      	cmp	r3, #3
 80196e2:	f240 80e5 	bls.w	80198b0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	685b      	ldr	r3, [r3, #4]
 80196ea:	781b      	ldrb	r3, [r3, #0]
 80196ec:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80196f0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	f000 80d2 	beq.w	801989e <icmp_input+0x1ea>
 80196fa:	2b08      	cmp	r3, #8
 80196fc:	f040 80d2 	bne.w	80198a4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019700:	4b77      	ldr	r3, [pc, #476]	@ (80198e0 <icmp_input+0x22c>)
 8019702:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019704:	4b75      	ldr	r3, [pc, #468]	@ (80198dc <icmp_input+0x228>)
 8019706:	695b      	ldr	r3, [r3, #20]
 8019708:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801970c:	2be0      	cmp	r3, #224	@ 0xe0
 801970e:	f000 80d6 	beq.w	80198be <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019712:	4b72      	ldr	r3, [pc, #456]	@ (80198dc <icmp_input+0x228>)
 8019714:	695b      	ldr	r3, [r3, #20]
 8019716:	4a71      	ldr	r2, [pc, #452]	@ (80198dc <icmp_input+0x228>)
 8019718:	6812      	ldr	r2, [r2, #0]
 801971a:	4611      	mov	r1, r2
 801971c:	4618      	mov	r0, r3
 801971e:	f000 fc13 	bl	8019f48 <ip4_addr_isbroadcast_u32>
 8019722:	4603      	mov	r3, r0
 8019724:	2b00      	cmp	r3, #0
 8019726:	f040 80cc 	bne.w	80198c2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	891b      	ldrh	r3, [r3, #8]
 801972e:	2b07      	cmp	r3, #7
 8019730:	f240 80c0 	bls.w	80198b4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8019734:	6878      	ldr	r0, [r7, #4]
 8019736:	f7f7 fd2f 	bl	8011198 <inet_chksum_pbuf>
 801973a:	4603      	mov	r3, r0
 801973c:	2b00      	cmp	r3, #0
 801973e:	d003      	beq.n	8019748 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8019740:	6878      	ldr	r0, [r7, #4]
 8019742:	f7f9 f945 	bl	80129d0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8019746:	e0c5      	b.n	80198d4 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019748:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801974a:	330e      	adds	r3, #14
 801974c:	4619      	mov	r1, r3
 801974e:	6878      	ldr	r0, [r7, #4]
 8019750:	f7f9 f8a8 	bl	80128a4 <pbuf_add_header>
 8019754:	4603      	mov	r3, r0
 8019756:	2b00      	cmp	r3, #0
 8019758:	d04b      	beq.n	80197f2 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	891a      	ldrh	r2, [r3, #8]
 801975e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019760:	4413      	add	r3, r2
 8019762:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	891b      	ldrh	r3, [r3, #8]
 8019768:	8b7a      	ldrh	r2, [r7, #26]
 801976a:	429a      	cmp	r2, r3
 801976c:	f0c0 80ab 	bcc.w	80198c6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019770:	8b7b      	ldrh	r3, [r7, #26]
 8019772:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019776:	4619      	mov	r1, r3
 8019778:	200e      	movs	r0, #14
 801977a:	f7f8 fe45 	bl	8012408 <pbuf_alloc>
 801977e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019780:	697b      	ldr	r3, [r7, #20]
 8019782:	2b00      	cmp	r3, #0
 8019784:	f000 80a1 	beq.w	80198ca <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019788:	697b      	ldr	r3, [r7, #20]
 801978a:	895b      	ldrh	r3, [r3, #10]
 801978c:	461a      	mov	r2, r3
 801978e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019790:	3308      	adds	r3, #8
 8019792:	429a      	cmp	r2, r3
 8019794:	d203      	bcs.n	801979e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019796:	6978      	ldr	r0, [r7, #20]
 8019798:	f7f9 f91a 	bl	80129d0 <pbuf_free>
          goto icmperr;
 801979c:	e096      	b.n	80198cc <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801979e:	697b      	ldr	r3, [r7, #20]
 80197a0:	685b      	ldr	r3, [r3, #4]
 80197a2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80197a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80197a6:	4618      	mov	r0, r3
 80197a8:	f002 f837 	bl	801b81a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80197ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80197ae:	4619      	mov	r1, r3
 80197b0:	6978      	ldr	r0, [r7, #20]
 80197b2:	f7f9 f887 	bl	80128c4 <pbuf_remove_header>
 80197b6:	4603      	mov	r3, r0
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d009      	beq.n	80197d0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80197bc:	4b49      	ldr	r3, [pc, #292]	@ (80198e4 <icmp_input+0x230>)
 80197be:	22b6      	movs	r2, #182	@ 0xb6
 80197c0:	4949      	ldr	r1, [pc, #292]	@ (80198e8 <icmp_input+0x234>)
 80197c2:	484a      	ldr	r0, [pc, #296]	@ (80198ec <icmp_input+0x238>)
 80197c4:	f001 fe46 	bl	801b454 <iprintf>
          pbuf_free(r);
 80197c8:	6978      	ldr	r0, [r7, #20]
 80197ca:	f7f9 f901 	bl	80129d0 <pbuf_free>
          goto icmperr;
 80197ce:	e07d      	b.n	80198cc <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80197d0:	6879      	ldr	r1, [r7, #4]
 80197d2:	6978      	ldr	r0, [r7, #20]
 80197d4:	f7f9 fa20 	bl	8012c18 <pbuf_copy>
 80197d8:	4603      	mov	r3, r0
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d003      	beq.n	80197e6 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80197de:	6978      	ldr	r0, [r7, #20]
 80197e0:	f7f9 f8f6 	bl	80129d0 <pbuf_free>
          goto icmperr;
 80197e4:	e072      	b.n	80198cc <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80197e6:	6878      	ldr	r0, [r7, #4]
 80197e8:	f7f9 f8f2 	bl	80129d0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80197ec:	697b      	ldr	r3, [r7, #20]
 80197ee:	607b      	str	r3, [r7, #4]
 80197f0:	e00f      	b.n	8019812 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80197f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80197f4:	330e      	adds	r3, #14
 80197f6:	4619      	mov	r1, r3
 80197f8:	6878      	ldr	r0, [r7, #4]
 80197fa:	f7f9 f863 	bl	80128c4 <pbuf_remove_header>
 80197fe:	4603      	mov	r3, r0
 8019800:	2b00      	cmp	r3, #0
 8019802:	d006      	beq.n	8019812 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019804:	4b37      	ldr	r3, [pc, #220]	@ (80198e4 <icmp_input+0x230>)
 8019806:	22c7      	movs	r2, #199	@ 0xc7
 8019808:	4939      	ldr	r1, [pc, #228]	@ (80198f0 <icmp_input+0x23c>)
 801980a:	4838      	ldr	r0, [pc, #224]	@ (80198ec <icmp_input+0x238>)
 801980c:	f001 fe22 	bl	801b454 <iprintf>
          goto icmperr;
 8019810:	e05c      	b.n	80198cc <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	685b      	ldr	r3, [r3, #4]
 8019816:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019818:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801981a:	4619      	mov	r1, r3
 801981c:	6878      	ldr	r0, [r7, #4]
 801981e:	f7f9 f841 	bl	80128a4 <pbuf_add_header>
 8019822:	4603      	mov	r3, r0
 8019824:	2b00      	cmp	r3, #0
 8019826:	d13c      	bne.n	80198a2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	685b      	ldr	r3, [r3, #4]
 801982c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801982e:	69fb      	ldr	r3, [r7, #28]
 8019830:	681a      	ldr	r2, [r3, #0]
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019836:	4b29      	ldr	r3, [pc, #164]	@ (80198dc <icmp_input+0x228>)
 8019838:	691a      	ldr	r2, [r3, #16]
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801983e:	693b      	ldr	r3, [r7, #16]
 8019840:	2200      	movs	r2, #0
 8019842:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8019844:	693b      	ldr	r3, [r7, #16]
 8019846:	885b      	ldrh	r3, [r3, #2]
 8019848:	b29b      	uxth	r3, r3
 801984a:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801984e:	4293      	cmp	r3, r2
 8019850:	d907      	bls.n	8019862 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8019852:	693b      	ldr	r3, [r7, #16]
 8019854:	885b      	ldrh	r3, [r3, #2]
 8019856:	b29b      	uxth	r3, r3
 8019858:	3309      	adds	r3, #9
 801985a:	b29a      	uxth	r2, r3
 801985c:	693b      	ldr	r3, [r7, #16]
 801985e:	805a      	strh	r2, [r3, #2]
 8019860:	e006      	b.n	8019870 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8019862:	693b      	ldr	r3, [r7, #16]
 8019864:	885b      	ldrh	r3, [r3, #2]
 8019866:	b29b      	uxth	r3, r3
 8019868:	3308      	adds	r3, #8
 801986a:	b29a      	uxth	r2, r3
 801986c:	693b      	ldr	r3, [r7, #16]
 801986e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	22ff      	movs	r2, #255	@ 0xff
 8019874:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019876:	68fb      	ldr	r3, [r7, #12]
 8019878:	2200      	movs	r2, #0
 801987a:	729a      	strb	r2, [r3, #10]
 801987c:	2200      	movs	r2, #0
 801987e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019880:	683b      	ldr	r3, [r7, #0]
 8019882:	9302      	str	r3, [sp, #8]
 8019884:	2301      	movs	r3, #1
 8019886:	9301      	str	r3, [sp, #4]
 8019888:	2300      	movs	r3, #0
 801988a:	9300      	str	r3, [sp, #0]
 801988c:	23ff      	movs	r3, #255	@ 0xff
 801988e:	2200      	movs	r2, #0
 8019890:	69f9      	ldr	r1, [r7, #28]
 8019892:	6878      	ldr	r0, [r7, #4]
 8019894:	f000 fa80 	bl	8019d98 <ip4_output_if>
 8019898:	4603      	mov	r3, r0
 801989a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801989c:	e001      	b.n	80198a2 <icmp_input+0x1ee>
      break;
 801989e:	bf00      	nop
 80198a0:	e000      	b.n	80198a4 <icmp_input+0x1f0>
      break;
 80198a2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80198a4:	6878      	ldr	r0, [r7, #4]
 80198a6:	f7f9 f893 	bl	80129d0 <pbuf_free>
  return;
 80198aa:	e013      	b.n	80198d4 <icmp_input+0x220>
    goto lenerr;
 80198ac:	bf00      	nop
 80198ae:	e002      	b.n	80198b6 <icmp_input+0x202>
    goto lenerr;
 80198b0:	bf00      	nop
 80198b2:	e000      	b.n	80198b6 <icmp_input+0x202>
        goto lenerr;
 80198b4:	bf00      	nop
lenerr:
  pbuf_free(p);
 80198b6:	6878      	ldr	r0, [r7, #4]
 80198b8:	f7f9 f88a 	bl	80129d0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80198bc:	e00a      	b.n	80198d4 <icmp_input+0x220>
        goto icmperr;
 80198be:	bf00      	nop
 80198c0:	e004      	b.n	80198cc <icmp_input+0x218>
        goto icmperr;
 80198c2:	bf00      	nop
 80198c4:	e002      	b.n	80198cc <icmp_input+0x218>
          goto icmperr;
 80198c6:	bf00      	nop
 80198c8:	e000      	b.n	80198cc <icmp_input+0x218>
          goto icmperr;
 80198ca:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80198cc:	6878      	ldr	r0, [r7, #4]
 80198ce:	f7f9 f87f 	bl	80129d0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80198d2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80198d4:	3728      	adds	r7, #40	@ 0x28
 80198d6:	46bd      	mov	sp, r7
 80198d8:	bd80      	pop	{r7, pc}
 80198da:	bf00      	nop
 80198dc:	2400508c 	.word	0x2400508c
 80198e0:	240050a0 	.word	0x240050a0
 80198e4:	0801ee50 	.word	0x0801ee50
 80198e8:	0801ee88 	.word	0x0801ee88
 80198ec:	0801eec0 	.word	0x0801eec0
 80198f0:	0801eee8 	.word	0x0801eee8

080198f4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80198f4:	b580      	push	{r7, lr}
 80198f6:	b082      	sub	sp, #8
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	6078      	str	r0, [r7, #4]
 80198fc:	460b      	mov	r3, r1
 80198fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019900:	78fb      	ldrb	r3, [r7, #3]
 8019902:	461a      	mov	r2, r3
 8019904:	2103      	movs	r1, #3
 8019906:	6878      	ldr	r0, [r7, #4]
 8019908:	f000 f814 	bl	8019934 <icmp_send_response>
}
 801990c:	bf00      	nop
 801990e:	3708      	adds	r7, #8
 8019910:	46bd      	mov	sp, r7
 8019912:	bd80      	pop	{r7, pc}

08019914 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019914:	b580      	push	{r7, lr}
 8019916:	b082      	sub	sp, #8
 8019918:	af00      	add	r7, sp, #0
 801991a:	6078      	str	r0, [r7, #4]
 801991c:	460b      	mov	r3, r1
 801991e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019920:	78fb      	ldrb	r3, [r7, #3]
 8019922:	461a      	mov	r2, r3
 8019924:	210b      	movs	r1, #11
 8019926:	6878      	ldr	r0, [r7, #4]
 8019928:	f000 f804 	bl	8019934 <icmp_send_response>
}
 801992c:	bf00      	nop
 801992e:	3708      	adds	r7, #8
 8019930:	46bd      	mov	sp, r7
 8019932:	bd80      	pop	{r7, pc}

08019934 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019934:	b580      	push	{r7, lr}
 8019936:	b08c      	sub	sp, #48	@ 0x30
 8019938:	af04      	add	r7, sp, #16
 801993a:	6078      	str	r0, [r7, #4]
 801993c:	460b      	mov	r3, r1
 801993e:	70fb      	strb	r3, [r7, #3]
 8019940:	4613      	mov	r3, r2
 8019942:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019944:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019948:	2124      	movs	r1, #36	@ 0x24
 801994a:	2022      	movs	r0, #34	@ 0x22
 801994c:	f7f8 fd5c 	bl	8012408 <pbuf_alloc>
 8019950:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019952:	69fb      	ldr	r3, [r7, #28]
 8019954:	2b00      	cmp	r3, #0
 8019956:	d056      	beq.n	8019a06 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019958:	69fb      	ldr	r3, [r7, #28]
 801995a:	895b      	ldrh	r3, [r3, #10]
 801995c:	2b23      	cmp	r3, #35	@ 0x23
 801995e:	d806      	bhi.n	801996e <icmp_send_response+0x3a>
 8019960:	4b2b      	ldr	r3, [pc, #172]	@ (8019a10 <icmp_send_response+0xdc>)
 8019962:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8019966:	492b      	ldr	r1, [pc, #172]	@ (8019a14 <icmp_send_response+0xe0>)
 8019968:	482b      	ldr	r0, [pc, #172]	@ (8019a18 <icmp_send_response+0xe4>)
 801996a:	f001 fd73 	bl	801b454 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	685b      	ldr	r3, [r3, #4]
 8019972:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019974:	69fb      	ldr	r3, [r7, #28]
 8019976:	685b      	ldr	r3, [r3, #4]
 8019978:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801997a:	697b      	ldr	r3, [r7, #20]
 801997c:	78fa      	ldrb	r2, [r7, #3]
 801997e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019980:	697b      	ldr	r3, [r7, #20]
 8019982:	78ba      	ldrb	r2, [r7, #2]
 8019984:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019986:	697b      	ldr	r3, [r7, #20]
 8019988:	2200      	movs	r2, #0
 801998a:	711a      	strb	r2, [r3, #4]
 801998c:	2200      	movs	r2, #0
 801998e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019990:	697b      	ldr	r3, [r7, #20]
 8019992:	2200      	movs	r2, #0
 8019994:	719a      	strb	r2, [r3, #6]
 8019996:	2200      	movs	r2, #0
 8019998:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801999a:	69fb      	ldr	r3, [r7, #28]
 801999c:	685b      	ldr	r3, [r3, #4]
 801999e:	f103 0008 	add.w	r0, r3, #8
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	685b      	ldr	r3, [r3, #4]
 80199a6:	221c      	movs	r2, #28
 80199a8:	4619      	mov	r1, r3
 80199aa:	f001 ff36 	bl	801b81a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80199ae:	69bb      	ldr	r3, [r7, #24]
 80199b0:	68db      	ldr	r3, [r3, #12]
 80199b2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80199b4:	f107 030c 	add.w	r3, r7, #12
 80199b8:	4618      	mov	r0, r3
 80199ba:	f000 f82f 	bl	8019a1c <ip4_route>
 80199be:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80199c0:	693b      	ldr	r3, [r7, #16]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d01b      	beq.n	80199fe <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80199c6:	697b      	ldr	r3, [r7, #20]
 80199c8:	2200      	movs	r2, #0
 80199ca:	709a      	strb	r2, [r3, #2]
 80199cc:	2200      	movs	r2, #0
 80199ce:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80199d0:	69fb      	ldr	r3, [r7, #28]
 80199d2:	895b      	ldrh	r3, [r3, #10]
 80199d4:	4619      	mov	r1, r3
 80199d6:	6978      	ldr	r0, [r7, #20]
 80199d8:	f7f7 fbcc 	bl	8011174 <inet_chksum>
 80199dc:	4603      	mov	r3, r0
 80199de:	461a      	mov	r2, r3
 80199e0:	697b      	ldr	r3, [r7, #20]
 80199e2:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80199e4:	f107 020c 	add.w	r2, r7, #12
 80199e8:	693b      	ldr	r3, [r7, #16]
 80199ea:	9302      	str	r3, [sp, #8]
 80199ec:	2301      	movs	r3, #1
 80199ee:	9301      	str	r3, [sp, #4]
 80199f0:	2300      	movs	r3, #0
 80199f2:	9300      	str	r3, [sp, #0]
 80199f4:	23ff      	movs	r3, #255	@ 0xff
 80199f6:	2100      	movs	r1, #0
 80199f8:	69f8      	ldr	r0, [r7, #28]
 80199fa:	f000 f9cd 	bl	8019d98 <ip4_output_if>
  }
  pbuf_free(q);
 80199fe:	69f8      	ldr	r0, [r7, #28]
 8019a00:	f7f8 ffe6 	bl	80129d0 <pbuf_free>
 8019a04:	e000      	b.n	8019a08 <icmp_send_response+0xd4>
    return;
 8019a06:	bf00      	nop
}
 8019a08:	3720      	adds	r7, #32
 8019a0a:	46bd      	mov	sp, r7
 8019a0c:	bd80      	pop	{r7, pc}
 8019a0e:	bf00      	nop
 8019a10:	0801ee50 	.word	0x0801ee50
 8019a14:	0801ef1c 	.word	0x0801ef1c
 8019a18:	0801eec0 	.word	0x0801eec0

08019a1c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019a1c:	b480      	push	{r7}
 8019a1e:	b085      	sub	sp, #20
 8019a20:	af00      	add	r7, sp, #0
 8019a22:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019a24:	4b33      	ldr	r3, [pc, #204]	@ (8019af4 <ip4_route+0xd8>)
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	60fb      	str	r3, [r7, #12]
 8019a2a:	e036      	b.n	8019a9a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019a32:	f003 0301 	and.w	r3, r3, #1
 8019a36:	b2db      	uxtb	r3, r3
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d02b      	beq.n	8019a94 <ip4_route+0x78>
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019a42:	089b      	lsrs	r3, r3, #2
 8019a44:	f003 0301 	and.w	r3, r3, #1
 8019a48:	b2db      	uxtb	r3, r3
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d022      	beq.n	8019a94 <ip4_route+0x78>
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	3304      	adds	r3, #4
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d01d      	beq.n	8019a94 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	681a      	ldr	r2, [r3, #0]
 8019a5c:	68fb      	ldr	r3, [r7, #12]
 8019a5e:	3304      	adds	r3, #4
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	405a      	eors	r2, r3
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	3308      	adds	r3, #8
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	4013      	ands	r3, r2
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d101      	bne.n	8019a74 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019a70:	68fb      	ldr	r3, [r7, #12]
 8019a72:	e038      	b.n	8019ae6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019a7a:	f003 0302 	and.w	r3, r3, #2
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d108      	bne.n	8019a94 <ip4_route+0x78>
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	681a      	ldr	r2, [r3, #0]
 8019a86:	68fb      	ldr	r3, [r7, #12]
 8019a88:	330c      	adds	r3, #12
 8019a8a:	681b      	ldr	r3, [r3, #0]
 8019a8c:	429a      	cmp	r2, r3
 8019a8e:	d101      	bne.n	8019a94 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	e028      	b.n	8019ae6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	681b      	ldr	r3, [r3, #0]
 8019a98:	60fb      	str	r3, [r7, #12]
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d1c5      	bne.n	8019a2c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019aa0:	4b15      	ldr	r3, [pc, #84]	@ (8019af8 <ip4_route+0xdc>)
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d01a      	beq.n	8019ade <ip4_route+0xc2>
 8019aa8:	4b13      	ldr	r3, [pc, #76]	@ (8019af8 <ip4_route+0xdc>)
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019ab0:	f003 0301 	and.w	r3, r3, #1
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d012      	beq.n	8019ade <ip4_route+0xc2>
 8019ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8019af8 <ip4_route+0xdc>)
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019ac0:	f003 0304 	and.w	r3, r3, #4
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d00a      	beq.n	8019ade <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8019af8 <ip4_route+0xdc>)
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	3304      	adds	r3, #4
 8019ace:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d004      	beq.n	8019ade <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	b2db      	uxtb	r3, r3
 8019ada:	2b7f      	cmp	r3, #127	@ 0x7f
 8019adc:	d101      	bne.n	8019ae2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019ade:	2300      	movs	r3, #0
 8019ae0:	e001      	b.n	8019ae6 <ip4_route+0xca>
  }

  return netif_default;
 8019ae2:	4b05      	ldr	r3, [pc, #20]	@ (8019af8 <ip4_route+0xdc>)
 8019ae4:	681b      	ldr	r3, [r3, #0]
}
 8019ae6:	4618      	mov	r0, r3
 8019ae8:	3714      	adds	r7, #20
 8019aea:	46bd      	mov	sp, r7
 8019aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019af0:	4770      	bx	lr
 8019af2:	bf00      	nop
 8019af4:	24008180 	.word	0x24008180
 8019af8:	24008184 	.word	0x24008184

08019afc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019afc:	b580      	push	{r7, lr}
 8019afe:	b082      	sub	sp, #8
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019b0a:	f003 0301 	and.w	r3, r3, #1
 8019b0e:	b2db      	uxtb	r3, r3
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d016      	beq.n	8019b42 <ip4_input_accept+0x46>
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	3304      	adds	r3, #4
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d011      	beq.n	8019b42 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8019b4c <ip4_input_accept+0x50>)
 8019b20:	695a      	ldr	r2, [r3, #20]
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	3304      	adds	r3, #4
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	429a      	cmp	r2, r3
 8019b2a:	d008      	beq.n	8019b3e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019b2c:	4b07      	ldr	r3, [pc, #28]	@ (8019b4c <ip4_input_accept+0x50>)
 8019b2e:	695b      	ldr	r3, [r3, #20]
 8019b30:	6879      	ldr	r1, [r7, #4]
 8019b32:	4618      	mov	r0, r3
 8019b34:	f000 fa08 	bl	8019f48 <ip4_addr_isbroadcast_u32>
 8019b38:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d001      	beq.n	8019b42 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019b3e:	2301      	movs	r3, #1
 8019b40:	e000      	b.n	8019b44 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019b42:	2300      	movs	r3, #0
}
 8019b44:	4618      	mov	r0, r3
 8019b46:	3708      	adds	r7, #8
 8019b48:	46bd      	mov	sp, r7
 8019b4a:	bd80      	pop	{r7, pc}
 8019b4c:	2400508c 	.word	0x2400508c

08019b50 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b086      	sub	sp, #24
 8019b54:	af00      	add	r7, sp, #0
 8019b56:	6078      	str	r0, [r7, #4]
 8019b58:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	685b      	ldr	r3, [r3, #4]
 8019b5e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019b60:	697b      	ldr	r3, [r7, #20]
 8019b62:	781b      	ldrb	r3, [r3, #0]
 8019b64:	091b      	lsrs	r3, r3, #4
 8019b66:	b2db      	uxtb	r3, r3
 8019b68:	2b04      	cmp	r3, #4
 8019b6a:	d004      	beq.n	8019b76 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019b6c:	6878      	ldr	r0, [r7, #4]
 8019b6e:	f7f8 ff2f 	bl	80129d0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019b72:	2300      	movs	r3, #0
 8019b74:	e107      	b.n	8019d86 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019b76:	697b      	ldr	r3, [r7, #20]
 8019b78:	781b      	ldrb	r3, [r3, #0]
 8019b7a:	f003 030f 	and.w	r3, r3, #15
 8019b7e:	b2db      	uxtb	r3, r3
 8019b80:	009b      	lsls	r3, r3, #2
 8019b82:	b2db      	uxtb	r3, r3
 8019b84:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019b86:	697b      	ldr	r3, [r7, #20]
 8019b88:	885b      	ldrh	r3, [r3, #2]
 8019b8a:	b29b      	uxth	r3, r3
 8019b8c:	4618      	mov	r0, r3
 8019b8e:	f7f7 fa65 	bl	801105c <lwip_htons>
 8019b92:	4603      	mov	r3, r0
 8019b94:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	891b      	ldrh	r3, [r3, #8]
 8019b9a:	89ba      	ldrh	r2, [r7, #12]
 8019b9c:	429a      	cmp	r2, r3
 8019b9e:	d204      	bcs.n	8019baa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019ba0:	89bb      	ldrh	r3, [r7, #12]
 8019ba2:	4619      	mov	r1, r3
 8019ba4:	6878      	ldr	r0, [r7, #4]
 8019ba6:	f7f8 fd8d 	bl	80126c4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	895b      	ldrh	r3, [r3, #10]
 8019bae:	89fa      	ldrh	r2, [r7, #14]
 8019bb0:	429a      	cmp	r2, r3
 8019bb2:	d807      	bhi.n	8019bc4 <ip4_input+0x74>
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	891b      	ldrh	r3, [r3, #8]
 8019bb8:	89ba      	ldrh	r2, [r7, #12]
 8019bba:	429a      	cmp	r2, r3
 8019bbc:	d802      	bhi.n	8019bc4 <ip4_input+0x74>
 8019bbe:	89fb      	ldrh	r3, [r7, #14]
 8019bc0:	2b13      	cmp	r3, #19
 8019bc2:	d804      	bhi.n	8019bce <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019bc4:	6878      	ldr	r0, [r7, #4]
 8019bc6:	f7f8 ff03 	bl	80129d0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019bca:	2300      	movs	r3, #0
 8019bcc:	e0db      	b.n	8019d86 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019bce:	697b      	ldr	r3, [r7, #20]
 8019bd0:	691b      	ldr	r3, [r3, #16]
 8019bd2:	4a6f      	ldr	r2, [pc, #444]	@ (8019d90 <ip4_input+0x240>)
 8019bd4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019bd6:	697b      	ldr	r3, [r7, #20]
 8019bd8:	68db      	ldr	r3, [r3, #12]
 8019bda:	4a6d      	ldr	r2, [pc, #436]	@ (8019d90 <ip4_input+0x240>)
 8019bdc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019bde:	4b6c      	ldr	r3, [pc, #432]	@ (8019d90 <ip4_input+0x240>)
 8019be0:	695b      	ldr	r3, [r3, #20]
 8019be2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019be6:	2be0      	cmp	r3, #224	@ 0xe0
 8019be8:	d112      	bne.n	8019c10 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019bea:	683b      	ldr	r3, [r7, #0]
 8019bec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019bf0:	f003 0301 	and.w	r3, r3, #1
 8019bf4:	b2db      	uxtb	r3, r3
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d007      	beq.n	8019c0a <ip4_input+0xba>
 8019bfa:	683b      	ldr	r3, [r7, #0]
 8019bfc:	3304      	adds	r3, #4
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d002      	beq.n	8019c0a <ip4_input+0xba>
      netif = inp;
 8019c04:	683b      	ldr	r3, [r7, #0]
 8019c06:	613b      	str	r3, [r7, #16]
 8019c08:	e02a      	b.n	8019c60 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019c0a:	2300      	movs	r3, #0
 8019c0c:	613b      	str	r3, [r7, #16]
 8019c0e:	e027      	b.n	8019c60 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019c10:	6838      	ldr	r0, [r7, #0]
 8019c12:	f7ff ff73 	bl	8019afc <ip4_input_accept>
 8019c16:	4603      	mov	r3, r0
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d002      	beq.n	8019c22 <ip4_input+0xd2>
      netif = inp;
 8019c1c:	683b      	ldr	r3, [r7, #0]
 8019c1e:	613b      	str	r3, [r7, #16]
 8019c20:	e01e      	b.n	8019c60 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019c22:	2300      	movs	r3, #0
 8019c24:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019c26:	4b5a      	ldr	r3, [pc, #360]	@ (8019d90 <ip4_input+0x240>)
 8019c28:	695b      	ldr	r3, [r3, #20]
 8019c2a:	b2db      	uxtb	r3, r3
 8019c2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8019c2e:	d017      	beq.n	8019c60 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019c30:	4b58      	ldr	r3, [pc, #352]	@ (8019d94 <ip4_input+0x244>)
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	613b      	str	r3, [r7, #16]
 8019c36:	e00e      	b.n	8019c56 <ip4_input+0x106>
          if (netif == inp) {
 8019c38:	693a      	ldr	r2, [r7, #16]
 8019c3a:	683b      	ldr	r3, [r7, #0]
 8019c3c:	429a      	cmp	r2, r3
 8019c3e:	d006      	beq.n	8019c4e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019c40:	6938      	ldr	r0, [r7, #16]
 8019c42:	f7ff ff5b 	bl	8019afc <ip4_input_accept>
 8019c46:	4603      	mov	r3, r0
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d108      	bne.n	8019c5e <ip4_input+0x10e>
 8019c4c:	e000      	b.n	8019c50 <ip4_input+0x100>
            continue;
 8019c4e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019c50:	693b      	ldr	r3, [r7, #16]
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	613b      	str	r3, [r7, #16]
 8019c56:	693b      	ldr	r3, [r7, #16]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d1ed      	bne.n	8019c38 <ip4_input+0xe8>
 8019c5c:	e000      	b.n	8019c60 <ip4_input+0x110>
            break;
 8019c5e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019c60:	4b4b      	ldr	r3, [pc, #300]	@ (8019d90 <ip4_input+0x240>)
 8019c62:	691b      	ldr	r3, [r3, #16]
 8019c64:	6839      	ldr	r1, [r7, #0]
 8019c66:	4618      	mov	r0, r3
 8019c68:	f000 f96e 	bl	8019f48 <ip4_addr_isbroadcast_u32>
 8019c6c:	4603      	mov	r3, r0
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d105      	bne.n	8019c7e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019c72:	4b47      	ldr	r3, [pc, #284]	@ (8019d90 <ip4_input+0x240>)
 8019c74:	691b      	ldr	r3, [r3, #16]
 8019c76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019c7a:	2be0      	cmp	r3, #224	@ 0xe0
 8019c7c:	d104      	bne.n	8019c88 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019c7e:	6878      	ldr	r0, [r7, #4]
 8019c80:	f7f8 fea6 	bl	80129d0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019c84:	2300      	movs	r3, #0
 8019c86:	e07e      	b.n	8019d86 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019c88:	693b      	ldr	r3, [r7, #16]
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d104      	bne.n	8019c98 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019c8e:	6878      	ldr	r0, [r7, #4]
 8019c90:	f7f8 fe9e 	bl	80129d0 <pbuf_free>
    return ERR_OK;
 8019c94:	2300      	movs	r3, #0
 8019c96:	e076      	b.n	8019d86 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019c98:	697b      	ldr	r3, [r7, #20]
 8019c9a:	88db      	ldrh	r3, [r3, #6]
 8019c9c:	b29b      	uxth	r3, r3
 8019c9e:	461a      	mov	r2, r3
 8019ca0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8019ca4:	4013      	ands	r3, r2
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d00b      	beq.n	8019cc2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019caa:	6878      	ldr	r0, [r7, #4]
 8019cac:	f000 fc92 	bl	801a5d4 <ip4_reass>
 8019cb0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d101      	bne.n	8019cbc <ip4_input+0x16c>
      return ERR_OK;
 8019cb8:	2300      	movs	r3, #0
 8019cba:	e064      	b.n	8019d86 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	685b      	ldr	r3, [r3, #4]
 8019cc0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019cc2:	4a33      	ldr	r2, [pc, #204]	@ (8019d90 <ip4_input+0x240>)
 8019cc4:	693b      	ldr	r3, [r7, #16]
 8019cc6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019cc8:	4a31      	ldr	r2, [pc, #196]	@ (8019d90 <ip4_input+0x240>)
 8019cca:	683b      	ldr	r3, [r7, #0]
 8019ccc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019cce:	4a30      	ldr	r2, [pc, #192]	@ (8019d90 <ip4_input+0x240>)
 8019cd0:	697b      	ldr	r3, [r7, #20]
 8019cd2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019cd4:	697b      	ldr	r3, [r7, #20]
 8019cd6:	781b      	ldrb	r3, [r3, #0]
 8019cd8:	f003 030f 	and.w	r3, r3, #15
 8019cdc:	b2db      	uxtb	r3, r3
 8019cde:	009b      	lsls	r3, r3, #2
 8019ce0:	b2db      	uxtb	r3, r3
 8019ce2:	461a      	mov	r2, r3
 8019ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8019d90 <ip4_input+0x240>)
 8019ce6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019ce8:	89fb      	ldrh	r3, [r7, #14]
 8019cea:	4619      	mov	r1, r3
 8019cec:	6878      	ldr	r0, [r7, #4]
 8019cee:	f7f8 fde9 	bl	80128c4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019cf2:	697b      	ldr	r3, [r7, #20]
 8019cf4:	7a5b      	ldrb	r3, [r3, #9]
 8019cf6:	2b11      	cmp	r3, #17
 8019cf8:	d006      	beq.n	8019d08 <ip4_input+0x1b8>
 8019cfa:	2b11      	cmp	r3, #17
 8019cfc:	dc13      	bgt.n	8019d26 <ip4_input+0x1d6>
 8019cfe:	2b01      	cmp	r3, #1
 8019d00:	d00c      	beq.n	8019d1c <ip4_input+0x1cc>
 8019d02:	2b06      	cmp	r3, #6
 8019d04:	d005      	beq.n	8019d12 <ip4_input+0x1c2>
 8019d06:	e00e      	b.n	8019d26 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019d08:	6839      	ldr	r1, [r7, #0]
 8019d0a:	6878      	ldr	r0, [r7, #4]
 8019d0c:	f7fe fc42 	bl	8018594 <udp_input>
        break;
 8019d10:	e026      	b.n	8019d60 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019d12:	6839      	ldr	r1, [r7, #0]
 8019d14:	6878      	ldr	r0, [r7, #4]
 8019d16:	f7fa fc91 	bl	801463c <tcp_input>
        break;
 8019d1a:	e021      	b.n	8019d60 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019d1c:	6839      	ldr	r1, [r7, #0]
 8019d1e:	6878      	ldr	r0, [r7, #4]
 8019d20:	f7ff fcc8 	bl	80196b4 <icmp_input>
        break;
 8019d24:	e01c      	b.n	8019d60 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019d26:	4b1a      	ldr	r3, [pc, #104]	@ (8019d90 <ip4_input+0x240>)
 8019d28:	695b      	ldr	r3, [r3, #20]
 8019d2a:	6939      	ldr	r1, [r7, #16]
 8019d2c:	4618      	mov	r0, r3
 8019d2e:	f000 f90b 	bl	8019f48 <ip4_addr_isbroadcast_u32>
 8019d32:	4603      	mov	r3, r0
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d10f      	bne.n	8019d58 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019d38:	4b15      	ldr	r3, [pc, #84]	@ (8019d90 <ip4_input+0x240>)
 8019d3a:	695b      	ldr	r3, [r3, #20]
 8019d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019d40:	2be0      	cmp	r3, #224	@ 0xe0
 8019d42:	d009      	beq.n	8019d58 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019d44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019d48:	4619      	mov	r1, r3
 8019d4a:	6878      	ldr	r0, [r7, #4]
 8019d4c:	f7f8 fe2d 	bl	80129aa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019d50:	2102      	movs	r1, #2
 8019d52:	6878      	ldr	r0, [r7, #4]
 8019d54:	f7ff fdce 	bl	80198f4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019d58:	6878      	ldr	r0, [r7, #4]
 8019d5a:	f7f8 fe39 	bl	80129d0 <pbuf_free>
        break;
 8019d5e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019d60:	4b0b      	ldr	r3, [pc, #44]	@ (8019d90 <ip4_input+0x240>)
 8019d62:	2200      	movs	r2, #0
 8019d64:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019d66:	4b0a      	ldr	r3, [pc, #40]	@ (8019d90 <ip4_input+0x240>)
 8019d68:	2200      	movs	r2, #0
 8019d6a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019d6c:	4b08      	ldr	r3, [pc, #32]	@ (8019d90 <ip4_input+0x240>)
 8019d6e:	2200      	movs	r2, #0
 8019d70:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019d72:	4b07      	ldr	r3, [pc, #28]	@ (8019d90 <ip4_input+0x240>)
 8019d74:	2200      	movs	r2, #0
 8019d76:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019d78:	4b05      	ldr	r3, [pc, #20]	@ (8019d90 <ip4_input+0x240>)
 8019d7a:	2200      	movs	r2, #0
 8019d7c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019d7e:	4b04      	ldr	r3, [pc, #16]	@ (8019d90 <ip4_input+0x240>)
 8019d80:	2200      	movs	r2, #0
 8019d82:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019d84:	2300      	movs	r3, #0
}
 8019d86:	4618      	mov	r0, r3
 8019d88:	3718      	adds	r7, #24
 8019d8a:	46bd      	mov	sp, r7
 8019d8c:	bd80      	pop	{r7, pc}
 8019d8e:	bf00      	nop
 8019d90:	2400508c 	.word	0x2400508c
 8019d94:	24008180 	.word	0x24008180

08019d98 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019d98:	b580      	push	{r7, lr}
 8019d9a:	b08a      	sub	sp, #40	@ 0x28
 8019d9c:	af04      	add	r7, sp, #16
 8019d9e:	60f8      	str	r0, [r7, #12]
 8019da0:	60b9      	str	r1, [r7, #8]
 8019da2:	607a      	str	r2, [r7, #4]
 8019da4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019da6:	68bb      	ldr	r3, [r7, #8]
 8019da8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	2b00      	cmp	r3, #0
 8019dae:	d009      	beq.n	8019dc4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019db0:	68bb      	ldr	r3, [r7, #8]
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d003      	beq.n	8019dbe <ip4_output_if+0x26>
 8019db6:	68bb      	ldr	r3, [r7, #8]
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d102      	bne.n	8019dc4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019dc0:	3304      	adds	r3, #4
 8019dc2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019dc4:	78fa      	ldrb	r2, [r7, #3]
 8019dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019dc8:	9302      	str	r3, [sp, #8]
 8019dca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019dce:	9301      	str	r3, [sp, #4]
 8019dd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019dd4:	9300      	str	r3, [sp, #0]
 8019dd6:	4613      	mov	r3, r2
 8019dd8:	687a      	ldr	r2, [r7, #4]
 8019dda:	6979      	ldr	r1, [r7, #20]
 8019ddc:	68f8      	ldr	r0, [r7, #12]
 8019dde:	f000 f805 	bl	8019dec <ip4_output_if_src>
 8019de2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019de4:	4618      	mov	r0, r3
 8019de6:	3718      	adds	r7, #24
 8019de8:	46bd      	mov	sp, r7
 8019dea:	bd80      	pop	{r7, pc}

08019dec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019dec:	b580      	push	{r7, lr}
 8019dee:	b088      	sub	sp, #32
 8019df0:	af00      	add	r7, sp, #0
 8019df2:	60f8      	str	r0, [r7, #12]
 8019df4:	60b9      	str	r1, [r7, #8]
 8019df6:	607a      	str	r2, [r7, #4]
 8019df8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	7b9b      	ldrb	r3, [r3, #14]
 8019dfe:	2b01      	cmp	r3, #1
 8019e00:	d006      	beq.n	8019e10 <ip4_output_if_src+0x24>
 8019e02:	4b4b      	ldr	r3, [pc, #300]	@ (8019f30 <ip4_output_if_src+0x144>)
 8019e04:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8019e08:	494a      	ldr	r1, [pc, #296]	@ (8019f34 <ip4_output_if_src+0x148>)
 8019e0a:	484b      	ldr	r0, [pc, #300]	@ (8019f38 <ip4_output_if_src+0x14c>)
 8019e0c:	f001 fb22 	bl	801b454 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d060      	beq.n	8019ed8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8019e16:	2314      	movs	r3, #20
 8019e18:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019e1a:	2114      	movs	r1, #20
 8019e1c:	68f8      	ldr	r0, [r7, #12]
 8019e1e:	f7f8 fd41 	bl	80128a4 <pbuf_add_header>
 8019e22:	4603      	mov	r3, r0
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d002      	beq.n	8019e2e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019e28:	f06f 0301 	mvn.w	r3, #1
 8019e2c:	e07c      	b.n	8019f28 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	685b      	ldr	r3, [r3, #4]
 8019e32:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019e34:	68fb      	ldr	r3, [r7, #12]
 8019e36:	895b      	ldrh	r3, [r3, #10]
 8019e38:	2b13      	cmp	r3, #19
 8019e3a:	d806      	bhi.n	8019e4a <ip4_output_if_src+0x5e>
 8019e3c:	4b3c      	ldr	r3, [pc, #240]	@ (8019f30 <ip4_output_if_src+0x144>)
 8019e3e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8019e42:	493e      	ldr	r1, [pc, #248]	@ (8019f3c <ip4_output_if_src+0x150>)
 8019e44:	483c      	ldr	r0, [pc, #240]	@ (8019f38 <ip4_output_if_src+0x14c>)
 8019e46:	f001 fb05 	bl	801b454 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019e4a:	69fb      	ldr	r3, [r7, #28]
 8019e4c:	78fa      	ldrb	r2, [r7, #3]
 8019e4e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019e50:	69fb      	ldr	r3, [r7, #28]
 8019e52:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8019e56:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	681a      	ldr	r2, [r3, #0]
 8019e5c:	69fb      	ldr	r3, [r7, #28]
 8019e5e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019e60:	8b7b      	ldrh	r3, [r7, #26]
 8019e62:	089b      	lsrs	r3, r3, #2
 8019e64:	b29b      	uxth	r3, r3
 8019e66:	b2db      	uxtb	r3, r3
 8019e68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019e6c:	b2da      	uxtb	r2, r3
 8019e6e:	69fb      	ldr	r3, [r7, #28]
 8019e70:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8019e72:	69fb      	ldr	r3, [r7, #28]
 8019e74:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8019e78:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	891b      	ldrh	r3, [r3, #8]
 8019e7e:	4618      	mov	r0, r3
 8019e80:	f7f7 f8ec 	bl	801105c <lwip_htons>
 8019e84:	4603      	mov	r3, r0
 8019e86:	461a      	mov	r2, r3
 8019e88:	69fb      	ldr	r3, [r7, #28]
 8019e8a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019e8c:	69fb      	ldr	r3, [r7, #28]
 8019e8e:	2200      	movs	r2, #0
 8019e90:	719a      	strb	r2, [r3, #6]
 8019e92:	2200      	movs	r2, #0
 8019e94:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019e96:	4b2a      	ldr	r3, [pc, #168]	@ (8019f40 <ip4_output_if_src+0x154>)
 8019e98:	881b      	ldrh	r3, [r3, #0]
 8019e9a:	4618      	mov	r0, r3
 8019e9c:	f7f7 f8de 	bl	801105c <lwip_htons>
 8019ea0:	4603      	mov	r3, r0
 8019ea2:	461a      	mov	r2, r3
 8019ea4:	69fb      	ldr	r3, [r7, #28]
 8019ea6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019ea8:	4b25      	ldr	r3, [pc, #148]	@ (8019f40 <ip4_output_if_src+0x154>)
 8019eaa:	881b      	ldrh	r3, [r3, #0]
 8019eac:	3301      	adds	r3, #1
 8019eae:	b29a      	uxth	r2, r3
 8019eb0:	4b23      	ldr	r3, [pc, #140]	@ (8019f40 <ip4_output_if_src+0x154>)
 8019eb2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019eb4:	68bb      	ldr	r3, [r7, #8]
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d104      	bne.n	8019ec4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019eba:	4b22      	ldr	r3, [pc, #136]	@ (8019f44 <ip4_output_if_src+0x158>)
 8019ebc:	681a      	ldr	r2, [r3, #0]
 8019ebe:	69fb      	ldr	r3, [r7, #28]
 8019ec0:	60da      	str	r2, [r3, #12]
 8019ec2:	e003      	b.n	8019ecc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019ec4:	68bb      	ldr	r3, [r7, #8]
 8019ec6:	681a      	ldr	r2, [r3, #0]
 8019ec8:	69fb      	ldr	r3, [r7, #28]
 8019eca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019ecc:	69fb      	ldr	r3, [r7, #28]
 8019ece:	2200      	movs	r2, #0
 8019ed0:	729a      	strb	r2, [r3, #10]
 8019ed2:	2200      	movs	r2, #0
 8019ed4:	72da      	strb	r2, [r3, #11]
 8019ed6:	e00f      	b.n	8019ef8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	895b      	ldrh	r3, [r3, #10]
 8019edc:	2b13      	cmp	r3, #19
 8019ede:	d802      	bhi.n	8019ee6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019ee0:	f06f 0301 	mvn.w	r3, #1
 8019ee4:	e020      	b.n	8019f28 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019ee6:	68fb      	ldr	r3, [r7, #12]
 8019ee8:	685b      	ldr	r3, [r3, #4]
 8019eea:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019eec:	69fb      	ldr	r3, [r7, #28]
 8019eee:	691b      	ldr	r3, [r3, #16]
 8019ef0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019ef2:	f107 0314 	add.w	r3, r7, #20
 8019ef6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019efa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d00c      	beq.n	8019f1a <ip4_output_if_src+0x12e>
 8019f00:	68fb      	ldr	r3, [r7, #12]
 8019f02:	891a      	ldrh	r2, [r3, #8]
 8019f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019f06:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8019f08:	429a      	cmp	r2, r3
 8019f0a:	d906      	bls.n	8019f1a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019f0c:	687a      	ldr	r2, [r7, #4]
 8019f0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019f10:	68f8      	ldr	r0, [r7, #12]
 8019f12:	f000 fd53 	bl	801a9bc <ip4_frag>
 8019f16:	4603      	mov	r3, r0
 8019f18:	e006      	b.n	8019f28 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019f1c:	695b      	ldr	r3, [r3, #20]
 8019f1e:	687a      	ldr	r2, [r7, #4]
 8019f20:	68f9      	ldr	r1, [r7, #12]
 8019f22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019f24:	4798      	blx	r3
 8019f26:	4603      	mov	r3, r0
}
 8019f28:	4618      	mov	r0, r3
 8019f2a:	3720      	adds	r7, #32
 8019f2c:	46bd      	mov	sp, r7
 8019f2e:	bd80      	pop	{r7, pc}
 8019f30:	0801ef48 	.word	0x0801ef48
 8019f34:	0801ef7c 	.word	0x0801ef7c
 8019f38:	0801ef88 	.word	0x0801ef88
 8019f3c:	0801efb0 	.word	0x0801efb0
 8019f40:	240082de 	.word	0x240082de
 8019f44:	0801f414 	.word	0x0801f414

08019f48 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019f48:	b480      	push	{r7}
 8019f4a:	b085      	sub	sp, #20
 8019f4c:	af00      	add	r7, sp, #0
 8019f4e:	6078      	str	r0, [r7, #4]
 8019f50:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f5c:	d002      	beq.n	8019f64 <ip4_addr_isbroadcast_u32+0x1c>
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d101      	bne.n	8019f68 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019f64:	2301      	movs	r3, #1
 8019f66:	e02a      	b.n	8019fbe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019f68:	683b      	ldr	r3, [r7, #0]
 8019f6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019f6e:	f003 0302 	and.w	r3, r3, #2
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d101      	bne.n	8019f7a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019f76:	2300      	movs	r3, #0
 8019f78:	e021      	b.n	8019fbe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019f7a:	683b      	ldr	r3, [r7, #0]
 8019f7c:	3304      	adds	r3, #4
 8019f7e:	681b      	ldr	r3, [r3, #0]
 8019f80:	687a      	ldr	r2, [r7, #4]
 8019f82:	429a      	cmp	r2, r3
 8019f84:	d101      	bne.n	8019f8a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019f86:	2300      	movs	r3, #0
 8019f88:	e019      	b.n	8019fbe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019f8a:	68fa      	ldr	r2, [r7, #12]
 8019f8c:	683b      	ldr	r3, [r7, #0]
 8019f8e:	3304      	adds	r3, #4
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	405a      	eors	r2, r3
 8019f94:	683b      	ldr	r3, [r7, #0]
 8019f96:	3308      	adds	r3, #8
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	4013      	ands	r3, r2
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d10d      	bne.n	8019fbc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019fa0:	683b      	ldr	r3, [r7, #0]
 8019fa2:	3308      	adds	r3, #8
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	43da      	mvns	r2, r3
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019fac:	683b      	ldr	r3, [r7, #0]
 8019fae:	3308      	adds	r3, #8
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019fb4:	429a      	cmp	r2, r3
 8019fb6:	d101      	bne.n	8019fbc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019fb8:	2301      	movs	r3, #1
 8019fba:	e000      	b.n	8019fbe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019fbc:	2300      	movs	r3, #0
  }
}
 8019fbe:	4618      	mov	r0, r3
 8019fc0:	3714      	adds	r7, #20
 8019fc2:	46bd      	mov	sp, r7
 8019fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fc8:	4770      	bx	lr
	...

08019fcc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019fcc:	b580      	push	{r7, lr}
 8019fce:	b084      	sub	sp, #16
 8019fd0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019fd2:	2300      	movs	r3, #0
 8019fd4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019fd6:	4b12      	ldr	r3, [pc, #72]	@ (801a020 <ip_reass_tmr+0x54>)
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019fdc:	e018      	b.n	801a010 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019fde:	68fb      	ldr	r3, [r7, #12]
 8019fe0:	7fdb      	ldrb	r3, [r3, #31]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d00b      	beq.n	8019ffe <ip_reass_tmr+0x32>
      r->timer--;
 8019fe6:	68fb      	ldr	r3, [r7, #12]
 8019fe8:	7fdb      	ldrb	r3, [r3, #31]
 8019fea:	3b01      	subs	r3, #1
 8019fec:	b2da      	uxtb	r2, r3
 8019fee:	68fb      	ldr	r3, [r7, #12]
 8019ff0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019ff2:	68fb      	ldr	r3, [r7, #12]
 8019ff4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019ff6:	68fb      	ldr	r3, [r7, #12]
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	60fb      	str	r3, [r7, #12]
 8019ffc:	e008      	b.n	801a010 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a002:	68fb      	ldr	r3, [r7, #12]
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a008:	68b9      	ldr	r1, [r7, #8]
 801a00a:	6878      	ldr	r0, [r7, #4]
 801a00c:	f000 f80a 	bl	801a024 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a010:	68fb      	ldr	r3, [r7, #12]
 801a012:	2b00      	cmp	r3, #0
 801a014:	d1e3      	bne.n	8019fde <ip_reass_tmr+0x12>
    }
  }
}
 801a016:	bf00      	nop
 801a018:	bf00      	nop
 801a01a:	3710      	adds	r7, #16
 801a01c:	46bd      	mov	sp, r7
 801a01e:	bd80      	pop	{r7, pc}
 801a020:	240082e0 	.word	0x240082e0

0801a024 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a024:	b580      	push	{r7, lr}
 801a026:	b088      	sub	sp, #32
 801a028:	af00      	add	r7, sp, #0
 801a02a:	6078      	str	r0, [r7, #4]
 801a02c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a02e:	2300      	movs	r3, #0
 801a030:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a032:	683a      	ldr	r2, [r7, #0]
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	429a      	cmp	r2, r3
 801a038:	d105      	bne.n	801a046 <ip_reass_free_complete_datagram+0x22>
 801a03a:	4b45      	ldr	r3, [pc, #276]	@ (801a150 <ip_reass_free_complete_datagram+0x12c>)
 801a03c:	22ab      	movs	r2, #171	@ 0xab
 801a03e:	4945      	ldr	r1, [pc, #276]	@ (801a154 <ip_reass_free_complete_datagram+0x130>)
 801a040:	4845      	ldr	r0, [pc, #276]	@ (801a158 <ip_reass_free_complete_datagram+0x134>)
 801a042:	f001 fa07 	bl	801b454 <iprintf>
  if (prev != NULL) {
 801a046:	683b      	ldr	r3, [r7, #0]
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d00a      	beq.n	801a062 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a04c:	683b      	ldr	r3, [r7, #0]
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	687a      	ldr	r2, [r7, #4]
 801a052:	429a      	cmp	r2, r3
 801a054:	d005      	beq.n	801a062 <ip_reass_free_complete_datagram+0x3e>
 801a056:	4b3e      	ldr	r3, [pc, #248]	@ (801a150 <ip_reass_free_complete_datagram+0x12c>)
 801a058:	22ad      	movs	r2, #173	@ 0xad
 801a05a:	4940      	ldr	r1, [pc, #256]	@ (801a15c <ip_reass_free_complete_datagram+0x138>)
 801a05c:	483e      	ldr	r0, [pc, #248]	@ (801a158 <ip_reass_free_complete_datagram+0x134>)
 801a05e:	f001 f9f9 	bl	801b454 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	685b      	ldr	r3, [r3, #4]
 801a066:	685b      	ldr	r3, [r3, #4]
 801a068:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a06a:	697b      	ldr	r3, [r7, #20]
 801a06c:	889b      	ldrh	r3, [r3, #4]
 801a06e:	b29b      	uxth	r3, r3
 801a070:	2b00      	cmp	r3, #0
 801a072:	d12a      	bne.n	801a0ca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	685b      	ldr	r3, [r3, #4]
 801a078:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a07a:	697b      	ldr	r3, [r7, #20]
 801a07c:	681a      	ldr	r2, [r3, #0]
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a082:	69bb      	ldr	r3, [r7, #24]
 801a084:	6858      	ldr	r0, [r3, #4]
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	3308      	adds	r3, #8
 801a08a:	2214      	movs	r2, #20
 801a08c:	4619      	mov	r1, r3
 801a08e:	f001 fbc4 	bl	801b81a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a092:	2101      	movs	r1, #1
 801a094:	69b8      	ldr	r0, [r7, #24]
 801a096:	f7ff fc3d 	bl	8019914 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a09a:	69b8      	ldr	r0, [r7, #24]
 801a09c:	f7f8 fd26 	bl	8012aec <pbuf_clen>
 801a0a0:	4603      	mov	r3, r0
 801a0a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a0a4:	8bfa      	ldrh	r2, [r7, #30]
 801a0a6:	8a7b      	ldrh	r3, [r7, #18]
 801a0a8:	4413      	add	r3, r2
 801a0aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a0ae:	db05      	blt.n	801a0bc <ip_reass_free_complete_datagram+0x98>
 801a0b0:	4b27      	ldr	r3, [pc, #156]	@ (801a150 <ip_reass_free_complete_datagram+0x12c>)
 801a0b2:	22bc      	movs	r2, #188	@ 0xbc
 801a0b4:	492a      	ldr	r1, [pc, #168]	@ (801a160 <ip_reass_free_complete_datagram+0x13c>)
 801a0b6:	4828      	ldr	r0, [pc, #160]	@ (801a158 <ip_reass_free_complete_datagram+0x134>)
 801a0b8:	f001 f9cc 	bl	801b454 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a0bc:	8bfa      	ldrh	r2, [r7, #30]
 801a0be:	8a7b      	ldrh	r3, [r7, #18]
 801a0c0:	4413      	add	r3, r2
 801a0c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a0c4:	69b8      	ldr	r0, [r7, #24]
 801a0c6:	f7f8 fc83 	bl	80129d0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	685b      	ldr	r3, [r3, #4]
 801a0ce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a0d0:	e01f      	b.n	801a112 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a0d2:	69bb      	ldr	r3, [r7, #24]
 801a0d4:	685b      	ldr	r3, [r3, #4]
 801a0d6:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a0d8:	69bb      	ldr	r3, [r7, #24]
 801a0da:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a0dc:	697b      	ldr	r3, [r7, #20]
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a0e2:	68f8      	ldr	r0, [r7, #12]
 801a0e4:	f7f8 fd02 	bl	8012aec <pbuf_clen>
 801a0e8:	4603      	mov	r3, r0
 801a0ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a0ec:	8bfa      	ldrh	r2, [r7, #30]
 801a0ee:	8a7b      	ldrh	r3, [r7, #18]
 801a0f0:	4413      	add	r3, r2
 801a0f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a0f6:	db05      	blt.n	801a104 <ip_reass_free_complete_datagram+0xe0>
 801a0f8:	4b15      	ldr	r3, [pc, #84]	@ (801a150 <ip_reass_free_complete_datagram+0x12c>)
 801a0fa:	22cc      	movs	r2, #204	@ 0xcc
 801a0fc:	4918      	ldr	r1, [pc, #96]	@ (801a160 <ip_reass_free_complete_datagram+0x13c>)
 801a0fe:	4816      	ldr	r0, [pc, #88]	@ (801a158 <ip_reass_free_complete_datagram+0x134>)
 801a100:	f001 f9a8 	bl	801b454 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a104:	8bfa      	ldrh	r2, [r7, #30]
 801a106:	8a7b      	ldrh	r3, [r7, #18]
 801a108:	4413      	add	r3, r2
 801a10a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a10c:	68f8      	ldr	r0, [r7, #12]
 801a10e:	f7f8 fc5f 	bl	80129d0 <pbuf_free>
  while (p != NULL) {
 801a112:	69bb      	ldr	r3, [r7, #24]
 801a114:	2b00      	cmp	r3, #0
 801a116:	d1dc      	bne.n	801a0d2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a118:	6839      	ldr	r1, [r7, #0]
 801a11a:	6878      	ldr	r0, [r7, #4]
 801a11c:	f000 f8c2 	bl	801a2a4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a120:	4b10      	ldr	r3, [pc, #64]	@ (801a164 <ip_reass_free_complete_datagram+0x140>)
 801a122:	881b      	ldrh	r3, [r3, #0]
 801a124:	8bfa      	ldrh	r2, [r7, #30]
 801a126:	429a      	cmp	r2, r3
 801a128:	d905      	bls.n	801a136 <ip_reass_free_complete_datagram+0x112>
 801a12a:	4b09      	ldr	r3, [pc, #36]	@ (801a150 <ip_reass_free_complete_datagram+0x12c>)
 801a12c:	22d2      	movs	r2, #210	@ 0xd2
 801a12e:	490e      	ldr	r1, [pc, #56]	@ (801a168 <ip_reass_free_complete_datagram+0x144>)
 801a130:	4809      	ldr	r0, [pc, #36]	@ (801a158 <ip_reass_free_complete_datagram+0x134>)
 801a132:	f001 f98f 	bl	801b454 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a136:	4b0b      	ldr	r3, [pc, #44]	@ (801a164 <ip_reass_free_complete_datagram+0x140>)
 801a138:	881a      	ldrh	r2, [r3, #0]
 801a13a:	8bfb      	ldrh	r3, [r7, #30]
 801a13c:	1ad3      	subs	r3, r2, r3
 801a13e:	b29a      	uxth	r2, r3
 801a140:	4b08      	ldr	r3, [pc, #32]	@ (801a164 <ip_reass_free_complete_datagram+0x140>)
 801a142:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a144:	8bfb      	ldrh	r3, [r7, #30]
}
 801a146:	4618      	mov	r0, r3
 801a148:	3720      	adds	r7, #32
 801a14a:	46bd      	mov	sp, r7
 801a14c:	bd80      	pop	{r7, pc}
 801a14e:	bf00      	nop
 801a150:	0801efe0 	.word	0x0801efe0
 801a154:	0801f01c 	.word	0x0801f01c
 801a158:	0801f028 	.word	0x0801f028
 801a15c:	0801f050 	.word	0x0801f050
 801a160:	0801f064 	.word	0x0801f064
 801a164:	240082e4 	.word	0x240082e4
 801a168:	0801f084 	.word	0x0801f084

0801a16c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a16c:	b580      	push	{r7, lr}
 801a16e:	b08a      	sub	sp, #40	@ 0x28
 801a170:	af00      	add	r7, sp, #0
 801a172:	6078      	str	r0, [r7, #4]
 801a174:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a176:	2300      	movs	r3, #0
 801a178:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a17a:	2300      	movs	r3, #0
 801a17c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a17e:	2300      	movs	r3, #0
 801a180:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a182:	2300      	movs	r3, #0
 801a184:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a186:	2300      	movs	r3, #0
 801a188:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a18a:	4b28      	ldr	r3, [pc, #160]	@ (801a22c <ip_reass_remove_oldest_datagram+0xc0>)
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801a190:	e030      	b.n	801a1f4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a194:	695a      	ldr	r2, [r3, #20]
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	68db      	ldr	r3, [r3, #12]
 801a19a:	429a      	cmp	r2, r3
 801a19c:	d10c      	bne.n	801a1b8 <ip_reass_remove_oldest_datagram+0x4c>
 801a19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1a0:	699a      	ldr	r2, [r3, #24]
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	691b      	ldr	r3, [r3, #16]
 801a1a6:	429a      	cmp	r2, r3
 801a1a8:	d106      	bne.n	801a1b8 <ip_reass_remove_oldest_datagram+0x4c>
 801a1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1ac:	899a      	ldrh	r2, [r3, #12]
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	889b      	ldrh	r3, [r3, #4]
 801a1b2:	b29b      	uxth	r3, r3
 801a1b4:	429a      	cmp	r2, r3
 801a1b6:	d014      	beq.n	801a1e2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a1b8:	693b      	ldr	r3, [r7, #16]
 801a1ba:	3301      	adds	r3, #1
 801a1bc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a1be:	6a3b      	ldr	r3, [r7, #32]
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d104      	bne.n	801a1ce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1c6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a1c8:	69fb      	ldr	r3, [r7, #28]
 801a1ca:	61bb      	str	r3, [r7, #24]
 801a1cc:	e009      	b.n	801a1e2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1d0:	7fda      	ldrb	r2, [r3, #31]
 801a1d2:	6a3b      	ldr	r3, [r7, #32]
 801a1d4:	7fdb      	ldrb	r3, [r3, #31]
 801a1d6:	429a      	cmp	r2, r3
 801a1d8:	d803      	bhi.n	801a1e2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1dc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a1de:	69fb      	ldr	r3, [r7, #28]
 801a1e0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d001      	beq.n	801a1ee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1ec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801a1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d1cb      	bne.n	801a192 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a1fa:	6a3b      	ldr	r3, [r7, #32]
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d008      	beq.n	801a212 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a200:	69b9      	ldr	r1, [r7, #24]
 801a202:	6a38      	ldr	r0, [r7, #32]
 801a204:	f7ff ff0e 	bl	801a024 <ip_reass_free_complete_datagram>
 801a208:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a20a:	697a      	ldr	r2, [r7, #20]
 801a20c:	68fb      	ldr	r3, [r7, #12]
 801a20e:	4413      	add	r3, r2
 801a210:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a212:	697a      	ldr	r2, [r7, #20]
 801a214:	683b      	ldr	r3, [r7, #0]
 801a216:	429a      	cmp	r2, r3
 801a218:	da02      	bge.n	801a220 <ip_reass_remove_oldest_datagram+0xb4>
 801a21a:	693b      	ldr	r3, [r7, #16]
 801a21c:	2b01      	cmp	r3, #1
 801a21e:	dcac      	bgt.n	801a17a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a220:	697b      	ldr	r3, [r7, #20]
}
 801a222:	4618      	mov	r0, r3
 801a224:	3728      	adds	r7, #40	@ 0x28
 801a226:	46bd      	mov	sp, r7
 801a228:	bd80      	pop	{r7, pc}
 801a22a:	bf00      	nop
 801a22c:	240082e0 	.word	0x240082e0

0801a230 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a230:	b580      	push	{r7, lr}
 801a232:	b084      	sub	sp, #16
 801a234:	af00      	add	r7, sp, #0
 801a236:	6078      	str	r0, [r7, #4]
 801a238:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a23a:	2004      	movs	r0, #4
 801a23c:	f7f7 fcae 	bl	8011b9c <memp_malloc>
 801a240:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	2b00      	cmp	r3, #0
 801a246:	d110      	bne.n	801a26a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a248:	6839      	ldr	r1, [r7, #0]
 801a24a:	6878      	ldr	r0, [r7, #4]
 801a24c:	f7ff ff8e 	bl	801a16c <ip_reass_remove_oldest_datagram>
 801a250:	4602      	mov	r2, r0
 801a252:	683b      	ldr	r3, [r7, #0]
 801a254:	4293      	cmp	r3, r2
 801a256:	dc03      	bgt.n	801a260 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a258:	2004      	movs	r0, #4
 801a25a:	f7f7 fc9f 	bl	8011b9c <memp_malloc>
 801a25e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	2b00      	cmp	r3, #0
 801a264:	d101      	bne.n	801a26a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a266:	2300      	movs	r3, #0
 801a268:	e016      	b.n	801a298 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a26a:	2220      	movs	r2, #32
 801a26c:	2100      	movs	r1, #0
 801a26e:	68f8      	ldr	r0, [r7, #12]
 801a270:	f001 f9ea 	bl	801b648 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	220f      	movs	r2, #15
 801a278:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a27a:	4b09      	ldr	r3, [pc, #36]	@ (801a2a0 <ip_reass_enqueue_new_datagram+0x70>)
 801a27c:	681a      	ldr	r2, [r3, #0]
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a282:	4a07      	ldr	r2, [pc, #28]	@ (801a2a0 <ip_reass_enqueue_new_datagram+0x70>)
 801a284:	68fb      	ldr	r3, [r7, #12]
 801a286:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	3308      	adds	r3, #8
 801a28c:	2214      	movs	r2, #20
 801a28e:	6879      	ldr	r1, [r7, #4]
 801a290:	4618      	mov	r0, r3
 801a292:	f001 fac2 	bl	801b81a <memcpy>
  return ipr;
 801a296:	68fb      	ldr	r3, [r7, #12]
}
 801a298:	4618      	mov	r0, r3
 801a29a:	3710      	adds	r7, #16
 801a29c:	46bd      	mov	sp, r7
 801a29e:	bd80      	pop	{r7, pc}
 801a2a0:	240082e0 	.word	0x240082e0

0801a2a4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a2a4:	b580      	push	{r7, lr}
 801a2a6:	b082      	sub	sp, #8
 801a2a8:	af00      	add	r7, sp, #0
 801a2aa:	6078      	str	r0, [r7, #4]
 801a2ac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a2ae:	4b10      	ldr	r3, [pc, #64]	@ (801a2f0 <ip_reass_dequeue_datagram+0x4c>)
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	687a      	ldr	r2, [r7, #4]
 801a2b4:	429a      	cmp	r2, r3
 801a2b6:	d104      	bne.n	801a2c2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	681b      	ldr	r3, [r3, #0]
 801a2bc:	4a0c      	ldr	r2, [pc, #48]	@ (801a2f0 <ip_reass_dequeue_datagram+0x4c>)
 801a2be:	6013      	str	r3, [r2, #0]
 801a2c0:	e00d      	b.n	801a2de <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a2c2:	683b      	ldr	r3, [r7, #0]
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d106      	bne.n	801a2d6 <ip_reass_dequeue_datagram+0x32>
 801a2c8:	4b0a      	ldr	r3, [pc, #40]	@ (801a2f4 <ip_reass_dequeue_datagram+0x50>)
 801a2ca:	f240 1245 	movw	r2, #325	@ 0x145
 801a2ce:	490a      	ldr	r1, [pc, #40]	@ (801a2f8 <ip_reass_dequeue_datagram+0x54>)
 801a2d0:	480a      	ldr	r0, [pc, #40]	@ (801a2fc <ip_reass_dequeue_datagram+0x58>)
 801a2d2:	f001 f8bf 	bl	801b454 <iprintf>
    prev->next = ipr->next;
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	681a      	ldr	r2, [r3, #0]
 801a2da:	683b      	ldr	r3, [r7, #0]
 801a2dc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a2de:	6879      	ldr	r1, [r7, #4]
 801a2e0:	2004      	movs	r0, #4
 801a2e2:	f7f7 fcd1 	bl	8011c88 <memp_free>
}
 801a2e6:	bf00      	nop
 801a2e8:	3708      	adds	r7, #8
 801a2ea:	46bd      	mov	sp, r7
 801a2ec:	bd80      	pop	{r7, pc}
 801a2ee:	bf00      	nop
 801a2f0:	240082e0 	.word	0x240082e0
 801a2f4:	0801efe0 	.word	0x0801efe0
 801a2f8:	0801f0a8 	.word	0x0801f0a8
 801a2fc:	0801f028 	.word	0x0801f028

0801a300 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a300:	b580      	push	{r7, lr}
 801a302:	b08c      	sub	sp, #48	@ 0x30
 801a304:	af00      	add	r7, sp, #0
 801a306:	60f8      	str	r0, [r7, #12]
 801a308:	60b9      	str	r1, [r7, #8]
 801a30a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a30c:	2300      	movs	r3, #0
 801a30e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a310:	2301      	movs	r3, #1
 801a312:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a314:	68bb      	ldr	r3, [r7, #8]
 801a316:	685b      	ldr	r3, [r3, #4]
 801a318:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a31a:	69fb      	ldr	r3, [r7, #28]
 801a31c:	885b      	ldrh	r3, [r3, #2]
 801a31e:	b29b      	uxth	r3, r3
 801a320:	4618      	mov	r0, r3
 801a322:	f7f6 fe9b 	bl	801105c <lwip_htons>
 801a326:	4603      	mov	r3, r0
 801a328:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a32a:	69fb      	ldr	r3, [r7, #28]
 801a32c:	781b      	ldrb	r3, [r3, #0]
 801a32e:	f003 030f 	and.w	r3, r3, #15
 801a332:	b2db      	uxtb	r3, r3
 801a334:	009b      	lsls	r3, r3, #2
 801a336:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a338:	7e7b      	ldrb	r3, [r7, #25]
 801a33a:	b29b      	uxth	r3, r3
 801a33c:	8b7a      	ldrh	r2, [r7, #26]
 801a33e:	429a      	cmp	r2, r3
 801a340:	d202      	bcs.n	801a348 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a342:	f04f 33ff 	mov.w	r3, #4294967295
 801a346:	e135      	b.n	801a5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a348:	7e7b      	ldrb	r3, [r7, #25]
 801a34a:	b29b      	uxth	r3, r3
 801a34c:	8b7a      	ldrh	r2, [r7, #26]
 801a34e:	1ad3      	subs	r3, r2, r3
 801a350:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a352:	69fb      	ldr	r3, [r7, #28]
 801a354:	88db      	ldrh	r3, [r3, #6]
 801a356:	b29b      	uxth	r3, r3
 801a358:	4618      	mov	r0, r3
 801a35a:	f7f6 fe7f 	bl	801105c <lwip_htons>
 801a35e:	4603      	mov	r3, r0
 801a360:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a364:	b29b      	uxth	r3, r3
 801a366:	00db      	lsls	r3, r3, #3
 801a368:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a36a:	68bb      	ldr	r3, [r7, #8]
 801a36c:	685b      	ldr	r3, [r3, #4]
 801a36e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801a370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a372:	2200      	movs	r2, #0
 801a374:	701a      	strb	r2, [r3, #0]
 801a376:	2200      	movs	r2, #0
 801a378:	705a      	strb	r2, [r3, #1]
 801a37a:	2200      	movs	r2, #0
 801a37c:	709a      	strb	r2, [r3, #2]
 801a37e:	2200      	movs	r2, #0
 801a380:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a384:	8afa      	ldrh	r2, [r7, #22]
 801a386:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a388:	8afa      	ldrh	r2, [r7, #22]
 801a38a:	8b7b      	ldrh	r3, [r7, #26]
 801a38c:	4413      	add	r3, r2
 801a38e:	b29a      	uxth	r2, r3
 801a390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a392:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a396:	88db      	ldrh	r3, [r3, #6]
 801a398:	b29b      	uxth	r3, r3
 801a39a:	8afa      	ldrh	r2, [r7, #22]
 801a39c:	429a      	cmp	r2, r3
 801a39e:	d902      	bls.n	801a3a6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a3a0:	f04f 33ff 	mov.w	r3, #4294967295
 801a3a4:	e106      	b.n	801a5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a3a6:	68fb      	ldr	r3, [r7, #12]
 801a3a8:	685b      	ldr	r3, [r3, #4]
 801a3aa:	627b      	str	r3, [r7, #36]	@ 0x24
 801a3ac:	e068      	b.n	801a480 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3b0:	685b      	ldr	r3, [r3, #4]
 801a3b2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3b6:	889b      	ldrh	r3, [r3, #4]
 801a3b8:	b29a      	uxth	r2, r3
 801a3ba:	693b      	ldr	r3, [r7, #16]
 801a3bc:	889b      	ldrh	r3, [r3, #4]
 801a3be:	b29b      	uxth	r3, r3
 801a3c0:	429a      	cmp	r2, r3
 801a3c2:	d235      	bcs.n	801a430 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a3c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	d020      	beq.n	801a412 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3d2:	889b      	ldrh	r3, [r3, #4]
 801a3d4:	b29a      	uxth	r2, r3
 801a3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3d8:	88db      	ldrh	r3, [r3, #6]
 801a3da:	b29b      	uxth	r3, r3
 801a3dc:	429a      	cmp	r2, r3
 801a3de:	d307      	bcc.n	801a3f0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3e2:	88db      	ldrh	r3, [r3, #6]
 801a3e4:	b29a      	uxth	r2, r3
 801a3e6:	693b      	ldr	r3, [r7, #16]
 801a3e8:	889b      	ldrh	r3, [r3, #4]
 801a3ea:	b29b      	uxth	r3, r3
 801a3ec:	429a      	cmp	r2, r3
 801a3ee:	d902      	bls.n	801a3f6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a3f0:	f04f 33ff 	mov.w	r3, #4294967295
 801a3f4:	e0de      	b.n	801a5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3f8:	68ba      	ldr	r2, [r7, #8]
 801a3fa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3fe:	88db      	ldrh	r3, [r3, #6]
 801a400:	b29a      	uxth	r2, r3
 801a402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a404:	889b      	ldrh	r3, [r3, #4]
 801a406:	b29b      	uxth	r3, r3
 801a408:	429a      	cmp	r2, r3
 801a40a:	d03d      	beq.n	801a488 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a40c:	2300      	movs	r3, #0
 801a40e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a410:	e03a      	b.n	801a488 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a414:	88db      	ldrh	r3, [r3, #6]
 801a416:	b29a      	uxth	r2, r3
 801a418:	693b      	ldr	r3, [r7, #16]
 801a41a:	889b      	ldrh	r3, [r3, #4]
 801a41c:	b29b      	uxth	r3, r3
 801a41e:	429a      	cmp	r2, r3
 801a420:	d902      	bls.n	801a428 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a422:	f04f 33ff 	mov.w	r3, #4294967295
 801a426:	e0c5      	b.n	801a5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a428:	68fb      	ldr	r3, [r7, #12]
 801a42a:	68ba      	ldr	r2, [r7, #8]
 801a42c:	605a      	str	r2, [r3, #4]
      break;
 801a42e:	e02b      	b.n	801a488 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a432:	889b      	ldrh	r3, [r3, #4]
 801a434:	b29a      	uxth	r2, r3
 801a436:	693b      	ldr	r3, [r7, #16]
 801a438:	889b      	ldrh	r3, [r3, #4]
 801a43a:	b29b      	uxth	r3, r3
 801a43c:	429a      	cmp	r2, r3
 801a43e:	d102      	bne.n	801a446 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a440:	f04f 33ff 	mov.w	r3, #4294967295
 801a444:	e0b6      	b.n	801a5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a448:	889b      	ldrh	r3, [r3, #4]
 801a44a:	b29a      	uxth	r2, r3
 801a44c:	693b      	ldr	r3, [r7, #16]
 801a44e:	88db      	ldrh	r3, [r3, #6]
 801a450:	b29b      	uxth	r3, r3
 801a452:	429a      	cmp	r2, r3
 801a454:	d202      	bcs.n	801a45c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a456:	f04f 33ff 	mov.w	r3, #4294967295
 801a45a:	e0ab      	b.n	801a5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d009      	beq.n	801a476 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a464:	88db      	ldrh	r3, [r3, #6]
 801a466:	b29a      	uxth	r2, r3
 801a468:	693b      	ldr	r3, [r7, #16]
 801a46a:	889b      	ldrh	r3, [r3, #4]
 801a46c:	b29b      	uxth	r3, r3
 801a46e:	429a      	cmp	r2, r3
 801a470:	d001      	beq.n	801a476 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a472:	2300      	movs	r3, #0
 801a474:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a476:	693b      	ldr	r3, [r7, #16]
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801a47c:	693b      	ldr	r3, [r7, #16]
 801a47e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801a480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a482:	2b00      	cmp	r3, #0
 801a484:	d193      	bne.n	801a3ae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a486:	e000      	b.n	801a48a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a488:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d12d      	bne.n	801a4ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a492:	2b00      	cmp	r3, #0
 801a494:	d01c      	beq.n	801a4d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a498:	88db      	ldrh	r3, [r3, #6]
 801a49a:	b29a      	uxth	r2, r3
 801a49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a49e:	889b      	ldrh	r3, [r3, #4]
 801a4a0:	b29b      	uxth	r3, r3
 801a4a2:	429a      	cmp	r2, r3
 801a4a4:	d906      	bls.n	801a4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a4a6:	4b45      	ldr	r3, [pc, #276]	@ (801a5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a4a8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801a4ac:	4944      	ldr	r1, [pc, #272]	@ (801a5c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a4ae:	4845      	ldr	r0, [pc, #276]	@ (801a5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a4b0:	f000 ffd0 	bl	801b454 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4b6:	68ba      	ldr	r2, [r7, #8]
 801a4b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a4ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4bc:	88db      	ldrh	r3, [r3, #6]
 801a4be:	b29a      	uxth	r2, r3
 801a4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4c2:	889b      	ldrh	r3, [r3, #4]
 801a4c4:	b29b      	uxth	r3, r3
 801a4c6:	429a      	cmp	r2, r3
 801a4c8:	d010      	beq.n	801a4ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a4ca:	2300      	movs	r3, #0
 801a4cc:	623b      	str	r3, [r7, #32]
 801a4ce:	e00d      	b.n	801a4ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a4d0:	68fb      	ldr	r3, [r7, #12]
 801a4d2:	685b      	ldr	r3, [r3, #4]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d006      	beq.n	801a4e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a4d8:	4b38      	ldr	r3, [pc, #224]	@ (801a5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a4da:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801a4de:	493a      	ldr	r1, [pc, #232]	@ (801a5c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a4e0:	4838      	ldr	r0, [pc, #224]	@ (801a5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a4e2:	f000 ffb7 	bl	801b454 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a4e6:	68fb      	ldr	r3, [r7, #12]
 801a4e8:	68ba      	ldr	r2, [r7, #8]
 801a4ea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d105      	bne.n	801a4fe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a4f2:	68fb      	ldr	r3, [r7, #12]
 801a4f4:	7f9b      	ldrb	r3, [r3, #30]
 801a4f6:	f003 0301 	and.w	r3, r3, #1
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d059      	beq.n	801a5b2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a4fe:	6a3b      	ldr	r3, [r7, #32]
 801a500:	2b00      	cmp	r3, #0
 801a502:	d04f      	beq.n	801a5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a504:	68fb      	ldr	r3, [r7, #12]
 801a506:	685b      	ldr	r3, [r3, #4]
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d006      	beq.n	801a51a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a50c:	68fb      	ldr	r3, [r7, #12]
 801a50e:	685b      	ldr	r3, [r3, #4]
 801a510:	685b      	ldr	r3, [r3, #4]
 801a512:	889b      	ldrh	r3, [r3, #4]
 801a514:	b29b      	uxth	r3, r3
 801a516:	2b00      	cmp	r3, #0
 801a518:	d002      	beq.n	801a520 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a51a:	2300      	movs	r3, #0
 801a51c:	623b      	str	r3, [r7, #32]
 801a51e:	e041      	b.n	801a5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a522:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801a524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a526:	681b      	ldr	r3, [r3, #0]
 801a528:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801a52a:	e012      	b.n	801a552 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a52e:	685b      	ldr	r3, [r3, #4]
 801a530:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801a532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a534:	88db      	ldrh	r3, [r3, #6]
 801a536:	b29a      	uxth	r2, r3
 801a538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a53a:	889b      	ldrh	r3, [r3, #4]
 801a53c:	b29b      	uxth	r3, r3
 801a53e:	429a      	cmp	r2, r3
 801a540:	d002      	beq.n	801a548 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a542:	2300      	movs	r3, #0
 801a544:	623b      	str	r3, [r7, #32]
            break;
 801a546:	e007      	b.n	801a558 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a54a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801a54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801a552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a554:	2b00      	cmp	r3, #0
 801a556:	d1e9      	bne.n	801a52c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a558:	6a3b      	ldr	r3, [r7, #32]
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d022      	beq.n	801a5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a55e:	68fb      	ldr	r3, [r7, #12]
 801a560:	685b      	ldr	r3, [r3, #4]
 801a562:	2b00      	cmp	r3, #0
 801a564:	d106      	bne.n	801a574 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a566:	4b15      	ldr	r3, [pc, #84]	@ (801a5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a568:	f240 12df 	movw	r2, #479	@ 0x1df
 801a56c:	4917      	ldr	r1, [pc, #92]	@ (801a5cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a56e:	4815      	ldr	r0, [pc, #84]	@ (801a5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a570:	f000 ff70 	bl	801b454 <iprintf>
          LWIP_ASSERT("sanity check",
 801a574:	68fb      	ldr	r3, [r7, #12]
 801a576:	685b      	ldr	r3, [r3, #4]
 801a578:	685b      	ldr	r3, [r3, #4]
 801a57a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a57c:	429a      	cmp	r2, r3
 801a57e:	d106      	bne.n	801a58e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a580:	4b0e      	ldr	r3, [pc, #56]	@ (801a5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a582:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801a586:	4911      	ldr	r1, [pc, #68]	@ (801a5cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a588:	480e      	ldr	r0, [pc, #56]	@ (801a5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a58a:	f000 ff63 	bl	801b454 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a590:	681b      	ldr	r3, [r3, #0]
 801a592:	2b00      	cmp	r3, #0
 801a594:	d006      	beq.n	801a5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a596:	4b09      	ldr	r3, [pc, #36]	@ (801a5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a598:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801a59c:	490c      	ldr	r1, [pc, #48]	@ (801a5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a59e:	4809      	ldr	r0, [pc, #36]	@ (801a5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a5a0:	f000 ff58 	bl	801b454 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a5a4:	6a3b      	ldr	r3, [r7, #32]
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	bf14      	ite	ne
 801a5aa:	2301      	movne	r3, #1
 801a5ac:	2300      	moveq	r3, #0
 801a5ae:	b2db      	uxtb	r3, r3
 801a5b0:	e000      	b.n	801a5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a5b2:	2300      	movs	r3, #0
}
 801a5b4:	4618      	mov	r0, r3
 801a5b6:	3730      	adds	r7, #48	@ 0x30
 801a5b8:	46bd      	mov	sp, r7
 801a5ba:	bd80      	pop	{r7, pc}
 801a5bc:	0801efe0 	.word	0x0801efe0
 801a5c0:	0801f0c4 	.word	0x0801f0c4
 801a5c4:	0801f028 	.word	0x0801f028
 801a5c8:	0801f0e4 	.word	0x0801f0e4
 801a5cc:	0801f11c 	.word	0x0801f11c
 801a5d0:	0801f12c 	.word	0x0801f12c

0801a5d4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a5d4:	b580      	push	{r7, lr}
 801a5d6:	b08e      	sub	sp, #56	@ 0x38
 801a5d8:	af00      	add	r7, sp, #0
 801a5da:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	685b      	ldr	r3, [r3, #4]
 801a5e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5e4:	781b      	ldrb	r3, [r3, #0]
 801a5e6:	f003 030f 	and.w	r3, r3, #15
 801a5ea:	b2db      	uxtb	r3, r3
 801a5ec:	009b      	lsls	r3, r3, #2
 801a5ee:	b2db      	uxtb	r3, r3
 801a5f0:	2b14      	cmp	r3, #20
 801a5f2:	f040 8171 	bne.w	801a8d8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5f8:	88db      	ldrh	r3, [r3, #6]
 801a5fa:	b29b      	uxth	r3, r3
 801a5fc:	4618      	mov	r0, r3
 801a5fe:	f7f6 fd2d 	bl	801105c <lwip_htons>
 801a602:	4603      	mov	r3, r0
 801a604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a608:	b29b      	uxth	r3, r3
 801a60a:	00db      	lsls	r3, r3, #3
 801a60c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a610:	885b      	ldrh	r3, [r3, #2]
 801a612:	b29b      	uxth	r3, r3
 801a614:	4618      	mov	r0, r3
 801a616:	f7f6 fd21 	bl	801105c <lwip_htons>
 801a61a:	4603      	mov	r3, r0
 801a61c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a620:	781b      	ldrb	r3, [r3, #0]
 801a622:	f003 030f 	and.w	r3, r3, #15
 801a626:	b2db      	uxtb	r3, r3
 801a628:	009b      	lsls	r3, r3, #2
 801a62a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801a62e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a632:	b29b      	uxth	r3, r3
 801a634:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a636:	429a      	cmp	r2, r3
 801a638:	f0c0 8150 	bcc.w	801a8dc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a63c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a640:	b29b      	uxth	r3, r3
 801a642:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a644:	1ad3      	subs	r3, r2, r3
 801a646:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a648:	6878      	ldr	r0, [r7, #4]
 801a64a:	f7f8 fa4f 	bl	8012aec <pbuf_clen>
 801a64e:	4603      	mov	r3, r0
 801a650:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a652:	4b8c      	ldr	r3, [pc, #560]	@ (801a884 <ip4_reass+0x2b0>)
 801a654:	881b      	ldrh	r3, [r3, #0]
 801a656:	461a      	mov	r2, r3
 801a658:	8c3b      	ldrh	r3, [r7, #32]
 801a65a:	4413      	add	r3, r2
 801a65c:	2b0a      	cmp	r3, #10
 801a65e:	dd10      	ble.n	801a682 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a660:	8c3b      	ldrh	r3, [r7, #32]
 801a662:	4619      	mov	r1, r3
 801a664:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a666:	f7ff fd81 	bl	801a16c <ip_reass_remove_oldest_datagram>
 801a66a:	4603      	mov	r3, r0
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	f000 8137 	beq.w	801a8e0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a672:	4b84      	ldr	r3, [pc, #528]	@ (801a884 <ip4_reass+0x2b0>)
 801a674:	881b      	ldrh	r3, [r3, #0]
 801a676:	461a      	mov	r2, r3
 801a678:	8c3b      	ldrh	r3, [r7, #32]
 801a67a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a67c:	2b0a      	cmp	r3, #10
 801a67e:	f300 812f 	bgt.w	801a8e0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a682:	4b81      	ldr	r3, [pc, #516]	@ (801a888 <ip4_reass+0x2b4>)
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	633b      	str	r3, [r7, #48]	@ 0x30
 801a688:	e015      	b.n	801a6b6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a68c:	695a      	ldr	r2, [r3, #20]
 801a68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a690:	68db      	ldr	r3, [r3, #12]
 801a692:	429a      	cmp	r2, r3
 801a694:	d10c      	bne.n	801a6b0 <ip4_reass+0xdc>
 801a696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a698:	699a      	ldr	r2, [r3, #24]
 801a69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a69c:	691b      	ldr	r3, [r3, #16]
 801a69e:	429a      	cmp	r2, r3
 801a6a0:	d106      	bne.n	801a6b0 <ip4_reass+0xdc>
 801a6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6a4:	899a      	ldrh	r2, [r3, #12]
 801a6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6a8:	889b      	ldrh	r3, [r3, #4]
 801a6aa:	b29b      	uxth	r3, r3
 801a6ac:	429a      	cmp	r2, r3
 801a6ae:	d006      	beq.n	801a6be <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	633b      	str	r3, [r7, #48]	@ 0x30
 801a6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d1e6      	bne.n	801a68a <ip4_reass+0xb6>
 801a6bc:	e000      	b.n	801a6c0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a6be:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d109      	bne.n	801a6da <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a6c6:	8c3b      	ldrh	r3, [r7, #32]
 801a6c8:	4619      	mov	r1, r3
 801a6ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a6cc:	f7ff fdb0 	bl	801a230 <ip_reass_enqueue_new_datagram>
 801a6d0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	d11c      	bne.n	801a712 <ip4_reass+0x13e>
      goto nullreturn;
 801a6d8:	e105      	b.n	801a8e6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6dc:	88db      	ldrh	r3, [r3, #6]
 801a6de:	b29b      	uxth	r3, r3
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	f7f6 fcbb 	bl	801105c <lwip_htons>
 801a6e6:	4603      	mov	r3, r0
 801a6e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d110      	bne.n	801a712 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6f2:	89db      	ldrh	r3, [r3, #14]
 801a6f4:	4618      	mov	r0, r3
 801a6f6:	f7f6 fcb1 	bl	801105c <lwip_htons>
 801a6fa:	4603      	mov	r3, r0
 801a6fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a700:	2b00      	cmp	r3, #0
 801a702:	d006      	beq.n	801a712 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a706:	3308      	adds	r3, #8
 801a708:	2214      	movs	r2, #20
 801a70a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a70c:	4618      	mov	r0, r3
 801a70e:	f001 f884 	bl	801b81a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a714:	88db      	ldrh	r3, [r3, #6]
 801a716:	b29b      	uxth	r3, r3
 801a718:	f003 0320 	and.w	r3, r3, #32
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	bf0c      	ite	eq
 801a720:	2301      	moveq	r3, #1
 801a722:	2300      	movne	r3, #0
 801a724:	b2db      	uxtb	r3, r3
 801a726:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a728:	69fb      	ldr	r3, [r7, #28]
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	d00e      	beq.n	801a74c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a72e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a730:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a732:	4413      	add	r3, r2
 801a734:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a736:	8b7a      	ldrh	r2, [r7, #26]
 801a738:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a73a:	429a      	cmp	r2, r3
 801a73c:	f0c0 80a0 	bcc.w	801a880 <ip4_reass+0x2ac>
 801a740:	8b7b      	ldrh	r3, [r7, #26]
 801a742:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801a746:	4293      	cmp	r3, r2
 801a748:	f200 809a 	bhi.w	801a880 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a74c:	69fa      	ldr	r2, [r7, #28]
 801a74e:	6879      	ldr	r1, [r7, #4]
 801a750:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a752:	f7ff fdd5 	bl	801a300 <ip_reass_chain_frag_into_datagram_and_validate>
 801a756:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a758:	697b      	ldr	r3, [r7, #20]
 801a75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a75e:	f000 809b 	beq.w	801a898 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a762:	4b48      	ldr	r3, [pc, #288]	@ (801a884 <ip4_reass+0x2b0>)
 801a764:	881a      	ldrh	r2, [r3, #0]
 801a766:	8c3b      	ldrh	r3, [r7, #32]
 801a768:	4413      	add	r3, r2
 801a76a:	b29a      	uxth	r2, r3
 801a76c:	4b45      	ldr	r3, [pc, #276]	@ (801a884 <ip4_reass+0x2b0>)
 801a76e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a770:	69fb      	ldr	r3, [r7, #28]
 801a772:	2b00      	cmp	r3, #0
 801a774:	d00d      	beq.n	801a792 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a776:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a778:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a77a:	4413      	add	r3, r2
 801a77c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a780:	8a7a      	ldrh	r2, [r7, #18]
 801a782:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a786:	7f9b      	ldrb	r3, [r3, #30]
 801a788:	f043 0301 	orr.w	r3, r3, #1
 801a78c:	b2da      	uxtb	r2, r3
 801a78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a790:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a792:	697b      	ldr	r3, [r7, #20]
 801a794:	2b01      	cmp	r3, #1
 801a796:	d171      	bne.n	801a87c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a79a:	8b9b      	ldrh	r3, [r3, #28]
 801a79c:	3314      	adds	r3, #20
 801a79e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7a2:	685b      	ldr	r3, [r3, #4]
 801a7a4:	685b      	ldr	r3, [r3, #4]
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7ac:	685b      	ldr	r3, [r3, #4]
 801a7ae:	685b      	ldr	r3, [r3, #4]
 801a7b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7b4:	3308      	adds	r3, #8
 801a7b6:	2214      	movs	r2, #20
 801a7b8:	4619      	mov	r1, r3
 801a7ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a7bc:	f001 f82d 	bl	801b81a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a7c0:	8a3b      	ldrh	r3, [r7, #16]
 801a7c2:	4618      	mov	r0, r3
 801a7c4:	f7f6 fc4a 	bl	801105c <lwip_htons>
 801a7c8:	4603      	mov	r3, r0
 801a7ca:	461a      	mov	r2, r3
 801a7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7ce:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7d2:	2200      	movs	r2, #0
 801a7d4:	719a      	strb	r2, [r3, #6]
 801a7d6:	2200      	movs	r2, #0
 801a7d8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7dc:	2200      	movs	r2, #0
 801a7de:	729a      	strb	r2, [r3, #10]
 801a7e0:	2200      	movs	r2, #0
 801a7e2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7e6:	685b      	ldr	r3, [r3, #4]
 801a7e8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a7ea:	e00d      	b.n	801a808 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a7ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a7ee:	685b      	ldr	r3, [r3, #4]
 801a7f0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a7f2:	2114      	movs	r1, #20
 801a7f4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801a7f6:	f7f8 f865 	bl	80128c4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a7fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a7fc:	6878      	ldr	r0, [r7, #4]
 801a7fe:	f7f8 f9b5 	bl	8012b6c <pbuf_cat>
      r = iprh->next_pbuf;
 801a802:	68fb      	ldr	r3, [r7, #12]
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801a808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	d1ee      	bne.n	801a7ec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a80e:	4b1e      	ldr	r3, [pc, #120]	@ (801a888 <ip4_reass+0x2b4>)
 801a810:	681b      	ldr	r3, [r3, #0]
 801a812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a814:	429a      	cmp	r2, r3
 801a816:	d102      	bne.n	801a81e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a818:	2300      	movs	r3, #0
 801a81a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a81c:	e010      	b.n	801a840 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a81e:	4b1a      	ldr	r3, [pc, #104]	@ (801a888 <ip4_reass+0x2b4>)
 801a820:	681b      	ldr	r3, [r3, #0]
 801a822:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a824:	e007      	b.n	801a836 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a82c:	429a      	cmp	r2, r3
 801a82e:	d006      	beq.n	801a83e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d1f4      	bne.n	801a826 <ip4_reass+0x252>
 801a83c:	e000      	b.n	801a840 <ip4_reass+0x26c>
          break;
 801a83e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a840:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a842:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a844:	f7ff fd2e 	bl	801a2a4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a848:	6878      	ldr	r0, [r7, #4]
 801a84a:	f7f8 f94f 	bl	8012aec <pbuf_clen>
 801a84e:	4603      	mov	r3, r0
 801a850:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a852:	4b0c      	ldr	r3, [pc, #48]	@ (801a884 <ip4_reass+0x2b0>)
 801a854:	881b      	ldrh	r3, [r3, #0]
 801a856:	8c3a      	ldrh	r2, [r7, #32]
 801a858:	429a      	cmp	r2, r3
 801a85a:	d906      	bls.n	801a86a <ip4_reass+0x296>
 801a85c:	4b0b      	ldr	r3, [pc, #44]	@ (801a88c <ip4_reass+0x2b8>)
 801a85e:	f240 229b 	movw	r2, #667	@ 0x29b
 801a862:	490b      	ldr	r1, [pc, #44]	@ (801a890 <ip4_reass+0x2bc>)
 801a864:	480b      	ldr	r0, [pc, #44]	@ (801a894 <ip4_reass+0x2c0>)
 801a866:	f000 fdf5 	bl	801b454 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a86a:	4b06      	ldr	r3, [pc, #24]	@ (801a884 <ip4_reass+0x2b0>)
 801a86c:	881a      	ldrh	r2, [r3, #0]
 801a86e:	8c3b      	ldrh	r3, [r7, #32]
 801a870:	1ad3      	subs	r3, r2, r3
 801a872:	b29a      	uxth	r2, r3
 801a874:	4b03      	ldr	r3, [pc, #12]	@ (801a884 <ip4_reass+0x2b0>)
 801a876:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	e038      	b.n	801a8ee <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a87c:	2300      	movs	r3, #0
 801a87e:	e036      	b.n	801a8ee <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801a880:	bf00      	nop
 801a882:	e00a      	b.n	801a89a <ip4_reass+0x2c6>
 801a884:	240082e4 	.word	0x240082e4
 801a888:	240082e0 	.word	0x240082e0
 801a88c:	0801efe0 	.word	0x0801efe0
 801a890:	0801f150 	.word	0x0801f150
 801a894:	0801f028 	.word	0x0801f028
    goto nullreturn_ipr;
 801a898:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d106      	bne.n	801a8ae <ip4_reass+0x2da>
 801a8a0:	4b15      	ldr	r3, [pc, #84]	@ (801a8f8 <ip4_reass+0x324>)
 801a8a2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801a8a6:	4915      	ldr	r1, [pc, #84]	@ (801a8fc <ip4_reass+0x328>)
 801a8a8:	4815      	ldr	r0, [pc, #84]	@ (801a900 <ip4_reass+0x32c>)
 801a8aa:	f000 fdd3 	bl	801b454 <iprintf>
  if (ipr->p == NULL) {
 801a8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8b0:	685b      	ldr	r3, [r3, #4]
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d116      	bne.n	801a8e4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a8b6:	4b13      	ldr	r3, [pc, #76]	@ (801a904 <ip4_reass+0x330>)
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a8bc:	429a      	cmp	r2, r3
 801a8be:	d006      	beq.n	801a8ce <ip4_reass+0x2fa>
 801a8c0:	4b0d      	ldr	r3, [pc, #52]	@ (801a8f8 <ip4_reass+0x324>)
 801a8c2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801a8c6:	4910      	ldr	r1, [pc, #64]	@ (801a908 <ip4_reass+0x334>)
 801a8c8:	480d      	ldr	r0, [pc, #52]	@ (801a900 <ip4_reass+0x32c>)
 801a8ca:	f000 fdc3 	bl	801b454 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a8ce:	2100      	movs	r1, #0
 801a8d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a8d2:	f7ff fce7 	bl	801a2a4 <ip_reass_dequeue_datagram>
 801a8d6:	e006      	b.n	801a8e6 <ip4_reass+0x312>
    goto nullreturn;
 801a8d8:	bf00      	nop
 801a8da:	e004      	b.n	801a8e6 <ip4_reass+0x312>
    goto nullreturn;
 801a8dc:	bf00      	nop
 801a8de:	e002      	b.n	801a8e6 <ip4_reass+0x312>
      goto nullreturn;
 801a8e0:	bf00      	nop
 801a8e2:	e000      	b.n	801a8e6 <ip4_reass+0x312>
  }

nullreturn:
 801a8e4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a8e6:	6878      	ldr	r0, [r7, #4]
 801a8e8:	f7f8 f872 	bl	80129d0 <pbuf_free>
  return NULL;
 801a8ec:	2300      	movs	r3, #0
}
 801a8ee:	4618      	mov	r0, r3
 801a8f0:	3738      	adds	r7, #56	@ 0x38
 801a8f2:	46bd      	mov	sp, r7
 801a8f4:	bd80      	pop	{r7, pc}
 801a8f6:	bf00      	nop
 801a8f8:	0801efe0 	.word	0x0801efe0
 801a8fc:	0801f16c 	.word	0x0801f16c
 801a900:	0801f028 	.word	0x0801f028
 801a904:	240082e0 	.word	0x240082e0
 801a908:	0801f178 	.word	0x0801f178

0801a90c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a90c:	b580      	push	{r7, lr}
 801a90e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a910:	2005      	movs	r0, #5
 801a912:	f7f7 f943 	bl	8011b9c <memp_malloc>
 801a916:	4603      	mov	r3, r0
}
 801a918:	4618      	mov	r0, r3
 801a91a:	bd80      	pop	{r7, pc}

0801a91c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b082      	sub	sp, #8
 801a920:	af00      	add	r7, sp, #0
 801a922:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	2b00      	cmp	r3, #0
 801a928:	d106      	bne.n	801a938 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a92a:	4b07      	ldr	r3, [pc, #28]	@ (801a948 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a92c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801a930:	4906      	ldr	r1, [pc, #24]	@ (801a94c <ip_frag_free_pbuf_custom_ref+0x30>)
 801a932:	4807      	ldr	r0, [pc, #28]	@ (801a950 <ip_frag_free_pbuf_custom_ref+0x34>)
 801a934:	f000 fd8e 	bl	801b454 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a938:	6879      	ldr	r1, [r7, #4]
 801a93a:	2005      	movs	r0, #5
 801a93c:	f7f7 f9a4 	bl	8011c88 <memp_free>
}
 801a940:	bf00      	nop
 801a942:	3708      	adds	r7, #8
 801a944:	46bd      	mov	sp, r7
 801a946:	bd80      	pop	{r7, pc}
 801a948:	0801efe0 	.word	0x0801efe0
 801a94c:	0801f198 	.word	0x0801f198
 801a950:	0801f028 	.word	0x0801f028

0801a954 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a954:	b580      	push	{r7, lr}
 801a956:	b084      	sub	sp, #16
 801a958:	af00      	add	r7, sp, #0
 801a95a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a960:	68fb      	ldr	r3, [r7, #12]
 801a962:	2b00      	cmp	r3, #0
 801a964:	d106      	bne.n	801a974 <ipfrag_free_pbuf_custom+0x20>
 801a966:	4b11      	ldr	r3, [pc, #68]	@ (801a9ac <ipfrag_free_pbuf_custom+0x58>)
 801a968:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801a96c:	4910      	ldr	r1, [pc, #64]	@ (801a9b0 <ipfrag_free_pbuf_custom+0x5c>)
 801a96e:	4811      	ldr	r0, [pc, #68]	@ (801a9b4 <ipfrag_free_pbuf_custom+0x60>)
 801a970:	f000 fd70 	bl	801b454 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a974:	68fa      	ldr	r2, [r7, #12]
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	429a      	cmp	r2, r3
 801a97a:	d006      	beq.n	801a98a <ipfrag_free_pbuf_custom+0x36>
 801a97c:	4b0b      	ldr	r3, [pc, #44]	@ (801a9ac <ipfrag_free_pbuf_custom+0x58>)
 801a97e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801a982:	490d      	ldr	r1, [pc, #52]	@ (801a9b8 <ipfrag_free_pbuf_custom+0x64>)
 801a984:	480b      	ldr	r0, [pc, #44]	@ (801a9b4 <ipfrag_free_pbuf_custom+0x60>)
 801a986:	f000 fd65 	bl	801b454 <iprintf>
  if (pcr->original != NULL) {
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	695b      	ldr	r3, [r3, #20]
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d004      	beq.n	801a99c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a992:	68fb      	ldr	r3, [r7, #12]
 801a994:	695b      	ldr	r3, [r3, #20]
 801a996:	4618      	mov	r0, r3
 801a998:	f7f8 f81a 	bl	80129d0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a99c:	68f8      	ldr	r0, [r7, #12]
 801a99e:	f7ff ffbd 	bl	801a91c <ip_frag_free_pbuf_custom_ref>
}
 801a9a2:	bf00      	nop
 801a9a4:	3710      	adds	r7, #16
 801a9a6:	46bd      	mov	sp, r7
 801a9a8:	bd80      	pop	{r7, pc}
 801a9aa:	bf00      	nop
 801a9ac:	0801efe0 	.word	0x0801efe0
 801a9b0:	0801f1a4 	.word	0x0801f1a4
 801a9b4:	0801f028 	.word	0x0801f028
 801a9b8:	0801f1b0 	.word	0x0801f1b0

0801a9bc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a9bc:	b580      	push	{r7, lr}
 801a9be:	b094      	sub	sp, #80	@ 0x50
 801a9c0:	af02      	add	r7, sp, #8
 801a9c2:	60f8      	str	r0, [r7, #12]
 801a9c4:	60b9      	str	r1, [r7, #8]
 801a9c6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a9c8:	2300      	movs	r3, #0
 801a9ca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a9ce:	68bb      	ldr	r3, [r7, #8]
 801a9d0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801a9d2:	3b14      	subs	r3, #20
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	da00      	bge.n	801a9da <ip4_frag+0x1e>
 801a9d8:	3307      	adds	r3, #7
 801a9da:	10db      	asrs	r3, r3, #3
 801a9dc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a9de:	2314      	movs	r3, #20
 801a9e0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a9e2:	68fb      	ldr	r3, [r7, #12]
 801a9e4:	685b      	ldr	r3, [r3, #4]
 801a9e6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801a9e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a9ea:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9ee:	781b      	ldrb	r3, [r3, #0]
 801a9f0:	f003 030f 	and.w	r3, r3, #15
 801a9f4:	b2db      	uxtb	r3, r3
 801a9f6:	009b      	lsls	r3, r3, #2
 801a9f8:	b2db      	uxtb	r3, r3
 801a9fa:	2b14      	cmp	r3, #20
 801a9fc:	d002      	beq.n	801aa04 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a9fe:	f06f 0305 	mvn.w	r3, #5
 801aa02:	e110      	b.n	801ac26 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801aa04:	68fb      	ldr	r3, [r7, #12]
 801aa06:	895b      	ldrh	r3, [r3, #10]
 801aa08:	2b13      	cmp	r3, #19
 801aa0a:	d809      	bhi.n	801aa20 <ip4_frag+0x64>
 801aa0c:	4b88      	ldr	r3, [pc, #544]	@ (801ac30 <ip4_frag+0x274>)
 801aa0e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801aa12:	4988      	ldr	r1, [pc, #544]	@ (801ac34 <ip4_frag+0x278>)
 801aa14:	4888      	ldr	r0, [pc, #544]	@ (801ac38 <ip4_frag+0x27c>)
 801aa16:	f000 fd1d 	bl	801b454 <iprintf>
 801aa1a:	f06f 0305 	mvn.w	r3, #5
 801aa1e:	e102      	b.n	801ac26 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801aa20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa22:	88db      	ldrh	r3, [r3, #6]
 801aa24:	b29b      	uxth	r3, r3
 801aa26:	4618      	mov	r0, r3
 801aa28:	f7f6 fb18 	bl	801105c <lwip_htons>
 801aa2c:	4603      	mov	r3, r0
 801aa2e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801aa30:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801aa32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801aa36:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801aa3a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801aa3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801aa40:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801aa42:	68fb      	ldr	r3, [r7, #12]
 801aa44:	891b      	ldrh	r3, [r3, #8]
 801aa46:	3b14      	subs	r3, #20
 801aa48:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801aa4c:	e0e1      	b.n	801ac12 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801aa4e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801aa50:	00db      	lsls	r3, r3, #3
 801aa52:	b29b      	uxth	r3, r3
 801aa54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801aa58:	4293      	cmp	r3, r2
 801aa5a:	bf28      	it	cs
 801aa5c:	4613      	movcs	r3, r2
 801aa5e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801aa60:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801aa64:	2114      	movs	r1, #20
 801aa66:	200e      	movs	r0, #14
 801aa68:	f7f7 fcce 	bl	8012408 <pbuf_alloc>
 801aa6c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801aa6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	f000 80d5 	beq.w	801ac20 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801aa76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa78:	895b      	ldrh	r3, [r3, #10]
 801aa7a:	2b13      	cmp	r3, #19
 801aa7c:	d806      	bhi.n	801aa8c <ip4_frag+0xd0>
 801aa7e:	4b6c      	ldr	r3, [pc, #432]	@ (801ac30 <ip4_frag+0x274>)
 801aa80:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801aa84:	496d      	ldr	r1, [pc, #436]	@ (801ac3c <ip4_frag+0x280>)
 801aa86:	486c      	ldr	r0, [pc, #432]	@ (801ac38 <ip4_frag+0x27c>)
 801aa88:	f000 fce4 	bl	801b454 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801aa8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa8e:	685b      	ldr	r3, [r3, #4]
 801aa90:	2214      	movs	r2, #20
 801aa92:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801aa94:	4618      	mov	r0, r3
 801aa96:	f000 fec0 	bl	801b81a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801aa9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa9c:	685b      	ldr	r3, [r3, #4]
 801aa9e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801aaa0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801aaa2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801aaa6:	e064      	b.n	801ab72 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	895a      	ldrh	r2, [r3, #10]
 801aaac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801aaae:	1ad3      	subs	r3, r2, r3
 801aab0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801aab2:	68fb      	ldr	r3, [r7, #12]
 801aab4:	895b      	ldrh	r3, [r3, #10]
 801aab6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801aab8:	429a      	cmp	r2, r3
 801aaba:	d906      	bls.n	801aaca <ip4_frag+0x10e>
 801aabc:	4b5c      	ldr	r3, [pc, #368]	@ (801ac30 <ip4_frag+0x274>)
 801aabe:	f240 322d 	movw	r2, #813	@ 0x32d
 801aac2:	495f      	ldr	r1, [pc, #380]	@ (801ac40 <ip4_frag+0x284>)
 801aac4:	485c      	ldr	r0, [pc, #368]	@ (801ac38 <ip4_frag+0x27c>)
 801aac6:	f000 fcc5 	bl	801b454 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801aaca:	8bfa      	ldrh	r2, [r7, #30]
 801aacc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801aad0:	4293      	cmp	r3, r2
 801aad2:	bf28      	it	cs
 801aad4:	4613      	movcs	r3, r2
 801aad6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801aada:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801aade:	2b00      	cmp	r3, #0
 801aae0:	d105      	bne.n	801aaee <ip4_frag+0x132>
        poff = 0;
 801aae2:	2300      	movs	r3, #0
 801aae4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801aae6:	68fb      	ldr	r3, [r7, #12]
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	60fb      	str	r3, [r7, #12]
        continue;
 801aaec:	e041      	b.n	801ab72 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801aaee:	f7ff ff0d 	bl	801a90c <ip_frag_alloc_pbuf_custom_ref>
 801aaf2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801aaf4:	69bb      	ldr	r3, [r7, #24]
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d103      	bne.n	801ab02 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801aafa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801aafc:	f7f7 ff68 	bl	80129d0 <pbuf_free>
        goto memerr;
 801ab00:	e08f      	b.n	801ac22 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ab02:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801ab04:	68fb      	ldr	r3, [r7, #12]
 801ab06:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ab08:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ab0a:	4413      	add	r3, r2
 801ab0c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801ab10:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801ab14:	9201      	str	r2, [sp, #4]
 801ab16:	9300      	str	r3, [sp, #0]
 801ab18:	4603      	mov	r3, r0
 801ab1a:	2241      	movs	r2, #65	@ 0x41
 801ab1c:	2000      	movs	r0, #0
 801ab1e:	f7f7 fd9d 	bl	801265c <pbuf_alloced_custom>
 801ab22:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801ab24:	697b      	ldr	r3, [r7, #20]
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d106      	bne.n	801ab38 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801ab2a:	69b8      	ldr	r0, [r7, #24]
 801ab2c:	f7ff fef6 	bl	801a91c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801ab30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ab32:	f7f7 ff4d 	bl	80129d0 <pbuf_free>
        goto memerr;
 801ab36:	e074      	b.n	801ac22 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801ab38:	68f8      	ldr	r0, [r7, #12]
 801ab3a:	f7f7 ffef 	bl	8012b1c <pbuf_ref>
      pcr->original = p;
 801ab3e:	69bb      	ldr	r3, [r7, #24]
 801ab40:	68fa      	ldr	r2, [r7, #12]
 801ab42:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ab44:	69bb      	ldr	r3, [r7, #24]
 801ab46:	4a3f      	ldr	r2, [pc, #252]	@ (801ac44 <ip4_frag+0x288>)
 801ab48:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ab4a:	6979      	ldr	r1, [r7, #20]
 801ab4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ab4e:	f7f8 f80d 	bl	8012b6c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801ab52:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801ab56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ab5a:	1ad3      	subs	r3, r2, r3
 801ab5c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801ab60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d004      	beq.n	801ab72 <ip4_frag+0x1b6>
        poff = 0;
 801ab68:	2300      	movs	r3, #0
 801ab6a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801ab72:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d196      	bne.n	801aaa8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801ab7a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801ab7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ab80:	4413      	add	r3, r2
 801ab82:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ab84:	68bb      	ldr	r3, [r7, #8]
 801ab86:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801ab88:	f1a3 0213 	sub.w	r2, r3, #19
 801ab8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ab90:	429a      	cmp	r2, r3
 801ab92:	bfcc      	ite	gt
 801ab94:	2301      	movgt	r3, #1
 801ab96:	2300      	movle	r3, #0
 801ab98:	b2db      	uxtb	r3, r3
 801ab9a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ab9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801aba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801aba4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801aba6:	6a3b      	ldr	r3, [r7, #32]
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d002      	beq.n	801abb2 <ip4_frag+0x1f6>
 801abac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d003      	beq.n	801abba <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801abb2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801abb4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801abb8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801abba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801abbc:	4618      	mov	r0, r3
 801abbe:	f7f6 fa4d 	bl	801105c <lwip_htons>
 801abc2:	4603      	mov	r3, r0
 801abc4:	461a      	mov	r2, r3
 801abc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abc8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801abca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801abcc:	3314      	adds	r3, #20
 801abce:	b29b      	uxth	r3, r3
 801abd0:	4618      	mov	r0, r3
 801abd2:	f7f6 fa43 	bl	801105c <lwip_htons>
 801abd6:	4603      	mov	r3, r0
 801abd8:	461a      	mov	r2, r3
 801abda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abdc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801abde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abe0:	2200      	movs	r2, #0
 801abe2:	729a      	strb	r2, [r3, #10]
 801abe4:	2200      	movs	r2, #0
 801abe6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801abe8:	68bb      	ldr	r3, [r7, #8]
 801abea:	695b      	ldr	r3, [r3, #20]
 801abec:	687a      	ldr	r2, [r7, #4]
 801abee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801abf0:	68b8      	ldr	r0, [r7, #8]
 801abf2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801abf4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801abf6:	f7f7 feeb 	bl	80129d0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801abfa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801abfe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ac00:	1ad3      	subs	r3, r2, r3
 801ac02:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801ac06:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801ac0a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ac0c:	4413      	add	r3, r2
 801ac0e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801ac12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	f47f af19 	bne.w	801aa4e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801ac1c:	2300      	movs	r3, #0
 801ac1e:	e002      	b.n	801ac26 <ip4_frag+0x26a>
      goto memerr;
 801ac20:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801ac22:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ac26:	4618      	mov	r0, r3
 801ac28:	3748      	adds	r7, #72	@ 0x48
 801ac2a:	46bd      	mov	sp, r7
 801ac2c:	bd80      	pop	{r7, pc}
 801ac2e:	bf00      	nop
 801ac30:	0801efe0 	.word	0x0801efe0
 801ac34:	0801f1bc 	.word	0x0801f1bc
 801ac38:	0801f028 	.word	0x0801f028
 801ac3c:	0801f1d8 	.word	0x0801f1d8
 801ac40:	0801f1f8 	.word	0x0801f1f8
 801ac44:	0801a955 	.word	0x0801a955

0801ac48 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801ac48:	b580      	push	{r7, lr}
 801ac4a:	b086      	sub	sp, #24
 801ac4c:	af00      	add	r7, sp, #0
 801ac4e:	6078      	str	r0, [r7, #4]
 801ac50:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801ac52:	230e      	movs	r3, #14
 801ac54:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	895b      	ldrh	r3, [r3, #10]
 801ac5a:	2b0e      	cmp	r3, #14
 801ac5c:	d96e      	bls.n	801ad3c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	7bdb      	ldrb	r3, [r3, #15]
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d106      	bne.n	801ac74 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801ac66:	683b      	ldr	r3, [r7, #0]
 801ac68:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ac6c:	3301      	adds	r3, #1
 801ac6e:	b2da      	uxtb	r2, r3
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	685b      	ldr	r3, [r3, #4]
 801ac78:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ac7a:	693b      	ldr	r3, [r7, #16]
 801ac7c:	7b1a      	ldrb	r2, [r3, #12]
 801ac7e:	7b5b      	ldrb	r3, [r3, #13]
 801ac80:	021b      	lsls	r3, r3, #8
 801ac82:	4313      	orrs	r3, r2
 801ac84:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ac86:	693b      	ldr	r3, [r7, #16]
 801ac88:	781b      	ldrb	r3, [r3, #0]
 801ac8a:	f003 0301 	and.w	r3, r3, #1
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d023      	beq.n	801acda <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ac92:	693b      	ldr	r3, [r7, #16]
 801ac94:	781b      	ldrb	r3, [r3, #0]
 801ac96:	2b01      	cmp	r3, #1
 801ac98:	d10f      	bne.n	801acba <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ac9a:	693b      	ldr	r3, [r7, #16]
 801ac9c:	785b      	ldrb	r3, [r3, #1]
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	d11b      	bne.n	801acda <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801aca2:	693b      	ldr	r3, [r7, #16]
 801aca4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801aca6:	2b5e      	cmp	r3, #94	@ 0x5e
 801aca8:	d117      	bne.n	801acda <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	7b5b      	ldrb	r3, [r3, #13]
 801acae:	f043 0310 	orr.w	r3, r3, #16
 801acb2:	b2da      	uxtb	r2, r3
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	735a      	strb	r2, [r3, #13]
 801acb8:	e00f      	b.n	801acda <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801acba:	693b      	ldr	r3, [r7, #16]
 801acbc:	2206      	movs	r2, #6
 801acbe:	4928      	ldr	r1, [pc, #160]	@ (801ad60 <ethernet_input+0x118>)
 801acc0:	4618      	mov	r0, r3
 801acc2:	f000 fcb1 	bl	801b628 <memcmp>
 801acc6:	4603      	mov	r3, r0
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d106      	bne.n	801acda <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	7b5b      	ldrb	r3, [r3, #13]
 801acd0:	f043 0308 	orr.w	r3, r3, #8
 801acd4:	b2da      	uxtb	r2, r3
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801acda:	89fb      	ldrh	r3, [r7, #14]
 801acdc:	2b08      	cmp	r3, #8
 801acde:	d003      	beq.n	801ace8 <ethernet_input+0xa0>
 801ace0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801ace4:	d014      	beq.n	801ad10 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801ace6:	e032      	b.n	801ad4e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ace8:	683b      	ldr	r3, [r7, #0]
 801acea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801acee:	f003 0308 	and.w	r3, r3, #8
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d024      	beq.n	801ad40 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801acf6:	8afb      	ldrh	r3, [r7, #22]
 801acf8:	4619      	mov	r1, r3
 801acfa:	6878      	ldr	r0, [r7, #4]
 801acfc:	f7f7 fde2 	bl	80128c4 <pbuf_remove_header>
 801ad00:	4603      	mov	r3, r0
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d11e      	bne.n	801ad44 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801ad06:	6839      	ldr	r1, [r7, #0]
 801ad08:	6878      	ldr	r0, [r7, #4]
 801ad0a:	f7fe ff21 	bl	8019b50 <ip4_input>
      break;
 801ad0e:	e013      	b.n	801ad38 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ad10:	683b      	ldr	r3, [r7, #0]
 801ad12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ad16:	f003 0308 	and.w	r3, r3, #8
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	d014      	beq.n	801ad48 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ad1e:	8afb      	ldrh	r3, [r7, #22]
 801ad20:	4619      	mov	r1, r3
 801ad22:	6878      	ldr	r0, [r7, #4]
 801ad24:	f7f7 fdce 	bl	80128c4 <pbuf_remove_header>
 801ad28:	4603      	mov	r3, r0
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d10e      	bne.n	801ad4c <ethernet_input+0x104>
        etharp_input(p, netif);
 801ad2e:	6839      	ldr	r1, [r7, #0]
 801ad30:	6878      	ldr	r0, [r7, #4]
 801ad32:	f7fe f89b 	bl	8018e6c <etharp_input>
      break;
 801ad36:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801ad38:	2300      	movs	r3, #0
 801ad3a:	e00c      	b.n	801ad56 <ethernet_input+0x10e>
    goto free_and_return;
 801ad3c:	bf00      	nop
 801ad3e:	e006      	b.n	801ad4e <ethernet_input+0x106>
        goto free_and_return;
 801ad40:	bf00      	nop
 801ad42:	e004      	b.n	801ad4e <ethernet_input+0x106>
        goto free_and_return;
 801ad44:	bf00      	nop
 801ad46:	e002      	b.n	801ad4e <ethernet_input+0x106>
        goto free_and_return;
 801ad48:	bf00      	nop
 801ad4a:	e000      	b.n	801ad4e <ethernet_input+0x106>
        goto free_and_return;
 801ad4c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801ad4e:	6878      	ldr	r0, [r7, #4]
 801ad50:	f7f7 fe3e 	bl	80129d0 <pbuf_free>
  return ERR_OK;
 801ad54:	2300      	movs	r3, #0
}
 801ad56:	4618      	mov	r0, r3
 801ad58:	3718      	adds	r7, #24
 801ad5a:	46bd      	mov	sp, r7
 801ad5c:	bd80      	pop	{r7, pc}
 801ad5e:	bf00      	nop
 801ad60:	0801f418 	.word	0x0801f418

0801ad64 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ad64:	b580      	push	{r7, lr}
 801ad66:	b086      	sub	sp, #24
 801ad68:	af00      	add	r7, sp, #0
 801ad6a:	60f8      	str	r0, [r7, #12]
 801ad6c:	60b9      	str	r1, [r7, #8]
 801ad6e:	607a      	str	r2, [r7, #4]
 801ad70:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ad72:	8c3b      	ldrh	r3, [r7, #32]
 801ad74:	4618      	mov	r0, r3
 801ad76:	f7f6 f971 	bl	801105c <lwip_htons>
 801ad7a:	4603      	mov	r3, r0
 801ad7c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ad7e:	210e      	movs	r1, #14
 801ad80:	68b8      	ldr	r0, [r7, #8]
 801ad82:	f7f7 fd8f 	bl	80128a4 <pbuf_add_header>
 801ad86:	4603      	mov	r3, r0
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d125      	bne.n	801add8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ad8c:	68bb      	ldr	r3, [r7, #8]
 801ad8e:	685b      	ldr	r3, [r3, #4]
 801ad90:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ad92:	693b      	ldr	r3, [r7, #16]
 801ad94:	8afa      	ldrh	r2, [r7, #22]
 801ad96:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ad98:	693b      	ldr	r3, [r7, #16]
 801ad9a:	2206      	movs	r2, #6
 801ad9c:	6839      	ldr	r1, [r7, #0]
 801ad9e:	4618      	mov	r0, r3
 801ada0:	f000 fd3b 	bl	801b81a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ada4:	693b      	ldr	r3, [r7, #16]
 801ada6:	3306      	adds	r3, #6
 801ada8:	2206      	movs	r2, #6
 801adaa:	6879      	ldr	r1, [r7, #4]
 801adac:	4618      	mov	r0, r3
 801adae:	f000 fd34 	bl	801b81a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801adb2:	68fb      	ldr	r3, [r7, #12]
 801adb4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801adb8:	2b06      	cmp	r3, #6
 801adba:	d006      	beq.n	801adca <ethernet_output+0x66>
 801adbc:	4b0a      	ldr	r3, [pc, #40]	@ (801ade8 <ethernet_output+0x84>)
 801adbe:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801adc2:	490a      	ldr	r1, [pc, #40]	@ (801adec <ethernet_output+0x88>)
 801adc4:	480a      	ldr	r0, [pc, #40]	@ (801adf0 <ethernet_output+0x8c>)
 801adc6:	f000 fb45 	bl	801b454 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801adca:	68fb      	ldr	r3, [r7, #12]
 801adcc:	699b      	ldr	r3, [r3, #24]
 801adce:	68b9      	ldr	r1, [r7, #8]
 801add0:	68f8      	ldr	r0, [r7, #12]
 801add2:	4798      	blx	r3
 801add4:	4603      	mov	r3, r0
 801add6:	e002      	b.n	801adde <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801add8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801adda:	f06f 0301 	mvn.w	r3, #1
}
 801adde:	4618      	mov	r0, r3
 801ade0:	3718      	adds	r7, #24
 801ade2:	46bd      	mov	sp, r7
 801ade4:	bd80      	pop	{r7, pc}
 801ade6:	bf00      	nop
 801ade8:	0801f208 	.word	0x0801f208
 801adec:	0801f240 	.word	0x0801f240
 801adf0:	0801f274 	.word	0x0801f274

0801adf4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801adf4:	b580      	push	{r7, lr}
 801adf6:	b082      	sub	sp, #8
 801adf8:	af00      	add	r7, sp, #0
 801adfa:	6078      	str	r0, [r7, #4]
 801adfc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801adfe:	683b      	ldr	r3, [r7, #0]
 801ae00:	2200      	movs	r2, #0
 801ae02:	2104      	movs	r1, #4
 801ae04:	4618      	mov	r0, r3
 801ae06:	f7f2 fc93 	bl	800d730 <osMessageQueueNew>
 801ae0a:	4602      	mov	r2, r0
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	d102      	bne.n	801ae1e <sys_mbox_new+0x2a>
    return ERR_MEM;
 801ae18:	f04f 33ff 	mov.w	r3, #4294967295
 801ae1c:	e000      	b.n	801ae20 <sys_mbox_new+0x2c>

  return ERR_OK;
 801ae1e:	2300      	movs	r3, #0
}
 801ae20:	4618      	mov	r0, r3
 801ae22:	3708      	adds	r7, #8
 801ae24:	46bd      	mov	sp, r7
 801ae26:	bd80      	pop	{r7, pc}

0801ae28 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ae28:	b580      	push	{r7, lr}
 801ae2a:	b084      	sub	sp, #16
 801ae2c:	af00      	add	r7, sp, #0
 801ae2e:	6078      	str	r0, [r7, #4]
 801ae30:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	6818      	ldr	r0, [r3, #0]
 801ae36:	4639      	mov	r1, r7
 801ae38:	2300      	movs	r3, #0
 801ae3a:	2200      	movs	r2, #0
 801ae3c:	f7f2 fcec 	bl	800d818 <osMessageQueuePut>
 801ae40:	4603      	mov	r3, r0
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d102      	bne.n	801ae4c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801ae46:	2300      	movs	r3, #0
 801ae48:	73fb      	strb	r3, [r7, #15]
 801ae4a:	e001      	b.n	801ae50 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ae4c:	23ff      	movs	r3, #255	@ 0xff
 801ae4e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801ae50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ae54:	4618      	mov	r0, r3
 801ae56:	3710      	adds	r7, #16
 801ae58:	46bd      	mov	sp, r7
 801ae5a:	bd80      	pop	{r7, pc}

0801ae5c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b086      	sub	sp, #24
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	60f8      	str	r0, [r7, #12]
 801ae64:	60b9      	str	r1, [r7, #8]
 801ae66:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801ae68:	f7f2 f972 	bl	800d150 <osKernelGetTickCount>
 801ae6c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d013      	beq.n	801ae9c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	6818      	ldr	r0, [r3, #0]
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	2200      	movs	r2, #0
 801ae7c:	68b9      	ldr	r1, [r7, #8]
 801ae7e:	f7f2 fd2b 	bl	800d8d8 <osMessageQueueGet>
 801ae82:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801ae84:	693b      	ldr	r3, [r7, #16]
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d105      	bne.n	801ae96 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801ae8a:	f7f2 f961 	bl	800d150 <osKernelGetTickCount>
 801ae8e:	4602      	mov	r2, r0
 801ae90:	697b      	ldr	r3, [r7, #20]
 801ae92:	1ad3      	subs	r3, r2, r3
 801ae94:	e00f      	b.n	801aeb6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ae96:	f04f 33ff 	mov.w	r3, #4294967295
 801ae9a:	e00c      	b.n	801aeb6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	6818      	ldr	r0, [r3, #0]
 801aea0:	f04f 33ff 	mov.w	r3, #4294967295
 801aea4:	2200      	movs	r2, #0
 801aea6:	68b9      	ldr	r1, [r7, #8]
 801aea8:	f7f2 fd16 	bl	800d8d8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801aeac:	f7f2 f950 	bl	800d150 <osKernelGetTickCount>
 801aeb0:	4602      	mov	r2, r0
 801aeb2:	697b      	ldr	r3, [r7, #20]
 801aeb4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801aeb6:	4618      	mov	r0, r3
 801aeb8:	3718      	adds	r7, #24
 801aeba:	46bd      	mov	sp, r7
 801aebc:	bd80      	pop	{r7, pc}

0801aebe <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801aebe:	b480      	push	{r7}
 801aec0:	b083      	sub	sp, #12
 801aec2:	af00      	add	r7, sp, #0
 801aec4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	d101      	bne.n	801aed2 <sys_mbox_valid+0x14>
    return 0;
 801aece:	2300      	movs	r3, #0
 801aed0:	e000      	b.n	801aed4 <sys_mbox_valid+0x16>
  else
    return 1;
 801aed2:	2301      	movs	r3, #1
}
 801aed4:	4618      	mov	r0, r3
 801aed6:	370c      	adds	r7, #12
 801aed8:	46bd      	mov	sp, r7
 801aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aede:	4770      	bx	lr

0801aee0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801aee0:	b580      	push	{r7, lr}
 801aee2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801aee4:	2000      	movs	r0, #0
 801aee6:	f7f2 f9f5 	bl	800d2d4 <osMutexNew>
 801aeea:	4603      	mov	r3, r0
 801aeec:	4a01      	ldr	r2, [pc, #4]	@ (801aef4 <sys_init+0x14>)
 801aeee:	6013      	str	r3, [r2, #0]
#endif
}
 801aef0:	bf00      	nop
 801aef2:	bd80      	pop	{r7, pc}
 801aef4:	240082e8 	.word	0x240082e8

0801aef8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801aef8:	b580      	push	{r7, lr}
 801aefa:	b082      	sub	sp, #8
 801aefc:	af00      	add	r7, sp, #0
 801aefe:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801af00:	2000      	movs	r0, #0
 801af02:	f7f2 f9e7 	bl	800d2d4 <osMutexNew>
 801af06:	4602      	mov	r2, r0
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	2b00      	cmp	r3, #0
 801af12:	d102      	bne.n	801af1a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801af14:	f04f 33ff 	mov.w	r3, #4294967295
 801af18:	e000      	b.n	801af1c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801af1a:	2300      	movs	r3, #0
}
 801af1c:	4618      	mov	r0, r3
 801af1e:	3708      	adds	r7, #8
 801af20:	46bd      	mov	sp, r7
 801af22:	bd80      	pop	{r7, pc}

0801af24 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801af24:	b580      	push	{r7, lr}
 801af26:	b082      	sub	sp, #8
 801af28:	af00      	add	r7, sp, #0
 801af2a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	f04f 31ff 	mov.w	r1, #4294967295
 801af34:	4618      	mov	r0, r3
 801af36:	f7f2 fa53 	bl	800d3e0 <osMutexAcquire>
#endif
}
 801af3a:	bf00      	nop
 801af3c:	3708      	adds	r7, #8
 801af3e:	46bd      	mov	sp, r7
 801af40:	bd80      	pop	{r7, pc}

0801af42 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801af42:	b580      	push	{r7, lr}
 801af44:	b082      	sub	sp, #8
 801af46:	af00      	add	r7, sp, #0
 801af48:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	681b      	ldr	r3, [r3, #0]
 801af4e:	4618      	mov	r0, r3
 801af50:	f7f2 fa91 	bl	800d476 <osMutexRelease>
}
 801af54:	bf00      	nop
 801af56:	3708      	adds	r7, #8
 801af58:	46bd      	mov	sp, r7
 801af5a:	bd80      	pop	{r7, pc}

0801af5c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801af5c:	b580      	push	{r7, lr}
 801af5e:	b08e      	sub	sp, #56	@ 0x38
 801af60:	af00      	add	r7, sp, #0
 801af62:	60f8      	str	r0, [r7, #12]
 801af64:	60b9      	str	r1, [r7, #8]
 801af66:	607a      	str	r2, [r7, #4]
 801af68:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801af6a:	f107 0314 	add.w	r3, r7, #20
 801af6e:	2224      	movs	r2, #36	@ 0x24
 801af70:	2100      	movs	r1, #0
 801af72:	4618      	mov	r0, r3
 801af74:	f000 fb68 	bl	801b648 <memset>
 801af78:	68fb      	ldr	r3, [r7, #12]
 801af7a:	617b      	str	r3, [r7, #20]
 801af7c:	683b      	ldr	r3, [r7, #0]
 801af7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801af80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801af82:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801af84:	f107 0314 	add.w	r3, r7, #20
 801af88:	461a      	mov	r2, r3
 801af8a:	6879      	ldr	r1, [r7, #4]
 801af8c:	68b8      	ldr	r0, [r7, #8]
 801af8e:	f7f2 f8f4 	bl	800d17a <osThreadNew>
 801af92:	4603      	mov	r3, r0
#endif
}
 801af94:	4618      	mov	r0, r3
 801af96:	3738      	adds	r7, #56	@ 0x38
 801af98:	46bd      	mov	sp, r7
 801af9a:	bd80      	pop	{r7, pc}

0801af9c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801af9c:	b580      	push	{r7, lr}
 801af9e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801afa0:	4b04      	ldr	r3, [pc, #16]	@ (801afb4 <sys_arch_protect+0x18>)
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	f04f 31ff 	mov.w	r1, #4294967295
 801afa8:	4618      	mov	r0, r3
 801afaa:	f7f2 fa19 	bl	800d3e0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801afae:	2301      	movs	r3, #1
}
 801afb0:	4618      	mov	r0, r3
 801afb2:	bd80      	pop	{r7, pc}
 801afb4:	240082e8 	.word	0x240082e8

0801afb8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801afb8:	b580      	push	{r7, lr}
 801afba:	b082      	sub	sp, #8
 801afbc:	af00      	add	r7, sp, #0
 801afbe:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801afc0:	4b04      	ldr	r3, [pc, #16]	@ (801afd4 <sys_arch_unprotect+0x1c>)
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	4618      	mov	r0, r3
 801afc6:	f7f2 fa56 	bl	800d476 <osMutexRelease>
}
 801afca:	bf00      	nop
 801afcc:	3708      	adds	r7, #8
 801afce:	46bd      	mov	sp, r7
 801afd0:	bd80      	pop	{r7, pc}
 801afd2:	bf00      	nop
 801afd4:	240082e8 	.word	0x240082e8

0801afd8 <VLV_Set_Voltage>:

// Sets the voltage for each valve channel through configuration of the shift register
// config is the desired output for channels Q_a through Q_h of the shift register.
// ex: config = 00000001 would make only Q_a turn on and turn off all others.
// NOTE: This function is blocking and will take a minimum of 2ms to complete.
void VLV_Set_Voltage(Shift_Reg reg, uint8_t config) {
 801afd8:	b084      	sub	sp, #16
 801afda:	b580      	push	{r7, lr}
 801afdc:	b082      	sub	sp, #8
 801afde:	af00      	add	r7, sp, #0
 801afe0:	f107 0c10 	add.w	ip, r7, #16
 801afe4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // Clear the shift register
    HAL_GPIO_WritePin(reg.VLV_CLR_GPIO_Port, reg.VLV_CLR_GPIO_Pin, GPIO_PIN_RESET);
 801afe8:	6a3b      	ldr	r3, [r7, #32]
 801afea:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 801afec:	2200      	movs	r2, #0
 801afee:	4618      	mov	r0, r3
 801aff0:	f7ea fdf2 	bl	8005bd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(reg.VLV_CLR_GPIO_Port, reg.VLV_CLR_GPIO_Pin, GPIO_PIN_SET);
 801aff4:	6a3b      	ldr	r3, [r7, #32]
 801aff6:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 801aff8:	2201      	movs	r2, #1
 801affa:	4618      	mov	r0, r3
 801affc:	f7ea fdec 	bl	8005bd8 <HAL_GPIO_WritePin>

    // Shift in the configuration bits
    for (int i = 7; i >= 0; i--) {
 801b000:	2307      	movs	r3, #7
 801b002:	607b      	str	r3, [r7, #4]
 801b004:	e024      	b.n	801b050 <VLV_Set_Voltage+0x78>
        // Set the data (CTRL) pin
        GPIO_PinState state = config & (1 << i); // Get the i-th bit of config
 801b006:	2201      	movs	r2, #1
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	fa02 f303 	lsl.w	r3, r2, r3
 801b00e:	b25a      	sxtb	r2, r3
 801b010:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 801b014:	4013      	ands	r3, r2
 801b016:	b25b      	sxtb	r3, r3
 801b018:	70fb      	strb	r3, [r7, #3]
        HAL_GPIO_WritePin(reg.VLV_CTR_GPIO_Port, reg.VLV_CTR_GPIO_Pin, state);
 801b01a:	693b      	ldr	r3, [r7, #16]
 801b01c:	8ab9      	ldrh	r1, [r7, #20]
 801b01e:	78fa      	ldrb	r2, [r7, #3]
 801b020:	4618      	mov	r0, r3
 801b022:	f7ea fdd9 	bl	8005bd8 <HAL_GPIO_WritePin>
        // Generate a clock pulse
        HAL_GPIO_WritePin(reg.VLV_CLK_GPIO_Port, reg.VLV_CLK_GPIO_Pin, GPIO_PIN_SET);
 801b026:	69bb      	ldr	r3, [r7, #24]
 801b028:	8bb9      	ldrh	r1, [r7, #28]
 801b02a:	2201      	movs	r2, #1
 801b02c:	4618      	mov	r0, r3
 801b02e:	f7ea fdd3 	bl	8005bd8 <HAL_GPIO_WritePin>
        vTaskDelay(pdMS_TO_TICKS(1)); // Small delay to meet timing requirements
 801b032:	2001      	movs	r0, #1
 801b034:	f7f4 f838 	bl	800f0a8 <vTaskDelay>
        // TODO: do this in a way that doesn't block, or at least blocks-less
        HAL_GPIO_WritePin(reg.VLV_CLK_GPIO_Port, reg.VLV_CLK_GPIO_Pin, GPIO_PIN_RESET);
 801b038:	69bb      	ldr	r3, [r7, #24]
 801b03a:	8bb9      	ldrh	r1, [r7, #28]
 801b03c:	2200      	movs	r2, #0
 801b03e:	4618      	mov	r0, r3
 801b040:	f7ea fdca 	bl	8005bd8 <HAL_GPIO_WritePin>
        vTaskDelay(pdMS_TO_TICKS(1)); // Small delay to meet timing requirements
 801b044:	2001      	movs	r0, #1
 801b046:	f7f4 f82f 	bl	800f0a8 <vTaskDelay>
    for (int i = 7; i >= 0; i--) {
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	3b01      	subs	r3, #1
 801b04e:	607b      	str	r3, [r7, #4]
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	2b00      	cmp	r3, #0
 801b054:	dad7      	bge.n	801b006 <VLV_Set_Voltage+0x2e>
    }
}
 801b056:	bf00      	nop
 801b058:	bf00      	nop
 801b05a:	3708      	adds	r7, #8
 801b05c:	46bd      	mov	sp, r7
 801b05e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b062:	b004      	add	sp, #16
 801b064:	4770      	bx	lr

0801b066 <VLV_Toggle>:

void VLV_Toggle(Valve vlv) {
 801b066:	b590      	push	{r4, r7, lr}
 801b068:	b085      	sub	sp, #20
 801b06a:	af00      	add	r7, sp, #0
 801b06c:	463c      	mov	r4, r7
 801b06e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_GPIO_TogglePin(vlv.VLV_EN_GPIO_Port, vlv.VLV_EN_GPIO_Pin);
 801b072:	683b      	ldr	r3, [r7, #0]
 801b074:	88ba      	ldrh	r2, [r7, #4]
 801b076:	4611      	mov	r1, r2
 801b078:	4618      	mov	r0, r3
 801b07a:	f7ea fdc6 	bl	8005c0a <HAL_GPIO_TogglePin>
}
 801b07e:	bf00      	nop
 801b080:	3714      	adds	r7, #20
 801b082:	46bd      	mov	sp, r7
 801b084:	bd90      	pop	{r4, r7, pc}
	...

0801b088 <__assert_func>:
 801b088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b08a:	4614      	mov	r4, r2
 801b08c:	461a      	mov	r2, r3
 801b08e:	4b09      	ldr	r3, [pc, #36]	@ (801b0b4 <__assert_func+0x2c>)
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	4605      	mov	r5, r0
 801b094:	68d8      	ldr	r0, [r3, #12]
 801b096:	b14c      	cbz	r4, 801b0ac <__assert_func+0x24>
 801b098:	4b07      	ldr	r3, [pc, #28]	@ (801b0b8 <__assert_func+0x30>)
 801b09a:	9100      	str	r1, [sp, #0]
 801b09c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b0a0:	4906      	ldr	r1, [pc, #24]	@ (801b0bc <__assert_func+0x34>)
 801b0a2:	462b      	mov	r3, r5
 801b0a4:	f000 f9a6 	bl	801b3f4 <fiprintf>
 801b0a8:	f000 fbc5 	bl	801b836 <abort>
 801b0ac:	4b04      	ldr	r3, [pc, #16]	@ (801b0c0 <__assert_func+0x38>)
 801b0ae:	461c      	mov	r4, r3
 801b0b0:	e7f3      	b.n	801b09a <__assert_func+0x12>
 801b0b2:	bf00      	nop
 801b0b4:	24000040 	.word	0x24000040
 801b0b8:	0801f426 	.word	0x0801f426
 801b0bc:	0801f433 	.word	0x0801f433
 801b0c0:	0801f461 	.word	0x0801f461

0801b0c4 <malloc>:
 801b0c4:	4b02      	ldr	r3, [pc, #8]	@ (801b0d0 <malloc+0xc>)
 801b0c6:	4601      	mov	r1, r0
 801b0c8:	6818      	ldr	r0, [r3, #0]
 801b0ca:	f000 b825 	b.w	801b118 <_malloc_r>
 801b0ce:	bf00      	nop
 801b0d0:	24000040 	.word	0x24000040

0801b0d4 <sbrk_aligned>:
 801b0d4:	b570      	push	{r4, r5, r6, lr}
 801b0d6:	4e0f      	ldr	r6, [pc, #60]	@ (801b114 <sbrk_aligned+0x40>)
 801b0d8:	460c      	mov	r4, r1
 801b0da:	6831      	ldr	r1, [r6, #0]
 801b0dc:	4605      	mov	r5, r0
 801b0de:	b911      	cbnz	r1, 801b0e6 <sbrk_aligned+0x12>
 801b0e0:	f000 fb4c 	bl	801b77c <_sbrk_r>
 801b0e4:	6030      	str	r0, [r6, #0]
 801b0e6:	4621      	mov	r1, r4
 801b0e8:	4628      	mov	r0, r5
 801b0ea:	f000 fb47 	bl	801b77c <_sbrk_r>
 801b0ee:	1c43      	adds	r3, r0, #1
 801b0f0:	d103      	bne.n	801b0fa <sbrk_aligned+0x26>
 801b0f2:	f04f 34ff 	mov.w	r4, #4294967295
 801b0f6:	4620      	mov	r0, r4
 801b0f8:	bd70      	pop	{r4, r5, r6, pc}
 801b0fa:	1cc4      	adds	r4, r0, #3
 801b0fc:	f024 0403 	bic.w	r4, r4, #3
 801b100:	42a0      	cmp	r0, r4
 801b102:	d0f8      	beq.n	801b0f6 <sbrk_aligned+0x22>
 801b104:	1a21      	subs	r1, r4, r0
 801b106:	4628      	mov	r0, r5
 801b108:	f000 fb38 	bl	801b77c <_sbrk_r>
 801b10c:	3001      	adds	r0, #1
 801b10e:	d1f2      	bne.n	801b0f6 <sbrk_aligned+0x22>
 801b110:	e7ef      	b.n	801b0f2 <sbrk_aligned+0x1e>
 801b112:	bf00      	nop
 801b114:	240082ec 	.word	0x240082ec

0801b118 <_malloc_r>:
 801b118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b11c:	1ccd      	adds	r5, r1, #3
 801b11e:	f025 0503 	bic.w	r5, r5, #3
 801b122:	3508      	adds	r5, #8
 801b124:	2d0c      	cmp	r5, #12
 801b126:	bf38      	it	cc
 801b128:	250c      	movcc	r5, #12
 801b12a:	2d00      	cmp	r5, #0
 801b12c:	4606      	mov	r6, r0
 801b12e:	db01      	blt.n	801b134 <_malloc_r+0x1c>
 801b130:	42a9      	cmp	r1, r5
 801b132:	d904      	bls.n	801b13e <_malloc_r+0x26>
 801b134:	230c      	movs	r3, #12
 801b136:	6033      	str	r3, [r6, #0]
 801b138:	2000      	movs	r0, #0
 801b13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b13e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b214 <_malloc_r+0xfc>
 801b142:	f000 f869 	bl	801b218 <__malloc_lock>
 801b146:	f8d8 3000 	ldr.w	r3, [r8]
 801b14a:	461c      	mov	r4, r3
 801b14c:	bb44      	cbnz	r4, 801b1a0 <_malloc_r+0x88>
 801b14e:	4629      	mov	r1, r5
 801b150:	4630      	mov	r0, r6
 801b152:	f7ff ffbf 	bl	801b0d4 <sbrk_aligned>
 801b156:	1c43      	adds	r3, r0, #1
 801b158:	4604      	mov	r4, r0
 801b15a:	d158      	bne.n	801b20e <_malloc_r+0xf6>
 801b15c:	f8d8 4000 	ldr.w	r4, [r8]
 801b160:	4627      	mov	r7, r4
 801b162:	2f00      	cmp	r7, #0
 801b164:	d143      	bne.n	801b1ee <_malloc_r+0xd6>
 801b166:	2c00      	cmp	r4, #0
 801b168:	d04b      	beq.n	801b202 <_malloc_r+0xea>
 801b16a:	6823      	ldr	r3, [r4, #0]
 801b16c:	4639      	mov	r1, r7
 801b16e:	4630      	mov	r0, r6
 801b170:	eb04 0903 	add.w	r9, r4, r3
 801b174:	f000 fb02 	bl	801b77c <_sbrk_r>
 801b178:	4581      	cmp	r9, r0
 801b17a:	d142      	bne.n	801b202 <_malloc_r+0xea>
 801b17c:	6821      	ldr	r1, [r4, #0]
 801b17e:	1a6d      	subs	r5, r5, r1
 801b180:	4629      	mov	r1, r5
 801b182:	4630      	mov	r0, r6
 801b184:	f7ff ffa6 	bl	801b0d4 <sbrk_aligned>
 801b188:	3001      	adds	r0, #1
 801b18a:	d03a      	beq.n	801b202 <_malloc_r+0xea>
 801b18c:	6823      	ldr	r3, [r4, #0]
 801b18e:	442b      	add	r3, r5
 801b190:	6023      	str	r3, [r4, #0]
 801b192:	f8d8 3000 	ldr.w	r3, [r8]
 801b196:	685a      	ldr	r2, [r3, #4]
 801b198:	bb62      	cbnz	r2, 801b1f4 <_malloc_r+0xdc>
 801b19a:	f8c8 7000 	str.w	r7, [r8]
 801b19e:	e00f      	b.n	801b1c0 <_malloc_r+0xa8>
 801b1a0:	6822      	ldr	r2, [r4, #0]
 801b1a2:	1b52      	subs	r2, r2, r5
 801b1a4:	d420      	bmi.n	801b1e8 <_malloc_r+0xd0>
 801b1a6:	2a0b      	cmp	r2, #11
 801b1a8:	d917      	bls.n	801b1da <_malloc_r+0xc2>
 801b1aa:	1961      	adds	r1, r4, r5
 801b1ac:	42a3      	cmp	r3, r4
 801b1ae:	6025      	str	r5, [r4, #0]
 801b1b0:	bf18      	it	ne
 801b1b2:	6059      	strne	r1, [r3, #4]
 801b1b4:	6863      	ldr	r3, [r4, #4]
 801b1b6:	bf08      	it	eq
 801b1b8:	f8c8 1000 	streq.w	r1, [r8]
 801b1bc:	5162      	str	r2, [r4, r5]
 801b1be:	604b      	str	r3, [r1, #4]
 801b1c0:	4630      	mov	r0, r6
 801b1c2:	f000 f82f 	bl	801b224 <__malloc_unlock>
 801b1c6:	f104 000b 	add.w	r0, r4, #11
 801b1ca:	1d23      	adds	r3, r4, #4
 801b1cc:	f020 0007 	bic.w	r0, r0, #7
 801b1d0:	1ac2      	subs	r2, r0, r3
 801b1d2:	bf1c      	itt	ne
 801b1d4:	1a1b      	subne	r3, r3, r0
 801b1d6:	50a3      	strne	r3, [r4, r2]
 801b1d8:	e7af      	b.n	801b13a <_malloc_r+0x22>
 801b1da:	6862      	ldr	r2, [r4, #4]
 801b1dc:	42a3      	cmp	r3, r4
 801b1de:	bf0c      	ite	eq
 801b1e0:	f8c8 2000 	streq.w	r2, [r8]
 801b1e4:	605a      	strne	r2, [r3, #4]
 801b1e6:	e7eb      	b.n	801b1c0 <_malloc_r+0xa8>
 801b1e8:	4623      	mov	r3, r4
 801b1ea:	6864      	ldr	r4, [r4, #4]
 801b1ec:	e7ae      	b.n	801b14c <_malloc_r+0x34>
 801b1ee:	463c      	mov	r4, r7
 801b1f0:	687f      	ldr	r7, [r7, #4]
 801b1f2:	e7b6      	b.n	801b162 <_malloc_r+0x4a>
 801b1f4:	461a      	mov	r2, r3
 801b1f6:	685b      	ldr	r3, [r3, #4]
 801b1f8:	42a3      	cmp	r3, r4
 801b1fa:	d1fb      	bne.n	801b1f4 <_malloc_r+0xdc>
 801b1fc:	2300      	movs	r3, #0
 801b1fe:	6053      	str	r3, [r2, #4]
 801b200:	e7de      	b.n	801b1c0 <_malloc_r+0xa8>
 801b202:	230c      	movs	r3, #12
 801b204:	6033      	str	r3, [r6, #0]
 801b206:	4630      	mov	r0, r6
 801b208:	f000 f80c 	bl	801b224 <__malloc_unlock>
 801b20c:	e794      	b.n	801b138 <_malloc_r+0x20>
 801b20e:	6005      	str	r5, [r0, #0]
 801b210:	e7d6      	b.n	801b1c0 <_malloc_r+0xa8>
 801b212:	bf00      	nop
 801b214:	240082f0 	.word	0x240082f0

0801b218 <__malloc_lock>:
 801b218:	4801      	ldr	r0, [pc, #4]	@ (801b220 <__malloc_lock+0x8>)
 801b21a:	f000 bafc 	b.w	801b816 <__retarget_lock_acquire_recursive>
 801b21e:	bf00      	nop
 801b220:	24008434 	.word	0x24008434

0801b224 <__malloc_unlock>:
 801b224:	4801      	ldr	r0, [pc, #4]	@ (801b22c <__malloc_unlock+0x8>)
 801b226:	f000 baf7 	b.w	801b818 <__retarget_lock_release_recursive>
 801b22a:	bf00      	nop
 801b22c:	24008434 	.word	0x24008434

0801b230 <rand>:
 801b230:	4b16      	ldr	r3, [pc, #88]	@ (801b28c <rand+0x5c>)
 801b232:	b510      	push	{r4, lr}
 801b234:	681c      	ldr	r4, [r3, #0]
 801b236:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b238:	b9b3      	cbnz	r3, 801b268 <rand+0x38>
 801b23a:	2018      	movs	r0, #24
 801b23c:	f7ff ff42 	bl	801b0c4 <malloc>
 801b240:	4602      	mov	r2, r0
 801b242:	6320      	str	r0, [r4, #48]	@ 0x30
 801b244:	b920      	cbnz	r0, 801b250 <rand+0x20>
 801b246:	4b12      	ldr	r3, [pc, #72]	@ (801b290 <rand+0x60>)
 801b248:	4812      	ldr	r0, [pc, #72]	@ (801b294 <rand+0x64>)
 801b24a:	2152      	movs	r1, #82	@ 0x52
 801b24c:	f7ff ff1c 	bl	801b088 <__assert_func>
 801b250:	4911      	ldr	r1, [pc, #68]	@ (801b298 <rand+0x68>)
 801b252:	4b12      	ldr	r3, [pc, #72]	@ (801b29c <rand+0x6c>)
 801b254:	e9c0 1300 	strd	r1, r3, [r0]
 801b258:	4b11      	ldr	r3, [pc, #68]	@ (801b2a0 <rand+0x70>)
 801b25a:	6083      	str	r3, [r0, #8]
 801b25c:	230b      	movs	r3, #11
 801b25e:	8183      	strh	r3, [r0, #12]
 801b260:	2100      	movs	r1, #0
 801b262:	2001      	movs	r0, #1
 801b264:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b268:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b26a:	480e      	ldr	r0, [pc, #56]	@ (801b2a4 <rand+0x74>)
 801b26c:	690b      	ldr	r3, [r1, #16]
 801b26e:	694c      	ldr	r4, [r1, #20]
 801b270:	4a0d      	ldr	r2, [pc, #52]	@ (801b2a8 <rand+0x78>)
 801b272:	4358      	muls	r0, r3
 801b274:	fb02 0004 	mla	r0, r2, r4, r0
 801b278:	fba3 3202 	umull	r3, r2, r3, r2
 801b27c:	3301      	adds	r3, #1
 801b27e:	eb40 0002 	adc.w	r0, r0, r2
 801b282:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801b286:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801b28a:	bd10      	pop	{r4, pc}
 801b28c:	24000040 	.word	0x24000040
 801b290:	0801f462 	.word	0x0801f462
 801b294:	0801f479 	.word	0x0801f479
 801b298:	abcd330e 	.word	0xabcd330e
 801b29c:	e66d1234 	.word	0xe66d1234
 801b2a0:	0005deec 	.word	0x0005deec
 801b2a4:	5851f42d 	.word	0x5851f42d
 801b2a8:	4c957f2d 	.word	0x4c957f2d

0801b2ac <std>:
 801b2ac:	2300      	movs	r3, #0
 801b2ae:	b510      	push	{r4, lr}
 801b2b0:	4604      	mov	r4, r0
 801b2b2:	e9c0 3300 	strd	r3, r3, [r0]
 801b2b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b2ba:	6083      	str	r3, [r0, #8]
 801b2bc:	8181      	strh	r1, [r0, #12]
 801b2be:	6643      	str	r3, [r0, #100]	@ 0x64
 801b2c0:	81c2      	strh	r2, [r0, #14]
 801b2c2:	6183      	str	r3, [r0, #24]
 801b2c4:	4619      	mov	r1, r3
 801b2c6:	2208      	movs	r2, #8
 801b2c8:	305c      	adds	r0, #92	@ 0x5c
 801b2ca:	f000 f9bd 	bl	801b648 <memset>
 801b2ce:	4b0d      	ldr	r3, [pc, #52]	@ (801b304 <std+0x58>)
 801b2d0:	6263      	str	r3, [r4, #36]	@ 0x24
 801b2d2:	4b0d      	ldr	r3, [pc, #52]	@ (801b308 <std+0x5c>)
 801b2d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b2d6:	4b0d      	ldr	r3, [pc, #52]	@ (801b30c <std+0x60>)
 801b2d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b2da:	4b0d      	ldr	r3, [pc, #52]	@ (801b310 <std+0x64>)
 801b2dc:	6323      	str	r3, [r4, #48]	@ 0x30
 801b2de:	4b0d      	ldr	r3, [pc, #52]	@ (801b314 <std+0x68>)
 801b2e0:	6224      	str	r4, [r4, #32]
 801b2e2:	429c      	cmp	r4, r3
 801b2e4:	d006      	beq.n	801b2f4 <std+0x48>
 801b2e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b2ea:	4294      	cmp	r4, r2
 801b2ec:	d002      	beq.n	801b2f4 <std+0x48>
 801b2ee:	33d0      	adds	r3, #208	@ 0xd0
 801b2f0:	429c      	cmp	r4, r3
 801b2f2:	d105      	bne.n	801b300 <std+0x54>
 801b2f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b2fc:	f000 ba8a 	b.w	801b814 <__retarget_lock_init_recursive>
 801b300:	bd10      	pop	{r4, pc}
 801b302:	bf00      	nop
 801b304:	0801b479 	.word	0x0801b479
 801b308:	0801b49b 	.word	0x0801b49b
 801b30c:	0801b4d3 	.word	0x0801b4d3
 801b310:	0801b4f7 	.word	0x0801b4f7
 801b314:	240082f4 	.word	0x240082f4

0801b318 <stdio_exit_handler>:
 801b318:	4a02      	ldr	r2, [pc, #8]	@ (801b324 <stdio_exit_handler+0xc>)
 801b31a:	4903      	ldr	r1, [pc, #12]	@ (801b328 <stdio_exit_handler+0x10>)
 801b31c:	4803      	ldr	r0, [pc, #12]	@ (801b32c <stdio_exit_handler+0x14>)
 801b31e:	f000 b87b 	b.w	801b418 <_fwalk_sglue>
 801b322:	bf00      	nop
 801b324:	24000034 	.word	0x24000034
 801b328:	0801bf7d 	.word	0x0801bf7d
 801b32c:	24000044 	.word	0x24000044

0801b330 <cleanup_stdio>:
 801b330:	6841      	ldr	r1, [r0, #4]
 801b332:	4b0c      	ldr	r3, [pc, #48]	@ (801b364 <cleanup_stdio+0x34>)
 801b334:	4299      	cmp	r1, r3
 801b336:	b510      	push	{r4, lr}
 801b338:	4604      	mov	r4, r0
 801b33a:	d001      	beq.n	801b340 <cleanup_stdio+0x10>
 801b33c:	f000 fe1e 	bl	801bf7c <_fflush_r>
 801b340:	68a1      	ldr	r1, [r4, #8]
 801b342:	4b09      	ldr	r3, [pc, #36]	@ (801b368 <cleanup_stdio+0x38>)
 801b344:	4299      	cmp	r1, r3
 801b346:	d002      	beq.n	801b34e <cleanup_stdio+0x1e>
 801b348:	4620      	mov	r0, r4
 801b34a:	f000 fe17 	bl	801bf7c <_fflush_r>
 801b34e:	68e1      	ldr	r1, [r4, #12]
 801b350:	4b06      	ldr	r3, [pc, #24]	@ (801b36c <cleanup_stdio+0x3c>)
 801b352:	4299      	cmp	r1, r3
 801b354:	d004      	beq.n	801b360 <cleanup_stdio+0x30>
 801b356:	4620      	mov	r0, r4
 801b358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b35c:	f000 be0e 	b.w	801bf7c <_fflush_r>
 801b360:	bd10      	pop	{r4, pc}
 801b362:	bf00      	nop
 801b364:	240082f4 	.word	0x240082f4
 801b368:	2400835c 	.word	0x2400835c
 801b36c:	240083c4 	.word	0x240083c4

0801b370 <global_stdio_init.part.0>:
 801b370:	b510      	push	{r4, lr}
 801b372:	4b0b      	ldr	r3, [pc, #44]	@ (801b3a0 <global_stdio_init.part.0+0x30>)
 801b374:	4c0b      	ldr	r4, [pc, #44]	@ (801b3a4 <global_stdio_init.part.0+0x34>)
 801b376:	4a0c      	ldr	r2, [pc, #48]	@ (801b3a8 <global_stdio_init.part.0+0x38>)
 801b378:	601a      	str	r2, [r3, #0]
 801b37a:	4620      	mov	r0, r4
 801b37c:	2200      	movs	r2, #0
 801b37e:	2104      	movs	r1, #4
 801b380:	f7ff ff94 	bl	801b2ac <std>
 801b384:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b388:	2201      	movs	r2, #1
 801b38a:	2109      	movs	r1, #9
 801b38c:	f7ff ff8e 	bl	801b2ac <std>
 801b390:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b394:	2202      	movs	r2, #2
 801b396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b39a:	2112      	movs	r1, #18
 801b39c:	f7ff bf86 	b.w	801b2ac <std>
 801b3a0:	2400842c 	.word	0x2400842c
 801b3a4:	240082f4 	.word	0x240082f4
 801b3a8:	0801b319 	.word	0x0801b319

0801b3ac <__sfp_lock_acquire>:
 801b3ac:	4801      	ldr	r0, [pc, #4]	@ (801b3b4 <__sfp_lock_acquire+0x8>)
 801b3ae:	f000 ba32 	b.w	801b816 <__retarget_lock_acquire_recursive>
 801b3b2:	bf00      	nop
 801b3b4:	24008435 	.word	0x24008435

0801b3b8 <__sfp_lock_release>:
 801b3b8:	4801      	ldr	r0, [pc, #4]	@ (801b3c0 <__sfp_lock_release+0x8>)
 801b3ba:	f000 ba2d 	b.w	801b818 <__retarget_lock_release_recursive>
 801b3be:	bf00      	nop
 801b3c0:	24008435 	.word	0x24008435

0801b3c4 <__sinit>:
 801b3c4:	b510      	push	{r4, lr}
 801b3c6:	4604      	mov	r4, r0
 801b3c8:	f7ff fff0 	bl	801b3ac <__sfp_lock_acquire>
 801b3cc:	6a23      	ldr	r3, [r4, #32]
 801b3ce:	b11b      	cbz	r3, 801b3d8 <__sinit+0x14>
 801b3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b3d4:	f7ff bff0 	b.w	801b3b8 <__sfp_lock_release>
 801b3d8:	4b04      	ldr	r3, [pc, #16]	@ (801b3ec <__sinit+0x28>)
 801b3da:	6223      	str	r3, [r4, #32]
 801b3dc:	4b04      	ldr	r3, [pc, #16]	@ (801b3f0 <__sinit+0x2c>)
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	d1f5      	bne.n	801b3d0 <__sinit+0xc>
 801b3e4:	f7ff ffc4 	bl	801b370 <global_stdio_init.part.0>
 801b3e8:	e7f2      	b.n	801b3d0 <__sinit+0xc>
 801b3ea:	bf00      	nop
 801b3ec:	0801b331 	.word	0x0801b331
 801b3f0:	2400842c 	.word	0x2400842c

0801b3f4 <fiprintf>:
 801b3f4:	b40e      	push	{r1, r2, r3}
 801b3f6:	b503      	push	{r0, r1, lr}
 801b3f8:	4601      	mov	r1, r0
 801b3fa:	ab03      	add	r3, sp, #12
 801b3fc:	4805      	ldr	r0, [pc, #20]	@ (801b414 <fiprintf+0x20>)
 801b3fe:	f853 2b04 	ldr.w	r2, [r3], #4
 801b402:	6800      	ldr	r0, [r0, #0]
 801b404:	9301      	str	r3, [sp, #4]
 801b406:	f000 fa91 	bl	801b92c <_vfiprintf_r>
 801b40a:	b002      	add	sp, #8
 801b40c:	f85d eb04 	ldr.w	lr, [sp], #4
 801b410:	b003      	add	sp, #12
 801b412:	4770      	bx	lr
 801b414:	24000040 	.word	0x24000040

0801b418 <_fwalk_sglue>:
 801b418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b41c:	4607      	mov	r7, r0
 801b41e:	4688      	mov	r8, r1
 801b420:	4614      	mov	r4, r2
 801b422:	2600      	movs	r6, #0
 801b424:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b428:	f1b9 0901 	subs.w	r9, r9, #1
 801b42c:	d505      	bpl.n	801b43a <_fwalk_sglue+0x22>
 801b42e:	6824      	ldr	r4, [r4, #0]
 801b430:	2c00      	cmp	r4, #0
 801b432:	d1f7      	bne.n	801b424 <_fwalk_sglue+0xc>
 801b434:	4630      	mov	r0, r6
 801b436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b43a:	89ab      	ldrh	r3, [r5, #12]
 801b43c:	2b01      	cmp	r3, #1
 801b43e:	d907      	bls.n	801b450 <_fwalk_sglue+0x38>
 801b440:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b444:	3301      	adds	r3, #1
 801b446:	d003      	beq.n	801b450 <_fwalk_sglue+0x38>
 801b448:	4629      	mov	r1, r5
 801b44a:	4638      	mov	r0, r7
 801b44c:	47c0      	blx	r8
 801b44e:	4306      	orrs	r6, r0
 801b450:	3568      	adds	r5, #104	@ 0x68
 801b452:	e7e9      	b.n	801b428 <_fwalk_sglue+0x10>

0801b454 <iprintf>:
 801b454:	b40f      	push	{r0, r1, r2, r3}
 801b456:	b507      	push	{r0, r1, r2, lr}
 801b458:	4906      	ldr	r1, [pc, #24]	@ (801b474 <iprintf+0x20>)
 801b45a:	ab04      	add	r3, sp, #16
 801b45c:	6808      	ldr	r0, [r1, #0]
 801b45e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b462:	6881      	ldr	r1, [r0, #8]
 801b464:	9301      	str	r3, [sp, #4]
 801b466:	f000 fa61 	bl	801b92c <_vfiprintf_r>
 801b46a:	b003      	add	sp, #12
 801b46c:	f85d eb04 	ldr.w	lr, [sp], #4
 801b470:	b004      	add	sp, #16
 801b472:	4770      	bx	lr
 801b474:	24000040 	.word	0x24000040

0801b478 <__sread>:
 801b478:	b510      	push	{r4, lr}
 801b47a:	460c      	mov	r4, r1
 801b47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b480:	f000 f96a 	bl	801b758 <_read_r>
 801b484:	2800      	cmp	r0, #0
 801b486:	bfab      	itete	ge
 801b488:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b48a:	89a3      	ldrhlt	r3, [r4, #12]
 801b48c:	181b      	addge	r3, r3, r0
 801b48e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b492:	bfac      	ite	ge
 801b494:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b496:	81a3      	strhlt	r3, [r4, #12]
 801b498:	bd10      	pop	{r4, pc}

0801b49a <__swrite>:
 801b49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b49e:	461f      	mov	r7, r3
 801b4a0:	898b      	ldrh	r3, [r1, #12]
 801b4a2:	05db      	lsls	r3, r3, #23
 801b4a4:	4605      	mov	r5, r0
 801b4a6:	460c      	mov	r4, r1
 801b4a8:	4616      	mov	r6, r2
 801b4aa:	d505      	bpl.n	801b4b8 <__swrite+0x1e>
 801b4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b4b0:	2302      	movs	r3, #2
 801b4b2:	2200      	movs	r2, #0
 801b4b4:	f000 f93e 	bl	801b734 <_lseek_r>
 801b4b8:	89a3      	ldrh	r3, [r4, #12]
 801b4ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b4be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b4c2:	81a3      	strh	r3, [r4, #12]
 801b4c4:	4632      	mov	r2, r6
 801b4c6:	463b      	mov	r3, r7
 801b4c8:	4628      	mov	r0, r5
 801b4ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b4ce:	f000 b965 	b.w	801b79c <_write_r>

0801b4d2 <__sseek>:
 801b4d2:	b510      	push	{r4, lr}
 801b4d4:	460c      	mov	r4, r1
 801b4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b4da:	f000 f92b 	bl	801b734 <_lseek_r>
 801b4de:	1c43      	adds	r3, r0, #1
 801b4e0:	89a3      	ldrh	r3, [r4, #12]
 801b4e2:	bf15      	itete	ne
 801b4e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b4e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b4ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b4ee:	81a3      	strheq	r3, [r4, #12]
 801b4f0:	bf18      	it	ne
 801b4f2:	81a3      	strhne	r3, [r4, #12]
 801b4f4:	bd10      	pop	{r4, pc}

0801b4f6 <__sclose>:
 801b4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b4fa:	f000 b8ad 	b.w	801b658 <_close_r>

0801b4fe <__swbuf_r>:
 801b4fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b500:	460e      	mov	r6, r1
 801b502:	4614      	mov	r4, r2
 801b504:	4605      	mov	r5, r0
 801b506:	b118      	cbz	r0, 801b510 <__swbuf_r+0x12>
 801b508:	6a03      	ldr	r3, [r0, #32]
 801b50a:	b90b      	cbnz	r3, 801b510 <__swbuf_r+0x12>
 801b50c:	f7ff ff5a 	bl	801b3c4 <__sinit>
 801b510:	69a3      	ldr	r3, [r4, #24]
 801b512:	60a3      	str	r3, [r4, #8]
 801b514:	89a3      	ldrh	r3, [r4, #12]
 801b516:	071a      	lsls	r2, r3, #28
 801b518:	d501      	bpl.n	801b51e <__swbuf_r+0x20>
 801b51a:	6923      	ldr	r3, [r4, #16]
 801b51c:	b943      	cbnz	r3, 801b530 <__swbuf_r+0x32>
 801b51e:	4621      	mov	r1, r4
 801b520:	4628      	mov	r0, r5
 801b522:	f000 f82b 	bl	801b57c <__swsetup_r>
 801b526:	b118      	cbz	r0, 801b530 <__swbuf_r+0x32>
 801b528:	f04f 37ff 	mov.w	r7, #4294967295
 801b52c:	4638      	mov	r0, r7
 801b52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b530:	6823      	ldr	r3, [r4, #0]
 801b532:	6922      	ldr	r2, [r4, #16]
 801b534:	1a98      	subs	r0, r3, r2
 801b536:	6963      	ldr	r3, [r4, #20]
 801b538:	b2f6      	uxtb	r6, r6
 801b53a:	4283      	cmp	r3, r0
 801b53c:	4637      	mov	r7, r6
 801b53e:	dc05      	bgt.n	801b54c <__swbuf_r+0x4e>
 801b540:	4621      	mov	r1, r4
 801b542:	4628      	mov	r0, r5
 801b544:	f000 fd1a 	bl	801bf7c <_fflush_r>
 801b548:	2800      	cmp	r0, #0
 801b54a:	d1ed      	bne.n	801b528 <__swbuf_r+0x2a>
 801b54c:	68a3      	ldr	r3, [r4, #8]
 801b54e:	3b01      	subs	r3, #1
 801b550:	60a3      	str	r3, [r4, #8]
 801b552:	6823      	ldr	r3, [r4, #0]
 801b554:	1c5a      	adds	r2, r3, #1
 801b556:	6022      	str	r2, [r4, #0]
 801b558:	701e      	strb	r6, [r3, #0]
 801b55a:	6962      	ldr	r2, [r4, #20]
 801b55c:	1c43      	adds	r3, r0, #1
 801b55e:	429a      	cmp	r2, r3
 801b560:	d004      	beq.n	801b56c <__swbuf_r+0x6e>
 801b562:	89a3      	ldrh	r3, [r4, #12]
 801b564:	07db      	lsls	r3, r3, #31
 801b566:	d5e1      	bpl.n	801b52c <__swbuf_r+0x2e>
 801b568:	2e0a      	cmp	r6, #10
 801b56a:	d1df      	bne.n	801b52c <__swbuf_r+0x2e>
 801b56c:	4621      	mov	r1, r4
 801b56e:	4628      	mov	r0, r5
 801b570:	f000 fd04 	bl	801bf7c <_fflush_r>
 801b574:	2800      	cmp	r0, #0
 801b576:	d0d9      	beq.n	801b52c <__swbuf_r+0x2e>
 801b578:	e7d6      	b.n	801b528 <__swbuf_r+0x2a>
	...

0801b57c <__swsetup_r>:
 801b57c:	b538      	push	{r3, r4, r5, lr}
 801b57e:	4b29      	ldr	r3, [pc, #164]	@ (801b624 <__swsetup_r+0xa8>)
 801b580:	4605      	mov	r5, r0
 801b582:	6818      	ldr	r0, [r3, #0]
 801b584:	460c      	mov	r4, r1
 801b586:	b118      	cbz	r0, 801b590 <__swsetup_r+0x14>
 801b588:	6a03      	ldr	r3, [r0, #32]
 801b58a:	b90b      	cbnz	r3, 801b590 <__swsetup_r+0x14>
 801b58c:	f7ff ff1a 	bl	801b3c4 <__sinit>
 801b590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b594:	0719      	lsls	r1, r3, #28
 801b596:	d422      	bmi.n	801b5de <__swsetup_r+0x62>
 801b598:	06da      	lsls	r2, r3, #27
 801b59a:	d407      	bmi.n	801b5ac <__swsetup_r+0x30>
 801b59c:	2209      	movs	r2, #9
 801b59e:	602a      	str	r2, [r5, #0]
 801b5a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b5a4:	81a3      	strh	r3, [r4, #12]
 801b5a6:	f04f 30ff 	mov.w	r0, #4294967295
 801b5aa:	e033      	b.n	801b614 <__swsetup_r+0x98>
 801b5ac:	0758      	lsls	r0, r3, #29
 801b5ae:	d512      	bpl.n	801b5d6 <__swsetup_r+0x5a>
 801b5b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b5b2:	b141      	cbz	r1, 801b5c6 <__swsetup_r+0x4a>
 801b5b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b5b8:	4299      	cmp	r1, r3
 801b5ba:	d002      	beq.n	801b5c2 <__swsetup_r+0x46>
 801b5bc:	4628      	mov	r0, r5
 801b5be:	f000 f941 	bl	801b844 <_free_r>
 801b5c2:	2300      	movs	r3, #0
 801b5c4:	6363      	str	r3, [r4, #52]	@ 0x34
 801b5c6:	89a3      	ldrh	r3, [r4, #12]
 801b5c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b5cc:	81a3      	strh	r3, [r4, #12]
 801b5ce:	2300      	movs	r3, #0
 801b5d0:	6063      	str	r3, [r4, #4]
 801b5d2:	6923      	ldr	r3, [r4, #16]
 801b5d4:	6023      	str	r3, [r4, #0]
 801b5d6:	89a3      	ldrh	r3, [r4, #12]
 801b5d8:	f043 0308 	orr.w	r3, r3, #8
 801b5dc:	81a3      	strh	r3, [r4, #12]
 801b5de:	6923      	ldr	r3, [r4, #16]
 801b5e0:	b94b      	cbnz	r3, 801b5f6 <__swsetup_r+0x7a>
 801b5e2:	89a3      	ldrh	r3, [r4, #12]
 801b5e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b5e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b5ec:	d003      	beq.n	801b5f6 <__swsetup_r+0x7a>
 801b5ee:	4621      	mov	r1, r4
 801b5f0:	4628      	mov	r0, r5
 801b5f2:	f000 fd11 	bl	801c018 <__smakebuf_r>
 801b5f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b5fa:	f013 0201 	ands.w	r2, r3, #1
 801b5fe:	d00a      	beq.n	801b616 <__swsetup_r+0x9a>
 801b600:	2200      	movs	r2, #0
 801b602:	60a2      	str	r2, [r4, #8]
 801b604:	6962      	ldr	r2, [r4, #20]
 801b606:	4252      	negs	r2, r2
 801b608:	61a2      	str	r2, [r4, #24]
 801b60a:	6922      	ldr	r2, [r4, #16]
 801b60c:	b942      	cbnz	r2, 801b620 <__swsetup_r+0xa4>
 801b60e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b612:	d1c5      	bne.n	801b5a0 <__swsetup_r+0x24>
 801b614:	bd38      	pop	{r3, r4, r5, pc}
 801b616:	0799      	lsls	r1, r3, #30
 801b618:	bf58      	it	pl
 801b61a:	6962      	ldrpl	r2, [r4, #20]
 801b61c:	60a2      	str	r2, [r4, #8]
 801b61e:	e7f4      	b.n	801b60a <__swsetup_r+0x8e>
 801b620:	2000      	movs	r0, #0
 801b622:	e7f7      	b.n	801b614 <__swsetup_r+0x98>
 801b624:	24000040 	.word	0x24000040

0801b628 <memcmp>:
 801b628:	b510      	push	{r4, lr}
 801b62a:	3901      	subs	r1, #1
 801b62c:	4402      	add	r2, r0
 801b62e:	4290      	cmp	r0, r2
 801b630:	d101      	bne.n	801b636 <memcmp+0xe>
 801b632:	2000      	movs	r0, #0
 801b634:	e005      	b.n	801b642 <memcmp+0x1a>
 801b636:	7803      	ldrb	r3, [r0, #0]
 801b638:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b63c:	42a3      	cmp	r3, r4
 801b63e:	d001      	beq.n	801b644 <memcmp+0x1c>
 801b640:	1b18      	subs	r0, r3, r4
 801b642:	bd10      	pop	{r4, pc}
 801b644:	3001      	adds	r0, #1
 801b646:	e7f2      	b.n	801b62e <memcmp+0x6>

0801b648 <memset>:
 801b648:	4402      	add	r2, r0
 801b64a:	4603      	mov	r3, r0
 801b64c:	4293      	cmp	r3, r2
 801b64e:	d100      	bne.n	801b652 <memset+0xa>
 801b650:	4770      	bx	lr
 801b652:	f803 1b01 	strb.w	r1, [r3], #1
 801b656:	e7f9      	b.n	801b64c <memset+0x4>

0801b658 <_close_r>:
 801b658:	b538      	push	{r3, r4, r5, lr}
 801b65a:	4d06      	ldr	r5, [pc, #24]	@ (801b674 <_close_r+0x1c>)
 801b65c:	2300      	movs	r3, #0
 801b65e:	4604      	mov	r4, r0
 801b660:	4608      	mov	r0, r1
 801b662:	602b      	str	r3, [r5, #0]
 801b664:	f7e7 ff8a 	bl	800357c <_close>
 801b668:	1c43      	adds	r3, r0, #1
 801b66a:	d102      	bne.n	801b672 <_close_r+0x1a>
 801b66c:	682b      	ldr	r3, [r5, #0]
 801b66e:	b103      	cbz	r3, 801b672 <_close_r+0x1a>
 801b670:	6023      	str	r3, [r4, #0]
 801b672:	bd38      	pop	{r3, r4, r5, pc}
 801b674:	24008430 	.word	0x24008430

0801b678 <_reclaim_reent>:
 801b678:	4b2d      	ldr	r3, [pc, #180]	@ (801b730 <_reclaim_reent+0xb8>)
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	4283      	cmp	r3, r0
 801b67e:	b570      	push	{r4, r5, r6, lr}
 801b680:	4604      	mov	r4, r0
 801b682:	d053      	beq.n	801b72c <_reclaim_reent+0xb4>
 801b684:	69c3      	ldr	r3, [r0, #28]
 801b686:	b31b      	cbz	r3, 801b6d0 <_reclaim_reent+0x58>
 801b688:	68db      	ldr	r3, [r3, #12]
 801b68a:	b163      	cbz	r3, 801b6a6 <_reclaim_reent+0x2e>
 801b68c:	2500      	movs	r5, #0
 801b68e:	69e3      	ldr	r3, [r4, #28]
 801b690:	68db      	ldr	r3, [r3, #12]
 801b692:	5959      	ldr	r1, [r3, r5]
 801b694:	b9b1      	cbnz	r1, 801b6c4 <_reclaim_reent+0x4c>
 801b696:	3504      	adds	r5, #4
 801b698:	2d80      	cmp	r5, #128	@ 0x80
 801b69a:	d1f8      	bne.n	801b68e <_reclaim_reent+0x16>
 801b69c:	69e3      	ldr	r3, [r4, #28]
 801b69e:	4620      	mov	r0, r4
 801b6a0:	68d9      	ldr	r1, [r3, #12]
 801b6a2:	f000 f8cf 	bl	801b844 <_free_r>
 801b6a6:	69e3      	ldr	r3, [r4, #28]
 801b6a8:	6819      	ldr	r1, [r3, #0]
 801b6aa:	b111      	cbz	r1, 801b6b2 <_reclaim_reent+0x3a>
 801b6ac:	4620      	mov	r0, r4
 801b6ae:	f000 f8c9 	bl	801b844 <_free_r>
 801b6b2:	69e3      	ldr	r3, [r4, #28]
 801b6b4:	689d      	ldr	r5, [r3, #8]
 801b6b6:	b15d      	cbz	r5, 801b6d0 <_reclaim_reent+0x58>
 801b6b8:	4629      	mov	r1, r5
 801b6ba:	4620      	mov	r0, r4
 801b6bc:	682d      	ldr	r5, [r5, #0]
 801b6be:	f000 f8c1 	bl	801b844 <_free_r>
 801b6c2:	e7f8      	b.n	801b6b6 <_reclaim_reent+0x3e>
 801b6c4:	680e      	ldr	r6, [r1, #0]
 801b6c6:	4620      	mov	r0, r4
 801b6c8:	f000 f8bc 	bl	801b844 <_free_r>
 801b6cc:	4631      	mov	r1, r6
 801b6ce:	e7e1      	b.n	801b694 <_reclaim_reent+0x1c>
 801b6d0:	6961      	ldr	r1, [r4, #20]
 801b6d2:	b111      	cbz	r1, 801b6da <_reclaim_reent+0x62>
 801b6d4:	4620      	mov	r0, r4
 801b6d6:	f000 f8b5 	bl	801b844 <_free_r>
 801b6da:	69e1      	ldr	r1, [r4, #28]
 801b6dc:	b111      	cbz	r1, 801b6e4 <_reclaim_reent+0x6c>
 801b6de:	4620      	mov	r0, r4
 801b6e0:	f000 f8b0 	bl	801b844 <_free_r>
 801b6e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b6e6:	b111      	cbz	r1, 801b6ee <_reclaim_reent+0x76>
 801b6e8:	4620      	mov	r0, r4
 801b6ea:	f000 f8ab 	bl	801b844 <_free_r>
 801b6ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b6f0:	b111      	cbz	r1, 801b6f8 <_reclaim_reent+0x80>
 801b6f2:	4620      	mov	r0, r4
 801b6f4:	f000 f8a6 	bl	801b844 <_free_r>
 801b6f8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801b6fa:	b111      	cbz	r1, 801b702 <_reclaim_reent+0x8a>
 801b6fc:	4620      	mov	r0, r4
 801b6fe:	f000 f8a1 	bl	801b844 <_free_r>
 801b702:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801b704:	b111      	cbz	r1, 801b70c <_reclaim_reent+0x94>
 801b706:	4620      	mov	r0, r4
 801b708:	f000 f89c 	bl	801b844 <_free_r>
 801b70c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801b70e:	b111      	cbz	r1, 801b716 <_reclaim_reent+0x9e>
 801b710:	4620      	mov	r0, r4
 801b712:	f000 f897 	bl	801b844 <_free_r>
 801b716:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801b718:	b111      	cbz	r1, 801b720 <_reclaim_reent+0xa8>
 801b71a:	4620      	mov	r0, r4
 801b71c:	f000 f892 	bl	801b844 <_free_r>
 801b720:	6a23      	ldr	r3, [r4, #32]
 801b722:	b11b      	cbz	r3, 801b72c <_reclaim_reent+0xb4>
 801b724:	4620      	mov	r0, r4
 801b726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b72a:	4718      	bx	r3
 801b72c:	bd70      	pop	{r4, r5, r6, pc}
 801b72e:	bf00      	nop
 801b730:	24000040 	.word	0x24000040

0801b734 <_lseek_r>:
 801b734:	b538      	push	{r3, r4, r5, lr}
 801b736:	4d07      	ldr	r5, [pc, #28]	@ (801b754 <_lseek_r+0x20>)
 801b738:	4604      	mov	r4, r0
 801b73a:	4608      	mov	r0, r1
 801b73c:	4611      	mov	r1, r2
 801b73e:	2200      	movs	r2, #0
 801b740:	602a      	str	r2, [r5, #0]
 801b742:	461a      	mov	r2, r3
 801b744:	f7e7 ff41 	bl	80035ca <_lseek>
 801b748:	1c43      	adds	r3, r0, #1
 801b74a:	d102      	bne.n	801b752 <_lseek_r+0x1e>
 801b74c:	682b      	ldr	r3, [r5, #0]
 801b74e:	b103      	cbz	r3, 801b752 <_lseek_r+0x1e>
 801b750:	6023      	str	r3, [r4, #0]
 801b752:	bd38      	pop	{r3, r4, r5, pc}
 801b754:	24008430 	.word	0x24008430

0801b758 <_read_r>:
 801b758:	b538      	push	{r3, r4, r5, lr}
 801b75a:	4d07      	ldr	r5, [pc, #28]	@ (801b778 <_read_r+0x20>)
 801b75c:	4604      	mov	r4, r0
 801b75e:	4608      	mov	r0, r1
 801b760:	4611      	mov	r1, r2
 801b762:	2200      	movs	r2, #0
 801b764:	602a      	str	r2, [r5, #0]
 801b766:	461a      	mov	r2, r3
 801b768:	f7e7 fecf 	bl	800350a <_read>
 801b76c:	1c43      	adds	r3, r0, #1
 801b76e:	d102      	bne.n	801b776 <_read_r+0x1e>
 801b770:	682b      	ldr	r3, [r5, #0]
 801b772:	b103      	cbz	r3, 801b776 <_read_r+0x1e>
 801b774:	6023      	str	r3, [r4, #0]
 801b776:	bd38      	pop	{r3, r4, r5, pc}
 801b778:	24008430 	.word	0x24008430

0801b77c <_sbrk_r>:
 801b77c:	b538      	push	{r3, r4, r5, lr}
 801b77e:	4d06      	ldr	r5, [pc, #24]	@ (801b798 <_sbrk_r+0x1c>)
 801b780:	2300      	movs	r3, #0
 801b782:	4604      	mov	r4, r0
 801b784:	4608      	mov	r0, r1
 801b786:	602b      	str	r3, [r5, #0]
 801b788:	f7e7 ff2c 	bl	80035e4 <_sbrk>
 801b78c:	1c43      	adds	r3, r0, #1
 801b78e:	d102      	bne.n	801b796 <_sbrk_r+0x1a>
 801b790:	682b      	ldr	r3, [r5, #0]
 801b792:	b103      	cbz	r3, 801b796 <_sbrk_r+0x1a>
 801b794:	6023      	str	r3, [r4, #0]
 801b796:	bd38      	pop	{r3, r4, r5, pc}
 801b798:	24008430 	.word	0x24008430

0801b79c <_write_r>:
 801b79c:	b538      	push	{r3, r4, r5, lr}
 801b79e:	4d07      	ldr	r5, [pc, #28]	@ (801b7bc <_write_r+0x20>)
 801b7a0:	4604      	mov	r4, r0
 801b7a2:	4608      	mov	r0, r1
 801b7a4:	4611      	mov	r1, r2
 801b7a6:	2200      	movs	r2, #0
 801b7a8:	602a      	str	r2, [r5, #0]
 801b7aa:	461a      	mov	r2, r3
 801b7ac:	f7e7 feca 	bl	8003544 <_write>
 801b7b0:	1c43      	adds	r3, r0, #1
 801b7b2:	d102      	bne.n	801b7ba <_write_r+0x1e>
 801b7b4:	682b      	ldr	r3, [r5, #0]
 801b7b6:	b103      	cbz	r3, 801b7ba <_write_r+0x1e>
 801b7b8:	6023      	str	r3, [r4, #0]
 801b7ba:	bd38      	pop	{r3, r4, r5, pc}
 801b7bc:	24008430 	.word	0x24008430

0801b7c0 <__errno>:
 801b7c0:	4b01      	ldr	r3, [pc, #4]	@ (801b7c8 <__errno+0x8>)
 801b7c2:	6818      	ldr	r0, [r3, #0]
 801b7c4:	4770      	bx	lr
 801b7c6:	bf00      	nop
 801b7c8:	24000040 	.word	0x24000040

0801b7cc <__libc_init_array>:
 801b7cc:	b570      	push	{r4, r5, r6, lr}
 801b7ce:	4d0d      	ldr	r5, [pc, #52]	@ (801b804 <__libc_init_array+0x38>)
 801b7d0:	4c0d      	ldr	r4, [pc, #52]	@ (801b808 <__libc_init_array+0x3c>)
 801b7d2:	1b64      	subs	r4, r4, r5
 801b7d4:	10a4      	asrs	r4, r4, #2
 801b7d6:	2600      	movs	r6, #0
 801b7d8:	42a6      	cmp	r6, r4
 801b7da:	d109      	bne.n	801b7f0 <__libc_init_array+0x24>
 801b7dc:	4d0b      	ldr	r5, [pc, #44]	@ (801b80c <__libc_init_array+0x40>)
 801b7de:	4c0c      	ldr	r4, [pc, #48]	@ (801b810 <__libc_init_array+0x44>)
 801b7e0:	f000 ffb6 	bl	801c750 <_init>
 801b7e4:	1b64      	subs	r4, r4, r5
 801b7e6:	10a4      	asrs	r4, r4, #2
 801b7e8:	2600      	movs	r6, #0
 801b7ea:	42a6      	cmp	r6, r4
 801b7ec:	d105      	bne.n	801b7fa <__libc_init_array+0x2e>
 801b7ee:	bd70      	pop	{r4, r5, r6, pc}
 801b7f0:	f855 3b04 	ldr.w	r3, [r5], #4
 801b7f4:	4798      	blx	r3
 801b7f6:	3601      	adds	r6, #1
 801b7f8:	e7ee      	b.n	801b7d8 <__libc_init_array+0xc>
 801b7fa:	f855 3b04 	ldr.w	r3, [r5], #4
 801b7fe:	4798      	blx	r3
 801b800:	3601      	adds	r6, #1
 801b802:	e7f2      	b.n	801b7ea <__libc_init_array+0x1e>
 801b804:	08020dc8 	.word	0x08020dc8
 801b808:	08020dc8 	.word	0x08020dc8
 801b80c:	08020dc8 	.word	0x08020dc8
 801b810:	08020dcc 	.word	0x08020dcc

0801b814 <__retarget_lock_init_recursive>:
 801b814:	4770      	bx	lr

0801b816 <__retarget_lock_acquire_recursive>:
 801b816:	4770      	bx	lr

0801b818 <__retarget_lock_release_recursive>:
 801b818:	4770      	bx	lr

0801b81a <memcpy>:
 801b81a:	440a      	add	r2, r1
 801b81c:	4291      	cmp	r1, r2
 801b81e:	f100 33ff 	add.w	r3, r0, #4294967295
 801b822:	d100      	bne.n	801b826 <memcpy+0xc>
 801b824:	4770      	bx	lr
 801b826:	b510      	push	{r4, lr}
 801b828:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b82c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b830:	4291      	cmp	r1, r2
 801b832:	d1f9      	bne.n	801b828 <memcpy+0xe>
 801b834:	bd10      	pop	{r4, pc}

0801b836 <abort>:
 801b836:	b508      	push	{r3, lr}
 801b838:	2006      	movs	r0, #6
 801b83a:	f000 fc51 	bl	801c0e0 <raise>
 801b83e:	2001      	movs	r0, #1
 801b840:	f7e7 fe58 	bl	80034f4 <_exit>

0801b844 <_free_r>:
 801b844:	b538      	push	{r3, r4, r5, lr}
 801b846:	4605      	mov	r5, r0
 801b848:	2900      	cmp	r1, #0
 801b84a:	d041      	beq.n	801b8d0 <_free_r+0x8c>
 801b84c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b850:	1f0c      	subs	r4, r1, #4
 801b852:	2b00      	cmp	r3, #0
 801b854:	bfb8      	it	lt
 801b856:	18e4      	addlt	r4, r4, r3
 801b858:	f7ff fcde 	bl	801b218 <__malloc_lock>
 801b85c:	4a1d      	ldr	r2, [pc, #116]	@ (801b8d4 <_free_r+0x90>)
 801b85e:	6813      	ldr	r3, [r2, #0]
 801b860:	b933      	cbnz	r3, 801b870 <_free_r+0x2c>
 801b862:	6063      	str	r3, [r4, #4]
 801b864:	6014      	str	r4, [r2, #0]
 801b866:	4628      	mov	r0, r5
 801b868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b86c:	f7ff bcda 	b.w	801b224 <__malloc_unlock>
 801b870:	42a3      	cmp	r3, r4
 801b872:	d908      	bls.n	801b886 <_free_r+0x42>
 801b874:	6820      	ldr	r0, [r4, #0]
 801b876:	1821      	adds	r1, r4, r0
 801b878:	428b      	cmp	r3, r1
 801b87a:	bf01      	itttt	eq
 801b87c:	6819      	ldreq	r1, [r3, #0]
 801b87e:	685b      	ldreq	r3, [r3, #4]
 801b880:	1809      	addeq	r1, r1, r0
 801b882:	6021      	streq	r1, [r4, #0]
 801b884:	e7ed      	b.n	801b862 <_free_r+0x1e>
 801b886:	461a      	mov	r2, r3
 801b888:	685b      	ldr	r3, [r3, #4]
 801b88a:	b10b      	cbz	r3, 801b890 <_free_r+0x4c>
 801b88c:	42a3      	cmp	r3, r4
 801b88e:	d9fa      	bls.n	801b886 <_free_r+0x42>
 801b890:	6811      	ldr	r1, [r2, #0]
 801b892:	1850      	adds	r0, r2, r1
 801b894:	42a0      	cmp	r0, r4
 801b896:	d10b      	bne.n	801b8b0 <_free_r+0x6c>
 801b898:	6820      	ldr	r0, [r4, #0]
 801b89a:	4401      	add	r1, r0
 801b89c:	1850      	adds	r0, r2, r1
 801b89e:	4283      	cmp	r3, r0
 801b8a0:	6011      	str	r1, [r2, #0]
 801b8a2:	d1e0      	bne.n	801b866 <_free_r+0x22>
 801b8a4:	6818      	ldr	r0, [r3, #0]
 801b8a6:	685b      	ldr	r3, [r3, #4]
 801b8a8:	6053      	str	r3, [r2, #4]
 801b8aa:	4408      	add	r0, r1
 801b8ac:	6010      	str	r0, [r2, #0]
 801b8ae:	e7da      	b.n	801b866 <_free_r+0x22>
 801b8b0:	d902      	bls.n	801b8b8 <_free_r+0x74>
 801b8b2:	230c      	movs	r3, #12
 801b8b4:	602b      	str	r3, [r5, #0]
 801b8b6:	e7d6      	b.n	801b866 <_free_r+0x22>
 801b8b8:	6820      	ldr	r0, [r4, #0]
 801b8ba:	1821      	adds	r1, r4, r0
 801b8bc:	428b      	cmp	r3, r1
 801b8be:	bf04      	itt	eq
 801b8c0:	6819      	ldreq	r1, [r3, #0]
 801b8c2:	685b      	ldreq	r3, [r3, #4]
 801b8c4:	6063      	str	r3, [r4, #4]
 801b8c6:	bf04      	itt	eq
 801b8c8:	1809      	addeq	r1, r1, r0
 801b8ca:	6021      	streq	r1, [r4, #0]
 801b8cc:	6054      	str	r4, [r2, #4]
 801b8ce:	e7ca      	b.n	801b866 <_free_r+0x22>
 801b8d0:	bd38      	pop	{r3, r4, r5, pc}
 801b8d2:	bf00      	nop
 801b8d4:	240082f0 	.word	0x240082f0

0801b8d8 <__sfputc_r>:
 801b8d8:	6893      	ldr	r3, [r2, #8]
 801b8da:	3b01      	subs	r3, #1
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	b410      	push	{r4}
 801b8e0:	6093      	str	r3, [r2, #8]
 801b8e2:	da08      	bge.n	801b8f6 <__sfputc_r+0x1e>
 801b8e4:	6994      	ldr	r4, [r2, #24]
 801b8e6:	42a3      	cmp	r3, r4
 801b8e8:	db01      	blt.n	801b8ee <__sfputc_r+0x16>
 801b8ea:	290a      	cmp	r1, #10
 801b8ec:	d103      	bne.n	801b8f6 <__sfputc_r+0x1e>
 801b8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b8f2:	f7ff be04 	b.w	801b4fe <__swbuf_r>
 801b8f6:	6813      	ldr	r3, [r2, #0]
 801b8f8:	1c58      	adds	r0, r3, #1
 801b8fa:	6010      	str	r0, [r2, #0]
 801b8fc:	7019      	strb	r1, [r3, #0]
 801b8fe:	4608      	mov	r0, r1
 801b900:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b904:	4770      	bx	lr

0801b906 <__sfputs_r>:
 801b906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b908:	4606      	mov	r6, r0
 801b90a:	460f      	mov	r7, r1
 801b90c:	4614      	mov	r4, r2
 801b90e:	18d5      	adds	r5, r2, r3
 801b910:	42ac      	cmp	r4, r5
 801b912:	d101      	bne.n	801b918 <__sfputs_r+0x12>
 801b914:	2000      	movs	r0, #0
 801b916:	e007      	b.n	801b928 <__sfputs_r+0x22>
 801b918:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b91c:	463a      	mov	r2, r7
 801b91e:	4630      	mov	r0, r6
 801b920:	f7ff ffda 	bl	801b8d8 <__sfputc_r>
 801b924:	1c43      	adds	r3, r0, #1
 801b926:	d1f3      	bne.n	801b910 <__sfputs_r+0xa>
 801b928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b92c <_vfiprintf_r>:
 801b92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b930:	460d      	mov	r5, r1
 801b932:	b09d      	sub	sp, #116	@ 0x74
 801b934:	4614      	mov	r4, r2
 801b936:	4698      	mov	r8, r3
 801b938:	4606      	mov	r6, r0
 801b93a:	b118      	cbz	r0, 801b944 <_vfiprintf_r+0x18>
 801b93c:	6a03      	ldr	r3, [r0, #32]
 801b93e:	b90b      	cbnz	r3, 801b944 <_vfiprintf_r+0x18>
 801b940:	f7ff fd40 	bl	801b3c4 <__sinit>
 801b944:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b946:	07d9      	lsls	r1, r3, #31
 801b948:	d405      	bmi.n	801b956 <_vfiprintf_r+0x2a>
 801b94a:	89ab      	ldrh	r3, [r5, #12]
 801b94c:	059a      	lsls	r2, r3, #22
 801b94e:	d402      	bmi.n	801b956 <_vfiprintf_r+0x2a>
 801b950:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b952:	f7ff ff60 	bl	801b816 <__retarget_lock_acquire_recursive>
 801b956:	89ab      	ldrh	r3, [r5, #12]
 801b958:	071b      	lsls	r3, r3, #28
 801b95a:	d501      	bpl.n	801b960 <_vfiprintf_r+0x34>
 801b95c:	692b      	ldr	r3, [r5, #16]
 801b95e:	b99b      	cbnz	r3, 801b988 <_vfiprintf_r+0x5c>
 801b960:	4629      	mov	r1, r5
 801b962:	4630      	mov	r0, r6
 801b964:	f7ff fe0a 	bl	801b57c <__swsetup_r>
 801b968:	b170      	cbz	r0, 801b988 <_vfiprintf_r+0x5c>
 801b96a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b96c:	07dc      	lsls	r4, r3, #31
 801b96e:	d504      	bpl.n	801b97a <_vfiprintf_r+0x4e>
 801b970:	f04f 30ff 	mov.w	r0, #4294967295
 801b974:	b01d      	add	sp, #116	@ 0x74
 801b976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b97a:	89ab      	ldrh	r3, [r5, #12]
 801b97c:	0598      	lsls	r0, r3, #22
 801b97e:	d4f7      	bmi.n	801b970 <_vfiprintf_r+0x44>
 801b980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b982:	f7ff ff49 	bl	801b818 <__retarget_lock_release_recursive>
 801b986:	e7f3      	b.n	801b970 <_vfiprintf_r+0x44>
 801b988:	2300      	movs	r3, #0
 801b98a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b98c:	2320      	movs	r3, #32
 801b98e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b992:	f8cd 800c 	str.w	r8, [sp, #12]
 801b996:	2330      	movs	r3, #48	@ 0x30
 801b998:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801bb48 <_vfiprintf_r+0x21c>
 801b99c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b9a0:	f04f 0901 	mov.w	r9, #1
 801b9a4:	4623      	mov	r3, r4
 801b9a6:	469a      	mov	sl, r3
 801b9a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b9ac:	b10a      	cbz	r2, 801b9b2 <_vfiprintf_r+0x86>
 801b9ae:	2a25      	cmp	r2, #37	@ 0x25
 801b9b0:	d1f9      	bne.n	801b9a6 <_vfiprintf_r+0x7a>
 801b9b2:	ebba 0b04 	subs.w	fp, sl, r4
 801b9b6:	d00b      	beq.n	801b9d0 <_vfiprintf_r+0xa4>
 801b9b8:	465b      	mov	r3, fp
 801b9ba:	4622      	mov	r2, r4
 801b9bc:	4629      	mov	r1, r5
 801b9be:	4630      	mov	r0, r6
 801b9c0:	f7ff ffa1 	bl	801b906 <__sfputs_r>
 801b9c4:	3001      	adds	r0, #1
 801b9c6:	f000 80a7 	beq.w	801bb18 <_vfiprintf_r+0x1ec>
 801b9ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b9cc:	445a      	add	r2, fp
 801b9ce:	9209      	str	r2, [sp, #36]	@ 0x24
 801b9d0:	f89a 3000 	ldrb.w	r3, [sl]
 801b9d4:	2b00      	cmp	r3, #0
 801b9d6:	f000 809f 	beq.w	801bb18 <_vfiprintf_r+0x1ec>
 801b9da:	2300      	movs	r3, #0
 801b9dc:	f04f 32ff 	mov.w	r2, #4294967295
 801b9e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b9e4:	f10a 0a01 	add.w	sl, sl, #1
 801b9e8:	9304      	str	r3, [sp, #16]
 801b9ea:	9307      	str	r3, [sp, #28]
 801b9ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b9f0:	931a      	str	r3, [sp, #104]	@ 0x68
 801b9f2:	4654      	mov	r4, sl
 801b9f4:	2205      	movs	r2, #5
 801b9f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b9fa:	4853      	ldr	r0, [pc, #332]	@ (801bb48 <_vfiprintf_r+0x21c>)
 801b9fc:	f7e4 fc88 	bl	8000310 <memchr>
 801ba00:	9a04      	ldr	r2, [sp, #16]
 801ba02:	b9d8      	cbnz	r0, 801ba3c <_vfiprintf_r+0x110>
 801ba04:	06d1      	lsls	r1, r2, #27
 801ba06:	bf44      	itt	mi
 801ba08:	2320      	movmi	r3, #32
 801ba0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ba0e:	0713      	lsls	r3, r2, #28
 801ba10:	bf44      	itt	mi
 801ba12:	232b      	movmi	r3, #43	@ 0x2b
 801ba14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ba18:	f89a 3000 	ldrb.w	r3, [sl]
 801ba1c:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba1e:	d015      	beq.n	801ba4c <_vfiprintf_r+0x120>
 801ba20:	9a07      	ldr	r2, [sp, #28]
 801ba22:	4654      	mov	r4, sl
 801ba24:	2000      	movs	r0, #0
 801ba26:	f04f 0c0a 	mov.w	ip, #10
 801ba2a:	4621      	mov	r1, r4
 801ba2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ba30:	3b30      	subs	r3, #48	@ 0x30
 801ba32:	2b09      	cmp	r3, #9
 801ba34:	d94b      	bls.n	801bace <_vfiprintf_r+0x1a2>
 801ba36:	b1b0      	cbz	r0, 801ba66 <_vfiprintf_r+0x13a>
 801ba38:	9207      	str	r2, [sp, #28]
 801ba3a:	e014      	b.n	801ba66 <_vfiprintf_r+0x13a>
 801ba3c:	eba0 0308 	sub.w	r3, r0, r8
 801ba40:	fa09 f303 	lsl.w	r3, r9, r3
 801ba44:	4313      	orrs	r3, r2
 801ba46:	9304      	str	r3, [sp, #16]
 801ba48:	46a2      	mov	sl, r4
 801ba4a:	e7d2      	b.n	801b9f2 <_vfiprintf_r+0xc6>
 801ba4c:	9b03      	ldr	r3, [sp, #12]
 801ba4e:	1d19      	adds	r1, r3, #4
 801ba50:	681b      	ldr	r3, [r3, #0]
 801ba52:	9103      	str	r1, [sp, #12]
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	bfbb      	ittet	lt
 801ba58:	425b      	neglt	r3, r3
 801ba5a:	f042 0202 	orrlt.w	r2, r2, #2
 801ba5e:	9307      	strge	r3, [sp, #28]
 801ba60:	9307      	strlt	r3, [sp, #28]
 801ba62:	bfb8      	it	lt
 801ba64:	9204      	strlt	r2, [sp, #16]
 801ba66:	7823      	ldrb	r3, [r4, #0]
 801ba68:	2b2e      	cmp	r3, #46	@ 0x2e
 801ba6a:	d10a      	bne.n	801ba82 <_vfiprintf_r+0x156>
 801ba6c:	7863      	ldrb	r3, [r4, #1]
 801ba6e:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba70:	d132      	bne.n	801bad8 <_vfiprintf_r+0x1ac>
 801ba72:	9b03      	ldr	r3, [sp, #12]
 801ba74:	1d1a      	adds	r2, r3, #4
 801ba76:	681b      	ldr	r3, [r3, #0]
 801ba78:	9203      	str	r2, [sp, #12]
 801ba7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ba7e:	3402      	adds	r4, #2
 801ba80:	9305      	str	r3, [sp, #20]
 801ba82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801bb58 <_vfiprintf_r+0x22c>
 801ba86:	7821      	ldrb	r1, [r4, #0]
 801ba88:	2203      	movs	r2, #3
 801ba8a:	4650      	mov	r0, sl
 801ba8c:	f7e4 fc40 	bl	8000310 <memchr>
 801ba90:	b138      	cbz	r0, 801baa2 <_vfiprintf_r+0x176>
 801ba92:	9b04      	ldr	r3, [sp, #16]
 801ba94:	eba0 000a 	sub.w	r0, r0, sl
 801ba98:	2240      	movs	r2, #64	@ 0x40
 801ba9a:	4082      	lsls	r2, r0
 801ba9c:	4313      	orrs	r3, r2
 801ba9e:	3401      	adds	r4, #1
 801baa0:	9304      	str	r3, [sp, #16]
 801baa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801baa6:	4829      	ldr	r0, [pc, #164]	@ (801bb4c <_vfiprintf_r+0x220>)
 801baa8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801baac:	2206      	movs	r2, #6
 801baae:	f7e4 fc2f 	bl	8000310 <memchr>
 801bab2:	2800      	cmp	r0, #0
 801bab4:	d03f      	beq.n	801bb36 <_vfiprintf_r+0x20a>
 801bab6:	4b26      	ldr	r3, [pc, #152]	@ (801bb50 <_vfiprintf_r+0x224>)
 801bab8:	bb1b      	cbnz	r3, 801bb02 <_vfiprintf_r+0x1d6>
 801baba:	9b03      	ldr	r3, [sp, #12]
 801babc:	3307      	adds	r3, #7
 801babe:	f023 0307 	bic.w	r3, r3, #7
 801bac2:	3308      	adds	r3, #8
 801bac4:	9303      	str	r3, [sp, #12]
 801bac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bac8:	443b      	add	r3, r7
 801baca:	9309      	str	r3, [sp, #36]	@ 0x24
 801bacc:	e76a      	b.n	801b9a4 <_vfiprintf_r+0x78>
 801bace:	fb0c 3202 	mla	r2, ip, r2, r3
 801bad2:	460c      	mov	r4, r1
 801bad4:	2001      	movs	r0, #1
 801bad6:	e7a8      	b.n	801ba2a <_vfiprintf_r+0xfe>
 801bad8:	2300      	movs	r3, #0
 801bada:	3401      	adds	r4, #1
 801badc:	9305      	str	r3, [sp, #20]
 801bade:	4619      	mov	r1, r3
 801bae0:	f04f 0c0a 	mov.w	ip, #10
 801bae4:	4620      	mov	r0, r4
 801bae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801baea:	3a30      	subs	r2, #48	@ 0x30
 801baec:	2a09      	cmp	r2, #9
 801baee:	d903      	bls.n	801baf8 <_vfiprintf_r+0x1cc>
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	d0c6      	beq.n	801ba82 <_vfiprintf_r+0x156>
 801baf4:	9105      	str	r1, [sp, #20]
 801baf6:	e7c4      	b.n	801ba82 <_vfiprintf_r+0x156>
 801baf8:	fb0c 2101 	mla	r1, ip, r1, r2
 801bafc:	4604      	mov	r4, r0
 801bafe:	2301      	movs	r3, #1
 801bb00:	e7f0      	b.n	801bae4 <_vfiprintf_r+0x1b8>
 801bb02:	ab03      	add	r3, sp, #12
 801bb04:	9300      	str	r3, [sp, #0]
 801bb06:	462a      	mov	r2, r5
 801bb08:	4b12      	ldr	r3, [pc, #72]	@ (801bb54 <_vfiprintf_r+0x228>)
 801bb0a:	a904      	add	r1, sp, #16
 801bb0c:	4630      	mov	r0, r6
 801bb0e:	f3af 8000 	nop.w
 801bb12:	4607      	mov	r7, r0
 801bb14:	1c78      	adds	r0, r7, #1
 801bb16:	d1d6      	bne.n	801bac6 <_vfiprintf_r+0x19a>
 801bb18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bb1a:	07d9      	lsls	r1, r3, #31
 801bb1c:	d405      	bmi.n	801bb2a <_vfiprintf_r+0x1fe>
 801bb1e:	89ab      	ldrh	r3, [r5, #12]
 801bb20:	059a      	lsls	r2, r3, #22
 801bb22:	d402      	bmi.n	801bb2a <_vfiprintf_r+0x1fe>
 801bb24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bb26:	f7ff fe77 	bl	801b818 <__retarget_lock_release_recursive>
 801bb2a:	89ab      	ldrh	r3, [r5, #12]
 801bb2c:	065b      	lsls	r3, r3, #25
 801bb2e:	f53f af1f 	bmi.w	801b970 <_vfiprintf_r+0x44>
 801bb32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bb34:	e71e      	b.n	801b974 <_vfiprintf_r+0x48>
 801bb36:	ab03      	add	r3, sp, #12
 801bb38:	9300      	str	r3, [sp, #0]
 801bb3a:	462a      	mov	r2, r5
 801bb3c:	4b05      	ldr	r3, [pc, #20]	@ (801bb54 <_vfiprintf_r+0x228>)
 801bb3e:	a904      	add	r1, sp, #16
 801bb40:	4630      	mov	r0, r6
 801bb42:	f000 f879 	bl	801bc38 <_printf_i>
 801bb46:	e7e4      	b.n	801bb12 <_vfiprintf_r+0x1e6>
 801bb48:	0801f4d1 	.word	0x0801f4d1
 801bb4c:	0801f4db 	.word	0x0801f4db
 801bb50:	00000000 	.word	0x00000000
 801bb54:	0801b907 	.word	0x0801b907
 801bb58:	0801f4d7 	.word	0x0801f4d7

0801bb5c <_printf_common>:
 801bb5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb60:	4616      	mov	r6, r2
 801bb62:	4698      	mov	r8, r3
 801bb64:	688a      	ldr	r2, [r1, #8]
 801bb66:	690b      	ldr	r3, [r1, #16]
 801bb68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801bb6c:	4293      	cmp	r3, r2
 801bb6e:	bfb8      	it	lt
 801bb70:	4613      	movlt	r3, r2
 801bb72:	6033      	str	r3, [r6, #0]
 801bb74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801bb78:	4607      	mov	r7, r0
 801bb7a:	460c      	mov	r4, r1
 801bb7c:	b10a      	cbz	r2, 801bb82 <_printf_common+0x26>
 801bb7e:	3301      	adds	r3, #1
 801bb80:	6033      	str	r3, [r6, #0]
 801bb82:	6823      	ldr	r3, [r4, #0]
 801bb84:	0699      	lsls	r1, r3, #26
 801bb86:	bf42      	ittt	mi
 801bb88:	6833      	ldrmi	r3, [r6, #0]
 801bb8a:	3302      	addmi	r3, #2
 801bb8c:	6033      	strmi	r3, [r6, #0]
 801bb8e:	6825      	ldr	r5, [r4, #0]
 801bb90:	f015 0506 	ands.w	r5, r5, #6
 801bb94:	d106      	bne.n	801bba4 <_printf_common+0x48>
 801bb96:	f104 0a19 	add.w	sl, r4, #25
 801bb9a:	68e3      	ldr	r3, [r4, #12]
 801bb9c:	6832      	ldr	r2, [r6, #0]
 801bb9e:	1a9b      	subs	r3, r3, r2
 801bba0:	42ab      	cmp	r3, r5
 801bba2:	dc26      	bgt.n	801bbf2 <_printf_common+0x96>
 801bba4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801bba8:	6822      	ldr	r2, [r4, #0]
 801bbaa:	3b00      	subs	r3, #0
 801bbac:	bf18      	it	ne
 801bbae:	2301      	movne	r3, #1
 801bbb0:	0692      	lsls	r2, r2, #26
 801bbb2:	d42b      	bmi.n	801bc0c <_printf_common+0xb0>
 801bbb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801bbb8:	4641      	mov	r1, r8
 801bbba:	4638      	mov	r0, r7
 801bbbc:	47c8      	blx	r9
 801bbbe:	3001      	adds	r0, #1
 801bbc0:	d01e      	beq.n	801bc00 <_printf_common+0xa4>
 801bbc2:	6823      	ldr	r3, [r4, #0]
 801bbc4:	6922      	ldr	r2, [r4, #16]
 801bbc6:	f003 0306 	and.w	r3, r3, #6
 801bbca:	2b04      	cmp	r3, #4
 801bbcc:	bf02      	ittt	eq
 801bbce:	68e5      	ldreq	r5, [r4, #12]
 801bbd0:	6833      	ldreq	r3, [r6, #0]
 801bbd2:	1aed      	subeq	r5, r5, r3
 801bbd4:	68a3      	ldr	r3, [r4, #8]
 801bbd6:	bf0c      	ite	eq
 801bbd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bbdc:	2500      	movne	r5, #0
 801bbde:	4293      	cmp	r3, r2
 801bbe0:	bfc4      	itt	gt
 801bbe2:	1a9b      	subgt	r3, r3, r2
 801bbe4:	18ed      	addgt	r5, r5, r3
 801bbe6:	2600      	movs	r6, #0
 801bbe8:	341a      	adds	r4, #26
 801bbea:	42b5      	cmp	r5, r6
 801bbec:	d11a      	bne.n	801bc24 <_printf_common+0xc8>
 801bbee:	2000      	movs	r0, #0
 801bbf0:	e008      	b.n	801bc04 <_printf_common+0xa8>
 801bbf2:	2301      	movs	r3, #1
 801bbf4:	4652      	mov	r2, sl
 801bbf6:	4641      	mov	r1, r8
 801bbf8:	4638      	mov	r0, r7
 801bbfa:	47c8      	blx	r9
 801bbfc:	3001      	adds	r0, #1
 801bbfe:	d103      	bne.n	801bc08 <_printf_common+0xac>
 801bc00:	f04f 30ff 	mov.w	r0, #4294967295
 801bc04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc08:	3501      	adds	r5, #1
 801bc0a:	e7c6      	b.n	801bb9a <_printf_common+0x3e>
 801bc0c:	18e1      	adds	r1, r4, r3
 801bc0e:	1c5a      	adds	r2, r3, #1
 801bc10:	2030      	movs	r0, #48	@ 0x30
 801bc12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801bc16:	4422      	add	r2, r4
 801bc18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801bc1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801bc20:	3302      	adds	r3, #2
 801bc22:	e7c7      	b.n	801bbb4 <_printf_common+0x58>
 801bc24:	2301      	movs	r3, #1
 801bc26:	4622      	mov	r2, r4
 801bc28:	4641      	mov	r1, r8
 801bc2a:	4638      	mov	r0, r7
 801bc2c:	47c8      	blx	r9
 801bc2e:	3001      	adds	r0, #1
 801bc30:	d0e6      	beq.n	801bc00 <_printf_common+0xa4>
 801bc32:	3601      	adds	r6, #1
 801bc34:	e7d9      	b.n	801bbea <_printf_common+0x8e>
	...

0801bc38 <_printf_i>:
 801bc38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bc3c:	7e0f      	ldrb	r7, [r1, #24]
 801bc3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bc40:	2f78      	cmp	r7, #120	@ 0x78
 801bc42:	4691      	mov	r9, r2
 801bc44:	4680      	mov	r8, r0
 801bc46:	460c      	mov	r4, r1
 801bc48:	469a      	mov	sl, r3
 801bc4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801bc4e:	d807      	bhi.n	801bc60 <_printf_i+0x28>
 801bc50:	2f62      	cmp	r7, #98	@ 0x62
 801bc52:	d80a      	bhi.n	801bc6a <_printf_i+0x32>
 801bc54:	2f00      	cmp	r7, #0
 801bc56:	f000 80d1 	beq.w	801bdfc <_printf_i+0x1c4>
 801bc5a:	2f58      	cmp	r7, #88	@ 0x58
 801bc5c:	f000 80b8 	beq.w	801bdd0 <_printf_i+0x198>
 801bc60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bc64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801bc68:	e03a      	b.n	801bce0 <_printf_i+0xa8>
 801bc6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801bc6e:	2b15      	cmp	r3, #21
 801bc70:	d8f6      	bhi.n	801bc60 <_printf_i+0x28>
 801bc72:	a101      	add	r1, pc, #4	@ (adr r1, 801bc78 <_printf_i+0x40>)
 801bc74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bc78:	0801bcd1 	.word	0x0801bcd1
 801bc7c:	0801bce5 	.word	0x0801bce5
 801bc80:	0801bc61 	.word	0x0801bc61
 801bc84:	0801bc61 	.word	0x0801bc61
 801bc88:	0801bc61 	.word	0x0801bc61
 801bc8c:	0801bc61 	.word	0x0801bc61
 801bc90:	0801bce5 	.word	0x0801bce5
 801bc94:	0801bc61 	.word	0x0801bc61
 801bc98:	0801bc61 	.word	0x0801bc61
 801bc9c:	0801bc61 	.word	0x0801bc61
 801bca0:	0801bc61 	.word	0x0801bc61
 801bca4:	0801bde3 	.word	0x0801bde3
 801bca8:	0801bd0f 	.word	0x0801bd0f
 801bcac:	0801bd9d 	.word	0x0801bd9d
 801bcb0:	0801bc61 	.word	0x0801bc61
 801bcb4:	0801bc61 	.word	0x0801bc61
 801bcb8:	0801be05 	.word	0x0801be05
 801bcbc:	0801bc61 	.word	0x0801bc61
 801bcc0:	0801bd0f 	.word	0x0801bd0f
 801bcc4:	0801bc61 	.word	0x0801bc61
 801bcc8:	0801bc61 	.word	0x0801bc61
 801bccc:	0801bda5 	.word	0x0801bda5
 801bcd0:	6833      	ldr	r3, [r6, #0]
 801bcd2:	1d1a      	adds	r2, r3, #4
 801bcd4:	681b      	ldr	r3, [r3, #0]
 801bcd6:	6032      	str	r2, [r6, #0]
 801bcd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bcdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801bce0:	2301      	movs	r3, #1
 801bce2:	e09c      	b.n	801be1e <_printf_i+0x1e6>
 801bce4:	6833      	ldr	r3, [r6, #0]
 801bce6:	6820      	ldr	r0, [r4, #0]
 801bce8:	1d19      	adds	r1, r3, #4
 801bcea:	6031      	str	r1, [r6, #0]
 801bcec:	0606      	lsls	r6, r0, #24
 801bcee:	d501      	bpl.n	801bcf4 <_printf_i+0xbc>
 801bcf0:	681d      	ldr	r5, [r3, #0]
 801bcf2:	e003      	b.n	801bcfc <_printf_i+0xc4>
 801bcf4:	0645      	lsls	r5, r0, #25
 801bcf6:	d5fb      	bpl.n	801bcf0 <_printf_i+0xb8>
 801bcf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801bcfc:	2d00      	cmp	r5, #0
 801bcfe:	da03      	bge.n	801bd08 <_printf_i+0xd0>
 801bd00:	232d      	movs	r3, #45	@ 0x2d
 801bd02:	426d      	negs	r5, r5
 801bd04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bd08:	4858      	ldr	r0, [pc, #352]	@ (801be6c <_printf_i+0x234>)
 801bd0a:	230a      	movs	r3, #10
 801bd0c:	e011      	b.n	801bd32 <_printf_i+0xfa>
 801bd0e:	6821      	ldr	r1, [r4, #0]
 801bd10:	6833      	ldr	r3, [r6, #0]
 801bd12:	0608      	lsls	r0, r1, #24
 801bd14:	f853 5b04 	ldr.w	r5, [r3], #4
 801bd18:	d402      	bmi.n	801bd20 <_printf_i+0xe8>
 801bd1a:	0649      	lsls	r1, r1, #25
 801bd1c:	bf48      	it	mi
 801bd1e:	b2ad      	uxthmi	r5, r5
 801bd20:	2f6f      	cmp	r7, #111	@ 0x6f
 801bd22:	4852      	ldr	r0, [pc, #328]	@ (801be6c <_printf_i+0x234>)
 801bd24:	6033      	str	r3, [r6, #0]
 801bd26:	bf14      	ite	ne
 801bd28:	230a      	movne	r3, #10
 801bd2a:	2308      	moveq	r3, #8
 801bd2c:	2100      	movs	r1, #0
 801bd2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801bd32:	6866      	ldr	r6, [r4, #4]
 801bd34:	60a6      	str	r6, [r4, #8]
 801bd36:	2e00      	cmp	r6, #0
 801bd38:	db05      	blt.n	801bd46 <_printf_i+0x10e>
 801bd3a:	6821      	ldr	r1, [r4, #0]
 801bd3c:	432e      	orrs	r6, r5
 801bd3e:	f021 0104 	bic.w	r1, r1, #4
 801bd42:	6021      	str	r1, [r4, #0]
 801bd44:	d04b      	beq.n	801bdde <_printf_i+0x1a6>
 801bd46:	4616      	mov	r6, r2
 801bd48:	fbb5 f1f3 	udiv	r1, r5, r3
 801bd4c:	fb03 5711 	mls	r7, r3, r1, r5
 801bd50:	5dc7      	ldrb	r7, [r0, r7]
 801bd52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bd56:	462f      	mov	r7, r5
 801bd58:	42bb      	cmp	r3, r7
 801bd5a:	460d      	mov	r5, r1
 801bd5c:	d9f4      	bls.n	801bd48 <_printf_i+0x110>
 801bd5e:	2b08      	cmp	r3, #8
 801bd60:	d10b      	bne.n	801bd7a <_printf_i+0x142>
 801bd62:	6823      	ldr	r3, [r4, #0]
 801bd64:	07df      	lsls	r7, r3, #31
 801bd66:	d508      	bpl.n	801bd7a <_printf_i+0x142>
 801bd68:	6923      	ldr	r3, [r4, #16]
 801bd6a:	6861      	ldr	r1, [r4, #4]
 801bd6c:	4299      	cmp	r1, r3
 801bd6e:	bfde      	ittt	le
 801bd70:	2330      	movle	r3, #48	@ 0x30
 801bd72:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bd76:	f106 36ff 	addle.w	r6, r6, #4294967295
 801bd7a:	1b92      	subs	r2, r2, r6
 801bd7c:	6122      	str	r2, [r4, #16]
 801bd7e:	f8cd a000 	str.w	sl, [sp]
 801bd82:	464b      	mov	r3, r9
 801bd84:	aa03      	add	r2, sp, #12
 801bd86:	4621      	mov	r1, r4
 801bd88:	4640      	mov	r0, r8
 801bd8a:	f7ff fee7 	bl	801bb5c <_printf_common>
 801bd8e:	3001      	adds	r0, #1
 801bd90:	d14a      	bne.n	801be28 <_printf_i+0x1f0>
 801bd92:	f04f 30ff 	mov.w	r0, #4294967295
 801bd96:	b004      	add	sp, #16
 801bd98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd9c:	6823      	ldr	r3, [r4, #0]
 801bd9e:	f043 0320 	orr.w	r3, r3, #32
 801bda2:	6023      	str	r3, [r4, #0]
 801bda4:	4832      	ldr	r0, [pc, #200]	@ (801be70 <_printf_i+0x238>)
 801bda6:	2778      	movs	r7, #120	@ 0x78
 801bda8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801bdac:	6823      	ldr	r3, [r4, #0]
 801bdae:	6831      	ldr	r1, [r6, #0]
 801bdb0:	061f      	lsls	r7, r3, #24
 801bdb2:	f851 5b04 	ldr.w	r5, [r1], #4
 801bdb6:	d402      	bmi.n	801bdbe <_printf_i+0x186>
 801bdb8:	065f      	lsls	r7, r3, #25
 801bdba:	bf48      	it	mi
 801bdbc:	b2ad      	uxthmi	r5, r5
 801bdbe:	6031      	str	r1, [r6, #0]
 801bdc0:	07d9      	lsls	r1, r3, #31
 801bdc2:	bf44      	itt	mi
 801bdc4:	f043 0320 	orrmi.w	r3, r3, #32
 801bdc8:	6023      	strmi	r3, [r4, #0]
 801bdca:	b11d      	cbz	r5, 801bdd4 <_printf_i+0x19c>
 801bdcc:	2310      	movs	r3, #16
 801bdce:	e7ad      	b.n	801bd2c <_printf_i+0xf4>
 801bdd0:	4826      	ldr	r0, [pc, #152]	@ (801be6c <_printf_i+0x234>)
 801bdd2:	e7e9      	b.n	801bda8 <_printf_i+0x170>
 801bdd4:	6823      	ldr	r3, [r4, #0]
 801bdd6:	f023 0320 	bic.w	r3, r3, #32
 801bdda:	6023      	str	r3, [r4, #0]
 801bddc:	e7f6      	b.n	801bdcc <_printf_i+0x194>
 801bdde:	4616      	mov	r6, r2
 801bde0:	e7bd      	b.n	801bd5e <_printf_i+0x126>
 801bde2:	6833      	ldr	r3, [r6, #0]
 801bde4:	6825      	ldr	r5, [r4, #0]
 801bde6:	6961      	ldr	r1, [r4, #20]
 801bde8:	1d18      	adds	r0, r3, #4
 801bdea:	6030      	str	r0, [r6, #0]
 801bdec:	062e      	lsls	r6, r5, #24
 801bdee:	681b      	ldr	r3, [r3, #0]
 801bdf0:	d501      	bpl.n	801bdf6 <_printf_i+0x1be>
 801bdf2:	6019      	str	r1, [r3, #0]
 801bdf4:	e002      	b.n	801bdfc <_printf_i+0x1c4>
 801bdf6:	0668      	lsls	r0, r5, #25
 801bdf8:	d5fb      	bpl.n	801bdf2 <_printf_i+0x1ba>
 801bdfa:	8019      	strh	r1, [r3, #0]
 801bdfc:	2300      	movs	r3, #0
 801bdfe:	6123      	str	r3, [r4, #16]
 801be00:	4616      	mov	r6, r2
 801be02:	e7bc      	b.n	801bd7e <_printf_i+0x146>
 801be04:	6833      	ldr	r3, [r6, #0]
 801be06:	1d1a      	adds	r2, r3, #4
 801be08:	6032      	str	r2, [r6, #0]
 801be0a:	681e      	ldr	r6, [r3, #0]
 801be0c:	6862      	ldr	r2, [r4, #4]
 801be0e:	2100      	movs	r1, #0
 801be10:	4630      	mov	r0, r6
 801be12:	f7e4 fa7d 	bl	8000310 <memchr>
 801be16:	b108      	cbz	r0, 801be1c <_printf_i+0x1e4>
 801be18:	1b80      	subs	r0, r0, r6
 801be1a:	6060      	str	r0, [r4, #4]
 801be1c:	6863      	ldr	r3, [r4, #4]
 801be1e:	6123      	str	r3, [r4, #16]
 801be20:	2300      	movs	r3, #0
 801be22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801be26:	e7aa      	b.n	801bd7e <_printf_i+0x146>
 801be28:	6923      	ldr	r3, [r4, #16]
 801be2a:	4632      	mov	r2, r6
 801be2c:	4649      	mov	r1, r9
 801be2e:	4640      	mov	r0, r8
 801be30:	47d0      	blx	sl
 801be32:	3001      	adds	r0, #1
 801be34:	d0ad      	beq.n	801bd92 <_printf_i+0x15a>
 801be36:	6823      	ldr	r3, [r4, #0]
 801be38:	079b      	lsls	r3, r3, #30
 801be3a:	d413      	bmi.n	801be64 <_printf_i+0x22c>
 801be3c:	68e0      	ldr	r0, [r4, #12]
 801be3e:	9b03      	ldr	r3, [sp, #12]
 801be40:	4298      	cmp	r0, r3
 801be42:	bfb8      	it	lt
 801be44:	4618      	movlt	r0, r3
 801be46:	e7a6      	b.n	801bd96 <_printf_i+0x15e>
 801be48:	2301      	movs	r3, #1
 801be4a:	4632      	mov	r2, r6
 801be4c:	4649      	mov	r1, r9
 801be4e:	4640      	mov	r0, r8
 801be50:	47d0      	blx	sl
 801be52:	3001      	adds	r0, #1
 801be54:	d09d      	beq.n	801bd92 <_printf_i+0x15a>
 801be56:	3501      	adds	r5, #1
 801be58:	68e3      	ldr	r3, [r4, #12]
 801be5a:	9903      	ldr	r1, [sp, #12]
 801be5c:	1a5b      	subs	r3, r3, r1
 801be5e:	42ab      	cmp	r3, r5
 801be60:	dcf2      	bgt.n	801be48 <_printf_i+0x210>
 801be62:	e7eb      	b.n	801be3c <_printf_i+0x204>
 801be64:	2500      	movs	r5, #0
 801be66:	f104 0619 	add.w	r6, r4, #25
 801be6a:	e7f5      	b.n	801be58 <_printf_i+0x220>
 801be6c:	0801f4e2 	.word	0x0801f4e2
 801be70:	0801f4f3 	.word	0x0801f4f3

0801be74 <__sflush_r>:
 801be74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801be78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be7c:	0716      	lsls	r6, r2, #28
 801be7e:	4605      	mov	r5, r0
 801be80:	460c      	mov	r4, r1
 801be82:	d454      	bmi.n	801bf2e <__sflush_r+0xba>
 801be84:	684b      	ldr	r3, [r1, #4]
 801be86:	2b00      	cmp	r3, #0
 801be88:	dc02      	bgt.n	801be90 <__sflush_r+0x1c>
 801be8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801be8c:	2b00      	cmp	r3, #0
 801be8e:	dd48      	ble.n	801bf22 <__sflush_r+0xae>
 801be90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801be92:	2e00      	cmp	r6, #0
 801be94:	d045      	beq.n	801bf22 <__sflush_r+0xae>
 801be96:	2300      	movs	r3, #0
 801be98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801be9c:	682f      	ldr	r7, [r5, #0]
 801be9e:	6a21      	ldr	r1, [r4, #32]
 801bea0:	602b      	str	r3, [r5, #0]
 801bea2:	d030      	beq.n	801bf06 <__sflush_r+0x92>
 801bea4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801bea6:	89a3      	ldrh	r3, [r4, #12]
 801bea8:	0759      	lsls	r1, r3, #29
 801beaa:	d505      	bpl.n	801beb8 <__sflush_r+0x44>
 801beac:	6863      	ldr	r3, [r4, #4]
 801beae:	1ad2      	subs	r2, r2, r3
 801beb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801beb2:	b10b      	cbz	r3, 801beb8 <__sflush_r+0x44>
 801beb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801beb6:	1ad2      	subs	r2, r2, r3
 801beb8:	2300      	movs	r3, #0
 801beba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bebc:	6a21      	ldr	r1, [r4, #32]
 801bebe:	4628      	mov	r0, r5
 801bec0:	47b0      	blx	r6
 801bec2:	1c43      	adds	r3, r0, #1
 801bec4:	89a3      	ldrh	r3, [r4, #12]
 801bec6:	d106      	bne.n	801bed6 <__sflush_r+0x62>
 801bec8:	6829      	ldr	r1, [r5, #0]
 801beca:	291d      	cmp	r1, #29
 801becc:	d82b      	bhi.n	801bf26 <__sflush_r+0xb2>
 801bece:	4a2a      	ldr	r2, [pc, #168]	@ (801bf78 <__sflush_r+0x104>)
 801bed0:	40ca      	lsrs	r2, r1
 801bed2:	07d6      	lsls	r6, r2, #31
 801bed4:	d527      	bpl.n	801bf26 <__sflush_r+0xb2>
 801bed6:	2200      	movs	r2, #0
 801bed8:	6062      	str	r2, [r4, #4]
 801beda:	04d9      	lsls	r1, r3, #19
 801bedc:	6922      	ldr	r2, [r4, #16]
 801bede:	6022      	str	r2, [r4, #0]
 801bee0:	d504      	bpl.n	801beec <__sflush_r+0x78>
 801bee2:	1c42      	adds	r2, r0, #1
 801bee4:	d101      	bne.n	801beea <__sflush_r+0x76>
 801bee6:	682b      	ldr	r3, [r5, #0]
 801bee8:	b903      	cbnz	r3, 801beec <__sflush_r+0x78>
 801beea:	6560      	str	r0, [r4, #84]	@ 0x54
 801beec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801beee:	602f      	str	r7, [r5, #0]
 801bef0:	b1b9      	cbz	r1, 801bf22 <__sflush_r+0xae>
 801bef2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bef6:	4299      	cmp	r1, r3
 801bef8:	d002      	beq.n	801bf00 <__sflush_r+0x8c>
 801befa:	4628      	mov	r0, r5
 801befc:	f7ff fca2 	bl	801b844 <_free_r>
 801bf00:	2300      	movs	r3, #0
 801bf02:	6363      	str	r3, [r4, #52]	@ 0x34
 801bf04:	e00d      	b.n	801bf22 <__sflush_r+0xae>
 801bf06:	2301      	movs	r3, #1
 801bf08:	4628      	mov	r0, r5
 801bf0a:	47b0      	blx	r6
 801bf0c:	4602      	mov	r2, r0
 801bf0e:	1c50      	adds	r0, r2, #1
 801bf10:	d1c9      	bne.n	801bea6 <__sflush_r+0x32>
 801bf12:	682b      	ldr	r3, [r5, #0]
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	d0c6      	beq.n	801bea6 <__sflush_r+0x32>
 801bf18:	2b1d      	cmp	r3, #29
 801bf1a:	d001      	beq.n	801bf20 <__sflush_r+0xac>
 801bf1c:	2b16      	cmp	r3, #22
 801bf1e:	d11e      	bne.n	801bf5e <__sflush_r+0xea>
 801bf20:	602f      	str	r7, [r5, #0]
 801bf22:	2000      	movs	r0, #0
 801bf24:	e022      	b.n	801bf6c <__sflush_r+0xf8>
 801bf26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bf2a:	b21b      	sxth	r3, r3
 801bf2c:	e01b      	b.n	801bf66 <__sflush_r+0xf2>
 801bf2e:	690f      	ldr	r7, [r1, #16]
 801bf30:	2f00      	cmp	r7, #0
 801bf32:	d0f6      	beq.n	801bf22 <__sflush_r+0xae>
 801bf34:	0793      	lsls	r3, r2, #30
 801bf36:	680e      	ldr	r6, [r1, #0]
 801bf38:	bf08      	it	eq
 801bf3a:	694b      	ldreq	r3, [r1, #20]
 801bf3c:	600f      	str	r7, [r1, #0]
 801bf3e:	bf18      	it	ne
 801bf40:	2300      	movne	r3, #0
 801bf42:	eba6 0807 	sub.w	r8, r6, r7
 801bf46:	608b      	str	r3, [r1, #8]
 801bf48:	f1b8 0f00 	cmp.w	r8, #0
 801bf4c:	dde9      	ble.n	801bf22 <__sflush_r+0xae>
 801bf4e:	6a21      	ldr	r1, [r4, #32]
 801bf50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801bf52:	4643      	mov	r3, r8
 801bf54:	463a      	mov	r2, r7
 801bf56:	4628      	mov	r0, r5
 801bf58:	47b0      	blx	r6
 801bf5a:	2800      	cmp	r0, #0
 801bf5c:	dc08      	bgt.n	801bf70 <__sflush_r+0xfc>
 801bf5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bf66:	81a3      	strh	r3, [r4, #12]
 801bf68:	f04f 30ff 	mov.w	r0, #4294967295
 801bf6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf70:	4407      	add	r7, r0
 801bf72:	eba8 0800 	sub.w	r8, r8, r0
 801bf76:	e7e7      	b.n	801bf48 <__sflush_r+0xd4>
 801bf78:	20400001 	.word	0x20400001

0801bf7c <_fflush_r>:
 801bf7c:	b538      	push	{r3, r4, r5, lr}
 801bf7e:	690b      	ldr	r3, [r1, #16]
 801bf80:	4605      	mov	r5, r0
 801bf82:	460c      	mov	r4, r1
 801bf84:	b913      	cbnz	r3, 801bf8c <_fflush_r+0x10>
 801bf86:	2500      	movs	r5, #0
 801bf88:	4628      	mov	r0, r5
 801bf8a:	bd38      	pop	{r3, r4, r5, pc}
 801bf8c:	b118      	cbz	r0, 801bf96 <_fflush_r+0x1a>
 801bf8e:	6a03      	ldr	r3, [r0, #32]
 801bf90:	b90b      	cbnz	r3, 801bf96 <_fflush_r+0x1a>
 801bf92:	f7ff fa17 	bl	801b3c4 <__sinit>
 801bf96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d0f3      	beq.n	801bf86 <_fflush_r+0xa>
 801bf9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801bfa0:	07d0      	lsls	r0, r2, #31
 801bfa2:	d404      	bmi.n	801bfae <_fflush_r+0x32>
 801bfa4:	0599      	lsls	r1, r3, #22
 801bfa6:	d402      	bmi.n	801bfae <_fflush_r+0x32>
 801bfa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bfaa:	f7ff fc34 	bl	801b816 <__retarget_lock_acquire_recursive>
 801bfae:	4628      	mov	r0, r5
 801bfb0:	4621      	mov	r1, r4
 801bfb2:	f7ff ff5f 	bl	801be74 <__sflush_r>
 801bfb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bfb8:	07da      	lsls	r2, r3, #31
 801bfba:	4605      	mov	r5, r0
 801bfbc:	d4e4      	bmi.n	801bf88 <_fflush_r+0xc>
 801bfbe:	89a3      	ldrh	r3, [r4, #12]
 801bfc0:	059b      	lsls	r3, r3, #22
 801bfc2:	d4e1      	bmi.n	801bf88 <_fflush_r+0xc>
 801bfc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bfc6:	f7ff fc27 	bl	801b818 <__retarget_lock_release_recursive>
 801bfca:	e7dd      	b.n	801bf88 <_fflush_r+0xc>

0801bfcc <__swhatbuf_r>:
 801bfcc:	b570      	push	{r4, r5, r6, lr}
 801bfce:	460c      	mov	r4, r1
 801bfd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bfd4:	2900      	cmp	r1, #0
 801bfd6:	b096      	sub	sp, #88	@ 0x58
 801bfd8:	4615      	mov	r5, r2
 801bfda:	461e      	mov	r6, r3
 801bfdc:	da0d      	bge.n	801bffa <__swhatbuf_r+0x2e>
 801bfde:	89a3      	ldrh	r3, [r4, #12]
 801bfe0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801bfe4:	f04f 0100 	mov.w	r1, #0
 801bfe8:	bf14      	ite	ne
 801bfea:	2340      	movne	r3, #64	@ 0x40
 801bfec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801bff0:	2000      	movs	r0, #0
 801bff2:	6031      	str	r1, [r6, #0]
 801bff4:	602b      	str	r3, [r5, #0]
 801bff6:	b016      	add	sp, #88	@ 0x58
 801bff8:	bd70      	pop	{r4, r5, r6, pc}
 801bffa:	466a      	mov	r2, sp
 801bffc:	f000 f878 	bl	801c0f0 <_fstat_r>
 801c000:	2800      	cmp	r0, #0
 801c002:	dbec      	blt.n	801bfde <__swhatbuf_r+0x12>
 801c004:	9901      	ldr	r1, [sp, #4]
 801c006:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c00a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c00e:	4259      	negs	r1, r3
 801c010:	4159      	adcs	r1, r3
 801c012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c016:	e7eb      	b.n	801bff0 <__swhatbuf_r+0x24>

0801c018 <__smakebuf_r>:
 801c018:	898b      	ldrh	r3, [r1, #12]
 801c01a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c01c:	079d      	lsls	r5, r3, #30
 801c01e:	4606      	mov	r6, r0
 801c020:	460c      	mov	r4, r1
 801c022:	d507      	bpl.n	801c034 <__smakebuf_r+0x1c>
 801c024:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c028:	6023      	str	r3, [r4, #0]
 801c02a:	6123      	str	r3, [r4, #16]
 801c02c:	2301      	movs	r3, #1
 801c02e:	6163      	str	r3, [r4, #20]
 801c030:	b003      	add	sp, #12
 801c032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c034:	ab01      	add	r3, sp, #4
 801c036:	466a      	mov	r2, sp
 801c038:	f7ff ffc8 	bl	801bfcc <__swhatbuf_r>
 801c03c:	9f00      	ldr	r7, [sp, #0]
 801c03e:	4605      	mov	r5, r0
 801c040:	4639      	mov	r1, r7
 801c042:	4630      	mov	r0, r6
 801c044:	f7ff f868 	bl	801b118 <_malloc_r>
 801c048:	b948      	cbnz	r0, 801c05e <__smakebuf_r+0x46>
 801c04a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c04e:	059a      	lsls	r2, r3, #22
 801c050:	d4ee      	bmi.n	801c030 <__smakebuf_r+0x18>
 801c052:	f023 0303 	bic.w	r3, r3, #3
 801c056:	f043 0302 	orr.w	r3, r3, #2
 801c05a:	81a3      	strh	r3, [r4, #12]
 801c05c:	e7e2      	b.n	801c024 <__smakebuf_r+0xc>
 801c05e:	89a3      	ldrh	r3, [r4, #12]
 801c060:	6020      	str	r0, [r4, #0]
 801c062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c066:	81a3      	strh	r3, [r4, #12]
 801c068:	9b01      	ldr	r3, [sp, #4]
 801c06a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c06e:	b15b      	cbz	r3, 801c088 <__smakebuf_r+0x70>
 801c070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c074:	4630      	mov	r0, r6
 801c076:	f000 f84d 	bl	801c114 <_isatty_r>
 801c07a:	b128      	cbz	r0, 801c088 <__smakebuf_r+0x70>
 801c07c:	89a3      	ldrh	r3, [r4, #12]
 801c07e:	f023 0303 	bic.w	r3, r3, #3
 801c082:	f043 0301 	orr.w	r3, r3, #1
 801c086:	81a3      	strh	r3, [r4, #12]
 801c088:	89a3      	ldrh	r3, [r4, #12]
 801c08a:	431d      	orrs	r5, r3
 801c08c:	81a5      	strh	r5, [r4, #12]
 801c08e:	e7cf      	b.n	801c030 <__smakebuf_r+0x18>

0801c090 <_raise_r>:
 801c090:	291f      	cmp	r1, #31
 801c092:	b538      	push	{r3, r4, r5, lr}
 801c094:	4605      	mov	r5, r0
 801c096:	460c      	mov	r4, r1
 801c098:	d904      	bls.n	801c0a4 <_raise_r+0x14>
 801c09a:	2316      	movs	r3, #22
 801c09c:	6003      	str	r3, [r0, #0]
 801c09e:	f04f 30ff 	mov.w	r0, #4294967295
 801c0a2:	bd38      	pop	{r3, r4, r5, pc}
 801c0a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c0a6:	b112      	cbz	r2, 801c0ae <_raise_r+0x1e>
 801c0a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c0ac:	b94b      	cbnz	r3, 801c0c2 <_raise_r+0x32>
 801c0ae:	4628      	mov	r0, r5
 801c0b0:	f000 f852 	bl	801c158 <_getpid_r>
 801c0b4:	4622      	mov	r2, r4
 801c0b6:	4601      	mov	r1, r0
 801c0b8:	4628      	mov	r0, r5
 801c0ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c0be:	f000 b839 	b.w	801c134 <_kill_r>
 801c0c2:	2b01      	cmp	r3, #1
 801c0c4:	d00a      	beq.n	801c0dc <_raise_r+0x4c>
 801c0c6:	1c59      	adds	r1, r3, #1
 801c0c8:	d103      	bne.n	801c0d2 <_raise_r+0x42>
 801c0ca:	2316      	movs	r3, #22
 801c0cc:	6003      	str	r3, [r0, #0]
 801c0ce:	2001      	movs	r0, #1
 801c0d0:	e7e7      	b.n	801c0a2 <_raise_r+0x12>
 801c0d2:	2100      	movs	r1, #0
 801c0d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c0d8:	4620      	mov	r0, r4
 801c0da:	4798      	blx	r3
 801c0dc:	2000      	movs	r0, #0
 801c0de:	e7e0      	b.n	801c0a2 <_raise_r+0x12>

0801c0e0 <raise>:
 801c0e0:	4b02      	ldr	r3, [pc, #8]	@ (801c0ec <raise+0xc>)
 801c0e2:	4601      	mov	r1, r0
 801c0e4:	6818      	ldr	r0, [r3, #0]
 801c0e6:	f7ff bfd3 	b.w	801c090 <_raise_r>
 801c0ea:	bf00      	nop
 801c0ec:	24000040 	.word	0x24000040

0801c0f0 <_fstat_r>:
 801c0f0:	b538      	push	{r3, r4, r5, lr}
 801c0f2:	4d07      	ldr	r5, [pc, #28]	@ (801c110 <_fstat_r+0x20>)
 801c0f4:	2300      	movs	r3, #0
 801c0f6:	4604      	mov	r4, r0
 801c0f8:	4608      	mov	r0, r1
 801c0fa:	4611      	mov	r1, r2
 801c0fc:	602b      	str	r3, [r5, #0]
 801c0fe:	f7e7 fa49 	bl	8003594 <_fstat>
 801c102:	1c43      	adds	r3, r0, #1
 801c104:	d102      	bne.n	801c10c <_fstat_r+0x1c>
 801c106:	682b      	ldr	r3, [r5, #0]
 801c108:	b103      	cbz	r3, 801c10c <_fstat_r+0x1c>
 801c10a:	6023      	str	r3, [r4, #0]
 801c10c:	bd38      	pop	{r3, r4, r5, pc}
 801c10e:	bf00      	nop
 801c110:	24008430 	.word	0x24008430

0801c114 <_isatty_r>:
 801c114:	b538      	push	{r3, r4, r5, lr}
 801c116:	4d06      	ldr	r5, [pc, #24]	@ (801c130 <_isatty_r+0x1c>)
 801c118:	2300      	movs	r3, #0
 801c11a:	4604      	mov	r4, r0
 801c11c:	4608      	mov	r0, r1
 801c11e:	602b      	str	r3, [r5, #0]
 801c120:	f7e7 fa48 	bl	80035b4 <_isatty>
 801c124:	1c43      	adds	r3, r0, #1
 801c126:	d102      	bne.n	801c12e <_isatty_r+0x1a>
 801c128:	682b      	ldr	r3, [r5, #0]
 801c12a:	b103      	cbz	r3, 801c12e <_isatty_r+0x1a>
 801c12c:	6023      	str	r3, [r4, #0]
 801c12e:	bd38      	pop	{r3, r4, r5, pc}
 801c130:	24008430 	.word	0x24008430

0801c134 <_kill_r>:
 801c134:	b538      	push	{r3, r4, r5, lr}
 801c136:	4d07      	ldr	r5, [pc, #28]	@ (801c154 <_kill_r+0x20>)
 801c138:	2300      	movs	r3, #0
 801c13a:	4604      	mov	r4, r0
 801c13c:	4608      	mov	r0, r1
 801c13e:	4611      	mov	r1, r2
 801c140:	602b      	str	r3, [r5, #0]
 801c142:	f7e7 f9c5 	bl	80034d0 <_kill>
 801c146:	1c43      	adds	r3, r0, #1
 801c148:	d102      	bne.n	801c150 <_kill_r+0x1c>
 801c14a:	682b      	ldr	r3, [r5, #0]
 801c14c:	b103      	cbz	r3, 801c150 <_kill_r+0x1c>
 801c14e:	6023      	str	r3, [r4, #0]
 801c150:	bd38      	pop	{r3, r4, r5, pc}
 801c152:	bf00      	nop
 801c154:	24008430 	.word	0x24008430

0801c158 <_getpid_r>:
 801c158:	f7e7 b9b2 	b.w	80034c0 <_getpid>

0801c15c <checkint>:
 801c15c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c160:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801c164:	429a      	cmp	r2, r3
 801c166:	b570      	push	{r4, r5, r6, lr}
 801c168:	dd2a      	ble.n	801c1c0 <checkint+0x64>
 801c16a:	f240 4333 	movw	r3, #1075	@ 0x433
 801c16e:	429a      	cmp	r2, r3
 801c170:	dc24      	bgt.n	801c1bc <checkint+0x60>
 801c172:	1a9b      	subs	r3, r3, r2
 801c174:	f1a3 0620 	sub.w	r6, r3, #32
 801c178:	f04f 32ff 	mov.w	r2, #4294967295
 801c17c:	fa02 f403 	lsl.w	r4, r2, r3
 801c180:	fa02 f606 	lsl.w	r6, r2, r6
 801c184:	f1c3 0520 	rsb	r5, r3, #32
 801c188:	fa22 f505 	lsr.w	r5, r2, r5
 801c18c:	4334      	orrs	r4, r6
 801c18e:	432c      	orrs	r4, r5
 801c190:	409a      	lsls	r2, r3
 801c192:	ea20 0202 	bic.w	r2, r0, r2
 801c196:	ea21 0404 	bic.w	r4, r1, r4
 801c19a:	4322      	orrs	r2, r4
 801c19c:	f1a3 0420 	sub.w	r4, r3, #32
 801c1a0:	f1c3 0220 	rsb	r2, r3, #32
 801c1a4:	d10c      	bne.n	801c1c0 <checkint+0x64>
 801c1a6:	40d8      	lsrs	r0, r3
 801c1a8:	fa01 f302 	lsl.w	r3, r1, r2
 801c1ac:	4318      	orrs	r0, r3
 801c1ae:	40e1      	lsrs	r1, r4
 801c1b0:	4308      	orrs	r0, r1
 801c1b2:	f000 0001 	and.w	r0, r0, #1
 801c1b6:	f1d0 0002 	rsbs	r0, r0, #2
 801c1ba:	bd70      	pop	{r4, r5, r6, pc}
 801c1bc:	2002      	movs	r0, #2
 801c1be:	e7fc      	b.n	801c1ba <checkint+0x5e>
 801c1c0:	2000      	movs	r0, #0
 801c1c2:	e7fa      	b.n	801c1ba <checkint+0x5e>
 801c1c4:	0000      	movs	r0, r0
	...

0801c1c8 <pow>:
 801c1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1cc:	ee10 4a90 	vmov	r4, s1
 801c1d0:	ed2d 8b0a 	vpush	{d8-d12}
 801c1d4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801c1d8:	ee11 aa90 	vmov	sl, s3
 801c1dc:	f108 32ff 	add.w	r2, r8, #4294967295
 801c1e0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801c1e4:	429a      	cmp	r2, r3
 801c1e6:	ee10 5a10 	vmov	r5, s0
 801c1ea:	ee11 0a10 	vmov	r0, s2
 801c1ee:	b087      	sub	sp, #28
 801c1f0:	46c4      	mov	ip, r8
 801c1f2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801c1f6:	d806      	bhi.n	801c206 <pow+0x3e>
 801c1f8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801c1fc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801c200:	2b7f      	cmp	r3, #127	@ 0x7f
 801c202:	f240 8157 	bls.w	801c4b4 <pow+0x2ec>
 801c206:	1802      	adds	r2, r0, r0
 801c208:	eb4a 010a 	adc.w	r1, sl, sl
 801c20c:	f06f 0b01 	mvn.w	fp, #1
 801c210:	1e57      	subs	r7, r2, #1
 801c212:	f141 33ff 	adc.w	r3, r1, #4294967295
 801c216:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801c21a:	45bb      	cmp	fp, r7
 801c21c:	eb7e 0303 	sbcs.w	r3, lr, r3
 801c220:	d242      	bcs.n	801c2a8 <pow+0xe0>
 801c222:	ea52 0301 	orrs.w	r3, r2, r1
 801c226:	f04f 0300 	mov.w	r3, #0
 801c22a:	d10c      	bne.n	801c246 <pow+0x7e>
 801c22c:	196d      	adds	r5, r5, r5
 801c22e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801c232:	4164      	adcs	r4, r4
 801c234:	42ab      	cmp	r3, r5
 801c236:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801c23a:	41a3      	sbcs	r3, r4
 801c23c:	f0c0 808f 	bcc.w	801c35e <pow+0x196>
 801c240:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801c244:	e02b      	b.n	801c29e <pow+0xd6>
 801c246:	4ed4      	ldr	r6, [pc, #848]	@ (801c598 <pow+0x3d0>)
 801c248:	42b4      	cmp	r4, r6
 801c24a:	bf08      	it	eq
 801c24c:	429d      	cmpeq	r5, r3
 801c24e:	d109      	bne.n	801c264 <pow+0x9c>
 801c250:	1800      	adds	r0, r0, r0
 801c252:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801c256:	eb4a 0a0a 	adc.w	sl, sl, sl
 801c25a:	4283      	cmp	r3, r0
 801c25c:	4bcf      	ldr	r3, [pc, #828]	@ (801c59c <pow+0x3d4>)
 801c25e:	eb73 030a 	sbcs.w	r3, r3, sl
 801c262:	e7eb      	b.n	801c23c <pow+0x74>
 801c264:	196d      	adds	r5, r5, r5
 801c266:	48ce      	ldr	r0, [pc, #824]	@ (801c5a0 <pow+0x3d8>)
 801c268:	4164      	adcs	r4, r4
 801c26a:	42ab      	cmp	r3, r5
 801c26c:	eb70 0604 	sbcs.w	r6, r0, r4
 801c270:	d375      	bcc.n	801c35e <pow+0x196>
 801c272:	4281      	cmp	r1, r0
 801c274:	bf08      	it	eq
 801c276:	429a      	cmpeq	r2, r3
 801c278:	d171      	bne.n	801c35e <pow+0x196>
 801c27a:	4aca      	ldr	r2, [pc, #808]	@ (801c5a4 <pow+0x3dc>)
 801c27c:	4294      	cmp	r4, r2
 801c27e:	bf08      	it	eq
 801c280:	429d      	cmpeq	r5, r3
 801c282:	d0dd      	beq.n	801c240 <pow+0x78>
 801c284:	4294      	cmp	r4, r2
 801c286:	ea6f 0a0a 	mvn.w	sl, sl
 801c28a:	bf34      	ite	cc
 801c28c:	2400      	movcc	r4, #0
 801c28e:	2401      	movcs	r4, #1
 801c290:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801c294:	4554      	cmp	r4, sl
 801c296:	f040 81dc 	bne.w	801c652 <pow+0x48a>
 801c29a:	ee21 0b01 	vmul.f64	d0, d1, d1
 801c29e:	b007      	add	sp, #28
 801c2a0:	ecbd 8b0a 	vpop	{d8-d12}
 801c2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2a8:	196f      	adds	r7, r5, r5
 801c2aa:	eb44 0904 	adc.w	r9, r4, r4
 801c2ae:	1e7a      	subs	r2, r7, #1
 801c2b0:	f169 0300 	sbc.w	r3, r9, #0
 801c2b4:	4593      	cmp	fp, r2
 801c2b6:	eb7e 0303 	sbcs.w	r3, lr, r3
 801c2ba:	d225      	bcs.n	801c308 <pow+0x140>
 801c2bc:	ee20 0b00 	vmul.f64	d0, d0, d0
 801c2c0:	2c00      	cmp	r4, #0
 801c2c2:	da13      	bge.n	801c2ec <pow+0x124>
 801c2c4:	4651      	mov	r1, sl
 801c2c6:	f7ff ff49 	bl	801c15c <checkint>
 801c2ca:	2801      	cmp	r0, #1
 801c2cc:	d10e      	bne.n	801c2ec <pow+0x124>
 801c2ce:	eeb1 0b40 	vneg.f64	d0, d0
 801c2d2:	ea57 0909 	orrs.w	r9, r7, r9
 801c2d6:	d10b      	bne.n	801c2f0 <pow+0x128>
 801c2d8:	f1ba 0f00 	cmp.w	sl, #0
 801c2dc:	dadf      	bge.n	801c29e <pow+0xd6>
 801c2de:	b007      	add	sp, #28
 801c2e0:	ecbd 8b0a 	vpop	{d8-d12}
 801c2e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2e8:	f000 b9ee 	b.w	801c6c8 <__math_divzero>
 801c2ec:	2000      	movs	r0, #0
 801c2ee:	e7f0      	b.n	801c2d2 <pow+0x10a>
 801c2f0:	f1ba 0f00 	cmp.w	sl, #0
 801c2f4:	dad3      	bge.n	801c29e <pow+0xd6>
 801c2f6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801c2fa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801c2fe:	ed8d 7b00 	vstr	d7, [sp]
 801c302:	ed9d 0b00 	vldr	d0, [sp]
 801c306:	e7ca      	b.n	801c29e <pow+0xd6>
 801c308:	2c00      	cmp	r4, #0
 801c30a:	da2b      	bge.n	801c364 <pow+0x19c>
 801c30c:	4651      	mov	r1, sl
 801c30e:	f7ff ff25 	bl	801c15c <checkint>
 801c312:	b930      	cbnz	r0, 801c322 <pow+0x15a>
 801c314:	b007      	add	sp, #28
 801c316:	ecbd 8b0a 	vpop	{d8-d12}
 801c31a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c31e:	f000 b9eb 	b.w	801c6f8 <__math_invalid>
 801c322:	1e41      	subs	r1, r0, #1
 801c324:	4248      	negs	r0, r1
 801c326:	4148      	adcs	r0, r1
 801c328:	0480      	lsls	r0, r0, #18
 801c32a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801c32e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801c332:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801c336:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801c33a:	2b7f      	cmp	r3, #127	@ 0x7f
 801c33c:	d92d      	bls.n	801c39a <pow+0x1d2>
 801c33e:	4b96      	ldr	r3, [pc, #600]	@ (801c598 <pow+0x3d0>)
 801c340:	2000      	movs	r0, #0
 801c342:	429c      	cmp	r4, r3
 801c344:	bf08      	it	eq
 801c346:	4285      	cmpeq	r5, r0
 801c348:	f43f af7a 	beq.w	801c240 <pow+0x78>
 801c34c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801c350:	428a      	cmp	r2, r1
 801c352:	d80c      	bhi.n	801c36e <pow+0x1a6>
 801c354:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801c358:	42a8      	cmp	r0, r5
 801c35a:	41a3      	sbcs	r3, r4
 801c35c:	d204      	bcs.n	801c368 <pow+0x1a0>
 801c35e:	ee31 0b00 	vadd.f64	d0, d1, d0
 801c362:	e79c      	b.n	801c29e <pow+0xd6>
 801c364:	2000      	movs	r0, #0
 801c366:	e7e4      	b.n	801c332 <pow+0x16a>
 801c368:	ee30 0b41 	vsub.f64	d0, d0, d1
 801c36c:	e797      	b.n	801c29e <pow+0xd6>
 801c36e:	2d01      	cmp	r5, #1
 801c370:	eb74 0303 	sbcs.w	r3, r4, r3
 801c374:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801c378:	bf34      	ite	cc
 801c37a:	2301      	movcc	r3, #1
 801c37c:	2300      	movcs	r3, #0
 801c37e:	4296      	cmp	r6, r2
 801c380:	bf8c      	ite	hi
 801c382:	2600      	movhi	r6, #0
 801c384:	2601      	movls	r6, #1
 801c386:	42b3      	cmp	r3, r6
 801c388:	f000 809c 	beq.w	801c4c4 <pow+0x2fc>
 801c38c:	b007      	add	sp, #28
 801c38e:	ecbd 8b0a 	vpop	{d8-d12}
 801c392:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c396:	f000 b98f 	b.w	801c6b8 <__math_oflow>
 801c39a:	f1bc 0f00 	cmp.w	ip, #0
 801c39e:	d10a      	bne.n	801c3b6 <pow+0x1ee>
 801c3a0:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801c588 <pow+0x3c0>
 801c3a4:	ee20 7b07 	vmul.f64	d7, d0, d7
 801c3a8:	ec53 2b17 	vmov	r2, r3, d7
 801c3ac:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801c3b0:	4615      	mov	r5, r2
 801c3b2:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801c3b6:	4a7c      	ldr	r2, [pc, #496]	@ (801c5a8 <pow+0x3e0>)
 801c3b8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801c3bc:	4422      	add	r2, r4
 801c3be:	1513      	asrs	r3, r2, #20
 801c3c0:	ee03 3a10 	vmov	s6, r3
 801c3c4:	4b79      	ldr	r3, [pc, #484]	@ (801c5ac <pow+0x3e4>)
 801c3c6:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801c3ca:	f36f 0213 	bfc	r2, #0, #20
 801c3ce:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801c3d2:	1aa7      	subs	r7, r4, r2
 801c3d4:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801c3d8:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801c3dc:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801c3e0:	1e2e      	subs	r6, r5, #0
 801c3e2:	ec47 6b14 	vmov	d4, r6, r7
 801c3e6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801c3ea:	eea4 6b05 	vfma.f64	d6, d4, d5
 801c3ee:	ed93 5b00 	vldr	d5, [r3]
 801c3f2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801c3f6:	eea3 2b05 	vfma.f64	d2, d3, d5
 801c3fa:	ed93 5b02 	vldr	d5, [r3, #8]
 801c3fe:	ee36 4b02 	vadd.f64	d4, d6, d2
 801c402:	ee32 2b44 	vsub.f64	d2, d2, d4
 801c406:	eea3 7b05 	vfma.f64	d7, d3, d5
 801c40a:	ed93 5b04 	vldr	d5, [r3, #16]
 801c40e:	ee32 2b06 	vadd.f64	d2, d2, d6
 801c412:	ee37 7b02 	vadd.f64	d7, d7, d2
 801c416:	ee26 5b05 	vmul.f64	d5, d6, d5
 801c41a:	ee26 0b05 	vmul.f64	d0, d6, d5
 801c41e:	ee34 8b00 	vadd.f64	d8, d4, d0
 801c422:	eeb0 9b40 	vmov.f64	d9, d0
 801c426:	ee34 4b48 	vsub.f64	d4, d4, d8
 801c42a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801c42e:	ee34 ab00 	vadd.f64	d10, d4, d0
 801c432:	ed93 5b06 	vldr	d5, [r3, #24]
 801c436:	ee26 bb00 	vmul.f64	d11, d6, d0
 801c43a:	ee37 7b09 	vadd.f64	d7, d7, d9
 801c43e:	ed93 4b08 	vldr	d4, [r3, #32]
 801c442:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801c446:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801c44a:	eea6 5b04 	vfma.f64	d5, d6, d4
 801c44e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801c452:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801c456:	eea6 4b03 	vfma.f64	d4, d6, d3
 801c45a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801c45e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801c462:	eea0 4b03 	vfma.f64	d4, d0, d3
 801c466:	eea0 5b04 	vfma.f64	d5, d0, d4
 801c46a:	eeab 7b05 	vfma.f64	d7, d11, d5
 801c46e:	ee38 4b07 	vadd.f64	d4, d8, d7
 801c472:	ee21 6b04 	vmul.f64	d6, d1, d4
 801c476:	ee16 3a90 	vmov	r3, s13
 801c47a:	eeb0 5b46 	vmov.f64	d5, d6
 801c47e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801c482:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801c486:	18b2      	adds	r2, r6, r2
 801c488:	2a3e      	cmp	r2, #62	@ 0x3e
 801c48a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801c48e:	ee38 8b44 	vsub.f64	d8, d8, d4
 801c492:	ee38 8b07 	vadd.f64	d8, d8, d7
 801c496:	eea1 5b08 	vfma.f64	d5, d1, d8
 801c49a:	d91b      	bls.n	801c4d4 <pow+0x30c>
 801c49c:	2a00      	cmp	r2, #0
 801c49e:	da0b      	bge.n	801c4b8 <pow+0x2f0>
 801c4a0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801c4a4:	ee36 0b00 	vadd.f64	d0, d6, d0
 801c4a8:	2800      	cmp	r0, #0
 801c4aa:	f43f aef8 	beq.w	801c29e <pow+0xd6>
 801c4ae:	eeb1 0b40 	vneg.f64	d0, d0
 801c4b2:	e6f4      	b.n	801c29e <pow+0xd6>
 801c4b4:	2000      	movs	r0, #0
 801c4b6:	e77e      	b.n	801c3b6 <pow+0x1ee>
 801c4b8:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801c4bc:	d909      	bls.n	801c4d2 <pow+0x30a>
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	f6bf af64 	bge.w	801c38c <pow+0x1c4>
 801c4c4:	b007      	add	sp, #28
 801c4c6:	ecbd 8b0a 	vpop	{d8-d12}
 801c4ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4ce:	f000 b8eb 	b.w	801c6a8 <__math_uflow>
 801c4d2:	2600      	movs	r6, #0
 801c4d4:	4936      	ldr	r1, [pc, #216]	@ (801c5b0 <pow+0x3e8>)
 801c4d6:	ed91 4b02 	vldr	d4, [r1, #8]
 801c4da:	ed91 3b00 	vldr	d3, [r1]
 801c4de:	eeb0 7b44 	vmov.f64	d7, d4
 801c4e2:	eea6 7b03 	vfma.f64	d7, d6, d3
 801c4e6:	ee17 5a10 	vmov	r5, s14
 801c4ea:	ee37 7b44 	vsub.f64	d7, d7, d4
 801c4ee:	ed91 4b04 	vldr	d4, [r1, #16]
 801c4f2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801c4f6:	eea7 6b04 	vfma.f64	d6, d7, d4
 801c4fa:	ed91 4b06 	vldr	d4, [r1, #24]
 801c4fe:	18dc      	adds	r4, r3, r3
 801c500:	f104 030f 	add.w	r3, r4, #15
 801c504:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801c508:	eea7 6b04 	vfma.f64	d6, d7, d4
 801c50c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801c510:	ee35 5b06 	vadd.f64	d5, d5, d6
 801c514:	ee25 6b05 	vmul.f64	d6, d5, d5
 801c518:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801c51c:	ed91 4b08 	vldr	d4, [r1, #32]
 801c520:	ee35 7b07 	vadd.f64	d7, d5, d7
 801c524:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801c528:	eea5 4b03 	vfma.f64	d4, d5, d3
 801c52c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801c530:	eea6 7b04 	vfma.f64	d7, d6, d4
 801c534:	ee26 6b06 	vmul.f64	d6, d6, d6
 801c538:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801c53c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801c540:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801c544:	eea5 4b03 	vfma.f64	d4, d5, d3
 801c548:	1940      	adds	r0, r0, r5
 801c54a:	2700      	movs	r7, #0
 801c54c:	eb17 020c 	adds.w	r2, r7, ip
 801c550:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801c554:	eea6 7b04 	vfma.f64	d7, d6, d4
 801c558:	2e00      	cmp	r6, #0
 801c55a:	d175      	bne.n	801c648 <pow+0x480>
 801c55c:	42bd      	cmp	r5, r7
 801c55e:	db29      	blt.n	801c5b4 <pow+0x3ec>
 801c560:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801c564:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801c568:	4610      	mov	r0, r2
 801c56a:	ec41 0b10 	vmov	d0, r0, r1
 801c56e:	eea7 0b00 	vfma.f64	d0, d7, d0
 801c572:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801c590 <pow+0x3c8>
 801c576:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c57a:	b007      	add	sp, #28
 801c57c:	ecbd 8b0a 	vpop	{d8-d12}
 801c580:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c584:	f000 b8d0 	b.w	801c728 <__math_check_oflow>
 801c588:	00000000 	.word	0x00000000
 801c58c:	43300000 	.word	0x43300000
 801c590:	00000000 	.word	0x00000000
 801c594:	7f000000 	.word	0x7f000000
 801c598:	3ff00000 	.word	0x3ff00000
 801c59c:	fff00000 	.word	0xfff00000
 801c5a0:	ffe00000 	.word	0xffe00000
 801c5a4:	7fe00000 	.word	0x7fe00000
 801c5a8:	c0196aab 	.word	0xc0196aab
 801c5ac:	0801f508 	.word	0x0801f508
 801c5b0:	08020550 	.word	0x08020550
 801c5b4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801c5b8:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801c5bc:	4610      	mov	r0, r2
 801c5be:	ec41 0b15 	vmov	d5, r0, r1
 801c5c2:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801c5c6:	ee27 6b05 	vmul.f64	d6, d7, d5
 801c5ca:	ee35 7b06 	vadd.f64	d7, d5, d6
 801c5ce:	eeb0 4bc7 	vabs.f64	d4, d7
 801c5d2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801c5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5da:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801c658 <pow+0x490>
 801c5de:	d52a      	bpl.n	801c636 <pow+0x46e>
 801c5e0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801c5e4:	ee35 5b47 	vsub.f64	d5, d5, d7
 801c5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5ec:	ee35 5b06 	vadd.f64	d5, d5, d6
 801c5f0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801c5f4:	bf58      	it	pl
 801c5f6:	eeb0 4b43 	vmovpl.f64	d4, d3
 801c5fa:	ee37 3b04 	vadd.f64	d3, d7, d4
 801c5fe:	ee34 6b43 	vsub.f64	d6, d4, d3
 801c602:	ee36 6b07 	vadd.f64	d6, d6, d7
 801c606:	ee36 6b05 	vadd.f64	d6, d6, d5
 801c60a:	ee36 6b03 	vadd.f64	d6, d6, d3
 801c60e:	ee36 7b44 	vsub.f64	d7, d6, d4
 801c612:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c61a:	d104      	bne.n	801c626 <pow+0x45e>
 801c61c:	4632      	mov	r2, r6
 801c61e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801c622:	ec43 2b17 	vmov	d7, r2, r3
 801c626:	ed8d 0b02 	vstr	d0, [sp, #8]
 801c62a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c62e:	ee26 6b00 	vmul.f64	d6, d6, d0
 801c632:	ed8d 6b04 	vstr	d6, [sp, #16]
 801c636:	ee27 0b00 	vmul.f64	d0, d7, d0
 801c63a:	b007      	add	sp, #28
 801c63c:	ecbd 8b0a 	vpop	{d8-d12}
 801c640:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c644:	f000 b867 	b.w	801c716 <__math_check_uflow>
 801c648:	ec43 2b10 	vmov	d0, r2, r3
 801c64c:	eea7 0b00 	vfma.f64	d0, d7, d0
 801c650:	e625      	b.n	801c29e <pow+0xd6>
 801c652:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801c660 <pow+0x498>
 801c656:	e622      	b.n	801c29e <pow+0xd6>
 801c658:	00000000 	.word	0x00000000
 801c65c:	00100000 	.word	0x00100000
	...

0801c668 <with_errno>:
 801c668:	b510      	push	{r4, lr}
 801c66a:	ed2d 8b02 	vpush	{d8}
 801c66e:	eeb0 8b40 	vmov.f64	d8, d0
 801c672:	4604      	mov	r4, r0
 801c674:	f7ff f8a4 	bl	801b7c0 <__errno>
 801c678:	eeb0 0b48 	vmov.f64	d0, d8
 801c67c:	ecbd 8b02 	vpop	{d8}
 801c680:	6004      	str	r4, [r0, #0]
 801c682:	bd10      	pop	{r4, pc}

0801c684 <xflow>:
 801c684:	b082      	sub	sp, #8
 801c686:	b158      	cbz	r0, 801c6a0 <xflow+0x1c>
 801c688:	eeb1 7b40 	vneg.f64	d7, d0
 801c68c:	ed8d 7b00 	vstr	d7, [sp]
 801c690:	ed9d 7b00 	vldr	d7, [sp]
 801c694:	2022      	movs	r0, #34	@ 0x22
 801c696:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c69a:	b002      	add	sp, #8
 801c69c:	f7ff bfe4 	b.w	801c668 <with_errno>
 801c6a0:	eeb0 7b40 	vmov.f64	d7, d0
 801c6a4:	e7f2      	b.n	801c68c <xflow+0x8>
	...

0801c6a8 <__math_uflow>:
 801c6a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801c6b0 <__math_uflow+0x8>
 801c6ac:	f7ff bfea 	b.w	801c684 <xflow>
 801c6b0:	00000000 	.word	0x00000000
 801c6b4:	10000000 	.word	0x10000000

0801c6b8 <__math_oflow>:
 801c6b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801c6c0 <__math_oflow+0x8>
 801c6bc:	f7ff bfe2 	b.w	801c684 <xflow>
 801c6c0:	00000000 	.word	0x00000000
 801c6c4:	70000000 	.word	0x70000000

0801c6c8 <__math_divzero>:
 801c6c8:	b082      	sub	sp, #8
 801c6ca:	2800      	cmp	r0, #0
 801c6cc:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801c6d0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801c6d4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801c6d8:	ed8d 7b00 	vstr	d7, [sp]
 801c6dc:	ed9d 0b00 	vldr	d0, [sp]
 801c6e0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801c6f0 <__math_divzero+0x28>
 801c6e4:	2022      	movs	r0, #34	@ 0x22
 801c6e6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801c6ea:	b002      	add	sp, #8
 801c6ec:	f7ff bfbc 	b.w	801c668 <with_errno>
	...

0801c6f8 <__math_invalid>:
 801c6f8:	eeb0 7b40 	vmov.f64	d7, d0
 801c6fc:	eeb4 7b47 	vcmp.f64	d7, d7
 801c700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c704:	ee30 6b40 	vsub.f64	d6, d0, d0
 801c708:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801c70c:	d602      	bvs.n	801c714 <__math_invalid+0x1c>
 801c70e:	2021      	movs	r0, #33	@ 0x21
 801c710:	f7ff bfaa 	b.w	801c668 <with_errno>
 801c714:	4770      	bx	lr

0801c716 <__math_check_uflow>:
 801c716:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801c71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c71e:	d102      	bne.n	801c726 <__math_check_uflow+0x10>
 801c720:	2022      	movs	r0, #34	@ 0x22
 801c722:	f7ff bfa1 	b.w	801c668 <with_errno>
 801c726:	4770      	bx	lr

0801c728 <__math_check_oflow>:
 801c728:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801c748 <__math_check_oflow+0x20>
 801c72c:	eeb0 7bc0 	vabs.f64	d7, d0
 801c730:	eeb4 7b46 	vcmp.f64	d7, d6
 801c734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c738:	dd02      	ble.n	801c740 <__math_check_oflow+0x18>
 801c73a:	2022      	movs	r0, #34	@ 0x22
 801c73c:	f7ff bf94 	b.w	801c668 <with_errno>
 801c740:	4770      	bx	lr
 801c742:	bf00      	nop
 801c744:	f3af 8000 	nop.w
 801c748:	ffffffff 	.word	0xffffffff
 801c74c:	7fefffff 	.word	0x7fefffff

0801c750 <_init>:
 801c750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c752:	bf00      	nop
 801c754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c756:	bc08      	pop	{r3}
 801c758:	469e      	mov	lr, r3
 801c75a:	4770      	bx	lr

0801c75c <_fini>:
 801c75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c75e:	bf00      	nop
 801c760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c762:	bc08      	pop	{r3}
 801c764:	469e      	mov	lr, r3
 801c766:	4770      	bx	lr
