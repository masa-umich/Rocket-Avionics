
H7-Nucleo-Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000172c0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004610  08017590  08017590  00018590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801bba0  0801bba0  0001cba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801bba8  0801bba8  0001cba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801bbac  0801bbac  0001cbac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  24000000  0801bbb0  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00011574  24000090  0801bc40  0001d090  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24011604  0801bc40  0001d604  2**0
                  ALLOC
  9 .lwip_sec     00000160  30000000  30000000  0001e000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001d090  2**0
                  CONTENTS, READONLY
 11 .debug_info   00035493  00000000  00000000  0001d0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00007cc4  00000000  00000000  00052551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002668  00000000  00000000  0005a218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001e2d  00000000  00000000  0005c880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00043a90  00000000  00000000  0005e6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00040d12  00000000  00000000  000a213d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00170ca4  00000000  00000000  000e2e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00253af3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000aae0  00000000  00000000  00253b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000057  00000000  00000000  0025e618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000090 	.word	0x24000090
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08017578 	.word	0x08017578

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000094 	.word	0x24000094
 800030c:	08017578 	.word	0x08017578

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <MS5611_chipSelect>:
 */

#include "MS5611.h"

//Chip select
void MS5611_chipSelect(MS5611* BAR) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BAR->CS_GPIO_Port, BAR->CS_GPIO_Pin, RESET); //Low is selected
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6898      	ldr	r0, [r3, #8]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	899b      	ldrh	r3, [r3, #12]
 80003c0:	2200      	movs	r2, #0
 80003c2:	4619      	mov	r1, r3
 80003c4:	f003 fa44 	bl	8003850 <HAL_GPIO_WritePin>
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <MS5611_chipRelease>:

//Chip release
void MS5611_chipRelease(MS5611* BAR) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BAR->CS_GPIO_Port, BAR->CS_GPIO_Pin, SET); //High is released
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	6898      	ldr	r0, [r3, #8]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	899b      	ldrh	r3, [r3, #12]
 80003e0:	2201      	movs	r2, #1
 80003e2:	4619      	mov	r1, r3
 80003e4:	f003 fa34 	bl	8003850 <HAL_GPIO_WritePin>
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <MS5611_transmit>:

//Transmit register from barometer
HAL_StatusTypeDef MS5611_transmit(MS5611* BAR, uint8_t* tx_buffer, uint8_t num_bytes) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	60f8      	str	r0, [r7, #12]
 80003f8:	60b9      	str	r1, [r7, #8]
 80003fa:	4613      	mov	r3, r2
 80003fc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

	taskENTER_CRITICAL();
 80003fe:	f00b f8e3 	bl	800b5c8 <vPortEnterCritical>

	MS5611_chipSelect(BAR);
 8000402:	68f8      	ldr	r0, [r7, #12]
 8000404:	f7ff ffd4 	bl	80003b0 <MS5611_chipSelect>
	status = HAL_SPI_Transmit(BAR->hspi, tx_buffer, 1, BAR->SPI_TIMEOUT);
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	6818      	ldr	r0, [r3, #0]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	889b      	ldrh	r3, [r3, #4]
 8000410:	2201      	movs	r2, #1
 8000412:	68b9      	ldr	r1, [r7, #8]
 8000414:	f005 fe44 	bl	80060a0 <HAL_SPI_Transmit>
 8000418:	4603      	mov	r3, r0
 800041a:	75fb      	strb	r3, [r7, #23]
	MS5611_chipRelease(BAR);
 800041c:	68f8      	ldr	r0, [r7, #12]
 800041e:	f7ff ffd7 	bl	80003d0 <MS5611_chipRelease>

	taskEXIT_CRITICAL();
 8000422:	f00b f903 	bl	800b62c <vPortExitCritical>

	return status;
 8000426:	7dfb      	ldrb	r3, [r7, #23]
}
 8000428:	4618      	mov	r0, r3
 800042a:	3718      	adds	r7, #24
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <MS5611_read>:
	return status;
}

// Abstraction for reading a register
// Note: num_bytes is the combined size of tx_buffer and rx_buffer
int MS5611_read(MS5611* BAR, uint8_t* tx_buffer, uint8_t* rx_buffer, uint8_t num_bytes) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af02      	add	r7, sp, #8
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
 800043c:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;

	taskENTER_CRITICAL();
 800043e:	f00b f8c3 	bl	800b5c8 <vPortEnterCritical>

	MS5611_chipSelect(BAR);
 8000442:	68f8      	ldr	r0, [r7, #12]
 8000444:	f7ff ffb4 	bl	80003b0 <MS5611_chipSelect>
	status = HAL_SPI_TransmitReceive(BAR->hspi, tx_buffer, rx_buffer, num_bytes, BAR->SPI_TIMEOUT);
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	78fb      	ldrb	r3, [r7, #3]
 800044e:	b29a      	uxth	r2, r3
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	889b      	ldrh	r3, [r3, #4]
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	4613      	mov	r3, r2
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	68b9      	ldr	r1, [r7, #8]
 800045c:	f006 f80e 	bl	800647c <HAL_SPI_TransmitReceive>
 8000460:	4603      	mov	r3, r0
 8000462:	75fb      	strb	r3, [r7, #23]
	MS5611_chipRelease(BAR);
 8000464:	68f8      	ldr	r0, [r7, #12]
 8000466:	f7ff ffb3 	bl	80003d0 <MS5611_chipRelease>

	taskEXIT_CRITICAL();
 800046a:	f00b f8df 	bl	800b62c <vPortExitCritical>

	if (status != HAL_OK) {
 800046e:	7dfb      	ldrb	r3, [r7, #23]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MS5611_read+0x48>
		return 1;
 8000474:	2301      	movs	r3, #1
 8000476:	e000      	b.n	800047a <MS5611_read+0x4a>
	} else {
		return 0;
 8000478:	2300      	movs	r3, #0
	}
}
 800047a:	4618      	mov	r0, r3
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <MS5611_write>:

// Abstraction for sending a single register
int MS5611_write(MS5611* BAR, uint8_t reg) {
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	460b      	mov	r3, r1
 800048c:	70fb      	strb	r3, [r7, #3]
	if (MS5611_transmit(BAR, &reg, 1) != HAL_OK) {
 800048e:	1cfb      	adds	r3, r7, #3
 8000490:	2201      	movs	r2, #1
 8000492:	4619      	mov	r1, r3
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f7ff ffab 	bl	80003f0 <MS5611_transmit>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MS5611_write+0x22>
		return 1;
 80004a0:	2301      	movs	r3, #1
 80004a2:	e000      	b.n	80004a6 <MS5611_write+0x24>
	}
	return 0;
 80004a4:	2300      	movs	r3, #0
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <MS5611_Reset>:

// Software and memory reset
int MS5611_Reset(MS5611* BAR) {
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b082      	sub	sp, #8
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
	if (!MS5611_write(BAR, MS5611_RESET)) {
 80004b6:	211e      	movs	r1, #30
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f7ff ffe2 	bl	8000482 <MS5611_write>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d104      	bne.n	80004ce <MS5611_Reset+0x20>
		vTaskDelay(5); // Time for reset
 80004c4:	2005      	movs	r0, #5
 80004c6:	f009 fd57 	bl	8009f78 <vTaskDelay>
    	return 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	e000      	b.n	80004d0 <MS5611_Reset+0x22>
	}
	return 1;
 80004ce:	2301      	movs	r3, #1
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <MS5611_readPROM>:

// Read the programmable read only memory
// Note: prom_buffer must be of size 6
int MS5611_readPROM(MS5611* BAR, MS5611_PROM_t* prom_buffer) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
	uint8_t tx_buffer[3] = {0};
 80004e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <MS5611_readPROM+0x78>)
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	823b      	strh	r3, [r7, #16]
 80004e8:	2300      	movs	r3, #0
 80004ea:	74bb      	strb	r3, [r7, #18]
	uint8_t rx_buffer[3] = {0};
 80004ec:	4b18      	ldr	r3, [pc, #96]	@ (8000550 <MS5611_readPROM+0x78>)
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	81bb      	strh	r3, [r7, #12]
 80004f2:	2300      	movs	r3, #0
 80004f4:	73bb      	strb	r3, [r7, #14]
	for (int i = 0; i < 6; i++) {
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
 80004fa:	e021      	b.n	8000540 <MS5611_readPROM+0x68>
		tx_buffer[0] = MS5611_PROM + 2 + (i*2); // PROM is 2 bytes long and starts at 0xA2
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	3351      	adds	r3, #81	@ 0x51
 8000500:	b2db      	uxtb	r3, r3
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	743b      	strb	r3, [r7, #16]
		if (MS5611_read(BAR, tx_buffer, rx_buffer, 3) == 1) {
 8000508:	f107 020c 	add.w	r2, r7, #12
 800050c:	f107 0110 	add.w	r1, r7, #16
 8000510:	2303      	movs	r3, #3
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f7ff ff8c 	bl	8000430 <MS5611_read>
 8000518:	4603      	mov	r3, r0
 800051a:	2b01      	cmp	r3, #1
 800051c:	d101      	bne.n	8000522 <MS5611_readPROM+0x4a>
			return 1;
 800051e:	2301      	movs	r3, #1
 8000520:	e012      	b.n	8000548 <MS5611_readPROM+0x70>
		} else {
			// for some reason the first byte we read back is always 0xFE
			// so we try to read three and use the last 2 instead
			prom_buffer->bytes[i] = (rx_buffer[1] << 8) | rx_buffer[2];
 8000522:	7b7b      	ldrb	r3, [r7, #13]
 8000524:	021b      	lsls	r3, r3, #8
 8000526:	b21a      	sxth	r2, r3
 8000528:	7bbb      	ldrb	r3, [r7, #14]
 800052a:	b21b      	sxth	r3, r3
 800052c:	4313      	orrs	r3, r2
 800052e:	b21b      	sxth	r3, r3
 8000530:	b299      	uxth	r1, r3
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 6; i++) {
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	3301      	adds	r3, #1
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	2b05      	cmp	r3, #5
 8000544:	ddda      	ble.n	80004fc <MS5611_readPROM+0x24>
		}
	}
	return 0;
 8000546:	2300      	movs	r3, #0
}
 8000548:	4618      	mov	r0, r3
 800054a:	3718      	adds	r7, #24
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	08017590 	.word	0x08017590

08000554 <MS5611_readADC>:

int MS5611_readADC(MS5611 *BAR, uint32_t *result) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
	uint8_t tx_buffer[3] = { 0 };
 800055e:	4b14      	ldr	r3, [pc, #80]	@ (80005b0 <MS5611_readADC+0x5c>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	81bb      	strh	r3, [r7, #12]
 8000564:	2300      	movs	r3, #0
 8000566:	73bb      	strb	r3, [r7, #14]
	uint8_t rx_buffer[3] = { 0 };
 8000568:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <MS5611_readADC+0x5c>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	813b      	strh	r3, [r7, #8]
 800056e:	2300      	movs	r3, #0
 8000570:	72bb      	strb	r3, [r7, #10]
	tx_buffer[0] = MS5611_ADC;
 8000572:	2300      	movs	r3, #0
 8000574:	733b      	strb	r3, [r7, #12]
	if (MS5611_read(BAR, tx_buffer, rx_buffer, 4) == 1) {
 8000576:	f107 0208 	add.w	r2, r7, #8
 800057a:	f107 010c 	add.w	r1, r7, #12
 800057e:	2304      	movs	r3, #4
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f7ff ff55 	bl	8000430 <MS5611_read>
 8000586:	4603      	mov	r3, r0
 8000588:	2b01      	cmp	r3, #1
 800058a:	d101      	bne.n	8000590 <MS5611_readADC+0x3c>
		return 1;
 800058c:	2301      	movs	r3, #1
 800058e:	e00a      	b.n	80005a6 <MS5611_readADC+0x52>
	} else {
		// for some reason the first byte we read back is always 0xFE
		// so we try to read three and use the last 2 instead
		*result = (rx_buffer[1] << 16) | (rx_buffer[2] << 8) | rx_buffer[3];
 8000590:	7a7b      	ldrb	r3, [r7, #9]
 8000592:	041a      	lsls	r2, r3, #16
 8000594:	7abb      	ldrb	r3, [r7, #10]
 8000596:	021b      	lsls	r3, r3, #8
 8000598:	4313      	orrs	r3, r2
 800059a:	7afa      	ldrb	r2, [r7, #11]
 800059c:	4313      	orrs	r3, r2
 800059e:	461a      	mov	r2, r3
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	601a      	str	r2, [r3, #0]
	}
	return 0;
 80005a4:	2300      	movs	r3, #0
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	08017590 	.word	0x08017590

080005b4 <MS5611_presConvert>:

// Pressure convert
// OSR is the "Over Sampling Rate" which determines the resolution of the pressure and temperature
int MS5611_presConvert(MS5611* BAR, uint32_t* pres_raw, OSR osr) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	4613      	mov	r3, r2
 80005c0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0x00;
 80005c2:	2300      	movs	r3, #0
 80005c4:	75fb      	strb	r3, [r7, #23]
	switch (osr) {
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b04      	cmp	r3, #4
 80005ca:	d81c      	bhi.n	8000606 <MS5611_presConvert+0x52>
 80005cc:	a201      	add	r2, pc, #4	@ (adr r2, 80005d4 <MS5611_presConvert+0x20>)
 80005ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d2:	bf00      	nop
 80005d4:	080005e9 	.word	0x080005e9
 80005d8:	080005ef 	.word	0x080005ef
 80005dc:	080005f5 	.word	0x080005f5
 80005e0:	080005fb 	.word	0x080005fb
 80005e4:	08000601 	.word	0x08000601
		case OSR_256:
			cmd = MS5611_D1_OSR_256;
 80005e8:	2340      	movs	r3, #64	@ 0x40
 80005ea:	75fb      	strb	r3, [r7, #23]
			break;
 80005ec:	e00d      	b.n	800060a <MS5611_presConvert+0x56>
		case OSR_512:
			cmd = MS5611_D1_OSR_512;
 80005ee:	2342      	movs	r3, #66	@ 0x42
 80005f0:	75fb      	strb	r3, [r7, #23]
			break;
 80005f2:	e00a      	b.n	800060a <MS5611_presConvert+0x56>
		case OSR_1024:
			cmd = MS5611_D1_OSR_1024;
 80005f4:	2344      	movs	r3, #68	@ 0x44
 80005f6:	75fb      	strb	r3, [r7, #23]
			break;
 80005f8:	e007      	b.n	800060a <MS5611_presConvert+0x56>
		case OSR_2048:
			cmd = MS5611_D1_OSR_2048;
 80005fa:	2346      	movs	r3, #70	@ 0x46
 80005fc:	75fb      	strb	r3, [r7, #23]
			break;
 80005fe:	e004      	b.n	800060a <MS5611_presConvert+0x56>
		case OSR_4096:
			cmd = MS5611_D1_OSR_4096;
 8000600:	2348      	movs	r3, #72	@ 0x48
 8000602:	75fb      	strb	r3, [r7, #23]
			break;
 8000604:	e001      	b.n	800060a <MS5611_presConvert+0x56>
		default:
			return 1; // invalid OSR
 8000606:	2301      	movs	r3, #1
 8000608:	e016      	b.n	8000638 <MS5611_presConvert+0x84>
	}
	if (cmd == 0x00) { return 1; } // invalid cmd
 800060a:	7dfb      	ldrb	r3, [r7, #23]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d101      	bne.n	8000614 <MS5611_presConvert+0x60>
 8000610:	2301      	movs	r3, #1
 8000612:	e011      	b.n	8000638 <MS5611_presConvert+0x84>
	MS5611_write(BAR, cmd); // write the command
 8000614:	7dfb      	ldrb	r3, [r7, #23]
 8000616:	4619      	mov	r1, r3
 8000618:	68f8      	ldr	r0, [r7, #12]
 800061a:	f7ff ff32 	bl	8000482 <MS5611_write>
	vTaskDelay(10); // 10ms conversion time
 800061e:	200a      	movs	r0, #10
 8000620:	f009 fcaa 	bl	8009f78 <vTaskDelay>
	if (MS5611_readADC(BAR, pres_raw)) {
 8000624:	68b9      	ldr	r1, [r7, #8]
 8000626:	68f8      	ldr	r0, [r7, #12]
 8000628:	f7ff ff94 	bl	8000554 <MS5611_readADC>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MS5611_presConvert+0x82>
		return 1;
 8000632:	2301      	movs	r3, #1
 8000634:	e000      	b.n	8000638 <MS5611_presConvert+0x84>
	}
	return 0;
 8000636:	2300      	movs	r3, #0
}
 8000638:	4618      	mov	r0, r3
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <MS5611_tempConvert>:

//Altitude convert
int MS5611_tempConvert(MS5611* BAR, uint32_t* temp_raw, OSR osr) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	4613      	mov	r3, r2
 800064c:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0x00;
 800064e:	2300      	movs	r3, #0
 8000650:	75fb      	strb	r3, [r7, #23]
	switch (osr) {
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b04      	cmp	r3, #4
 8000656:	d81c      	bhi.n	8000692 <MS5611_tempConvert+0x52>
 8000658:	a201      	add	r2, pc, #4	@ (adr r2, 8000660 <MS5611_tempConvert+0x20>)
 800065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065e:	bf00      	nop
 8000660:	08000675 	.word	0x08000675
 8000664:	0800067b 	.word	0x0800067b
 8000668:	08000681 	.word	0x08000681
 800066c:	08000687 	.word	0x08000687
 8000670:	0800068d 	.word	0x0800068d
		case OSR_256:
			cmd = MS5611_D2_OSR_256;
 8000674:	2350      	movs	r3, #80	@ 0x50
 8000676:	75fb      	strb	r3, [r7, #23]
			break;
 8000678:	e00d      	b.n	8000696 <MS5611_tempConvert+0x56>
		case OSR_512:
			cmd = MS5611_D2_OSR_512;
 800067a:	2352      	movs	r3, #82	@ 0x52
 800067c:	75fb      	strb	r3, [r7, #23]
			break;
 800067e:	e00a      	b.n	8000696 <MS5611_tempConvert+0x56>
		case OSR_1024:
			cmd = MS5611_D2_OSR_1024;
 8000680:	2354      	movs	r3, #84	@ 0x54
 8000682:	75fb      	strb	r3, [r7, #23]
			break;
 8000684:	e007      	b.n	8000696 <MS5611_tempConvert+0x56>
		case OSR_2048:
			cmd = MS5611_D2_OSR_2048;
 8000686:	2356      	movs	r3, #86	@ 0x56
 8000688:	75fb      	strb	r3, [r7, #23]
			break;
 800068a:	e004      	b.n	8000696 <MS5611_tempConvert+0x56>
		case OSR_4096:
			cmd = MS5611_D2_OSR_4096;
 800068c:	2358      	movs	r3, #88	@ 0x58
 800068e:	75fb      	strb	r3, [r7, #23]
			break;
 8000690:	e001      	b.n	8000696 <MS5611_tempConvert+0x56>
		default:
			return 1; // invalid OSR
 8000692:	2301      	movs	r3, #1
 8000694:	e016      	b.n	80006c4 <MS5611_tempConvert+0x84>
	}
	if (cmd == 0x00) { return 1; } // invalid cmd
 8000696:	7dfb      	ldrb	r3, [r7, #23]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d101      	bne.n	80006a0 <MS5611_tempConvert+0x60>
 800069c:	2301      	movs	r3, #1
 800069e:	e011      	b.n	80006c4 <MS5611_tempConvert+0x84>
	MS5611_write(BAR, cmd); // write the command
 80006a0:	7dfb      	ldrb	r3, [r7, #23]
 80006a2:	4619      	mov	r1, r3
 80006a4:	68f8      	ldr	r0, [r7, #12]
 80006a6:	f7ff feec 	bl	8000482 <MS5611_write>
	vTaskDelay(10); // 10ms conversion time
 80006aa:	200a      	movs	r0, #10
 80006ac:	f009 fc64 	bl	8009f78 <vTaskDelay>
	if (MS5611_readADC(BAR, temp_raw)) {
 80006b0:	68b9      	ldr	r1, [r7, #8]
 80006b2:	68f8      	ldr	r0, [r7, #12]
 80006b4:	f7ff ff4e 	bl	8000554 <MS5611_readADC>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MS5611_tempConvert+0x82>
		return 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	e000      	b.n	80006c4 <MS5611_tempConvert+0x84>
	}
	return 0;
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	0000      	movs	r0, r0
	...

080006d0 <MS5611_compensateTemp>:

int MS5611_compensateTemp(float* pres, uint32_t pres_raw, uint32_t temp_raw, MS5611_PROM_t* prom) {
 80006d0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80006d4:	b0ab      	sub	sp, #172	@ 0xac
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80006da:	67b9      	str	r1, [r7, #120]	@ 0x78
 80006dc:	677a      	str	r2, [r7, #116]	@ 0x74
 80006de:	673b      	str	r3, [r7, #112]	@ 0x70
	volatile int32_t dT, P;
	volatile int64_t OFF, SENS;
	volatile int64_t partialA, partialB;

	dT = temp_raw - ((prom->constants.C5) * (0x1<<8));                      //D2-C5*2^8
 80006e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80006e2:	891b      	ldrh	r3, [r3, #8]
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	461a      	mov	r2, r3
 80006e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80006ea:	1a9b      	subs	r3, r3, r2
 80006ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	//TEMP = 2000 + ((int64_t)dT * ((int64_t)prom->constants.C6))/(0x1<<23);//2000 + dT*C6/2^23
	partialA = ((int64_t)prom->constants.C4) * (int64_t)dT;
 80006f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80006f2:	88db      	ldrh	r3, [r3, #6]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	2200      	movs	r2, #0
 80006f8:	469a      	mov	sl, r3
 80006fa:	4693      	mov	fp, r2
 80006fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000700:	17da      	asrs	r2, r3, #31
 8000702:	4698      	mov	r8, r3
 8000704:	4691      	mov	r9, r2
 8000706:	fb08 f20b 	mul.w	r2, r8, fp
 800070a:	fb0a f309 	mul.w	r3, sl, r9
 800070e:	4413      	add	r3, r2
 8000710:	fbaa 4508 	umull	r4, r5, sl, r8
 8000714:	442b      	add	r3, r5
 8000716:	461d      	mov	r5, r3
 8000718:	e9c7 4522 	strd	r4, r5, [r7, #136]	@ 0x88
	OFF = ((int64_t)prom->constants.C2) * (0x1<<16) + (partialA)/(0x1<<7);  //C2*2^16 + C4*dT/2^7
 800071c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800071e:	885b      	ldrh	r3, [r3, #2]
 8000720:	b29b      	uxth	r3, r3
 8000722:	2200      	movs	r2, #0
 8000724:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000726:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8000728:	f04f 0400 	mov.w	r4, #0
 800072c:	f04f 0500 	mov.w	r5, #0
 8000730:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8000734:	4613      	mov	r3, r2
 8000736:	041d      	lsls	r5, r3, #16
 8000738:	460b      	mov	r3, r1
 800073a:	ea45 4513 	orr.w	r5, r5, r3, lsr #16
 800073e:	460b      	mov	r3, r1
 8000740:	041c      	lsls	r4, r3, #16
 8000742:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8000746:	2b00      	cmp	r3, #0
 8000748:	da07      	bge.n	800075a <MS5611_compensateTemp+0x8a>
 800074a:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 800074e:	61b9      	str	r1, [r7, #24]
 8000750:	f143 0300 	adc.w	r3, r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
 8000756:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800075a:	f04f 0000 	mov.w	r0, #0
 800075e:	f04f 0100 	mov.w	r1, #0
 8000762:	09d0      	lsrs	r0, r2, #7
 8000764:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8000768:	11d9      	asrs	r1, r3, #7
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	18a1      	adds	r1, r4, r2
 8000770:	6539      	str	r1, [r7, #80]	@ 0x50
 8000772:	eb45 0303 	adc.w	r3, r5, r3
 8000776:	657b      	str	r3, [r7, #84]	@ 0x54
 8000778:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800077c:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
	partialB = ((int64_t)prom->constants.C3) * (int64_t)dT;
 8000780:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000782:	889b      	ldrh	r3, [r3, #4]
 8000784:	b29b      	uxth	r3, r3
 8000786:	2200      	movs	r2, #0
 8000788:	64bb      	str	r3, [r7, #72]	@ 0x48
 800078a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800078c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000790:	17da      	asrs	r2, r3, #31
 8000792:	643b      	str	r3, [r7, #64]	@ 0x40
 8000794:	647a      	str	r2, [r7, #68]	@ 0x44
 8000796:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800079a:	462b      	mov	r3, r5
 800079c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80007a0:	4642      	mov	r2, r8
 80007a2:	fb02 f203 	mul.w	r2, r2, r3
 80007a6:	464b      	mov	r3, r9
 80007a8:	4621      	mov	r1, r4
 80007aa:	fb01 f303 	mul.w	r3, r1, r3
 80007ae:	4413      	add	r3, r2
 80007b0:	4622      	mov	r2, r4
 80007b2:	4641      	mov	r1, r8
 80007b4:	fba2 1201 	umull	r1, r2, r2, r1
 80007b8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80007ba:	460a      	mov	r2, r1
 80007bc:	66ba      	str	r2, [r7, #104]	@ 0x68
 80007be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80007c0:	4413      	add	r3, r2
 80007c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80007c4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80007c8:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
	SENS = ((int64_t)prom->constants.C1) * (0x1<<15) + (partialB)/(0x1<<8); //C1*2^15 + C3*dT/2^8
 80007cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	2200      	movs	r2, #0
 80007d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80007d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80007d8:	f04f 0400 	mov.w	r4, #0
 80007dc:	f04f 0500 	mov.w	r5, #0
 80007e0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80007e4:	4613      	mov	r3, r2
 80007e6:	03dd      	lsls	r5, r3, #15
 80007e8:	460b      	mov	r3, r1
 80007ea:	ea45 4553 	orr.w	r5, r5, r3, lsr #17
 80007ee:	460b      	mov	r3, r1
 80007f0:	03dc      	lsls	r4, r3, #15
 80007f2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	da07      	bge.n	800080a <MS5611_compensateTemp+0x13a>
 80007fa:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 80007fe:	6139      	str	r1, [r7, #16]
 8000800:	f143 0300 	adc.w	r3, r3, #0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800080a:	f04f 0000 	mov.w	r0, #0
 800080e:	f04f 0100 	mov.w	r1, #0
 8000812:	0a10      	lsrs	r0, r2, #8
 8000814:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000818:	1219      	asrs	r1, r3, #8
 800081a:	4602      	mov	r2, r0
 800081c:	460b      	mov	r3, r1
 800081e:	18a1      	adds	r1, r4, r2
 8000820:	6339      	str	r1, [r7, #48]	@ 0x30
 8000822:	eb45 0303 	adc.w	r3, r5, r3
 8000826:	637b      	str	r3, [r7, #52]	@ 0x34
 8000828:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800082c:	e9c7 3424 	strd	r3, r4, [r7, #144]	@ 0x90

	P = (((((int64_t)pres_raw)*SENS)/(0x1<<21)-OFF))/(0x1<<15);             //(D1*SENS/2^21-OFF)/2^15
 8000830:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000832:	2200      	movs	r2, #0
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000836:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000838:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800083c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000840:	4629      	mov	r1, r5
 8000842:	fb02 f001 	mul.w	r0, r2, r1
 8000846:	4621      	mov	r1, r4
 8000848:	fb01 f103 	mul.w	r1, r1, r3
 800084c:	4401      	add	r1, r0
 800084e:	4620      	mov	r0, r4
 8000850:	fba0 2302 	umull	r2, r3, r0, r2
 8000854:	667b      	str	r3, [r7, #100]	@ 0x64
 8000856:	4613      	mov	r3, r2
 8000858:	663b      	str	r3, [r7, #96]	@ 0x60
 800085a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800085c:	18cb      	adds	r3, r1, r3
 800085e:	667b      	str	r3, [r7, #100]	@ 0x64
 8000860:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000864:	2b00      	cmp	r3, #0
 8000866:	da07      	bge.n	8000878 <MS5611_compensateTemp+0x1a8>
 8000868:	4925      	ldr	r1, [pc, #148]	@ (8000900 <MS5611_compensateTemp+0x230>)
 800086a:	1851      	adds	r1, r2, r1
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	f143 0300 	adc.w	r3, r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000878:	f04f 0000 	mov.w	r0, #0
 800087c:	f04f 0100 	mov.w	r1, #0
 8000880:	0d50      	lsrs	r0, r2, #21
 8000882:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8000886:	1559      	asrs	r1, r3, #21
 8000888:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800088c:	1a84      	subs	r4, r0, r2
 800088e:	623c      	str	r4, [r7, #32]
 8000890:	eb61 0303 	sbc.w	r3, r1, r3
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
 8000896:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800089a:	2b00      	cmp	r3, #0
 800089c:	da08      	bge.n	80008b0 <MS5611_compensateTemp+0x1e0>
 800089e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80008a2:	1851      	adds	r1, r2, r1
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	f143 0300 	adc.w	r3, r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80008b0:	f04f 0000 	mov.w	r0, #0
 80008b4:	f04f 0100 	mov.w	r1, #0
 80008b8:	0bd0      	lsrs	r0, r2, #15
 80008ba:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80008be:	13d9      	asrs	r1, r3, #15
 80008c0:	4602      	mov	r2, r0
 80008c2:	460b      	mov	r3, r1
 80008c4:	4613      	mov	r3, r2
 80008c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	*pres = (float)(P * 0.01); // millibar
 80008ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80008ce:	ee07 3a90 	vmov	s15, r3
 80008d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008d6:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 80008f8 <MS5611_compensateTemp+0x228>
 80008da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80008e4:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	37ac      	adds	r7, #172	@ 0xac
 80008ee:	46bd      	mov	sp, r7
 80008f0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	47ae147b 	.word	0x47ae147b
 80008fc:	3f847ae1 	.word	0x3f847ae1
 8000900:	001fffff 	.word	0x001fffff

08000904 <MS5611_getPres>:

//Get pressure from barometer
int MS5611_getPres(MS5611* BAR, float* pres, MS5611_PROM_t* prom, OSR osr) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
 8000910:	70fb      	strb	r3, [r7, #3]
	uint32_t pres_raw = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
	uint32_t temp_raw = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
	if (MS5611_presConvert(BAR, &pres_raw, osr) == 1) { return 1; }
 800091a:	78fa      	ldrb	r2, [r7, #3]
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f7ff fe46 	bl	80005b4 <MS5611_presConvert>
 8000928:	4603      	mov	r3, r0
 800092a:	2b01      	cmp	r3, #1
 800092c:	d101      	bne.n	8000932 <MS5611_getPres+0x2e>
 800092e:	2301      	movs	r3, #1
 8000930:	e017      	b.n	8000962 <MS5611_getPres+0x5e>
	if (MS5611_tempConvert(BAR, &temp_raw, osr) == 1) { return 1; }
 8000932:	78fa      	ldrb	r2, [r7, #3]
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	4619      	mov	r1, r3
 800093a:	68f8      	ldr	r0, [r7, #12]
 800093c:	f7ff fe80 	bl	8000640 <MS5611_tempConvert>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d101      	bne.n	800094a <MS5611_getPres+0x46>
 8000946:	2301      	movs	r3, #1
 8000948:	e00b      	b.n	8000962 <MS5611_getPres+0x5e>
	if (MS5611_compensateTemp(pres, pres_raw, temp_raw, prom) == 1) { return 1; }
 800094a:	6979      	ldr	r1, [r7, #20]
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	68b8      	ldr	r0, [r7, #8]
 8000952:	f7ff febd 	bl	80006d0 <MS5611_compensateTemp>
 8000956:	4603      	mov	r3, r0
 8000958:	2b01      	cmp	r3, #1
 800095a:	d101      	bne.n	8000960 <MS5611_getPres+0x5c>
 800095c:	2301      	movs	r3, #1
 800095e:	e000      	b.n	8000962 <MS5611_getPres+0x5e>
	return 0;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	0000      	movs	r0, r0
 800096c:	0000      	movs	r0, r0
	...

08000970 <MS5611_getAlt>:

//Get rough altitude based on pressure
int MS5611_getAlt(MS5611* BAR, float* alt, MS5611_PROM_t* prom, OSR osr) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	70fb      	strb	r3, [r7, #3]
	float pres = 0.0;
 800097e:	f04f 0300 	mov.w	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
	uint32_t pres_raw = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]
	uint32_t temp_raw = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
	if (MS5611_presConvert(BAR, &pres_raw, osr) == 1) { return 1; }
 800098c:	78fa      	ldrb	r2, [r7, #3]
 800098e:	f107 0318 	add.w	r3, r7, #24
 8000992:	4619      	mov	r1, r3
 8000994:	68f8      	ldr	r0, [r7, #12]
 8000996:	f7ff fe0d 	bl	80005b4 <MS5611_presConvert>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d101      	bne.n	80009a4 <MS5611_getAlt+0x34>
 80009a0:	2301      	movs	r3, #1
 80009a2:	e035      	b.n	8000a10 <MS5611_getAlt+0xa0>
	if (MS5611_tempConvert(BAR, &temp_raw, osr) == 1) { return 1; }
 80009a4:	78fa      	ldrb	r2, [r7, #3]
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f7ff fe47 	bl	8000640 <MS5611_tempConvert>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d101      	bne.n	80009bc <MS5611_getAlt+0x4c>
 80009b8:	2301      	movs	r3, #1
 80009ba:	e029      	b.n	8000a10 <MS5611_getAlt+0xa0>
	if (MS5611_compensateTemp(&pres, pres_raw, temp_raw, prom) == 1) { return 1; }
 80009bc:	69b9      	ldr	r1, [r7, #24]
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	f107 001c 	add.w	r0, r7, #28
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f7ff fe83 	bl	80006d0 <MS5611_compensateTemp>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d101      	bne.n	80009d4 <MS5611_getAlt+0x64>
 80009d0:	2301      	movs	r3, #1
 80009d2:	e01d      	b.n	8000a10 <MS5611_getAlt+0xa0>
	*alt =  (1 - pow((pres/1013.25), 0.190284)) * 145366.45; // feet conversion
 80009d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80009d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009dc:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 8000a18 <MS5611_getAlt+0xa8>
 80009e0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80009e4:	ed9f 1b0e 	vldr	d1, [pc, #56]	@ 8000a20 <MS5611_getAlt+0xb0>
 80009e8:	eeb0 0b46 	vmov.f64	d0, d6
 80009ec:	f016 fb00 	bl	8016ff0 <pow>
 80009f0:	eeb0 7b40 	vmov.f64	d7, d0
 80009f4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80009f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80009fc:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8000a28 <MS5611_getAlt+0xb8>
 8000a00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3720      	adds	r7, #32
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	00000000 	.word	0x00000000
 8000a1c:	408faa00 	.word	0x408faa00
 8000a20:	e279dd3c 	.word	0xe279dd3c
 8000a24:	3fc85b39 	.word	0x3fc85b39
 8000a28:	9999999a 	.word	0x9999999a
 8000a2c:	4101beb3 	.word	0x4101beb3

08000a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a36:	f000 fa39 	bl	8000eac <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a3a:	4b3c      	ldr	r3, [pc, #240]	@ (8000b2c <main+0xfc>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d11b      	bne.n	8000a7e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a46:	f3bf 8f4f 	dsb	sy
}
 8000a4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a4c:	f3bf 8f6f 	isb	sy
}
 8000a50:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a52:	4b36      	ldr	r3, [pc, #216]	@ (8000b2c <main+0xfc>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a5a:	f3bf 8f4f 	dsb	sy
}
 8000a5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a60:	f3bf 8f6f 	isb	sy
}
 8000a64:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a66:	4b31      	ldr	r3, [pc, #196]	@ (8000b2c <main+0xfc>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4a30      	ldr	r2, [pc, #192]	@ (8000b2c <main+0xfc>)
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a70:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a72:	f3bf 8f4f 	dsb	sy
}
 8000a76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a78:	f3bf 8f6f 	isb	sy
}
 8000a7c:	e000      	b.n	8000a80 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a7e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a80:	4b2a      	ldr	r3, [pc, #168]	@ (8000b2c <main+0xfc>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d138      	bne.n	8000afe <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a8c:	4b27      	ldr	r3, [pc, #156]	@ (8000b2c <main+0xfc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a94:	f3bf 8f4f 	dsb	sy
}
 8000a98:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a9a:	4b24      	ldr	r3, [pc, #144]	@ (8000b2c <main+0xfc>)
 8000a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000aa0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	0b5b      	lsrs	r3, r3, #13
 8000aa6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000aaa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	08db      	lsrs	r3, r3, #3
 8000ab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ab4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	015a      	lsls	r2, r3, #5
 8000aba:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000abe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ac4:	4919      	ldr	r1, [pc, #100]	@ (8000b2c <main+0xfc>)
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	1e5a      	subs	r2, r3, #1
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1ef      	bne.n	8000ab6 <main+0x86>
    } while(sets-- != 0U);
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	1e5a      	subs	r2, r3, #1
 8000ada:	60ba      	str	r2, [r7, #8]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1e5      	bne.n	8000aac <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ae0:	f3bf 8f4f 	dsb	sy
}
 8000ae4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <main+0xfc>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	4a10      	ldr	r2, [pc, #64]	@ (8000b2c <main+0xfc>)
 8000aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000af0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000af2:	f3bf 8f4f 	dsb	sy
}
 8000af6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000af8:	f3bf 8f6f 	isb	sy
}
 8000afc:	e000      	b.n	8000b00 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000afe:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b00:	f000 fdce 	bl	80016a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b04:	f000 f81a 	bl	8000b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b08:	f000 f8dc 	bl	8000cc4 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000b0c:	f000 f884 	bl	8000c18 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b10:	f007 fa3c 	bl	8007f8c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b14:	4a06      	ldr	r2, [pc, #24]	@ (8000b30 <main+0x100>)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4806      	ldr	r0, [pc, #24]	@ (8000b34 <main+0x104>)
 8000b1a:	f007 fa96 	bl	800804a <osThreadNew>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4a05      	ldr	r2, [pc, #20]	@ (8000b38 <main+0x108>)
 8000b22:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b24:	f007 fa56 	bl	8007fd4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <main+0xf8>
 8000b2c:	e000ed00 	.word	0xe000ed00
 8000b30:	0801a0a4 	.word	0x0801a0a4
 8000b34:	08000e01 	.word	0x08000e01
 8000b38:	24000134 	.word	0x24000134

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b09c      	sub	sp, #112	@ 0x70
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b46:	224c      	movs	r2, #76	@ 0x4c
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f015 fb1b 	bl	8016186 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2220      	movs	r2, #32
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f015 fb15 	bl	8016186 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	f002 feab 	bl	80038b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b2b      	ldr	r3, [pc, #172]	@ (8000c14 <SystemClock_Config+0xd8>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8000c14 <SystemClock_Config+0xd8>)
 8000b6c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b28      	ldr	r3, [pc, #160]	@ (8000c14 <SystemClock_Config+0xd8>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b7e:	bf00      	nop
 8000b80:	4b24      	ldr	r3, [pc, #144]	@ (8000c14 <SystemClock_Config+0xd8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b8c:	d1f8      	bne.n	8000b80 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000b96:	2340      	movs	r3, #64	@ 0x40
 8000b98:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 feb0 	bl	800392c <HAL_RCC_OscConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bd2:	f000 f9cb 	bl	8000f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd6:	233f      	movs	r3, #63	@ 0x3f
 8000bd8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000be6:	2340      	movs	r3, #64	@ 0x40
 8000be8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bea:	2340      	movs	r3, #64	@ 0x40
 8000bec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bf2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bf4:	2340      	movs	r3, #64	@ 0x40
 8000bf6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f003 fa6f 	bl	80040e0 <HAL_RCC_ClockConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000c08:	f000 f9b0 	bl	8000f6c <Error_Handler>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3770      	adds	r7, #112	@ 0x70
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	58024800 	.word	0x58024800

08000c18 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c1c:	4b27      	ldr	r3, [pc, #156]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c1e:	4a28      	ldr	r2, [pc, #160]	@ (8000cc0 <MX_SPI3_Init+0xa8>)
 8000c20:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c22:	4b26      	ldr	r3, [pc, #152]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c24:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c28:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2a:	4b24      	ldr	r3, [pc, #144]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c30:	4b22      	ldr	r3, [pc, #136]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c32:	2207      	movs	r2, #7
 8000c34:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c36:	4b21      	ldr	r3, [pc, #132]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c42:	4b1e      	ldr	r3, [pc, #120]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c44:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c48:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c4c:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000c50:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c58:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000c64:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c6a:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c70:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c72:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c78:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c84:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	@ (8000cbc <MX_SPI3_Init+0xa4>)
 8000caa:	f005 f8d5 	bl	8005e58 <HAL_SPI_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8000cb4:	f000 f95a 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	240000ac 	.word	0x240000ac
 8000cc0:	40003c00 	.word	0x40003c00

08000cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	@ 0x28
 8000cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
 8000cd8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cda:	4b45      	ldr	r3, [pc, #276]	@ (8000df0 <MX_GPIO_Init+0x12c>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce0:	4a43      	ldr	r2, [pc, #268]	@ (8000df0 <MX_GPIO_Init+0x12c>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cea:	4b41      	ldr	r3, [pc, #260]	@ (8000df0 <MX_GPIO_Init+0x12c>)
 8000cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf0:	f003 0304 	and.w	r3, r3, #4
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	4b3d      	ldr	r3, [pc, #244]	@ (8000df0 <MX_GPIO_Init+0x12c>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfe:	4a3c      	ldr	r2, [pc, #240]	@ (8000df0 <MX_GPIO_Init+0x12c>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d08:	4b39      	ldr	r3, [pc, #228]	@ (8000df0 <MX_GPIO_Init+0x12c>)
 8000d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b36      	ldr	r3, [pc, #216]	@ (8000df0 <MX_GPIO_Init+0x12c>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1c:	4a34      	ldr	r2, [pc, #208]	@ (8000df0 <MX_GPIO_Init+0x12c>)
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d26:	4b32      	ldr	r3, [pc, #200]	@ (8000df0 <MX_GPIO_Init+0x12c>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d34:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <MX_GPIO_Init+0x12c>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8000df0 <MX_GPIO_Init+0x12c>)
 8000d3c:	f043 0308 	orr.w	r3, r3, #8
 8000d40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d44:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <MX_GPIO_Init+0x12c>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <MX_GPIO_Init+0x12c>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d58:	4a25      	ldr	r2, [pc, #148]	@ (8000df0 <MX_GPIO_Init+0x12c>)
 8000d5a:	f043 0310 	orr.w	r3, r3, #16
 8000d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d62:	4b23      	ldr	r3, [pc, #140]	@ (8000df0 <MX_GPIO_Init+0x12c>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d76:	481f      	ldr	r0, [pc, #124]	@ (8000df4 <MX_GPIO_Init+0x130>)
 8000d78:	f002 fd6a 	bl	8003850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2104      	movs	r1, #4
 8000d80:	481d      	ldr	r0, [pc, #116]	@ (8000df8 <MX_GPIO_Init+0x134>)
 8000d82:	f002 fd65 	bl	8003850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2102      	movs	r1, #2
 8000d8a:	481c      	ldr	r0, [pc, #112]	@ (8000dfc <MX_GPIO_Init+0x138>)
 8000d8c:	f002 fd60 	bl	8003850 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin;
 8000d90:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4812      	ldr	r0, [pc, #72]	@ (8000df4 <MX_GPIO_Init+0x130>)
 8000daa:	f002 fba9 	bl	8003500 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000dae:	2304      	movs	r3, #4
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <MX_GPIO_Init+0x134>)
 8000dc6:	f002 fb9b 	bl	8003500 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	4806      	ldr	r0, [pc, #24]	@ (8000dfc <MX_GPIO_Init+0x138>)
 8000de2:	f002 fb8d 	bl	8003500 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	@ 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	58024400 	.word	0x58024400
 8000df4:	58020400 	.word	0x58020400
 8000df8:	58020c00 	.word	0x58020c00
 8000dfc:	58021000 	.word	0x58021000

08000e00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08e      	sub	sp, #56	@ 0x38
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000e08:	f006 fa3c 	bl	8007284 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  MS5611 bar;
    bar.hspi = &hspi3;
 8000e0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ea0 <StartDefaultTask+0xa0>)
 8000e0e:	623b      	str	r3, [r7, #32]
    bar.SPI_TIMEOUT = 100;
 8000e10:	2364      	movs	r3, #100	@ 0x64
 8000e12:	84bb      	strh	r3, [r7, #36]	@ 0x24
    bar.CS_GPIO_Port = GPIOD; // PD2
 8000e14:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <StartDefaultTask+0xa4>)
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
    bar.CS_GPIO_Pin = GPIO_PIN_2;
 8000e18:	2304      	movs	r3, #4
 8000e1a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    bar.pres_offset = 0;
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	@ 0x30
    bar.alt_offset = 0;
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	637b      	str	r3, [r7, #52]	@ 0x34

    MS5611_PROM_t prom;
    prom.constants.C1 = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	82bb      	strh	r3, [r7, #20]
    prom.constants.C2 = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	82fb      	strh	r3, [r7, #22]
    prom.constants.C3 = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	833b      	strh	r3, [r7, #24]
    prom.constants.C4 = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	837b      	strh	r3, [r7, #26]
    prom.constants.C5 = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	83bb      	strh	r3, [r7, #28]
    prom.constants.C6 = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	83fb      	strh	r3, [r7, #30]

    MS5611_Reset(&bar);
 8000e40:	f107 0320 	add.w	r3, r7, #32
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fb32 	bl	80004ae <MS5611_Reset>
    MS5611_readPROM(&bar, &prom);
 8000e4a:	f107 0214 	add.w	r2, r7, #20
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fb3f 	bl	80004d8 <MS5611_readPROM>

    float pres = 0.0;
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	613b      	str	r3, [r7, #16]
    float alt = 0.0;
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]

    /* Infinite loop */
    for(;;) {
      MS5611_getPres(&bar, &pres, &prom, OSR_256);
 8000e66:	f107 0214 	add.w	r2, r7, #20
 8000e6a:	f107 0110 	add.w	r1, r7, #16
 8000e6e:	f107 0020 	add.w	r0, r7, #32
 8000e72:	2300      	movs	r3, #0
 8000e74:	f7ff fd46 	bl	8000904 <MS5611_getPres>
      MS5611_getAlt(&bar, &alt, &prom, OSR_256); // Altitude from sea-level in feet
 8000e78:	f107 0214 	add.w	r2, r7, #20
 8000e7c:	f107 010c 	add.w	r1, r7, #12
 8000e80:	f107 0020 	add.w	r0, r7, #32
 8000e84:	2300      	movs	r3, #0
 8000e86:	f7ff fd73 	bl	8000970 <MS5611_getAlt>
      HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	4806      	ldr	r0, [pc, #24]	@ (8000ea8 <StartDefaultTask+0xa8>)
 8000e8e:	f002 fcf8 	bl	8003882 <HAL_GPIO_TogglePin>
      osDelay(2000);
 8000e92:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e96:	f007 f96b 	bl	8008170 <osDelay>
      MS5611_getPres(&bar, &pres, &prom, OSR_256);
 8000e9a:	bf00      	nop
 8000e9c:	e7e3      	b.n	8000e66 <StartDefaultTask+0x66>
 8000e9e:	bf00      	nop
 8000ea0:	240000ac 	.word	0x240000ac
 8000ea4:	58020c00 	.word	0x58020c00
 8000ea8:	58020400 	.word	0x58020400

08000eac <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ebe:	f000 fd3f 	bl	8001940 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ece:	231f      	movs	r3, #31
 8000ed0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ed2:	2387      	movs	r3, #135	@ 0x87
 8000ed4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000eda:	2300      	movs	r3, #0
 8000edc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eee:	463b      	mov	r3, r7
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 fd5d 	bl	80019b0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000efa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000efe:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000f00:	230e      	movs	r3, #14
 8000f02:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f14:	463b      	mov	r3, r7
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fd4a 	bl	80019b0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000f20:	2308      	movs	r3, #8
 8000f22:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f30:	463b      	mov	r3, r7
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fd3c 	bl	80019b0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f38:	2004      	movs	r0, #4
 8000f3a:	f000 fd19 	bl	8001970 <HAL_MPU_Enable>

}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a04      	ldr	r2, [pc, #16]	@ (8000f68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f5a:	f000 fbdd 	bl	8001718 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40001000 	.word	0x40001000

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <Error_Handler+0x8>

08000f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <HAL_MspInit+0x38>)
 8000f80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f84:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <HAL_MspInit+0x38>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f8e:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <HAL_MspInit+0x38>)
 8000f90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f06f 0001 	mvn.w	r0, #1
 8000fa4:	f000 fca4 	bl	80018f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	58024400 	.word	0x58024400

08000fb4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0b8      	sub	sp, #224	@ 0xe0
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	22b8      	movs	r2, #184	@ 0xb8
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f015 f8d6 	bl	8016186 <memset>
  if(hspi->Instance==SPI3)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a26      	ldr	r2, [pc, #152]	@ (8001078 <HAL_SPI_MspInit+0xc4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d145      	bne.n	8001070 <HAL_SPI_MspInit+0xbc>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000fe4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f003 fc29 	bl	8004850 <HAL_RCCEx_PeriphCLKConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001004:	f7ff ffb2 	bl	8000f6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001008:	4b1c      	ldr	r3, [pc, #112]	@ (800107c <HAL_SPI_MspInit+0xc8>)
 800100a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800100e:	4a1b      	ldr	r2, [pc, #108]	@ (800107c <HAL_SPI_MspInit+0xc8>)
 8001010:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001014:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001018:	4b18      	ldr	r3, [pc, #96]	@ (800107c <HAL_SPI_MspInit+0xc8>)
 800101a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800101e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001026:	4b15      	ldr	r3, [pc, #84]	@ (800107c <HAL_SPI_MspInit+0xc8>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102c:	4a13      	ldr	r2, [pc, #76]	@ (800107c <HAL_SPI_MspInit+0xc8>)
 800102e:	f043 0304 	orr.w	r3, r3, #4
 8001032:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001036:	4b11      	ldr	r3, [pc, #68]	@ (800107c <HAL_SPI_MspInit+0xc8>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001044:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001048:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800105e:	2306      	movs	r3, #6
 8001060:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001064:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001068:	4619      	mov	r1, r3
 800106a:	4805      	ldr	r0, [pc, #20]	@ (8001080 <HAL_SPI_MspInit+0xcc>)
 800106c:	f002 fa48 	bl	8003500 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001070:	bf00      	nop
 8001072:	37e0      	adds	r7, #224	@ 0xe0
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40003c00 	.word	0x40003c00
 800107c:	58024400 	.word	0x58024400
 8001080:	58020800 	.word	0x58020800

08001084 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b090      	sub	sp, #64	@ 0x40
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b0f      	cmp	r3, #15
 8001090:	d827      	bhi.n	80010e2 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001092:	2200      	movs	r2, #0
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	2036      	movs	r0, #54	@ 0x36
 8001098:	f000 fc2a 	bl	80018f0 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800109c:	2036      	movs	r0, #54	@ 0x36
 800109e:	f000 fc41 	bl	8001924 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80010a2:	4a29      	ldr	r2, [pc, #164]	@ (8001148 <HAL_InitTick+0xc4>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010a8:	4b28      	ldr	r3, [pc, #160]	@ (800114c <HAL_InitTick+0xc8>)
 80010aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ae:	4a27      	ldr	r2, [pc, #156]	@ (800114c <HAL_InitTick+0xc8>)
 80010b0:	f043 0310 	orr.w	r3, r3, #16
 80010b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010b8:	4b24      	ldr	r3, [pc, #144]	@ (800114c <HAL_InitTick+0xc8>)
 80010ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010be:	f003 0310 	and.w	r3, r3, #16
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010c6:	f107 0210 	add.w	r2, r7, #16
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 fb7b 	bl	80047cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d106      	bne.n	80010ee <HAL_InitTick+0x6a>
 80010e0:	e001      	b.n	80010e6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e02b      	b.n	800113e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010e6:	f003 fb5b 	bl	80047a0 <HAL_RCC_GetPCLK1Freq>
 80010ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80010ec:	e004      	b.n	80010f8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010ee:	f003 fb57 	bl	80047a0 <HAL_RCC_GetPCLK1Freq>
 80010f2:	4603      	mov	r3, r0
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010fa:	4a15      	ldr	r2, [pc, #84]	@ (8001150 <HAL_InitTick+0xcc>)
 80010fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001100:	0c9b      	lsrs	r3, r3, #18
 8001102:	3b01      	subs	r3, #1
 8001104:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001106:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <HAL_InitTick+0xd0>)
 8001108:	4a13      	ldr	r2, [pc, #76]	@ (8001158 <HAL_InitTick+0xd4>)
 800110a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800110c:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <HAL_InitTick+0xd0>)
 800110e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001112:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001114:	4a0f      	ldr	r2, [pc, #60]	@ (8001154 <HAL_InitTick+0xd0>)
 8001116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001118:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <HAL_InitTick+0xd0>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <HAL_InitTick+0xd0>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001126:	480b      	ldr	r0, [pc, #44]	@ (8001154 <HAL_InitTick+0xd0>)
 8001128:	f005 fdcb 	bl	8006cc2 <HAL_TIM_Base_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d104      	bne.n	800113c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001132:	4808      	ldr	r0, [pc, #32]	@ (8001154 <HAL_InitTick+0xd0>)
 8001134:	f005 fe26 	bl	8006d84 <HAL_TIM_Base_Start_IT>
 8001138:	4603      	mov	r3, r0
 800113a:	e000      	b.n	800113e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
}
 800113e:	4618      	mov	r0, r3
 8001140:	3740      	adds	r7, #64	@ 0x40
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	24000008 	.word	0x24000008
 800114c:	58024400 	.word	0x58024400
 8001150:	431bde83 	.word	0x431bde83
 8001154:	24000138 	.word	0x24000138
 8001158:	40001000 	.word	0x40001000

0800115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <NMI_Handler+0x4>

08001164 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <MemManage_Handler+0x4>

08001174 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <UsageFault_Handler+0x4>

08001184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <TIM6_DAC_IRQHandler+0x10>)
 800119a:	f005 fe79 	bl	8006e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	24000138 	.word	0x24000138

080011a8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <ETH_IRQHandler+0x10>)
 80011ae:	f001 f813 	bl	80021d8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2400020c 	.word	0x2400020c

080011bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return 1;
 80011c0:	2301      	movs	r3, #1
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <_kill>:

int _kill(int pid, int sig)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011d6:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <_kill+0x20>)
 80011d8:	2216      	movs	r2, #22
 80011da:	601a      	str	r2, [r3, #0]
  return -1;
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	2400cc68 	.word	0x2400cc68

080011f0 <_exit>:

void _exit (int status)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ffe5 	bl	80011cc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001202:	bf00      	nop
 8001204:	e7fd      	b.n	8001202 <_exit+0x12>

08001206 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	60f8      	str	r0, [r7, #12]
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	e00a      	b.n	800122e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001218:	f3af 8000 	nop.w
 800121c:	4601      	mov	r1, r0
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	60ba      	str	r2, [r7, #8]
 8001224:	b2ca      	uxtb	r2, r1
 8001226:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	429a      	cmp	r2, r3
 8001234:	dbf0      	blt.n	8001218 <_read+0x12>
  }

  return len;
 8001236:	687b      	ldr	r3, [r7, #4]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	e009      	b.n	8001266 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	1c5a      	adds	r2, r3, #1
 8001256:	60ba      	str	r2, [r7, #8]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3301      	adds	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	429a      	cmp	r2, r3
 800126c:	dbf1      	blt.n	8001252 <_write+0x12>
  }
  return len;
 800126e:	687b      	ldr	r3, [r7, #4]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_close>:

int _close(int file)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012a0:	605a      	str	r2, [r3, #4]
  return 0;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <_isatty>:

int _isatty(int file)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012b8:	2301      	movs	r3, #1
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b085      	sub	sp, #20
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e8:	4a14      	ldr	r2, [pc, #80]	@ (800133c <_sbrk+0x5c>)
 80012ea:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <_sbrk+0x60>)
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f4:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <_sbrk+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d102      	bne.n	8001302 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012fc:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <_sbrk+0x64>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <_sbrk+0x68>)
 8001300:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	429a      	cmp	r2, r3
 800130e:	d205      	bcs.n	800131c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001310:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <_sbrk+0x6c>)
 8001312:	220c      	movs	r2, #12
 8001314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	e009      	b.n	8001330 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	4a06      	ldr	r2, [pc, #24]	@ (8001344 <_sbrk+0x64>)
 800132c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132e:	68fb      	ldr	r3, [r7, #12]
}
 8001330:	4618      	mov	r0, r3
 8001332:	371c      	adds	r7, #28
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	24050000 	.word	0x24050000
 8001340:	00000400 	.word	0x00000400
 8001344:	24000184 	.word	0x24000184
 8001348:	24011608 	.word	0x24011608
 800134c:	2400cc68 	.word	0x2400cc68

08001350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001354:	4b32      	ldr	r3, [pc, #200]	@ (8001420 <SystemInit+0xd0>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800135a:	4a31      	ldr	r2, [pc, #196]	@ (8001420 <SystemInit+0xd0>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001364:	4b2f      	ldr	r3, [pc, #188]	@ (8001424 <SystemInit+0xd4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 030f 	and.w	r3, r3, #15
 800136c:	2b06      	cmp	r3, #6
 800136e:	d807      	bhi.n	8001380 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001370:	4b2c      	ldr	r3, [pc, #176]	@ (8001424 <SystemInit+0xd4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f023 030f 	bic.w	r3, r3, #15
 8001378:	4a2a      	ldr	r2, [pc, #168]	@ (8001424 <SystemInit+0xd4>)
 800137a:	f043 0307 	orr.w	r3, r3, #7
 800137e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001380:	4b29      	ldr	r3, [pc, #164]	@ (8001428 <SystemInit+0xd8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a28      	ldr	r2, [pc, #160]	@ (8001428 <SystemInit+0xd8>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800138c:	4b26      	ldr	r3, [pc, #152]	@ (8001428 <SystemInit+0xd8>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001392:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <SystemInit+0xd8>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4924      	ldr	r1, [pc, #144]	@ (8001428 <SystemInit+0xd8>)
 8001398:	4b24      	ldr	r3, [pc, #144]	@ (800142c <SystemInit+0xdc>)
 800139a:	4013      	ands	r3, r2
 800139c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <SystemInit+0xd4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d007      	beq.n	80013ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <SystemInit+0xd4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 030f 	bic.w	r3, r3, #15
 80013b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001424 <SystemInit+0xd4>)
 80013b4:	f043 0307 	orr.w	r3, r3, #7
 80013b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <SystemInit+0xd8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013c0:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <SystemInit+0xd8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013c6:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <SystemInit+0xd8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013cc:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <SystemInit+0xd8>)
 80013ce:	4a18      	ldr	r2, [pc, #96]	@ (8001430 <SystemInit+0xe0>)
 80013d0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <SystemInit+0xd8>)
 80013d4:	4a17      	ldr	r2, [pc, #92]	@ (8001434 <SystemInit+0xe4>)
 80013d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013d8:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <SystemInit+0xd8>)
 80013da:	4a17      	ldr	r2, [pc, #92]	@ (8001438 <SystemInit+0xe8>)
 80013dc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013de:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <SystemInit+0xd8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013e4:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <SystemInit+0xd8>)
 80013e6:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <SystemInit+0xe8>)
 80013e8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <SystemInit+0xd8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001428 <SystemInit+0xd8>)
 80013f2:	4a11      	ldr	r2, [pc, #68]	@ (8001438 <SystemInit+0xe8>)
 80013f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <SystemInit+0xd8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <SystemInit+0xd8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a09      	ldr	r2, [pc, #36]	@ (8001428 <SystemInit+0xd8>)
 8001402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001406:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <SystemInit+0xd8>)
 800140a:	2200      	movs	r2, #0
 800140c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800140e:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <SystemInit+0xec>)
 8001410:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001414:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00
 8001424:	52002000 	.word	0x52002000
 8001428:	58024400 	.word	0x58024400
 800142c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001430:	02020200 	.word	0x02020200
 8001434:	01ff0000 	.word	0x01ff0000
 8001438:	01010280 	.word	0x01010280
 800143c:	52004000 	.word	0x52004000

08001440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001478 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001444:	f7ff ff84 	bl	8001350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480c      	ldr	r0, [pc, #48]	@ (800147c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800144a:	490d      	ldr	r1, [pc, #52]	@ (8001480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800144c:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001460:	4c0a      	ldr	r4, [pc, #40]	@ (800148c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146e:	f014 ff35 	bl	80162dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001472:	f7ff fadd 	bl	8000a30 <main>
  bx  lr
 8001476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001478:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800147c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001480:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8001484:	0801bbb0 	.word	0x0801bbb0
  ldr r2, =_sbss
 8001488:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 800148c:	24011604 	.word	0x24011604

08001490 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC3_IRQHandler>

08001492 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00b      	beq.n	80014ba <LAN8742_RegisterBusIO+0x28>
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d007      	beq.n	80014ba <LAN8742_RegisterBusIO+0x28>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <LAN8742_RegisterBusIO+0x28>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	e014      	b.n	80014ea <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d139      	bne.n	8001586 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d002      	beq.n	8001520 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2220      	movs	r2, #32
 8001524:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	e01c      	b.n	8001566 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	f107 020c 	add.w	r2, r7, #12
 8001534:	2112      	movs	r1, #18
 8001536:	6978      	ldr	r0, [r7, #20]
 8001538:	4798      	blx	r3
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	da03      	bge.n	8001548 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001540:	f06f 0304 	mvn.w	r3, #4
 8001544:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001546:	e00b      	b.n	8001560 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	429a      	cmp	r2, r3
 8001552:	d105      	bne.n	8001560 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
         break;
 800155e:	e005      	b.n	800156c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3301      	adds	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2b1f      	cmp	r3, #31
 800156a:	d9df      	bls.n	800152c <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b1f      	cmp	r3, #31
 8001572:	d902      	bls.n	800157a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001574:	f06f 0302 	mvn.w	r3, #2
 8001578:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001586:	693b      	ldr	r3, [r7, #16]
 }
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6810      	ldr	r0, [r2, #0]
 80015a4:	f107 020c 	add.w	r2, r7, #12
 80015a8:	2101      	movs	r1, #1
 80015aa:	4798      	blx	r3
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	da02      	bge.n	80015b8 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80015b2:	f06f 0304 	mvn.w	r3, #4
 80015b6:	e06e      	b.n	8001696 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6810      	ldr	r0, [r2, #0]
 80015c0:	f107 020c 	add.w	r2, r7, #12
 80015c4:	2101      	movs	r1, #1
 80015c6:	4798      	blx	r3
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da02      	bge.n	80015d4 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80015ce:	f06f 0304 	mvn.w	r3, #4
 80015d2:	e060      	b.n	8001696 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80015de:	2301      	movs	r3, #1
 80015e0:	e059      	b.n	8001696 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6810      	ldr	r0, [r2, #0]
 80015ea:	f107 020c 	add.w	r2, r7, #12
 80015ee:	2100      	movs	r1, #0
 80015f0:	4798      	blx	r3
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	da02      	bge.n	80015fe <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80015f8:	f06f 0304 	mvn.w	r3, #4
 80015fc:	e04b      	b.n	8001696 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d11b      	bne.n	8001640 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d006      	beq.n	8001620 <LAN8742_GetLinkState+0x90>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800161c:	2302      	movs	r3, #2
 800161e:	e03a      	b.n	8001696 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800162a:	2303      	movs	r3, #3
 800162c:	e033      	b.n	8001696 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001638:	2304      	movs	r3, #4
 800163a:	e02c      	b.n	8001696 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800163c:	2305      	movs	r3, #5
 800163e:	e02a      	b.n	8001696 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6810      	ldr	r0, [r2, #0]
 8001648:	f107 020c 	add.w	r2, r7, #12
 800164c:	211f      	movs	r1, #31
 800164e:	4798      	blx	r3
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	da02      	bge.n	800165c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001656:	f06f 0304 	mvn.w	r3, #4
 800165a:	e01c      	b.n	8001696 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001666:	2306      	movs	r3, #6
 8001668:	e015      	b.n	8001696 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f003 031c 	and.w	r3, r3, #28
 8001670:	2b18      	cmp	r3, #24
 8001672:	d101      	bne.n	8001678 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001674:	2302      	movs	r3, #2
 8001676:	e00e      	b.n	8001696 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 031c 	and.w	r3, r3, #28
 800167e:	2b08      	cmp	r3, #8
 8001680:	d101      	bne.n	8001686 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001682:	2303      	movs	r3, #3
 8001684:	e007      	b.n	8001696 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f003 031c 	and.w	r3, r3, #28
 800168c:	2b14      	cmp	r3, #20
 800168e:	d101      	bne.n	8001694 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001690:	2304      	movs	r3, #4
 8001692:	e000      	b.n	8001696 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001694:	2305      	movs	r3, #5
    }
  }
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a6:	2003      	movs	r0, #3
 80016a8:	f000 f917 	bl	80018da <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016ac:	f002 fece 	bl	800444c <HAL_RCC_GetSysClockFreq>
 80016b0:	4602      	mov	r2, r0
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <HAL_Init+0x68>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	0a1b      	lsrs	r3, r3, #8
 80016b8:	f003 030f 	and.w	r3, r3, #15
 80016bc:	4913      	ldr	r1, [pc, #76]	@ (800170c <HAL_Init+0x6c>)
 80016be:	5ccb      	ldrb	r3, [r1, r3]
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	fa22 f303 	lsr.w	r3, r2, r3
 80016c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <HAL_Init+0x68>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	4a0e      	ldr	r2, [pc, #56]	@ (800170c <HAL_Init+0x6c>)
 80016d4:	5cd3      	ldrb	r3, [r2, r3]
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
 80016e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001710 <HAL_Init+0x70>)
 80016e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001714 <HAL_Init+0x74>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ea:	200f      	movs	r0, #15
 80016ec:	f7ff fcca 	bl	8001084 <HAL_InitTick>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e002      	b.n	8001700 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016fa:	f7ff fc3d 	bl	8000f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	58024400 	.word	0x58024400
 800170c:	0801a0c8 	.word	0x0801a0c8
 8001710:	24000004 	.word	0x24000004
 8001714:	24000000 	.word	0x24000000

08001718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_IncTick+0x20>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <HAL_IncTick+0x24>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a04      	ldr	r2, [pc, #16]	@ (800173c <HAL_IncTick+0x24>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	2400000c 	.word	0x2400000c
 800173c:	24000188 	.word	0x24000188

08001740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b03      	ldr	r3, [pc, #12]	@ (8001754 <HAL_GetTick+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	24000188 	.word	0x24000188

08001758 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001768:	4904      	ldr	r1, [pc, #16]	@ (800177c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	58000400 	.word	0x58000400

08001780 <__NVIC_SetPriorityGrouping>:
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017a8:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ae:	4a04      	ldr	r2, [pc, #16]	@ (80017c0 <__NVIC_SetPriorityGrouping+0x40>)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	60d3      	str	r3, [r2, #12]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00
 80017c4:	05fa0000 	.word	0x05fa0000

080017c8 <__NVIC_GetPriorityGrouping>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_EnableIRQ>:
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db0b      	blt.n	800180e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4907      	ldr	r1, [pc, #28]	@ (800181c <__NVIC_EnableIRQ+0x38>)
 80017fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2001      	movs	r0, #1
 8001806:	fa00 f202 	lsl.w	r2, r0, r2
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000e100 	.word	0xe000e100

08001820 <__NVIC_SetPriority>:
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	@ (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	@ (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <NVIC_EncodePriority>:
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	@ 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf28      	it	cs
 8001892:	2304      	movcs	r3, #4
 8001894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3304      	adds	r3, #4
 800189a:	2b06      	cmp	r3, #6
 800189c:	d902      	bls.n	80018a4 <NVIC_EncodePriority+0x30>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3b03      	subs	r3, #3
 80018a2:	e000      	b.n	80018a6 <NVIC_EncodePriority+0x32>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	401a      	ands	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	@ 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ff4c 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018fe:	f7ff ff63 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 8001902:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	68b9      	ldr	r1, [r7, #8]
 8001908:	6978      	ldr	r0, [r7, #20]
 800190a:	f7ff ffb3 	bl	8001874 <NVIC_EncodePriority>
 800190e:	4602      	mov	r2, r0
 8001910:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff82 	bl	8001820 <__NVIC_SetPriority>
}
 800191c:	bf00      	nop
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ff56 	bl	80017e4 <__NVIC_EnableIRQ>
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001944:	f3bf 8f5f 	dmb	sy
}
 8001948:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800194a:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <HAL_MPU_Disable+0x28>)
 800194c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194e:	4a06      	ldr	r2, [pc, #24]	@ (8001968 <HAL_MPU_Disable+0x28>)
 8001950:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001954:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001956:	4b05      	ldr	r3, [pc, #20]	@ (800196c <HAL_MPU_Disable+0x2c>)
 8001958:	2200      	movs	r2, #0
 800195a:	605a      	str	r2, [r3, #4]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00
 800196c:	e000ed90 	.word	0xe000ed90

08001970 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001978:	4a0b      	ldr	r2, [pc, #44]	@ (80019a8 <HAL_MPU_Enable+0x38>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001982:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <HAL_MPU_Enable+0x3c>)
 8001984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001986:	4a09      	ldr	r2, [pc, #36]	@ (80019ac <HAL_MPU_Enable+0x3c>)
 8001988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800198c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800198e:	f3bf 8f4f 	dsb	sy
}
 8001992:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001994:	f3bf 8f6f 	isb	sy
}
 8001998:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed90 	.word	0xe000ed90
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	785a      	ldrb	r2, [r3, #1]
 80019bc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <HAL_MPU_ConfigRegion+0x7c>)
 80019be:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80019c0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a2c <HAL_MPU_ConfigRegion+0x7c>)
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	4a19      	ldr	r2, [pc, #100]	@ (8001a2c <HAL_MPU_ConfigRegion+0x7c>)
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80019cc:	4a17      	ldr	r2, [pc, #92]	@ (8001a2c <HAL_MPU_ConfigRegion+0x7c>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7b1b      	ldrb	r3, [r3, #12]
 80019d8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7adb      	ldrb	r3, [r3, #11]
 80019de:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7a9b      	ldrb	r3, [r3, #10]
 80019e6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7b5b      	ldrb	r3, [r3, #13]
 80019ee:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7b9b      	ldrb	r3, [r3, #14]
 80019f6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	7bdb      	ldrb	r3, [r3, #15]
 80019fe:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7a5b      	ldrb	r3, [r3, #9]
 8001a06:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7a1b      	ldrb	r3, [r3, #8]
 8001a0e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a10:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	7812      	ldrb	r2, [r2, #0]
 8001a16:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a18:	4a04      	ldr	r2, [pc, #16]	@ (8001a2c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a1a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a1c:	6113      	str	r3, [r2, #16]
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed90 	.word	0xe000ed90

08001a30 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0e3      	b.n	8001c0a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d106      	bne.n	8001a5a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f006 f821 	bl	8007a9c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	4b6e      	ldr	r3, [pc, #440]	@ (8001c14 <HAL_ETH_Init+0x1e4>)
 8001a5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a60:	4a6c      	ldr	r2, [pc, #432]	@ (8001c14 <HAL_ETH_Init+0x1e4>)
 8001a62:	f043 0302 	orr.w	r3, r3, #2
 8001a66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a6a:	4b6a      	ldr	r3, [pc, #424]	@ (8001c14 <HAL_ETH_Init+0x1e4>)
 8001a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7a1b      	ldrb	r3, [r3, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d103      	bne.n	8001a88 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7ff fe69 	bl	8001758 <HAL_SYSCFG_ETHInterfaceSelect>
 8001a86:	e003      	b.n	8001a90 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a88:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001a8c:	f7ff fe64 	bl	8001758 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001a90:	4b61      	ldr	r3, [pc, #388]	@ (8001c18 <HAL_ETH_Init+0x1e8>)
 8001a92:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001aaa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aac:	f7ff fe48 	bl	8001740 <HAL_GetTick>
 8001ab0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001ab2:	e011      	b.n	8001ad8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001ab4:	f7ff fe44 	bl	8001740 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ac2:	d909      	bls.n	8001ad8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	22e0      	movs	r2, #224	@ 0xe0
 8001ad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e098      	b.n	8001c0a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1e4      	bne.n	8001ab4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 ff1c 	bl	8002928 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001af0:	f002 fe26 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4a49      	ldr	r2, [pc, #292]	@ (8001c1c <HAL_ETH_Init+0x1ec>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	0c9a      	lsrs	r2, r3, #18
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	3a01      	subs	r2, #1
 8001b04:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f001 f919 	bl	8002d40 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b16:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001b1a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b2a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d009      	beq.n	8001b4e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	22e0      	movs	r2, #224	@ 0xe0
 8001b46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e05d      	b.n	8001c0a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b56:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001b5a:	4b31      	ldr	r3, [pc, #196]	@ (8001c20 <HAL_ETH_Init+0x1f0>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6952      	ldr	r2, [r2, #20]
 8001b62:	0051      	lsls	r1, r2, #1
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b6e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f001 f981 	bl	8002e7a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f001 f9c7 	bl	8002f0c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	3305      	adds	r3, #5
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	021a      	lsls	r2, r3, #8
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	3303      	adds	r3, #3
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	061a      	lsls	r2, r3, #24
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	3302      	adds	r3, #2
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	041b      	lsls	r3, r3, #16
 8001bb0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bbc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001bca:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bcc:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b11      	ldr	r3, [pc, #68]	@ (8001c24 <HAL_ETH_Init+0x1f4>)
 8001bde:	430b      	orrs	r3, r1
 8001be0:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c28 <HAL_ETH_Init+0x1f8>)
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2210      	movs	r2, #16
 8001c04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	58024400 	.word	0x58024400
 8001c18:	58000400 	.word	0x58000400
 8001c1c:	431bde83 	.word	0x431bde83
 8001c20:	ffff8001 	.word	0xffff8001
 8001c24:	0c020060 	.word	0x0c020060
 8001c28:	0c20c000 	.word	0x0c20c000

08001c2c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c3a:	2b10      	cmp	r3, #16
 8001c3c:	d165      	bne.n	8001d0a <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2220      	movs	r2, #32
 8001c42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2204      	movs	r2, #4
 8001c50:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f9e4 	bl	8002020 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c60:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c70:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c8c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c98:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8001ca4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ca8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0201 	orr.w	r2, r2, #1
 8001cbc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0202 	orr.w	r2, r2, #2
 8001cce:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ce8:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cfa:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2240      	movs	r2, #64	@ 0x40
 8001d02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e000      	b.n	8001d0c <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
  }
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d22:	2b40      	cmp	r3, #64	@ 0x40
 8001d24:	d165      	bne.n	8001df2 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2220      	movs	r2, #32
 8001d2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d36:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	4b30      	ldr	r3, [pc, #192]	@ (8001e00 <HAL_ETH_Stop_IT+0xec>)
 8001d40:	400b      	ands	r3, r1
 8001d42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d46:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d52:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d62:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	f023 0301 	bic.w	r3, r3, #1
 8001d7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d7e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0201 	bic.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0202 	bic.w	r2, r2, #2
 8001db4:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	e00e      	b.n	8001dda <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	3212      	adds	r2, #18
 8001dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc6:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d9ed      	bls.n	8001dbc <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2210      	movs	r2, #16
 8001dea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e000      	b.n	8001df4 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
  }
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	ffff2f3e 	.word	0xffff2f3e

08001e04 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d109      	bne.n	8001e28 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e1a:	f043 0201 	orr.w	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e03a      	b.n	8001e9e <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e2e:	2b40      	cmp	r3, #64	@ 0x40
 8001e30:	d134      	bne.n	8001e9c <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	6839      	ldr	r1, [r7, #0]
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f001 f8c2 	bl	8002fc8 <ETH_Prepare_Tx_Descriptors>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e50:	f043 0202 	orr.w	r2, r3, #2
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e01f      	b.n	8001e9e <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e5e:	f3bf 8f4f 	dsb	sy
}
 8001e62:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d904      	bls.n	8001e80 <HAL_ETH_Transmit_IT+0x7c>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7a:	1f1a      	subs	r2, r3, #4
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3106      	adds	r1, #6
 8001e8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e94:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e000      	b.n	8001e9e <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
  }
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b088      	sub	sp, #32
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d109      	bne.n	8001ed2 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec4:	f043 0201 	orr.w	r2, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0a2      	b.n	8002018 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ed8:	2b40      	cmp	r3, #64	@ 0x40
 8001eda:	d001      	beq.n	8001ee0 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e09b      	b.n	8002018 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	3212      	adds	r2, #18
 8001eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef0:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ef6:	f1c3 0304 	rsb	r3, r3, #4
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001efc:	e064      	b.n	8001fc8 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d103      	bne.n	8001f2e <HAL_ETH_ReadData+0x88>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d03a      	beq.n	8001fa4 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d005      	beq.n	8001f46 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	f005 ff4a 	bl	8007e1c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	441a      	add	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d902      	bls.n	8001fb6 <HAL_ETH_ReadData+0x110>
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	3b04      	subs	r3, #4
 8001fb4:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	3212      	adds	r2, #18
 8001fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc0:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db06      	blt.n	8001fde <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d202      	bcs.n	8001fde <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8001fd8:	7cfb      	ldrb	r3, [r7, #19]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d08f      	beq.n	8001efe <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	441a      	add	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f814 	bl	8002020 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001ffe:	7cfb      	ldrb	r3, [r7, #19]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d108      	bne.n	8002016 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	e000      	b.n	8002018 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
}
 8002018:	4618      	mov	r0, r3
 800201a:	3720      	adds	r7, #32
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800202c:	2301      	movs	r3, #1
 800202e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002034:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	3212      	adds	r2, #18
 800203c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002040:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002046:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002048:	e038      	b.n	80020bc <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d112      	bne.n	8002078 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002052:	f107 0308 	add.w	r3, r7, #8
 8002056:	4618      	mov	r0, r3
 8002058:	f005 feb0 	bl	8007dbc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	74fb      	strb	r3, [r7, #19]
 8002066:	e007      	b.n	8002078 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	461a      	mov	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	461a      	mov	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d01e      	beq.n	80020bc <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002082:	2b00      	cmp	r3, #0
 8002084:	d004      	beq.n	8002090 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	e003      	b.n	8002098 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8002096:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	3301      	adds	r3, #1
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d902      	bls.n	80020aa <ETH_UpdateDescriptor+0x8a>
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	3b04      	subs	r3, #4
 80020a8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69fa      	ldr	r2, [r7, #28]
 80020ae:	3212      	adds	r2, #18
 80020b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b4:	617b      	str	r3, [r7, #20]
      desccount--;
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <ETH_UpdateDescriptor+0xa8>
 80020c2:	7cfb      	ldrb	r3, [r7, #19]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1c0      	bne.n	800204a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d01b      	beq.n	800210a <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3303      	adds	r3, #3
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80020dc:	f3bf 8f5f 	dmb	sy
}
 80020e0:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6919      	ldr	r1, [r3, #16]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	18ca      	adds	r2, r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020fa:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800210a:	bf00      	nop
 800210c:	3720      	adds	r7, #32
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3318      	adds	r3, #24
 800211e:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002124:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212a:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002130:	e047      	b.n	80021c2 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002132:	2301      	movs	r3, #1
 8002134:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3b01      	subs	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	3304      	adds	r3, #4
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10a      	bne.n	8002162 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	3301      	adds	r3, #1
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d902      	bls.n	800215e <HAL_ETH_ReleaseTxPacket+0x4c>
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	3b04      	subs	r3, #4
 800215c:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002162:	7bbb      	ldrb	r3, [r7, #14]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d02c      	beq.n	80021c2 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68d9      	ldr	r1, [r3, #12]
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	db1f      	blt.n	80021be <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	3304      	adds	r3, #4
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4618      	mov	r0, r3
 800218c:	f005 feae 	bl	8007eec <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	3304      	adds	r3, #4
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	2200      	movs	r2, #0
 800219c:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	3301      	adds	r3, #1
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d902      	bls.n	80021b0 <HAL_ETH_ReleaseTxPacket+0x9e>
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	3b04      	subs	r3, #4
 80021ae:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021bc:	e001      	b.n	80021c2 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <HAL_ETH_ReleaseTxPacket+0xbc>
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1b1      	bne.n	8002132 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021f2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80021f6:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002200:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002204:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8002206:	4b6d      	ldr	r3, [pc, #436]	@ (80023bc <HAL_ETH_IRQHandler+0x1e4>)
 8002208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220a:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d010      	beq.n	8002238 <HAL_ETH_IRQHandler+0x60>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00b      	beq.n	8002238 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002228:	461a      	mov	r2, r3
 800222a:	f248 0340 	movw	r3, #32832	@ 0x8040
 800222e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f005 f972 	bl	800751c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d010      	beq.n	8002264 <HAL_ETH_IRQHandler+0x8c>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00b      	beq.n	8002264 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002254:	461a      	mov	r2, r3
 8002256:	f248 0301 	movw	r3, #32769	@ 0x8001
 800225a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f005 f96c 	bl	800753c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d047      	beq.n	80022fe <HAL_ETH_IRQHandler+0x126>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d042      	beq.n	80022fe <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227e:	f043 0208 	orr.w	r2, r3, #8
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01e      	beq.n	80022d0 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800229a:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800229e:	f241 1302 	movw	r3, #4354	@ 0x1102
 80022a2:	4013      	ands	r3, r2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022b2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80022be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022c2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	22e0      	movs	r2, #224	@ 0xe0
 80022ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80022ce:	e013      	b.n	80022f8 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022d8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80022dc:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ee:	461a      	mov	r2, r3
 80022f0:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 80022f4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f005 f92f 	bl	800755c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d104      	bne.n	8002312 <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800230e:	2b00      	cmp	r3, #0
 8002310:	d019      	beq.n	8002346 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002318:	f043 0210 	orr.w	r2, r3, #16
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	22e0      	movs	r2, #224	@ 0xe0
 8002334:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f005 f90f 	bl	800755c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00f      	beq.n	8002370 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002358:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f82c 	bl	80023c0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00f      	beq.n	800239a <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002382:	f003 020f 	and.w	r2, r3, #15
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f821 	bl	80023d4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d006      	beq.n	80023b2 <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80023a4:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <HAL_ETH_IRQHandler+0x1e4>)
 80023a6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80023aa:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f81b 	bl	80023e8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 80023b2:	bf00      	nop
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	58000080 	.word	0x58000080

080023c0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e03e      	b.n	800249c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002426:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	055b      	lsls	r3, r3, #21
 8002432:	4313      	orrs	r3, r2
 8002434:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	041b      	lsls	r3, r3, #16
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f043 030c 	orr.w	r3, r3, #12
 800244a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800245e:	f7ff f96f 	bl	8001740 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002464:	e009      	b.n	800247a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002466:	f7ff f96b 	bl	8001740 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002474:	d901      	bls.n	800247a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e010      	b.n	800249c <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ed      	bne.n	8002466 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002492:	b29b      	uxth	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e03c      	b.n	8002540 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024ce:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	055b      	lsls	r3, r3, #21
 80024da:	4313      	orrs	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	041b      	lsls	r3, r3, #16
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f023 030c 	bic.w	r3, r3, #12
 80024f2:	f043 0304 	orr.w	r3, r3, #4
 80024f6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	b29a      	uxth	r2, r3
 8002504:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <HAL_ETH_WritePHYRegister+0xa4>)
 8002506:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800250a:	4a0f      	ldr	r2, [pc, #60]	@ (8002548 <HAL_ETH_WritePHYRegister+0xa4>)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002512:	f7ff f915 	bl	8001740 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002518:	e009      	b.n	800252e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800251a:	f7ff f911 	bl	8001740 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002528:	d901      	bls.n	800252e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e008      	b.n	8002540 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1ed      	bne.n	800251a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40028000 	.word	0x40028000

0800254c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e1c3      	b.n	80028e8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 020c 	and.w	r2, r3, #12
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf14      	ite	ne
 800257c:	2301      	movne	r3, #1
 800257e:	2300      	moveq	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf0c      	ite	eq
 80025a6:	2301      	moveq	r3, #1
 80025a8:	2300      	movne	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bf14      	ite	ne
 80025c2:	2301      	movne	r3, #1
 80025c4:	2300      	moveq	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	bf0c      	ite	eq
 80025dc:	2301      	moveq	r3, #1
 80025de:	2300      	movne	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80025ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	bf14      	ite	ne
 80025f6:	2301      	movne	r3, #1
 80025f8:	2300      	moveq	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf14      	ite	ne
 8002610:	2301      	movne	r3, #1
 8002612:	2300      	moveq	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002642:	2b00      	cmp	r3, #0
 8002644:	bf14      	ite	ne
 8002646:	2301      	movne	r3, #1
 8002648:	2300      	moveq	r3, #0
 800264a:	b2db      	uxtb	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002676:	2b00      	cmp	r3, #0
 8002678:	bf0c      	ite	eq
 800267a:	2301      	moveq	r3, #1
 800267c:	2300      	movne	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002690:	2b00      	cmp	r3, #0
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	bf14      	ite	ne
 80026ae:	2301      	movne	r3, #1
 80026b0:	2300      	moveq	r3, #0
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf14      	ite	ne
 80026c8:	2301      	movne	r3, #1
 80026ca:	2300      	moveq	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80026da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bf14      	ite	ne
 80026e2:	2301      	movne	r3, #1
 80026e4:	2300      	moveq	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	bf14      	ite	ne
 800270a:	2301      	movne	r3, #1
 800270c:	2300      	moveq	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	461a      	mov	r2, r3
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800273c:	2b00      	cmp	r3, #0
 800273e:	bf0c      	ite	eq
 8002740:	2301      	moveq	r3, #1
 8002742:	2300      	movne	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf14      	ite	ne
 800275c:	2301      	movne	r3, #1
 800275e:	2300      	moveq	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002770:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf14      	ite	ne
 8002778:	2301      	movne	r3, #1
 800277a:	2300      	moveq	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf14      	ite	ne
 8002794:	2301      	movne	r3, #1
 8002796:	2300      	moveq	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	0e5b      	lsrs	r3, r3, #25
 80027aa:	f003 021f 	and.w	r2, r3, #31
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf14      	ite	ne
 80027c0:	2301      	movne	r3, #1
 80027c2:	2300      	moveq	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 020f 	and.w	r2, r3, #15
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	bf14      	ite	ne
 80027ea:	2301      	movne	r3, #1
 80027ec:	2300      	moveq	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002802:	2b00      	cmp	r3, #0
 8002804:	bf0c      	ite	eq
 8002806:	2301      	moveq	r3, #1
 8002808:	2300      	movne	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002828:	0c1b      	lsrs	r3, r3, #16
 800282a:	b29a      	uxth	r2, r3
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf14      	ite	ne
 8002840:	2301      	movne	r3, #1
 8002842:	2300      	moveq	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	461a      	mov	r2, r3
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002856:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800285a:	2b00      	cmp	r3, #0
 800285c:	bf14      	ite	ne
 800285e:	2301      	movne	r3, #1
 8002860:	2300      	moveq	r3, #0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002874:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002884:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf14      	ite	ne
 800289c:	2301      	movne	r3, #1
 800289e:	2300      	moveq	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	bf14      	ite	ne
 80028ba:	2301      	movne	r3, #1
 80028bc:	2300      	moveq	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80028d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e00b      	b.n	8002920 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800290e:	2b10      	cmp	r3, #16
 8002910:	d105      	bne.n	800291e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002912:	6839      	ldr	r1, [r7, #0]
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f871 	bl	80029fc <ETH_SetMACConfig>

    return HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	e000      	b.n	8002920 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
  }
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002938:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002940:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002942:	f001 fefd 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 8002946:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4a1a      	ldr	r2, [pc, #104]	@ (80029b4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d804      	bhi.n	800295a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	e022      	b.n	80029a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	4a16      	ldr	r2, [pc, #88]	@ (80029b8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d204      	bcs.n	800296c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	e019      	b.n	80029a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4a13      	ldr	r2, [pc, #76]	@ (80029bc <HAL_ETH_SetMDIOClockRange+0x94>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d915      	bls.n	80029a0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4a12      	ldr	r2, [pc, #72]	@ (80029c0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d804      	bhi.n	8002986 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e00c      	b.n	80029a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	4a0e      	ldr	r2, [pc, #56]	@ (80029c4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d804      	bhi.n	8002998 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	e003      	b.n	80029a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800299e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	02160ebf 	.word	0x02160ebf
 80029b8:	03938700 	.word	0x03938700
 80029bc:	05f5e0ff 	.word	0x05f5e0ff
 80029c0:	08f0d17f 	.word	0x08f0d17f
 80029c4:	0ee6b27f 	.word	0x0ee6b27f

080029c8 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002a0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	791b      	ldrb	r3, [r3, #4]
 8002a14:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002a16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	7b1b      	ldrb	r3, [r3, #12]
 8002a1c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002a1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	7b5b      	ldrb	r3, [r3, #13]
 8002a24:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	7b9b      	ldrb	r3, [r3, #14]
 8002a2c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	7bdb      	ldrb	r3, [r3, #15]
 8002a34:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a36:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	7c12      	ldrb	r2, [r2, #16]
 8002a3c:	2a00      	cmp	r2, #0
 8002a3e:	d102      	bne.n	8002a46 <ETH_SetMACConfig+0x4a>
 8002a40:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002a44:	e000      	b.n	8002a48 <ETH_SetMACConfig+0x4c>
 8002a46:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a48:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	7c52      	ldrb	r2, [r2, #17]
 8002a4e:	2a00      	cmp	r2, #0
 8002a50:	d102      	bne.n	8002a58 <ETH_SetMACConfig+0x5c>
 8002a52:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a56:	e000      	b.n	8002a5a <ETH_SetMACConfig+0x5e>
 8002a58:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	7c9b      	ldrb	r3, [r3, #18]
 8002a60:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a62:	431a      	orrs	r2, r3
               macconf->Speed |
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002a68:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002a6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	7f1b      	ldrb	r3, [r3, #28]
 8002a74:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002a76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	7f5b      	ldrb	r3, [r3, #29]
 8002a7c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002a7e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	7f92      	ldrb	r2, [r2, #30]
 8002a84:	2a00      	cmp	r2, #0
 8002a86:	d102      	bne.n	8002a8e <ETH_SetMACConfig+0x92>
 8002a88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a8c:	e000      	b.n	8002a90 <ETH_SetMACConfig+0x94>
 8002a8e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002a90:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	7fdb      	ldrb	r3, [r3, #31]
 8002a96:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002a98:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002aa0:	2a00      	cmp	r2, #0
 8002aa2:	d102      	bne.n	8002aaa <ETH_SetMACConfig+0xae>
 8002aa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002aa8:	e000      	b.n	8002aac <ETH_SetMACConfig+0xb0>
 8002aaa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002aac:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002ab2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002aba:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002abc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b56      	ldr	r3, [pc, #344]	@ (8002c28 <ETH_SetMACConfig+0x22c>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	68f9      	ldr	r1, [r7, #12]
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ade:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ae6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002ae8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002af0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002af2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002afa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002afc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002b04:	2a00      	cmp	r2, #0
 8002b06:	d102      	bne.n	8002b0e <ETH_SetMACConfig+0x112>
 8002b08:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b0c:	e000      	b.n	8002b10 <ETH_SetMACConfig+0x114>
 8002b0e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002b10:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	4b42      	ldr	r3, [pc, #264]	@ (8002c2c <ETH_SetMACConfig+0x230>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	68f9      	ldr	r1, [r7, #12]
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b34:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	4b3a      	ldr	r3, [pc, #232]	@ (8002c30 <ETH_SetMACConfig+0x234>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	68f9      	ldr	r1, [r7, #12]
 8002b4e:	430b      	orrs	r3, r1
 8002b50:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002b58:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b5e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002b66:	2a00      	cmp	r2, #0
 8002b68:	d101      	bne.n	8002b6e <ETH_SetMACConfig+0x172>
 8002b6a:	2280      	movs	r2, #128	@ 0x80
 8002b6c:	e000      	b.n	8002b70 <ETH_SetMACConfig+0x174>
 8002b6e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002b70:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b76:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b82:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002b86:	4013      	ands	r3, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	68f9      	ldr	r1, [r7, #12]
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002b98:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002ba0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bae:	f023 0103 	bic.w	r1, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002bc6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002be2:	2a00      	cmp	r2, #0
 8002be4:	d101      	bne.n	8002bea <ETH_SetMACConfig+0x1ee>
 8002be6:	2240      	movs	r2, #64	@ 0x40
 8002be8:	e000      	b.n	8002bec <ETH_SetMACConfig+0x1f0>
 8002bea:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002bec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002bf4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002bf6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002bfe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002c0c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	00048083 	.word	0x00048083
 8002c2c:	c0f88000 	.word	0xc0f88000
 8002c30:	fffffef0 	.word	0xfffffef0

08002c34 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b38      	ldr	r3, [pc, #224]	@ (8002d2c <ETH_SetDMAConfig+0xf8>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	6811      	ldr	r1, [r2, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	430b      	orrs	r3, r1
 8002c56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c5a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	791b      	ldrb	r3, [r3, #4]
 8002c60:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c66:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	7b1b      	ldrb	r3, [r3, #12]
 8002c6c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8002d30 <ETH_SetDMAConfig+0xfc>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	68f9      	ldr	r1, [r7, #12]
 8002c86:	430b      	orrs	r3, r1
 8002c88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c8c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	7b5b      	ldrb	r3, [r3, #13]
 8002c92:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ca4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002ca8:	4b22      	ldr	r3, [pc, #136]	@ (8002d34 <ETH_SetDMAConfig+0x100>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	68f9      	ldr	r1, [r7, #12]
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cb8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	7d1b      	ldrb	r3, [r3, #20]
 8002cc4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cc6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	7f5b      	ldrb	r3, [r3, #29]
 8002ccc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cda:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002cde:	4b16      	ldr	r3, [pc, #88]	@ (8002d38 <ETH_SetDMAConfig+0x104>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	68f9      	ldr	r1, [r7, #12]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cee:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	7f1b      	ldrb	r3, [r3, #28]
 8002cf6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d08:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <ETH_SetDMAConfig+0x108>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	68f9      	ldr	r1, [r7, #12]
 8002d16:	430b      	orrs	r3, r1
 8002d18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d1c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002d20:	bf00      	nop
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	ffff87fd 	.word	0xffff87fd
 8002d30:	ffff2ffe 	.word	0xffff2ffe
 8002d34:	fffec000 	.word	0xfffec000
 8002d38:	ffc0efef 	.word	0xffc0efef
 8002d3c:	7fc0ffff 	.word	0x7fc0ffff

08002d40 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b0a4      	sub	sp, #144	@ 0x90
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002d64:	2301      	movs	r3, #1
 8002d66:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d80:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002d98:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002d9c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002da4:	2300      	movs	r3, #0
 8002da6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002da8:	2301      	movs	r3, #1
 8002daa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002db4:	2300      	movs	r3, #0
 8002db6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002dd8:	2320      	movs	r3, #32
 8002dda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002dea:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002df0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002df4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e28:	4619      	mov	r1, r3
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff fde6 	bl	80029fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002e30:	2301      	movs	r3, #1
 8002e32:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002e34:	2301      	movs	r3, #1
 8002e36:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002e42:	2300      	movs	r3, #0
 8002e44:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e4a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e4e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002e50:	2300      	movs	r3, #0
 8002e52:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e54:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e58:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002e60:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002e64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e66:	f107 0308 	add.w	r3, r7, #8
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff fee1 	bl	8002c34 <ETH_SetDMAConfig>
}
 8002e72:	bf00      	nop
 8002e74:	3790      	adds	r7, #144	@ 0x90
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b085      	sub	sp, #20
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	e01d      	b.n	8002ec4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68d9      	ldr	r1, [r3, #12]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	440b      	add	r3, r1
 8002e98:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	3206      	adds	r2, #6
 8002eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d9de      	bls.n	8002e88 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2303      	movs	r3, #3
 8002edc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eec:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002efc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	e023      	b.n	8002f62 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6919      	ldr	r1, [r3, #16]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	440b      	add	r3, r1
 8002f2a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2200      	movs	r2, #0
 8002f36:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2200      	movs	r2, #0
 8002f42:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2200      	movs	r2, #0
 8002f48:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	3212      	adds	r2, #18
 8002f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d9d8      	bls.n	8002f1a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2303      	movs	r3, #3
 8002f92:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fa2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fb6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002fba:	bf00      	nop
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b091      	sub	sp, #68	@ 0x44
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3318      	adds	r3, #24
 8002fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff2:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003006:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800300a:	d007      	beq.n	800301c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800300c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800300e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003010:	3304      	adds	r3, #4
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800301c:	2302      	movs	r3, #2
 800301e:	e266      	b.n	80034ee <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d044      	beq.n	80030b6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800302c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	4b75      	ldr	r3, [pc, #468]	@ (8003208 <ETH_Prepare_Tx_Descriptors+0x240>)
 8003032:	4013      	ands	r3, r2
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003038:	431a      	orrs	r2, r3
 800303a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800303c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800303e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003048:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003058:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d027      	beq.n	80030b6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	b29a      	uxth	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	041b      	lsls	r3, r3, #16
 8003072:	431a      	orrs	r2, r3
 8003074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003076:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003082:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003090:	431a      	orrs	r2, r3
 8003092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003094:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80030a4:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80030b4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00e      	beq.n	80030e0 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80030c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	4b51      	ldr	r3, [pc, #324]	@ (800320c <ETH_Prepare_Tx_Descriptors+0x244>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	6992      	ldr	r2, [r2, #24]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80030d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80030dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030de:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d105      	bne.n	80030f8 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d036      	beq.n	8003166 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80030f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003102:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003104:	f3bf 8f5f 	dmb	sy
}
 8003108:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800310a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003114:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003118:	3301      	adds	r3, #1
 800311a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800311c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800311e:	2b03      	cmp	r3, #3
 8003120:	d902      	bls.n	8003128 <ETH_Prepare_Tx_Descriptors+0x160>
 8003122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003124:	3b04      	subs	r3, #4
 8003126:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800312c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003130:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8003132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003134:	3301      	adds	r3, #1
 8003136:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003140:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003144:	d10f      	bne.n	8003166 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	6a3a      	ldr	r2, [r7, #32]
 800314a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800314e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003150:	f3bf 8f5f 	dmb	sy
}
 8003154:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800315e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003160:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003162:	2302      	movs	r3, #2
 8003164:	e1c3      	b.n	80034ee <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003168:	3301      	adds	r3, #1
 800316a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800316c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003174:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	4b24      	ldr	r3, [pc, #144]	@ (800320c <ETH_Prepare_Tx_Descriptors+0x244>)
 800317c:	4013      	ands	r3, r2
 800317e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003180:	6852      	ldr	r2, [r2, #4]
 8003182:	431a      	orrs	r2, r3
 8003184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003186:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8003188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d012      	beq.n	80031b6 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8003190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80031a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003210 <ETH_Prepare_Tx_Descriptors+0x248>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031aa:	6852      	ldr	r2, [r2, #4]
 80031ac:	0412      	lsls	r2, r2, #16
 80031ae:	431a      	orrs	r2, r3
 80031b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	e008      	b.n	80031c8 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80031b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b8:	2200      	movs	r2, #0
 80031ba:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80031bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	4b13      	ldr	r3, [pc, #76]	@ (8003210 <ETH_Prepare_Tx_Descriptors+0x248>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031c6:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d021      	beq.n	8003218 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80031d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	04db      	lsls	r3, r3, #19
 80031e2:	431a      	orrs	r2, r3
 80031e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e6:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80031e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	4b09      	ldr	r3, [pc, #36]	@ (8003214 <ETH_Prepare_Tx_Descriptors+0x24c>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	69d2      	ldr	r2, [r2, #28]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80031fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	e02e      	b.n	8003266 <ETH_Prepare_Tx_Descriptors+0x29e>
 8003208:	ffff0000 	.word	0xffff0000
 800320c:	ffffc000 	.word	0xffffc000
 8003210:	c000ffff 	.word	0xc000ffff
 8003214:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	4b7b      	ldr	r3, [pc, #492]	@ (800340c <ETH_Prepare_Tx_Descriptors+0x444>)
 800321e:	4013      	ands	r3, r2
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	6852      	ldr	r2, [r2, #4]
 8003224:	431a      	orrs	r2, r3
 8003226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003228:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	431a      	orrs	r2, r3
 8003244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003246:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	431a      	orrs	r2, r3
 8003262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003264:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327e:	431a      	orrs	r2, r3
 8003280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003282:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800328c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800329c:	f3bf 8f5f 	dmb	sy
}
 80032a0:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80032a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80032aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ac:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 80da 	beq.w	8003470 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80032bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	431a      	orrs	r2, r3
 80032ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032cc:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80032ce:	e0cf      	b.n	8003470 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80032d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80032d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032da:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80032dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032de:	3301      	adds	r3, #1
 80032e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d902      	bls.n	80032ee <ETH_Prepare_Tx_Descriptors+0x326>
 80032e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032ea:	3b04      	subs	r3, #4
 80032ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80032f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003302:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8003304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800330c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003310:	d007      	beq.n	8003322 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003316:	3304      	adds	r3, #4
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d029      	beq.n	8003376 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003328:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800332a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800332e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003330:	2300      	movs	r3, #0
 8003332:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003334:	e019      	b.n	800336a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8003336:	f3bf 8f5f 	dmb	sy
}
 800333a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800333c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003346:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800334a:	3301      	adds	r3, #1
 800334c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800334e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003350:	2b03      	cmp	r3, #3
 8003352:	d902      	bls.n	800335a <ETH_Prepare_Tx_Descriptors+0x392>
 8003354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003356:	3b04      	subs	r3, #4
 8003358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800335e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003362:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003366:	3301      	adds	r3, #1
 8003368:	63bb      	str	r3, [r7, #56]	@ 0x38
 800336a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800336c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336e:	429a      	cmp	r2, r3
 8003370:	d3e1      	bcc.n	8003336 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8003372:	2302      	movs	r3, #2
 8003374:	e0bb      	b.n	80034ee <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8003376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003378:	3301      	adds	r3, #1
 800337a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800337c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800338c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	4b1f      	ldr	r3, [pc, #124]	@ (8003410 <ETH_Prepare_Tx_Descriptors+0x448>)
 8003392:	4013      	ands	r3, r2
 8003394:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003396:	6852      	ldr	r2, [r2, #4]
 8003398:	431a      	orrs	r2, r3
 800339a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800339c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800339e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d012      	beq.n	80033cc <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80033a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80033ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80033b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	4b16      	ldr	r3, [pc, #88]	@ (8003414 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80033bc:	4013      	ands	r3, r2
 80033be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033c0:	6852      	ldr	r2, [r2, #4]
 80033c2:	0412      	lsls	r2, r2, #16
 80033c4:	431a      	orrs	r2, r3
 80033c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c8:	609a      	str	r2, [r3, #8]
 80033ca:	e008      	b.n	80033de <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80033cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ce:	2200      	movs	r2, #0
 80033d0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80033d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003414 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80033d8:	4013      	ands	r3, r2
 80033da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033dc:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d018      	beq.n	800341c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80033ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003418 <ETH_Prepare_Tx_Descriptors+0x450>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	69d2      	ldr	r2, [r2, #28]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fa:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80033fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003406:	60da      	str	r2, [r3, #12]
 8003408:	e020      	b.n	800344c <ETH_Prepare_Tx_Descriptors+0x484>
 800340a:	bf00      	nop
 800340c:	ffff8000 	.word	0xffff8000
 8003410:	ffffc000 	.word	0xffffc000
 8003414:	c000ffff 	.word	0xc000ffff
 8003418:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800341c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	4b36      	ldr	r3, [pc, #216]	@ (80034fc <ETH_Prepare_Tx_Descriptors+0x534>)
 8003422:	4013      	ands	r3, r2
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	6852      	ldr	r2, [r2, #4]
 8003428:	431a      	orrs	r2, r3
 800342a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800342c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800343a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	431a      	orrs	r2, r3
 8003448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800344c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344e:	3301      	adds	r3, #1
 8003450:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003452:	f3bf 8f5f 	dmb	sy
}
 8003456:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003462:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800346c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f47f af2b 	bne.w	80032d0 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d006      	beq.n	800348e <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	e005      	b.n	800349a <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800348e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003498:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800349a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80034a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80034a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ae:	3304      	adds	r3, #4
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034ba:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034bc:	f3ef 8310 	mrs	r3, PRIMASK
 80034c0:	613b      	str	r3, [r7, #16]
  return(result);
 80034c2:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	2301      	movs	r3, #1
 80034c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f383 8810 	msr	PRIMASK, r3
}
 80034d0:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d8:	4413      	add	r3, r2
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034de:	629a      	str	r2, [r3, #40]	@ 0x28
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	f383 8810 	msr	PRIMASK, r3
}
 80034ea:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3744      	adds	r7, #68	@ 0x44
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	ffff8000 	.word	0xffff8000

08003500 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003500:	b480      	push	{r7}
 8003502:	b089      	sub	sp, #36	@ 0x24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800350e:	4b86      	ldr	r3, [pc, #536]	@ (8003728 <HAL_GPIO_Init+0x228>)
 8003510:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003512:	e18c      	b.n	800382e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	2101      	movs	r1, #1
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	fa01 f303 	lsl.w	r3, r1, r3
 8003520:	4013      	ands	r3, r2
 8003522:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 817e 	beq.w	8003828 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b01      	cmp	r3, #1
 8003536:	d005      	beq.n	8003544 <HAL_GPIO_Init+0x44>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d130      	bne.n	80035a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	2203      	movs	r2, #3
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4313      	orrs	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800357a:	2201      	movs	r2, #1
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	f003 0201 	and.w	r2, r3, #1
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d017      	beq.n	80035e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	2203      	movs	r2, #3
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d123      	bne.n	8003636 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	08da      	lsrs	r2, r3, #3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3208      	adds	r2, #8
 80035f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	220f      	movs	r2, #15
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	08da      	lsrs	r2, r3, #3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3208      	adds	r2, #8
 8003630:	69b9      	ldr	r1, [r7, #24]
 8003632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	2203      	movs	r2, #3
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4013      	ands	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 0203 	and.w	r2, r3, #3
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4313      	orrs	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80d8 	beq.w	8003828 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003678:	4b2c      	ldr	r3, [pc, #176]	@ (800372c <HAL_GPIO_Init+0x22c>)
 800367a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800367e:	4a2b      	ldr	r2, [pc, #172]	@ (800372c <HAL_GPIO_Init+0x22c>)
 8003680:	f043 0302 	orr.w	r3, r3, #2
 8003684:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003688:	4b28      	ldr	r3, [pc, #160]	@ (800372c <HAL_GPIO_Init+0x22c>)
 800368a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003696:	4a26      	ldr	r2, [pc, #152]	@ (8003730 <HAL_GPIO_Init+0x230>)
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	089b      	lsrs	r3, r3, #2
 800369c:	3302      	adds	r3, #2
 800369e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	220f      	movs	r2, #15
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003734 <HAL_GPIO_Init+0x234>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d04a      	beq.n	8003758 <HAL_GPIO_Init+0x258>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003738 <HAL_GPIO_Init+0x238>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d02b      	beq.n	8003722 <HAL_GPIO_Init+0x222>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a1b      	ldr	r2, [pc, #108]	@ (800373c <HAL_GPIO_Init+0x23c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d025      	beq.n	800371e <HAL_GPIO_Init+0x21e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a1a      	ldr	r2, [pc, #104]	@ (8003740 <HAL_GPIO_Init+0x240>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d01f      	beq.n	800371a <HAL_GPIO_Init+0x21a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a19      	ldr	r2, [pc, #100]	@ (8003744 <HAL_GPIO_Init+0x244>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d019      	beq.n	8003716 <HAL_GPIO_Init+0x216>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a18      	ldr	r2, [pc, #96]	@ (8003748 <HAL_GPIO_Init+0x248>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <HAL_GPIO_Init+0x212>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a17      	ldr	r2, [pc, #92]	@ (800374c <HAL_GPIO_Init+0x24c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00d      	beq.n	800370e <HAL_GPIO_Init+0x20e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a16      	ldr	r2, [pc, #88]	@ (8003750 <HAL_GPIO_Init+0x250>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d007      	beq.n	800370a <HAL_GPIO_Init+0x20a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a15      	ldr	r2, [pc, #84]	@ (8003754 <HAL_GPIO_Init+0x254>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d101      	bne.n	8003706 <HAL_GPIO_Init+0x206>
 8003702:	2309      	movs	r3, #9
 8003704:	e029      	b.n	800375a <HAL_GPIO_Init+0x25a>
 8003706:	230a      	movs	r3, #10
 8003708:	e027      	b.n	800375a <HAL_GPIO_Init+0x25a>
 800370a:	2307      	movs	r3, #7
 800370c:	e025      	b.n	800375a <HAL_GPIO_Init+0x25a>
 800370e:	2306      	movs	r3, #6
 8003710:	e023      	b.n	800375a <HAL_GPIO_Init+0x25a>
 8003712:	2305      	movs	r3, #5
 8003714:	e021      	b.n	800375a <HAL_GPIO_Init+0x25a>
 8003716:	2304      	movs	r3, #4
 8003718:	e01f      	b.n	800375a <HAL_GPIO_Init+0x25a>
 800371a:	2303      	movs	r3, #3
 800371c:	e01d      	b.n	800375a <HAL_GPIO_Init+0x25a>
 800371e:	2302      	movs	r3, #2
 8003720:	e01b      	b.n	800375a <HAL_GPIO_Init+0x25a>
 8003722:	2301      	movs	r3, #1
 8003724:	e019      	b.n	800375a <HAL_GPIO_Init+0x25a>
 8003726:	bf00      	nop
 8003728:	58000080 	.word	0x58000080
 800372c:	58024400 	.word	0x58024400
 8003730:	58000400 	.word	0x58000400
 8003734:	58020000 	.word	0x58020000
 8003738:	58020400 	.word	0x58020400
 800373c:	58020800 	.word	0x58020800
 8003740:	58020c00 	.word	0x58020c00
 8003744:	58021000 	.word	0x58021000
 8003748:	58021400 	.word	0x58021400
 800374c:	58021800 	.word	0x58021800
 8003750:	58021c00 	.word	0x58021c00
 8003754:	58022400 	.word	0x58022400
 8003758:	2300      	movs	r3, #0
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	f002 0203 	and.w	r2, r2, #3
 8003760:	0092      	lsls	r2, r2, #2
 8003762:	4093      	lsls	r3, r2
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800376a:	4938      	ldr	r1, [pc, #224]	@ (800384c <HAL_GPIO_Init+0x34c>)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	089b      	lsrs	r3, r3, #2
 8003770:	3302      	adds	r3, #2
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	43db      	mvns	r3, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4013      	ands	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800379e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80037a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80037cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	43db      	mvns	r3, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4013      	ands	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	3301      	adds	r3, #1
 800382c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	f47f ae6b 	bne.w	8003514 <HAL_GPIO_Init+0x14>
  }
}
 800383e:	bf00      	nop
 8003840:	bf00      	nop
 8003842:	3724      	adds	r7, #36	@ 0x24
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	58000400 	.word	0x58000400

08003850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	807b      	strh	r3, [r7, #2]
 800385c:	4613      	mov	r3, r2
 800385e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003860:	787b      	ldrb	r3, [r7, #1]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003866:	887a      	ldrh	r2, [r7, #2]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800386c:	e003      	b.n	8003876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800386e:	887b      	ldrh	r3, [r7, #2]
 8003870:	041a      	lsls	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	619a      	str	r2, [r3, #24]
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003882:	b480      	push	{r7}
 8003884:	b085      	sub	sp, #20
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	460b      	mov	r3, r1
 800388c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003894:	887a      	ldrh	r2, [r7, #2]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4013      	ands	r3, r2
 800389a:	041a      	lsls	r2, r3, #16
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	43d9      	mvns	r1, r3
 80038a0:	887b      	ldrh	r3, [r7, #2]
 80038a2:	400b      	ands	r3, r1
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	619a      	str	r2, [r3, #24]
}
 80038aa:	bf00      	nop
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80038c0:	4b19      	ldr	r3, [pc, #100]	@ (8003928 <HAL_PWREx_ConfigSupply+0x70>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d00a      	beq.n	80038e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80038cc:	4b16      	ldr	r3, [pc, #88]	@ (8003928 <HAL_PWREx_ConfigSupply+0x70>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d001      	beq.n	80038de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e01f      	b.n	800391e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	e01d      	b.n	800391e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038e2:	4b11      	ldr	r3, [pc, #68]	@ (8003928 <HAL_PWREx_ConfigSupply+0x70>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f023 0207 	bic.w	r2, r3, #7
 80038ea:	490f      	ldr	r1, [pc, #60]	@ (8003928 <HAL_PWREx_ConfigSupply+0x70>)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80038f2:	f7fd ff25 	bl	8001740 <HAL_GetTick>
 80038f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038f8:	e009      	b.n	800390e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80038fa:	f7fd ff21 	bl	8001740 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003908:	d901      	bls.n	800390e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e007      	b.n	800391e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800390e:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <HAL_PWREx_ConfigSupply+0x70>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800391a:	d1ee      	bne.n	80038fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	58024800 	.word	0x58024800

0800392c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08c      	sub	sp, #48	@ 0x30
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e3c8      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8087 	beq.w	8003a5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394c:	4b88      	ldr	r3, [pc, #544]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003954:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003956:	4b86      	ldr	r3, [pc, #536]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800395c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800395e:	2b10      	cmp	r3, #16
 8003960:	d007      	beq.n	8003972 <HAL_RCC_OscConfig+0x46>
 8003962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003964:	2b18      	cmp	r3, #24
 8003966:	d110      	bne.n	800398a <HAL_RCC_OscConfig+0x5e>
 8003968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d10b      	bne.n	800398a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003972:	4b7f      	ldr	r3, [pc, #508]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d06c      	beq.n	8003a58 <HAL_RCC_OscConfig+0x12c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d168      	bne.n	8003a58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e3a2      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003992:	d106      	bne.n	80039a2 <HAL_RCC_OscConfig+0x76>
 8003994:	4b76      	ldr	r3, [pc, #472]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a75      	ldr	r2, [pc, #468]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 800399a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	e02e      	b.n	8003a00 <HAL_RCC_OscConfig+0xd4>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x98>
 80039aa:	4b71      	ldr	r3, [pc, #452]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a70      	ldr	r2, [pc, #448]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b6e      	ldr	r3, [pc, #440]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6d      	ldr	r2, [pc, #436]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e01d      	b.n	8003a00 <HAL_RCC_OscConfig+0xd4>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0xbc>
 80039ce:	4b68      	ldr	r3, [pc, #416]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a67      	ldr	r2, [pc, #412]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b65      	ldr	r3, [pc, #404]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a64      	ldr	r2, [pc, #400]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e00b      	b.n	8003a00 <HAL_RCC_OscConfig+0xd4>
 80039e8:	4b61      	ldr	r3, [pc, #388]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a60      	ldr	r2, [pc, #384]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	4b5e      	ldr	r3, [pc, #376]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a5d      	ldr	r2, [pc, #372]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d013      	beq.n	8003a30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fd fe9a 	bl	8001740 <HAL_GetTick>
 8003a0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a10:	f7fd fe96 	bl	8001740 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	@ 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e356      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a22:	4b53      	ldr	r3, [pc, #332]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0xe4>
 8003a2e:	e014      	b.n	8003a5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd fe86 	bl	8001740 <HAL_GetTick>
 8003a34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a38:	f7fd fe82 	bl	8001740 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	@ 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e342      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a4a:	4b49      	ldr	r3, [pc, #292]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x10c>
 8003a56:	e000      	b.n	8003a5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 808c 	beq.w	8003b80 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a68:	4b41      	ldr	r3, [pc, #260]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a72:	4b3f      	ldr	r3, [pc, #252]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a76:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <HAL_RCC_OscConfig+0x162>
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	2b18      	cmp	r3, #24
 8003a82:	d137      	bne.n	8003af4 <HAL_RCC_OscConfig+0x1c8>
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d132      	bne.n	8003af4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a8e:	4b38      	ldr	r3, [pc, #224]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x17a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e314      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003aa6:	4b32      	ldr	r3, [pc, #200]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 0219 	bic.w	r2, r3, #25
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	492f      	ldr	r1, [pc, #188]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fd fe42 	bl	8001740 <HAL_GetTick>
 8003abc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac0:	f7fd fe3e 	bl	8001740 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e2fe      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ad2:	4b27      	ldr	r3, [pc, #156]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ade:	4b24      	ldr	r3, [pc, #144]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	061b      	lsls	r3, r3, #24
 8003aec:	4920      	ldr	r1, [pc, #128]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af2:	e045      	b.n	8003b80 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d026      	beq.n	8003b4a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003afc:	4b1c      	ldr	r3, [pc, #112]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f023 0219 	bic.w	r2, r3, #25
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4919      	ldr	r1, [pc, #100]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0e:	f7fd fe17 	bl	8001740 <HAL_GetTick>
 8003b12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b16:	f7fd fe13 	bl	8001740 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e2d3      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b28:	4b11      	ldr	r3, [pc, #68]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b34:	4b0e      	ldr	r3, [pc, #56]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	061b      	lsls	r3, r3, #24
 8003b42:	490b      	ldr	r1, [pc, #44]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
 8003b48:	e01a      	b.n	8003b80 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4a:	4b09      	ldr	r3, [pc, #36]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a08      	ldr	r2, [pc, #32]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b56:	f7fd fdf3 	bl	8001740 <HAL_GetTick>
 8003b5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b5c:	e00a      	b.n	8003b74 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5e:	f7fd fdef 	bl	8001740 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d903      	bls.n	8003b74 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e2af      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
 8003b70:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b74:	4b96      	ldr	r3, [pc, #600]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1ee      	bne.n	8003b5e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d06a      	beq.n	8003c62 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b8c:	4b90      	ldr	r3, [pc, #576]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b94:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b96:	4b8e      	ldr	r3, [pc, #568]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d007      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x286>
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b18      	cmp	r3, #24
 8003ba6:	d11b      	bne.n	8003be0 <HAL_RCC_OscConfig+0x2b4>
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d116      	bne.n	8003be0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bb2:	4b87      	ldr	r3, [pc, #540]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <HAL_RCC_OscConfig+0x29e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	2b80      	cmp	r3, #128	@ 0x80
 8003bc4:	d001      	beq.n	8003bca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e282      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bca:	4b81      	ldr	r3, [pc, #516]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	061b      	lsls	r3, r3, #24
 8003bd8:	497d      	ldr	r1, [pc, #500]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bde:	e040      	b.n	8003c62 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d023      	beq.n	8003c30 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003be8:	4b79      	ldr	r3, [pc, #484]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a78      	ldr	r2, [pc, #480]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fd fda4 	bl	8001740 <HAL_GetTick>
 8003bf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bfc:	f7fd fda0 	bl	8001740 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e260      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c0e:	4b70      	ldr	r3, [pc, #448]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c1a:	4b6d      	ldr	r3, [pc, #436]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	061b      	lsls	r3, r3, #24
 8003c28:	4969      	ldr	r1, [pc, #420]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60cb      	str	r3, [r1, #12]
 8003c2e:	e018      	b.n	8003c62 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c30:	4b67      	ldr	r3, [pc, #412]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a66      	ldr	r2, [pc, #408]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003c36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fd fd80 	bl	8001740 <HAL_GetTick>
 8003c40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c44:	f7fd fd7c 	bl	8001740 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e23c      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c56:	4b5e      	ldr	r3, [pc, #376]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d036      	beq.n	8003cdc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d019      	beq.n	8003caa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c76:	4b56      	ldr	r3, [pc, #344]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c7a:	4a55      	ldr	r2, [pc, #340]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c82:	f7fd fd5d 	bl	8001740 <HAL_GetTick>
 8003c86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c8a:	f7fd fd59 	bl	8001740 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e219      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x35e>
 8003ca8:	e018      	b.n	8003cdc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003caa:	4b49      	ldr	r3, [pc, #292]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cae:	4a48      	ldr	r2, [pc, #288]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb6:	f7fd fd43 	bl	8001740 <HAL_GetTick>
 8003cba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cbe:	f7fd fd3f 	bl	8001740 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e1ff      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d036      	beq.n	8003d56 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d019      	beq.n	8003d24 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cf0:	4b37      	ldr	r3, [pc, #220]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a36      	ldr	r2, [pc, #216]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003cf6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cfa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cfc:	f7fd fd20 	bl	8001740 <HAL_GetTick>
 8003d00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d04:	f7fd fd1c 	bl	8001740 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e1dc      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d16:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0x3d8>
 8003d22:	e018      	b.n	8003d56 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d24:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a29      	ldr	r2, [pc, #164]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003d2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d30:	f7fd fd06 	bl	8001740 <HAL_GetTick>
 8003d34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d38:	f7fd fd02 	bl	8001740 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e1c2      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d4a:	4b21      	ldr	r3, [pc, #132]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 8086 	beq.w	8003e70 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d64:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a8>)
 8003d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d70:	f7fd fce6 	bl	8001740 <HAL_GetTick>
 8003d74:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d78:	f7fd fce2 	bl	8001740 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	@ 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1a2      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d8a:	4b12      	ldr	r3, [pc, #72]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d106      	bne.n	8003dac <HAL_RCC_OscConfig+0x480>
 8003d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da2:	4a0b      	ldr	r2, [pc, #44]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003daa:	e032      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e6>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d111      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x4ac>
 8003db4:	4b06      	ldr	r3, [pc, #24]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db8:	4a05      	ldr	r2, [pc, #20]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc0:	4b03      	ldr	r3, [pc, #12]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc4:	4a02      	ldr	r2, [pc, #8]	@ (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003dc6:	f023 0304 	bic.w	r3, r3, #4
 8003dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dcc:	e021      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e6>
 8003dce:	bf00      	nop
 8003dd0:	58024400 	.word	0x58024400
 8003dd4:	58024800 	.word	0x58024800
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b05      	cmp	r3, #5
 8003dde:	d10c      	bne.n	8003dfa <HAL_RCC_OscConfig+0x4ce>
 8003de0:	4b83      	ldr	r3, [pc, #524]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de4:	4a82      	ldr	r2, [pc, #520]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003de6:	f043 0304 	orr.w	r3, r3, #4
 8003dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dec:	4b80      	ldr	r3, [pc, #512]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df0:	4a7f      	ldr	r2, [pc, #508]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df8:	e00b      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e6>
 8003dfa:	4b7d      	ldr	r3, [pc, #500]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfe:	4a7c      	ldr	r2, [pc, #496]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e06:	4b7a      	ldr	r3, [pc, #488]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0a:	4a79      	ldr	r2, [pc, #484]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003e0c:	f023 0304 	bic.w	r3, r3, #4
 8003e10:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d015      	beq.n	8003e46 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1a:	f7fd fc91 	bl	8001740 <HAL_GetTick>
 8003e1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e20:	e00a      	b.n	8003e38 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e22:	f7fd fc8d 	bl	8001740 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e14b      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e38:	4b6d      	ldr	r3, [pc, #436]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0ee      	beq.n	8003e22 <HAL_RCC_OscConfig+0x4f6>
 8003e44:	e014      	b.n	8003e70 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e46:	f7fd fc7b 	bl	8001740 <HAL_GetTick>
 8003e4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e4c:	e00a      	b.n	8003e64 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7fd fc77 	bl	8001740 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e135      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e64:	4b62      	ldr	r3, [pc, #392]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1ee      	bne.n	8003e4e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 812a 	beq.w	80040ce <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e7a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e82:	2b18      	cmp	r3, #24
 8003e84:	f000 80ba 	beq.w	8003ffc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	f040 8095 	bne.w	8003fbc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e92:	4b57      	ldr	r3, [pc, #348]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a56      	ldr	r2, [pc, #344]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003e98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9e:	f7fd fc4f 	bl	8001740 <HAL_GetTick>
 8003ea2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea6:	f7fd fc4b 	bl	8001740 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e10b      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003eb8:	4b4d      	ldr	r3, [pc, #308]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f0      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003ec6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ec8:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c8>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003ed4:	0112      	lsls	r2, r2, #4
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	4945      	ldr	r1, [pc, #276]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eec:	3b01      	subs	r3, #1
 8003eee:	025b      	lsls	r3, r3, #9
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	041b      	lsls	r3, r3, #16
 8003efc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f06:	3b01      	subs	r3, #1
 8003f08:	061b      	lsls	r3, r3, #24
 8003f0a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f0e:	4938      	ldr	r1, [pc, #224]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f14:	4b36      	ldr	r3, [pc, #216]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f18:	4a35      	ldr	r2, [pc, #212]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f20:	4b33      	ldr	r3, [pc, #204]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f24:	4b34      	ldr	r3, [pc, #208]	@ (8003ff8 <HAL_RCC_OscConfig+0x6cc>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f2c:	00d2      	lsls	r2, r2, #3
 8003f2e:	4930      	ldr	r1, [pc, #192]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f34:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f38:	f023 020c 	bic.w	r2, r3, #12
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f40:	492b      	ldr	r1, [pc, #172]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f46:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4a:	f023 0202 	bic.w	r2, r3, #2
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f52:	4927      	ldr	r1, [pc, #156]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f58:	4b25      	ldr	r3, [pc, #148]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5c:	4a24      	ldr	r2, [pc, #144]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f64:	4b22      	ldr	r3, [pc, #136]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f68:	4a21      	ldr	r2, [pc, #132]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f70:	4b1f      	ldr	r3, [pc, #124]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f74:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f80:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f88:	4b19      	ldr	r3, [pc, #100]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a18      	ldr	r2, [pc, #96]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fd fbd4 	bl	8001740 <HAL_GetTick>
 8003f98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fd fbd0 	bl	8001740 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e090      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fae:	4b10      	ldr	r3, [pc, #64]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0x670>
 8003fba:	e088      	b.n	80040ce <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003fc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc8:	f7fd fbba 	bl	8001740 <HAL_GetTick>
 8003fcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fd fbb6 	bl	8001740 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e076      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fe2:	4b03      	ldr	r3, [pc, #12]	@ (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x6a4>
 8003fee:	e06e      	b.n	80040ce <HAL_RCC_OscConfig+0x7a2>
 8003ff0:	58024400 	.word	0x58024400
 8003ff4:	fffffc0c 	.word	0xfffffc0c
 8003ff8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ffc:	4b36      	ldr	r3, [pc, #216]	@ (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004000:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004002:	4b35      	ldr	r3, [pc, #212]	@ (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004006:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400c:	2b01      	cmp	r3, #1
 800400e:	d031      	beq.n	8004074 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f003 0203 	and.w	r2, r3, #3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d12a      	bne.n	8004074 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402a:	429a      	cmp	r2, r3
 800402c:	d122      	bne.n	8004074 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004038:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800403a:	429a      	cmp	r2, r3
 800403c:	d11a      	bne.n	8004074 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	0a5b      	lsrs	r3, r3, #9
 8004042:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d111      	bne.n	8004074 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	0c1b      	lsrs	r3, r3, #16
 8004054:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d108      	bne.n	8004074 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	0e1b      	lsrs	r3, r3, #24
 8004066:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e02b      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004078:	4b17      	ldr	r3, [pc, #92]	@ (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 800407a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800407c:	08db      	lsrs	r3, r3, #3
 800407e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004082:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	429a      	cmp	r2, r3
 800408c:	d01f      	beq.n	80040ce <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800408e:	4b12      	ldr	r3, [pc, #72]	@ (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 8004090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004092:	4a11      	ldr	r2, [pc, #68]	@ (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 8004094:	f023 0301 	bic.w	r3, r3, #1
 8004098:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800409a:	f7fd fb51 	bl	8001740 <HAL_GetTick>
 800409e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80040a0:	bf00      	nop
 80040a2:	f7fd fb4d 	bl	8001740 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d0f9      	beq.n	80040a2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040ae:	4b0a      	ldr	r3, [pc, #40]	@ (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 80040b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040b2:	4b0a      	ldr	r3, [pc, #40]	@ (80040dc <HAL_RCC_OscConfig+0x7b0>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80040ba:	00d2      	lsls	r2, r2, #3
 80040bc:	4906      	ldr	r1, [pc, #24]	@ (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80040c2:	4b05      	ldr	r3, [pc, #20]	@ (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 80040c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c6:	4a04      	ldr	r2, [pc, #16]	@ (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3730      	adds	r7, #48	@ 0x30
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	58024400 	.word	0x58024400
 80040dc:	ffff0007 	.word	0xffff0007

080040e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e19c      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f4:	4b8a      	ldr	r3, [pc, #552]	@ (8004320 <HAL_RCC_ClockConfig+0x240>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d910      	bls.n	8004124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004102:	4b87      	ldr	r3, [pc, #540]	@ (8004320 <HAL_RCC_ClockConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 020f 	bic.w	r2, r3, #15
 800410a:	4985      	ldr	r1, [pc, #532]	@ (8004320 <HAL_RCC_ClockConfig+0x240>)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	4313      	orrs	r3, r2
 8004110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004112:	4b83      	ldr	r3, [pc, #524]	@ (8004320 <HAL_RCC_ClockConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e184      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d010      	beq.n	8004152 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	4b7b      	ldr	r3, [pc, #492]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800413c:	429a      	cmp	r2, r3
 800413e:	d908      	bls.n	8004152 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004140:	4b78      	ldr	r3, [pc, #480]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	4975      	ldr	r1, [pc, #468]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 800414e:	4313      	orrs	r3, r2
 8004150:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d010      	beq.n	8004180 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	4b70      	ldr	r3, [pc, #448]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800416a:	429a      	cmp	r2, r3
 800416c:	d908      	bls.n	8004180 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800416e:	4b6d      	ldr	r3, [pc, #436]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	496a      	ldr	r1, [pc, #424]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 800417c:	4313      	orrs	r3, r2
 800417e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	d010      	beq.n	80041ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699a      	ldr	r2, [r3, #24]
 8004190:	4b64      	ldr	r3, [pc, #400]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004198:	429a      	cmp	r2, r3
 800419a:	d908      	bls.n	80041ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800419c:	4b61      	ldr	r3, [pc, #388]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	495e      	ldr	r1, [pc, #376]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d010      	beq.n	80041dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69da      	ldr	r2, [r3, #28]
 80041be:	4b59      	ldr	r3, [pc, #356]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d908      	bls.n	80041dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041ca:	4b56      	ldr	r3, [pc, #344]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	4953      	ldr	r1, [pc, #332]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d010      	beq.n	800420a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	4b4d      	ldr	r3, [pc, #308]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d908      	bls.n	800420a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f8:	4b4a      	ldr	r3, [pc, #296]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	f023 020f 	bic.w	r2, r3, #15
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4947      	ldr	r1, [pc, #284]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004206:	4313      	orrs	r3, r2
 8004208:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d055      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004216:	4b43      	ldr	r3, [pc, #268]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	4940      	ldr	r1, [pc, #256]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004224:	4313      	orrs	r3, r2
 8004226:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d107      	bne.n	8004240 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004230:	4b3c      	ldr	r3, [pc, #240]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d121      	bne.n	8004280 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0f6      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d107      	bne.n	8004258 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004248:	4b36      	ldr	r3, [pc, #216]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d115      	bne.n	8004280 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0ea      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d107      	bne.n	8004270 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004260:	4b30      	ldr	r3, [pc, #192]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0de      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004270:	4b2c      	ldr	r3, [pc, #176]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0d6      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004280:	4b28      	ldr	r3, [pc, #160]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f023 0207 	bic.w	r2, r3, #7
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4925      	ldr	r1, [pc, #148]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 800428e:	4313      	orrs	r3, r2
 8004290:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004292:	f7fd fa55 	bl	8001740 <HAL_GetTick>
 8004296:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004298:	e00a      	b.n	80042b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429a:	f7fd fa51 	bl	8001740 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e0be      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	429a      	cmp	r2, r3
 80042c0:	d1eb      	bne.n	800429a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d010      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	4b14      	ldr	r3, [pc, #80]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	429a      	cmp	r2, r3
 80042dc:	d208      	bcs.n	80042f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042de:	4b11      	ldr	r3, [pc, #68]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f023 020f 	bic.w	r2, r3, #15
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	490e      	ldr	r1, [pc, #56]	@ (8004324 <HAL_RCC_ClockConfig+0x244>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004320 <HAL_RCC_ClockConfig+0x240>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d214      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	4b08      	ldr	r3, [pc, #32]	@ (8004320 <HAL_RCC_ClockConfig+0x240>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 020f 	bic.w	r2, r3, #15
 8004306:	4906      	ldr	r1, [pc, #24]	@ (8004320 <HAL_RCC_ClockConfig+0x240>)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800430e:	4b04      	ldr	r3, [pc, #16]	@ (8004320 <HAL_RCC_ClockConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e086      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
 8004320:	52002000 	.word	0x52002000
 8004324:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d010      	beq.n	8004356 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	4b3f      	ldr	r3, [pc, #252]	@ (8004438 <HAL_RCC_ClockConfig+0x358>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004340:	429a      	cmp	r2, r3
 8004342:	d208      	bcs.n	8004356 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004344:	4b3c      	ldr	r3, [pc, #240]	@ (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	4939      	ldr	r1, [pc, #228]	@ (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004352:	4313      	orrs	r3, r2
 8004354:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d010      	beq.n	8004384 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695a      	ldr	r2, [r3, #20]
 8004366:	4b34      	ldr	r3, [pc, #208]	@ (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800436e:	429a      	cmp	r2, r3
 8004370:	d208      	bcs.n	8004384 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004372:	4b31      	ldr	r3, [pc, #196]	@ (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	492e      	ldr	r1, [pc, #184]	@ (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004380:	4313      	orrs	r3, r2
 8004382:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b00      	cmp	r3, #0
 800438e:	d010      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699a      	ldr	r2, [r3, #24]
 8004394:	4b28      	ldr	r3, [pc, #160]	@ (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800439c:	429a      	cmp	r2, r3
 800439e:	d208      	bcs.n	80043b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043a0:	4b25      	ldr	r3, [pc, #148]	@ (8004438 <HAL_RCC_ClockConfig+0x358>)
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	4922      	ldr	r1, [pc, #136]	@ (8004438 <HAL_RCC_ClockConfig+0x358>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d010      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69da      	ldr	r2, [r3, #28]
 80043c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004438 <HAL_RCC_ClockConfig+0x358>)
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d208      	bcs.n	80043e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004438 <HAL_RCC_ClockConfig+0x358>)
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	4917      	ldr	r1, [pc, #92]	@ (8004438 <HAL_RCC_ClockConfig+0x358>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043e0:	f000 f834 	bl	800444c <HAL_RCC_GetSysClockFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b14      	ldr	r3, [pc, #80]	@ (8004438 <HAL_RCC_ClockConfig+0x358>)
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	0a1b      	lsrs	r3, r3, #8
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	4912      	ldr	r1, [pc, #72]	@ (800443c <HAL_RCC_ClockConfig+0x35c>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
 80043fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	4a0d      	ldr	r2, [pc, #52]	@ (800443c <HAL_RCC_ClockConfig+0x35c>)
 8004408:	5cd3      	ldrb	r3, [r2, r3]
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
 8004414:	4a0a      	ldr	r2, [pc, #40]	@ (8004440 <HAL_RCC_ClockConfig+0x360>)
 8004416:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004418:	4a0a      	ldr	r2, [pc, #40]	@ (8004444 <HAL_RCC_ClockConfig+0x364>)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800441e:	4b0a      	ldr	r3, [pc, #40]	@ (8004448 <HAL_RCC_ClockConfig+0x368>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fc fe2e 	bl	8001084 <HAL_InitTick>
 8004428:	4603      	mov	r3, r0
 800442a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800442c:	7bfb      	ldrb	r3, [r7, #15]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	58024400 	.word	0x58024400
 800443c:	0801a0c8 	.word	0x0801a0c8
 8004440:	24000004 	.word	0x24000004
 8004444:	24000000 	.word	0x24000000
 8004448:	24000008 	.word	0x24000008

0800444c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800444c:	b480      	push	{r7}
 800444e:	b089      	sub	sp, #36	@ 0x24
 8004450:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004452:	4bb3      	ldr	r3, [pc, #716]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800445a:	2b18      	cmp	r3, #24
 800445c:	f200 8155 	bhi.w	800470a <HAL_RCC_GetSysClockFreq+0x2be>
 8004460:	a201      	add	r2, pc, #4	@ (adr r2, 8004468 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	080044cd 	.word	0x080044cd
 800446c:	0800470b 	.word	0x0800470b
 8004470:	0800470b 	.word	0x0800470b
 8004474:	0800470b 	.word	0x0800470b
 8004478:	0800470b 	.word	0x0800470b
 800447c:	0800470b 	.word	0x0800470b
 8004480:	0800470b 	.word	0x0800470b
 8004484:	0800470b 	.word	0x0800470b
 8004488:	080044f3 	.word	0x080044f3
 800448c:	0800470b 	.word	0x0800470b
 8004490:	0800470b 	.word	0x0800470b
 8004494:	0800470b 	.word	0x0800470b
 8004498:	0800470b 	.word	0x0800470b
 800449c:	0800470b 	.word	0x0800470b
 80044a0:	0800470b 	.word	0x0800470b
 80044a4:	0800470b 	.word	0x0800470b
 80044a8:	080044f9 	.word	0x080044f9
 80044ac:	0800470b 	.word	0x0800470b
 80044b0:	0800470b 	.word	0x0800470b
 80044b4:	0800470b 	.word	0x0800470b
 80044b8:	0800470b 	.word	0x0800470b
 80044bc:	0800470b 	.word	0x0800470b
 80044c0:	0800470b 	.word	0x0800470b
 80044c4:	0800470b 	.word	0x0800470b
 80044c8:	080044ff 	.word	0x080044ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044cc:	4b94      	ldr	r3, [pc, #592]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d009      	beq.n	80044ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044d8:	4b91      	ldr	r3, [pc, #580]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	08db      	lsrs	r3, r3, #3
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	4a90      	ldr	r2, [pc, #576]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044e4:	fa22 f303 	lsr.w	r3, r2, r3
 80044e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80044ea:	e111      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044ec:	4b8d      	ldr	r3, [pc, #564]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044ee:	61bb      	str	r3, [r7, #24]
      break;
 80044f0:	e10e      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80044f2:	4b8d      	ldr	r3, [pc, #564]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044f4:	61bb      	str	r3, [r7, #24]
      break;
 80044f6:	e10b      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80044f8:	4b8c      	ldr	r3, [pc, #560]	@ (800472c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80044fa:	61bb      	str	r3, [r7, #24]
      break;
 80044fc:	e108      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044fe:	4b88      	ldr	r3, [pc, #544]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004508:	4b85      	ldr	r3, [pc, #532]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800450a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004512:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004514:	4b82      	ldr	r3, [pc, #520]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800451e:	4b80      	ldr	r3, [pc, #512]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004522:	08db      	lsrs	r3, r3, #3
 8004524:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	fb02 f303 	mul.w	r3, r2, r3
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004536:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 80e1 	beq.w	8004704 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b02      	cmp	r3, #2
 8004546:	f000 8083 	beq.w	8004650 <HAL_RCC_GetSysClockFreq+0x204>
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b02      	cmp	r3, #2
 800454e:	f200 80a1 	bhi.w	8004694 <HAL_RCC_GetSysClockFreq+0x248>
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_RCC_GetSysClockFreq+0x114>
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d056      	beq.n	800460c <HAL_RCC_GetSysClockFreq+0x1c0>
 800455e:	e099      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004560:	4b6f      	ldr	r3, [pc, #444]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d02d      	beq.n	80045c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800456c:	4b6c      	ldr	r3, [pc, #432]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	08db      	lsrs	r3, r3, #3
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	4a6b      	ldr	r2, [pc, #428]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
 800457c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	ee07 3a90 	vmov	s15, r3
 8004584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004596:	4b62      	ldr	r3, [pc, #392]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80045c6:	e087      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004734 <HAL_RCC_GetSysClockFreq+0x2e8>
 80045d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045da:	4b51      	ldr	r3, [pc, #324]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004606:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800460a:	e065      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004738 <HAL_RCC_GetSysClockFreq+0x2ec>
 800461a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461e:	4b40      	ldr	r3, [pc, #256]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004632:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004730 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800464e:	e043      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800473c <HAL_RCC_GetSysClockFreq+0x2f0>
 800465e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004662:	4b2f      	ldr	r3, [pc, #188]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004672:	ed97 6a02 	vldr	s12, [r7, #8]
 8004676:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004730 <HAL_RCC_GetSysClockFreq+0x2e4>
 800467a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004692:	e021      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004738 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80046d8:	4b11      	ldr	r3, [pc, #68]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046dc:	0a5b      	lsrs	r3, r3, #9
 80046de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046e2:	3301      	adds	r3, #1
 80046e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	ee07 3a90 	vmov	s15, r3
 80046ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80046f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046fc:	ee17 3a90 	vmov	r3, s15
 8004700:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004702:	e005      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	61bb      	str	r3, [r7, #24]
      break;
 8004708:	e002      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800470a:	4b07      	ldr	r3, [pc, #28]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800470c:	61bb      	str	r3, [r7, #24]
      break;
 800470e:	bf00      	nop
  }

  return sysclockfreq;
 8004710:	69bb      	ldr	r3, [r7, #24]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3724      	adds	r7, #36	@ 0x24
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	58024400 	.word	0x58024400
 8004724:	03d09000 	.word	0x03d09000
 8004728:	003d0900 	.word	0x003d0900
 800472c:	017d7840 	.word	0x017d7840
 8004730:	46000000 	.word	0x46000000
 8004734:	4c742400 	.word	0x4c742400
 8004738:	4a742400 	.word	0x4a742400
 800473c:	4bbebc20 	.word	0x4bbebc20

08004740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004746:	f7ff fe81 	bl	800444c <HAL_RCC_GetSysClockFreq>
 800474a:	4602      	mov	r2, r0
 800474c:	4b10      	ldr	r3, [pc, #64]	@ (8004790 <HAL_RCC_GetHCLKFreq+0x50>)
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	0a1b      	lsrs	r3, r3, #8
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	490f      	ldr	r1, [pc, #60]	@ (8004794 <HAL_RCC_GetHCLKFreq+0x54>)
 8004758:	5ccb      	ldrb	r3, [r1, r3]
 800475a:	f003 031f 	and.w	r3, r3, #31
 800475e:	fa22 f303 	lsr.w	r3, r2, r3
 8004762:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004764:	4b0a      	ldr	r3, [pc, #40]	@ (8004790 <HAL_RCC_GetHCLKFreq+0x50>)
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	4a09      	ldr	r2, [pc, #36]	@ (8004794 <HAL_RCC_GetHCLKFreq+0x54>)
 800476e:	5cd3      	ldrb	r3, [r2, r3]
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	fa22 f303 	lsr.w	r3, r2, r3
 800477a:	4a07      	ldr	r2, [pc, #28]	@ (8004798 <HAL_RCC_GetHCLKFreq+0x58>)
 800477c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800477e:	4a07      	ldr	r2, [pc, #28]	@ (800479c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004784:	4b04      	ldr	r3, [pc, #16]	@ (8004798 <HAL_RCC_GetHCLKFreq+0x58>)
 8004786:	681b      	ldr	r3, [r3, #0]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	58024400 	.word	0x58024400
 8004794:	0801a0c8 	.word	0x0801a0c8
 8004798:	24000004 	.word	0x24000004
 800479c:	24000000 	.word	0x24000000

080047a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047a4:	f7ff ffcc 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 80047a8:	4602      	mov	r2, r0
 80047aa:	4b06      	ldr	r3, [pc, #24]	@ (80047c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	091b      	lsrs	r3, r3, #4
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	4904      	ldr	r1, [pc, #16]	@ (80047c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047b6:	5ccb      	ldrb	r3, [r1, r3]
 80047b8:	f003 031f 	and.w	r3, r3, #31
 80047bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	58024400 	.word	0x58024400
 80047c8:	0801a0c8 	.word	0x0801a0c8

080047cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	223f      	movs	r2, #63	@ 0x3f
 80047da:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004848 <HAL_RCC_GetClockConfig+0x7c>)
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	f003 0207 	and.w	r2, r3, #7
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80047e8:	4b17      	ldr	r3, [pc, #92]	@ (8004848 <HAL_RCC_GetClockConfig+0x7c>)
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80047f4:	4b14      	ldr	r3, [pc, #80]	@ (8004848 <HAL_RCC_GetClockConfig+0x7c>)
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	f003 020f 	and.w	r2, r3, #15
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004800:	4b11      	ldr	r3, [pc, #68]	@ (8004848 <HAL_RCC_GetClockConfig+0x7c>)
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800480c:	4b0e      	ldr	r3, [pc, #56]	@ (8004848 <HAL_RCC_GetClockConfig+0x7c>)
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004818:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <HAL_RCC_GetClockConfig+0x7c>)
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004824:	4b08      	ldr	r3, [pc, #32]	@ (8004848 <HAL_RCC_GetClockConfig+0x7c>)
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004830:	4b06      	ldr	r3, [pc, #24]	@ (800484c <HAL_RCC_GetClockConfig+0x80>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 020f 	and.w	r2, r3, #15
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	601a      	str	r2, [r3, #0]
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	58024400 	.word	0x58024400
 800484c:	52002000 	.word	0x52002000

08004850 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004854:	b0c6      	sub	sp, #280	@ 0x118
 8004856:	af00      	add	r7, sp, #0
 8004858:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800485c:	2300      	movs	r3, #0
 800485e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004862:	2300      	movs	r3, #0
 8004864:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004874:	2500      	movs	r5, #0
 8004876:	ea54 0305 	orrs.w	r3, r4, r5
 800487a:	d049      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800487c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004880:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004882:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004886:	d02f      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004888:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800488c:	d828      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800488e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004892:	d01a      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004894:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004898:	d822      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800489e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048a2:	d007      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048a4:	e01c      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a6:	4bab      	ldr	r3, [pc, #684]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048aa:	4aaa      	ldr	r2, [pc, #680]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048b2:	e01a      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b8:	3308      	adds	r3, #8
 80048ba:	2102      	movs	r1, #2
 80048bc:	4618      	mov	r0, r3
 80048be:	f001 f967 	bl	8005b90 <RCCEx_PLL2_Config>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048c8:	e00f      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ce:	3328      	adds	r3, #40	@ 0x28
 80048d0:	2102      	movs	r1, #2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f001 fa0e 	bl	8005cf4 <RCCEx_PLL3_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048de:	e004      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80048e6:	e000      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80048e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048f2:	4b98      	ldr	r3, [pc, #608]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80048fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004900:	4a94      	ldr	r2, [pc, #592]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004902:	430b      	orrs	r3, r1
 8004904:	6513      	str	r3, [r2, #80]	@ 0x50
 8004906:	e003      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004908:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800490c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800491c:	f04f 0900 	mov.w	r9, #0
 8004920:	ea58 0309 	orrs.w	r3, r8, r9
 8004924:	d047      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800492a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492c:	2b04      	cmp	r3, #4
 800492e:	d82a      	bhi.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004930:	a201      	add	r2, pc, #4	@ (adr r2, 8004938 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004936:	bf00      	nop
 8004938:	0800494d 	.word	0x0800494d
 800493c:	0800495b 	.word	0x0800495b
 8004940:	08004971 	.word	0x08004971
 8004944:	0800498f 	.word	0x0800498f
 8004948:	0800498f 	.word	0x0800498f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800494c:	4b81      	ldr	r3, [pc, #516]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800494e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004950:	4a80      	ldr	r2, [pc, #512]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004956:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004958:	e01a      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800495a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800495e:	3308      	adds	r3, #8
 8004960:	2100      	movs	r1, #0
 8004962:	4618      	mov	r0, r3
 8004964:	f001 f914 	bl	8005b90 <RCCEx_PLL2_Config>
 8004968:	4603      	mov	r3, r0
 800496a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800496e:	e00f      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004974:	3328      	adds	r3, #40	@ 0x28
 8004976:	2100      	movs	r1, #0
 8004978:	4618      	mov	r0, r3
 800497a:	f001 f9bb 	bl	8005cf4 <RCCEx_PLL3_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004984:	e004      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800498c:	e000      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800498e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004990:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004998:	4b6e      	ldr	r3, [pc, #440]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800499a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800499c:	f023 0107 	bic.w	r1, r3, #7
 80049a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a6:	4a6b      	ldr	r2, [pc, #428]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049a8:	430b      	orrs	r3, r1
 80049aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80049ac:	e003      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80049b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80049c2:	f04f 0b00 	mov.w	fp, #0
 80049c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80049ca:	d05b      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80049cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049d4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80049d8:	d03b      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80049da:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80049de:	d834      	bhi.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049e4:	d037      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80049e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049ea:	d82e      	bhi.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80049f0:	d033      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80049f2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80049f6:	d828      	bhi.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049fc:	d01a      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80049fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a02:	d822      	bhi.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004a08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a0c:	d007      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004a0e:	e01c      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a10:	4b50      	ldr	r3, [pc, #320]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a14:	4a4f      	ldr	r2, [pc, #316]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a1c:	e01e      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a22:	3308      	adds	r3, #8
 8004a24:	2100      	movs	r1, #0
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 f8b2 	bl	8005b90 <RCCEx_PLL2_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a32:	e013      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a38:	3328      	adds	r3, #40	@ 0x28
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f001 f959 	bl	8005cf4 <RCCEx_PLL3_Config>
 8004a42:	4603      	mov	r3, r0
 8004a44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a48:	e008      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a50:	e004      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004a52:	bf00      	nop
 8004a54:	e002      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004a56:	bf00      	nop
 8004a58:	e000      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10b      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a64:	4b3b      	ldr	r3, [pc, #236]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a68:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a74:	4a37      	ldr	r2, [pc, #220]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a76:	430b      	orrs	r3, r1
 8004a78:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a7a:	e003      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004a90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004a94:	2300      	movs	r3, #0
 8004a96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004a9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	d05d      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aa8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004aac:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004ab0:	d03b      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004ab2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004ab6:	d834      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ab8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004abc:	d037      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004abe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ac2:	d82e      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ac4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ac8:	d033      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004aca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ace:	d828      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ad0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ad4:	d01a      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004ad6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ada:	d822      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004ae0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ae4:	d007      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004ae6:	e01c      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aec:	4a19      	ldr	r2, [pc, #100]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004af2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004af4:	e01e      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004afa:	3308      	adds	r3, #8
 8004afc:	2100      	movs	r1, #0
 8004afe:	4618      	mov	r0, r3
 8004b00:	f001 f846 	bl	8005b90 <RCCEx_PLL2_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b0a:	e013      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b10:	3328      	adds	r3, #40	@ 0x28
 8004b12:	2100      	movs	r1, #0
 8004b14:	4618      	mov	r0, r3
 8004b16:	f001 f8ed 	bl	8005cf4 <RCCEx_PLL3_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b20:	e008      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b28:	e004      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004b2a:	bf00      	nop
 8004b2c:	e002      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004b2e:	bf00      	nop
 8004b30:	e000      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10d      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b3c:	4b05      	ldr	r3, [pc, #20]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b40:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b4c:	4a01      	ldr	r2, [pc, #4]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b52:	e005      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004b54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b68:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004b6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004b70:	2300      	movs	r3, #0
 8004b72:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004b76:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	d03a      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b86:	2b30      	cmp	r3, #48	@ 0x30
 8004b88:	d01f      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004b8a:	2b30      	cmp	r3, #48	@ 0x30
 8004b8c:	d819      	bhi.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d00c      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	d815      	bhi.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d019      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004b9a:	2b10      	cmp	r3, #16
 8004b9c:	d111      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b9e:	4baa      	ldr	r3, [pc, #680]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba2:	4aa9      	ldr	r2, [pc, #676]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ba8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004baa:	e011      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	2102      	movs	r1, #2
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 ffeb 	bl	8005b90 <RCCEx_PLL2_Config>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004bc0:	e006      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bc8:	e002      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004bca:	bf00      	nop
 8004bcc:	e000      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004bd8:	4b9b      	ldr	r3, [pc, #620]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bdc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004be6:	4a98      	ldr	r2, [pc, #608]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004be8:	430b      	orrs	r3, r1
 8004bea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bec:	e003      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bf2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004c02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c06:	2300      	movs	r3, #0
 8004c08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004c0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004c10:	460b      	mov	r3, r1
 8004c12:	4313      	orrs	r3, r2
 8004c14:	d051      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c20:	d035      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004c22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c26:	d82e      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004c28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c2c:	d031      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004c2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c32:	d828      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004c34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c38:	d01a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004c3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c3e:	d822      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c48:	d007      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004c4a:	e01c      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c4c:	4b7e      	ldr	r3, [pc, #504]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	4a7d      	ldr	r2, [pc, #500]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c58:	e01c      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c5e:	3308      	adds	r3, #8
 8004c60:	2100      	movs	r1, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 ff94 	bl	8005b90 <RCCEx_PLL2_Config>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c6e:	e011      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c74:	3328      	adds	r3, #40	@ 0x28
 8004c76:	2100      	movs	r1, #0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f001 f83b 	bl	8005cf4 <RCCEx_PLL3_Config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c84:	e006      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c8c:	e002      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004c8e:	bf00      	nop
 8004c90:	e000      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10a      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ca0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004caa:	4a67      	ldr	r2, [pc, #412]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cb0:	e003      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004cc6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cd0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	d053      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ce0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ce4:	d033      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004ce6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cea:	d82c      	bhi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004cec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cf0:	d02f      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004cf2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cf6:	d826      	bhi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004cf8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cfc:	d02b      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004cfe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d02:	d820      	bhi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d08:	d012      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004d0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d0e:	d81a      	bhi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d022      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d18:	d115      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d1e:	3308      	adds	r3, #8
 8004d20:	2101      	movs	r1, #1
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 ff34 	bl	8005b90 <RCCEx_PLL2_Config>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d2e:	e015      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d34:	3328      	adds	r3, #40	@ 0x28
 8004d36:	2101      	movs	r1, #1
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 ffdb 	bl	8005cf4 <RCCEx_PLL3_Config>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d44:	e00a      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d4c:	e006      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d4e:	bf00      	nop
 8004d50:	e004      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d52:	bf00      	nop
 8004d54:	e002      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d56:	bf00      	nop
 8004d58:	e000      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10a      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d64:	4b38      	ldr	r3, [pc, #224]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d68:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d72:	4a35      	ldr	r2, [pc, #212]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d74:	430b      	orrs	r3, r1
 8004d76:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d78:	e003      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004d8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d92:	2300      	movs	r3, #0
 8004d94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004d98:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	d058      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004da6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dae:	d033      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004db4:	d82c      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dba:	d02f      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc0:	d826      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004dc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004dc6:	d02b      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004dc8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004dcc:	d820      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004dce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dd2:	d012      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004dd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dd8:	d81a      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d022      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004dde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004de2:	d115      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de8:	3308      	adds	r3, #8
 8004dea:	2101      	movs	r1, #1
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fecf 	bl	8005b90 <RCCEx_PLL2_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004df8:	e015      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dfe:	3328      	adds	r3, #40	@ 0x28
 8004e00:	2101      	movs	r1, #1
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 ff76 	bl	8005cf4 <RCCEx_PLL3_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e0e:	e00a      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e16:	e006      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e18:	bf00      	nop
 8004e1a:	e004      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e1c:	bf00      	nop
 8004e1e:	e002      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e20:	bf00      	nop
 8004e22:	e000      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10e      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e2e:	4b06      	ldr	r3, [pc, #24]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e32:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e3e:	4a02      	ldr	r2, [pc, #8]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e40:	430b      	orrs	r3, r1
 8004e42:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e44:	e006      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004e46:	bf00      	nop
 8004e48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e64:	2300      	movs	r3, #0
 8004e66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004e6a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4313      	orrs	r3, r2
 8004e72:	d037      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e7e:	d00e      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e84:	d816      	bhi.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d018      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004e8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e8e:	d111      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e90:	4bc4      	ldr	r3, [pc, #784]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e94:	4ac3      	ldr	r2, [pc, #780]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e9c:	e00f      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fe72 	bl	8005b90 <RCCEx_PLL2_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004eb2:	e004      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004eba:	e000      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ebe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ec6:	4bb7      	ldr	r3, [pc, #732]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ed4:	4ab3      	ldr	r2, [pc, #716]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	6513      	str	r3, [r2, #80]	@ 0x50
 8004eda:	e003      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004edc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ee0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004ef0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004efa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004efe:	460b      	mov	r3, r1
 8004f00:	4313      	orrs	r3, r2
 8004f02:	d039      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d81c      	bhi.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f14:	08004f51 	.word	0x08004f51
 8004f18:	08004f25 	.word	0x08004f25
 8004f1c:	08004f33 	.word	0x08004f33
 8004f20:	08004f51 	.word	0x08004f51
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f24:	4b9f      	ldr	r3, [pc, #636]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f28:	4a9e      	ldr	r2, [pc, #632]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f30:	e00f      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f36:	3308      	adds	r3, #8
 8004f38:	2102      	movs	r1, #2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fe28 	bl	8005b90 <RCCEx_PLL2_Config>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f46:	e004      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f4e:	e000      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f5a:	4b92      	ldr	r3, [pc, #584]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f5e:	f023 0103 	bic.w	r1, r3, #3
 8004f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f68:	4a8e      	ldr	r2, [pc, #568]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f6a:	430b      	orrs	r3, r1
 8004f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f6e:	e003      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f80:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004f84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f000 8099 	beq.w	80050cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f9a:	4b83      	ldr	r3, [pc, #524]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a82      	ldr	r2, [pc, #520]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fa4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fa6:	f7fc fbcb 	bl	8001740 <HAL_GetTick>
 8004faa:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fae:	e00b      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb0:	f7fc fbc6 	bl	8001740 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b64      	cmp	r3, #100	@ 0x64
 8004fbe:	d903      	bls.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004fc6:	e005      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fc8:	4b77      	ldr	r3, [pc, #476]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0ed      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d173      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004fdc:	4b71      	ldr	r3, [pc, #452]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004fe8:	4053      	eors	r3, r2
 8004fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d015      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ff2:	4b6c      	ldr	r3, [pc, #432]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ffa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ffe:	4b69      	ldr	r3, [pc, #420]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005002:	4a68      	ldr	r2, [pc, #416]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005008:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800500a:	4b66      	ldr	r3, [pc, #408]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500e:	4a65      	ldr	r2, [pc, #404]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005010:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005014:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005016:	4a63      	ldr	r2, [pc, #396]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005018:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800501c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800501e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005022:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800502a:	d118      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502c:	f7fc fb88 	bl	8001740 <HAL_GetTick>
 8005030:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005034:	e00d      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005036:	f7fc fb83 	bl	8001740 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005040:	1ad2      	subs	r2, r2, r3
 8005042:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005046:	429a      	cmp	r2, r3
 8005048:	d903      	bls.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005050:	e005      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005052:	4b54      	ldr	r3, [pc, #336]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0eb      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800505e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005062:	2b00      	cmp	r3, #0
 8005064:	d129      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800506a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800506e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005072:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005076:	d10e      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005078:	4b4a      	ldr	r3, [pc, #296]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005084:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005088:	091a      	lsrs	r2, r3, #4
 800508a:	4b48      	ldr	r3, [pc, #288]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800508c:	4013      	ands	r3, r2
 800508e:	4a45      	ldr	r2, [pc, #276]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005090:	430b      	orrs	r3, r1
 8005092:	6113      	str	r3, [r2, #16]
 8005094:	e005      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005096:	4b43      	ldr	r3, [pc, #268]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	4a42      	ldr	r2, [pc, #264]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800509c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80050a0:	6113      	str	r3, [r2, #16]
 80050a2:	4b40      	ldr	r3, [pc, #256]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050a4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80050a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050b2:	4a3c      	ldr	r2, [pc, #240]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050b8:	e008      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80050c2:	e003      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d4:	f002 0301 	and.w	r3, r2, #1
 80050d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050dc:	2300      	movs	r3, #0
 80050de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80050e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80050e6:	460b      	mov	r3, r1
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f000 808f 	beq.w	800520c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80050ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050f4:	2b28      	cmp	r3, #40	@ 0x28
 80050f6:	d871      	bhi.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80050f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005100 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80050fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fe:	bf00      	nop
 8005100:	080051e5 	.word	0x080051e5
 8005104:	080051dd 	.word	0x080051dd
 8005108:	080051dd 	.word	0x080051dd
 800510c:	080051dd 	.word	0x080051dd
 8005110:	080051dd 	.word	0x080051dd
 8005114:	080051dd 	.word	0x080051dd
 8005118:	080051dd 	.word	0x080051dd
 800511c:	080051dd 	.word	0x080051dd
 8005120:	080051b1 	.word	0x080051b1
 8005124:	080051dd 	.word	0x080051dd
 8005128:	080051dd 	.word	0x080051dd
 800512c:	080051dd 	.word	0x080051dd
 8005130:	080051dd 	.word	0x080051dd
 8005134:	080051dd 	.word	0x080051dd
 8005138:	080051dd 	.word	0x080051dd
 800513c:	080051dd 	.word	0x080051dd
 8005140:	080051c7 	.word	0x080051c7
 8005144:	080051dd 	.word	0x080051dd
 8005148:	080051dd 	.word	0x080051dd
 800514c:	080051dd 	.word	0x080051dd
 8005150:	080051dd 	.word	0x080051dd
 8005154:	080051dd 	.word	0x080051dd
 8005158:	080051dd 	.word	0x080051dd
 800515c:	080051dd 	.word	0x080051dd
 8005160:	080051e5 	.word	0x080051e5
 8005164:	080051dd 	.word	0x080051dd
 8005168:	080051dd 	.word	0x080051dd
 800516c:	080051dd 	.word	0x080051dd
 8005170:	080051dd 	.word	0x080051dd
 8005174:	080051dd 	.word	0x080051dd
 8005178:	080051dd 	.word	0x080051dd
 800517c:	080051dd 	.word	0x080051dd
 8005180:	080051e5 	.word	0x080051e5
 8005184:	080051dd 	.word	0x080051dd
 8005188:	080051dd 	.word	0x080051dd
 800518c:	080051dd 	.word	0x080051dd
 8005190:	080051dd 	.word	0x080051dd
 8005194:	080051dd 	.word	0x080051dd
 8005198:	080051dd 	.word	0x080051dd
 800519c:	080051dd 	.word	0x080051dd
 80051a0:	080051e5 	.word	0x080051e5
 80051a4:	58024400 	.word	0x58024400
 80051a8:	58024800 	.word	0x58024800
 80051ac:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b4:	3308      	adds	r3, #8
 80051b6:	2101      	movs	r1, #1
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fce9 	bl	8005b90 <RCCEx_PLL2_Config>
 80051be:	4603      	mov	r3, r0
 80051c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051c4:	e00f      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ca:	3328      	adds	r3, #40	@ 0x28
 80051cc:	2101      	movs	r1, #1
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fd90 	bl	8005cf4 <RCCEx_PLL3_Config>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051da:	e004      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051e2:	e000      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80051e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10a      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80051ee:	4bbf      	ldr	r3, [pc, #764]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80051f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051fc:	4abb      	ldr	r2, [pc, #748]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051fe:	430b      	orrs	r3, r1
 8005200:	6553      	str	r3, [r2, #84]	@ 0x54
 8005202:	e003      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005204:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005208:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800520c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f002 0302 	and.w	r3, r2, #2
 8005218:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800521c:	2300      	movs	r3, #0
 800521e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005222:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005226:	460b      	mov	r3, r1
 8005228:	4313      	orrs	r3, r2
 800522a:	d041      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800522c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005232:	2b05      	cmp	r3, #5
 8005234:	d824      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005236:	a201      	add	r2, pc, #4	@ (adr r2, 800523c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523c:	08005289 	.word	0x08005289
 8005240:	08005255 	.word	0x08005255
 8005244:	0800526b 	.word	0x0800526b
 8005248:	08005289 	.word	0x08005289
 800524c:	08005289 	.word	0x08005289
 8005250:	08005289 	.word	0x08005289
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005258:	3308      	adds	r3, #8
 800525a:	2101      	movs	r1, #1
 800525c:	4618      	mov	r0, r3
 800525e:	f000 fc97 	bl	8005b90 <RCCEx_PLL2_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005268:	e00f      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800526a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800526e:	3328      	adds	r3, #40	@ 0x28
 8005270:	2101      	movs	r1, #1
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fd3e 	bl	8005cf4 <RCCEx_PLL3_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800527e:	e004      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005286:	e000      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800528a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005292:	4b96      	ldr	r3, [pc, #600]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005296:	f023 0107 	bic.w	r1, r3, #7
 800529a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052a0:	4a92      	ldr	r2, [pc, #584]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80052a2:	430b      	orrs	r3, r1
 80052a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80052a6:	e003      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f002 0304 	and.w	r3, r2, #4
 80052bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052c0:	2300      	movs	r3, #0
 80052c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052ca:	460b      	mov	r3, r1
 80052cc:	4313      	orrs	r3, r2
 80052ce:	d044      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80052d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d8:	2b05      	cmp	r3, #5
 80052da:	d825      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80052dc:	a201      	add	r2, pc, #4	@ (adr r2, 80052e4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80052de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e2:	bf00      	nop
 80052e4:	08005331 	.word	0x08005331
 80052e8:	080052fd 	.word	0x080052fd
 80052ec:	08005313 	.word	0x08005313
 80052f0:	08005331 	.word	0x08005331
 80052f4:	08005331 	.word	0x08005331
 80052f8:	08005331 	.word	0x08005331
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005300:	3308      	adds	r3, #8
 8005302:	2101      	movs	r1, #1
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fc43 	bl	8005b90 <RCCEx_PLL2_Config>
 800530a:	4603      	mov	r3, r0
 800530c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005310:	e00f      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005316:	3328      	adds	r3, #40	@ 0x28
 8005318:	2101      	movs	r1, #1
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fcea 	bl	8005cf4 <RCCEx_PLL3_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005326:	e004      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800532e:	e000      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005332:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10b      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800533a:	4b6c      	ldr	r3, [pc, #432]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800533c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533e:	f023 0107 	bic.w	r1, r3, #7
 8005342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800534a:	4a68      	ldr	r2, [pc, #416]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800534c:	430b      	orrs	r3, r1
 800534e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005350:	e003      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005352:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005356:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800535a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	f002 0320 	and.w	r3, r2, #32
 8005366:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800536a:	2300      	movs	r3, #0
 800536c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005370:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005374:	460b      	mov	r3, r1
 8005376:	4313      	orrs	r3, r2
 8005378:	d055      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800537a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800537e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005382:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005386:	d033      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005388:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800538c:	d82c      	bhi.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800538e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005392:	d02f      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005398:	d826      	bhi.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800539a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800539e:	d02b      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80053a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053a4:	d820      	bhi.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80053a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053aa:	d012      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80053ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053b0:	d81a      	bhi.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d022      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80053b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053ba:	d115      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c0:	3308      	adds	r3, #8
 80053c2:	2100      	movs	r1, #0
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fbe3 	bl	8005b90 <RCCEx_PLL2_Config>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053d0:	e015      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d6:	3328      	adds	r3, #40	@ 0x28
 80053d8:	2102      	movs	r1, #2
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fc8a 	bl	8005cf4 <RCCEx_PLL3_Config>
 80053e0:	4603      	mov	r3, r0
 80053e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053e6:	e00a      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053ee:	e006      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80053f0:	bf00      	nop
 80053f2:	e004      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80053f4:	bf00      	nop
 80053f6:	e002      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80053f8:	bf00      	nop
 80053fa:	e000      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80053fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10b      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005406:	4b39      	ldr	r3, [pc, #228]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800540e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005412:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005416:	4a35      	ldr	r2, [pc, #212]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005418:	430b      	orrs	r3, r1
 800541a:	6553      	str	r3, [r2, #84]	@ 0x54
 800541c:	e003      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005422:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005432:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005436:	2300      	movs	r3, #0
 8005438:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800543c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005440:	460b      	mov	r3, r1
 8005442:	4313      	orrs	r3, r2
 8005444:	d058      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800544a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800544e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005452:	d033      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005454:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005458:	d82c      	bhi.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800545a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800545e:	d02f      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005460:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005464:	d826      	bhi.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005466:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800546a:	d02b      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800546c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005470:	d820      	bhi.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005472:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005476:	d012      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005478:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800547c:	d81a      	bhi.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d022      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005486:	d115      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800548c:	3308      	adds	r3, #8
 800548e:	2100      	movs	r1, #0
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fb7d 	bl	8005b90 <RCCEx_PLL2_Config>
 8005496:	4603      	mov	r3, r0
 8005498:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800549c:	e015      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800549e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a2:	3328      	adds	r3, #40	@ 0x28
 80054a4:	2102      	movs	r1, #2
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fc24 	bl	8005cf4 <RCCEx_PLL3_Config>
 80054ac:	4603      	mov	r3, r0
 80054ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80054b2:	e00a      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054ba:	e006      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80054bc:	bf00      	nop
 80054be:	e004      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80054c0:	bf00      	nop
 80054c2:	e002      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80054c4:	bf00      	nop
 80054c6:	e000      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80054c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10e      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054d2:	4b06      	ldr	r3, [pc, #24]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80054da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054e2:	4a02      	ldr	r2, [pc, #8]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054e4:	430b      	orrs	r3, r1
 80054e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80054e8:	e006      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80054ea:	bf00      	nop
 80054ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005504:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005508:	2300      	movs	r3, #0
 800550a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800550e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005512:	460b      	mov	r3, r1
 8005514:	4313      	orrs	r3, r2
 8005516:	d055      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800551c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005520:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005524:	d033      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005526:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800552a:	d82c      	bhi.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800552c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005530:	d02f      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005532:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005536:	d826      	bhi.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005538:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800553c:	d02b      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800553e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005542:	d820      	bhi.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005548:	d012      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800554a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800554e:	d81a      	bhi.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005550:	2b00      	cmp	r3, #0
 8005552:	d022      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005554:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005558:	d115      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800555a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800555e:	3308      	adds	r3, #8
 8005560:	2100      	movs	r1, #0
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fb14 	bl	8005b90 <RCCEx_PLL2_Config>
 8005568:	4603      	mov	r3, r0
 800556a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800556e:	e015      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005574:	3328      	adds	r3, #40	@ 0x28
 8005576:	2102      	movs	r1, #2
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fbbb 	bl	8005cf4 <RCCEx_PLL3_Config>
 800557e:	4603      	mov	r3, r0
 8005580:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005584:	e00a      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800558c:	e006      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800558e:	bf00      	nop
 8005590:	e004      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005592:	bf00      	nop
 8005594:	e002      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005596:	bf00      	nop
 8005598:	e000      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800559a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800559c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10b      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80055a4:	4ba0      	ldr	r3, [pc, #640]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80055ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055b4:	4a9c      	ldr	r2, [pc, #624]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055b6:	430b      	orrs	r3, r1
 80055b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80055ba:	e003      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80055c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	f002 0308 	and.w	r3, r2, #8
 80055d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055d4:	2300      	movs	r3, #0
 80055d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80055da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80055de:	460b      	mov	r3, r1
 80055e0:	4313      	orrs	r3, r2
 80055e2:	d01e      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80055e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f0:	d10c      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f6:	3328      	adds	r3, #40	@ 0x28
 80055f8:	2102      	movs	r1, #2
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fb7a 	bl	8005cf4 <RCCEx_PLL3_Config>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800560c:	4b86      	ldr	r3, [pc, #536]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800560e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005610:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800561c:	4a82      	ldr	r2, [pc, #520]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800561e:	430b      	orrs	r3, r1
 8005620:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	f002 0310 	and.w	r3, r2, #16
 800562e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005632:	2300      	movs	r3, #0
 8005634:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005638:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800563c:	460b      	mov	r3, r1
 800563e:	4313      	orrs	r3, r2
 8005640:	d01e      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005646:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800564a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800564e:	d10c      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005654:	3328      	adds	r3, #40	@ 0x28
 8005656:	2102      	movs	r1, #2
 8005658:	4618      	mov	r0, r3
 800565a:	f000 fb4b 	bl	8005cf4 <RCCEx_PLL3_Config>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800566a:	4b6f      	ldr	r3, [pc, #444]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800566c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800566e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800567a:	4a6b      	ldr	r2, [pc, #428]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800567c:	430b      	orrs	r3, r1
 800567e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005688:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800568c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800568e:	2300      	movs	r3, #0
 8005690:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005692:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005696:	460b      	mov	r3, r1
 8005698:	4313      	orrs	r3, r2
 800569a:	d03e      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800569c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056a8:	d022      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80056aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056ae:	d81b      	bhi.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80056b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b8:	d00b      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80056ba:	e015      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c0:	3308      	adds	r3, #8
 80056c2:	2100      	movs	r1, #0
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fa63 	bl	8005b90 <RCCEx_PLL2_Config>
 80056ca:	4603      	mov	r3, r0
 80056cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056d0:	e00f      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d6:	3328      	adds	r3, #40	@ 0x28
 80056d8:	2102      	movs	r1, #2
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fb0a 	bl	8005cf4 <RCCEx_PLL3_Config>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056e6:	e004      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056ee:	e000      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80056f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10b      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056fa:	4b4b      	ldr	r3, [pc, #300]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056fe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005706:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800570a:	4a47      	ldr	r2, [pc, #284]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800570c:	430b      	orrs	r3, r1
 800570e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005710:	e003      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005712:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005716:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800571a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005726:	673b      	str	r3, [r7, #112]	@ 0x70
 8005728:	2300      	movs	r3, #0
 800572a:	677b      	str	r3, [r7, #116]	@ 0x74
 800572c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005730:	460b      	mov	r3, r1
 8005732:	4313      	orrs	r3, r2
 8005734:	d03b      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800573a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800573e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005742:	d01f      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005744:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005748:	d818      	bhi.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800574a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800574e:	d003      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005750:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005754:	d007      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005756:	e011      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005758:	4b33      	ldr	r3, [pc, #204]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800575a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575c:	4a32      	ldr	r2, [pc, #200]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800575e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005762:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005764:	e00f      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800576a:	3328      	adds	r3, #40	@ 0x28
 800576c:	2101      	movs	r1, #1
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fac0 	bl	8005cf4 <RCCEx_PLL3_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800577a:	e004      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005782:	e000      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005786:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10b      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800578e:	4b26      	ldr	r3, [pc, #152]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005792:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800579a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800579e:	4a22      	ldr	r2, [pc, #136]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057a0:	430b      	orrs	r3, r1
 80057a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80057a4:	e003      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80057ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80057ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057bc:	2300      	movs	r3, #0
 80057be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057c0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80057c4:	460b      	mov	r3, r1
 80057c6:	4313      	orrs	r3, r2
 80057c8:	d034      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80057ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80057d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d8:	d007      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80057da:	e011      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057dc:	4b12      	ldr	r3, [pc, #72]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e0:	4a11      	ldr	r2, [pc, #68]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057e8:	e00e      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ee:	3308      	adds	r3, #8
 80057f0:	2102      	movs	r1, #2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 f9cc 	bl	8005b90 <RCCEx_PLL2_Config>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057fe:	e003      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005808:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10d      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005810:	4b05      	ldr	r3, [pc, #20]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005814:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800581c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800581e:	4a02      	ldr	r2, [pc, #8]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005820:	430b      	orrs	r3, r1
 8005822:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005824:	e006      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005826:	bf00      	nop
 8005828:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005830:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005840:	663b      	str	r3, [r7, #96]	@ 0x60
 8005842:	2300      	movs	r3, #0
 8005844:	667b      	str	r3, [r7, #100]	@ 0x64
 8005846:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800584a:	460b      	mov	r3, r1
 800584c:	4313      	orrs	r3, r2
 800584e:	d00c      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005854:	3328      	adds	r3, #40	@ 0x28
 8005856:	2102      	movs	r1, #2
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fa4b 	bl	8005cf4 <RCCEx_PLL3_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800586a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005876:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005878:	2300      	movs	r3, #0
 800587a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800587c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005880:	460b      	mov	r3, r1
 8005882:	4313      	orrs	r3, r2
 8005884:	d036      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800588a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800588c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005890:	d018      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005892:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005896:	d811      	bhi.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005898:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800589c:	d014      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800589e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058a2:	d80b      	bhi.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d011      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80058a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ac:	d106      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ae:	4bb7      	ldr	r3, [pc, #732]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b2:	4ab6      	ldr	r2, [pc, #728]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80058ba:	e008      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058c2:	e004      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80058c4:	bf00      	nop
 80058c6:	e002      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80058c8:	bf00      	nop
 80058ca:	e000      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80058cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10a      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058d6:	4bad      	ldr	r3, [pc, #692]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058e4:	4aa9      	ldr	r2, [pc, #676]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058e6:	430b      	orrs	r3, r1
 80058e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80058ea:	e003      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005900:	653b      	str	r3, [r7, #80]	@ 0x50
 8005902:	2300      	movs	r3, #0
 8005904:	657b      	str	r3, [r7, #84]	@ 0x54
 8005906:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800590a:	460b      	mov	r3, r1
 800590c:	4313      	orrs	r3, r2
 800590e:	d009      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005910:	4b9e      	ldr	r3, [pc, #632]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005914:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800591e:	4a9b      	ldr	r2, [pc, #620]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005920:	430b      	orrs	r3, r1
 8005922:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005930:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005932:	2300      	movs	r3, #0
 8005934:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005936:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800593a:	460b      	mov	r3, r1
 800593c:	4313      	orrs	r3, r2
 800593e:	d009      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005940:	4b92      	ldr	r3, [pc, #584]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005944:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800594e:	4a8f      	ldr	r2, [pc, #572]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005950:	430b      	orrs	r3, r1
 8005952:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005960:	643b      	str	r3, [r7, #64]	@ 0x40
 8005962:	2300      	movs	r3, #0
 8005964:	647b      	str	r3, [r7, #68]	@ 0x44
 8005966:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800596a:	460b      	mov	r3, r1
 800596c:	4313      	orrs	r3, r2
 800596e:	d00e      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005970:	4b86      	ldr	r3, [pc, #536]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	4a85      	ldr	r2, [pc, #532]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005976:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800597a:	6113      	str	r3, [r2, #16]
 800597c:	4b83      	ldr	r3, [pc, #524]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800597e:	6919      	ldr	r1, [r3, #16]
 8005980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005984:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005988:	4a80      	ldr	r2, [pc, #512]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800598a:	430b      	orrs	r3, r1
 800598c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800598e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800599a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800599c:	2300      	movs	r3, #0
 800599e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059a0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80059a4:	460b      	mov	r3, r1
 80059a6:	4313      	orrs	r3, r2
 80059a8:	d009      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80059aa:	4b78      	ldr	r3, [pc, #480]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80059b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b8:	4a74      	ldr	r2, [pc, #464]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059ba:	430b      	orrs	r3, r1
 80059bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80059ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80059cc:	2300      	movs	r3, #0
 80059ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80059d0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80059d4:	460b      	mov	r3, r1
 80059d6:	4313      	orrs	r3, r2
 80059d8:	d00a      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059da:	4b6c      	ldr	r3, [pc, #432]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059de:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80059e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ea:	4a68      	ldr	r2, [pc, #416]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059ec:	430b      	orrs	r3, r1
 80059ee:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80059f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f8:	2100      	movs	r1, #0
 80059fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a02:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005a06:	460b      	mov	r3, r1
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	d011      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a10:	3308      	adds	r3, #8
 8005a12:	2100      	movs	r1, #0
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 f8bb 	bl	8005b90 <RCCEx_PLL2_Config>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005a20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	2100      	movs	r1, #0
 8005a3a:	6239      	str	r1, [r7, #32]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a46:	460b      	mov	r3, r1
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	d011      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a50:	3308      	adds	r3, #8
 8005a52:	2101      	movs	r1, #1
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 f89b 	bl	8005b90 <RCCEx_PLL2_Config>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005a60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a78:	2100      	movs	r1, #0
 8005a7a:	61b9      	str	r1, [r7, #24]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	61fb      	str	r3, [r7, #28]
 8005a82:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a86:	460b      	mov	r3, r1
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	d011      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a90:	3308      	adds	r3, #8
 8005a92:	2102      	movs	r1, #2
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 f87b 	bl	8005b90 <RCCEx_PLL2_Config>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005aac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	2100      	movs	r1, #0
 8005aba:	6139      	str	r1, [r7, #16]
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	d011      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad0:	3328      	adds	r3, #40	@ 0x28
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 f90d 	bl	8005cf4 <RCCEx_PLL3_Config>
 8005ada:	4603      	mov	r3, r0
 8005adc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005ae0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005aec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af8:	2100      	movs	r1, #0
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b06:	460b      	mov	r3, r1
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	d011      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b10:	3328      	adds	r3, #40	@ 0x28
 8005b12:	2101      	movs	r1, #1
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 f8ed 	bl	8005cf4 <RCCEx_PLL3_Config>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005b20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b38:	2100      	movs	r1, #0
 8005b3a:	6039      	str	r1, [r7, #0]
 8005b3c:	f003 0320 	and.w	r3, r3, #32
 8005b40:	607b      	str	r3, [r7, #4]
 8005b42:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b46:	460b      	mov	r3, r1
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	d011      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b50:	3328      	adds	r3, #40	@ 0x28
 8005b52:	2102      	movs	r1, #2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 f8cd 	bl	8005cf4 <RCCEx_PLL3_Config>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005b60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005b70:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e000      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005b84:	46bd      	mov	sp, r7
 8005b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b8a:	bf00      	nop
 8005b8c:	58024400 	.word	0x58024400

08005b90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b9e:	4b53      	ldr	r3, [pc, #332]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	d101      	bne.n	8005bae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e099      	b.n	8005ce2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005bae:	4b4f      	ldr	r3, [pc, #316]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a4e      	ldr	r2, [pc, #312]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005bb4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005bb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bba:	f7fb fdc1 	bl	8001740 <HAL_GetTick>
 8005bbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bc0:	e008      	b.n	8005bd4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005bc2:	f7fb fdbd 	bl	8001740 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d901      	bls.n	8005bd4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e086      	b.n	8005ce2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bd4:	4b45      	ldr	r3, [pc, #276]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1f0      	bne.n	8005bc2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005be0:	4b42      	ldr	r3, [pc, #264]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	031b      	lsls	r3, r3, #12
 8005bee:	493f      	ldr	r1, [pc, #252]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	628b      	str	r3, [r1, #40]	@ 0x28
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	025b      	lsls	r3, r3, #9
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	041b      	lsls	r3, r3, #16
 8005c12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	061b      	lsls	r3, r3, #24
 8005c20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005c24:	4931      	ldr	r1, [pc, #196]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005c2a:	4b30      	ldr	r3, [pc, #192]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	492d      	ldr	r1, [pc, #180]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c40:	f023 0220 	bic.w	r2, r3, #32
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	4928      	ldr	r1, [pc, #160]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005c4e:	4b27      	ldr	r3, [pc, #156]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c52:	4a26      	ldr	r2, [pc, #152]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005c54:	f023 0310 	bic.w	r3, r3, #16
 8005c58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005c5a:	4b24      	ldr	r3, [pc, #144]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005c5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c5e:	4b24      	ldr	r3, [pc, #144]	@ (8005cf0 <RCCEx_PLL2_Config+0x160>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	69d2      	ldr	r2, [r2, #28]
 8005c66:	00d2      	lsls	r2, r2, #3
 8005c68:	4920      	ldr	r1, [pc, #128]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c72:	4a1e      	ldr	r2, [pc, #120]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005c74:	f043 0310 	orr.w	r3, r3, #16
 8005c78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d106      	bne.n	8005c8e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005c80:	4b1a      	ldr	r3, [pc, #104]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c84:	4a19      	ldr	r2, [pc, #100]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005c86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005c8c:	e00f      	b.n	8005cae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d106      	bne.n	8005ca2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005c94:	4b15      	ldr	r3, [pc, #84]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c98:	4a14      	ldr	r2, [pc, #80]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005c9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005ca0:	e005      	b.n	8005cae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005ca2:	4b12      	ldr	r3, [pc, #72]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca6:	4a11      	ldr	r2, [pc, #68]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005ca8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005cac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005cae:	4b0f      	ldr	r3, [pc, #60]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005cb4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cba:	f7fb fd41 	bl	8001740 <HAL_GetTick>
 8005cbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cc0:	e008      	b.n	8005cd4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005cc2:	f7fb fd3d 	bl	8001740 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e006      	b.n	8005ce2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cd4:	4b05      	ldr	r3, [pc, #20]	@ (8005cec <RCCEx_PLL2_Config+0x15c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0f0      	beq.n	8005cc2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	58024400 	.word	0x58024400
 8005cf0:	ffff0007 	.word	0xffff0007

08005cf4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d02:	4b53      	ldr	r3, [pc, #332]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d101      	bne.n	8005d12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e099      	b.n	8005e46 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005d12:	4b4f      	ldr	r3, [pc, #316]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a4e      	ldr	r2, [pc, #312]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005d18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d1e:	f7fb fd0f 	bl	8001740 <HAL_GetTick>
 8005d22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d24:	e008      	b.n	8005d38 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d26:	f7fb fd0b 	bl	8001740 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e086      	b.n	8005e46 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d38:	4b45      	ldr	r3, [pc, #276]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1f0      	bne.n	8005d26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005d44:	4b42      	ldr	r3, [pc, #264]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d48:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	051b      	lsls	r3, r3, #20
 8005d52:	493f      	ldr	r1, [pc, #252]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	628b      	str	r3, [r1, #40]	@ 0x28
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	025b      	lsls	r3, r3, #9
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	3b01      	subs	r3, #1
 8005d74:	041b      	lsls	r3, r3, #16
 8005d76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	061b      	lsls	r3, r3, #24
 8005d84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005d88:	4931      	ldr	r1, [pc, #196]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005d8e:	4b30      	ldr	r3, [pc, #192]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	492d      	ldr	r1, [pc, #180]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005da0:	4b2b      	ldr	r3, [pc, #172]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	4928      	ldr	r1, [pc, #160]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005db2:	4b27      	ldr	r3, [pc, #156]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db6:	4a26      	ldr	r2, [pc, #152]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005db8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005dbe:	4b24      	ldr	r3, [pc, #144]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005dc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dc2:	4b24      	ldr	r3, [pc, #144]	@ (8005e54 <RCCEx_PLL3_Config+0x160>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	69d2      	ldr	r2, [r2, #28]
 8005dca:	00d2      	lsls	r2, r2, #3
 8005dcc:	4920      	ldr	r1, [pc, #128]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ddc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d106      	bne.n	8005df2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005de4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de8:	4a19      	ldr	r2, [pc, #100]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005dea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005dee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005df0:	e00f      	b.n	8005e12 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d106      	bne.n	8005e06 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005df8:	4b15      	ldr	r3, [pc, #84]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfc:	4a14      	ldr	r2, [pc, #80]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005dfe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005e04:	e005      	b.n	8005e12 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005e06:	4b12      	ldr	r3, [pc, #72]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0a:	4a11      	ldr	r2, [pc, #68]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005e0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e10:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005e12:	4b0f      	ldr	r3, [pc, #60]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a0e      	ldr	r2, [pc, #56]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e1e:	f7fb fc8f 	bl	8001740 <HAL_GetTick>
 8005e22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e24:	e008      	b.n	8005e38 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e26:	f7fb fc8b 	bl	8001740 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e006      	b.n	8005e46 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e38:	4b05      	ldr	r3, [pc, #20]	@ (8005e50 <RCCEx_PLL3_Config+0x15c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0f0      	beq.n	8005e26 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	58024400 	.word	0x58024400
 8005e54:	ffff0007 	.word	0xffff0007

08005e58 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e10f      	b.n	800608a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a87      	ldr	r2, [pc, #540]	@ (8006094 <HAL_SPI_Init+0x23c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00f      	beq.n	8005e9a <HAL_SPI_Init+0x42>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a86      	ldr	r2, [pc, #536]	@ (8006098 <HAL_SPI_Init+0x240>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00a      	beq.n	8005e9a <HAL_SPI_Init+0x42>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a84      	ldr	r2, [pc, #528]	@ (800609c <HAL_SPI_Init+0x244>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d005      	beq.n	8005e9a <HAL_SPI_Init+0x42>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	2b0f      	cmp	r3, #15
 8005e94:	d901      	bls.n	8005e9a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e0f7      	b.n	800608a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fef6 	bl	8006c8c <SPI_GetPacketSize>
 8005ea0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a7b      	ldr	r2, [pc, #492]	@ (8006094 <HAL_SPI_Init+0x23c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00c      	beq.n	8005ec6 <HAL_SPI_Init+0x6e>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a79      	ldr	r2, [pc, #484]	@ (8006098 <HAL_SPI_Init+0x240>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d007      	beq.n	8005ec6 <HAL_SPI_Init+0x6e>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a78      	ldr	r2, [pc, #480]	@ (800609c <HAL_SPI_Init+0x244>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d002      	beq.n	8005ec6 <HAL_SPI_Init+0x6e>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d811      	bhi.n	8005eea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005eca:	4a72      	ldr	r2, [pc, #456]	@ (8006094 <HAL_SPI_Init+0x23c>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d009      	beq.n	8005ee4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a70      	ldr	r2, [pc, #448]	@ (8006098 <HAL_SPI_Init+0x240>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d004      	beq.n	8005ee4 <HAL_SPI_Init+0x8c>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a6f      	ldr	r2, [pc, #444]	@ (800609c <HAL_SPI_Init+0x244>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d104      	bne.n	8005eee <HAL_SPI_Init+0x96>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b10      	cmp	r3, #16
 8005ee8:	d901      	bls.n	8005eee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e0cd      	b.n	800608a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fb f856 	bl	8000fb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0201 	bic.w	r2, r2, #1
 8005f1e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005f2a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f34:	d119      	bne.n	8005f6a <HAL_SPI_Init+0x112>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f3e:	d103      	bne.n	8005f48 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d008      	beq.n	8005f5a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10c      	bne.n	8005f6a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005f54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f58:	d107      	bne.n	8005f6a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f68:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00f      	beq.n	8005f96 <HAL_SPI_Init+0x13e>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	2b06      	cmp	r3, #6
 8005f7c:	d90b      	bls.n	8005f96 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	e007      	b.n	8005fa6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fa4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69da      	ldr	r2, [r3, #28]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb8:	ea42 0103 	orr.w	r1, r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	431a      	orrs	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006006:	ea42 0103 	orr.w	r1, r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d113      	bne.n	8006046 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006030:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006044:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0201 	bic.w	r2, r2, #1
 8006054:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	40013000 	.word	0x40013000
 8006098:	40003800 	.word	0x40003800
 800609c:	40003c00 	.word	0x40003c00

080060a0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b088      	sub	sp, #32
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	603b      	str	r3, [r7, #0]
 80060ac:	4613      	mov	r3, r2
 80060ae:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3320      	adds	r3, #32
 80060b6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060b8:	f7fb fb42 	bl	8001740 <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d001      	beq.n	80060ce <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80060ca:	2302      	movs	r3, #2
 80060cc:	e1d1      	b.n	8006472 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <HAL_SPI_Transmit+0x3a>
 80060d4:	88fb      	ldrh	r3, [r7, #6]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e1c9      	b.n	8006472 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_SPI_Transmit+0x4c>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e1c2      	b.n	8006472 <HAL_SPI_Transmit+0x3d2>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2203      	movs	r2, #3
 80060f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	88fa      	ldrh	r2, [r7, #6]
 800610e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	88fa      	ldrh	r2, [r7, #6]
 8006116:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006144:	d108      	bne.n	8006158 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	e009      	b.n	800616c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800616a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	4b96      	ldr	r3, [pc, #600]	@ (80063cc <HAL_SPI_Transmit+0x32c>)
 8006174:	4013      	ands	r3, r2
 8006176:	88f9      	ldrh	r1, [r7, #6]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	6812      	ldr	r2, [r2, #0]
 800617c:	430b      	orrs	r3, r1
 800617e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006198:	d107      	bne.n	80061aa <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	2b0f      	cmp	r3, #15
 80061b0:	d947      	bls.n	8006242 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80061b2:	e03f      	b.n	8006234 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d114      	bne.n	80061ec <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6812      	ldr	r2, [r2, #0]
 80061cc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061d2:	1d1a      	adds	r2, r3, #4
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061de:	b29b      	uxth	r3, r3
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80061ea:	e023      	b.n	8006234 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ec:	f7fb faa8 	bl	8001740 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d803      	bhi.n	8006204 <HAL_SPI_Transmit+0x164>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006202:	d102      	bne.n	800620a <HAL_SPI_Transmit+0x16a>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d114      	bne.n	8006234 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 fc70 	bl	8006af0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006216:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e11e      	b.n	8006472 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1b9      	bne.n	80061b4 <HAL_SPI_Transmit+0x114>
 8006240:	e0f1      	b.n	8006426 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	2b07      	cmp	r3, #7
 8006248:	f240 80e6 	bls.w	8006418 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800624c:	e05d      	b.n	800630a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b02      	cmp	r3, #2
 800625a:	d132      	bne.n	80062c2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b01      	cmp	r3, #1
 8006266:	d918      	bls.n	800629a <HAL_SPI_Transmit+0x1fa>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d014      	beq.n	800629a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6812      	ldr	r2, [r2, #0]
 800627a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006280:	1d1a      	adds	r2, r3, #4
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800628c:	b29b      	uxth	r3, r3
 800628e:	3b02      	subs	r3, #2
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006298:	e037      	b.n	800630a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800629e:	881a      	ldrh	r2, [r3, #0]
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062a8:	1c9a      	adds	r2, r3, #2
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80062c0:	e023      	b.n	800630a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062c2:	f7fb fa3d 	bl	8001740 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d803      	bhi.n	80062da <HAL_SPI_Transmit+0x23a>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d8:	d102      	bne.n	80062e0 <HAL_SPI_Transmit+0x240>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d114      	bne.n	800630a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 fc05 	bl	8006af0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e0b3      	b.n	8006472 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d19b      	bne.n	800624e <HAL_SPI_Transmit+0x1ae>
 8006316:	e086      	b.n	8006426 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b02      	cmp	r3, #2
 8006324:	d154      	bne.n	80063d0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800632c:	b29b      	uxth	r3, r3
 800632e:	2b03      	cmp	r3, #3
 8006330:	d918      	bls.n	8006364 <HAL_SPI_Transmit+0x2c4>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006336:	2b40      	cmp	r3, #64	@ 0x40
 8006338:	d914      	bls.n	8006364 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6812      	ldr	r2, [r2, #0]
 8006344:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800634a:	1d1a      	adds	r2, r3, #4
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006356:	b29b      	uxth	r3, r3
 8006358:	3b04      	subs	r3, #4
 800635a:	b29a      	uxth	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006362:	e059      	b.n	8006418 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800636a:	b29b      	uxth	r3, r3
 800636c:	2b01      	cmp	r3, #1
 800636e:	d917      	bls.n	80063a0 <HAL_SPI_Transmit+0x300>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d013      	beq.n	80063a0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800637c:	881a      	ldrh	r2, [r3, #0]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006386:	1c9a      	adds	r2, r3, #2
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006392:	b29b      	uxth	r3, r3
 8006394:	3b02      	subs	r3, #2
 8006396:	b29a      	uxth	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800639e:	e03b      	b.n	8006418 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3320      	adds	r3, #32
 80063aa:	7812      	ldrb	r2, [r2, #0]
 80063ac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80063be:	b29b      	uxth	r3, r3
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80063ca:	e025      	b.n	8006418 <HAL_SPI_Transmit+0x378>
 80063cc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063d0:	f7fb f9b6 	bl	8001740 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d803      	bhi.n	80063e8 <HAL_SPI_Transmit+0x348>
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e6:	d102      	bne.n	80063ee <HAL_SPI_Transmit+0x34e>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d114      	bne.n	8006418 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 fb7e 	bl	8006af0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e02c      	b.n	8006472 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800641e:	b29b      	uxth	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	f47f af79 	bne.w	8006318 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2200      	movs	r2, #0
 800642e:	2108      	movs	r1, #8
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 fbfd 	bl	8006c30 <SPI_WaitOnFlagUntilTimeout>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d007      	beq.n	800644c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006442:	f043 0220 	orr.w	r2, r3, #32
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 fb4f 	bl	8006af0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e000      	b.n	8006472 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006470:	2300      	movs	r3, #0
  }
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop

0800647c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08e      	sub	sp, #56	@ 0x38
 8006480:	af02      	add	r7, sp, #8
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3320      	adds	r3, #32
 8006490:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3330      	adds	r3, #48	@ 0x30
 8006498:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800649e:	095b      	lsrs	r3, r3, #5
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3301      	adds	r3, #1
 80064a4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064a6:	f7fb f94b 	bl	8001740 <HAL_GetTick>
 80064aa:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80064ac:	887b      	ldrh	r3, [r7, #2]
 80064ae:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80064b0:	887b      	ldrh	r3, [r7, #2]
 80064b2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d001      	beq.n	80064c4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80064c0:	2302      	movs	r3, #2
 80064c2:	e310      	b.n	8006ae6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d005      	beq.n	80064d6 <HAL_SPI_TransmitReceive+0x5a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <HAL_SPI_TransmitReceive+0x5a>
 80064d0:	887b      	ldrh	r3, [r7, #2]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e305      	b.n	8006ae6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d101      	bne.n	80064e8 <HAL_SPI_TransmitReceive+0x6c>
 80064e4:	2302      	movs	r3, #2
 80064e6:	e2fe      	b.n	8006ae6 <HAL_SPI_TransmitReceive+0x66a>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2205      	movs	r2, #5
 80064f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	887a      	ldrh	r2, [r7, #2]
 800650a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	887a      	ldrh	r2, [r7, #2]
 8006512:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	887a      	ldrh	r2, [r7, #2]
 8006520:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	887a      	ldrh	r2, [r7, #2]
 8006528:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8006546:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a70      	ldr	r2, [pc, #448]	@ (8006710 <HAL_SPI_TransmitReceive+0x294>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d009      	beq.n	8006566 <HAL_SPI_TransmitReceive+0xea>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a6f      	ldr	r2, [pc, #444]	@ (8006714 <HAL_SPI_TransmitReceive+0x298>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d004      	beq.n	8006566 <HAL_SPI_TransmitReceive+0xea>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a6d      	ldr	r2, [pc, #436]	@ (8006718 <HAL_SPI_TransmitReceive+0x29c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d102      	bne.n	800656c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8006566:	2310      	movs	r3, #16
 8006568:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800656a:	e001      	b.n	8006570 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800656c:	2308      	movs	r3, #8
 800656e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	4b69      	ldr	r3, [pc, #420]	@ (800671c <HAL_SPI_TransmitReceive+0x2a0>)
 8006578:	4013      	ands	r3, r2
 800657a:	8879      	ldrh	r1, [r7, #2]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	430b      	orrs	r3, r1
 8006582:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0201 	orr.w	r2, r2, #1
 8006592:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800659c:	d107      	bne.n	80065ae <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	2b0f      	cmp	r3, #15
 80065b4:	f240 80a2 	bls.w	80066fc <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80065b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ba:	089b      	lsrs	r3, r3, #2
 80065bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80065be:	e094      	b.n	80066ea <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d120      	bne.n	8006610 <HAL_SPI_TransmitReceive+0x194>
 80065ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d01d      	beq.n	8006610 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80065d4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80065d6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80065d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065da:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80065dc:	429a      	cmp	r2, r3
 80065de:	d217      	bcs.n	8006610 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6812      	ldr	r2, [r2, #0]
 80065ea:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065f0:	1d1a      	adds	r2, r3, #4
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800660e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006618:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800661a:	2b00      	cmp	r3, #0
 800661c:	d065      	beq.n	80066ea <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b01      	cmp	r3, #1
 800662a:	d118      	bne.n	800665e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006634:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006636:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800663c:	1d1a      	adds	r2, r3, #4
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006648:	b29b      	uxth	r3, r3
 800664a:	3b01      	subs	r3, #1
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800665a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800665c:	e045      	b.n	80066ea <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800665e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006660:	8bfb      	ldrh	r3, [r7, #30]
 8006662:	429a      	cmp	r2, r3
 8006664:	d21d      	bcs.n	80066a2 <HAL_SPI_TransmitReceive+0x226>
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d018      	beq.n	80066a2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006678:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800667a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006680:	1d1a      	adds	r2, r3, #4
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800669e:	853b      	strh	r3, [r7, #40]	@ 0x28
 80066a0:	e023      	b.n	80066ea <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066a2:	f7fb f84d 	bl	8001740 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d803      	bhi.n	80066ba <HAL_SPI_TransmitReceive+0x23e>
 80066b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b8:	d102      	bne.n	80066c0 <HAL_SPI_TransmitReceive+0x244>
 80066ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d114      	bne.n	80066ea <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 fa15 	bl	8006af0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e1fd      	b.n	8006ae6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80066ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f47f af67 	bne.w	80065c0 <HAL_SPI_TransmitReceive+0x144>
 80066f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f47f af63 	bne.w	80065c0 <HAL_SPI_TransmitReceive+0x144>
 80066fa:	e1ce      	b.n	8006a9a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	2b07      	cmp	r3, #7
 8006702:	f240 81c2 	bls.w	8006a8a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8006706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006708:	085b      	lsrs	r3, r3, #1
 800670a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800670c:	e0c9      	b.n	80068a2 <HAL_SPI_TransmitReceive+0x426>
 800670e:	bf00      	nop
 8006710:	40013000 	.word	0x40013000
 8006714:	40003800 	.word	0x40003800
 8006718:	40003c00 	.word	0x40003c00
 800671c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b02      	cmp	r3, #2
 800672c:	d11f      	bne.n	800676e <HAL_SPI_TransmitReceive+0x2f2>
 800672e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01c      	beq.n	800676e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006734:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006736:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800673c:	429a      	cmp	r2, r3
 800673e:	d216      	bcs.n	800676e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006744:	881a      	ldrh	r2, [r3, #0]
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800674e:	1c9a      	adds	r2, r3, #2
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800675a:	b29b      	uxth	r3, r3
 800675c:	3b01      	subs	r3, #1
 800675e:	b29a      	uxth	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800676c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006776:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 8092 	beq.w	80068a2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b01      	cmp	r3, #1
 800678a:	d118      	bne.n	80067be <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006790:	6a3a      	ldr	r2, [r7, #32]
 8006792:	8812      	ldrh	r2, [r2, #0]
 8006794:	b292      	uxth	r2, r2
 8006796:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800679c:	1c9a      	adds	r2, r3, #2
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	3b01      	subs	r3, #1
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067ba:	853b      	strh	r3, [r7, #40]	@ 0x28
 80067bc:	e071      	b.n	80068a2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80067be:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80067c0:	8bfb      	ldrh	r3, [r7, #30]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d228      	bcs.n	8006818 <HAL_SPI_TransmitReceive+0x39c>
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d023      	beq.n	8006818 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067d4:	6a3a      	ldr	r2, [r7, #32]
 80067d6:	8812      	ldrh	r2, [r2, #0]
 80067d8:	b292      	uxth	r2, r2
 80067da:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067e0:	1c9a      	adds	r2, r3, #2
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067ea:	6a3a      	ldr	r2, [r7, #32]
 80067ec:	8812      	ldrh	r2, [r2, #0]
 80067ee:	b292      	uxth	r2, r2
 80067f0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067f6:	1c9a      	adds	r2, r3, #2
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b02      	subs	r3, #2
 8006806:	b29a      	uxth	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006814:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006816:	e044      	b.n	80068a2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006818:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800681a:	2b01      	cmp	r3, #1
 800681c:	d11d      	bne.n	800685a <HAL_SPI_TransmitReceive+0x3de>
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d018      	beq.n	800685a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800682c:	6a3a      	ldr	r2, [r7, #32]
 800682e:	8812      	ldrh	r2, [r2, #0]
 8006830:	b292      	uxth	r2, r2
 8006832:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006838:	1c9a      	adds	r2, r3, #2
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006844:	b29b      	uxth	r3, r3
 8006846:	3b01      	subs	r3, #1
 8006848:	b29a      	uxth	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006856:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006858:	e023      	b.n	80068a2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800685a:	f7fa ff71 	bl	8001740 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006866:	429a      	cmp	r2, r3
 8006868:	d803      	bhi.n	8006872 <HAL_SPI_TransmitReceive+0x3f6>
 800686a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006870:	d102      	bne.n	8006878 <HAL_SPI_TransmitReceive+0x3fc>
 8006872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006874:	2b00      	cmp	r3, #0
 8006876:	d114      	bne.n	80068a2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 f939 	bl	8006af0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006884:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e121      	b.n	8006ae6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80068a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f47f af3b 	bne.w	8006720 <HAL_SPI_TransmitReceive+0x2a4>
 80068aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f47f af37 	bne.w	8006720 <HAL_SPI_TransmitReceive+0x2a4>
 80068b2:	e0f2      	b.n	8006a9a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d121      	bne.n	8006906 <HAL_SPI_TransmitReceive+0x48a>
 80068c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01e      	beq.n	8006906 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80068c8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80068ca:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80068cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ce:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d218      	bcs.n	8006906 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3320      	adds	r3, #32
 80068de:	7812      	ldrb	r2, [r2, #0]
 80068e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006904:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800690e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 80ba 	beq.w	8006a8a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b01      	cmp	r3, #1
 8006922:	d11b      	bne.n	800695c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006930:	7812      	ldrb	r2, [r2, #0]
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006946:	b29b      	uxth	r3, r3
 8006948:	3b01      	subs	r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006958:	853b      	strh	r3, [r7, #40]	@ 0x28
 800695a:	e096      	b.n	8006a8a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800695c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800695e:	8bfb      	ldrh	r3, [r7, #30]
 8006960:	429a      	cmp	r2, r3
 8006962:	d24a      	bcs.n	80069fa <HAL_SPI_TransmitReceive+0x57e>
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d045      	beq.n	80069fa <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800697a:	7812      	ldrb	r2, [r2, #0]
 800697c:	b2d2      	uxtb	r2, r2
 800697e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006996:	7812      	ldrb	r2, [r2, #0]
 8006998:	b2d2      	uxtb	r2, r2
 800699a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069b2:	7812      	ldrb	r2, [r2, #0]
 80069b4:	b2d2      	uxtb	r2, r2
 80069b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069bc:	1c5a      	adds	r2, r3, #1
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069ce:	7812      	ldrb	r2, [r2, #0]
 80069d0:	b2d2      	uxtb	r2, r2
 80069d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b04      	subs	r3, #4
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069f6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80069f8:	e047      	b.n	8006a8a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80069fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d820      	bhi.n	8006a42 <HAL_SPI_TransmitReceive+0x5c6>
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d01b      	beq.n	8006a42 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a16:	7812      	ldrb	r2, [r2, #0]
 8006a18:	b2d2      	uxtb	r2, r2
 8006a1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a3e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006a40:	e023      	b.n	8006a8a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a42:	f7fa fe7d 	bl	8001740 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d803      	bhi.n	8006a5a <HAL_SPI_TransmitReceive+0x5de>
 8006a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a58:	d102      	bne.n	8006a60 <HAL_SPI_TransmitReceive+0x5e4>
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d114      	bne.n	8006a8a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 f845 	bl	8006af0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e02d      	b.n	8006ae6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006a8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f47f af11 	bne.w	80068b4 <HAL_SPI_TransmitReceive+0x438>
 8006a92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f47f af0d 	bne.w	80068b4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2108      	movs	r1, #8
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f8c3 	bl	8006c30 <SPI_WaitOnFlagUntilTimeout>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d007      	beq.n	8006ac0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ab6:	f043 0220 	orr.w	r2, r3, #32
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 f815 	bl	8006af0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e000      	b.n	8006ae6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
  }
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3730      	adds	r7, #48	@ 0x30
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop

08006af0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699a      	ldr	r2, [r3, #24]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f042 0208 	orr.w	r2, r2, #8
 8006b0e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	699a      	ldr	r2, [r3, #24]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f042 0210 	orr.w	r2, r2, #16
 8006b1e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0201 	bic.w	r2, r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6919      	ldr	r1, [r3, #16]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8006c2c <SPI_CloseTransfer+0x13c>)
 8006b3c:	400b      	ands	r3, r1
 8006b3e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006b4e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d014      	beq.n	8006b86 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f003 0320 	and.w	r3, r3, #32
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00f      	beq.n	8006b86 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b6c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	699a      	ldr	r2, [r3, #24]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f042 0220 	orr.w	r2, r2, #32
 8006b84:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d014      	beq.n	8006bbc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00f      	beq.n	8006bbc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ba2:	f043 0204 	orr.w	r2, r3, #4
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00f      	beq.n	8006be6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bcc:	f043 0201 	orr.w	r2, r3, #1
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	699a      	ldr	r2, [r3, #24]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006be4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00f      	beq.n	8006c10 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bf6:	f043 0208 	orr.w	r2, r3, #8
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699a      	ldr	r2, [r3, #24]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c0e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006c20:	bf00      	nop
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	fffffc90 	.word	0xfffffc90

08006c30 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	603b      	str	r3, [r7, #0]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006c40:	e010      	b.n	8006c64 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c42:	f7fa fd7d 	bl	8001740 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d803      	bhi.n	8006c5a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c58:	d102      	bne.n	8006c60 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e00f      	b.n	8006c84 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	695a      	ldr	r2, [r3, #20]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	bf0c      	ite	eq
 8006c74:	2301      	moveq	r3, #1
 8006c76:	2300      	movne	r3, #0
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d0df      	beq.n	8006c42 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c98:	095b      	lsrs	r3, r3, #5
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	3307      	adds	r3, #7
 8006caa:	08db      	lsrs	r3, r3, #3
 8006cac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	fb02 f303 	mul.w	r3, r2, r3
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b082      	sub	sp, #8
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e049      	b.n	8006d68 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d106      	bne.n	8006cee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f841 	bl	8006d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	4619      	mov	r1, r3
 8006d00:	4610      	mov	r0, r2
 8006d02:	f000 f9f5 	bl	80070f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d001      	beq.n	8006d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e05e      	b.n	8006e5a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68da      	ldr	r2, [r3, #12]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0201 	orr.w	r2, r2, #1
 8006db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a2b      	ldr	r2, [pc, #172]	@ (8006e68 <HAL_TIM_Base_Start_IT+0xe4>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d02c      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0x94>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dc6:	d027      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0x94>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a27      	ldr	r2, [pc, #156]	@ (8006e6c <HAL_TIM_Base_Start_IT+0xe8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d022      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0x94>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a26      	ldr	r2, [pc, #152]	@ (8006e70 <HAL_TIM_Base_Start_IT+0xec>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d01d      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0x94>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a24      	ldr	r2, [pc, #144]	@ (8006e74 <HAL_TIM_Base_Start_IT+0xf0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d018      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0x94>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a23      	ldr	r2, [pc, #140]	@ (8006e78 <HAL_TIM_Base_Start_IT+0xf4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d013      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0x94>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a21      	ldr	r2, [pc, #132]	@ (8006e7c <HAL_TIM_Base_Start_IT+0xf8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d00e      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0x94>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a20      	ldr	r2, [pc, #128]	@ (8006e80 <HAL_TIM_Base_Start_IT+0xfc>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d009      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0x94>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a1e      	ldr	r2, [pc, #120]	@ (8006e84 <HAL_TIM_Base_Start_IT+0x100>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d004      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0x94>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a1d      	ldr	r2, [pc, #116]	@ (8006e88 <HAL_TIM_Base_Start_IT+0x104>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d115      	bne.n	8006e44 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689a      	ldr	r2, [r3, #8]
 8006e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8006e8c <HAL_TIM_Base_Start_IT+0x108>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2b06      	cmp	r3, #6
 8006e28:	d015      	beq.n	8006e56 <HAL_TIM_Base_Start_IT+0xd2>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e30:	d011      	beq.n	8006e56 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f042 0201 	orr.w	r2, r2, #1
 8006e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e42:	e008      	b.n	8006e56 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0201 	orr.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	e000      	b.n	8006e58 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40000400 	.word	0x40000400
 8006e70:	40000800 	.word	0x40000800
 8006e74:	40000c00 	.word	0x40000c00
 8006e78:	40010400 	.word	0x40010400
 8006e7c:	40001800 	.word	0x40001800
 8006e80:	40014000 	.word	0x40014000
 8006e84:	4000e000 	.word	0x4000e000
 8006e88:	4000e400 	.word	0x4000e400
 8006e8c:	00010007 	.word	0x00010007

08006e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d020      	beq.n	8006ef4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01b      	beq.n	8006ef4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0202 	mvn.w	r2, #2
 8006ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f8e9 	bl	80070b2 <HAL_TIM_IC_CaptureCallback>
 8006ee0:	e005      	b.n	8006eee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f8db 	bl	800709e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f8ec 	bl	80070c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f003 0304 	and.w	r3, r3, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d020      	beq.n	8006f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d01b      	beq.n	8006f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f06f 0204 	mvn.w	r2, #4
 8006f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2202      	movs	r2, #2
 8006f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f8c3 	bl	80070b2 <HAL_TIM_IC_CaptureCallback>
 8006f2c:	e005      	b.n	8006f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f8b5 	bl	800709e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f8c6 	bl	80070c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f003 0308 	and.w	r3, r3, #8
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d020      	beq.n	8006f8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d01b      	beq.n	8006f8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f06f 0208 	mvn.w	r2, #8
 8006f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2204      	movs	r2, #4
 8006f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f89d 	bl	80070b2 <HAL_TIM_IC_CaptureCallback>
 8006f78:	e005      	b.n	8006f86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f88f 	bl	800709e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f8a0 	bl	80070c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f003 0310 	and.w	r3, r3, #16
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d020      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f003 0310 	and.w	r3, r3, #16
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d01b      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f06f 0210 	mvn.w	r2, #16
 8006fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2208      	movs	r2, #8
 8006fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f877 	bl	80070b2 <HAL_TIM_IC_CaptureCallback>
 8006fc4:	e005      	b.n	8006fd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f869 	bl	800709e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f87a 	bl	80070c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00c      	beq.n	8006ffc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d007      	beq.n	8006ffc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f06f 0201 	mvn.w	r2, #1
 8006ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7f9 ffa6 	bl	8000f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007002:	2b00      	cmp	r3, #0
 8007004:	d104      	bne.n	8007010 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00c      	beq.n	800702a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007016:	2b00      	cmp	r3, #0
 8007018:	d007      	beq.n	800702a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f919 	bl	800725c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00c      	beq.n	800704e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800703a:	2b00      	cmp	r3, #0
 800703c:	d007      	beq.n	800704e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f911 	bl	8007270 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00c      	beq.n	8007072 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800705e:	2b00      	cmp	r3, #0
 8007060:	d007      	beq.n	8007072 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800706a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f834 	bl	80070da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	f003 0320 	and.w	r3, r3, #32
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00c      	beq.n	8007096 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b00      	cmp	r3, #0
 8007084:	d007      	beq.n	8007096 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f06f 0220 	mvn.w	r2, #32
 800708e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f8d9 	bl	8007248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007096:	bf00      	nop
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070ce:	bf00      	nop
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070da:	b480      	push	{r7}
 80070dc:	b083      	sub	sp, #12
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070e2:	bf00      	nop
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
	...

080070f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a47      	ldr	r2, [pc, #284]	@ (8007220 <TIM_Base_SetConfig+0x130>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d013      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800710e:	d00f      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a44      	ldr	r2, [pc, #272]	@ (8007224 <TIM_Base_SetConfig+0x134>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00b      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a43      	ldr	r2, [pc, #268]	@ (8007228 <TIM_Base_SetConfig+0x138>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d007      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a42      	ldr	r2, [pc, #264]	@ (800722c <TIM_Base_SetConfig+0x13c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d003      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a41      	ldr	r2, [pc, #260]	@ (8007230 <TIM_Base_SetConfig+0x140>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d108      	bne.n	8007142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a36      	ldr	r2, [pc, #216]	@ (8007220 <TIM_Base_SetConfig+0x130>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d027      	beq.n	800719a <TIM_Base_SetConfig+0xaa>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007150:	d023      	beq.n	800719a <TIM_Base_SetConfig+0xaa>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a33      	ldr	r2, [pc, #204]	@ (8007224 <TIM_Base_SetConfig+0x134>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d01f      	beq.n	800719a <TIM_Base_SetConfig+0xaa>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a32      	ldr	r2, [pc, #200]	@ (8007228 <TIM_Base_SetConfig+0x138>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d01b      	beq.n	800719a <TIM_Base_SetConfig+0xaa>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a31      	ldr	r2, [pc, #196]	@ (800722c <TIM_Base_SetConfig+0x13c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d017      	beq.n	800719a <TIM_Base_SetConfig+0xaa>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a30      	ldr	r2, [pc, #192]	@ (8007230 <TIM_Base_SetConfig+0x140>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d013      	beq.n	800719a <TIM_Base_SetConfig+0xaa>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a2f      	ldr	r2, [pc, #188]	@ (8007234 <TIM_Base_SetConfig+0x144>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00f      	beq.n	800719a <TIM_Base_SetConfig+0xaa>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a2e      	ldr	r2, [pc, #184]	@ (8007238 <TIM_Base_SetConfig+0x148>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d00b      	beq.n	800719a <TIM_Base_SetConfig+0xaa>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a2d      	ldr	r2, [pc, #180]	@ (800723c <TIM_Base_SetConfig+0x14c>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d007      	beq.n	800719a <TIM_Base_SetConfig+0xaa>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a2c      	ldr	r2, [pc, #176]	@ (8007240 <TIM_Base_SetConfig+0x150>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d003      	beq.n	800719a <TIM_Base_SetConfig+0xaa>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a2b      	ldr	r2, [pc, #172]	@ (8007244 <TIM_Base_SetConfig+0x154>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d108      	bne.n	80071ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a14      	ldr	r2, [pc, #80]	@ (8007220 <TIM_Base_SetConfig+0x130>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d00f      	beq.n	80071f2 <TIM_Base_SetConfig+0x102>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a16      	ldr	r2, [pc, #88]	@ (8007230 <TIM_Base_SetConfig+0x140>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d00b      	beq.n	80071f2 <TIM_Base_SetConfig+0x102>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a15      	ldr	r2, [pc, #84]	@ (8007234 <TIM_Base_SetConfig+0x144>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d007      	beq.n	80071f2 <TIM_Base_SetConfig+0x102>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a14      	ldr	r2, [pc, #80]	@ (8007238 <TIM_Base_SetConfig+0x148>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d003      	beq.n	80071f2 <TIM_Base_SetConfig+0x102>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a13      	ldr	r2, [pc, #76]	@ (800723c <TIM_Base_SetConfig+0x14c>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d103      	bne.n	80071fa <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	691a      	ldr	r2, [r3, #16]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f043 0204 	orr.w	r2, r3, #4
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	601a      	str	r2, [r3, #0]
}
 8007212:	bf00      	nop
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	40010000 	.word	0x40010000
 8007224:	40000400 	.word	0x40000400
 8007228:	40000800 	.word	0x40000800
 800722c:	40000c00 	.word	0x40000c00
 8007230:	40010400 	.word	0x40010400
 8007234:	40014000 	.word	0x40014000
 8007238:	40014400 	.word	0x40014400
 800723c:	40014800 	.word	0x40014800
 8007240:	4000e000 	.word	0x4000e000
 8007244:	4000e400 	.word	0x4000e400

08007248 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800728a:	4b92      	ldr	r3, [pc, #584]	@ (80074d4 <MX_LWIP_Init+0x250>)
 800728c:	22c0      	movs	r2, #192	@ 0xc0
 800728e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007290:	4b90      	ldr	r3, [pc, #576]	@ (80074d4 <MX_LWIP_Init+0x250>)
 8007292:	22a8      	movs	r2, #168	@ 0xa8
 8007294:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 50;
 8007296:	4b8f      	ldr	r3, [pc, #572]	@ (80074d4 <MX_LWIP_Init+0x250>)
 8007298:	2232      	movs	r2, #50	@ 0x32
 800729a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800729c:	4b8d      	ldr	r3, [pc, #564]	@ (80074d4 <MX_LWIP_Init+0x250>)
 800729e:	220a      	movs	r2, #10
 80072a0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80072a2:	4b8d      	ldr	r3, [pc, #564]	@ (80074d8 <MX_LWIP_Init+0x254>)
 80072a4:	22ff      	movs	r2, #255	@ 0xff
 80072a6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80072a8:	4b8b      	ldr	r3, [pc, #556]	@ (80074d8 <MX_LWIP_Init+0x254>)
 80072aa:	22ff      	movs	r2, #255	@ 0xff
 80072ac:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80072ae:	4b8a      	ldr	r3, [pc, #552]	@ (80074d8 <MX_LWIP_Init+0x254>)
 80072b0:	22ff      	movs	r2, #255	@ 0xff
 80072b2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80072b4:	4b88      	ldr	r3, [pc, #544]	@ (80074d8 <MX_LWIP_Init+0x254>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80072ba:	4b88      	ldr	r3, [pc, #544]	@ (80074dc <MX_LWIP_Init+0x258>)
 80072bc:	2200      	movs	r2, #0
 80072be:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80072c0:	4b86      	ldr	r3, [pc, #536]	@ (80074dc <MX_LWIP_Init+0x258>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80072c6:	4b85      	ldr	r3, [pc, #532]	@ (80074dc <MX_LWIP_Init+0x258>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80072cc:	4b83      	ldr	r3, [pc, #524]	@ (80074dc <MX_LWIP_Init+0x258>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80072d2:	2100      	movs	r1, #0
 80072d4:	2000      	movs	r0, #0
 80072d6:	f004 fddf 	bl	800be98 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80072da:	4b7e      	ldr	r3, [pc, #504]	@ (80074d4 <MX_LWIP_Init+0x250>)
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	061a      	lsls	r2, r3, #24
 80072e0:	4b7c      	ldr	r3, [pc, #496]	@ (80074d4 <MX_LWIP_Init+0x250>)
 80072e2:	785b      	ldrb	r3, [r3, #1]
 80072e4:	041b      	lsls	r3, r3, #16
 80072e6:	431a      	orrs	r2, r3
 80072e8:	4b7a      	ldr	r3, [pc, #488]	@ (80074d4 <MX_LWIP_Init+0x250>)
 80072ea:	789b      	ldrb	r3, [r3, #2]
 80072ec:	021b      	lsls	r3, r3, #8
 80072ee:	4313      	orrs	r3, r2
 80072f0:	4a78      	ldr	r2, [pc, #480]	@ (80074d4 <MX_LWIP_Init+0x250>)
 80072f2:	78d2      	ldrb	r2, [r2, #3]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	061a      	lsls	r2, r3, #24
 80072f8:	4b76      	ldr	r3, [pc, #472]	@ (80074d4 <MX_LWIP_Init+0x250>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	0619      	lsls	r1, r3, #24
 80072fe:	4b75      	ldr	r3, [pc, #468]	@ (80074d4 <MX_LWIP_Init+0x250>)
 8007300:	785b      	ldrb	r3, [r3, #1]
 8007302:	041b      	lsls	r3, r3, #16
 8007304:	4319      	orrs	r1, r3
 8007306:	4b73      	ldr	r3, [pc, #460]	@ (80074d4 <MX_LWIP_Init+0x250>)
 8007308:	789b      	ldrb	r3, [r3, #2]
 800730a:	021b      	lsls	r3, r3, #8
 800730c:	430b      	orrs	r3, r1
 800730e:	4971      	ldr	r1, [pc, #452]	@ (80074d4 <MX_LWIP_Init+0x250>)
 8007310:	78c9      	ldrb	r1, [r1, #3]
 8007312:	430b      	orrs	r3, r1
 8007314:	021b      	lsls	r3, r3, #8
 8007316:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800731a:	431a      	orrs	r2, r3
 800731c:	4b6d      	ldr	r3, [pc, #436]	@ (80074d4 <MX_LWIP_Init+0x250>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	0619      	lsls	r1, r3, #24
 8007322:	4b6c      	ldr	r3, [pc, #432]	@ (80074d4 <MX_LWIP_Init+0x250>)
 8007324:	785b      	ldrb	r3, [r3, #1]
 8007326:	041b      	lsls	r3, r3, #16
 8007328:	4319      	orrs	r1, r3
 800732a:	4b6a      	ldr	r3, [pc, #424]	@ (80074d4 <MX_LWIP_Init+0x250>)
 800732c:	789b      	ldrb	r3, [r3, #2]
 800732e:	021b      	lsls	r3, r3, #8
 8007330:	430b      	orrs	r3, r1
 8007332:	4968      	ldr	r1, [pc, #416]	@ (80074d4 <MX_LWIP_Init+0x250>)
 8007334:	78c9      	ldrb	r1, [r1, #3]
 8007336:	430b      	orrs	r3, r1
 8007338:	0a1b      	lsrs	r3, r3, #8
 800733a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800733e:	431a      	orrs	r2, r3
 8007340:	4b64      	ldr	r3, [pc, #400]	@ (80074d4 <MX_LWIP_Init+0x250>)
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	0619      	lsls	r1, r3, #24
 8007346:	4b63      	ldr	r3, [pc, #396]	@ (80074d4 <MX_LWIP_Init+0x250>)
 8007348:	785b      	ldrb	r3, [r3, #1]
 800734a:	041b      	lsls	r3, r3, #16
 800734c:	4319      	orrs	r1, r3
 800734e:	4b61      	ldr	r3, [pc, #388]	@ (80074d4 <MX_LWIP_Init+0x250>)
 8007350:	789b      	ldrb	r3, [r3, #2]
 8007352:	021b      	lsls	r3, r3, #8
 8007354:	430b      	orrs	r3, r1
 8007356:	495f      	ldr	r1, [pc, #380]	@ (80074d4 <MX_LWIP_Init+0x250>)
 8007358:	78c9      	ldrb	r1, [r1, #3]
 800735a:	430b      	orrs	r3, r1
 800735c:	0e1b      	lsrs	r3, r3, #24
 800735e:	4313      	orrs	r3, r2
 8007360:	4a5f      	ldr	r2, [pc, #380]	@ (80074e0 <MX_LWIP_Init+0x25c>)
 8007362:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007364:	4b5c      	ldr	r3, [pc, #368]	@ (80074d8 <MX_LWIP_Init+0x254>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	061a      	lsls	r2, r3, #24
 800736a:	4b5b      	ldr	r3, [pc, #364]	@ (80074d8 <MX_LWIP_Init+0x254>)
 800736c:	785b      	ldrb	r3, [r3, #1]
 800736e:	041b      	lsls	r3, r3, #16
 8007370:	431a      	orrs	r2, r3
 8007372:	4b59      	ldr	r3, [pc, #356]	@ (80074d8 <MX_LWIP_Init+0x254>)
 8007374:	789b      	ldrb	r3, [r3, #2]
 8007376:	021b      	lsls	r3, r3, #8
 8007378:	4313      	orrs	r3, r2
 800737a:	4a57      	ldr	r2, [pc, #348]	@ (80074d8 <MX_LWIP_Init+0x254>)
 800737c:	78d2      	ldrb	r2, [r2, #3]
 800737e:	4313      	orrs	r3, r2
 8007380:	061a      	lsls	r2, r3, #24
 8007382:	4b55      	ldr	r3, [pc, #340]	@ (80074d8 <MX_LWIP_Init+0x254>)
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	0619      	lsls	r1, r3, #24
 8007388:	4b53      	ldr	r3, [pc, #332]	@ (80074d8 <MX_LWIP_Init+0x254>)
 800738a:	785b      	ldrb	r3, [r3, #1]
 800738c:	041b      	lsls	r3, r3, #16
 800738e:	4319      	orrs	r1, r3
 8007390:	4b51      	ldr	r3, [pc, #324]	@ (80074d8 <MX_LWIP_Init+0x254>)
 8007392:	789b      	ldrb	r3, [r3, #2]
 8007394:	021b      	lsls	r3, r3, #8
 8007396:	430b      	orrs	r3, r1
 8007398:	494f      	ldr	r1, [pc, #316]	@ (80074d8 <MX_LWIP_Init+0x254>)
 800739a:	78c9      	ldrb	r1, [r1, #3]
 800739c:	430b      	orrs	r3, r1
 800739e:	021b      	lsls	r3, r3, #8
 80073a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80073a4:	431a      	orrs	r2, r3
 80073a6:	4b4c      	ldr	r3, [pc, #304]	@ (80074d8 <MX_LWIP_Init+0x254>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	0619      	lsls	r1, r3, #24
 80073ac:	4b4a      	ldr	r3, [pc, #296]	@ (80074d8 <MX_LWIP_Init+0x254>)
 80073ae:	785b      	ldrb	r3, [r3, #1]
 80073b0:	041b      	lsls	r3, r3, #16
 80073b2:	4319      	orrs	r1, r3
 80073b4:	4b48      	ldr	r3, [pc, #288]	@ (80074d8 <MX_LWIP_Init+0x254>)
 80073b6:	789b      	ldrb	r3, [r3, #2]
 80073b8:	021b      	lsls	r3, r3, #8
 80073ba:	430b      	orrs	r3, r1
 80073bc:	4946      	ldr	r1, [pc, #280]	@ (80074d8 <MX_LWIP_Init+0x254>)
 80073be:	78c9      	ldrb	r1, [r1, #3]
 80073c0:	430b      	orrs	r3, r1
 80073c2:	0a1b      	lsrs	r3, r3, #8
 80073c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80073c8:	431a      	orrs	r2, r3
 80073ca:	4b43      	ldr	r3, [pc, #268]	@ (80074d8 <MX_LWIP_Init+0x254>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	0619      	lsls	r1, r3, #24
 80073d0:	4b41      	ldr	r3, [pc, #260]	@ (80074d8 <MX_LWIP_Init+0x254>)
 80073d2:	785b      	ldrb	r3, [r3, #1]
 80073d4:	041b      	lsls	r3, r3, #16
 80073d6:	4319      	orrs	r1, r3
 80073d8:	4b3f      	ldr	r3, [pc, #252]	@ (80074d8 <MX_LWIP_Init+0x254>)
 80073da:	789b      	ldrb	r3, [r3, #2]
 80073dc:	021b      	lsls	r3, r3, #8
 80073de:	430b      	orrs	r3, r1
 80073e0:	493d      	ldr	r1, [pc, #244]	@ (80074d8 <MX_LWIP_Init+0x254>)
 80073e2:	78c9      	ldrb	r1, [r1, #3]
 80073e4:	430b      	orrs	r3, r1
 80073e6:	0e1b      	lsrs	r3, r3, #24
 80073e8:	4313      	orrs	r3, r2
 80073ea:	4a3e      	ldr	r2, [pc, #248]	@ (80074e4 <MX_LWIP_Init+0x260>)
 80073ec:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80073ee:	4b3b      	ldr	r3, [pc, #236]	@ (80074dc <MX_LWIP_Init+0x258>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	061a      	lsls	r2, r3, #24
 80073f4:	4b39      	ldr	r3, [pc, #228]	@ (80074dc <MX_LWIP_Init+0x258>)
 80073f6:	785b      	ldrb	r3, [r3, #1]
 80073f8:	041b      	lsls	r3, r3, #16
 80073fa:	431a      	orrs	r2, r3
 80073fc:	4b37      	ldr	r3, [pc, #220]	@ (80074dc <MX_LWIP_Init+0x258>)
 80073fe:	789b      	ldrb	r3, [r3, #2]
 8007400:	021b      	lsls	r3, r3, #8
 8007402:	4313      	orrs	r3, r2
 8007404:	4a35      	ldr	r2, [pc, #212]	@ (80074dc <MX_LWIP_Init+0x258>)
 8007406:	78d2      	ldrb	r2, [r2, #3]
 8007408:	4313      	orrs	r3, r2
 800740a:	061a      	lsls	r2, r3, #24
 800740c:	4b33      	ldr	r3, [pc, #204]	@ (80074dc <MX_LWIP_Init+0x258>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	0619      	lsls	r1, r3, #24
 8007412:	4b32      	ldr	r3, [pc, #200]	@ (80074dc <MX_LWIP_Init+0x258>)
 8007414:	785b      	ldrb	r3, [r3, #1]
 8007416:	041b      	lsls	r3, r3, #16
 8007418:	4319      	orrs	r1, r3
 800741a:	4b30      	ldr	r3, [pc, #192]	@ (80074dc <MX_LWIP_Init+0x258>)
 800741c:	789b      	ldrb	r3, [r3, #2]
 800741e:	021b      	lsls	r3, r3, #8
 8007420:	430b      	orrs	r3, r1
 8007422:	492e      	ldr	r1, [pc, #184]	@ (80074dc <MX_LWIP_Init+0x258>)
 8007424:	78c9      	ldrb	r1, [r1, #3]
 8007426:	430b      	orrs	r3, r1
 8007428:	021b      	lsls	r3, r3, #8
 800742a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800742e:	431a      	orrs	r2, r3
 8007430:	4b2a      	ldr	r3, [pc, #168]	@ (80074dc <MX_LWIP_Init+0x258>)
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	0619      	lsls	r1, r3, #24
 8007436:	4b29      	ldr	r3, [pc, #164]	@ (80074dc <MX_LWIP_Init+0x258>)
 8007438:	785b      	ldrb	r3, [r3, #1]
 800743a:	041b      	lsls	r3, r3, #16
 800743c:	4319      	orrs	r1, r3
 800743e:	4b27      	ldr	r3, [pc, #156]	@ (80074dc <MX_LWIP_Init+0x258>)
 8007440:	789b      	ldrb	r3, [r3, #2]
 8007442:	021b      	lsls	r3, r3, #8
 8007444:	430b      	orrs	r3, r1
 8007446:	4925      	ldr	r1, [pc, #148]	@ (80074dc <MX_LWIP_Init+0x258>)
 8007448:	78c9      	ldrb	r1, [r1, #3]
 800744a:	430b      	orrs	r3, r1
 800744c:	0a1b      	lsrs	r3, r3, #8
 800744e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007452:	431a      	orrs	r2, r3
 8007454:	4b21      	ldr	r3, [pc, #132]	@ (80074dc <MX_LWIP_Init+0x258>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	0619      	lsls	r1, r3, #24
 800745a:	4b20      	ldr	r3, [pc, #128]	@ (80074dc <MX_LWIP_Init+0x258>)
 800745c:	785b      	ldrb	r3, [r3, #1]
 800745e:	041b      	lsls	r3, r3, #16
 8007460:	4319      	orrs	r1, r3
 8007462:	4b1e      	ldr	r3, [pc, #120]	@ (80074dc <MX_LWIP_Init+0x258>)
 8007464:	789b      	ldrb	r3, [r3, #2]
 8007466:	021b      	lsls	r3, r3, #8
 8007468:	430b      	orrs	r3, r1
 800746a:	491c      	ldr	r1, [pc, #112]	@ (80074dc <MX_LWIP_Init+0x258>)
 800746c:	78c9      	ldrb	r1, [r1, #3]
 800746e:	430b      	orrs	r3, r1
 8007470:	0e1b      	lsrs	r3, r3, #24
 8007472:	4313      	orrs	r3, r2
 8007474:	4a1c      	ldr	r2, [pc, #112]	@ (80074e8 <MX_LWIP_Init+0x264>)
 8007476:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007478:	4b1c      	ldr	r3, [pc, #112]	@ (80074ec <MX_LWIP_Init+0x268>)
 800747a:	9302      	str	r3, [sp, #8]
 800747c:	4b1c      	ldr	r3, [pc, #112]	@ (80074f0 <MX_LWIP_Init+0x26c>)
 800747e:	9301      	str	r3, [sp, #4]
 8007480:	2300      	movs	r3, #0
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	4b18      	ldr	r3, [pc, #96]	@ (80074e8 <MX_LWIP_Init+0x264>)
 8007486:	4a17      	ldr	r2, [pc, #92]	@ (80074e4 <MX_LWIP_Init+0x260>)
 8007488:	4915      	ldr	r1, [pc, #84]	@ (80074e0 <MX_LWIP_Init+0x25c>)
 800748a:	481a      	ldr	r0, [pc, #104]	@ (80074f4 <MX_LWIP_Init+0x270>)
 800748c:	f005 fb96 	bl	800cbbc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007490:	4818      	ldr	r0, [pc, #96]	@ (80074f4 <MX_LWIP_Init+0x270>)
 8007492:	f005 fd45 	bl	800cf20 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8007496:	4817      	ldr	r0, [pc, #92]	@ (80074f4 <MX_LWIP_Init+0x270>)
 8007498:	f005 fd52 	bl	800cf40 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800749c:	4916      	ldr	r1, [pc, #88]	@ (80074f8 <MX_LWIP_Init+0x274>)
 800749e:	4815      	ldr	r0, [pc, #84]	@ (80074f4 <MX_LWIP_Init+0x270>)
 80074a0:	f005 fe50 	bl	800d144 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80074a4:	2224      	movs	r2, #36	@ 0x24
 80074a6:	2100      	movs	r1, #0
 80074a8:	4814      	ldr	r0, [pc, #80]	@ (80074fc <MX_LWIP_Init+0x278>)
 80074aa:	f00e fe6c 	bl	8016186 <memset>
  attributes.name = "EthLink";
 80074ae:	4b13      	ldr	r3, [pc, #76]	@ (80074fc <MX_LWIP_Init+0x278>)
 80074b0:	4a13      	ldr	r2, [pc, #76]	@ (8007500 <MX_LWIP_Init+0x27c>)
 80074b2:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80074b4:	4b11      	ldr	r3, [pc, #68]	@ (80074fc <MX_LWIP_Init+0x278>)
 80074b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80074ba:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80074bc:	4b0f      	ldr	r3, [pc, #60]	@ (80074fc <MX_LWIP_Init+0x278>)
 80074be:	2210      	movs	r2, #16
 80074c0:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80074c2:	4a0e      	ldr	r2, [pc, #56]	@ (80074fc <MX_LWIP_Init+0x278>)
 80074c4:	490b      	ldr	r1, [pc, #44]	@ (80074f4 <MX_LWIP_Init+0x270>)
 80074c6:	480f      	ldr	r0, [pc, #60]	@ (8007504 <MX_LWIP_Init+0x280>)
 80074c8:	f000 fdbf 	bl	800804a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80074cc:	bf00      	nop
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	240001cc 	.word	0x240001cc
 80074d8:	240001d0 	.word	0x240001d0
 80074dc:	240001d4 	.word	0x240001d4
 80074e0:	240001c0 	.word	0x240001c0
 80074e4:	240001c4 	.word	0x240001c4
 80074e8:	240001c8 	.word	0x240001c8
 80074ec:	0800bdd5 	.word	0x0800bdd5
 80074f0:	080079f1 	.word	0x080079f1
 80074f4:	2400018c 	.word	0x2400018c
 80074f8:	08007509 	.word	0x08007509
 80074fc:	240001d8 	.word	0x240001d8
 8007500:	080175a0 	.word	0x080175a0
 8007504:	08007ca1 	.word	0x08007ca1

08007508 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007524:	4b04      	ldr	r3, [pc, #16]	@ (8007538 <HAL_ETH_RxCpltCallback+0x1c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4618      	mov	r0, r3
 800752a:	f001 f825 	bl	8008578 <osSemaphoreRelease>
}
 800752e:	bf00      	nop
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	24000204 	.word	0x24000204

0800753c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007544:	4b04      	ldr	r3, [pc, #16]	@ (8007558 <HAL_ETH_TxCpltCallback+0x1c>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4618      	mov	r0, r3
 800754a:	f001 f815 	bl	8008578 <osSemaphoreRelease>
}
 800754e:	bf00      	nop
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	24000208 	.word	0x24000208

0800755c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f7fb fa3c 	bl	80029e2 <HAL_ETH_GetDMAError>
 800756a:	4603      	mov	r3, r0
 800756c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007570:	2b80      	cmp	r3, #128	@ 0x80
 8007572:	d104      	bne.n	800757e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007574:	4b04      	ldr	r3, [pc, #16]	@ (8007588 <HAL_ETH_ErrorCallback+0x2c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4618      	mov	r0, r3
 800757a:	f000 fffd 	bl	8008578 <osSemaphoreRelease>
  }
}
 800757e:	bf00      	nop
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	24000204 	.word	0x24000204

0800758c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b0aa      	sub	sp, #168	@ 0xa8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007594:	2300      	movs	r3, #0
 8007596:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800759a:	2300      	movs	r3, #0
 800759c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 80075a6:	f107 0310 	add.w	r3, r7, #16
 80075aa:	2264      	movs	r2, #100	@ 0x64
 80075ac:	2100      	movs	r1, #0
 80075ae:	4618      	mov	r0, r3
 80075b0:	f00e fde9 	bl	8016186 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80075b4:	4b89      	ldr	r3, [pc, #548]	@ (80077dc <low_level_init+0x250>)
 80075b6:	4a8a      	ldr	r2, [pc, #552]	@ (80077e0 <low_level_init+0x254>)
 80075b8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80075ba:	2300      	movs	r3, #0
 80075bc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80075be:	2380      	movs	r3, #128	@ 0x80
 80075c0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80075c2:	23e1      	movs	r3, #225	@ 0xe1
 80075c4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80075c6:	2300      	movs	r3, #0
 80075c8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80075ca:	2300      	movs	r3, #0
 80075cc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80075ce:	2300      	movs	r3, #0
 80075d0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80075d2:	4a82      	ldr	r2, [pc, #520]	@ (80077dc <low_level_init+0x250>)
 80075d4:	f107 0308 	add.w	r3, r7, #8
 80075d8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80075da:	4b80      	ldr	r3, [pc, #512]	@ (80077dc <low_level_init+0x250>)
 80075dc:	2201      	movs	r2, #1
 80075de:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80075e0:	4b7e      	ldr	r3, [pc, #504]	@ (80077dc <low_level_init+0x250>)
 80075e2:	4a80      	ldr	r2, [pc, #512]	@ (80077e4 <low_level_init+0x258>)
 80075e4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80075e6:	4b7d      	ldr	r3, [pc, #500]	@ (80077dc <low_level_init+0x250>)
 80075e8:	4a7f      	ldr	r2, [pc, #508]	@ (80077e8 <low_level_init+0x25c>)
 80075ea:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80075ec:	4b7b      	ldr	r3, [pc, #492]	@ (80077dc <low_level_init+0x250>)
 80075ee:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80075f2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80075f4:	4879      	ldr	r0, [pc, #484]	@ (80077dc <low_level_init+0x250>)
 80075f6:	f7fa fa1b 	bl	8001a30 <HAL_ETH_Init>
 80075fa:	4603      	mov	r3, r0
 80075fc:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007600:	2238      	movs	r2, #56	@ 0x38
 8007602:	2100      	movs	r1, #0
 8007604:	4879      	ldr	r0, [pc, #484]	@ (80077ec <low_level_init+0x260>)
 8007606:	f00e fdbe 	bl	8016186 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800760a:	4b78      	ldr	r3, [pc, #480]	@ (80077ec <low_level_init+0x260>)
 800760c:	2221      	movs	r2, #33	@ 0x21
 800760e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007610:	4b76      	ldr	r3, [pc, #472]	@ (80077ec <low_level_init+0x260>)
 8007612:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8007616:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007618:	4b74      	ldr	r3, [pc, #464]	@ (80077ec <low_level_init+0x260>)
 800761a:	2200      	movs	r2, #0
 800761c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800761e:	4874      	ldr	r0, [pc, #464]	@ (80077f0 <low_level_init+0x264>)
 8007620:	f005 f986 	bl	800c930 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET
  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2206      	movs	r2, #6
 8007628:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800762c:	4b6b      	ldr	r3, [pc, #428]	@ (80077dc <low_level_init+0x250>)
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	781a      	ldrb	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007638:	4b68      	ldr	r3, [pc, #416]	@ (80077dc <low_level_init+0x250>)
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	785a      	ldrb	r2, [r3, #1]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007644:	4b65      	ldr	r3, [pc, #404]	@ (80077dc <low_level_init+0x250>)
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	789a      	ldrb	r2, [r3, #2]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007650:	4b62      	ldr	r3, [pc, #392]	@ (80077dc <low_level_init+0x250>)
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	78da      	ldrb	r2, [r3, #3]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800765c:	4b5f      	ldr	r3, [pc, #380]	@ (80077dc <low_level_init+0x250>)
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	791a      	ldrb	r2, [r3, #4]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007668:	4b5c      	ldr	r3, [pc, #368]	@ (80077dc <low_level_init+0x250>)
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	795a      	ldrb	r2, [r3, #5]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800767a:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007682:	f043 030a 	orr.w	r3, r3, #10
 8007686:	b2da      	uxtb	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800768e:	2200      	movs	r2, #0
 8007690:	2100      	movs	r1, #0
 8007692:	2001      	movs	r0, #1
 8007694:	f000 fe95 	bl	80083c2 <osSemaphoreNew>
 8007698:	4603      	mov	r3, r0
 800769a:	4a56      	ldr	r2, [pc, #344]	@ (80077f4 <low_level_init+0x268>)
 800769c:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800769e:	2200      	movs	r2, #0
 80076a0:	2100      	movs	r1, #0
 80076a2:	2001      	movs	r0, #1
 80076a4:	f000 fe8d 	bl	80083c2 <osSemaphoreNew>
 80076a8:	4603      	mov	r3, r0
 80076aa:	4a53      	ldr	r2, [pc, #332]	@ (80077f8 <low_level_init+0x26c>)
 80076ac:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80076ae:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80076b2:	2224      	movs	r2, #36	@ 0x24
 80076b4:	2100      	movs	r1, #0
 80076b6:	4618      	mov	r0, r3
 80076b8:	f00e fd65 	bl	8016186 <memset>
  attributes.name = "EthIf";
 80076bc:	4b4f      	ldr	r3, [pc, #316]	@ (80077fc <low_level_init+0x270>)
 80076be:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80076c0:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80076c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 80076c8:	2330      	movs	r3, #48	@ 0x30
 80076ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 80076ce:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80076d2:	461a      	mov	r2, r3
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	484a      	ldr	r0, [pc, #296]	@ (8007800 <low_level_init+0x274>)
 80076d8:	f000 fcb7 	bl	800804a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80076dc:	4949      	ldr	r1, [pc, #292]	@ (8007804 <low_level_init+0x278>)
 80076de:	484a      	ldr	r0, [pc, #296]	@ (8007808 <low_level_init+0x27c>)
 80076e0:	f7f9 fed7 	bl	8001492 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80076e4:	4848      	ldr	r0, [pc, #288]	@ (8007808 <low_level_init+0x27c>)
 80076e6:	f7f9 ff06 	bl	80014f6 <LAN8742_Init>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d006      	beq.n	80076fe <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f005 fcf7 	bl	800d0e4 <netif_set_link_down>
    netif_set_down(netif);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f005 fc8e 	bl	800d018 <netif_set_down>
 80076fc:	e06b      	b.n	80077d6 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80076fe:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8007702:	2b00      	cmp	r3, #0
 8007704:	d165      	bne.n	80077d2 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007706:	4840      	ldr	r0, [pc, #256]	@ (8007808 <low_level_init+0x27c>)
 8007708:	f7f9 ff42 	bl	8001590 <LAN8742_GetLinkState>
 800770c:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8007710:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007714:	2b01      	cmp	r3, #1
 8007716:	dc06      	bgt.n	8007726 <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f005 fce3 	bl	800d0e4 <netif_set_link_down>
      netif_set_down(netif);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f005 fc7a 	bl	800d018 <netif_set_down>
 8007724:	e057      	b.n	80077d6 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8007726:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800772a:	3b02      	subs	r3, #2
 800772c:	2b03      	cmp	r3, #3
 800772e:	d82b      	bhi.n	8007788 <low_level_init+0x1fc>
 8007730:	a201      	add	r2, pc, #4	@ (adr r2, 8007738 <low_level_init+0x1ac>)
 8007732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007736:	bf00      	nop
 8007738:	08007749 	.word	0x08007749
 800773c:	0800775b 	.word	0x0800775b
 8007740:	0800776b 	.word	0x0800776b
 8007744:	0800777b 	.word	0x0800777b
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8007748:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800774c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8007750:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007754:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007758:	e01f      	b.n	800779a <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800775a:	2300      	movs	r3, #0
 800775c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8007760:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007764:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007768:	e017      	b.n	800779a <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800776a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800776e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8007772:	2300      	movs	r3, #0
 8007774:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007778:	e00f      	b.n	800779a <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800777a:	2300      	movs	r3, #0
 800777c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8007780:	2300      	movs	r3, #0
 8007782:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007786:	e008      	b.n	800779a <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8007788:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800778c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8007790:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007794:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007798:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800779a:	f107 0310 	add.w	r3, r7, #16
 800779e:	4619      	mov	r1, r3
 80077a0:	480e      	ldr	r0, [pc, #56]	@ (80077dc <low_level_init+0x250>)
 80077a2:	f7fa fed3 	bl	800254c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80077a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80077aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 80077ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80077b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80077b2:	f107 0310 	add.w	r3, r7, #16
 80077b6:	4619      	mov	r1, r3
 80077b8:	4808      	ldr	r0, [pc, #32]	@ (80077dc <low_level_init+0x250>)
 80077ba:	f7fb f89b 	bl	80028f4 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 80077be:	4807      	ldr	r0, [pc, #28]	@ (80077dc <low_level_init+0x250>)
 80077c0:	f7fa fa34 	bl	8001c2c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f005 fbbb 	bl	800cf40 <netif_set_up>
    netif_set_link_up(netif);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f005 fc56 	bl	800d07c <netif_set_link_up>
 80077d0:	e001      	b.n	80077d6 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 80077d2:	f7f9 fbcb 	bl	8000f6c <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80077d6:	37a8      	adds	r7, #168	@ 0xa8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	2400020c 	.word	0x2400020c
 80077e0:	40028000 	.word	0x40028000
 80077e4:	30000100 	.word	0x30000100
 80077e8:	30000000 	.word	0x30000000
 80077ec:	240002bc 	.word	0x240002bc
 80077f0:	0801a0d8 	.word	0x0801a0d8
 80077f4:	24000204 	.word	0x24000204
 80077f8:	24000208 	.word	0x24000208
 80077fc:	080175a8 	.word	0x080175a8
 8007800:	0800799d 	.word	0x0800799d
 8007804:	24000010 	.word	0x24000010
 8007808:	240002f4 	.word	0x240002f4

0800780c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b092      	sub	sp, #72	@ 0x48
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800781a:	2300      	movs	r3, #0
 800781c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007824:	f107 030c 	add.w	r3, r7, #12
 8007828:	2230      	movs	r2, #48	@ 0x30
 800782a:	2100      	movs	r1, #0
 800782c:	4618      	mov	r0, r3
 800782e:	f00e fcaa 	bl	8016186 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007832:	f107 030c 	add.w	r3, r7, #12
 8007836:	2230      	movs	r2, #48	@ 0x30
 8007838:	2100      	movs	r1, #0
 800783a:	4618      	mov	r0, r3
 800783c:	f00e fca3 	bl	8016186 <memset>

  for(q = p; q != NULL; q = q->next)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	643b      	str	r3, [r7, #64]	@ 0x40
 8007844:	e045      	b.n	80078d2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007848:	2b03      	cmp	r3, #3
 800784a:	d902      	bls.n	8007852 <low_level_output+0x46>
      return ERR_IF;
 800784c:	f06f 030b 	mvn.w	r3, #11
 8007850:	e07f      	b.n	8007952 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8007852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007854:	6859      	ldr	r1, [r3, #4]
 8007856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007858:	4613      	mov	r3, r2
 800785a:	005b      	lsls	r3, r3, #1
 800785c:	4413      	add	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	3348      	adds	r3, #72	@ 0x48
 8007862:	443b      	add	r3, r7
 8007864:	3b3c      	subs	r3, #60	@ 0x3c
 8007866:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007868:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800786a:	895b      	ldrh	r3, [r3, #10]
 800786c:	4619      	mov	r1, r3
 800786e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007870:	4613      	mov	r3, r2
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	3348      	adds	r3, #72	@ 0x48
 800787a:	443b      	add	r3, r7
 800787c:	3b38      	subs	r3, #56	@ 0x38
 800787e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007882:	2b00      	cmp	r3, #0
 8007884:	d011      	beq.n	80078aa <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007888:	1e5a      	subs	r2, r3, #1
 800788a:	f107 000c 	add.w	r0, r7, #12
 800788e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007890:	460b      	mov	r3, r1
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	440b      	add	r3, r1
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	18c1      	adds	r1, r0, r3
 800789a:	4613      	mov	r3, r2
 800789c:	005b      	lsls	r3, r3, #1
 800789e:	4413      	add	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	3348      	adds	r3, #72	@ 0x48
 80078a4:	443b      	add	r3, r7
 80078a6:	3b34      	subs	r3, #52	@ 0x34
 80078a8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80078aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d109      	bne.n	80078c6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80078b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078b4:	4613      	mov	r3, r2
 80078b6:	005b      	lsls	r3, r3, #1
 80078b8:	4413      	add	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	3348      	adds	r3, #72	@ 0x48
 80078be:	443b      	add	r3, r7
 80078c0:	3b34      	subs	r3, #52	@ 0x34
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80078c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078c8:	3301      	adds	r3, #1
 80078ca:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80078cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80078d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1b6      	bne.n	8007846 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	891b      	ldrh	r3, [r3, #8]
 80078dc:	461a      	mov	r2, r3
 80078de:	4b1f      	ldr	r3, [pc, #124]	@ (800795c <low_level_output+0x150>)
 80078e0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80078e2:	4a1e      	ldr	r2, [pc, #120]	@ (800795c <low_level_output+0x150>)
 80078e4:	f107 030c 	add.w	r3, r7, #12
 80078e8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80078ea:	4a1c      	ldr	r2, [pc, #112]	@ (800795c <low_level_output+0x150>)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 80078f0:	6838      	ldr	r0, [r7, #0]
 80078f2:	f006 f87f 	bl	800d9f4 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 80078f6:	4919      	ldr	r1, [pc, #100]	@ (800795c <low_level_output+0x150>)
 80078f8:	4819      	ldr	r0, [pc, #100]	@ (8007960 <low_level_output+0x154>)
 80078fa:	f7fa fa83 	bl	8001e04 <HAL_ETH_Transmit_IT>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d103      	bne.n	800790c <low_level_output+0x100>
    {
      errval = ERR_OK;
 8007904:	2300      	movs	r3, #0
 8007906:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800790a:	e01b      	b.n	8007944 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800790c:	4814      	ldr	r0, [pc, #80]	@ (8007960 <low_level_output+0x154>)
 800790e:	f7fb f85b 	bl	80029c8 <HAL_ETH_GetError>
 8007912:	4603      	mov	r3, r0
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00d      	beq.n	8007938 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800791c:	4b11      	ldr	r3, [pc, #68]	@ (8007964 <low_level_output+0x158>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8007924:	4618      	mov	r0, r3
 8007926:	f000 fdd5 	bl	80084d4 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800792a:	480d      	ldr	r0, [pc, #52]	@ (8007960 <low_level_output+0x154>)
 800792c:	f7fa fbf1 	bl	8002112 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8007930:	23fe      	movs	r3, #254	@ 0xfe
 8007932:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007936:	e005      	b.n	8007944 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8007938:	6838      	ldr	r0, [r7, #0]
 800793a:	f005 ffb5 	bl	800d8a8 <pbuf_free>
        errval =  ERR_IF;
 800793e:	23f4      	movs	r3, #244	@ 0xf4
 8007940:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8007944:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007948:	f113 0f02 	cmn.w	r3, #2
 800794c:	d0d3      	beq.n	80078f6 <low_level_output+0xea>

  return errval;
 800794e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8007952:	4618      	mov	r0, r3
 8007954:	3748      	adds	r7, #72	@ 0x48
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	240002bc 	.word	0x240002bc
 8007960:	2400020c 	.word	0x2400020c
 8007964:	24000208 	.word	0x24000208

08007968 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007970:	2300      	movs	r3, #0
 8007972:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007974:	4b07      	ldr	r3, [pc, #28]	@ (8007994 <low_level_input+0x2c>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d105      	bne.n	8007988 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800797c:	f107 030c 	add.w	r3, r7, #12
 8007980:	4619      	mov	r1, r3
 8007982:	4805      	ldr	r0, [pc, #20]	@ (8007998 <low_level_input+0x30>)
 8007984:	f7fa fa8f 	bl	8001ea6 <HAL_ETH_ReadData>
  }

  return p;
 8007988:	68fb      	ldr	r3, [r7, #12]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	24000200 	.word	0x24000200
 8007998:	2400020c 	.word	0x2400020c

0800799c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80079ac:	4b0f      	ldr	r3, [pc, #60]	@ (80079ec <ethernetif_input+0x50>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f04f 31ff 	mov.w	r1, #4294967295
 80079b4:	4618      	mov	r0, r3
 80079b6:	f000 fd8d 	bl	80084d4 <osSemaphoreAcquire>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1f5      	bne.n	80079ac <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80079c0:	68b8      	ldr	r0, [r7, #8]
 80079c2:	f7ff ffd1 	bl	8007968 <low_level_input>
 80079c6:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	68b9      	ldr	r1, [r7, #8]
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	4798      	blx	r3
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d002      	beq.n	80079e4 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f005 ff62 	bl	800d8a8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1ea      	bne.n	80079c0 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80079ea:	e7df      	b.n	80079ac <ethernetif_input+0x10>
 80079ec:	24000204 	.word	0x24000204

080079f0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d106      	bne.n	8007a0c <ethernetif_init+0x1c>
 80079fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007a38 <ethernetif_init+0x48>)
 8007a00:	f240 2215 	movw	r2, #533	@ 0x215
 8007a04:	490d      	ldr	r1, [pc, #52]	@ (8007a3c <ethernetif_init+0x4c>)
 8007a06:	480e      	ldr	r0, [pc, #56]	@ (8007a40 <ethernetif_init+0x50>)
 8007a08:	f00e fb58 	bl	80160bc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2273      	movs	r2, #115	@ 0x73
 8007a10:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2274      	movs	r2, #116	@ 0x74
 8007a18:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a09      	ldr	r2, [pc, #36]	@ (8007a44 <ethernetif_init+0x54>)
 8007a20:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a08      	ldr	r2, [pc, #32]	@ (8007a48 <ethernetif_init+0x58>)
 8007a26:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff fdaf 	bl	800758c <low_level_init>

  return ERR_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	080175b0 	.word	0x080175b0
 8007a3c:	080175cc 	.word	0x080175cc
 8007a40:	080175dc 	.word	0x080175dc
 8007a44:	08013f99 	.word	0x08013f99
 8007a48:	0800780d 	.word	0x0800780d

08007a4c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007a58:	68f9      	ldr	r1, [r7, #12]
 8007a5a:	4809      	ldr	r0, [pc, #36]	@ (8007a80 <pbuf_free_custom+0x34>)
 8007a5c:	f005 f858 	bl	800cb10 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007a60:	4b08      	ldr	r3, [pc, #32]	@ (8007a84 <pbuf_free_custom+0x38>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d107      	bne.n	8007a78 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007a68:	4b06      	ldr	r3, [pc, #24]	@ (8007a84 <pbuf_free_custom+0x38>)
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8007a6e:	4b06      	ldr	r3, [pc, #24]	@ (8007a88 <pbuf_free_custom+0x3c>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 fd80 	bl	8008578 <osSemaphoreRelease>
  }
}
 8007a78:	bf00      	nop
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	0801a0d8 	.word	0x0801a0d8
 8007a84:	24000200 	.word	0x24000200
 8007a88:	24000204 	.word	0x24000204

08007a8c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007a90:	f7f9 fe56 	bl	8001740 <HAL_GetTick>
 8007a94:	4603      	mov	r3, r0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	bd80      	pop	{r7, pc}
	...

08007a9c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b08e      	sub	sp, #56	@ 0x38
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007aa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	605a      	str	r2, [r3, #4]
 8007aae:	609a      	str	r2, [r3, #8]
 8007ab0:	60da      	str	r2, [r3, #12]
 8007ab2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a4d      	ldr	r2, [pc, #308]	@ (8007bf0 <HAL_ETH_MspInit+0x154>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	f040 8093 	bne.w	8007be6 <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8007ac0:	4b4c      	ldr	r3, [pc, #304]	@ (8007bf4 <HAL_ETH_MspInit+0x158>)
 8007ac2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007ac6:	4a4b      	ldr	r2, [pc, #300]	@ (8007bf4 <HAL_ETH_MspInit+0x158>)
 8007ac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007acc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007ad0:	4b48      	ldr	r3, [pc, #288]	@ (8007bf4 <HAL_ETH_MspInit+0x158>)
 8007ad2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007ad6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ada:	623b      	str	r3, [r7, #32]
 8007adc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8007ade:	4b45      	ldr	r3, [pc, #276]	@ (8007bf4 <HAL_ETH_MspInit+0x158>)
 8007ae0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007ae4:	4a43      	ldr	r2, [pc, #268]	@ (8007bf4 <HAL_ETH_MspInit+0x158>)
 8007ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007aea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007aee:	4b41      	ldr	r3, [pc, #260]	@ (8007bf4 <HAL_ETH_MspInit+0x158>)
 8007af0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007af8:	61fb      	str	r3, [r7, #28]
 8007afa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8007afc:	4b3d      	ldr	r3, [pc, #244]	@ (8007bf4 <HAL_ETH_MspInit+0x158>)
 8007afe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007b02:	4a3c      	ldr	r2, [pc, #240]	@ (8007bf4 <HAL_ETH_MspInit+0x158>)
 8007b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b08:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007b0c:	4b39      	ldr	r3, [pc, #228]	@ (8007bf4 <HAL_ETH_MspInit+0x158>)
 8007b0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b16:	61bb      	str	r3, [r7, #24]
 8007b18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b1a:	4b36      	ldr	r3, [pc, #216]	@ (8007bf4 <HAL_ETH_MspInit+0x158>)
 8007b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b20:	4a34      	ldr	r2, [pc, #208]	@ (8007bf4 <HAL_ETH_MspInit+0x158>)
 8007b22:	f043 0304 	orr.w	r3, r3, #4
 8007b26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007b2a:	4b32      	ldr	r3, [pc, #200]	@ (8007bf4 <HAL_ETH_MspInit+0x158>)
 8007b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b38:	4b2e      	ldr	r3, [pc, #184]	@ (8007bf4 <HAL_ETH_MspInit+0x158>)
 8007b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b3e:	4a2d      	ldr	r2, [pc, #180]	@ (8007bf4 <HAL_ETH_MspInit+0x158>)
 8007b40:	f043 0301 	orr.w	r3, r3, #1
 8007b44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007b48:	4b2a      	ldr	r3, [pc, #168]	@ (8007bf4 <HAL_ETH_MspInit+0x158>)
 8007b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	613b      	str	r3, [r7, #16]
 8007b54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b56:	4b27      	ldr	r3, [pc, #156]	@ (8007bf4 <HAL_ETH_MspInit+0x158>)
 8007b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b5c:	4a25      	ldr	r2, [pc, #148]	@ (8007bf4 <HAL_ETH_MspInit+0x158>)
 8007b5e:	f043 0302 	orr.w	r3, r3, #2
 8007b62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007b66:	4b23      	ldr	r3, [pc, #140]	@ (8007bf4 <HAL_ETH_MspInit+0x158>)
 8007b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	60fb      	str	r3, [r7, #12]
 8007b72:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8007b74:	2332      	movs	r3, #50	@ 0x32
 8007b76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b78:	2302      	movs	r3, #2
 8007b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b80:	2303      	movs	r3, #3
 8007b82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007b84:	230b      	movs	r3, #11
 8007b86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	481a      	ldr	r0, [pc, #104]	@ (8007bf8 <HAL_ETH_MspInit+0x15c>)
 8007b90:	f7fb fcb6 	bl	8003500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007b94:	2386      	movs	r3, #134	@ 0x86
 8007b96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b98:	2302      	movs	r3, #2
 8007b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007ba4:	230b      	movs	r3, #11
 8007ba6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007bac:	4619      	mov	r1, r3
 8007bae:	4813      	ldr	r0, [pc, #76]	@ (8007bfc <HAL_ETH_MspInit+0x160>)
 8007bb0:	f7fb fca6 	bl	8003500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8007bb4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8007bb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bba:	2302      	movs	r3, #2
 8007bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007bc6:	230b      	movs	r3, #11
 8007bc8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007bca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007bce:	4619      	mov	r1, r3
 8007bd0:	480b      	ldr	r0, [pc, #44]	@ (8007c00 <HAL_ETH_MspInit+0x164>)
 8007bd2:	f7fb fc95 	bl	8003500 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	2105      	movs	r1, #5
 8007bda:	203d      	movs	r0, #61	@ 0x3d
 8007bdc:	f7f9 fe88 	bl	80018f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007be0:	203d      	movs	r0, #61	@ 0x3d
 8007be2:	f7f9 fe9f 	bl	8001924 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007be6:	bf00      	nop
 8007be8:	3738      	adds	r7, #56	@ 0x38
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	40028000 	.word	0x40028000
 8007bf4:	58024400 	.word	0x58024400
 8007bf8:	58020800 	.word	0x58020800
 8007bfc:	58020000 	.word	0x58020000
 8007c00:	58020400 	.word	0x58020400

08007c04 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007c08:	4802      	ldr	r0, [pc, #8]	@ (8007c14 <ETH_PHY_IO_Init+0x10>)
 8007c0a:	f7fa fe8d 	bl	8002928 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	2400020c 	.word	0x2400020c

08007c18 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	af00      	add	r7, sp, #0
  return 0;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	68f9      	ldr	r1, [r7, #12]
 8007c3a:	4807      	ldr	r0, [pc, #28]	@ (8007c58 <ETH_PHY_IO_ReadReg+0x30>)
 8007c3c:	f7fa fbde 	bl	80023fc <HAL_ETH_ReadPHYRegister>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d002      	beq.n	8007c4c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007c46:	f04f 33ff 	mov.w	r3, #4294967295
 8007c4a:	e000      	b.n	8007c4e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	2400020c 	.word	0x2400020c

08007c5c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	68f9      	ldr	r1, [r7, #12]
 8007c6e:	4807      	ldr	r0, [pc, #28]	@ (8007c8c <ETH_PHY_IO_WriteReg+0x30>)
 8007c70:	f7fa fc18 	bl	80024a4 <HAL_ETH_WritePHYRegister>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7e:	e000      	b.n	8007c82 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	2400020c 	.word	0x2400020c

08007c90 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007c94:	f7f9 fd54 	bl	8001740 <HAL_GetTick>
 8007c98:	4603      	mov	r3, r0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	bd80      	pop	{r7, pc}
	...

08007ca0 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b0a0      	sub	sp, #128	@ 0x80
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007ca8:	f107 0308 	add.w	r3, r7, #8
 8007cac:	2264      	movs	r2, #100	@ 0x64
 8007cae:	2100      	movs	r1, #0
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f00e fa68 	bl	8016186 <memset>
  int32_t PHYLinkState = 0;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007cca:	483a      	ldr	r0, [pc, #232]	@ (8007db4 <ethernet_link_thread+0x114>)
 8007ccc:	f7f9 fc60 	bl	8001590 <LAN8742_GetLinkState>
 8007cd0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007cd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cd4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007cd8:	089b      	lsrs	r3, r3, #2
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00c      	beq.n	8007cfe <ethernet_link_thread+0x5e>
 8007ce4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	dc09      	bgt.n	8007cfe <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8007cea:	4833      	ldr	r0, [pc, #204]	@ (8007db8 <ethernet_link_thread+0x118>)
 8007cec:	f7fa f812 	bl	8001d14 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8007cf0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007cf2:	f005 f991 	bl	800d018 <netif_set_down>
    netif_set_link_down(netif);
 8007cf6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007cf8:	f005 f9f4 	bl	800d0e4 <netif_set_link_down>
 8007cfc:	e055      	b.n	8007daa <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007cfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007d04:	f003 0304 	and.w	r3, r3, #4
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d14e      	bne.n	8007daa <ethernet_link_thread+0x10a>
 8007d0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	dd4b      	ble.n	8007daa <ethernet_link_thread+0x10a>
  {

    switch (PHYLinkState)
 8007d12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d14:	3b02      	subs	r3, #2
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	d82a      	bhi.n	8007d70 <ethernet_link_thread+0xd0>
 8007d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d20 <ethernet_link_thread+0x80>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d31 	.word	0x08007d31
 8007d24:	08007d43 	.word	0x08007d43
 8007d28:	08007d53 	.word	0x08007d53
 8007d2c:	08007d63 	.word	0x08007d63
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007d30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007d34:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8007d36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007d3a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007d40:	e017      	b.n	8007d72 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007d42:	2300      	movs	r3, #0
 8007d44:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8007d46:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007d4a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007d50:	e00f      	b.n	8007d72 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007d52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007d56:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007d60:	e007      	b.n	8007d72 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007d62:	2300      	movs	r3, #0
 8007d64:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8007d66:	2300      	movs	r3, #0
 8007d68:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007d6e:	e000      	b.n	8007d72 <ethernet_link_thread+0xd2>
    default:
      break;
 8007d70:	bf00      	nop
    }

    if(linkchanged)
 8007d72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d018      	beq.n	8007daa <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007d78:	f107 0308 	add.w	r3, r7, #8
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	480e      	ldr	r0, [pc, #56]	@ (8007db8 <ethernet_link_thread+0x118>)
 8007d80:	f7fa fbe4 	bl	800254c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007d84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d86:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8007d88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d8a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007d8c:	f107 0308 	add.w	r3, r7, #8
 8007d90:	4619      	mov	r1, r3
 8007d92:	4809      	ldr	r0, [pc, #36]	@ (8007db8 <ethernet_link_thread+0x118>)
 8007d94:	f7fa fdae 	bl	80028f4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8007d98:	4807      	ldr	r0, [pc, #28]	@ (8007db8 <ethernet_link_thread+0x118>)
 8007d9a:	f7f9 ff47 	bl	8001c2c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8007d9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007da0:	f005 f8ce 	bl	800cf40 <netif_set_up>
      netif_set_link_up(netif);
 8007da4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007da6:	f005 f969 	bl	800d07c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8007daa:	2064      	movs	r0, #100	@ 0x64
 8007dac:	f000 f9e0 	bl	8008170 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007db0:	e78b      	b.n	8007cca <ethernet_link_thread+0x2a>
 8007db2:	bf00      	nop
 8007db4:	240002f4 	.word	0x240002f4
 8007db8:	2400020c 	.word	0x2400020c

08007dbc <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af02      	add	r7, sp, #8
 8007dc2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007dc4:	4812      	ldr	r0, [pc, #72]	@ (8007e10 <HAL_ETH_RxAllocateCallback+0x54>)
 8007dc6:	f004 fe2f 	bl	800ca28 <memp_malloc_pool>
 8007dca:	60f8      	str	r0, [r7, #12]
  if (p)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d014      	beq.n	8007dfc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f103 0220 	add.w	r2, r3, #32
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4a0d      	ldr	r2, [pc, #52]	@ (8007e14 <HAL_ETH_RxAllocateCallback+0x58>)
 8007de0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007dea:	9201      	str	r2, [sp, #4]
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2241      	movs	r2, #65	@ 0x41
 8007df2:	2100      	movs	r1, #0
 8007df4:	2000      	movs	r0, #0
 8007df6:	f005 fb9d 	bl	800d534 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007dfa:	e005      	b.n	8007e08 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007dfc:	4b06      	ldr	r3, [pc, #24]	@ (8007e18 <HAL_ETH_RxAllocateCallback+0x5c>)
 8007dfe:	2201      	movs	r2, #1
 8007e00:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	601a      	str	r2, [r3, #0]
}
 8007e08:	bf00      	nop
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	0801a0d8 	.word	0x0801a0d8
 8007e14:	08007a4d 	.word	0x08007a4d
 8007e18:	24000200 	.word	0x24000200

08007e1c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b08d      	sub	sp, #52	@ 0x34
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 8007e32:	2300      	movs	r3, #0
 8007e34:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	3b20      	subs	r3, #32
 8007e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 8007e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e3e:	2200      	movs	r2, #0
 8007e40:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e44:	2200      	movs	r2, #0
 8007e46:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e4a:	887a      	ldrh	r2, [r7, #2]
 8007e4c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8007e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d103      	bne.n	8007e5e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	e003      	b.n	8007e66 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e64:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e6a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e72:	e009      	b.n	8007e88 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e76:	891a      	ldrh	r2, [r3, #8]
 8007e78:	887b      	ldrh	r3, [r7, #2]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e80:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1f2      	bne.n	8007e74 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007e8e:	887b      	ldrh	r3, [r7, #2]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	623a      	str	r2, [r7, #32]
 8007e94:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	dd1d      	ble.n	8007ed8 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	f003 021f 	and.w	r2, r3, #31
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007eac:	f3bf 8f4f 	dsb	sy
}
 8007eb0:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8007eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8007ee8 <HAL_ETH_RxLinkCallback+0xcc>)
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	3320      	adds	r3, #32
 8007ebe:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	3b20      	subs	r3, #32
 8007ec4:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	dcf2      	bgt.n	8007eb2 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8007ecc:	f3bf 8f4f 	dsb	sy
}
 8007ed0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007ed2:	f3bf 8f6f 	isb	sy
}
 8007ed6:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8007ed8:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007eda:	bf00      	nop
 8007edc:	3734      	adds	r7, #52	@ 0x34
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	e000ed00 	.word	0xe000ed00

08007eec <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f005 fcd7 	bl	800d8a8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8007efa:	bf00      	nop
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
	...

08007f04 <__NVIC_SetPriority>:
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	6039      	str	r1, [r7, #0]
 8007f0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007f10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	db0a      	blt.n	8007f2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	490c      	ldr	r1, [pc, #48]	@ (8007f50 <__NVIC_SetPriority+0x4c>)
 8007f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f22:	0112      	lsls	r2, r2, #4
 8007f24:	b2d2      	uxtb	r2, r2
 8007f26:	440b      	add	r3, r1
 8007f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007f2c:	e00a      	b.n	8007f44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	4908      	ldr	r1, [pc, #32]	@ (8007f54 <__NVIC_SetPriority+0x50>)
 8007f34:	88fb      	ldrh	r3, [r7, #6]
 8007f36:	f003 030f 	and.w	r3, r3, #15
 8007f3a:	3b04      	subs	r3, #4
 8007f3c:	0112      	lsls	r2, r2, #4
 8007f3e:	b2d2      	uxtb	r2, r2
 8007f40:	440b      	add	r3, r1
 8007f42:	761a      	strb	r2, [r3, #24]
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	e000e100 	.word	0xe000e100
 8007f54:	e000ed00 	.word	0xe000ed00

08007f58 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007f5c:	4b05      	ldr	r3, [pc, #20]	@ (8007f74 <SysTick_Handler+0x1c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007f60:	f002 fcc6 	bl	800a8f0 <xTaskGetSchedulerState>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d001      	beq.n	8007f6e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007f6a:	f003 fbbd 	bl	800b6e8 <xPortSysTickHandler>
  }
}
 8007f6e:	bf00      	nop
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	e000e010 	.word	0xe000e010

08007f78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	f06f 0004 	mvn.w	r0, #4
 8007f82:	f7ff ffbf 	bl	8007f04 <__NVIC_SetPriority>
#endif
}
 8007f86:	bf00      	nop
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f92:	f3ef 8305 	mrs	r3, IPSR
 8007f96:	603b      	str	r3, [r7, #0]
  return(result);
 8007f98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007f9e:	f06f 0305 	mvn.w	r3, #5
 8007fa2:	607b      	str	r3, [r7, #4]
 8007fa4:	e00c      	b.n	8007fc0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8007fd0 <osKernelInitialize+0x44>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d105      	bne.n	8007fba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007fae:	4b08      	ldr	r3, [pc, #32]	@ (8007fd0 <osKernelInitialize+0x44>)
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	607b      	str	r3, [r7, #4]
 8007fb8:	e002      	b.n	8007fc0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007fba:	f04f 33ff 	mov.w	r3, #4294967295
 8007fbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007fc0:	687b      	ldr	r3, [r7, #4]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	24000314 	.word	0x24000314

08007fd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fda:	f3ef 8305 	mrs	r3, IPSR
 8007fde:	603b      	str	r3, [r7, #0]
  return(result);
 8007fe0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <osKernelStart+0x1a>
    stat = osErrorISR;
 8007fe6:	f06f 0305 	mvn.w	r3, #5
 8007fea:	607b      	str	r3, [r7, #4]
 8007fec:	e010      	b.n	8008010 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007fee:	4b0b      	ldr	r3, [pc, #44]	@ (800801c <osKernelStart+0x48>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d109      	bne.n	800800a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007ff6:	f7ff ffbf 	bl	8007f78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007ffa:	4b08      	ldr	r3, [pc, #32]	@ (800801c <osKernelStart+0x48>)
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008000:	f001 fff0 	bl	8009fe4 <vTaskStartScheduler>
      stat = osOK;
 8008004:	2300      	movs	r3, #0
 8008006:	607b      	str	r3, [r7, #4]
 8008008:	e002      	b.n	8008010 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800800a:	f04f 33ff 	mov.w	r3, #4294967295
 800800e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008010:	687b      	ldr	r3, [r7, #4]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	24000314 	.word	0x24000314

08008020 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008026:	f3ef 8305 	mrs	r3, IPSR
 800802a:	603b      	str	r3, [r7, #0]
  return(result);
 800802c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8008032:	f002 f903 	bl	800a23c <xTaskGetTickCountFromISR>
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	e002      	b.n	8008040 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800803a:	f002 f8ef 	bl	800a21c <xTaskGetTickCount>
 800803e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008040:	687b      	ldr	r3, [r7, #4]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800804a:	b580      	push	{r7, lr}
 800804c:	b08e      	sub	sp, #56	@ 0x38
 800804e:	af04      	add	r7, sp, #16
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008056:	2300      	movs	r3, #0
 8008058:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800805a:	f3ef 8305 	mrs	r3, IPSR
 800805e:	617b      	str	r3, [r7, #20]
  return(result);
 8008060:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008062:	2b00      	cmp	r3, #0
 8008064:	d17f      	bne.n	8008166 <osThreadNew+0x11c>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d07c      	beq.n	8008166 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800806c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008070:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008072:	2318      	movs	r3, #24
 8008074:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008076:	2300      	movs	r3, #0
 8008078:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800807a:	f04f 33ff 	mov.w	r3, #4294967295
 800807e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d045      	beq.n	8008112 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d002      	beq.n	8008094 <osThreadNew+0x4a>
        name = attr->name;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d008      	beq.n	80080ba <osThreadNew+0x70>
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	2b38      	cmp	r3, #56	@ 0x38
 80080ac:	d805      	bhi.n	80080ba <osThreadNew+0x70>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <osThreadNew+0x74>
        return (NULL);
 80080ba:	2300      	movs	r3, #0
 80080bc:	e054      	b.n	8008168 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	089b      	lsrs	r3, r3, #2
 80080cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00e      	beq.n	80080f4 <osThreadNew+0xaa>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	2ba7      	cmp	r3, #167	@ 0xa7
 80080dc:	d90a      	bls.n	80080f4 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d006      	beq.n	80080f4 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d002      	beq.n	80080f4 <osThreadNew+0xaa>
        mem = 1;
 80080ee:	2301      	movs	r3, #1
 80080f0:	61bb      	str	r3, [r7, #24]
 80080f2:	e010      	b.n	8008116 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10c      	bne.n	8008116 <osThreadNew+0xcc>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d108      	bne.n	8008116 <osThreadNew+0xcc>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d104      	bne.n	8008116 <osThreadNew+0xcc>
          mem = 0;
 800810c:	2300      	movs	r3, #0
 800810e:	61bb      	str	r3, [r7, #24]
 8008110:	e001      	b.n	8008116 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d110      	bne.n	800813e <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008124:	9202      	str	r2, [sp, #8]
 8008126:	9301      	str	r3, [sp, #4]
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	6a3a      	ldr	r2, [r7, #32]
 8008130:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f001 fd62 	bl	8009bfc <xTaskCreateStatic>
 8008138:	4603      	mov	r3, r0
 800813a:	613b      	str	r3, [r7, #16]
 800813c:	e013      	b.n	8008166 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d110      	bne.n	8008166 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	b29a      	uxth	r2, r3
 8008148:	f107 0310 	add.w	r3, r7, #16
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f001 fdb0 	bl	8009cbc <xTaskCreate>
 800815c:	4603      	mov	r3, r0
 800815e:	2b01      	cmp	r3, #1
 8008160:	d001      	beq.n	8008166 <osThreadNew+0x11c>
            hTask = NULL;
 8008162:	2300      	movs	r3, #0
 8008164:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008166:	693b      	ldr	r3, [r7, #16]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3728      	adds	r7, #40	@ 0x28
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008178:	f3ef 8305 	mrs	r3, IPSR
 800817c:	60bb      	str	r3, [r7, #8]
  return(result);
 800817e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008180:	2b00      	cmp	r3, #0
 8008182:	d003      	beq.n	800818c <osDelay+0x1c>
    stat = osErrorISR;
 8008184:	f06f 0305 	mvn.w	r3, #5
 8008188:	60fb      	str	r3, [r7, #12]
 800818a:	e007      	b.n	800819c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800818c:	2300      	movs	r3, #0
 800818e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d002      	beq.n	800819c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 feee 	bl	8009f78 <vTaskDelay>
    }
  }

  return (stat);
 800819c:	68fb      	ldr	r3, [r7, #12]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b088      	sub	sp, #32
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081b2:	f3ef 8305 	mrs	r3, IPSR
 80081b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80081b8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d174      	bne.n	80082a8 <osMutexNew+0x102>
    if (attr != NULL) {
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <osMutexNew+0x26>
      type = attr->attr_bits;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	61bb      	str	r3, [r7, #24]
 80081ca:	e001      	b.n	80081d0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80081cc:	2300      	movs	r3, #0
 80081ce:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d002      	beq.n	80081e0 <osMutexNew+0x3a>
      rmtx = 1U;
 80081da:	2301      	movs	r3, #1
 80081dc:	617b      	str	r3, [r7, #20]
 80081de:	e001      	b.n	80081e4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	f003 0308 	and.w	r3, r3, #8
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d15c      	bne.n	80082a8 <osMutexNew+0x102>
      mem = -1;
 80081ee:	f04f 33ff 	mov.w	r3, #4294967295
 80081f2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d015      	beq.n	8008226 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d006      	beq.n	8008210 <osMutexNew+0x6a>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	2b4f      	cmp	r3, #79	@ 0x4f
 8008208:	d902      	bls.n	8008210 <osMutexNew+0x6a>
          mem = 1;
 800820a:	2301      	movs	r3, #1
 800820c:	613b      	str	r3, [r7, #16]
 800820e:	e00c      	b.n	800822a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d108      	bne.n	800822a <osMutexNew+0x84>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d104      	bne.n	800822a <osMutexNew+0x84>
            mem = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	613b      	str	r3, [r7, #16]
 8008224:	e001      	b.n	800822a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d112      	bne.n	8008256 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d007      	beq.n	8008246 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	4619      	mov	r1, r3
 800823c:	2004      	movs	r0, #4
 800823e:	f000 fd70 	bl	8008d22 <xQueueCreateMutexStatic>
 8008242:	61f8      	str	r0, [r7, #28]
 8008244:	e016      	b.n	8008274 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	4619      	mov	r1, r3
 800824c:	2001      	movs	r0, #1
 800824e:	f000 fd68 	bl	8008d22 <xQueueCreateMutexStatic>
 8008252:	61f8      	str	r0, [r7, #28]
 8008254:	e00e      	b.n	8008274 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10b      	bne.n	8008274 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d004      	beq.n	800826c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008262:	2004      	movs	r0, #4
 8008264:	f000 fd45 	bl	8008cf2 <xQueueCreateMutex>
 8008268:	61f8      	str	r0, [r7, #28]
 800826a:	e003      	b.n	8008274 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800826c:	2001      	movs	r0, #1
 800826e:	f000 fd40 	bl	8008cf2 <xQueueCreateMutex>
 8008272:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00c      	beq.n	8008294 <osMutexNew+0xee>
        if (attr != NULL) {
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d003      	beq.n	8008288 <osMutexNew+0xe2>
          name = attr->name;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	60fb      	str	r3, [r7, #12]
 8008286:	e001      	b.n	800828c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008288:	2300      	movs	r3, #0
 800828a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800828c:	68f9      	ldr	r1, [r7, #12]
 800828e:	69f8      	ldr	r0, [r7, #28]
 8008290:	f001 fc2c 	bl	8009aec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d006      	beq.n	80082a8 <osMutexNew+0x102>
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d003      	beq.n	80082a8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	f043 0301 	orr.w	r3, r3, #1
 80082a6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80082a8:	69fb      	ldr	r3, [r7, #28]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3720      	adds	r7, #32
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b086      	sub	sp, #24
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f023 0301 	bic.w	r3, r3, #1
 80082c2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082d0:	f3ef 8305 	mrs	r3, IPSR
 80082d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80082d6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80082dc:	f06f 0305 	mvn.w	r3, #5
 80082e0:	617b      	str	r3, [r7, #20]
 80082e2:	e02c      	b.n	800833e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d103      	bne.n	80082f2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80082ea:	f06f 0303 	mvn.w	r3, #3
 80082ee:	617b      	str	r3, [r7, #20]
 80082f0:	e025      	b.n	800833e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d011      	beq.n	800831c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6938      	ldr	r0, [r7, #16]
 80082fc:	f000 fd61 	bl	8008dc2 <xQueueTakeMutexRecursive>
 8008300:	4603      	mov	r3, r0
 8008302:	2b01      	cmp	r3, #1
 8008304:	d01b      	beq.n	800833e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800830c:	f06f 0301 	mvn.w	r3, #1
 8008310:	617b      	str	r3, [r7, #20]
 8008312:	e014      	b.n	800833e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008314:	f06f 0302 	mvn.w	r3, #2
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	e010      	b.n	800833e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6938      	ldr	r0, [r7, #16]
 8008320:	f001 f906 	bl	8009530 <xQueueSemaphoreTake>
 8008324:	4603      	mov	r3, r0
 8008326:	2b01      	cmp	r3, #1
 8008328:	d009      	beq.n	800833e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d003      	beq.n	8008338 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008330:	f06f 0301 	mvn.w	r3, #1
 8008334:	617b      	str	r3, [r7, #20]
 8008336:	e002      	b.n	800833e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008338:	f06f 0302 	mvn.w	r3, #2
 800833c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800833e:	697b      	ldr	r3, [r7, #20]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f023 0301 	bic.w	r3, r3, #1
 8008356:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008360:	2300      	movs	r3, #0
 8008362:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008364:	f3ef 8305 	mrs	r3, IPSR
 8008368:	60bb      	str	r3, [r7, #8]
  return(result);
 800836a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800836c:	2b00      	cmp	r3, #0
 800836e:	d003      	beq.n	8008378 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008370:	f06f 0305 	mvn.w	r3, #5
 8008374:	617b      	str	r3, [r7, #20]
 8008376:	e01f      	b.n	80083b8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d103      	bne.n	8008386 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800837e:	f06f 0303 	mvn.w	r3, #3
 8008382:	617b      	str	r3, [r7, #20]
 8008384:	e018      	b.n	80083b8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d009      	beq.n	80083a0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800838c:	6938      	ldr	r0, [r7, #16]
 800838e:	f000 fce3 	bl	8008d58 <xQueueGiveMutexRecursive>
 8008392:	4603      	mov	r3, r0
 8008394:	2b01      	cmp	r3, #1
 8008396:	d00f      	beq.n	80083b8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008398:	f06f 0302 	mvn.w	r3, #2
 800839c:	617b      	str	r3, [r7, #20]
 800839e:	e00b      	b.n	80083b8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80083a0:	2300      	movs	r3, #0
 80083a2:	2200      	movs	r2, #0
 80083a4:	2100      	movs	r1, #0
 80083a6:	6938      	ldr	r0, [r7, #16]
 80083a8:	f000 fdb0 	bl	8008f0c <xQueueGenericSend>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d002      	beq.n	80083b8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80083b2:	f06f 0302 	mvn.w	r3, #2
 80083b6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80083b8:	697b      	ldr	r3, [r7, #20]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3718      	adds	r7, #24
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b08a      	sub	sp, #40	@ 0x28
 80083c6:	af02      	add	r7, sp, #8
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	60b9      	str	r1, [r7, #8]
 80083cc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80083ce:	2300      	movs	r3, #0
 80083d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083d2:	f3ef 8305 	mrs	r3, IPSR
 80083d6:	613b      	str	r3, [r7, #16]
  return(result);
 80083d8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d175      	bne.n	80084ca <osSemaphoreNew+0x108>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d072      	beq.n	80084ca <osSemaphoreNew+0x108>
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d86e      	bhi.n	80084ca <osSemaphoreNew+0x108>
    mem = -1;
 80083ec:	f04f 33ff 	mov.w	r3, #4294967295
 80083f0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d015      	beq.n	8008424 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d006      	beq.n	800840e <osSemaphoreNew+0x4c>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	2b4f      	cmp	r3, #79	@ 0x4f
 8008406:	d902      	bls.n	800840e <osSemaphoreNew+0x4c>
        mem = 1;
 8008408:	2301      	movs	r3, #1
 800840a:	61bb      	str	r3, [r7, #24]
 800840c:	e00c      	b.n	8008428 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d108      	bne.n	8008428 <osSemaphoreNew+0x66>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d104      	bne.n	8008428 <osSemaphoreNew+0x66>
          mem = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	61bb      	str	r3, [r7, #24]
 8008422:	e001      	b.n	8008428 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008424:	2300      	movs	r3, #0
 8008426:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842e:	d04c      	beq.n	80084ca <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d128      	bne.n	8008488 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d10a      	bne.n	8008452 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	2203      	movs	r2, #3
 8008442:	9200      	str	r2, [sp, #0]
 8008444:	2200      	movs	r2, #0
 8008446:	2100      	movs	r1, #0
 8008448:	2001      	movs	r0, #1
 800844a:	f000 fb5d 	bl	8008b08 <xQueueGenericCreateStatic>
 800844e:	61f8      	str	r0, [r7, #28]
 8008450:	e005      	b.n	800845e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008452:	2203      	movs	r2, #3
 8008454:	2100      	movs	r1, #0
 8008456:	2001      	movs	r0, #1
 8008458:	f000 fbd3 	bl	8008c02 <xQueueGenericCreate>
 800845c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d022      	beq.n	80084aa <osSemaphoreNew+0xe8>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d01f      	beq.n	80084aa <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800846a:	2300      	movs	r3, #0
 800846c:	2200      	movs	r2, #0
 800846e:	2100      	movs	r1, #0
 8008470:	69f8      	ldr	r0, [r7, #28]
 8008472:	f000 fd4b 	bl	8008f0c <xQueueGenericSend>
 8008476:	4603      	mov	r3, r0
 8008478:	2b01      	cmp	r3, #1
 800847a:	d016      	beq.n	80084aa <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800847c:	69f8      	ldr	r0, [r7, #28]
 800847e:	f001 f9e9 	bl	8009854 <vQueueDelete>
            hSemaphore = NULL;
 8008482:	2300      	movs	r3, #0
 8008484:	61fb      	str	r3, [r7, #28]
 8008486:	e010      	b.n	80084aa <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d108      	bne.n	80084a0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	461a      	mov	r2, r3
 8008494:	68b9      	ldr	r1, [r7, #8]
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 fcca 	bl	8008e30 <xQueueCreateCountingSemaphoreStatic>
 800849c:	61f8      	str	r0, [r7, #28]
 800849e:	e004      	b.n	80084aa <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80084a0:	68b9      	ldr	r1, [r7, #8]
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 fcfd 	bl	8008ea2 <xQueueCreateCountingSemaphore>
 80084a8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00c      	beq.n	80084ca <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <osSemaphoreNew+0xfc>
          name = attr->name;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	617b      	str	r3, [r7, #20]
 80084bc:	e001      	b.n	80084c2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80084be:	2300      	movs	r3, #0
 80084c0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80084c2:	6979      	ldr	r1, [r7, #20]
 80084c4:	69f8      	ldr	r0, [r7, #28]
 80084c6:	f001 fb11 	bl	8009aec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80084ca:	69fb      	ldr	r3, [r7, #28]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3720      	adds	r7, #32
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d103      	bne.n	80084f4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80084ec:	f06f 0303 	mvn.w	r3, #3
 80084f0:	617b      	str	r3, [r7, #20]
 80084f2:	e039      	b.n	8008568 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084f4:	f3ef 8305 	mrs	r3, IPSR
 80084f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80084fa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d022      	beq.n	8008546 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008506:	f06f 0303 	mvn.w	r3, #3
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	e02c      	b.n	8008568 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800850e:	2300      	movs	r3, #0
 8008510:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008512:	f107 0308 	add.w	r3, r7, #8
 8008516:	461a      	mov	r2, r3
 8008518:	2100      	movs	r1, #0
 800851a:	6938      	ldr	r0, [r7, #16]
 800851c:	f001 f918 	bl	8009750 <xQueueReceiveFromISR>
 8008520:	4603      	mov	r3, r0
 8008522:	2b01      	cmp	r3, #1
 8008524:	d003      	beq.n	800852e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008526:	f06f 0302 	mvn.w	r3, #2
 800852a:	617b      	str	r3, [r7, #20]
 800852c:	e01c      	b.n	8008568 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d019      	beq.n	8008568 <osSemaphoreAcquire+0x94>
 8008534:	4b0f      	ldr	r3, [pc, #60]	@ (8008574 <osSemaphoreAcquire+0xa0>)
 8008536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	e010      	b.n	8008568 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6938      	ldr	r0, [r7, #16]
 800854a:	f000 fff1 	bl	8009530 <xQueueSemaphoreTake>
 800854e:	4603      	mov	r3, r0
 8008550:	2b01      	cmp	r3, #1
 8008552:	d009      	beq.n	8008568 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800855a:	f06f 0301 	mvn.w	r3, #1
 800855e:	617b      	str	r3, [r7, #20]
 8008560:	e002      	b.n	8008568 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008562:	f06f 0302 	mvn.w	r3, #2
 8008566:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008568:	697b      	ldr	r3, [r7, #20]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	e000ed04 	.word	0xe000ed04

08008578 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008584:	2300      	movs	r3, #0
 8008586:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d103      	bne.n	8008596 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800858e:	f06f 0303 	mvn.w	r3, #3
 8008592:	617b      	str	r3, [r7, #20]
 8008594:	e02c      	b.n	80085f0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008596:	f3ef 8305 	mrs	r3, IPSR
 800859a:	60fb      	str	r3, [r7, #12]
  return(result);
 800859c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d01a      	beq.n	80085d8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80085a6:	f107 0308 	add.w	r3, r7, #8
 80085aa:	4619      	mov	r1, r3
 80085ac:	6938      	ldr	r0, [r7, #16]
 80085ae:	f000 fe4d 	bl	800924c <xQueueGiveFromISR>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d003      	beq.n	80085c0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80085b8:	f06f 0302 	mvn.w	r3, #2
 80085bc:	617b      	str	r3, [r7, #20]
 80085be:	e017      	b.n	80085f0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d014      	beq.n	80085f0 <osSemaphoreRelease+0x78>
 80085c6:	4b0d      	ldr	r3, [pc, #52]	@ (80085fc <osSemaphoreRelease+0x84>)
 80085c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	e00b      	b.n	80085f0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80085d8:	2300      	movs	r3, #0
 80085da:	2200      	movs	r2, #0
 80085dc:	2100      	movs	r1, #0
 80085de:	6938      	ldr	r0, [r7, #16]
 80085e0:	f000 fc94 	bl	8008f0c <xQueueGenericSend>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d002      	beq.n	80085f0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80085ea:	f06f 0302 	mvn.w	r3, #2
 80085ee:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80085f0:	697b      	ldr	r3, [r7, #20]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3718      	adds	r7, #24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	e000ed04 	.word	0xe000ed04

08008600 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008600:	b580      	push	{r7, lr}
 8008602:	b08a      	sub	sp, #40	@ 0x28
 8008604:	af02      	add	r7, sp, #8
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800860c:	2300      	movs	r3, #0
 800860e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008610:	f3ef 8305 	mrs	r3, IPSR
 8008614:	613b      	str	r3, [r7, #16]
  return(result);
 8008616:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008618:	2b00      	cmp	r3, #0
 800861a:	d15f      	bne.n	80086dc <osMessageQueueNew+0xdc>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d05c      	beq.n	80086dc <osMessageQueueNew+0xdc>
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d059      	beq.n	80086dc <osMessageQueueNew+0xdc>
    mem = -1;
 8008628:	f04f 33ff 	mov.w	r3, #4294967295
 800862c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d029      	beq.n	8008688 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d012      	beq.n	8008662 <osMessageQueueNew+0x62>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	2b4f      	cmp	r3, #79	@ 0x4f
 8008642:	d90e      	bls.n	8008662 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00a      	beq.n	8008662 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	695a      	ldr	r2, [r3, #20]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	68b9      	ldr	r1, [r7, #8]
 8008654:	fb01 f303 	mul.w	r3, r1, r3
 8008658:	429a      	cmp	r2, r3
 800865a:	d302      	bcc.n	8008662 <osMessageQueueNew+0x62>
        mem = 1;
 800865c:	2301      	movs	r3, #1
 800865e:	61bb      	str	r3, [r7, #24]
 8008660:	e014      	b.n	800868c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d110      	bne.n	800868c <osMessageQueueNew+0x8c>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10c      	bne.n	800868c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008676:	2b00      	cmp	r3, #0
 8008678:	d108      	bne.n	800868c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	695b      	ldr	r3, [r3, #20]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d104      	bne.n	800868c <osMessageQueueNew+0x8c>
          mem = 0;
 8008682:	2300      	movs	r3, #0
 8008684:	61bb      	str	r3, [r7, #24]
 8008686:	e001      	b.n	800868c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008688:	2300      	movs	r3, #0
 800868a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d10b      	bne.n	80086aa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	691a      	ldr	r2, [r3, #16]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	2100      	movs	r1, #0
 800869c:	9100      	str	r1, [sp, #0]
 800869e:	68b9      	ldr	r1, [r7, #8]
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 fa31 	bl	8008b08 <xQueueGenericCreateStatic>
 80086a6:	61f8      	str	r0, [r7, #28]
 80086a8:	e008      	b.n	80086bc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d105      	bne.n	80086bc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80086b0:	2200      	movs	r2, #0
 80086b2:	68b9      	ldr	r1, [r7, #8]
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f000 faa4 	bl	8008c02 <xQueueGenericCreate>
 80086ba:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00c      	beq.n	80086dc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d003      	beq.n	80086d0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	617b      	str	r3, [r7, #20]
 80086ce:	e001      	b.n	80086d4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80086d0:	2300      	movs	r3, #0
 80086d2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80086d4:	6979      	ldr	r1, [r7, #20]
 80086d6:	69f8      	ldr	r0, [r7, #28]
 80086d8:	f001 fa08 	bl	8009aec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80086dc:	69fb      	ldr	r3, [r7, #28]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3720      	adds	r7, #32
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
	...

080086e8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b088      	sub	sp, #32
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	603b      	str	r3, [r7, #0]
 80086f4:	4613      	mov	r3, r2
 80086f6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008700:	f3ef 8305 	mrs	r3, IPSR
 8008704:	617b      	str	r3, [r7, #20]
  return(result);
 8008706:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008708:	2b00      	cmp	r3, #0
 800870a:	d028      	beq.n	800875e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d005      	beq.n	800871e <osMessageQueuePut+0x36>
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d002      	beq.n	800871e <osMessageQueuePut+0x36>
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d003      	beq.n	8008726 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800871e:	f06f 0303 	mvn.w	r3, #3
 8008722:	61fb      	str	r3, [r7, #28]
 8008724:	e038      	b.n	8008798 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008726:	2300      	movs	r3, #0
 8008728:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800872a:	f107 0210 	add.w	r2, r7, #16
 800872e:	2300      	movs	r3, #0
 8008730:	68b9      	ldr	r1, [r7, #8]
 8008732:	69b8      	ldr	r0, [r7, #24]
 8008734:	f000 fcec 	bl	8009110 <xQueueGenericSendFromISR>
 8008738:	4603      	mov	r3, r0
 800873a:	2b01      	cmp	r3, #1
 800873c:	d003      	beq.n	8008746 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800873e:	f06f 0302 	mvn.w	r3, #2
 8008742:	61fb      	str	r3, [r7, #28]
 8008744:	e028      	b.n	8008798 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d025      	beq.n	8008798 <osMessageQueuePut+0xb0>
 800874c:	4b15      	ldr	r3, [pc, #84]	@ (80087a4 <osMessageQueuePut+0xbc>)
 800874e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	e01c      	b.n	8008798 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <osMessageQueuePut+0x82>
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d103      	bne.n	8008772 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800876a:	f06f 0303 	mvn.w	r3, #3
 800876e:	61fb      	str	r3, [r7, #28]
 8008770:	e012      	b.n	8008798 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008772:	2300      	movs	r3, #0
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	68b9      	ldr	r1, [r7, #8]
 8008778:	69b8      	ldr	r0, [r7, #24]
 800877a:	f000 fbc7 	bl	8008f0c <xQueueGenericSend>
 800877e:	4603      	mov	r3, r0
 8008780:	2b01      	cmp	r3, #1
 8008782:	d009      	beq.n	8008798 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800878a:	f06f 0301 	mvn.w	r3, #1
 800878e:	61fb      	str	r3, [r7, #28]
 8008790:	e002      	b.n	8008798 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008792:	f06f 0302 	mvn.w	r3, #2
 8008796:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008798:	69fb      	ldr	r3, [r7, #28]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3720      	adds	r7, #32
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	e000ed04 	.word	0xe000ed04

080087a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
 80087b4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087be:	f3ef 8305 	mrs	r3, IPSR
 80087c2:	617b      	str	r3, [r7, #20]
  return(result);
 80087c4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d028      	beq.n	800881c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d005      	beq.n	80087dc <osMessageQueueGet+0x34>
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <osMessageQueueGet+0x34>
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80087dc:	f06f 0303 	mvn.w	r3, #3
 80087e0:	61fb      	str	r3, [r7, #28]
 80087e2:	e037      	b.n	8008854 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80087e4:	2300      	movs	r3, #0
 80087e6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80087e8:	f107 0310 	add.w	r3, r7, #16
 80087ec:	461a      	mov	r2, r3
 80087ee:	68b9      	ldr	r1, [r7, #8]
 80087f0:	69b8      	ldr	r0, [r7, #24]
 80087f2:	f000 ffad 	bl	8009750 <xQueueReceiveFromISR>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d003      	beq.n	8008804 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80087fc:	f06f 0302 	mvn.w	r3, #2
 8008800:	61fb      	str	r3, [r7, #28]
 8008802:	e027      	b.n	8008854 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d024      	beq.n	8008854 <osMessageQueueGet+0xac>
 800880a:	4b15      	ldr	r3, [pc, #84]	@ (8008860 <osMessageQueueGet+0xb8>)
 800880c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	e01b      	b.n	8008854 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d002      	beq.n	8008828 <osMessageQueueGet+0x80>
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d103      	bne.n	8008830 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008828:	f06f 0303 	mvn.w	r3, #3
 800882c:	61fb      	str	r3, [r7, #28]
 800882e:	e011      	b.n	8008854 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	68b9      	ldr	r1, [r7, #8]
 8008834:	69b8      	ldr	r0, [r7, #24]
 8008836:	f000 fd99 	bl	800936c <xQueueReceive>
 800883a:	4603      	mov	r3, r0
 800883c:	2b01      	cmp	r3, #1
 800883e:	d009      	beq.n	8008854 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d003      	beq.n	800884e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008846:	f06f 0301 	mvn.w	r3, #1
 800884a:	61fb      	str	r3, [r7, #28]
 800884c:	e002      	b.n	8008854 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800884e:	f06f 0302 	mvn.w	r3, #2
 8008852:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008854:	69fb      	ldr	r3, [r7, #28]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3720      	adds	r7, #32
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	e000ed04 	.word	0xe000ed04

08008864 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	4a07      	ldr	r2, [pc, #28]	@ (8008890 <vApplicationGetIdleTaskMemory+0x2c>)
 8008874:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	4a06      	ldr	r2, [pc, #24]	@ (8008894 <vApplicationGetIdleTaskMemory+0x30>)
 800887a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008882:	601a      	str	r2, [r3, #0]
}
 8008884:	bf00      	nop
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	24000318 	.word	0x24000318
 8008894:	240003c0 	.word	0x240003c0

08008898 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4a07      	ldr	r2, [pc, #28]	@ (80088c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80088a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	4a06      	ldr	r2, [pc, #24]	@ (80088c8 <vApplicationGetTimerTaskMemory+0x30>)
 80088ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80088b6:	601a      	str	r2, [r3, #0]
}
 80088b8:	bf00      	nop
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	24000bc0 	.word	0x24000bc0
 80088c8:	24000c68 	.word	0x24000c68

080088cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f103 0208 	add.w	r2, r3, #8
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f04f 32ff 	mov.w	r2, #4294967295
 80088e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f103 0208 	add.w	r2, r3, #8
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f103 0208 	add.w	r2, r3, #8
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800891a:	bf00      	nop
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008926:	b480      	push	{r7}
 8008928:	b085      	sub	sp, #20
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	689a      	ldr	r2, [r3, #8]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	601a      	str	r2, [r3, #0]
}
 8008962:	bf00      	nop
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800896e:	b480      	push	{r7}
 8008970:	b085      	sub	sp, #20
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008984:	d103      	bne.n	800898e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	60fb      	str	r3, [r7, #12]
 800898c:	e00c      	b.n	80089a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	3308      	adds	r3, #8
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	e002      	b.n	800899c <vListInsert+0x2e>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	60fb      	str	r3, [r7, #12]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d2f6      	bcs.n	8008996 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	1c5a      	adds	r2, r3, #1
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	601a      	str	r2, [r3, #0]
}
 80089d4:	bf00      	nop
 80089d6:	3714      	adds	r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	6892      	ldr	r2, [r2, #8]
 80089f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	6852      	ldr	r2, [r2, #4]
 8008a00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d103      	bne.n	8008a14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689a      	ldr	r2, [r3, #8]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	1e5a      	subs	r2, r3, #1
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10b      	bne.n	8008a60 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008a5a:	bf00      	nop
 8008a5c:	bf00      	nop
 8008a5e:	e7fd      	b.n	8008a5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008a60:	f002 fdb2 	bl	800b5c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a6c:	68f9      	ldr	r1, [r7, #12]
 8008a6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008a70:	fb01 f303 	mul.w	r3, r1, r3
 8008a74:	441a      	add	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a90:	3b01      	subs	r3, #1
 8008a92:	68f9      	ldr	r1, [r7, #12]
 8008a94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008a96:	fb01 f303 	mul.w	r3, r1, r3
 8008a9a:	441a      	add	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	22ff      	movs	r2, #255	@ 0xff
 8008aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	22ff      	movs	r2, #255	@ 0xff
 8008aac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d114      	bne.n	8008ae0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d01a      	beq.n	8008af4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3310      	adds	r3, #16
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f001 fd3e 	bl	800a544 <xTaskRemoveFromEventList>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d012      	beq.n	8008af4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008ace:	4b0d      	ldr	r3, [pc, #52]	@ (8008b04 <xQueueGenericReset+0xd0>)
 8008ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	e009      	b.n	8008af4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3310      	adds	r3, #16
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7ff fef1 	bl	80088cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3324      	adds	r3, #36	@ 0x24
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7ff feec 	bl	80088cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008af4:	f002 fd9a 	bl	800b62c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008af8:	2301      	movs	r3, #1
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	e000ed04 	.word	0xe000ed04

08008b08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b08e      	sub	sp, #56	@ 0x38
 8008b0c:	af02      	add	r7, sp, #8
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
 8008b14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10b      	bne.n	8008b34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b20:	f383 8811 	msr	BASEPRI, r3
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008b2e:	bf00      	nop
 8008b30:	bf00      	nop
 8008b32:	e7fd      	b.n	8008b30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10b      	bne.n	8008b52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b3e:	f383 8811 	msr	BASEPRI, r3
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b4c:	bf00      	nop
 8008b4e:	bf00      	nop
 8008b50:	e7fd      	b.n	8008b4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d002      	beq.n	8008b5e <xQueueGenericCreateStatic+0x56>
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <xQueueGenericCreateStatic+0x5a>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e000      	b.n	8008b64 <xQueueGenericCreateStatic+0x5c>
 8008b62:	2300      	movs	r3, #0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10b      	bne.n	8008b80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6c:	f383 8811 	msr	BASEPRI, r3
 8008b70:	f3bf 8f6f 	isb	sy
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	623b      	str	r3, [r7, #32]
}
 8008b7a:	bf00      	nop
 8008b7c:	bf00      	nop
 8008b7e:	e7fd      	b.n	8008b7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d102      	bne.n	8008b8c <xQueueGenericCreateStatic+0x84>
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <xQueueGenericCreateStatic+0x88>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e000      	b.n	8008b92 <xQueueGenericCreateStatic+0x8a>
 8008b90:	2300      	movs	r3, #0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10b      	bne.n	8008bae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	61fb      	str	r3, [r7, #28]
}
 8008ba8:	bf00      	nop
 8008baa:	bf00      	nop
 8008bac:	e7fd      	b.n	8008baa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008bae:	2350      	movs	r3, #80	@ 0x50
 8008bb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2b50      	cmp	r3, #80	@ 0x50
 8008bb6:	d00b      	beq.n	8008bd0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bbc:	f383 8811 	msr	BASEPRI, r3
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	61bb      	str	r3, [r7, #24]
}
 8008bca:	bf00      	nop
 8008bcc:	bf00      	nop
 8008bce:	e7fd      	b.n	8008bcc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008bd0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00d      	beq.n	8008bf8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008be4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	4613      	mov	r3, r2
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	68b9      	ldr	r1, [r7, #8]
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f000 f840 	bl	8008c78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3730      	adds	r7, #48	@ 0x30
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b08a      	sub	sp, #40	@ 0x28
 8008c06:	af02      	add	r7, sp, #8
 8008c08:	60f8      	str	r0, [r7, #12]
 8008c0a:	60b9      	str	r1, [r7, #8]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10b      	bne.n	8008c2e <xQueueGenericCreate+0x2c>
	__asm volatile
 8008c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	613b      	str	r3, [r7, #16]
}
 8008c28:	bf00      	nop
 8008c2a:	bf00      	nop
 8008c2c:	e7fd      	b.n	8008c2a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	fb02 f303 	mul.w	r3, r2, r3
 8008c36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	3350      	adds	r3, #80	@ 0x50
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f002 fde5 	bl	800b80c <pvPortMalloc>
 8008c42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d011      	beq.n	8008c6e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	3350      	adds	r3, #80	@ 0x50
 8008c52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c5c:	79fa      	ldrb	r2, [r7, #7]
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	4613      	mov	r3, r2
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	68b9      	ldr	r1, [r7, #8]
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 f805 	bl	8008c78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c6e:	69bb      	ldr	r3, [r7, #24]
	}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3720      	adds	r7, #32
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
 8008c84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d103      	bne.n	8008c94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	e002      	b.n	8008c9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	69b8      	ldr	r0, [r7, #24]
 8008caa:	f7ff fec3 	bl	8008a34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	78fa      	ldrb	r2, [r7, #3]
 8008cb2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008cb6:	bf00      	nop
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b082      	sub	sp, #8
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00e      	beq.n	8008cea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008cde:	2300      	movs	r3, #0
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f911 	bl	8008f0c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008cea:	bf00      	nop
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b086      	sub	sp, #24
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	617b      	str	r3, [r7, #20]
 8008d00:	2300      	movs	r3, #0
 8008d02:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008d04:	79fb      	ldrb	r3, [r7, #7]
 8008d06:	461a      	mov	r2, r3
 8008d08:	6939      	ldr	r1, [r7, #16]
 8008d0a:	6978      	ldr	r0, [r7, #20]
 8008d0c:	f7ff ff79 	bl	8008c02 <xQueueGenericCreate>
 8008d10:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f7ff ffd3 	bl	8008cbe <prvInitialiseMutex>

		return xNewQueue;
 8008d18:	68fb      	ldr	r3, [r7, #12]
	}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b088      	sub	sp, #32
 8008d26:	af02      	add	r7, sp, #8
 8008d28:	4603      	mov	r3, r0
 8008d2a:	6039      	str	r1, [r7, #0]
 8008d2c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	617b      	str	r3, [r7, #20]
 8008d32:	2300      	movs	r3, #0
 8008d34:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008d36:	79fb      	ldrb	r3, [r7, #7]
 8008d38:	9300      	str	r3, [sp, #0]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	6939      	ldr	r1, [r7, #16]
 8008d40:	6978      	ldr	r0, [r7, #20]
 8008d42:	f7ff fee1 	bl	8008b08 <xQueueGenericCreateStatic>
 8008d46:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f7ff ffb8 	bl	8008cbe <prvInitialiseMutex>

		return xNewQueue;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
	}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008d58:	b590      	push	{r4, r7, lr}
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10b      	bne.n	8008d82 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	60fb      	str	r3, [r7, #12]
}
 8008d7c:	bf00      	nop
 8008d7e:	bf00      	nop
 8008d80:	e7fd      	b.n	8008d7e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	689c      	ldr	r4, [r3, #8]
 8008d86:	f001 fda3 	bl	800a8d0 <xTaskGetCurrentTaskHandle>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	429c      	cmp	r4, r3
 8008d8e:	d111      	bne.n	8008db4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	1e5a      	subs	r2, r3, #1
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d105      	bne.n	8008dae <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008da2:	2300      	movs	r3, #0
 8008da4:	2200      	movs	r2, #0
 8008da6:	2100      	movs	r1, #0
 8008da8:	6938      	ldr	r0, [r7, #16]
 8008daa:	f000 f8af 	bl	8008f0c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008dae:	2301      	movs	r3, #1
 8008db0:	617b      	str	r3, [r7, #20]
 8008db2:	e001      	b.n	8008db8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008db4:	2300      	movs	r3, #0
 8008db6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008db8:	697b      	ldr	r3, [r7, #20]
	}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	371c      	adds	r7, #28
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd90      	pop	{r4, r7, pc}

08008dc2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008dc2:	b590      	push	{r4, r7, lr}
 8008dc4:	b087      	sub	sp, #28
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10b      	bne.n	8008dee <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8008dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	60fb      	str	r3, [r7, #12]
}
 8008de8:	bf00      	nop
 8008dea:	bf00      	nop
 8008dec:	e7fd      	b.n	8008dea <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	689c      	ldr	r4, [r3, #8]
 8008df2:	f001 fd6d 	bl	800a8d0 <xTaskGetCurrentTaskHandle>
 8008df6:	4603      	mov	r3, r0
 8008df8:	429c      	cmp	r4, r3
 8008dfa:	d107      	bne.n	8008e0c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	1c5a      	adds	r2, r3, #1
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008e06:	2301      	movs	r3, #1
 8008e08:	617b      	str	r3, [r7, #20]
 8008e0a:	e00c      	b.n	8008e26 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6938      	ldr	r0, [r7, #16]
 8008e10:	f000 fb8e 	bl	8009530 <xQueueSemaphoreTake>
 8008e14:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d004      	beq.n	8008e26 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	1c5a      	adds	r2, r3, #1
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008e26:	697b      	ldr	r3, [r7, #20]
	}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	371c      	adds	r7, #28
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd90      	pop	{r4, r7, pc}

08008e30 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b08a      	sub	sp, #40	@ 0x28
 8008e34:	af02      	add	r7, sp, #8
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10b      	bne.n	8008e5a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	61bb      	str	r3, [r7, #24]
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop
 8008e58:	e7fd      	b.n	8008e56 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d90b      	bls.n	8008e7a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8008e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e66:	f383 8811 	msr	BASEPRI, r3
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	617b      	str	r3, [r7, #20]
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop
 8008e78:	e7fd      	b.n	8008e76 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	2100      	movs	r1, #0
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f7ff fe3f 	bl	8008b08 <xQueueGenericCreateStatic>
 8008e8a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d002      	beq.n	8008e98 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008e98:	69fb      	ldr	r3, [r7, #28]
	}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3720      	adds	r7, #32
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b086      	sub	sp, #24
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10b      	bne.n	8008eca <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	613b      	str	r3, [r7, #16]
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	e7fd      	b.n	8008ec6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d90b      	bls.n	8008eea <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	60fb      	str	r3, [r7, #12]
}
 8008ee4:	bf00      	nop
 8008ee6:	bf00      	nop
 8008ee8:	e7fd      	b.n	8008ee6 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008eea:	2202      	movs	r2, #2
 8008eec:	2100      	movs	r1, #0
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7ff fe87 	bl	8008c02 <xQueueGenericCreate>
 8008ef4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008f02:	697b      	ldr	r3, [r7, #20]
	}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3718      	adds	r7, #24
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b08e      	sub	sp, #56	@ 0x38
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
 8008f18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d10b      	bne.n	8008f40 <xQueueGenericSend+0x34>
	__asm volatile
 8008f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2c:	f383 8811 	msr	BASEPRI, r3
 8008f30:	f3bf 8f6f 	isb	sy
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008f3a:	bf00      	nop
 8008f3c:	bf00      	nop
 8008f3e:	e7fd      	b.n	8008f3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d103      	bne.n	8008f4e <xQueueGenericSend+0x42>
 8008f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d101      	bne.n	8008f52 <xQueueGenericSend+0x46>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e000      	b.n	8008f54 <xQueueGenericSend+0x48>
 8008f52:	2300      	movs	r3, #0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10b      	bne.n	8008f70 <xQueueGenericSend+0x64>
	__asm volatile
 8008f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008f6a:	bf00      	nop
 8008f6c:	bf00      	nop
 8008f6e:	e7fd      	b.n	8008f6c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d103      	bne.n	8008f7e <xQueueGenericSend+0x72>
 8008f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d101      	bne.n	8008f82 <xQueueGenericSend+0x76>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e000      	b.n	8008f84 <xQueueGenericSend+0x78>
 8008f82:	2300      	movs	r3, #0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10b      	bne.n	8008fa0 <xQueueGenericSend+0x94>
	__asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	623b      	str	r3, [r7, #32]
}
 8008f9a:	bf00      	nop
 8008f9c:	bf00      	nop
 8008f9e:	e7fd      	b.n	8008f9c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fa0:	f001 fca6 	bl	800a8f0 <xTaskGetSchedulerState>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d102      	bne.n	8008fb0 <xQueueGenericSend+0xa4>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d101      	bne.n	8008fb4 <xQueueGenericSend+0xa8>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e000      	b.n	8008fb6 <xQueueGenericSend+0xaa>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10b      	bne.n	8008fd2 <xQueueGenericSend+0xc6>
	__asm volatile
 8008fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fbe:	f383 8811 	msr	BASEPRI, r3
 8008fc2:	f3bf 8f6f 	isb	sy
 8008fc6:	f3bf 8f4f 	dsb	sy
 8008fca:	61fb      	str	r3, [r7, #28]
}
 8008fcc:	bf00      	nop
 8008fce:	bf00      	nop
 8008fd0:	e7fd      	b.n	8008fce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fd2:	f002 faf9 	bl	800b5c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d302      	bcc.n	8008fe8 <xQueueGenericSend+0xdc>
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d129      	bne.n	800903c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fe8:	683a      	ldr	r2, [r7, #0]
 8008fea:	68b9      	ldr	r1, [r7, #8]
 8008fec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fee:	f000 fc6d 	bl	80098cc <prvCopyDataToQueue>
 8008ff2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d010      	beq.n	800901e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffe:	3324      	adds	r3, #36	@ 0x24
 8009000:	4618      	mov	r0, r3
 8009002:	f001 fa9f 	bl	800a544 <xTaskRemoveFromEventList>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d013      	beq.n	8009034 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800900c:	4b3f      	ldr	r3, [pc, #252]	@ (800910c <xQueueGenericSend+0x200>)
 800900e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	e00a      	b.n	8009034 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800901e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009020:	2b00      	cmp	r3, #0
 8009022:	d007      	beq.n	8009034 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009024:	4b39      	ldr	r3, [pc, #228]	@ (800910c <xQueueGenericSend+0x200>)
 8009026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800902a:	601a      	str	r2, [r3, #0]
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009034:	f002 fafa 	bl	800b62c <vPortExitCritical>
				return pdPASS;
 8009038:	2301      	movs	r3, #1
 800903a:	e063      	b.n	8009104 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d103      	bne.n	800904a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009042:	f002 faf3 	bl	800b62c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009046:	2300      	movs	r3, #0
 8009048:	e05c      	b.n	8009104 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800904a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800904c:	2b00      	cmp	r3, #0
 800904e:	d106      	bne.n	800905e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009050:	f107 0314 	add.w	r3, r7, #20
 8009054:	4618      	mov	r0, r3
 8009056:	f001 fad9 	bl	800a60c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800905a:	2301      	movs	r3, #1
 800905c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800905e:	f002 fae5 	bl	800b62c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009062:	f001 f82f 	bl	800a0c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009066:	f002 faaf 	bl	800b5c8 <vPortEnterCritical>
 800906a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009070:	b25b      	sxtb	r3, r3
 8009072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009076:	d103      	bne.n	8009080 <xQueueGenericSend+0x174>
 8009078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907a:	2200      	movs	r2, #0
 800907c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009082:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009086:	b25b      	sxtb	r3, r3
 8009088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800908c:	d103      	bne.n	8009096 <xQueueGenericSend+0x18a>
 800908e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009090:	2200      	movs	r2, #0
 8009092:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009096:	f002 fac9 	bl	800b62c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800909a:	1d3a      	adds	r2, r7, #4
 800909c:	f107 0314 	add.w	r3, r7, #20
 80090a0:	4611      	mov	r1, r2
 80090a2:	4618      	mov	r0, r3
 80090a4:	f001 fac8 	bl	800a638 <xTaskCheckForTimeOut>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d124      	bne.n	80090f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80090ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090b0:	f000 fd04 	bl	8009abc <prvIsQueueFull>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d018      	beq.n	80090ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80090ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090bc:	3310      	adds	r3, #16
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	4611      	mov	r1, r2
 80090c2:	4618      	mov	r0, r3
 80090c4:	f001 f9ec 	bl	800a4a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80090c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090ca:	f000 fc8f 	bl	80099ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80090ce:	f001 f807 	bl	800a0e0 <xTaskResumeAll>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f47f af7c 	bne.w	8008fd2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80090da:	4b0c      	ldr	r3, [pc, #48]	@ (800910c <xQueueGenericSend+0x200>)
 80090dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090e0:	601a      	str	r2, [r3, #0]
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	e772      	b.n	8008fd2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80090ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090ee:	f000 fc7d 	bl	80099ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090f2:	f000 fff5 	bl	800a0e0 <xTaskResumeAll>
 80090f6:	e76c      	b.n	8008fd2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80090f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090fa:	f000 fc77 	bl	80099ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090fe:	f000 ffef 	bl	800a0e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009102:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009104:	4618      	mov	r0, r3
 8009106:	3738      	adds	r7, #56	@ 0x38
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	e000ed04 	.word	0xe000ed04

08009110 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b090      	sub	sp, #64	@ 0x40
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
 800911c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10b      	bne.n	8009140 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800913a:	bf00      	nop
 800913c:	bf00      	nop
 800913e:	e7fd      	b.n	800913c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d103      	bne.n	800914e <xQueueGenericSendFromISR+0x3e>
 8009146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800914a:	2b00      	cmp	r3, #0
 800914c:	d101      	bne.n	8009152 <xQueueGenericSendFromISR+0x42>
 800914e:	2301      	movs	r3, #1
 8009150:	e000      	b.n	8009154 <xQueueGenericSendFromISR+0x44>
 8009152:	2300      	movs	r3, #0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10b      	bne.n	8009170 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800915c:	f383 8811 	msr	BASEPRI, r3
 8009160:	f3bf 8f6f 	isb	sy
 8009164:	f3bf 8f4f 	dsb	sy
 8009168:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800916a:	bf00      	nop
 800916c:	bf00      	nop
 800916e:	e7fd      	b.n	800916c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	2b02      	cmp	r3, #2
 8009174:	d103      	bne.n	800917e <xQueueGenericSendFromISR+0x6e>
 8009176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800917a:	2b01      	cmp	r3, #1
 800917c:	d101      	bne.n	8009182 <xQueueGenericSendFromISR+0x72>
 800917e:	2301      	movs	r3, #1
 8009180:	e000      	b.n	8009184 <xQueueGenericSendFromISR+0x74>
 8009182:	2300      	movs	r3, #0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10b      	bne.n	80091a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	623b      	str	r3, [r7, #32]
}
 800919a:	bf00      	nop
 800919c:	bf00      	nop
 800919e:	e7fd      	b.n	800919c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091a0:	f002 faf2 	bl	800b788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80091a4:	f3ef 8211 	mrs	r2, BASEPRI
 80091a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	61fa      	str	r2, [r7, #28]
 80091ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80091bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d302      	bcc.n	80091d2 <xQueueGenericSendFromISR+0xc2>
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	d12f      	bne.n	8009232 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80091d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	68b9      	ldr	r1, [r7, #8]
 80091e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80091e8:	f000 fb70 	bl	80098cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80091f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f4:	d112      	bne.n	800921c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d016      	beq.n	800922c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009200:	3324      	adds	r3, #36	@ 0x24
 8009202:	4618      	mov	r0, r3
 8009204:	f001 f99e 	bl	800a544 <xTaskRemoveFromEventList>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00e      	beq.n	800922c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00b      	beq.n	800922c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	e007      	b.n	800922c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800921c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009220:	3301      	adds	r3, #1
 8009222:	b2db      	uxtb	r3, r3
 8009224:	b25a      	sxtb	r2, r3
 8009226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800922c:	2301      	movs	r3, #1
 800922e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009230:	e001      	b.n	8009236 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009232:	2300      	movs	r3, #0
 8009234:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009238:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009240:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009244:	4618      	mov	r0, r3
 8009246:	3740      	adds	r7, #64	@ 0x40
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b08e      	sub	sp, #56	@ 0x38
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800925a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10b      	bne.n	8009278 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	623b      	str	r3, [r7, #32]
}
 8009272:	bf00      	nop
 8009274:	bf00      	nop
 8009276:	e7fd      	b.n	8009274 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00b      	beq.n	8009298 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	61fb      	str	r3, [r7, #28]
}
 8009292:	bf00      	nop
 8009294:	bf00      	nop
 8009296:	e7fd      	b.n	8009294 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d103      	bne.n	80092a8 <xQueueGiveFromISR+0x5c>
 80092a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d101      	bne.n	80092ac <xQueueGiveFromISR+0x60>
 80092a8:	2301      	movs	r3, #1
 80092aa:	e000      	b.n	80092ae <xQueueGiveFromISR+0x62>
 80092ac:	2300      	movs	r3, #0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10b      	bne.n	80092ca <xQueueGiveFromISR+0x7e>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	61bb      	str	r3, [r7, #24]
}
 80092c4:	bf00      	nop
 80092c6:	bf00      	nop
 80092c8:	e7fd      	b.n	80092c6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092ca:	f002 fa5d 	bl	800b788 <vPortValidateInterruptPriority>
	__asm volatile
 80092ce:	f3ef 8211 	mrs	r2, BASEPRI
 80092d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d6:	f383 8811 	msr	BASEPRI, r3
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	617a      	str	r2, [r7, #20]
 80092e4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80092e6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80092f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d22b      	bcs.n	8009352 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009306:	1c5a      	adds	r2, r3, #1
 8009308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800930c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009314:	d112      	bne.n	800933c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800931a:	2b00      	cmp	r3, #0
 800931c:	d016      	beq.n	800934c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800931e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009320:	3324      	adds	r3, #36	@ 0x24
 8009322:	4618      	mov	r0, r3
 8009324:	f001 f90e 	bl	800a544 <xTaskRemoveFromEventList>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00e      	beq.n	800934c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00b      	beq.n	800934c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	2201      	movs	r2, #1
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	e007      	b.n	800934c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800933c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009340:	3301      	adds	r3, #1
 8009342:	b2db      	uxtb	r3, r3
 8009344:	b25a      	sxtb	r2, r3
 8009346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800934c:	2301      	movs	r3, #1
 800934e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009350:	e001      	b.n	8009356 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009352:	2300      	movs	r3, #0
 8009354:	637b      	str	r3, [r7, #52]	@ 0x34
 8009356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009358:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f383 8811 	msr	BASEPRI, r3
}
 8009360:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009364:	4618      	mov	r0, r3
 8009366:	3738      	adds	r7, #56	@ 0x38
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b08c      	sub	sp, #48	@ 0x30
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009378:	2300      	movs	r3, #0
 800937a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10b      	bne.n	800939e <xQueueReceive+0x32>
	__asm volatile
 8009386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800938a:	f383 8811 	msr	BASEPRI, r3
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	623b      	str	r3, [r7, #32]
}
 8009398:	bf00      	nop
 800939a:	bf00      	nop
 800939c:	e7fd      	b.n	800939a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d103      	bne.n	80093ac <xQueueReceive+0x40>
 80093a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <xQueueReceive+0x44>
 80093ac:	2301      	movs	r3, #1
 80093ae:	e000      	b.n	80093b2 <xQueueReceive+0x46>
 80093b0:	2300      	movs	r3, #0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10b      	bne.n	80093ce <xQueueReceive+0x62>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	61fb      	str	r3, [r7, #28]
}
 80093c8:	bf00      	nop
 80093ca:	bf00      	nop
 80093cc:	e7fd      	b.n	80093ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093ce:	f001 fa8f 	bl	800a8f0 <xTaskGetSchedulerState>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d102      	bne.n	80093de <xQueueReceive+0x72>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d101      	bne.n	80093e2 <xQueueReceive+0x76>
 80093de:	2301      	movs	r3, #1
 80093e0:	e000      	b.n	80093e4 <xQueueReceive+0x78>
 80093e2:	2300      	movs	r3, #0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10b      	bne.n	8009400 <xQueueReceive+0x94>
	__asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	61bb      	str	r3, [r7, #24]
}
 80093fa:	bf00      	nop
 80093fc:	bf00      	nop
 80093fe:	e7fd      	b.n	80093fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009400:	f002 f8e2 	bl	800b5c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009408:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800940a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940c:	2b00      	cmp	r3, #0
 800940e:	d01f      	beq.n	8009450 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009410:	68b9      	ldr	r1, [r7, #8]
 8009412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009414:	f000 fac4 	bl	80099a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941a:	1e5a      	subs	r2, r3, #1
 800941c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800941e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00f      	beq.n	8009448 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942a:	3310      	adds	r3, #16
 800942c:	4618      	mov	r0, r3
 800942e:	f001 f889 	bl	800a544 <xTaskRemoveFromEventList>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d007      	beq.n	8009448 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009438:	4b3c      	ldr	r3, [pc, #240]	@ (800952c <xQueueReceive+0x1c0>)
 800943a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800943e:	601a      	str	r2, [r3, #0]
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009448:	f002 f8f0 	bl	800b62c <vPortExitCritical>
				return pdPASS;
 800944c:	2301      	movs	r3, #1
 800944e:	e069      	b.n	8009524 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d103      	bne.n	800945e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009456:	f002 f8e9 	bl	800b62c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800945a:	2300      	movs	r3, #0
 800945c:	e062      	b.n	8009524 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800945e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009460:	2b00      	cmp	r3, #0
 8009462:	d106      	bne.n	8009472 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009464:	f107 0310 	add.w	r3, r7, #16
 8009468:	4618      	mov	r0, r3
 800946a:	f001 f8cf 	bl	800a60c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800946e:	2301      	movs	r3, #1
 8009470:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009472:	f002 f8db 	bl	800b62c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009476:	f000 fe25 	bl	800a0c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800947a:	f002 f8a5 	bl	800b5c8 <vPortEnterCritical>
 800947e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009480:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009484:	b25b      	sxtb	r3, r3
 8009486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948a:	d103      	bne.n	8009494 <xQueueReceive+0x128>
 800948c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948e:	2200      	movs	r2, #0
 8009490:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009496:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800949a:	b25b      	sxtb	r3, r3
 800949c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a0:	d103      	bne.n	80094aa <xQueueReceive+0x13e>
 80094a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094aa:	f002 f8bf 	bl	800b62c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094ae:	1d3a      	adds	r2, r7, #4
 80094b0:	f107 0310 	add.w	r3, r7, #16
 80094b4:	4611      	mov	r1, r2
 80094b6:	4618      	mov	r0, r3
 80094b8:	f001 f8be 	bl	800a638 <xTaskCheckForTimeOut>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d123      	bne.n	800950a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094c4:	f000 fae4 	bl	8009a90 <prvIsQueueEmpty>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d017      	beq.n	80094fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80094ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d0:	3324      	adds	r3, #36	@ 0x24
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	4611      	mov	r1, r2
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 ffe2 	bl	800a4a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80094dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094de:	f000 fa85 	bl	80099ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80094e2:	f000 fdfd 	bl	800a0e0 <xTaskResumeAll>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d189      	bne.n	8009400 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80094ec:	4b0f      	ldr	r3, [pc, #60]	@ (800952c <xQueueReceive+0x1c0>)
 80094ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	e780      	b.n	8009400 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80094fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009500:	f000 fa74 	bl	80099ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009504:	f000 fdec 	bl	800a0e0 <xTaskResumeAll>
 8009508:	e77a      	b.n	8009400 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800950a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800950c:	f000 fa6e 	bl	80099ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009510:	f000 fde6 	bl	800a0e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009514:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009516:	f000 fabb 	bl	8009a90 <prvIsQueueEmpty>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	f43f af6f 	beq.w	8009400 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009522:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009524:	4618      	mov	r0, r3
 8009526:	3730      	adds	r7, #48	@ 0x30
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	e000ed04 	.word	0xe000ed04

08009530 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b08e      	sub	sp, #56	@ 0x38
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800953a:	2300      	movs	r3, #0
 800953c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009542:	2300      	movs	r3, #0
 8009544:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10b      	bne.n	8009564 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800954c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	623b      	str	r3, [r7, #32]
}
 800955e:	bf00      	nop
 8009560:	bf00      	nop
 8009562:	e7fd      	b.n	8009560 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00b      	beq.n	8009584 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009570:	f383 8811 	msr	BASEPRI, r3
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	61fb      	str	r3, [r7, #28]
}
 800957e:	bf00      	nop
 8009580:	bf00      	nop
 8009582:	e7fd      	b.n	8009580 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009584:	f001 f9b4 	bl	800a8f0 <xTaskGetSchedulerState>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d102      	bne.n	8009594 <xQueueSemaphoreTake+0x64>
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d101      	bne.n	8009598 <xQueueSemaphoreTake+0x68>
 8009594:	2301      	movs	r3, #1
 8009596:	e000      	b.n	800959a <xQueueSemaphoreTake+0x6a>
 8009598:	2300      	movs	r3, #0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d10b      	bne.n	80095b6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	61bb      	str	r3, [r7, #24]
}
 80095b0:	bf00      	nop
 80095b2:	bf00      	nop
 80095b4:	e7fd      	b.n	80095b2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095b6:	f002 f807 	bl	800b5c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80095ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095be:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80095c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d024      	beq.n	8009610 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80095c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c8:	1e5a      	subs	r2, r3, #1
 80095ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095cc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d104      	bne.n	80095e0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80095d6:	f001 fb05 	bl	800abe4 <pvTaskIncrementMutexHeldCount>
 80095da:	4602      	mov	r2, r0
 80095dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095de:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00f      	beq.n	8009608 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ea:	3310      	adds	r3, #16
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 ffa9 	bl	800a544 <xTaskRemoveFromEventList>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d007      	beq.n	8009608 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80095f8:	4b54      	ldr	r3, [pc, #336]	@ (800974c <xQueueSemaphoreTake+0x21c>)
 80095fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095fe:	601a      	str	r2, [r3, #0]
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009608:	f002 f810 	bl	800b62c <vPortExitCritical>
				return pdPASS;
 800960c:	2301      	movs	r3, #1
 800960e:	e098      	b.n	8009742 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d112      	bne.n	800963c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00b      	beq.n	8009634 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800961c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	617b      	str	r3, [r7, #20]
}
 800962e:	bf00      	nop
 8009630:	bf00      	nop
 8009632:	e7fd      	b.n	8009630 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009634:	f001 fffa 	bl	800b62c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009638:	2300      	movs	r3, #0
 800963a:	e082      	b.n	8009742 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800963c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800963e:	2b00      	cmp	r3, #0
 8009640:	d106      	bne.n	8009650 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009642:	f107 030c 	add.w	r3, r7, #12
 8009646:	4618      	mov	r0, r3
 8009648:	f000 ffe0 	bl	800a60c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800964c:	2301      	movs	r3, #1
 800964e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009650:	f001 ffec 	bl	800b62c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009654:	f000 fd36 	bl	800a0c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009658:	f001 ffb6 	bl	800b5c8 <vPortEnterCritical>
 800965c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800965e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009662:	b25b      	sxtb	r3, r3
 8009664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009668:	d103      	bne.n	8009672 <xQueueSemaphoreTake+0x142>
 800966a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966c:	2200      	movs	r2, #0
 800966e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009674:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009678:	b25b      	sxtb	r3, r3
 800967a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800967e:	d103      	bne.n	8009688 <xQueueSemaphoreTake+0x158>
 8009680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009682:	2200      	movs	r2, #0
 8009684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009688:	f001 ffd0 	bl	800b62c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800968c:	463a      	mov	r2, r7
 800968e:	f107 030c 	add.w	r3, r7, #12
 8009692:	4611      	mov	r1, r2
 8009694:	4618      	mov	r0, r3
 8009696:	f000 ffcf 	bl	800a638 <xTaskCheckForTimeOut>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d132      	bne.n	8009706 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80096a2:	f000 f9f5 	bl	8009a90 <prvIsQueueEmpty>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d026      	beq.n	80096fa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d109      	bne.n	80096c8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80096b4:	f001 ff88 	bl	800b5c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80096b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	4618      	mov	r0, r3
 80096be:	f001 f935 	bl	800a92c <xTaskPriorityInherit>
 80096c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80096c4:	f001 ffb2 	bl	800b62c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ca:	3324      	adds	r3, #36	@ 0x24
 80096cc:	683a      	ldr	r2, [r7, #0]
 80096ce:	4611      	mov	r1, r2
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 fee5 	bl	800a4a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80096d8:	f000 f988 	bl	80099ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096dc:	f000 fd00 	bl	800a0e0 <xTaskResumeAll>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f47f af67 	bne.w	80095b6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80096e8:	4b18      	ldr	r3, [pc, #96]	@ (800974c <xQueueSemaphoreTake+0x21c>)
 80096ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096ee:	601a      	str	r2, [r3, #0]
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	e75d      	b.n	80095b6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80096fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80096fc:	f000 f976 	bl	80099ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009700:	f000 fcee 	bl	800a0e0 <xTaskResumeAll>
 8009704:	e757      	b.n	80095b6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009706:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009708:	f000 f970 	bl	80099ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800970c:	f000 fce8 	bl	800a0e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009710:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009712:	f000 f9bd 	bl	8009a90 <prvIsQueueEmpty>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	f43f af4c 	beq.w	80095b6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800971e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00d      	beq.n	8009740 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009724:	f001 ff50 	bl	800b5c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009728:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800972a:	f000 f8b7 	bl	800989c <prvGetDisinheritPriorityAfterTimeout>
 800972e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009736:	4618      	mov	r0, r3
 8009738:	f001 f9d0 	bl	800aadc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800973c:	f001 ff76 	bl	800b62c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009740:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009742:	4618      	mov	r0, r3
 8009744:	3738      	adds	r7, #56	@ 0x38
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	e000ed04 	.word	0xe000ed04

08009750 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b08e      	sub	sp, #56	@ 0x38
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10b      	bne.n	800977e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976a:	f383 8811 	msr	BASEPRI, r3
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	f3bf 8f4f 	dsb	sy
 8009776:	623b      	str	r3, [r7, #32]
}
 8009778:	bf00      	nop
 800977a:	bf00      	nop
 800977c:	e7fd      	b.n	800977a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d103      	bne.n	800978c <xQueueReceiveFromISR+0x3c>
 8009784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009788:	2b00      	cmp	r3, #0
 800978a:	d101      	bne.n	8009790 <xQueueReceiveFromISR+0x40>
 800978c:	2301      	movs	r3, #1
 800978e:	e000      	b.n	8009792 <xQueueReceiveFromISR+0x42>
 8009790:	2300      	movs	r3, #0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10b      	bne.n	80097ae <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	61fb      	str	r3, [r7, #28]
}
 80097a8:	bf00      	nop
 80097aa:	bf00      	nop
 80097ac:	e7fd      	b.n	80097aa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097ae:	f001 ffeb 	bl	800b788 <vPortValidateInterruptPriority>
	__asm volatile
 80097b2:	f3ef 8211 	mrs	r2, BASEPRI
 80097b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	61ba      	str	r2, [r7, #24]
 80097c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80097ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d02f      	beq.n	800983a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80097da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80097e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80097e4:	68b9      	ldr	r1, [r7, #8]
 80097e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097e8:	f000 f8da 	bl	80099a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80097ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ee:	1e5a      	subs	r2, r3, #1
 80097f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80097f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80097f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fc:	d112      	bne.n	8009824 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d016      	beq.n	8009834 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009808:	3310      	adds	r3, #16
 800980a:	4618      	mov	r0, r3
 800980c:	f000 fe9a 	bl	800a544 <xTaskRemoveFromEventList>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00e      	beq.n	8009834 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00b      	beq.n	8009834 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	601a      	str	r2, [r3, #0]
 8009822:	e007      	b.n	8009834 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009824:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009828:	3301      	adds	r3, #1
 800982a:	b2db      	uxtb	r3, r3
 800982c:	b25a      	sxtb	r2, r3
 800982e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009834:	2301      	movs	r3, #1
 8009836:	637b      	str	r3, [r7, #52]	@ 0x34
 8009838:	e001      	b.n	800983e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800983a:	2300      	movs	r3, #0
 800983c:	637b      	str	r3, [r7, #52]	@ 0x34
 800983e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009840:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	f383 8811 	msr	BASEPRI, r3
}
 8009848:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800984a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800984c:	4618      	mov	r0, r3
 800984e:	3738      	adds	r7, #56	@ 0x38
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10b      	bne.n	800987e <vQueueDelete+0x2a>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	60bb      	str	r3, [r7, #8]
}
 8009878:	bf00      	nop
 800987a:	bf00      	nop
 800987c:	e7fd      	b.n	800987a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f000 f95e 	bl	8009b40 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800988a:	2b00      	cmp	r3, #0
 800988c:	d102      	bne.n	8009894 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f002 f88a 	bl	800b9a8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009894:	bf00      	nop
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d006      	beq.n	80098ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80098b6:	60fb      	str	r3, [r7, #12]
 80098b8:	e001      	b.n	80098be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80098ba:	2300      	movs	r3, #0
 80098bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80098be:	68fb      	ldr	r3, [r7, #12]
	}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80098d8:	2300      	movs	r3, #0
 80098da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10d      	bne.n	8009906 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d14d      	bne.n	800998e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f001 f880 	bl	800a9fc <xTaskPriorityDisinherit>
 80098fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	609a      	str	r2, [r3, #8]
 8009904:	e043      	b.n	800998e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d119      	bne.n	8009940 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6858      	ldr	r0, [r3, #4]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009914:	461a      	mov	r2, r3
 8009916:	68b9      	ldr	r1, [r7, #8]
 8009918:	f00c fd07 	bl	801632a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009924:	441a      	add	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	429a      	cmp	r2, r3
 8009934:	d32b      	bcc.n	800998e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	605a      	str	r2, [r3, #4]
 800993e:	e026      	b.n	800998e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	68d8      	ldr	r0, [r3, #12]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009948:	461a      	mov	r2, r3
 800994a:	68b9      	ldr	r1, [r7, #8]
 800994c:	f00c fced 	bl	801632a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	68da      	ldr	r2, [r3, #12]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009958:	425b      	negs	r3, r3
 800995a:	441a      	add	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	68da      	ldr	r2, [r3, #12]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	429a      	cmp	r2, r3
 800996a:	d207      	bcs.n	800997c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	689a      	ldr	r2, [r3, #8]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009974:	425b      	negs	r3, r3
 8009976:	441a      	add	r2, r3
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b02      	cmp	r3, #2
 8009980:	d105      	bne.n	800998e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d002      	beq.n	800998e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	3b01      	subs	r3, #1
 800998c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	1c5a      	adds	r2, r3, #1
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009996:	697b      	ldr	r3, [r7, #20]
}
 8009998:	4618      	mov	r0, r3
 800999a:	3718      	adds	r7, #24
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d018      	beq.n	80099e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	68da      	ldr	r2, [r3, #12]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ba:	441a      	add	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	68da      	ldr	r2, [r3, #12]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d303      	bcc.n	80099d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	68d9      	ldr	r1, [r3, #12]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099dc:	461a      	mov	r2, r3
 80099de:	6838      	ldr	r0, [r7, #0]
 80099e0:	f00c fca3 	bl	801632a <memcpy>
	}
}
 80099e4:	bf00      	nop
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80099f4:	f001 fde8 	bl	800b5c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a00:	e011      	b.n	8009a26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d012      	beq.n	8009a30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	3324      	adds	r3, #36	@ 0x24
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 fd98 	bl	800a544 <xTaskRemoveFromEventList>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a1a:	f000 fe71 	bl	800a700 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a1e:	7bfb      	ldrb	r3, [r7, #15]
 8009a20:	3b01      	subs	r3, #1
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	dce9      	bgt.n	8009a02 <prvUnlockQueue+0x16>
 8009a2e:	e000      	b.n	8009a32 <prvUnlockQueue+0x46>
					break;
 8009a30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	22ff      	movs	r2, #255	@ 0xff
 8009a36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009a3a:	f001 fdf7 	bl	800b62c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009a3e:	f001 fdc3 	bl	800b5c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a4a:	e011      	b.n	8009a70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d012      	beq.n	8009a7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3310      	adds	r3, #16
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f000 fd73 	bl	800a544 <xTaskRemoveFromEventList>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d001      	beq.n	8009a68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009a64:	f000 fe4c 	bl	800a700 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	dce9      	bgt.n	8009a4c <prvUnlockQueue+0x60>
 8009a78:	e000      	b.n	8009a7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009a7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	22ff      	movs	r2, #255	@ 0xff
 8009a80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009a84:	f001 fdd2 	bl	800b62c <vPortExitCritical>
}
 8009a88:	bf00      	nop
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a98:	f001 fd96 	bl	800b5c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d102      	bne.n	8009aaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	60fb      	str	r3, [r7, #12]
 8009aa8:	e001      	b.n	8009aae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009aae:	f001 fdbd 	bl	800b62c <vPortExitCritical>

	return xReturn;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ac4:	f001 fd80 	bl	800b5c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d102      	bne.n	8009ada <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	60fb      	str	r3, [r7, #12]
 8009ad8:	e001      	b.n	8009ade <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009ada:	2300      	movs	r3, #0
 8009adc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ade:	f001 fda5 	bl	800b62c <vPortExitCritical>

	return xReturn;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009af6:	2300      	movs	r3, #0
 8009af8:	60fb      	str	r3, [r7, #12]
 8009afa:	e014      	b.n	8009b26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009afc:	4a0f      	ldr	r2, [pc, #60]	@ (8009b3c <vQueueAddToRegistry+0x50>)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d10b      	bne.n	8009b20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009b08:	490c      	ldr	r1, [pc, #48]	@ (8009b3c <vQueueAddToRegistry+0x50>)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	683a      	ldr	r2, [r7, #0]
 8009b0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009b12:	4a0a      	ldr	r2, [pc, #40]	@ (8009b3c <vQueueAddToRegistry+0x50>)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	00db      	lsls	r3, r3, #3
 8009b18:	4413      	add	r3, r2
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009b1e:	e006      	b.n	8009b2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3301      	adds	r3, #1
 8009b24:	60fb      	str	r3, [r7, #12]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2b07      	cmp	r3, #7
 8009b2a:	d9e7      	bls.n	8009afc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009b2c:	bf00      	nop
 8009b2e:	bf00      	nop
 8009b30:	3714      	adds	r7, #20
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	24001c68 	.word	0x24001c68

08009b40 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b48:	2300      	movs	r3, #0
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	e016      	b.n	8009b7c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009b4e:	4a10      	ldr	r2, [pc, #64]	@ (8009b90 <vQueueUnregisterQueue+0x50>)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	00db      	lsls	r3, r3, #3
 8009b54:	4413      	add	r3, r2
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d10b      	bne.n	8009b76 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8009b90 <vQueueUnregisterQueue+0x50>)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2100      	movs	r1, #0
 8009b64:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009b68:	4a09      	ldr	r2, [pc, #36]	@ (8009b90 <vQueueUnregisterQueue+0x50>)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	4413      	add	r3, r2
 8009b70:	2200      	movs	r2, #0
 8009b72:	605a      	str	r2, [r3, #4]
				break;
 8009b74:	e006      	b.n	8009b84 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2b07      	cmp	r3, #7
 8009b80:	d9e5      	bls.n	8009b4e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009b82:	bf00      	nop
 8009b84:	bf00      	nop
 8009b86:	3714      	adds	r7, #20
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	24001c68 	.word	0x24001c68

08009b94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009ba4:	f001 fd10 	bl	800b5c8 <vPortEnterCritical>
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009bae:	b25b      	sxtb	r3, r3
 8009bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb4:	d103      	bne.n	8009bbe <vQueueWaitForMessageRestricted+0x2a>
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009bc4:	b25b      	sxtb	r3, r3
 8009bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bca:	d103      	bne.n	8009bd4 <vQueueWaitForMessageRestricted+0x40>
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009bd4:	f001 fd2a 	bl	800b62c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d106      	bne.n	8009bee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	3324      	adds	r3, #36	@ 0x24
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	68b9      	ldr	r1, [r7, #8]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 fc7f 	bl	800a4ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009bee:	6978      	ldr	r0, [r7, #20]
 8009bf0:	f7ff fefc 	bl	80099ec <prvUnlockQueue>
	}
 8009bf4:	bf00      	nop
 8009bf6:	3718      	adds	r7, #24
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b08e      	sub	sp, #56	@ 0x38
 8009c00:	af04      	add	r7, sp, #16
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
 8009c08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10b      	bne.n	8009c28 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	623b      	str	r3, [r7, #32]
}
 8009c22:	bf00      	nop
 8009c24:	bf00      	nop
 8009c26:	e7fd      	b.n	8009c24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10b      	bne.n	8009c46 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	61fb      	str	r3, [r7, #28]
}
 8009c40:	bf00      	nop
 8009c42:	bf00      	nop
 8009c44:	e7fd      	b.n	8009c42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c46:	23a8      	movs	r3, #168	@ 0xa8
 8009c48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	2ba8      	cmp	r3, #168	@ 0xa8
 8009c4e:	d00b      	beq.n	8009c68 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	61bb      	str	r3, [r7, #24]
}
 8009c62:	bf00      	nop
 8009c64:	bf00      	nop
 8009c66:	e7fd      	b.n	8009c64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009c68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d01e      	beq.n	8009cae <xTaskCreateStatic+0xb2>
 8009c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d01b      	beq.n	8009cae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c82:	2202      	movs	r2, #2
 8009c84:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c88:	2300      	movs	r3, #0
 8009c8a:	9303      	str	r3, [sp, #12]
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8e:	9302      	str	r3, [sp, #8]
 8009c90:	f107 0314 	add.w	r3, r7, #20
 8009c94:	9301      	str	r3, [sp, #4]
 8009c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	68b9      	ldr	r1, [r7, #8]
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 f851 	bl	8009d48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ca6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009ca8:	f000 f8f6 	bl	8009e98 <prvAddNewTaskToReadyList>
 8009cac:	e001      	b.n	8009cb2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009cb2:	697b      	ldr	r3, [r7, #20]
	}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3728      	adds	r7, #40	@ 0x28
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b08c      	sub	sp, #48	@ 0x30
 8009cc0:	af04      	add	r7, sp, #16
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	603b      	str	r3, [r7, #0]
 8009cc8:	4613      	mov	r3, r2
 8009cca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009ccc:	88fb      	ldrh	r3, [r7, #6]
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f001 fd9b 	bl	800b80c <pvPortMalloc>
 8009cd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00e      	beq.n	8009cfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009cde:	20a8      	movs	r0, #168	@ 0xa8
 8009ce0:	f001 fd94 	bl	800b80c <pvPortMalloc>
 8009ce4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d003      	beq.n	8009cf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	697a      	ldr	r2, [r7, #20]
 8009cf0:	631a      	str	r2, [r3, #48]	@ 0x30
 8009cf2:	e005      	b.n	8009d00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009cf4:	6978      	ldr	r0, [r7, #20]
 8009cf6:	f001 fe57 	bl	800b9a8 <vPortFree>
 8009cfa:	e001      	b.n	8009d00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d017      	beq.n	8009d36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d0e:	88fa      	ldrh	r2, [r7, #6]
 8009d10:	2300      	movs	r3, #0
 8009d12:	9303      	str	r3, [sp, #12]
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	9302      	str	r3, [sp, #8]
 8009d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d1a:	9301      	str	r3, [sp, #4]
 8009d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	68b9      	ldr	r1, [r7, #8]
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f000 f80f 	bl	8009d48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d2a:	69f8      	ldr	r0, [r7, #28]
 8009d2c:	f000 f8b4 	bl	8009e98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d30:	2301      	movs	r3, #1
 8009d32:	61bb      	str	r3, [r7, #24]
 8009d34:	e002      	b.n	8009d3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d36:	f04f 33ff 	mov.w	r3, #4294967295
 8009d3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d3c:	69bb      	ldr	r3, [r7, #24]
	}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3720      	adds	r7, #32
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
	...

08009d48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b088      	sub	sp, #32
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
 8009d54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d58:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	461a      	mov	r2, r3
 8009d60:	21a5      	movs	r1, #165	@ 0xa5
 8009d62:	f00c fa10 	bl	8016186 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009d70:	440b      	add	r3, r1
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4413      	add	r3, r2
 8009d76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	f023 0307 	bic.w	r3, r3, #7
 8009d7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	f003 0307 	and.w	r3, r3, #7
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00b      	beq.n	8009da2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	617b      	str	r3, [r7, #20]
}
 8009d9c:	bf00      	nop
 8009d9e:	bf00      	nop
 8009da0:	e7fd      	b.n	8009d9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d01f      	beq.n	8009de8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009da8:	2300      	movs	r3, #0
 8009daa:	61fb      	str	r3, [r7, #28]
 8009dac:	e012      	b.n	8009dd4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	4413      	add	r3, r2
 8009db4:	7819      	ldrb	r1, [r3, #0]
 8009db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	4413      	add	r3, r2
 8009dbc:	3334      	adds	r3, #52	@ 0x34
 8009dbe:	460a      	mov	r2, r1
 8009dc0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d006      	beq.n	8009ddc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	61fb      	str	r3, [r7, #28]
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	2b0f      	cmp	r3, #15
 8009dd8:	d9e9      	bls.n	8009dae <prvInitialiseNewTask+0x66>
 8009dda:	e000      	b.n	8009dde <prvInitialiseNewTask+0x96>
			{
				break;
 8009ddc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009de6:	e003      	b.n	8009df0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dea:	2200      	movs	r2, #0
 8009dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df2:	2b37      	cmp	r3, #55	@ 0x37
 8009df4:	d901      	bls.n	8009dfa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009df6:	2337      	movs	r3, #55	@ 0x37
 8009df8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e04:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e08:	2200      	movs	r2, #0
 8009e0a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0e:	3304      	adds	r3, #4
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7fe fd7b 	bl	800890c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e18:	3318      	adds	r3, #24
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7fe fd76 	bl	800890c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e34:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e48:	3354      	adds	r3, #84	@ 0x54
 8009e4a:	224c      	movs	r2, #76	@ 0x4c
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f00c f999 	bl	8016186 <memset>
 8009e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e56:	4a0d      	ldr	r2, [pc, #52]	@ (8009e8c <prvInitialiseNewTask+0x144>)
 8009e58:	659a      	str	r2, [r3, #88]	@ 0x58
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8009e90 <prvInitialiseNewTask+0x148>)
 8009e5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e62:	4a0c      	ldr	r2, [pc, #48]	@ (8009e94 <prvInitialiseNewTask+0x14c>)
 8009e64:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	68f9      	ldr	r1, [r7, #12]
 8009e6a:	69b8      	ldr	r0, [r7, #24]
 8009e6c:	f001 fa7c 	bl	800b368 <pxPortInitialiseStack>
 8009e70:	4602      	mov	r2, r0
 8009e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e82:	bf00      	nop
 8009e84:	3720      	adds	r7, #32
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	2400cb2c 	.word	0x2400cb2c
 8009e90:	2400cb94 	.word	0x2400cb94
 8009e94:	2400cbfc 	.word	0x2400cbfc

08009e98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ea0:	f001 fb92 	bl	800b5c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8009f5c <prvAddNewTaskToReadyList+0xc4>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	4a2c      	ldr	r2, [pc, #176]	@ (8009f5c <prvAddNewTaskToReadyList+0xc4>)
 8009eac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009eae:	4b2c      	ldr	r3, [pc, #176]	@ (8009f60 <prvAddNewTaskToReadyList+0xc8>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d109      	bne.n	8009eca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8009f60 <prvAddNewTaskToReadyList+0xc8>)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ebc:	4b27      	ldr	r3, [pc, #156]	@ (8009f5c <prvAddNewTaskToReadyList+0xc4>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d110      	bne.n	8009ee6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009ec4:	f000 fc40 	bl	800a748 <prvInitialiseTaskLists>
 8009ec8:	e00d      	b.n	8009ee6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009eca:	4b26      	ldr	r3, [pc, #152]	@ (8009f64 <prvAddNewTaskToReadyList+0xcc>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d109      	bne.n	8009ee6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ed2:	4b23      	ldr	r3, [pc, #140]	@ (8009f60 <prvAddNewTaskToReadyList+0xc8>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d802      	bhi.n	8009ee6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8009f60 <prvAddNewTaskToReadyList+0xc8>)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ee6:	4b20      	ldr	r3, [pc, #128]	@ (8009f68 <prvAddNewTaskToReadyList+0xd0>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3301      	adds	r3, #1
 8009eec:	4a1e      	ldr	r2, [pc, #120]	@ (8009f68 <prvAddNewTaskToReadyList+0xd0>)
 8009eee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8009f68 <prvAddNewTaskToReadyList+0xd0>)
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009efc:	4b1b      	ldr	r3, [pc, #108]	@ (8009f6c <prvAddNewTaskToReadyList+0xd4>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d903      	bls.n	8009f0c <prvAddNewTaskToReadyList+0x74>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f08:	4a18      	ldr	r2, [pc, #96]	@ (8009f6c <prvAddNewTaskToReadyList+0xd4>)
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f10:	4613      	mov	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4a15      	ldr	r2, [pc, #84]	@ (8009f70 <prvAddNewTaskToReadyList+0xd8>)
 8009f1a:	441a      	add	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	3304      	adds	r3, #4
 8009f20:	4619      	mov	r1, r3
 8009f22:	4610      	mov	r0, r2
 8009f24:	f7fe fcff 	bl	8008926 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f28:	f001 fb80 	bl	800b62c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8009f64 <prvAddNewTaskToReadyList+0xcc>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00e      	beq.n	8009f52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f34:	4b0a      	ldr	r3, [pc, #40]	@ (8009f60 <prvAddNewTaskToReadyList+0xc8>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d207      	bcs.n	8009f52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f42:	4b0c      	ldr	r3, [pc, #48]	@ (8009f74 <prvAddNewTaskToReadyList+0xdc>)
 8009f44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f48:	601a      	str	r2, [r3, #0]
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f52:	bf00      	nop
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	2400217c 	.word	0x2400217c
 8009f60:	24001ca8 	.word	0x24001ca8
 8009f64:	24002188 	.word	0x24002188
 8009f68:	24002198 	.word	0x24002198
 8009f6c:	24002184 	.word	0x24002184
 8009f70:	24001cac 	.word	0x24001cac
 8009f74:	e000ed04 	.word	0xe000ed04

08009f78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f80:	2300      	movs	r3, #0
 8009f82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d018      	beq.n	8009fbc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f8a:	4b14      	ldr	r3, [pc, #80]	@ (8009fdc <vTaskDelay+0x64>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00b      	beq.n	8009faa <vTaskDelay+0x32>
	__asm volatile
 8009f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	60bb      	str	r3, [r7, #8]
}
 8009fa4:	bf00      	nop
 8009fa6:	bf00      	nop
 8009fa8:	e7fd      	b.n	8009fa6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009faa:	f000 f88b 	bl	800a0c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009fae:	2100      	movs	r1, #0
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 fe2b 	bl	800ac0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009fb6:	f000 f893 	bl	800a0e0 <xTaskResumeAll>
 8009fba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d107      	bne.n	8009fd2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009fc2:	4b07      	ldr	r3, [pc, #28]	@ (8009fe0 <vTaskDelay+0x68>)
 8009fc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fc8:	601a      	str	r2, [r3, #0]
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fd2:	bf00      	nop
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	240021a4 	.word	0x240021a4
 8009fe0:	e000ed04 	.word	0xe000ed04

08009fe4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b08a      	sub	sp, #40	@ 0x28
 8009fe8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009fea:	2300      	movs	r3, #0
 8009fec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009ff2:	463a      	mov	r2, r7
 8009ff4:	1d39      	adds	r1, r7, #4
 8009ff6:	f107 0308 	add.w	r3, r7, #8
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fe fc32 	bl	8008864 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	9202      	str	r2, [sp, #8]
 800a008:	9301      	str	r3, [sp, #4]
 800a00a:	2300      	movs	r3, #0
 800a00c:	9300      	str	r3, [sp, #0]
 800a00e:	2300      	movs	r3, #0
 800a010:	460a      	mov	r2, r1
 800a012:	4924      	ldr	r1, [pc, #144]	@ (800a0a4 <vTaskStartScheduler+0xc0>)
 800a014:	4824      	ldr	r0, [pc, #144]	@ (800a0a8 <vTaskStartScheduler+0xc4>)
 800a016:	f7ff fdf1 	bl	8009bfc <xTaskCreateStatic>
 800a01a:	4603      	mov	r3, r0
 800a01c:	4a23      	ldr	r2, [pc, #140]	@ (800a0ac <vTaskStartScheduler+0xc8>)
 800a01e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a020:	4b22      	ldr	r3, [pc, #136]	@ (800a0ac <vTaskStartScheduler+0xc8>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d002      	beq.n	800a02e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a028:	2301      	movs	r3, #1
 800a02a:	617b      	str	r3, [r7, #20]
 800a02c:	e001      	b.n	800a032 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a02e:	2300      	movs	r3, #0
 800a030:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d102      	bne.n	800a03e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a038:	f000 fe3c 	bl	800acb4 <xTimerCreateTimerTask>
 800a03c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d11b      	bne.n	800a07c <vTaskStartScheduler+0x98>
	__asm volatile
 800a044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	613b      	str	r3, [r7, #16]
}
 800a056:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a058:	4b15      	ldr	r3, [pc, #84]	@ (800a0b0 <vTaskStartScheduler+0xcc>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	3354      	adds	r3, #84	@ 0x54
 800a05e:	4a15      	ldr	r2, [pc, #84]	@ (800a0b4 <vTaskStartScheduler+0xd0>)
 800a060:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a062:	4b15      	ldr	r3, [pc, #84]	@ (800a0b8 <vTaskStartScheduler+0xd4>)
 800a064:	f04f 32ff 	mov.w	r2, #4294967295
 800a068:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a06a:	4b14      	ldr	r3, [pc, #80]	@ (800a0bc <vTaskStartScheduler+0xd8>)
 800a06c:	2201      	movs	r2, #1
 800a06e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a070:	4b13      	ldr	r3, [pc, #76]	@ (800a0c0 <vTaskStartScheduler+0xdc>)
 800a072:	2200      	movs	r2, #0
 800a074:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a076:	f001 fa03 	bl	800b480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a07a:	e00f      	b.n	800a09c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a082:	d10b      	bne.n	800a09c <vTaskStartScheduler+0xb8>
	__asm volatile
 800a084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a088:	f383 8811 	msr	BASEPRI, r3
 800a08c:	f3bf 8f6f 	isb	sy
 800a090:	f3bf 8f4f 	dsb	sy
 800a094:	60fb      	str	r3, [r7, #12]
}
 800a096:	bf00      	nop
 800a098:	bf00      	nop
 800a09a:	e7fd      	b.n	800a098 <vTaskStartScheduler+0xb4>
}
 800a09c:	bf00      	nop
 800a09e:	3718      	adds	r7, #24
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	08017604 	.word	0x08017604
 800a0a8:	0800a719 	.word	0x0800a719
 800a0ac:	240021a0 	.word	0x240021a0
 800a0b0:	24001ca8 	.word	0x24001ca8
 800a0b4:	24000040 	.word	0x24000040
 800a0b8:	2400219c 	.word	0x2400219c
 800a0bc:	24002188 	.word	0x24002188
 800a0c0:	24002180 	.word	0x24002180

0800a0c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a0c8:	4b04      	ldr	r3, [pc, #16]	@ (800a0dc <vTaskSuspendAll+0x18>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	4a03      	ldr	r2, [pc, #12]	@ (800a0dc <vTaskSuspendAll+0x18>)
 800a0d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a0d2:	bf00      	nop
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	240021a4 	.word	0x240021a4

0800a0e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a0ee:	4b42      	ldr	r3, [pc, #264]	@ (800a1f8 <xTaskResumeAll+0x118>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10b      	bne.n	800a10e <xTaskResumeAll+0x2e>
	__asm volatile
 800a0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	603b      	str	r3, [r7, #0]
}
 800a108:	bf00      	nop
 800a10a:	bf00      	nop
 800a10c:	e7fd      	b.n	800a10a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a10e:	f001 fa5b 	bl	800b5c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a112:	4b39      	ldr	r3, [pc, #228]	@ (800a1f8 <xTaskResumeAll+0x118>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3b01      	subs	r3, #1
 800a118:	4a37      	ldr	r2, [pc, #220]	@ (800a1f8 <xTaskResumeAll+0x118>)
 800a11a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a11c:	4b36      	ldr	r3, [pc, #216]	@ (800a1f8 <xTaskResumeAll+0x118>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d162      	bne.n	800a1ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a124:	4b35      	ldr	r3, [pc, #212]	@ (800a1fc <xTaskResumeAll+0x11c>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d05e      	beq.n	800a1ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a12c:	e02f      	b.n	800a18e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a12e:	4b34      	ldr	r3, [pc, #208]	@ (800a200 <xTaskResumeAll+0x120>)
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	3318      	adds	r3, #24
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fe fc50 	bl	80089e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	3304      	adds	r3, #4
 800a144:	4618      	mov	r0, r3
 800a146:	f7fe fc4b 	bl	80089e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a14e:	4b2d      	ldr	r3, [pc, #180]	@ (800a204 <xTaskResumeAll+0x124>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	429a      	cmp	r2, r3
 800a154:	d903      	bls.n	800a15e <xTaskResumeAll+0x7e>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a15a:	4a2a      	ldr	r2, [pc, #168]	@ (800a204 <xTaskResumeAll+0x124>)
 800a15c:	6013      	str	r3, [r2, #0]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a162:	4613      	mov	r3, r2
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	4413      	add	r3, r2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4a27      	ldr	r2, [pc, #156]	@ (800a208 <xTaskResumeAll+0x128>)
 800a16c:	441a      	add	r2, r3
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	3304      	adds	r3, #4
 800a172:	4619      	mov	r1, r3
 800a174:	4610      	mov	r0, r2
 800a176:	f7fe fbd6 	bl	8008926 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a17e:	4b23      	ldr	r3, [pc, #140]	@ (800a20c <xTaskResumeAll+0x12c>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a184:	429a      	cmp	r2, r3
 800a186:	d302      	bcc.n	800a18e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a188:	4b21      	ldr	r3, [pc, #132]	@ (800a210 <xTaskResumeAll+0x130>)
 800a18a:	2201      	movs	r2, #1
 800a18c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a18e:	4b1c      	ldr	r3, [pc, #112]	@ (800a200 <xTaskResumeAll+0x120>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1cb      	bne.n	800a12e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a19c:	f000 fb78 	bl	800a890 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a1a0:	4b1c      	ldr	r3, [pc, #112]	@ (800a214 <xTaskResumeAll+0x134>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d010      	beq.n	800a1ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a1ac:	f000 f858 	bl	800a260 <xTaskIncrementTick>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d002      	beq.n	800a1bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a1b6:	4b16      	ldr	r3, [pc, #88]	@ (800a210 <xTaskResumeAll+0x130>)
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1f1      	bne.n	800a1ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a1c8:	4b12      	ldr	r3, [pc, #72]	@ (800a214 <xTaskResumeAll+0x134>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a1ce:	4b10      	ldr	r3, [pc, #64]	@ (800a210 <xTaskResumeAll+0x130>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d009      	beq.n	800a1ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a1da:	4b0f      	ldr	r3, [pc, #60]	@ (800a218 <xTaskResumeAll+0x138>)
 800a1dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1e0:	601a      	str	r2, [r3, #0]
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1ea:	f001 fa1f 	bl	800b62c <vPortExitCritical>

	return xAlreadyYielded;
 800a1ee:	68bb      	ldr	r3, [r7, #8]
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	240021a4 	.word	0x240021a4
 800a1fc:	2400217c 	.word	0x2400217c
 800a200:	2400213c 	.word	0x2400213c
 800a204:	24002184 	.word	0x24002184
 800a208:	24001cac 	.word	0x24001cac
 800a20c:	24001ca8 	.word	0x24001ca8
 800a210:	24002190 	.word	0x24002190
 800a214:	2400218c 	.word	0x2400218c
 800a218:	e000ed04 	.word	0xe000ed04

0800a21c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a222:	4b05      	ldr	r3, [pc, #20]	@ (800a238 <xTaskGetTickCount+0x1c>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a228:	687b      	ldr	r3, [r7, #4]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	370c      	adds	r7, #12
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop
 800a238:	24002180 	.word	0x24002180

0800a23c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a242:	f001 faa1 	bl	800b788 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a246:	2300      	movs	r3, #0
 800a248:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a24a:	4b04      	ldr	r3, [pc, #16]	@ (800a25c <xTaskGetTickCountFromISR+0x20>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a250:	683b      	ldr	r3, [r7, #0]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	24002180 	.word	0x24002180

0800a260 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b086      	sub	sp, #24
 800a264:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a266:	2300      	movs	r3, #0
 800a268:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a26a:	4b4f      	ldr	r3, [pc, #316]	@ (800a3a8 <xTaskIncrementTick+0x148>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f040 8090 	bne.w	800a394 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a274:	4b4d      	ldr	r3, [pc, #308]	@ (800a3ac <xTaskIncrementTick+0x14c>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	3301      	adds	r3, #1
 800a27a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a27c:	4a4b      	ldr	r2, [pc, #300]	@ (800a3ac <xTaskIncrementTick+0x14c>)
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d121      	bne.n	800a2cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a288:	4b49      	ldr	r3, [pc, #292]	@ (800a3b0 <xTaskIncrementTick+0x150>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00b      	beq.n	800a2aa <xTaskIncrementTick+0x4a>
	__asm volatile
 800a292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	603b      	str	r3, [r7, #0]
}
 800a2a4:	bf00      	nop
 800a2a6:	bf00      	nop
 800a2a8:	e7fd      	b.n	800a2a6 <xTaskIncrementTick+0x46>
 800a2aa:	4b41      	ldr	r3, [pc, #260]	@ (800a3b0 <xTaskIncrementTick+0x150>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	60fb      	str	r3, [r7, #12]
 800a2b0:	4b40      	ldr	r3, [pc, #256]	@ (800a3b4 <xTaskIncrementTick+0x154>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a3e      	ldr	r2, [pc, #248]	@ (800a3b0 <xTaskIncrementTick+0x150>)
 800a2b6:	6013      	str	r3, [r2, #0]
 800a2b8:	4a3e      	ldr	r2, [pc, #248]	@ (800a3b4 <xTaskIncrementTick+0x154>)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6013      	str	r3, [r2, #0]
 800a2be:	4b3e      	ldr	r3, [pc, #248]	@ (800a3b8 <xTaskIncrementTick+0x158>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	4a3c      	ldr	r2, [pc, #240]	@ (800a3b8 <xTaskIncrementTick+0x158>)
 800a2c6:	6013      	str	r3, [r2, #0]
 800a2c8:	f000 fae2 	bl	800a890 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a2cc:	4b3b      	ldr	r3, [pc, #236]	@ (800a3bc <xTaskIncrementTick+0x15c>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	693a      	ldr	r2, [r7, #16]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d349      	bcc.n	800a36a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2d6:	4b36      	ldr	r3, [pc, #216]	@ (800a3b0 <xTaskIncrementTick+0x150>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d104      	bne.n	800a2ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2e0:	4b36      	ldr	r3, [pc, #216]	@ (800a3bc <xTaskIncrementTick+0x15c>)
 800a2e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e6:	601a      	str	r2, [r3, #0]
					break;
 800a2e8:	e03f      	b.n	800a36a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2ea:	4b31      	ldr	r3, [pc, #196]	@ (800a3b0 <xTaskIncrementTick+0x150>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a2fa:	693a      	ldr	r2, [r7, #16]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d203      	bcs.n	800a30a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a302:	4a2e      	ldr	r2, [pc, #184]	@ (800a3bc <xTaskIncrementTick+0x15c>)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a308:	e02f      	b.n	800a36a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	3304      	adds	r3, #4
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fe fb66 	bl	80089e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d004      	beq.n	800a326 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	3318      	adds	r3, #24
 800a320:	4618      	mov	r0, r3
 800a322:	f7fe fb5d 	bl	80089e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a32a:	4b25      	ldr	r3, [pc, #148]	@ (800a3c0 <xTaskIncrementTick+0x160>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d903      	bls.n	800a33a <xTaskIncrementTick+0xda>
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a336:	4a22      	ldr	r2, [pc, #136]	@ (800a3c0 <xTaskIncrementTick+0x160>)
 800a338:	6013      	str	r3, [r2, #0]
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a33e:	4613      	mov	r3, r2
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	4413      	add	r3, r2
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	4a1f      	ldr	r2, [pc, #124]	@ (800a3c4 <xTaskIncrementTick+0x164>)
 800a348:	441a      	add	r2, r3
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	3304      	adds	r3, #4
 800a34e:	4619      	mov	r1, r3
 800a350:	4610      	mov	r0, r2
 800a352:	f7fe fae8 	bl	8008926 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a35a:	4b1b      	ldr	r3, [pc, #108]	@ (800a3c8 <xTaskIncrementTick+0x168>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a360:	429a      	cmp	r2, r3
 800a362:	d3b8      	bcc.n	800a2d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a364:	2301      	movs	r3, #1
 800a366:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a368:	e7b5      	b.n	800a2d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a36a:	4b17      	ldr	r3, [pc, #92]	@ (800a3c8 <xTaskIncrementTick+0x168>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a370:	4914      	ldr	r1, [pc, #80]	@ (800a3c4 <xTaskIncrementTick+0x164>)
 800a372:	4613      	mov	r3, r2
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	4413      	add	r3, r2
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	440b      	add	r3, r1
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d901      	bls.n	800a386 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a382:	2301      	movs	r3, #1
 800a384:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a386:	4b11      	ldr	r3, [pc, #68]	@ (800a3cc <xTaskIncrementTick+0x16c>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d007      	beq.n	800a39e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a38e:	2301      	movs	r3, #1
 800a390:	617b      	str	r3, [r7, #20]
 800a392:	e004      	b.n	800a39e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a394:	4b0e      	ldr	r3, [pc, #56]	@ (800a3d0 <xTaskIncrementTick+0x170>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3301      	adds	r3, #1
 800a39a:	4a0d      	ldr	r2, [pc, #52]	@ (800a3d0 <xTaskIncrementTick+0x170>)
 800a39c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a39e:	697b      	ldr	r3, [r7, #20]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3718      	adds	r7, #24
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	240021a4 	.word	0x240021a4
 800a3ac:	24002180 	.word	0x24002180
 800a3b0:	24002134 	.word	0x24002134
 800a3b4:	24002138 	.word	0x24002138
 800a3b8:	24002194 	.word	0x24002194
 800a3bc:	2400219c 	.word	0x2400219c
 800a3c0:	24002184 	.word	0x24002184
 800a3c4:	24001cac 	.word	0x24001cac
 800a3c8:	24001ca8 	.word	0x24001ca8
 800a3cc:	24002190 	.word	0x24002190
 800a3d0:	2400218c 	.word	0x2400218c

0800a3d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a3da:	4b2b      	ldr	r3, [pc, #172]	@ (800a488 <vTaskSwitchContext+0xb4>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d003      	beq.n	800a3ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a3e2:	4b2a      	ldr	r3, [pc, #168]	@ (800a48c <vTaskSwitchContext+0xb8>)
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a3e8:	e047      	b.n	800a47a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a3ea:	4b28      	ldr	r3, [pc, #160]	@ (800a48c <vTaskSwitchContext+0xb8>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3f0:	4b27      	ldr	r3, [pc, #156]	@ (800a490 <vTaskSwitchContext+0xbc>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	60fb      	str	r3, [r7, #12]
 800a3f6:	e011      	b.n	800a41c <vTaskSwitchContext+0x48>
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10b      	bne.n	800a416 <vTaskSwitchContext+0x42>
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	607b      	str	r3, [r7, #4]
}
 800a410:	bf00      	nop
 800a412:	bf00      	nop
 800a414:	e7fd      	b.n	800a412 <vTaskSwitchContext+0x3e>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	3b01      	subs	r3, #1
 800a41a:	60fb      	str	r3, [r7, #12]
 800a41c:	491d      	ldr	r1, [pc, #116]	@ (800a494 <vTaskSwitchContext+0xc0>)
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	4613      	mov	r3, r2
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4413      	add	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	440b      	add	r3, r1
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d0e3      	beq.n	800a3f8 <vTaskSwitchContext+0x24>
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	4613      	mov	r3, r2
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	4413      	add	r3, r2
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4a16      	ldr	r2, [pc, #88]	@ (800a494 <vTaskSwitchContext+0xc0>)
 800a43c:	4413      	add	r3, r2
 800a43e:	60bb      	str	r3, [r7, #8]
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	685a      	ldr	r2, [r3, #4]
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	605a      	str	r2, [r3, #4]
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	685a      	ldr	r2, [r3, #4]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	3308      	adds	r3, #8
 800a452:	429a      	cmp	r2, r3
 800a454:	d104      	bne.n	800a460 <vTaskSwitchContext+0x8c>
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	605a      	str	r2, [r3, #4]
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	4a0c      	ldr	r2, [pc, #48]	@ (800a498 <vTaskSwitchContext+0xc4>)
 800a468:	6013      	str	r3, [r2, #0]
 800a46a:	4a09      	ldr	r2, [pc, #36]	@ (800a490 <vTaskSwitchContext+0xbc>)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a470:	4b09      	ldr	r3, [pc, #36]	@ (800a498 <vTaskSwitchContext+0xc4>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	3354      	adds	r3, #84	@ 0x54
 800a476:	4a09      	ldr	r2, [pc, #36]	@ (800a49c <vTaskSwitchContext+0xc8>)
 800a478:	6013      	str	r3, [r2, #0]
}
 800a47a:	bf00      	nop
 800a47c:	3714      	adds	r7, #20
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	240021a4 	.word	0x240021a4
 800a48c:	24002190 	.word	0x24002190
 800a490:	24002184 	.word	0x24002184
 800a494:	24001cac 	.word	0x24001cac
 800a498:	24001ca8 	.word	0x24001ca8
 800a49c:	24000040 	.word	0x24000040

0800a4a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10b      	bne.n	800a4c8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	60fb      	str	r3, [r7, #12]
}
 800a4c2:	bf00      	nop
 800a4c4:	bf00      	nop
 800a4c6:	e7fd      	b.n	800a4c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4c8:	4b07      	ldr	r3, [pc, #28]	@ (800a4e8 <vTaskPlaceOnEventList+0x48>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	3318      	adds	r3, #24
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f7fe fa4c 	bl	800896e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4d6:	2101      	movs	r1, #1
 800a4d8:	6838      	ldr	r0, [r7, #0]
 800a4da:	f000 fb97 	bl	800ac0c <prvAddCurrentTaskToDelayedList>
}
 800a4de:	bf00      	nop
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	24001ca8 	.word	0x24001ca8

0800a4ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d10b      	bne.n	800a516 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	617b      	str	r3, [r7, #20]
}
 800a510:	bf00      	nop
 800a512:	bf00      	nop
 800a514:	e7fd      	b.n	800a512 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a516:	4b0a      	ldr	r3, [pc, #40]	@ (800a540 <vTaskPlaceOnEventListRestricted+0x54>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	3318      	adds	r3, #24
 800a51c:	4619      	mov	r1, r3
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f7fe fa01 	bl	8008926 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d002      	beq.n	800a530 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a52a:	f04f 33ff 	mov.w	r3, #4294967295
 800a52e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a530:	6879      	ldr	r1, [r7, #4]
 800a532:	68b8      	ldr	r0, [r7, #8]
 800a534:	f000 fb6a 	bl	800ac0c <prvAddCurrentTaskToDelayedList>
	}
 800a538:	bf00      	nop
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	24001ca8 	.word	0x24001ca8

0800a544 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b086      	sub	sp, #24
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d10b      	bne.n	800a572 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a55a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55e:	f383 8811 	msr	BASEPRI, r3
 800a562:	f3bf 8f6f 	isb	sy
 800a566:	f3bf 8f4f 	dsb	sy
 800a56a:	60fb      	str	r3, [r7, #12]
}
 800a56c:	bf00      	nop
 800a56e:	bf00      	nop
 800a570:	e7fd      	b.n	800a56e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	3318      	adds	r3, #24
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe fa32 	bl	80089e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a57c:	4b1d      	ldr	r3, [pc, #116]	@ (800a5f4 <xTaskRemoveFromEventList+0xb0>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d11d      	bne.n	800a5c0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	3304      	adds	r3, #4
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fe fa29 	bl	80089e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a592:	4b19      	ldr	r3, [pc, #100]	@ (800a5f8 <xTaskRemoveFromEventList+0xb4>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	429a      	cmp	r2, r3
 800a598:	d903      	bls.n	800a5a2 <xTaskRemoveFromEventList+0x5e>
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a59e:	4a16      	ldr	r2, [pc, #88]	@ (800a5f8 <xTaskRemoveFromEventList+0xb4>)
 800a5a0:	6013      	str	r3, [r2, #0]
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	4413      	add	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4a13      	ldr	r2, [pc, #76]	@ (800a5fc <xTaskRemoveFromEventList+0xb8>)
 800a5b0:	441a      	add	r2, r3
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	4610      	mov	r0, r2
 800a5ba:	f7fe f9b4 	bl	8008926 <vListInsertEnd>
 800a5be:	e005      	b.n	800a5cc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	3318      	adds	r3, #24
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	480e      	ldr	r0, [pc, #56]	@ (800a600 <xTaskRemoveFromEventList+0xbc>)
 800a5c8:	f7fe f9ad 	bl	8008926 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a604 <xTaskRemoveFromEventList+0xc0>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d905      	bls.n	800a5e6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a5de:	4b0a      	ldr	r3, [pc, #40]	@ (800a608 <xTaskRemoveFromEventList+0xc4>)
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	601a      	str	r2, [r3, #0]
 800a5e4:	e001      	b.n	800a5ea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a5ea:	697b      	ldr	r3, [r7, #20]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3718      	adds	r7, #24
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	240021a4 	.word	0x240021a4
 800a5f8:	24002184 	.word	0x24002184
 800a5fc:	24001cac 	.word	0x24001cac
 800a600:	2400213c 	.word	0x2400213c
 800a604:	24001ca8 	.word	0x24001ca8
 800a608:	24002190 	.word	0x24002190

0800a60c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a614:	4b06      	ldr	r3, [pc, #24]	@ (800a630 <vTaskInternalSetTimeOutState+0x24>)
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a61c:	4b05      	ldr	r3, [pc, #20]	@ (800a634 <vTaskInternalSetTimeOutState+0x28>)
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	605a      	str	r2, [r3, #4]
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr
 800a630:	24002194 	.word	0x24002194
 800a634:	24002180 	.word	0x24002180

0800a638 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b088      	sub	sp, #32
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d10b      	bne.n	800a660 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	613b      	str	r3, [r7, #16]
}
 800a65a:	bf00      	nop
 800a65c:	bf00      	nop
 800a65e:	e7fd      	b.n	800a65c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d10b      	bne.n	800a67e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	60fb      	str	r3, [r7, #12]
}
 800a678:	bf00      	nop
 800a67a:	bf00      	nop
 800a67c:	e7fd      	b.n	800a67a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a67e:	f000 ffa3 	bl	800b5c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a682:	4b1d      	ldr	r3, [pc, #116]	@ (800a6f8 <xTaskCheckForTimeOut+0xc0>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	69ba      	ldr	r2, [r7, #24]
 800a68e:	1ad3      	subs	r3, r2, r3
 800a690:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a69a:	d102      	bne.n	800a6a2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a69c:	2300      	movs	r3, #0
 800a69e:	61fb      	str	r3, [r7, #28]
 800a6a0:	e023      	b.n	800a6ea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	4b15      	ldr	r3, [pc, #84]	@ (800a6fc <xTaskCheckForTimeOut+0xc4>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d007      	beq.n	800a6be <xTaskCheckForTimeOut+0x86>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	69ba      	ldr	r2, [r7, #24]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d302      	bcc.n	800a6be <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	61fb      	str	r3, [r7, #28]
 800a6bc:	e015      	b.n	800a6ea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	697a      	ldr	r2, [r7, #20]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d20b      	bcs.n	800a6e0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	1ad2      	subs	r2, r2, r3
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7ff ff99 	bl	800a60c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	61fb      	str	r3, [r7, #28]
 800a6de:	e004      	b.n	800a6ea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a6ea:	f000 ff9f 	bl	800b62c <vPortExitCritical>

	return xReturn;
 800a6ee:	69fb      	ldr	r3, [r7, #28]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3720      	adds	r7, #32
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	24002180 	.word	0x24002180
 800a6fc:	24002194 	.word	0x24002194

0800a700 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a700:	b480      	push	{r7}
 800a702:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a704:	4b03      	ldr	r3, [pc, #12]	@ (800a714 <vTaskMissedYield+0x14>)
 800a706:	2201      	movs	r2, #1
 800a708:	601a      	str	r2, [r3, #0]
}
 800a70a:	bf00      	nop
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr
 800a714:	24002190 	.word	0x24002190

0800a718 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a720:	f000 f852 	bl	800a7c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a724:	4b06      	ldr	r3, [pc, #24]	@ (800a740 <prvIdleTask+0x28>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d9f9      	bls.n	800a720 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a72c:	4b05      	ldr	r3, [pc, #20]	@ (800a744 <prvIdleTask+0x2c>)
 800a72e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a732:	601a      	str	r2, [r3, #0]
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a73c:	e7f0      	b.n	800a720 <prvIdleTask+0x8>
 800a73e:	bf00      	nop
 800a740:	24001cac 	.word	0x24001cac
 800a744:	e000ed04 	.word	0xe000ed04

0800a748 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a74e:	2300      	movs	r3, #0
 800a750:	607b      	str	r3, [r7, #4]
 800a752:	e00c      	b.n	800a76e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	4613      	mov	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	4a12      	ldr	r2, [pc, #72]	@ (800a7a8 <prvInitialiseTaskLists+0x60>)
 800a760:	4413      	add	r3, r2
 800a762:	4618      	mov	r0, r3
 800a764:	f7fe f8b2 	bl	80088cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	3301      	adds	r3, #1
 800a76c:	607b      	str	r3, [r7, #4]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2b37      	cmp	r3, #55	@ 0x37
 800a772:	d9ef      	bls.n	800a754 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a774:	480d      	ldr	r0, [pc, #52]	@ (800a7ac <prvInitialiseTaskLists+0x64>)
 800a776:	f7fe f8a9 	bl	80088cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a77a:	480d      	ldr	r0, [pc, #52]	@ (800a7b0 <prvInitialiseTaskLists+0x68>)
 800a77c:	f7fe f8a6 	bl	80088cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a780:	480c      	ldr	r0, [pc, #48]	@ (800a7b4 <prvInitialiseTaskLists+0x6c>)
 800a782:	f7fe f8a3 	bl	80088cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a786:	480c      	ldr	r0, [pc, #48]	@ (800a7b8 <prvInitialiseTaskLists+0x70>)
 800a788:	f7fe f8a0 	bl	80088cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a78c:	480b      	ldr	r0, [pc, #44]	@ (800a7bc <prvInitialiseTaskLists+0x74>)
 800a78e:	f7fe f89d 	bl	80088cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a792:	4b0b      	ldr	r3, [pc, #44]	@ (800a7c0 <prvInitialiseTaskLists+0x78>)
 800a794:	4a05      	ldr	r2, [pc, #20]	@ (800a7ac <prvInitialiseTaskLists+0x64>)
 800a796:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a798:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c4 <prvInitialiseTaskLists+0x7c>)
 800a79a:	4a05      	ldr	r2, [pc, #20]	@ (800a7b0 <prvInitialiseTaskLists+0x68>)
 800a79c:	601a      	str	r2, [r3, #0]
}
 800a79e:	bf00      	nop
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	24001cac 	.word	0x24001cac
 800a7ac:	2400210c 	.word	0x2400210c
 800a7b0:	24002120 	.word	0x24002120
 800a7b4:	2400213c 	.word	0x2400213c
 800a7b8:	24002150 	.word	0x24002150
 800a7bc:	24002168 	.word	0x24002168
 800a7c0:	24002134 	.word	0x24002134
 800a7c4:	24002138 	.word	0x24002138

0800a7c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7ce:	e019      	b.n	800a804 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a7d0:	f000 fefa 	bl	800b5c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7d4:	4b10      	ldr	r3, [pc, #64]	@ (800a818 <prvCheckTasksWaitingTermination+0x50>)
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	3304      	adds	r3, #4
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7fe f8fd 	bl	80089e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a7e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a81c <prvCheckTasksWaitingTermination+0x54>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	4a0b      	ldr	r2, [pc, #44]	@ (800a81c <prvCheckTasksWaitingTermination+0x54>)
 800a7ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a7f0:	4b0b      	ldr	r3, [pc, #44]	@ (800a820 <prvCheckTasksWaitingTermination+0x58>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	4a0a      	ldr	r2, [pc, #40]	@ (800a820 <prvCheckTasksWaitingTermination+0x58>)
 800a7f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a7fa:	f000 ff17 	bl	800b62c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 f810 	bl	800a824 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a804:	4b06      	ldr	r3, [pc, #24]	@ (800a820 <prvCheckTasksWaitingTermination+0x58>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1e1      	bne.n	800a7d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a80c:	bf00      	nop
 800a80e:	bf00      	nop
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	24002150 	.word	0x24002150
 800a81c:	2400217c 	.word	0x2400217c
 800a820:	24002164 	.word	0x24002164

0800a824 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	3354      	adds	r3, #84	@ 0x54
 800a830:	4618      	mov	r0, r3
 800a832:	f00b fcc1 	bl	80161b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d108      	bne.n	800a852 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a844:	4618      	mov	r0, r3
 800a846:	f001 f8af 	bl	800b9a8 <vPortFree>
				vPortFree( pxTCB );
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f001 f8ac 	bl	800b9a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a850:	e019      	b.n	800a886 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d103      	bne.n	800a864 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f001 f8a3 	bl	800b9a8 <vPortFree>
	}
 800a862:	e010      	b.n	800a886 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d00b      	beq.n	800a886 <prvDeleteTCB+0x62>
	__asm volatile
 800a86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	60fb      	str	r3, [r7, #12]
}
 800a880:	bf00      	nop
 800a882:	bf00      	nop
 800a884:	e7fd      	b.n	800a882 <prvDeleteTCB+0x5e>
	}
 800a886:	bf00      	nop
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a896:	4b0c      	ldr	r3, [pc, #48]	@ (800a8c8 <prvResetNextTaskUnblockTime+0x38>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d104      	bne.n	800a8aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a8cc <prvResetNextTaskUnblockTime+0x3c>)
 800a8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a8a8:	e008      	b.n	800a8bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8aa:	4b07      	ldr	r3, [pc, #28]	@ (800a8c8 <prvResetNextTaskUnblockTime+0x38>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	4a04      	ldr	r2, [pc, #16]	@ (800a8cc <prvResetNextTaskUnblockTime+0x3c>)
 800a8ba:	6013      	str	r3, [r2, #0]
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr
 800a8c8:	24002134 	.word	0x24002134
 800a8cc:	2400219c 	.word	0x2400219c

0800a8d0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a8d6:	4b05      	ldr	r3, [pc, #20]	@ (800a8ec <xTaskGetCurrentTaskHandle+0x1c>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a8dc:	687b      	ldr	r3, [r7, #4]
	}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	370c      	adds	r7, #12
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	24001ca8 	.word	0x24001ca8

0800a8f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a8f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a924 <xTaskGetSchedulerState+0x34>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d102      	bne.n	800a904 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a8fe:	2301      	movs	r3, #1
 800a900:	607b      	str	r3, [r7, #4]
 800a902:	e008      	b.n	800a916 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a904:	4b08      	ldr	r3, [pc, #32]	@ (800a928 <xTaskGetSchedulerState+0x38>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d102      	bne.n	800a912 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a90c:	2302      	movs	r3, #2
 800a90e:	607b      	str	r3, [r7, #4]
 800a910:	e001      	b.n	800a916 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a912:	2300      	movs	r3, #0
 800a914:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a916:	687b      	ldr	r3, [r7, #4]
	}
 800a918:	4618      	mov	r0, r3
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr
 800a924:	24002188 	.word	0x24002188
 800a928:	240021a4 	.word	0x240021a4

0800a92c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a938:	2300      	movs	r3, #0
 800a93a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d051      	beq.n	800a9e6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a946:	4b2a      	ldr	r3, [pc, #168]	@ (800a9f0 <xTaskPriorityInherit+0xc4>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d241      	bcs.n	800a9d4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	699b      	ldr	r3, [r3, #24]
 800a954:	2b00      	cmp	r3, #0
 800a956:	db06      	blt.n	800a966 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a958:	4b25      	ldr	r3, [pc, #148]	@ (800a9f0 <xTaskPriorityInherit+0xc4>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a95e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	6959      	ldr	r1, [r3, #20]
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a96e:	4613      	mov	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4413      	add	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4a1f      	ldr	r2, [pc, #124]	@ (800a9f4 <xTaskPriorityInherit+0xc8>)
 800a978:	4413      	add	r3, r2
 800a97a:	4299      	cmp	r1, r3
 800a97c:	d122      	bne.n	800a9c4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	3304      	adds	r3, #4
 800a982:	4618      	mov	r0, r3
 800a984:	f7fe f82c 	bl	80089e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a988:	4b19      	ldr	r3, [pc, #100]	@ (800a9f0 <xTaskPriorityInherit+0xc4>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a996:	4b18      	ldr	r3, [pc, #96]	@ (800a9f8 <xTaskPriorityInherit+0xcc>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d903      	bls.n	800a9a6 <xTaskPriorityInherit+0x7a>
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a2:	4a15      	ldr	r2, [pc, #84]	@ (800a9f8 <xTaskPriorityInherit+0xcc>)
 800a9a4:	6013      	str	r3, [r2, #0]
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	4413      	add	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4a10      	ldr	r2, [pc, #64]	@ (800a9f4 <xTaskPriorityInherit+0xc8>)
 800a9b4:	441a      	add	r2, r3
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	4610      	mov	r0, r2
 800a9be:	f7fd ffb2 	bl	8008926 <vListInsertEnd>
 800a9c2:	e004      	b.n	800a9ce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a9c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a9f0 <xTaskPriorityInherit+0xc4>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	60fb      	str	r3, [r7, #12]
 800a9d2:	e008      	b.n	800a9e6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a9d8:	4b05      	ldr	r3, [pc, #20]	@ (800a9f0 <xTaskPriorityInherit+0xc4>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d201      	bcs.n	800a9e6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
	}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	24001ca8 	.word	0x24001ca8
 800a9f4:	24001cac 	.word	0x24001cac
 800a9f8:	24002184 	.word	0x24002184

0800a9fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b086      	sub	sp, #24
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d058      	beq.n	800aac4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aa12:	4b2f      	ldr	r3, [pc, #188]	@ (800aad0 <xTaskPriorityDisinherit+0xd4>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	693a      	ldr	r2, [r7, #16]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d00b      	beq.n	800aa34 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	60fb      	str	r3, [r7, #12]
}
 800aa2e:	bf00      	nop
 800aa30:	bf00      	nop
 800aa32:	e7fd      	b.n	800aa30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10b      	bne.n	800aa54 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800aa3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	60bb      	str	r3, [r7, #8]
}
 800aa4e:	bf00      	nop
 800aa50:	bf00      	nop
 800aa52:	e7fd      	b.n	800aa50 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa58:	1e5a      	subs	r2, r3, #1
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d02c      	beq.n	800aac4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d128      	bne.n	800aac4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	3304      	adds	r3, #4
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fd ffb2 	bl	80089e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa88:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa94:	4b0f      	ldr	r3, [pc, #60]	@ (800aad4 <xTaskPriorityDisinherit+0xd8>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d903      	bls.n	800aaa4 <xTaskPriorityDisinherit+0xa8>
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa0:	4a0c      	ldr	r2, [pc, #48]	@ (800aad4 <xTaskPriorityDisinherit+0xd8>)
 800aaa2:	6013      	str	r3, [r2, #0]
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	4413      	add	r3, r2
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	4a09      	ldr	r2, [pc, #36]	@ (800aad8 <xTaskPriorityDisinherit+0xdc>)
 800aab2:	441a      	add	r2, r3
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	3304      	adds	r3, #4
 800aab8:	4619      	mov	r1, r3
 800aaba:	4610      	mov	r0, r2
 800aabc:	f7fd ff33 	bl	8008926 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aac0:	2301      	movs	r3, #1
 800aac2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aac4:	697b      	ldr	r3, [r7, #20]
	}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3718      	adds	r7, #24
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	24001ca8 	.word	0x24001ca8
 800aad4:	24002184 	.word	0x24002184
 800aad8:	24001cac 	.word	0x24001cac

0800aadc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b088      	sub	sp, #32
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aaea:	2301      	movs	r3, #1
 800aaec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d06c      	beq.n	800abce <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d10b      	bne.n	800ab14 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800aafc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab00:	f383 8811 	msr	BASEPRI, r3
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	60fb      	str	r3, [r7, #12]
}
 800ab0e:	bf00      	nop
 800ab10:	bf00      	nop
 800ab12:	e7fd      	b.n	800ab10 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab18:	683a      	ldr	r2, [r7, #0]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d902      	bls.n	800ab24 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	61fb      	str	r3, [r7, #28]
 800ab22:	e002      	b.n	800ab2a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab28:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab2e:	69fa      	ldr	r2, [r7, #28]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d04c      	beq.n	800abce <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab38:	697a      	ldr	r2, [r7, #20]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d147      	bne.n	800abce <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ab3e:	4b26      	ldr	r3, [pc, #152]	@ (800abd8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	69ba      	ldr	r2, [r7, #24]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d10b      	bne.n	800ab60 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ab48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	60bb      	str	r3, [r7, #8]
}
 800ab5a:	bf00      	nop
 800ab5c:	bf00      	nop
 800ab5e:	e7fd      	b.n	800ab5c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab64:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	69fa      	ldr	r2, [r7, #28]
 800ab6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	699b      	ldr	r3, [r3, #24]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	db04      	blt.n	800ab7e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	6959      	ldr	r1, [r3, #20]
 800ab82:	693a      	ldr	r2, [r7, #16]
 800ab84:	4613      	mov	r3, r2
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4413      	add	r3, r2
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	4a13      	ldr	r2, [pc, #76]	@ (800abdc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ab8e:	4413      	add	r3, r2
 800ab90:	4299      	cmp	r1, r3
 800ab92:	d11c      	bne.n	800abce <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab94:	69bb      	ldr	r3, [r7, #24]
 800ab96:	3304      	adds	r3, #4
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7fd ff21 	bl	80089e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aba2:	4b0f      	ldr	r3, [pc, #60]	@ (800abe0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d903      	bls.n	800abb2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800abaa:	69bb      	ldr	r3, [r7, #24]
 800abac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abae:	4a0c      	ldr	r2, [pc, #48]	@ (800abe0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800abb0:	6013      	str	r3, [r2, #0]
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abb6:	4613      	mov	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	4a07      	ldr	r2, [pc, #28]	@ (800abdc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800abc0:	441a      	add	r2, r3
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	3304      	adds	r3, #4
 800abc6:	4619      	mov	r1, r3
 800abc8:	4610      	mov	r0, r2
 800abca:	f7fd feac 	bl	8008926 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800abce:	bf00      	nop
 800abd0:	3720      	adds	r7, #32
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	24001ca8 	.word	0x24001ca8
 800abdc:	24001cac 	.word	0x24001cac
 800abe0:	24002184 	.word	0x24002184

0800abe4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800abe4:	b480      	push	{r7}
 800abe6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800abe8:	4b07      	ldr	r3, [pc, #28]	@ (800ac08 <pvTaskIncrementMutexHeldCount+0x24>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d004      	beq.n	800abfa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800abf0:	4b05      	ldr	r3, [pc, #20]	@ (800ac08 <pvTaskIncrementMutexHeldCount+0x24>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800abf6:	3201      	adds	r2, #1
 800abf8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800abfa:	4b03      	ldr	r3, [pc, #12]	@ (800ac08 <pvTaskIncrementMutexHeldCount+0x24>)
 800abfc:	681b      	ldr	r3, [r3, #0]
	}
 800abfe:	4618      	mov	r0, r3
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	24001ca8 	.word	0x24001ca8

0800ac0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac16:	4b21      	ldr	r3, [pc, #132]	@ (800ac9c <prvAddCurrentTaskToDelayedList+0x90>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac1c:	4b20      	ldr	r3, [pc, #128]	@ (800aca0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	3304      	adds	r3, #4
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fd fedc 	bl	80089e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac2e:	d10a      	bne.n	800ac46 <prvAddCurrentTaskToDelayedList+0x3a>
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d007      	beq.n	800ac46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac36:	4b1a      	ldr	r3, [pc, #104]	@ (800aca0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	3304      	adds	r3, #4
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	4819      	ldr	r0, [pc, #100]	@ (800aca4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ac40:	f7fd fe71 	bl	8008926 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac44:	e026      	b.n	800ac94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac4e:	4b14      	ldr	r3, [pc, #80]	@ (800aca0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	68ba      	ldr	r2, [r7, #8]
 800ac54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac56:	68ba      	ldr	r2, [r7, #8]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d209      	bcs.n	800ac72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac5e:	4b12      	ldr	r3, [pc, #72]	@ (800aca8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	4b0f      	ldr	r3, [pc, #60]	@ (800aca0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	3304      	adds	r3, #4
 800ac68:	4619      	mov	r1, r3
 800ac6a:	4610      	mov	r0, r2
 800ac6c:	f7fd fe7f 	bl	800896e <vListInsert>
}
 800ac70:	e010      	b.n	800ac94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac72:	4b0e      	ldr	r3, [pc, #56]	@ (800acac <prvAddCurrentTaskToDelayedList+0xa0>)
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	4b0a      	ldr	r3, [pc, #40]	@ (800aca0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	4610      	mov	r0, r2
 800ac80:	f7fd fe75 	bl	800896e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac84:	4b0a      	ldr	r3, [pc, #40]	@ (800acb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d202      	bcs.n	800ac94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac8e:	4a08      	ldr	r2, [pc, #32]	@ (800acb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	6013      	str	r3, [r2, #0]
}
 800ac94:	bf00      	nop
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	24002180 	.word	0x24002180
 800aca0:	24001ca8 	.word	0x24001ca8
 800aca4:	24002168 	.word	0x24002168
 800aca8:	24002138 	.word	0x24002138
 800acac:	24002134 	.word	0x24002134
 800acb0:	2400219c 	.word	0x2400219c

0800acb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b08a      	sub	sp, #40	@ 0x28
 800acb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800acba:	2300      	movs	r3, #0
 800acbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800acbe:	f000 fb13 	bl	800b2e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800acc2:	4b1d      	ldr	r3, [pc, #116]	@ (800ad38 <xTimerCreateTimerTask+0x84>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d021      	beq.n	800ad0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800acca:	2300      	movs	r3, #0
 800accc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800acce:	2300      	movs	r3, #0
 800acd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800acd2:	1d3a      	adds	r2, r7, #4
 800acd4:	f107 0108 	add.w	r1, r7, #8
 800acd8:	f107 030c 	add.w	r3, r7, #12
 800acdc:	4618      	mov	r0, r3
 800acde:	f7fd fddb 	bl	8008898 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ace2:	6879      	ldr	r1, [r7, #4]
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	9202      	str	r2, [sp, #8]
 800acea:	9301      	str	r3, [sp, #4]
 800acec:	2302      	movs	r3, #2
 800acee:	9300      	str	r3, [sp, #0]
 800acf0:	2300      	movs	r3, #0
 800acf2:	460a      	mov	r2, r1
 800acf4:	4911      	ldr	r1, [pc, #68]	@ (800ad3c <xTimerCreateTimerTask+0x88>)
 800acf6:	4812      	ldr	r0, [pc, #72]	@ (800ad40 <xTimerCreateTimerTask+0x8c>)
 800acf8:	f7fe ff80 	bl	8009bfc <xTaskCreateStatic>
 800acfc:	4603      	mov	r3, r0
 800acfe:	4a11      	ldr	r2, [pc, #68]	@ (800ad44 <xTimerCreateTimerTask+0x90>)
 800ad00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad02:	4b10      	ldr	r3, [pc, #64]	@ (800ad44 <xTimerCreateTimerTask+0x90>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d001      	beq.n	800ad0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d10b      	bne.n	800ad2c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ad14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad18:	f383 8811 	msr	BASEPRI, r3
 800ad1c:	f3bf 8f6f 	isb	sy
 800ad20:	f3bf 8f4f 	dsb	sy
 800ad24:	613b      	str	r3, [r7, #16]
}
 800ad26:	bf00      	nop
 800ad28:	bf00      	nop
 800ad2a:	e7fd      	b.n	800ad28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ad2c:	697b      	ldr	r3, [r7, #20]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3718      	adds	r7, #24
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	240021d8 	.word	0x240021d8
 800ad3c:	0801760c 	.word	0x0801760c
 800ad40:	0800ae81 	.word	0x0800ae81
 800ad44:	240021dc 	.word	0x240021dc

0800ad48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b08a      	sub	sp, #40	@ 0x28
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	607a      	str	r2, [r7, #4]
 800ad54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ad56:	2300      	movs	r3, #0
 800ad58:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d10b      	bne.n	800ad78 <xTimerGenericCommand+0x30>
	__asm volatile
 800ad60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	623b      	str	r3, [r7, #32]
}
 800ad72:	bf00      	nop
 800ad74:	bf00      	nop
 800ad76:	e7fd      	b.n	800ad74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ad78:	4b19      	ldr	r3, [pc, #100]	@ (800ade0 <xTimerGenericCommand+0x98>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d02a      	beq.n	800add6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	2b05      	cmp	r3, #5
 800ad90:	dc18      	bgt.n	800adc4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad92:	f7ff fdad 	bl	800a8f0 <xTaskGetSchedulerState>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	d109      	bne.n	800adb0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad9c:	4b10      	ldr	r3, [pc, #64]	@ (800ade0 <xTimerGenericCommand+0x98>)
 800ad9e:	6818      	ldr	r0, [r3, #0]
 800ada0:	f107 0110 	add.w	r1, r7, #16
 800ada4:	2300      	movs	r3, #0
 800ada6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ada8:	f7fe f8b0 	bl	8008f0c <xQueueGenericSend>
 800adac:	6278      	str	r0, [r7, #36]	@ 0x24
 800adae:	e012      	b.n	800add6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800adb0:	4b0b      	ldr	r3, [pc, #44]	@ (800ade0 <xTimerGenericCommand+0x98>)
 800adb2:	6818      	ldr	r0, [r3, #0]
 800adb4:	f107 0110 	add.w	r1, r7, #16
 800adb8:	2300      	movs	r3, #0
 800adba:	2200      	movs	r2, #0
 800adbc:	f7fe f8a6 	bl	8008f0c <xQueueGenericSend>
 800adc0:	6278      	str	r0, [r7, #36]	@ 0x24
 800adc2:	e008      	b.n	800add6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800adc4:	4b06      	ldr	r3, [pc, #24]	@ (800ade0 <xTimerGenericCommand+0x98>)
 800adc6:	6818      	ldr	r0, [r3, #0]
 800adc8:	f107 0110 	add.w	r1, r7, #16
 800adcc:	2300      	movs	r3, #0
 800adce:	683a      	ldr	r2, [r7, #0]
 800add0:	f7fe f99e 	bl	8009110 <xQueueGenericSendFromISR>
 800add4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800add6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800add8:	4618      	mov	r0, r3
 800adda:	3728      	adds	r7, #40	@ 0x28
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	240021d8 	.word	0x240021d8

0800ade4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b088      	sub	sp, #32
 800ade8:	af02      	add	r7, sp, #8
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adee:	4b23      	ldr	r3, [pc, #140]	@ (800ae7c <prvProcessExpiredTimer+0x98>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	3304      	adds	r3, #4
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fd fdef 	bl	80089e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae08:	f003 0304 	and.w	r3, r3, #4
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d023      	beq.n	800ae58 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	699a      	ldr	r2, [r3, #24]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	18d1      	adds	r1, r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	6978      	ldr	r0, [r7, #20]
 800ae1e:	f000 f8d5 	bl	800afcc <prvInsertTimerInActiveList>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d020      	beq.n	800ae6a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae28:	2300      	movs	r3, #0
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	2100      	movs	r1, #0
 800ae32:	6978      	ldr	r0, [r7, #20]
 800ae34:	f7ff ff88 	bl	800ad48 <xTimerGenericCommand>
 800ae38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d114      	bne.n	800ae6a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	60fb      	str	r3, [r7, #12]
}
 800ae52:	bf00      	nop
 800ae54:	bf00      	nop
 800ae56:	e7fd      	b.n	800ae54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae5e:	f023 0301 	bic.w	r3, r3, #1
 800ae62:	b2da      	uxtb	r2, r3
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	6a1b      	ldr	r3, [r3, #32]
 800ae6e:	6978      	ldr	r0, [r7, #20]
 800ae70:	4798      	blx	r3
}
 800ae72:	bf00      	nop
 800ae74:	3718      	adds	r7, #24
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	240021d0 	.word	0x240021d0

0800ae80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae88:	f107 0308 	add.w	r3, r7, #8
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 f859 	bl	800af44 <prvGetNextExpireTime>
 800ae92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	4619      	mov	r1, r3
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f000 f805 	bl	800aea8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ae9e:	f000 f8d7 	bl	800b050 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aea2:	bf00      	nop
 800aea4:	e7f0      	b.n	800ae88 <prvTimerTask+0x8>
	...

0800aea8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aeb2:	f7ff f907 	bl	800a0c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aeb6:	f107 0308 	add.w	r3, r7, #8
 800aeba:	4618      	mov	r0, r3
 800aebc:	f000 f866 	bl	800af8c <prvSampleTimeNow>
 800aec0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d130      	bne.n	800af2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d10a      	bne.n	800aee4 <prvProcessTimerOrBlockTask+0x3c>
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d806      	bhi.n	800aee4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aed6:	f7ff f903 	bl	800a0e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aeda:	68f9      	ldr	r1, [r7, #12]
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f7ff ff81 	bl	800ade4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aee2:	e024      	b.n	800af2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d008      	beq.n	800aefc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aeea:	4b13      	ldr	r3, [pc, #76]	@ (800af38 <prvProcessTimerOrBlockTask+0x90>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d101      	bne.n	800aef8 <prvProcessTimerOrBlockTask+0x50>
 800aef4:	2301      	movs	r3, #1
 800aef6:	e000      	b.n	800aefa <prvProcessTimerOrBlockTask+0x52>
 800aef8:	2300      	movs	r3, #0
 800aefa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aefc:	4b0f      	ldr	r3, [pc, #60]	@ (800af3c <prvProcessTimerOrBlockTask+0x94>)
 800aefe:	6818      	ldr	r0, [r3, #0]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	1ad3      	subs	r3, r2, r3
 800af06:	683a      	ldr	r2, [r7, #0]
 800af08:	4619      	mov	r1, r3
 800af0a:	f7fe fe43 	bl	8009b94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af0e:	f7ff f8e7 	bl	800a0e0 <xTaskResumeAll>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10a      	bne.n	800af2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af18:	4b09      	ldr	r3, [pc, #36]	@ (800af40 <prvProcessTimerOrBlockTask+0x98>)
 800af1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af1e:	601a      	str	r2, [r3, #0]
 800af20:	f3bf 8f4f 	dsb	sy
 800af24:	f3bf 8f6f 	isb	sy
}
 800af28:	e001      	b.n	800af2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af2a:	f7ff f8d9 	bl	800a0e0 <xTaskResumeAll>
}
 800af2e:	bf00      	nop
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	240021d4 	.word	0x240021d4
 800af3c:	240021d8 	.word	0x240021d8
 800af40:	e000ed04 	.word	0xe000ed04

0800af44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800af44:	b480      	push	{r7}
 800af46:	b085      	sub	sp, #20
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af4c:	4b0e      	ldr	r3, [pc, #56]	@ (800af88 <prvGetNextExpireTime+0x44>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d101      	bne.n	800af5a <prvGetNextExpireTime+0x16>
 800af56:	2201      	movs	r2, #1
 800af58:	e000      	b.n	800af5c <prvGetNextExpireTime+0x18>
 800af5a:	2200      	movs	r2, #0
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d105      	bne.n	800af74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af68:	4b07      	ldr	r3, [pc, #28]	@ (800af88 <prvGetNextExpireTime+0x44>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	60fb      	str	r3, [r7, #12]
 800af72:	e001      	b.n	800af78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800af74:	2300      	movs	r3, #0
 800af76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800af78:	68fb      	ldr	r3, [r7, #12]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	240021d0 	.word	0x240021d0

0800af8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800af94:	f7ff f942 	bl	800a21c <xTaskGetTickCount>
 800af98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af9a:	4b0b      	ldr	r3, [pc, #44]	@ (800afc8 <prvSampleTimeNow+0x3c>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d205      	bcs.n	800afb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800afa4:	f000 f93a 	bl	800b21c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	601a      	str	r2, [r3, #0]
 800afae:	e002      	b.n	800afb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800afb6:	4a04      	ldr	r2, [pc, #16]	@ (800afc8 <prvSampleTimeNow+0x3c>)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800afbc:	68fb      	ldr	r3, [r7, #12]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	240021e0 	.word	0x240021e0

0800afcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
 800afd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800afda:	2300      	movs	r3, #0
 800afdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	68ba      	ldr	r2, [r7, #8]
 800afe2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d812      	bhi.n	800b018 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	1ad2      	subs	r2, r2, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	699b      	ldr	r3, [r3, #24]
 800affc:	429a      	cmp	r2, r3
 800affe:	d302      	bcc.n	800b006 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b000:	2301      	movs	r3, #1
 800b002:	617b      	str	r3, [r7, #20]
 800b004:	e01b      	b.n	800b03e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b006:	4b10      	ldr	r3, [pc, #64]	@ (800b048 <prvInsertTimerInActiveList+0x7c>)
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	3304      	adds	r3, #4
 800b00e:	4619      	mov	r1, r3
 800b010:	4610      	mov	r0, r2
 800b012:	f7fd fcac 	bl	800896e <vListInsert>
 800b016:	e012      	b.n	800b03e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d206      	bcs.n	800b02e <prvInsertTimerInActiveList+0x62>
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	429a      	cmp	r2, r3
 800b026:	d302      	bcc.n	800b02e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b028:	2301      	movs	r3, #1
 800b02a:	617b      	str	r3, [r7, #20]
 800b02c:	e007      	b.n	800b03e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b02e:	4b07      	ldr	r3, [pc, #28]	@ (800b04c <prvInsertTimerInActiveList+0x80>)
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	3304      	adds	r3, #4
 800b036:	4619      	mov	r1, r3
 800b038:	4610      	mov	r0, r2
 800b03a:	f7fd fc98 	bl	800896e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b03e:	697b      	ldr	r3, [r7, #20]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3718      	adds	r7, #24
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	240021d4 	.word	0x240021d4
 800b04c:	240021d0 	.word	0x240021d0

0800b050 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b08e      	sub	sp, #56	@ 0x38
 800b054:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b056:	e0ce      	b.n	800b1f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	da19      	bge.n	800b092 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b05e:	1d3b      	adds	r3, r7, #4
 800b060:	3304      	adds	r3, #4
 800b062:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b066:	2b00      	cmp	r3, #0
 800b068:	d10b      	bne.n	800b082 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b06a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b06e:	f383 8811 	msr	BASEPRI, r3
 800b072:	f3bf 8f6f 	isb	sy
 800b076:	f3bf 8f4f 	dsb	sy
 800b07a:	61fb      	str	r3, [r7, #28]
}
 800b07c:	bf00      	nop
 800b07e:	bf00      	nop
 800b080:	e7fd      	b.n	800b07e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b088:	6850      	ldr	r0, [r2, #4]
 800b08a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b08c:	6892      	ldr	r2, [r2, #8]
 800b08e:	4611      	mov	r1, r2
 800b090:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2b00      	cmp	r3, #0
 800b096:	f2c0 80ae 	blt.w	800b1f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0a0:	695b      	ldr	r3, [r3, #20]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d004      	beq.n	800b0b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0a8:	3304      	adds	r3, #4
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7fd fc98 	bl	80089e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0b0:	463b      	mov	r3, r7
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7ff ff6a 	bl	800af8c <prvSampleTimeNow>
 800b0b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2b09      	cmp	r3, #9
 800b0be:	f200 8097 	bhi.w	800b1f0 <prvProcessReceivedCommands+0x1a0>
 800b0c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b0c8 <prvProcessReceivedCommands+0x78>)
 800b0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c8:	0800b0f1 	.word	0x0800b0f1
 800b0cc:	0800b0f1 	.word	0x0800b0f1
 800b0d0:	0800b0f1 	.word	0x0800b0f1
 800b0d4:	0800b167 	.word	0x0800b167
 800b0d8:	0800b17b 	.word	0x0800b17b
 800b0dc:	0800b1c7 	.word	0x0800b1c7
 800b0e0:	0800b0f1 	.word	0x0800b0f1
 800b0e4:	0800b0f1 	.word	0x0800b0f1
 800b0e8:	0800b167 	.word	0x0800b167
 800b0ec:	0800b17b 	.word	0x0800b17b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0f6:	f043 0301 	orr.w	r3, r3, #1
 800b0fa:	b2da      	uxtb	r2, r3
 800b0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b102:	68ba      	ldr	r2, [r7, #8]
 800b104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b106:	699b      	ldr	r3, [r3, #24]
 800b108:	18d1      	adds	r1, r2, r3
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b10e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b110:	f7ff ff5c 	bl	800afcc <prvInsertTimerInActiveList>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d06c      	beq.n	800b1f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b11c:	6a1b      	ldr	r3, [r3, #32]
 800b11e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b120:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b124:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b128:	f003 0304 	and.w	r3, r3, #4
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d061      	beq.n	800b1f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b134:	699b      	ldr	r3, [r3, #24]
 800b136:	441a      	add	r2, r3
 800b138:	2300      	movs	r3, #0
 800b13a:	9300      	str	r3, [sp, #0]
 800b13c:	2300      	movs	r3, #0
 800b13e:	2100      	movs	r1, #0
 800b140:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b142:	f7ff fe01 	bl	800ad48 <xTimerGenericCommand>
 800b146:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b148:	6a3b      	ldr	r3, [r7, #32]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d152      	bne.n	800b1f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	61bb      	str	r3, [r7, #24]
}
 800b160:	bf00      	nop
 800b162:	bf00      	nop
 800b164:	e7fd      	b.n	800b162 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b168:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b16c:	f023 0301 	bic.w	r3, r3, #1
 800b170:	b2da      	uxtb	r2, r3
 800b172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b174:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b178:	e03d      	b.n	800b1f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b17c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b180:	f043 0301 	orr.w	r3, r3, #1
 800b184:	b2da      	uxtb	r2, r3
 800b186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b188:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b18c:	68ba      	ldr	r2, [r7, #8]
 800b18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b190:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b194:	699b      	ldr	r3, [r3, #24]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d10b      	bne.n	800b1b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b19a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b19e:	f383 8811 	msr	BASEPRI, r3
 800b1a2:	f3bf 8f6f 	isb	sy
 800b1a6:	f3bf 8f4f 	dsb	sy
 800b1aa:	617b      	str	r3, [r7, #20]
}
 800b1ac:	bf00      	nop
 800b1ae:	bf00      	nop
 800b1b0:	e7fd      	b.n	800b1ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b4:	699a      	ldr	r2, [r3, #24]
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b8:	18d1      	adds	r1, r2, r3
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1c0:	f7ff ff04 	bl	800afcc <prvInsertTimerInActiveList>
					break;
 800b1c4:	e017      	b.n	800b1f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1cc:	f003 0302 	and.w	r3, r3, #2
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d103      	bne.n	800b1dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b1d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1d6:	f000 fbe7 	bl	800b9a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b1da:	e00c      	b.n	800b1f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1e2:	f023 0301 	bic.w	r3, r3, #1
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b1ee:	e002      	b.n	800b1f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b1f0:	bf00      	nop
 800b1f2:	e000      	b.n	800b1f6 <prvProcessReceivedCommands+0x1a6>
					break;
 800b1f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1f6:	4b08      	ldr	r3, [pc, #32]	@ (800b218 <prvProcessReceivedCommands+0x1c8>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	1d39      	adds	r1, r7, #4
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7fe f8b4 	bl	800936c <xQueueReceive>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	f47f af26 	bne.w	800b058 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b20c:	bf00      	nop
 800b20e:	bf00      	nop
 800b210:	3730      	adds	r7, #48	@ 0x30
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	240021d8 	.word	0x240021d8

0800b21c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b088      	sub	sp, #32
 800b220:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b222:	e049      	b.n	800b2b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b224:	4b2e      	ldr	r3, [pc, #184]	@ (800b2e0 <prvSwitchTimerLists+0xc4>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	68db      	ldr	r3, [r3, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b22e:	4b2c      	ldr	r3, [pc, #176]	@ (800b2e0 <prvSwitchTimerLists+0xc4>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	68db      	ldr	r3, [r3, #12]
 800b236:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	3304      	adds	r3, #4
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7fd fbcf 	bl	80089e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	68f8      	ldr	r0, [r7, #12]
 800b248:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b250:	f003 0304 	and.w	r3, r3, #4
 800b254:	2b00      	cmp	r3, #0
 800b256:	d02f      	beq.n	800b2b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	699b      	ldr	r3, [r3, #24]
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	4413      	add	r3, r2
 800b260:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	429a      	cmp	r2, r3
 800b268:	d90e      	bls.n	800b288 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	68ba      	ldr	r2, [r7, #8]
 800b26e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	68fa      	ldr	r2, [r7, #12]
 800b274:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b276:	4b1a      	ldr	r3, [pc, #104]	@ (800b2e0 <prvSwitchTimerLists+0xc4>)
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	3304      	adds	r3, #4
 800b27e:	4619      	mov	r1, r3
 800b280:	4610      	mov	r0, r2
 800b282:	f7fd fb74 	bl	800896e <vListInsert>
 800b286:	e017      	b.n	800b2b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b288:	2300      	movs	r3, #0
 800b28a:	9300      	str	r3, [sp, #0]
 800b28c:	2300      	movs	r3, #0
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	2100      	movs	r1, #0
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f7ff fd58 	bl	800ad48 <xTimerGenericCommand>
 800b298:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d10b      	bne.n	800b2b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a4:	f383 8811 	msr	BASEPRI, r3
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	f3bf 8f4f 	dsb	sy
 800b2b0:	603b      	str	r3, [r7, #0]
}
 800b2b2:	bf00      	nop
 800b2b4:	bf00      	nop
 800b2b6:	e7fd      	b.n	800b2b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b2b8:	4b09      	ldr	r3, [pc, #36]	@ (800b2e0 <prvSwitchTimerLists+0xc4>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1b0      	bne.n	800b224 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b2c2:	4b07      	ldr	r3, [pc, #28]	@ (800b2e0 <prvSwitchTimerLists+0xc4>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b2c8:	4b06      	ldr	r3, [pc, #24]	@ (800b2e4 <prvSwitchTimerLists+0xc8>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a04      	ldr	r2, [pc, #16]	@ (800b2e0 <prvSwitchTimerLists+0xc4>)
 800b2ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b2d0:	4a04      	ldr	r2, [pc, #16]	@ (800b2e4 <prvSwitchTimerLists+0xc8>)
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	6013      	str	r3, [r2, #0]
}
 800b2d6:	bf00      	nop
 800b2d8:	3718      	adds	r7, #24
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	240021d0 	.word	0x240021d0
 800b2e4:	240021d4 	.word	0x240021d4

0800b2e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b2ee:	f000 f96b 	bl	800b5c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b2f2:	4b15      	ldr	r3, [pc, #84]	@ (800b348 <prvCheckForValidListAndQueue+0x60>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d120      	bne.n	800b33c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b2fa:	4814      	ldr	r0, [pc, #80]	@ (800b34c <prvCheckForValidListAndQueue+0x64>)
 800b2fc:	f7fd fae6 	bl	80088cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b300:	4813      	ldr	r0, [pc, #76]	@ (800b350 <prvCheckForValidListAndQueue+0x68>)
 800b302:	f7fd fae3 	bl	80088cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b306:	4b13      	ldr	r3, [pc, #76]	@ (800b354 <prvCheckForValidListAndQueue+0x6c>)
 800b308:	4a10      	ldr	r2, [pc, #64]	@ (800b34c <prvCheckForValidListAndQueue+0x64>)
 800b30a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b30c:	4b12      	ldr	r3, [pc, #72]	@ (800b358 <prvCheckForValidListAndQueue+0x70>)
 800b30e:	4a10      	ldr	r2, [pc, #64]	@ (800b350 <prvCheckForValidListAndQueue+0x68>)
 800b310:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b312:	2300      	movs	r3, #0
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	4b11      	ldr	r3, [pc, #68]	@ (800b35c <prvCheckForValidListAndQueue+0x74>)
 800b318:	4a11      	ldr	r2, [pc, #68]	@ (800b360 <prvCheckForValidListAndQueue+0x78>)
 800b31a:	2110      	movs	r1, #16
 800b31c:	200a      	movs	r0, #10
 800b31e:	f7fd fbf3 	bl	8008b08 <xQueueGenericCreateStatic>
 800b322:	4603      	mov	r3, r0
 800b324:	4a08      	ldr	r2, [pc, #32]	@ (800b348 <prvCheckForValidListAndQueue+0x60>)
 800b326:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b328:	4b07      	ldr	r3, [pc, #28]	@ (800b348 <prvCheckForValidListAndQueue+0x60>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d005      	beq.n	800b33c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b330:	4b05      	ldr	r3, [pc, #20]	@ (800b348 <prvCheckForValidListAndQueue+0x60>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	490b      	ldr	r1, [pc, #44]	@ (800b364 <prvCheckForValidListAndQueue+0x7c>)
 800b336:	4618      	mov	r0, r3
 800b338:	f7fe fbd8 	bl	8009aec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b33c:	f000 f976 	bl	800b62c <vPortExitCritical>
}
 800b340:	bf00      	nop
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	240021d8 	.word	0x240021d8
 800b34c:	240021a8 	.word	0x240021a8
 800b350:	240021bc 	.word	0x240021bc
 800b354:	240021d0 	.word	0x240021d0
 800b358:	240021d4 	.word	0x240021d4
 800b35c:	24002284 	.word	0x24002284
 800b360:	240021e4 	.word	0x240021e4
 800b364:	08017614 	.word	0x08017614

0800b368 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	3b04      	subs	r3, #4
 800b378:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	3b04      	subs	r3, #4
 800b386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	f023 0201 	bic.w	r2, r3, #1
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	3b04      	subs	r3, #4
 800b396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b398:	4a0c      	ldr	r2, [pc, #48]	@ (800b3cc <pxPortInitialiseStack+0x64>)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	3b14      	subs	r3, #20
 800b3a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	3b04      	subs	r3, #4
 800b3ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f06f 0202 	mvn.w	r2, #2
 800b3b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	3b20      	subs	r3, #32
 800b3bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b3be:	68fb      	ldr	r3, [r7, #12]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3714      	adds	r7, #20
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr
 800b3cc:	0800b3d1 	.word	0x0800b3d1

0800b3d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b3da:	4b13      	ldr	r3, [pc, #76]	@ (800b428 <prvTaskExitError+0x58>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e2:	d00b      	beq.n	800b3fc <prvTaskExitError+0x2c>
	__asm volatile
 800b3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e8:	f383 8811 	msr	BASEPRI, r3
 800b3ec:	f3bf 8f6f 	isb	sy
 800b3f0:	f3bf 8f4f 	dsb	sy
 800b3f4:	60fb      	str	r3, [r7, #12]
}
 800b3f6:	bf00      	nop
 800b3f8:	bf00      	nop
 800b3fa:	e7fd      	b.n	800b3f8 <prvTaskExitError+0x28>
	__asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	60bb      	str	r3, [r7, #8]
}
 800b40e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b410:	bf00      	nop
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d0fc      	beq.n	800b412 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b418:	bf00      	nop
 800b41a:	bf00      	nop
 800b41c:	3714      	adds	r7, #20
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	24000024 	.word	0x24000024
 800b42c:	00000000 	.word	0x00000000

0800b430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b430:	4b07      	ldr	r3, [pc, #28]	@ (800b450 <pxCurrentTCBConst2>)
 800b432:	6819      	ldr	r1, [r3, #0]
 800b434:	6808      	ldr	r0, [r1, #0]
 800b436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43a:	f380 8809 	msr	PSP, r0
 800b43e:	f3bf 8f6f 	isb	sy
 800b442:	f04f 0000 	mov.w	r0, #0
 800b446:	f380 8811 	msr	BASEPRI, r0
 800b44a:	4770      	bx	lr
 800b44c:	f3af 8000 	nop.w

0800b450 <pxCurrentTCBConst2>:
 800b450:	24001ca8 	.word	0x24001ca8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b454:	bf00      	nop
 800b456:	bf00      	nop

0800b458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b458:	4808      	ldr	r0, [pc, #32]	@ (800b47c <prvPortStartFirstTask+0x24>)
 800b45a:	6800      	ldr	r0, [r0, #0]
 800b45c:	6800      	ldr	r0, [r0, #0]
 800b45e:	f380 8808 	msr	MSP, r0
 800b462:	f04f 0000 	mov.w	r0, #0
 800b466:	f380 8814 	msr	CONTROL, r0
 800b46a:	b662      	cpsie	i
 800b46c:	b661      	cpsie	f
 800b46e:	f3bf 8f4f 	dsb	sy
 800b472:	f3bf 8f6f 	isb	sy
 800b476:	df00      	svc	0
 800b478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b47a:	bf00      	nop
 800b47c:	e000ed08 	.word	0xe000ed08

0800b480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b086      	sub	sp, #24
 800b484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b486:	4b47      	ldr	r3, [pc, #284]	@ (800b5a4 <xPortStartScheduler+0x124>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a47      	ldr	r2, [pc, #284]	@ (800b5a8 <xPortStartScheduler+0x128>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d10b      	bne.n	800b4a8 <xPortStartScheduler+0x28>
	__asm volatile
 800b490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b494:	f383 8811 	msr	BASEPRI, r3
 800b498:	f3bf 8f6f 	isb	sy
 800b49c:	f3bf 8f4f 	dsb	sy
 800b4a0:	613b      	str	r3, [r7, #16]
}
 800b4a2:	bf00      	nop
 800b4a4:	bf00      	nop
 800b4a6:	e7fd      	b.n	800b4a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b4a8:	4b3e      	ldr	r3, [pc, #248]	@ (800b5a4 <xPortStartScheduler+0x124>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a3f      	ldr	r2, [pc, #252]	@ (800b5ac <xPortStartScheduler+0x12c>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d10b      	bne.n	800b4ca <xPortStartScheduler+0x4a>
	__asm volatile
 800b4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b6:	f383 8811 	msr	BASEPRI, r3
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	60fb      	str	r3, [r7, #12]
}
 800b4c4:	bf00      	nop
 800b4c6:	bf00      	nop
 800b4c8:	e7fd      	b.n	800b4c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b4ca:	4b39      	ldr	r3, [pc, #228]	@ (800b5b0 <xPortStartScheduler+0x130>)
 800b4cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	22ff      	movs	r2, #255	@ 0xff
 800b4da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b4e4:	78fb      	ldrb	r3, [r7, #3]
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b4ec:	b2da      	uxtb	r2, r3
 800b4ee:	4b31      	ldr	r3, [pc, #196]	@ (800b5b4 <xPortStartScheduler+0x134>)
 800b4f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b4f2:	4b31      	ldr	r3, [pc, #196]	@ (800b5b8 <xPortStartScheduler+0x138>)
 800b4f4:	2207      	movs	r2, #7
 800b4f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4f8:	e009      	b.n	800b50e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b4fa:	4b2f      	ldr	r3, [pc, #188]	@ (800b5b8 <xPortStartScheduler+0x138>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	3b01      	subs	r3, #1
 800b500:	4a2d      	ldr	r2, [pc, #180]	@ (800b5b8 <xPortStartScheduler+0x138>)
 800b502:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b504:	78fb      	ldrb	r3, [r7, #3]
 800b506:	b2db      	uxtb	r3, r3
 800b508:	005b      	lsls	r3, r3, #1
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b50e:	78fb      	ldrb	r3, [r7, #3]
 800b510:	b2db      	uxtb	r3, r3
 800b512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b516:	2b80      	cmp	r3, #128	@ 0x80
 800b518:	d0ef      	beq.n	800b4fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b51a:	4b27      	ldr	r3, [pc, #156]	@ (800b5b8 <xPortStartScheduler+0x138>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f1c3 0307 	rsb	r3, r3, #7
 800b522:	2b04      	cmp	r3, #4
 800b524:	d00b      	beq.n	800b53e <xPortStartScheduler+0xbe>
	__asm volatile
 800b526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b52a:	f383 8811 	msr	BASEPRI, r3
 800b52e:	f3bf 8f6f 	isb	sy
 800b532:	f3bf 8f4f 	dsb	sy
 800b536:	60bb      	str	r3, [r7, #8]
}
 800b538:	bf00      	nop
 800b53a:	bf00      	nop
 800b53c:	e7fd      	b.n	800b53a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b53e:	4b1e      	ldr	r3, [pc, #120]	@ (800b5b8 <xPortStartScheduler+0x138>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	021b      	lsls	r3, r3, #8
 800b544:	4a1c      	ldr	r2, [pc, #112]	@ (800b5b8 <xPortStartScheduler+0x138>)
 800b546:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b548:	4b1b      	ldr	r3, [pc, #108]	@ (800b5b8 <xPortStartScheduler+0x138>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b550:	4a19      	ldr	r2, [pc, #100]	@ (800b5b8 <xPortStartScheduler+0x138>)
 800b552:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	b2da      	uxtb	r2, r3
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b55c:	4b17      	ldr	r3, [pc, #92]	@ (800b5bc <xPortStartScheduler+0x13c>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a16      	ldr	r2, [pc, #88]	@ (800b5bc <xPortStartScheduler+0x13c>)
 800b562:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b566:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b568:	4b14      	ldr	r3, [pc, #80]	@ (800b5bc <xPortStartScheduler+0x13c>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a13      	ldr	r2, [pc, #76]	@ (800b5bc <xPortStartScheduler+0x13c>)
 800b56e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b572:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b574:	f000 f8da 	bl	800b72c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b578:	4b11      	ldr	r3, [pc, #68]	@ (800b5c0 <xPortStartScheduler+0x140>)
 800b57a:	2200      	movs	r2, #0
 800b57c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b57e:	f000 f8f9 	bl	800b774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b582:	4b10      	ldr	r3, [pc, #64]	@ (800b5c4 <xPortStartScheduler+0x144>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a0f      	ldr	r2, [pc, #60]	@ (800b5c4 <xPortStartScheduler+0x144>)
 800b588:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b58c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b58e:	f7ff ff63 	bl	800b458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b592:	f7fe ff1f 	bl	800a3d4 <vTaskSwitchContext>
	prvTaskExitError();
 800b596:	f7ff ff1b 	bl	800b3d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b59a:	2300      	movs	r3, #0
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3718      	adds	r7, #24
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	e000ed00 	.word	0xe000ed00
 800b5a8:	410fc271 	.word	0x410fc271
 800b5ac:	410fc270 	.word	0x410fc270
 800b5b0:	e000e400 	.word	0xe000e400
 800b5b4:	240022d4 	.word	0x240022d4
 800b5b8:	240022d8 	.word	0x240022d8
 800b5bc:	e000ed20 	.word	0xe000ed20
 800b5c0:	24000024 	.word	0x24000024
 800b5c4:	e000ef34 	.word	0xe000ef34

0800b5c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	607b      	str	r3, [r7, #4]
}
 800b5e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b5e2:	4b10      	ldr	r3, [pc, #64]	@ (800b624 <vPortEnterCritical+0x5c>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	4a0e      	ldr	r2, [pc, #56]	@ (800b624 <vPortEnterCritical+0x5c>)
 800b5ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b5ec:	4b0d      	ldr	r3, [pc, #52]	@ (800b624 <vPortEnterCritical+0x5c>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d110      	bne.n	800b616 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b5f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b628 <vPortEnterCritical+0x60>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00b      	beq.n	800b616 <vPortEnterCritical+0x4e>
	__asm volatile
 800b5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	603b      	str	r3, [r7, #0]
}
 800b610:	bf00      	nop
 800b612:	bf00      	nop
 800b614:	e7fd      	b.n	800b612 <vPortEnterCritical+0x4a>
	}
}
 800b616:	bf00      	nop
 800b618:	370c      	adds	r7, #12
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	24000024 	.word	0x24000024
 800b628:	e000ed04 	.word	0xe000ed04

0800b62c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b632:	4b12      	ldr	r3, [pc, #72]	@ (800b67c <vPortExitCritical+0x50>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10b      	bne.n	800b652 <vPortExitCritical+0x26>
	__asm volatile
 800b63a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	607b      	str	r3, [r7, #4]
}
 800b64c:	bf00      	nop
 800b64e:	bf00      	nop
 800b650:	e7fd      	b.n	800b64e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b652:	4b0a      	ldr	r3, [pc, #40]	@ (800b67c <vPortExitCritical+0x50>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	3b01      	subs	r3, #1
 800b658:	4a08      	ldr	r2, [pc, #32]	@ (800b67c <vPortExitCritical+0x50>)
 800b65a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b65c:	4b07      	ldr	r3, [pc, #28]	@ (800b67c <vPortExitCritical+0x50>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d105      	bne.n	800b670 <vPortExitCritical+0x44>
 800b664:	2300      	movs	r3, #0
 800b666:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	f383 8811 	msr	BASEPRI, r3
}
 800b66e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b670:	bf00      	nop
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr
 800b67c:	24000024 	.word	0x24000024

0800b680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b680:	f3ef 8009 	mrs	r0, PSP
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	4b15      	ldr	r3, [pc, #84]	@ (800b6e0 <pxCurrentTCBConst>)
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	f01e 0f10 	tst.w	lr, #16
 800b690:	bf08      	it	eq
 800b692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69a:	6010      	str	r0, [r2, #0]
 800b69c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b6a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b6a4:	f380 8811 	msr	BASEPRI, r0
 800b6a8:	f3bf 8f4f 	dsb	sy
 800b6ac:	f3bf 8f6f 	isb	sy
 800b6b0:	f7fe fe90 	bl	800a3d4 <vTaskSwitchContext>
 800b6b4:	f04f 0000 	mov.w	r0, #0
 800b6b8:	f380 8811 	msr	BASEPRI, r0
 800b6bc:	bc09      	pop	{r0, r3}
 800b6be:	6819      	ldr	r1, [r3, #0]
 800b6c0:	6808      	ldr	r0, [r1, #0]
 800b6c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c6:	f01e 0f10 	tst.w	lr, #16
 800b6ca:	bf08      	it	eq
 800b6cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b6d0:	f380 8809 	msr	PSP, r0
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	f3af 8000 	nop.w

0800b6e0 <pxCurrentTCBConst>:
 800b6e0:	24001ca8 	.word	0x24001ca8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b6e4:	bf00      	nop
 800b6e6:	bf00      	nop

0800b6e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f2:	f383 8811 	msr	BASEPRI, r3
 800b6f6:	f3bf 8f6f 	isb	sy
 800b6fa:	f3bf 8f4f 	dsb	sy
 800b6fe:	607b      	str	r3, [r7, #4]
}
 800b700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b702:	f7fe fdad 	bl	800a260 <xTaskIncrementTick>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d003      	beq.n	800b714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b70c:	4b06      	ldr	r3, [pc, #24]	@ (800b728 <xPortSysTickHandler+0x40>)
 800b70e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b712:	601a      	str	r2, [r3, #0]
 800b714:	2300      	movs	r3, #0
 800b716:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	f383 8811 	msr	BASEPRI, r3
}
 800b71e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b720:	bf00      	nop
 800b722:	3708      	adds	r7, #8
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	e000ed04 	.word	0xe000ed04

0800b72c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b72c:	b480      	push	{r7}
 800b72e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b730:	4b0b      	ldr	r3, [pc, #44]	@ (800b760 <vPortSetupTimerInterrupt+0x34>)
 800b732:	2200      	movs	r2, #0
 800b734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b736:	4b0b      	ldr	r3, [pc, #44]	@ (800b764 <vPortSetupTimerInterrupt+0x38>)
 800b738:	2200      	movs	r2, #0
 800b73a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b73c:	4b0a      	ldr	r3, [pc, #40]	@ (800b768 <vPortSetupTimerInterrupt+0x3c>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a0a      	ldr	r2, [pc, #40]	@ (800b76c <vPortSetupTimerInterrupt+0x40>)
 800b742:	fba2 2303 	umull	r2, r3, r2, r3
 800b746:	099b      	lsrs	r3, r3, #6
 800b748:	4a09      	ldr	r2, [pc, #36]	@ (800b770 <vPortSetupTimerInterrupt+0x44>)
 800b74a:	3b01      	subs	r3, #1
 800b74c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b74e:	4b04      	ldr	r3, [pc, #16]	@ (800b760 <vPortSetupTimerInterrupt+0x34>)
 800b750:	2207      	movs	r2, #7
 800b752:	601a      	str	r2, [r3, #0]
}
 800b754:	bf00      	nop
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	e000e010 	.word	0xe000e010
 800b764:	e000e018 	.word	0xe000e018
 800b768:	24000000 	.word	0x24000000
 800b76c:	10624dd3 	.word	0x10624dd3
 800b770:	e000e014 	.word	0xe000e014

0800b774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b774:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b784 <vPortEnableVFP+0x10>
 800b778:	6801      	ldr	r1, [r0, #0]
 800b77a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b77e:	6001      	str	r1, [r0, #0]
 800b780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b782:	bf00      	nop
 800b784:	e000ed88 	.word	0xe000ed88

0800b788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b788:	b480      	push	{r7}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b78e:	f3ef 8305 	mrs	r3, IPSR
 800b792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2b0f      	cmp	r3, #15
 800b798:	d915      	bls.n	800b7c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b79a:	4a18      	ldr	r2, [pc, #96]	@ (800b7fc <vPortValidateInterruptPriority+0x74>)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	4413      	add	r3, r2
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b7a4:	4b16      	ldr	r3, [pc, #88]	@ (800b800 <vPortValidateInterruptPriority+0x78>)
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	7afa      	ldrb	r2, [r7, #11]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d20b      	bcs.n	800b7c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b2:	f383 8811 	msr	BASEPRI, r3
 800b7b6:	f3bf 8f6f 	isb	sy
 800b7ba:	f3bf 8f4f 	dsb	sy
 800b7be:	607b      	str	r3, [r7, #4]
}
 800b7c0:	bf00      	nop
 800b7c2:	bf00      	nop
 800b7c4:	e7fd      	b.n	800b7c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b7c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b804 <vPortValidateInterruptPriority+0x7c>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b7ce:	4b0e      	ldr	r3, [pc, #56]	@ (800b808 <vPortValidateInterruptPriority+0x80>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d90b      	bls.n	800b7ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7da:	f383 8811 	msr	BASEPRI, r3
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	603b      	str	r3, [r7, #0]
}
 800b7e8:	bf00      	nop
 800b7ea:	bf00      	nop
 800b7ec:	e7fd      	b.n	800b7ea <vPortValidateInterruptPriority+0x62>
	}
 800b7ee:	bf00      	nop
 800b7f0:	3714      	adds	r7, #20
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	e000e3f0 	.word	0xe000e3f0
 800b800:	240022d4 	.word	0x240022d4
 800b804:	e000ed0c 	.word	0xe000ed0c
 800b808:	240022d8 	.word	0x240022d8

0800b80c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b08a      	sub	sp, #40	@ 0x28
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b814:	2300      	movs	r3, #0
 800b816:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b818:	f7fe fc54 	bl	800a0c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b81c:	4b5c      	ldr	r3, [pc, #368]	@ (800b990 <pvPortMalloc+0x184>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b824:	f000 f924 	bl	800ba70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b828:	4b5a      	ldr	r3, [pc, #360]	@ (800b994 <pvPortMalloc+0x188>)
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4013      	ands	r3, r2
 800b830:	2b00      	cmp	r3, #0
 800b832:	f040 8095 	bne.w	800b960 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d01e      	beq.n	800b87a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b83c:	2208      	movs	r2, #8
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4413      	add	r3, r2
 800b842:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f003 0307 	and.w	r3, r3, #7
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d015      	beq.n	800b87a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f023 0307 	bic.w	r3, r3, #7
 800b854:	3308      	adds	r3, #8
 800b856:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f003 0307 	and.w	r3, r3, #7
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00b      	beq.n	800b87a <pvPortMalloc+0x6e>
	__asm volatile
 800b862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b866:	f383 8811 	msr	BASEPRI, r3
 800b86a:	f3bf 8f6f 	isb	sy
 800b86e:	f3bf 8f4f 	dsb	sy
 800b872:	617b      	str	r3, [r7, #20]
}
 800b874:	bf00      	nop
 800b876:	bf00      	nop
 800b878:	e7fd      	b.n	800b876 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d06f      	beq.n	800b960 <pvPortMalloc+0x154>
 800b880:	4b45      	ldr	r3, [pc, #276]	@ (800b998 <pvPortMalloc+0x18c>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	429a      	cmp	r2, r3
 800b888:	d86a      	bhi.n	800b960 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b88a:	4b44      	ldr	r3, [pc, #272]	@ (800b99c <pvPortMalloc+0x190>)
 800b88c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b88e:	4b43      	ldr	r3, [pc, #268]	@ (800b99c <pvPortMalloc+0x190>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b894:	e004      	b.n	800b8a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b898:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d903      	bls.n	800b8b2 <pvPortMalloc+0xa6>
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d1f1      	bne.n	800b896 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b8b2:	4b37      	ldr	r3, [pc, #220]	@ (800b990 <pvPortMalloc+0x184>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d051      	beq.n	800b960 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b8bc:	6a3b      	ldr	r3, [r7, #32]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2208      	movs	r2, #8
 800b8c2:	4413      	add	r3, r2
 800b8c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	6a3b      	ldr	r3, [r7, #32]
 800b8cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	1ad2      	subs	r2, r2, r3
 800b8d6:	2308      	movs	r3, #8
 800b8d8:	005b      	lsls	r3, r3, #1
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d920      	bls.n	800b920 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b8de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	f003 0307 	and.w	r3, r3, #7
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00b      	beq.n	800b908 <pvPortMalloc+0xfc>
	__asm volatile
 800b8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f4:	f383 8811 	msr	BASEPRI, r3
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	613b      	str	r3, [r7, #16]
}
 800b902:	bf00      	nop
 800b904:	bf00      	nop
 800b906:	e7fd      	b.n	800b904 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90a:	685a      	ldr	r2, [r3, #4]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	1ad2      	subs	r2, r2, r3
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b91a:	69b8      	ldr	r0, [r7, #24]
 800b91c:	f000 f90a 	bl	800bb34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b920:	4b1d      	ldr	r3, [pc, #116]	@ (800b998 <pvPortMalloc+0x18c>)
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	1ad3      	subs	r3, r2, r3
 800b92a:	4a1b      	ldr	r2, [pc, #108]	@ (800b998 <pvPortMalloc+0x18c>)
 800b92c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b92e:	4b1a      	ldr	r3, [pc, #104]	@ (800b998 <pvPortMalloc+0x18c>)
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	4b1b      	ldr	r3, [pc, #108]	@ (800b9a0 <pvPortMalloc+0x194>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	429a      	cmp	r2, r3
 800b938:	d203      	bcs.n	800b942 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b93a:	4b17      	ldr	r3, [pc, #92]	@ (800b998 <pvPortMalloc+0x18c>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a18      	ldr	r2, [pc, #96]	@ (800b9a0 <pvPortMalloc+0x194>)
 800b940:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b944:	685a      	ldr	r2, [r3, #4]
 800b946:	4b13      	ldr	r3, [pc, #76]	@ (800b994 <pvPortMalloc+0x188>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	431a      	orrs	r2, r3
 800b94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b952:	2200      	movs	r2, #0
 800b954:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b956:	4b13      	ldr	r3, [pc, #76]	@ (800b9a4 <pvPortMalloc+0x198>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	3301      	adds	r3, #1
 800b95c:	4a11      	ldr	r2, [pc, #68]	@ (800b9a4 <pvPortMalloc+0x198>)
 800b95e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b960:	f7fe fbbe 	bl	800a0e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b964:	69fb      	ldr	r3, [r7, #28]
 800b966:	f003 0307 	and.w	r3, r3, #7
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00b      	beq.n	800b986 <pvPortMalloc+0x17a>
	__asm volatile
 800b96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b972:	f383 8811 	msr	BASEPRI, r3
 800b976:	f3bf 8f6f 	isb	sy
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	60fb      	str	r3, [r7, #12]
}
 800b980:	bf00      	nop
 800b982:	bf00      	nop
 800b984:	e7fd      	b.n	800b982 <pvPortMalloc+0x176>
	return pvReturn;
 800b986:	69fb      	ldr	r3, [r7, #28]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3728      	adds	r7, #40	@ 0x28
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	24005ee4 	.word	0x24005ee4
 800b994:	24005ef8 	.word	0x24005ef8
 800b998:	24005ee8 	.word	0x24005ee8
 800b99c:	24005edc 	.word	0x24005edc
 800b9a0:	24005eec 	.word	0x24005eec
 800b9a4:	24005ef0 	.word	0x24005ef0

0800b9a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b086      	sub	sp, #24
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d04f      	beq.n	800ba5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b9ba:	2308      	movs	r3, #8
 800b9bc:	425b      	negs	r3, r3
 800b9be:	697a      	ldr	r2, [r7, #20]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	685a      	ldr	r2, [r3, #4]
 800b9cc:	4b25      	ldr	r3, [pc, #148]	@ (800ba64 <vPortFree+0xbc>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4013      	ands	r3, r2
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d10b      	bne.n	800b9ee <vPortFree+0x46>
	__asm volatile
 800b9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9da:	f383 8811 	msr	BASEPRI, r3
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f3bf 8f4f 	dsb	sy
 800b9e6:	60fb      	str	r3, [r7, #12]
}
 800b9e8:	bf00      	nop
 800b9ea:	bf00      	nop
 800b9ec:	e7fd      	b.n	800b9ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00b      	beq.n	800ba0e <vPortFree+0x66>
	__asm volatile
 800b9f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	60bb      	str	r3, [r7, #8]
}
 800ba08:	bf00      	nop
 800ba0a:	bf00      	nop
 800ba0c:	e7fd      	b.n	800ba0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	685a      	ldr	r2, [r3, #4]
 800ba12:	4b14      	ldr	r3, [pc, #80]	@ (800ba64 <vPortFree+0xbc>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4013      	ands	r3, r2
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d01e      	beq.n	800ba5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d11a      	bne.n	800ba5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	685a      	ldr	r2, [r3, #4]
 800ba28:	4b0e      	ldr	r3, [pc, #56]	@ (800ba64 <vPortFree+0xbc>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	43db      	mvns	r3, r3
 800ba2e:	401a      	ands	r2, r3
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba34:	f7fe fb46 	bl	800a0c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	685a      	ldr	r2, [r3, #4]
 800ba3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba68 <vPortFree+0xc0>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4413      	add	r3, r2
 800ba42:	4a09      	ldr	r2, [pc, #36]	@ (800ba68 <vPortFree+0xc0>)
 800ba44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba46:	6938      	ldr	r0, [r7, #16]
 800ba48:	f000 f874 	bl	800bb34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ba4c:	4b07      	ldr	r3, [pc, #28]	@ (800ba6c <vPortFree+0xc4>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	3301      	adds	r3, #1
 800ba52:	4a06      	ldr	r2, [pc, #24]	@ (800ba6c <vPortFree+0xc4>)
 800ba54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ba56:	f7fe fb43 	bl	800a0e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ba5a:	bf00      	nop
 800ba5c:	3718      	adds	r7, #24
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	24005ef8 	.word	0x24005ef8
 800ba68:	24005ee8 	.word	0x24005ee8
 800ba6c:	24005ef4 	.word	0x24005ef4

0800ba70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba70:	b480      	push	{r7}
 800ba72:	b085      	sub	sp, #20
 800ba74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ba7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba7c:	4b27      	ldr	r3, [pc, #156]	@ (800bb1c <prvHeapInit+0xac>)
 800ba7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f003 0307 	and.w	r3, r3, #7
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d00c      	beq.n	800baa4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	3307      	adds	r3, #7
 800ba8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f023 0307 	bic.w	r3, r3, #7
 800ba96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba98:	68ba      	ldr	r2, [r7, #8]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	1ad3      	subs	r3, r2, r3
 800ba9e:	4a1f      	ldr	r2, [pc, #124]	@ (800bb1c <prvHeapInit+0xac>)
 800baa0:	4413      	add	r3, r2
 800baa2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800baa8:	4a1d      	ldr	r2, [pc, #116]	@ (800bb20 <prvHeapInit+0xb0>)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800baae:	4b1c      	ldr	r3, [pc, #112]	@ (800bb20 <prvHeapInit+0xb0>)
 800bab0:	2200      	movs	r2, #0
 800bab2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	4413      	add	r3, r2
 800baba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800babc:	2208      	movs	r2, #8
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	1a9b      	subs	r3, r3, r2
 800bac2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f023 0307 	bic.w	r3, r3, #7
 800baca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	4a15      	ldr	r2, [pc, #84]	@ (800bb24 <prvHeapInit+0xb4>)
 800bad0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bad2:	4b14      	ldr	r3, [pc, #80]	@ (800bb24 <prvHeapInit+0xb4>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	2200      	movs	r2, #0
 800bad8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bada:	4b12      	ldr	r3, [pc, #72]	@ (800bb24 <prvHeapInit+0xb4>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2200      	movs	r2, #0
 800bae0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	1ad2      	subs	r2, r2, r3
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800baf0:	4b0c      	ldr	r3, [pc, #48]	@ (800bb24 <prvHeapInit+0xb4>)
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	4a0a      	ldr	r2, [pc, #40]	@ (800bb28 <prvHeapInit+0xb8>)
 800bafe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	4a09      	ldr	r2, [pc, #36]	@ (800bb2c <prvHeapInit+0xbc>)
 800bb06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb08:	4b09      	ldr	r3, [pc, #36]	@ (800bb30 <prvHeapInit+0xc0>)
 800bb0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bb0e:	601a      	str	r2, [r3, #0]
}
 800bb10:	bf00      	nop
 800bb12:	3714      	adds	r7, #20
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr
 800bb1c:	240022dc 	.word	0x240022dc
 800bb20:	24005edc 	.word	0x24005edc
 800bb24:	24005ee4 	.word	0x24005ee4
 800bb28:	24005eec 	.word	0x24005eec
 800bb2c:	24005ee8 	.word	0x24005ee8
 800bb30:	24005ef8 	.word	0x24005ef8

0800bb34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb3c:	4b28      	ldr	r3, [pc, #160]	@ (800bbe0 <prvInsertBlockIntoFreeList+0xac>)
 800bb3e:	60fb      	str	r3, [r7, #12]
 800bb40:	e002      	b.n	800bb48 <prvInsertBlockIntoFreeList+0x14>
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	60fb      	str	r3, [r7, #12]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d8f7      	bhi.n	800bb42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d108      	bne.n	800bb76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	685a      	ldr	r2, [r3, #4]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	441a      	add	r2, r3
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	68ba      	ldr	r2, [r7, #8]
 800bb80:	441a      	add	r2, r3
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d118      	bne.n	800bbbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	4b15      	ldr	r3, [pc, #84]	@ (800bbe4 <prvInsertBlockIntoFreeList+0xb0>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d00d      	beq.n	800bbb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	685a      	ldr	r2, [r3, #4]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	441a      	add	r2, r3
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	601a      	str	r2, [r3, #0]
 800bbb0:	e008      	b.n	800bbc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bbb2:	4b0c      	ldr	r3, [pc, #48]	@ (800bbe4 <prvInsertBlockIntoFreeList+0xb0>)
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	601a      	str	r2, [r3, #0]
 800bbba:	e003      	b.n	800bbc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d002      	beq.n	800bbd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbd2:	bf00      	nop
 800bbd4:	3714      	adds	r7, #20
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr
 800bbde:	bf00      	nop
 800bbe0:	24005edc 	.word	0x24005edc
 800bbe4:	24005ee4 	.word	0x24005ee4

0800bbe8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800bbf2:	f007 fb93 	bl	801331c <sys_timeouts_sleeptime>
 800bbf6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbfe:	d10b      	bne.n	800bc18 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800bc00:	4813      	ldr	r0, [pc, #76]	@ (800bc50 <tcpip_timeouts_mbox_fetch+0x68>)
 800bc02:	f00a f910 	bl	8015e26 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800bc06:	2200      	movs	r2, #0
 800bc08:	6839      	ldr	r1, [r7, #0]
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f00a f898 	bl	8015d40 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800bc10:	480f      	ldr	r0, [pc, #60]	@ (800bc50 <tcpip_timeouts_mbox_fetch+0x68>)
 800bc12:	f00a f8f9 	bl	8015e08 <sys_mutex_lock>
    return;
 800bc16:	e018      	b.n	800bc4a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d102      	bne.n	800bc24 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800bc1e:	f007 fb43 	bl	80132a8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bc22:	e7e6      	b.n	800bbf2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800bc24:	480a      	ldr	r0, [pc, #40]	@ (800bc50 <tcpip_timeouts_mbox_fetch+0x68>)
 800bc26:	f00a f8fe 	bl	8015e26 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800bc2a:	68fa      	ldr	r2, [r7, #12]
 800bc2c:	6839      	ldr	r1, [r7, #0]
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f00a f886 	bl	8015d40 <sys_arch_mbox_fetch>
 800bc34:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800bc36:	4806      	ldr	r0, [pc, #24]	@ (800bc50 <tcpip_timeouts_mbox_fetch+0x68>)
 800bc38:	f00a f8e6 	bl	8015e08 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc42:	d102      	bne.n	800bc4a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800bc44:	f007 fb30 	bl	80132a8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bc48:	e7d3      	b.n	800bbf2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	24005f08 	.word	0x24005f08

0800bc54 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800bc5c:	4810      	ldr	r0, [pc, #64]	@ (800bca0 <tcpip_thread+0x4c>)
 800bc5e:	f00a f8d3 	bl	8015e08 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800bc62:	4b10      	ldr	r3, [pc, #64]	@ (800bca4 <tcpip_thread+0x50>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d005      	beq.n	800bc76 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800bc6a:	4b0e      	ldr	r3, [pc, #56]	@ (800bca4 <tcpip_thread+0x50>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a0e      	ldr	r2, [pc, #56]	@ (800bca8 <tcpip_thread+0x54>)
 800bc70:	6812      	ldr	r2, [r2, #0]
 800bc72:	4610      	mov	r0, r2
 800bc74:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bc76:	f107 030c 	add.w	r3, r7, #12
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	480b      	ldr	r0, [pc, #44]	@ (800bcac <tcpip_thread+0x58>)
 800bc7e:	f7ff ffb3 	bl	800bbe8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d106      	bne.n	800bc96 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bc88:	4b09      	ldr	r3, [pc, #36]	@ (800bcb0 <tcpip_thread+0x5c>)
 800bc8a:	2291      	movs	r2, #145	@ 0x91
 800bc8c:	4909      	ldr	r1, [pc, #36]	@ (800bcb4 <tcpip_thread+0x60>)
 800bc8e:	480a      	ldr	r0, [pc, #40]	@ (800bcb8 <tcpip_thread+0x64>)
 800bc90:	f00a fa14 	bl	80160bc <iprintf>
      continue;
 800bc94:	e003      	b.n	800bc9e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f000 f80f 	bl	800bcbc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bc9e:	e7ea      	b.n	800bc76 <tcpip_thread+0x22>
 800bca0:	24005f08 	.word	0x24005f08
 800bca4:	24005efc 	.word	0x24005efc
 800bca8:	24005f00 	.word	0x24005f00
 800bcac:	24005f04 	.word	0x24005f04
 800bcb0:	0801761c 	.word	0x0801761c
 800bcb4:	0801764c 	.word	0x0801764c
 800bcb8:	0801766c 	.word	0x0801766c

0800bcbc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	d026      	beq.n	800bd1a <tcpip_thread_handle_msg+0x5e>
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	dc2b      	bgt.n	800bd28 <tcpip_thread_handle_msg+0x6c>
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d002      	beq.n	800bcda <tcpip_thread_handle_msg+0x1e>
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d015      	beq.n	800bd04 <tcpip_thread_handle_msg+0x48>
 800bcd8:	e026      	b.n	800bd28 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	6850      	ldr	r0, [r2, #4]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	6892      	ldr	r2, [r2, #8]
 800bce6:	4611      	mov	r1, r2
 800bce8:	4798      	blx	r3
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d004      	beq.n	800bcfa <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f001 fdd7 	bl	800d8a8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bcfa:	6879      	ldr	r1, [r7, #4]
 800bcfc:	2009      	movs	r0, #9
 800bcfe:	f000 ff2b 	bl	800cb58 <memp_free>
      break;
 800bd02:	e018      	b.n	800bd36 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	6892      	ldr	r2, [r2, #8]
 800bd0c:	4610      	mov	r0, r2
 800bd0e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800bd10:	6879      	ldr	r1, [r7, #4]
 800bd12:	2008      	movs	r0, #8
 800bd14:	f000 ff20 	bl	800cb58 <memp_free>
      break;
 800bd18:	e00d      	b.n	800bd36 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	6892      	ldr	r2, [r2, #8]
 800bd22:	4610      	mov	r0, r2
 800bd24:	4798      	blx	r3
      break;
 800bd26:	e006      	b.n	800bd36 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bd28:	4b05      	ldr	r3, [pc, #20]	@ (800bd40 <tcpip_thread_handle_msg+0x84>)
 800bd2a:	22cf      	movs	r2, #207	@ 0xcf
 800bd2c:	4905      	ldr	r1, [pc, #20]	@ (800bd44 <tcpip_thread_handle_msg+0x88>)
 800bd2e:	4806      	ldr	r0, [pc, #24]	@ (800bd48 <tcpip_thread_handle_msg+0x8c>)
 800bd30:	f00a f9c4 	bl	80160bc <iprintf>
      break;
 800bd34:	bf00      	nop
  }
}
 800bd36:	bf00      	nop
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	0801761c 	.word	0x0801761c
 800bd44:	0801764c 	.word	0x0801764c
 800bd48:	0801766c 	.word	0x0801766c

0800bd4c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b086      	sub	sp, #24
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bd58:	481a      	ldr	r0, [pc, #104]	@ (800bdc4 <tcpip_inpkt+0x78>)
 800bd5a:	f00a f822 	bl	8015da2 <sys_mbox_valid>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d105      	bne.n	800bd70 <tcpip_inpkt+0x24>
 800bd64:	4b18      	ldr	r3, [pc, #96]	@ (800bdc8 <tcpip_inpkt+0x7c>)
 800bd66:	22fc      	movs	r2, #252	@ 0xfc
 800bd68:	4918      	ldr	r1, [pc, #96]	@ (800bdcc <tcpip_inpkt+0x80>)
 800bd6a:	4819      	ldr	r0, [pc, #100]	@ (800bdd0 <tcpip_inpkt+0x84>)
 800bd6c:	f00a f9a6 	bl	80160bc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800bd70:	2009      	movs	r0, #9
 800bd72:	f000 fe7b 	bl	800ca6c <memp_malloc>
 800bd76:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d102      	bne.n	800bd84 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800bd7e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd82:	e01a      	b.n	800bdba <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	2200      	movs	r2, #0
 800bd88:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	68ba      	ldr	r2, [r7, #8]
 800bd94:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bd9c:	6979      	ldr	r1, [r7, #20]
 800bd9e:	4809      	ldr	r0, [pc, #36]	@ (800bdc4 <tcpip_inpkt+0x78>)
 800bda0:	f009 ffb4 	bl	8015d0c <sys_mbox_trypost>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d006      	beq.n	800bdb8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bdaa:	6979      	ldr	r1, [r7, #20]
 800bdac:	2009      	movs	r0, #9
 800bdae:	f000 fed3 	bl	800cb58 <memp_free>
    return ERR_MEM;
 800bdb2:	f04f 33ff 	mov.w	r3, #4294967295
 800bdb6:	e000      	b.n	800bdba <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800bdb8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3718      	adds	r7, #24
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	24005f04 	.word	0x24005f04
 800bdc8:	0801761c 	.word	0x0801761c
 800bdcc:	08017694 	.word	0x08017694
 800bdd0:	0801766c 	.word	0x0801766c

0800bdd4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bde4:	f003 0318 	and.w	r3, r3, #24
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d006      	beq.n	800bdfa <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800bdec:	4a08      	ldr	r2, [pc, #32]	@ (800be10 <tcpip_input+0x3c>)
 800bdee:	6839      	ldr	r1, [r7, #0]
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f7ff ffab 	bl	800bd4c <tcpip_inpkt>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	e005      	b.n	800be06 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800bdfa:	4a06      	ldr	r2, [pc, #24]	@ (800be14 <tcpip_input+0x40>)
 800bdfc:	6839      	ldr	r1, [r7, #0]
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f7ff ffa4 	bl	800bd4c <tcpip_inpkt>
 800be04:	4603      	mov	r3, r0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	08015b2d 	.word	0x08015b2d
 800be14:	08014a35 	.word	0x08014a35

0800be18 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800be22:	4819      	ldr	r0, [pc, #100]	@ (800be88 <tcpip_try_callback+0x70>)
 800be24:	f009 ffbd 	bl	8015da2 <sys_mbox_valid>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d106      	bne.n	800be3c <tcpip_try_callback+0x24>
 800be2e:	4b17      	ldr	r3, [pc, #92]	@ (800be8c <tcpip_try_callback+0x74>)
 800be30:	f240 125d 	movw	r2, #349	@ 0x15d
 800be34:	4916      	ldr	r1, [pc, #88]	@ (800be90 <tcpip_try_callback+0x78>)
 800be36:	4817      	ldr	r0, [pc, #92]	@ (800be94 <tcpip_try_callback+0x7c>)
 800be38:	f00a f940 	bl	80160bc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800be3c:	2008      	movs	r0, #8
 800be3e:	f000 fe15 	bl	800ca6c <memp_malloc>
 800be42:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d102      	bne.n	800be50 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800be4a:	f04f 33ff 	mov.w	r3, #4294967295
 800be4e:	e017      	b.n	800be80 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2201      	movs	r2, #1
 800be54:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	683a      	ldr	r2, [r7, #0]
 800be60:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800be62:	68f9      	ldr	r1, [r7, #12]
 800be64:	4808      	ldr	r0, [pc, #32]	@ (800be88 <tcpip_try_callback+0x70>)
 800be66:	f009 ff51 	bl	8015d0c <sys_mbox_trypost>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d006      	beq.n	800be7e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800be70:	68f9      	ldr	r1, [r7, #12]
 800be72:	2008      	movs	r0, #8
 800be74:	f000 fe70 	bl	800cb58 <memp_free>
    return ERR_MEM;
 800be78:	f04f 33ff 	mov.w	r3, #4294967295
 800be7c:	e000      	b.n	800be80 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800be7e:	2300      	movs	r3, #0
}
 800be80:	4618      	mov	r0, r3
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	24005f04 	.word	0x24005f04
 800be8c:	0801761c 	.word	0x0801761c
 800be90:	08017694 	.word	0x08017694
 800be94:	0801766c 	.word	0x0801766c

0800be98 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af02      	add	r7, sp, #8
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800bea2:	f000 f92d 	bl	800c100 <lwip_init>

  tcpip_init_done = initfunc;
 800bea6:	4a17      	ldr	r2, [pc, #92]	@ (800bf04 <tcpip_init+0x6c>)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800beac:	4a16      	ldr	r2, [pc, #88]	@ (800bf08 <tcpip_init+0x70>)
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800beb2:	2106      	movs	r1, #6
 800beb4:	4815      	ldr	r0, [pc, #84]	@ (800bf0c <tcpip_init+0x74>)
 800beb6:	f009 ff0f 	bl	8015cd8 <sys_mbox_new>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d006      	beq.n	800bece <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800bec0:	4b13      	ldr	r3, [pc, #76]	@ (800bf10 <tcpip_init+0x78>)
 800bec2:	f240 2261 	movw	r2, #609	@ 0x261
 800bec6:	4913      	ldr	r1, [pc, #76]	@ (800bf14 <tcpip_init+0x7c>)
 800bec8:	4813      	ldr	r0, [pc, #76]	@ (800bf18 <tcpip_init+0x80>)
 800beca:	f00a f8f7 	bl	80160bc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800bece:	4813      	ldr	r0, [pc, #76]	@ (800bf1c <tcpip_init+0x84>)
 800bed0:	f009 ff84 	bl	8015ddc <sys_mutex_new>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d006      	beq.n	800bee8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800beda:	4b0d      	ldr	r3, [pc, #52]	@ (800bf10 <tcpip_init+0x78>)
 800bedc:	f240 2265 	movw	r2, #613	@ 0x265
 800bee0:	490f      	ldr	r1, [pc, #60]	@ (800bf20 <tcpip_init+0x88>)
 800bee2:	480d      	ldr	r0, [pc, #52]	@ (800bf18 <tcpip_init+0x80>)
 800bee4:	f00a f8ea 	bl	80160bc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800bee8:	2318      	movs	r3, #24
 800beea:	9300      	str	r3, [sp, #0]
 800beec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bef0:	2200      	movs	r2, #0
 800bef2:	490c      	ldr	r1, [pc, #48]	@ (800bf24 <tcpip_init+0x8c>)
 800bef4:	480c      	ldr	r0, [pc, #48]	@ (800bf28 <tcpip_init+0x90>)
 800bef6:	f009 ffa3 	bl	8015e40 <sys_thread_new>
}
 800befa:	bf00      	nop
 800befc:	3708      	adds	r7, #8
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	24005efc 	.word	0x24005efc
 800bf08:	24005f00 	.word	0x24005f00
 800bf0c:	24005f04 	.word	0x24005f04
 800bf10:	0801761c 	.word	0x0801761c
 800bf14:	080176a4 	.word	0x080176a4
 800bf18:	0801766c 	.word	0x0801766c
 800bf1c:	24005f08 	.word	0x24005f08
 800bf20:	080176c8 	.word	0x080176c8
 800bf24:	0800bc55 	.word	0x0800bc55
 800bf28:	080176ec 	.word	0x080176ec

0800bf2c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	4603      	mov	r3, r0
 800bf34:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bf36:	88fb      	ldrh	r3, [r7, #6]
 800bf38:	021b      	lsls	r3, r3, #8
 800bf3a:	b21a      	sxth	r2, r3
 800bf3c:	88fb      	ldrh	r3, [r7, #6]
 800bf3e:	0a1b      	lsrs	r3, r3, #8
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	b21b      	sxth	r3, r3
 800bf44:	4313      	orrs	r3, r2
 800bf46:	b21b      	sxth	r3, r3
 800bf48:	b29b      	uxth	r3, r3
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	370c      	adds	r7, #12
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr

0800bf56 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bf56:	b480      	push	{r7}
 800bf58:	b083      	sub	sp, #12
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	061a      	lsls	r2, r3, #24
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	021b      	lsls	r3, r3, #8
 800bf66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bf6a:	431a      	orrs	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	0a1b      	lsrs	r3, r3, #8
 800bf70:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bf74:	431a      	orrs	r2, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	0e1b      	lsrs	r3, r3, #24
 800bf7a:	4313      	orrs	r3, r2
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	370c      	adds	r7, #12
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b089      	sub	sp, #36	@ 0x24
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800bf96:	2300      	movs	r3, #0
 800bf98:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	f003 0301 	and.w	r3, r3, #1
 800bfa4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d00d      	beq.n	800bfc8 <lwip_standard_chksum+0x40>
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	dd0a      	ble.n	800bfc8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800bfb2:	69fa      	ldr	r2, [r7, #28]
 800bfb4:	1c53      	adds	r3, r2, #1
 800bfb6:	61fb      	str	r3, [r7, #28]
 800bfb8:	f107 030e 	add.w	r3, r7, #14
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	7812      	ldrb	r2, [r2, #0]
 800bfc0:	701a      	strb	r2, [r3, #0]
    len--;
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800bfcc:	e00a      	b.n	800bfe4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800bfce:	69bb      	ldr	r3, [r7, #24]
 800bfd0:	1c9a      	adds	r2, r3, #2
 800bfd2:	61ba      	str	r2, [r7, #24]
 800bfd4:	881b      	ldrh	r3, [r3, #0]
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	4413      	add	r3, r2
 800bfdc:	617b      	str	r3, [r7, #20]
    len -= 2;
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	3b02      	subs	r3, #2
 800bfe2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	dcf1      	bgt.n	800bfce <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	dd04      	ble.n	800bffa <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800bff0:	f107 030e 	add.w	r3, r7, #14
 800bff4:	69ba      	ldr	r2, [r7, #24]
 800bff6:	7812      	ldrb	r2, [r2, #0]
 800bff8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800bffa:	89fb      	ldrh	r3, [r7, #14]
 800bffc:	461a      	mov	r2, r3
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	4413      	add	r3, r2
 800c002:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	0c1a      	lsrs	r2, r3, #16
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	4413      	add	r3, r2
 800c00e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	0c1a      	lsrs	r2, r3, #16
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	b29b      	uxth	r3, r3
 800c018:	4413      	add	r3, r2
 800c01a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d007      	beq.n	800c032 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	021b      	lsls	r3, r3, #8
 800c026:	b29a      	uxth	r2, r3
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	0a1b      	lsrs	r3, r3, #8
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	4313      	orrs	r3, r2
 800c030:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	b29b      	uxth	r3, r3
}
 800c036:	4618      	mov	r0, r3
 800c038:	3724      	adds	r7, #36	@ 0x24
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr

0800c042 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b082      	sub	sp, #8
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
 800c04a:	460b      	mov	r3, r1
 800c04c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800c04e:	887b      	ldrh	r3, [r7, #2]
 800c050:	4619      	mov	r1, r3
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f7ff ff98 	bl	800bf88 <lwip_standard_chksum>
 800c058:	4603      	mov	r3, r0
 800c05a:	43db      	mvns	r3, r3
 800c05c:	b29b      	uxth	r3, r3
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3708      	adds	r7, #8
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b086      	sub	sp, #24
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800c06e:	2300      	movs	r3, #0
 800c070:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800c072:	2300      	movs	r3, #0
 800c074:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	613b      	str	r3, [r7, #16]
 800c07a:	e02b      	b.n	800c0d4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	685a      	ldr	r2, [r3, #4]
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	895b      	ldrh	r3, [r3, #10]
 800c084:	4619      	mov	r1, r3
 800c086:	4610      	mov	r0, r2
 800c088:	f7ff ff7e 	bl	800bf88 <lwip_standard_chksum>
 800c08c:	4603      	mov	r3, r0
 800c08e:	461a      	mov	r2, r3
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	4413      	add	r3, r2
 800c094:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	0c1a      	lsrs	r2, r3, #16
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	4413      	add	r3, r2
 800c0a0:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	895b      	ldrh	r3, [r3, #10]
 800c0a6:	f003 0301 	and.w	r3, r3, #1
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00e      	beq.n	800c0ce <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	bf0c      	ite	eq
 800c0b6:	2301      	moveq	r3, #1
 800c0b8:	2300      	movne	r3, #0
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	021b      	lsls	r3, r3, #8
 800c0c2:	b29a      	uxth	r2, r3
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	0a1b      	lsrs	r3, r3, #8
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	613b      	str	r3, [r7, #16]
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1d0      	bne.n	800c07c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d007      	beq.n	800c0f0 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	021b      	lsls	r3, r3, #8
 800c0e4:	b29a      	uxth	r2, r3
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	0a1b      	lsrs	r3, r3, #8
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	43db      	mvns	r3, r3
 800c0f6:	b29b      	uxth	r3, r3
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3718      	adds	r7, #24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c106:	2300      	movs	r3, #0
 800c108:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c10a:	f009 fe5b 	bl	8015dc4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c10e:	f000 f8d9 	bl	800c2c4 <mem_init>
  memp_init();
 800c112:	f000 fc3d 	bl	800c990 <memp_init>
  pbuf_init();
  netif_init();
 800c116:	f000 fd49 	bl	800cbac <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c11a:	f007 f937 	bl	801338c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c11e:	f001 fe5d 	bl	800dddc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c122:	f007 f879 	bl	8013218 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c126:	bf00      	nop
 800c128:	3708      	adds	r7, #8
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
	...

0800c130 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	4603      	mov	r3, r0
 800c138:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c13a:	4b05      	ldr	r3, [pc, #20]	@ (800c150 <ptr_to_mem+0x20>)
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	88fb      	ldrh	r3, [r7, #6]
 800c140:	4413      	add	r3, r2
}
 800c142:	4618      	mov	r0, r3
 800c144:	370c      	adds	r7, #12
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop
 800c150:	24005f24 	.word	0x24005f24

0800c154 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c15c:	4b05      	ldr	r3, [pc, #20]	@ (800c174 <mem_to_ptr+0x20>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	1ad3      	subs	r3, r2, r3
 800c164:	b29b      	uxth	r3, r3
}
 800c166:	4618      	mov	r0, r3
 800c168:	370c      	adds	r7, #12
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	24005f24 	.word	0x24005f24

0800c178 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c178:	b590      	push	{r4, r7, lr}
 800c17a:	b085      	sub	sp, #20
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c180:	4b47      	ldr	r3, [pc, #284]	@ (800c2a0 <plug_holes+0x128>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	429a      	cmp	r2, r3
 800c188:	d206      	bcs.n	800c198 <plug_holes+0x20>
 800c18a:	4b46      	ldr	r3, [pc, #280]	@ (800c2a4 <plug_holes+0x12c>)
 800c18c:	f240 12df 	movw	r2, #479	@ 0x1df
 800c190:	4945      	ldr	r1, [pc, #276]	@ (800c2a8 <plug_holes+0x130>)
 800c192:	4846      	ldr	r0, [pc, #280]	@ (800c2ac <plug_holes+0x134>)
 800c194:	f009 ff92 	bl	80160bc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c198:	4b45      	ldr	r3, [pc, #276]	@ (800c2b0 <plug_holes+0x138>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d306      	bcc.n	800c1b0 <plug_holes+0x38>
 800c1a2:	4b40      	ldr	r3, [pc, #256]	@ (800c2a4 <plug_holes+0x12c>)
 800c1a4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800c1a8:	4942      	ldr	r1, [pc, #264]	@ (800c2b4 <plug_holes+0x13c>)
 800c1aa:	4840      	ldr	r0, [pc, #256]	@ (800c2ac <plug_holes+0x134>)
 800c1ac:	f009 ff86 	bl	80160bc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	791b      	ldrb	r3, [r3, #4]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d006      	beq.n	800c1c6 <plug_holes+0x4e>
 800c1b8:	4b3a      	ldr	r3, [pc, #232]	@ (800c2a4 <plug_holes+0x12c>)
 800c1ba:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800c1be:	493e      	ldr	r1, [pc, #248]	@ (800c2b8 <plug_holes+0x140>)
 800c1c0:	483a      	ldr	r0, [pc, #232]	@ (800c2ac <plug_holes+0x134>)
 800c1c2:	f009 ff7b 	bl	80160bc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	881b      	ldrh	r3, [r3, #0]
 800c1ca:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d906      	bls.n	800c1e0 <plug_holes+0x68>
 800c1d2:	4b34      	ldr	r3, [pc, #208]	@ (800c2a4 <plug_holes+0x12c>)
 800c1d4:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800c1d8:	4938      	ldr	r1, [pc, #224]	@ (800c2bc <plug_holes+0x144>)
 800c1da:	4834      	ldr	r0, [pc, #208]	@ (800c2ac <plug_holes+0x134>)
 800c1dc:	f009 ff6e 	bl	80160bc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	881b      	ldrh	r3, [r3, #0]
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7ff ffa3 	bl	800c130 <ptr_to_mem>
 800c1ea:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d025      	beq.n	800c240 <plug_holes+0xc8>
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	791b      	ldrb	r3, [r3, #4]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d121      	bne.n	800c240 <plug_holes+0xc8>
 800c1fc:	4b2c      	ldr	r3, [pc, #176]	@ (800c2b0 <plug_holes+0x138>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	68fa      	ldr	r2, [r7, #12]
 800c202:	429a      	cmp	r2, r3
 800c204:	d01c      	beq.n	800c240 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c206:	4b2e      	ldr	r3, [pc, #184]	@ (800c2c0 <plug_holes+0x148>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	68fa      	ldr	r2, [r7, #12]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d102      	bne.n	800c216 <plug_holes+0x9e>
      lfree = mem;
 800c210:	4a2b      	ldr	r2, [pc, #172]	@ (800c2c0 <plug_holes+0x148>)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	881a      	ldrh	r2, [r3, #0]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	881b      	ldrh	r3, [r3, #0]
 800c222:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800c226:	4293      	cmp	r3, r2
 800c228:	d00a      	beq.n	800c240 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	881b      	ldrh	r3, [r3, #0]
 800c22e:	4618      	mov	r0, r3
 800c230:	f7ff ff7e 	bl	800c130 <ptr_to_mem>
 800c234:	4604      	mov	r4, r0
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f7ff ff8c 	bl	800c154 <mem_to_ptr>
 800c23c:	4603      	mov	r3, r0
 800c23e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	885b      	ldrh	r3, [r3, #2]
 800c244:	4618      	mov	r0, r3
 800c246:	f7ff ff73 	bl	800c130 <ptr_to_mem>
 800c24a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c24c:	68ba      	ldr	r2, [r7, #8]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	429a      	cmp	r2, r3
 800c252:	d020      	beq.n	800c296 <plug_holes+0x11e>
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	791b      	ldrb	r3, [r3, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d11c      	bne.n	800c296 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c25c:	4b18      	ldr	r3, [pc, #96]	@ (800c2c0 <plug_holes+0x148>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	429a      	cmp	r2, r3
 800c264:	d102      	bne.n	800c26c <plug_holes+0xf4>
      lfree = pmem;
 800c266:	4a16      	ldr	r2, [pc, #88]	@ (800c2c0 <plug_holes+0x148>)
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	881a      	ldrh	r2, [r3, #0]
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	881b      	ldrh	r3, [r3, #0]
 800c278:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d00a      	beq.n	800c296 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	881b      	ldrh	r3, [r3, #0]
 800c284:	4618      	mov	r0, r3
 800c286:	f7ff ff53 	bl	800c130 <ptr_to_mem>
 800c28a:	4604      	mov	r4, r0
 800c28c:	68b8      	ldr	r0, [r7, #8]
 800c28e:	f7ff ff61 	bl	800c154 <mem_to_ptr>
 800c292:	4603      	mov	r3, r0
 800c294:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c296:	bf00      	nop
 800c298:	3714      	adds	r7, #20
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd90      	pop	{r4, r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	24005f24 	.word	0x24005f24
 800c2a4:	080176fc 	.word	0x080176fc
 800c2a8:	0801772c 	.word	0x0801772c
 800c2ac:	08017744 	.word	0x08017744
 800c2b0:	24005f28 	.word	0x24005f28
 800c2b4:	0801776c 	.word	0x0801776c
 800c2b8:	08017788 	.word	0x08017788
 800c2bc:	080177a4 	.word	0x080177a4
 800c2c0:	24005f30 	.word	0x24005f30

0800c2c4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c2ca:	4b1d      	ldr	r3, [pc, #116]	@ (800c340 <mem_init+0x7c>)
 800c2cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c344 <mem_init+0x80>)
 800c2ce:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c2d0:	4b1b      	ldr	r3, [pc, #108]	@ (800c340 <mem_init+0x7c>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800c2dc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c2ea:	f647 50e8 	movw	r0, #32232	@ 0x7de8
 800c2ee:	f7ff ff1f 	bl	800c130 <ptr_to_mem>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	4a14      	ldr	r2, [pc, #80]	@ (800c348 <mem_init+0x84>)
 800c2f6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c2f8:	4b13      	ldr	r3, [pc, #76]	@ (800c348 <mem_init+0x84>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c300:	4b11      	ldr	r3, [pc, #68]	@ (800c348 <mem_init+0x84>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800c308:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c30a:	4b0f      	ldr	r3, [pc, #60]	@ (800c348 <mem_init+0x84>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800c312:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c314:	4b0a      	ldr	r3, [pc, #40]	@ (800c340 <mem_init+0x7c>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4a0c      	ldr	r2, [pc, #48]	@ (800c34c <mem_init+0x88>)
 800c31a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c31c:	480c      	ldr	r0, [pc, #48]	@ (800c350 <mem_init+0x8c>)
 800c31e:	f009 fd5d 	bl	8015ddc <sys_mutex_new>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d006      	beq.n	800c336 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c328:	4b0a      	ldr	r3, [pc, #40]	@ (800c354 <mem_init+0x90>)
 800c32a:	f240 221f 	movw	r2, #543	@ 0x21f
 800c32e:	490a      	ldr	r1, [pc, #40]	@ (800c358 <mem_init+0x94>)
 800c330:	480a      	ldr	r0, [pc, #40]	@ (800c35c <mem_init+0x98>)
 800c332:	f009 fec3 	bl	80160bc <iprintf>
  }
}
 800c336:	bf00      	nop
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	24005f24 	.word	0x24005f24
 800c344:	30000200 	.word	0x30000200
 800c348:	24005f28 	.word	0x24005f28
 800c34c:	24005f30 	.word	0x24005f30
 800c350:	24005f2c 	.word	0x24005f2c
 800c354:	080176fc 	.word	0x080176fc
 800c358:	080177d0 	.word	0x080177d0
 800c35c:	08017744 	.word	0x08017744

0800c360 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b086      	sub	sp, #24
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f7ff fef3 	bl	800c154 <mem_to_ptr>
 800c36e:	4603      	mov	r3, r0
 800c370:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	881b      	ldrh	r3, [r3, #0]
 800c376:	4618      	mov	r0, r3
 800c378:	f7ff feda 	bl	800c130 <ptr_to_mem>
 800c37c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	885b      	ldrh	r3, [r3, #2]
 800c382:	4618      	mov	r0, r3
 800c384:	f7ff fed4 	bl	800c130 <ptr_to_mem>
 800c388:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	881b      	ldrh	r3, [r3, #0]
 800c38e:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800c392:	4293      	cmp	r3, r2
 800c394:	d819      	bhi.n	800c3ca <mem_link_valid+0x6a>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	885b      	ldrh	r3, [r3, #2]
 800c39a:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d813      	bhi.n	800c3ca <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c3a6:	8afa      	ldrh	r2, [r7, #22]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d004      	beq.n	800c3b6 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	881b      	ldrh	r3, [r3, #0]
 800c3b0:	8afa      	ldrh	r2, [r7, #22]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d109      	bne.n	800c3ca <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c3b6:	4b08      	ldr	r3, [pc, #32]	@ (800c3d8 <mem_link_valid+0x78>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c3ba:	693a      	ldr	r2, [r7, #16]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d006      	beq.n	800c3ce <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	885b      	ldrh	r3, [r3, #2]
 800c3c4:	8afa      	ldrh	r2, [r7, #22]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d001      	beq.n	800c3ce <mem_link_valid+0x6e>
    return 0;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	e000      	b.n	800c3d0 <mem_link_valid+0x70>
  }
  return 1;
 800c3ce:	2301      	movs	r3, #1
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3718      	adds	r7, #24
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	24005f28 	.word	0x24005f28

0800c3dc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b088      	sub	sp, #32
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d070      	beq.n	800c4cc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f003 0303 	and.w	r3, r3, #3
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d00d      	beq.n	800c410 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c3f4:	4b37      	ldr	r3, [pc, #220]	@ (800c4d4 <mem_free+0xf8>)
 800c3f6:	f240 2273 	movw	r2, #627	@ 0x273
 800c3fa:	4937      	ldr	r1, [pc, #220]	@ (800c4d8 <mem_free+0xfc>)
 800c3fc:	4837      	ldr	r0, [pc, #220]	@ (800c4dc <mem_free+0x100>)
 800c3fe:	f009 fe5d 	bl	80160bc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c402:	f009 fd3d 	bl	8015e80 <sys_arch_protect>
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f009 fd47 	bl	8015e9c <sys_arch_unprotect>
    return;
 800c40e:	e05e      	b.n	800c4ce <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	3b08      	subs	r3, #8
 800c414:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c416:	4b32      	ldr	r3, [pc, #200]	@ (800c4e0 <mem_free+0x104>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	69fa      	ldr	r2, [r7, #28]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d306      	bcc.n	800c42e <mem_free+0x52>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f103 020c 	add.w	r2, r3, #12
 800c426:	4b2f      	ldr	r3, [pc, #188]	@ (800c4e4 <mem_free+0x108>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d90d      	bls.n	800c44a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c42e:	4b29      	ldr	r3, [pc, #164]	@ (800c4d4 <mem_free+0xf8>)
 800c430:	f240 227f 	movw	r2, #639	@ 0x27f
 800c434:	492c      	ldr	r1, [pc, #176]	@ (800c4e8 <mem_free+0x10c>)
 800c436:	4829      	ldr	r0, [pc, #164]	@ (800c4dc <mem_free+0x100>)
 800c438:	f009 fe40 	bl	80160bc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c43c:	f009 fd20 	bl	8015e80 <sys_arch_protect>
 800c440:	6138      	str	r0, [r7, #16]
 800c442:	6938      	ldr	r0, [r7, #16]
 800c444:	f009 fd2a 	bl	8015e9c <sys_arch_unprotect>
    return;
 800c448:	e041      	b.n	800c4ce <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c44a:	4828      	ldr	r0, [pc, #160]	@ (800c4ec <mem_free+0x110>)
 800c44c:	f009 fcdc 	bl	8015e08 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	791b      	ldrb	r3, [r3, #4]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d110      	bne.n	800c47a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c458:	4b1e      	ldr	r3, [pc, #120]	@ (800c4d4 <mem_free+0xf8>)
 800c45a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800c45e:	4924      	ldr	r1, [pc, #144]	@ (800c4f0 <mem_free+0x114>)
 800c460:	481e      	ldr	r0, [pc, #120]	@ (800c4dc <mem_free+0x100>)
 800c462:	f009 fe2b 	bl	80160bc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c466:	4821      	ldr	r0, [pc, #132]	@ (800c4ec <mem_free+0x110>)
 800c468:	f009 fcdd 	bl	8015e26 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c46c:	f009 fd08 	bl	8015e80 <sys_arch_protect>
 800c470:	6178      	str	r0, [r7, #20]
 800c472:	6978      	ldr	r0, [r7, #20]
 800c474:	f009 fd12 	bl	8015e9c <sys_arch_unprotect>
    return;
 800c478:	e029      	b.n	800c4ce <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c47a:	69f8      	ldr	r0, [r7, #28]
 800c47c:	f7ff ff70 	bl	800c360 <mem_link_valid>
 800c480:	4603      	mov	r3, r0
 800c482:	2b00      	cmp	r3, #0
 800c484:	d110      	bne.n	800c4a8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c486:	4b13      	ldr	r3, [pc, #76]	@ (800c4d4 <mem_free+0xf8>)
 800c488:	f240 2295 	movw	r2, #661	@ 0x295
 800c48c:	4919      	ldr	r1, [pc, #100]	@ (800c4f4 <mem_free+0x118>)
 800c48e:	4813      	ldr	r0, [pc, #76]	@ (800c4dc <mem_free+0x100>)
 800c490:	f009 fe14 	bl	80160bc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c494:	4815      	ldr	r0, [pc, #84]	@ (800c4ec <mem_free+0x110>)
 800c496:	f009 fcc6 	bl	8015e26 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c49a:	f009 fcf1 	bl	8015e80 <sys_arch_protect>
 800c49e:	61b8      	str	r0, [r7, #24]
 800c4a0:	69b8      	ldr	r0, [r7, #24]
 800c4a2:	f009 fcfb 	bl	8015e9c <sys_arch_unprotect>
    return;
 800c4a6:	e012      	b.n	800c4ce <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c4ae:	4b12      	ldr	r3, [pc, #72]	@ (800c4f8 <mem_free+0x11c>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	69fa      	ldr	r2, [r7, #28]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d202      	bcs.n	800c4be <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c4b8:	4a0f      	ldr	r2, [pc, #60]	@ (800c4f8 <mem_free+0x11c>)
 800c4ba:	69fb      	ldr	r3, [r7, #28]
 800c4bc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c4be:	69f8      	ldr	r0, [r7, #28]
 800c4c0:	f7ff fe5a 	bl	800c178 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c4c4:	4809      	ldr	r0, [pc, #36]	@ (800c4ec <mem_free+0x110>)
 800c4c6:	f009 fcae 	bl	8015e26 <sys_mutex_unlock>
 800c4ca:	e000      	b.n	800c4ce <mem_free+0xf2>
    return;
 800c4cc:	bf00      	nop
}
 800c4ce:	3720      	adds	r7, #32
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	080176fc 	.word	0x080176fc
 800c4d8:	080177ec 	.word	0x080177ec
 800c4dc:	08017744 	.word	0x08017744
 800c4e0:	24005f24 	.word	0x24005f24
 800c4e4:	24005f28 	.word	0x24005f28
 800c4e8:	08017810 	.word	0x08017810
 800c4ec:	24005f2c 	.word	0x24005f2c
 800c4f0:	0801782c 	.word	0x0801782c
 800c4f4:	08017854 	.word	0x08017854
 800c4f8:	24005f30 	.word	0x24005f30

0800c4fc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b088      	sub	sp, #32
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	460b      	mov	r3, r1
 800c506:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c508:	887b      	ldrh	r3, [r7, #2]
 800c50a:	3303      	adds	r3, #3
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	f023 0303 	bic.w	r3, r3, #3
 800c512:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c514:	8bfb      	ldrh	r3, [r7, #30]
 800c516:	2b0b      	cmp	r3, #11
 800c518:	d801      	bhi.n	800c51e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c51a:	230c      	movs	r3, #12
 800c51c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c51e:	8bfb      	ldrh	r3, [r7, #30]
 800c520:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800c524:	4293      	cmp	r3, r2
 800c526:	d803      	bhi.n	800c530 <mem_trim+0x34>
 800c528:	8bfa      	ldrh	r2, [r7, #30]
 800c52a:	887b      	ldrh	r3, [r7, #2]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d201      	bcs.n	800c534 <mem_trim+0x38>
    return NULL;
 800c530:	2300      	movs	r3, #0
 800c532:	e0dc      	b.n	800c6ee <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c534:	4b70      	ldr	r3, [pc, #448]	@ (800c6f8 <mem_trim+0x1fc>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d304      	bcc.n	800c548 <mem_trim+0x4c>
 800c53e:	4b6f      	ldr	r3, [pc, #444]	@ (800c6fc <mem_trim+0x200>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	429a      	cmp	r2, r3
 800c546:	d306      	bcc.n	800c556 <mem_trim+0x5a>
 800c548:	4b6d      	ldr	r3, [pc, #436]	@ (800c700 <mem_trim+0x204>)
 800c54a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800c54e:	496d      	ldr	r1, [pc, #436]	@ (800c704 <mem_trim+0x208>)
 800c550:	486d      	ldr	r0, [pc, #436]	@ (800c708 <mem_trim+0x20c>)
 800c552:	f009 fdb3 	bl	80160bc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c556:	4b68      	ldr	r3, [pc, #416]	@ (800c6f8 <mem_trim+0x1fc>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d304      	bcc.n	800c56a <mem_trim+0x6e>
 800c560:	4b66      	ldr	r3, [pc, #408]	@ (800c6fc <mem_trim+0x200>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	429a      	cmp	r2, r3
 800c568:	d307      	bcc.n	800c57a <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c56a:	f009 fc89 	bl	8015e80 <sys_arch_protect>
 800c56e:	60b8      	str	r0, [r7, #8]
 800c570:	68b8      	ldr	r0, [r7, #8]
 800c572:	f009 fc93 	bl	8015e9c <sys_arch_unprotect>
    return rmem;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	e0b9      	b.n	800c6ee <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	3b08      	subs	r3, #8
 800c57e:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c580:	69b8      	ldr	r0, [r7, #24]
 800c582:	f7ff fde7 	bl	800c154 <mem_to_ptr>
 800c586:	4603      	mov	r3, r0
 800c588:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	881a      	ldrh	r2, [r3, #0]
 800c58e:	8afb      	ldrh	r3, [r7, #22]
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	b29b      	uxth	r3, r3
 800c594:	3b08      	subs	r3, #8
 800c596:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c598:	8bfa      	ldrh	r2, [r7, #30]
 800c59a:	8abb      	ldrh	r3, [r7, #20]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d906      	bls.n	800c5ae <mem_trim+0xb2>
 800c5a0:	4b57      	ldr	r3, [pc, #348]	@ (800c700 <mem_trim+0x204>)
 800c5a2:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800c5a6:	4959      	ldr	r1, [pc, #356]	@ (800c70c <mem_trim+0x210>)
 800c5a8:	4857      	ldr	r0, [pc, #348]	@ (800c708 <mem_trim+0x20c>)
 800c5aa:	f009 fd87 	bl	80160bc <iprintf>
  if (newsize > size) {
 800c5ae:	8bfa      	ldrh	r2, [r7, #30]
 800c5b0:	8abb      	ldrh	r3, [r7, #20]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d901      	bls.n	800c5ba <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	e099      	b.n	800c6ee <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800c5ba:	8bfa      	ldrh	r2, [r7, #30]
 800c5bc:	8abb      	ldrh	r3, [r7, #20]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d101      	bne.n	800c5c6 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	e093      	b.n	800c6ee <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c5c6:	4852      	ldr	r0, [pc, #328]	@ (800c710 <mem_trim+0x214>)
 800c5c8:	f009 fc1e 	bl	8015e08 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	881b      	ldrh	r3, [r3, #0]
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7ff fdad 	bl	800c130 <ptr_to_mem>
 800c5d6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	791b      	ldrb	r3, [r3, #4]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d141      	bne.n	800c664 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	881b      	ldrh	r3, [r3, #0]
 800c5e4:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d106      	bne.n	800c5fa <mem_trim+0xfe>
 800c5ec:	4b44      	ldr	r3, [pc, #272]	@ (800c700 <mem_trim+0x204>)
 800c5ee:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800c5f2:	4948      	ldr	r1, [pc, #288]	@ (800c714 <mem_trim+0x218>)
 800c5f4:	4844      	ldr	r0, [pc, #272]	@ (800c708 <mem_trim+0x20c>)
 800c5f6:	f009 fd61 	bl	80160bc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	881b      	ldrh	r3, [r3, #0]
 800c5fe:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c600:	8afa      	ldrh	r2, [r7, #22]
 800c602:	8bfb      	ldrh	r3, [r7, #30]
 800c604:	4413      	add	r3, r2
 800c606:	b29b      	uxth	r3, r3
 800c608:	3308      	adds	r3, #8
 800c60a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c60c:	4b42      	ldr	r3, [pc, #264]	@ (800c718 <mem_trim+0x21c>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	693a      	ldr	r2, [r7, #16]
 800c612:	429a      	cmp	r2, r3
 800c614:	d106      	bne.n	800c624 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800c616:	89fb      	ldrh	r3, [r7, #14]
 800c618:	4618      	mov	r0, r3
 800c61a:	f7ff fd89 	bl	800c130 <ptr_to_mem>
 800c61e:	4603      	mov	r3, r0
 800c620:	4a3d      	ldr	r2, [pc, #244]	@ (800c718 <mem_trim+0x21c>)
 800c622:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c624:	89fb      	ldrh	r3, [r7, #14]
 800c626:	4618      	mov	r0, r3
 800c628:	f7ff fd82 	bl	800c130 <ptr_to_mem>
 800c62c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	2200      	movs	r2, #0
 800c632:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	89ba      	ldrh	r2, [r7, #12]
 800c638:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	8afa      	ldrh	r2, [r7, #22]
 800c63e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	89fa      	ldrh	r2, [r7, #14]
 800c644:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	881b      	ldrh	r3, [r3, #0]
 800c64a:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800c64e:	4293      	cmp	r3, r2
 800c650:	d049      	beq.n	800c6e6 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	881b      	ldrh	r3, [r3, #0]
 800c656:	4618      	mov	r0, r3
 800c658:	f7ff fd6a 	bl	800c130 <ptr_to_mem>
 800c65c:	4602      	mov	r2, r0
 800c65e:	89fb      	ldrh	r3, [r7, #14]
 800c660:	8053      	strh	r3, [r2, #2]
 800c662:	e040      	b.n	800c6e6 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c664:	8bfb      	ldrh	r3, [r7, #30]
 800c666:	f103 0214 	add.w	r2, r3, #20
 800c66a:	8abb      	ldrh	r3, [r7, #20]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d83a      	bhi.n	800c6e6 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c670:	8afa      	ldrh	r2, [r7, #22]
 800c672:	8bfb      	ldrh	r3, [r7, #30]
 800c674:	4413      	add	r3, r2
 800c676:	b29b      	uxth	r3, r3
 800c678:	3308      	adds	r3, #8
 800c67a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c67c:	69bb      	ldr	r3, [r7, #24]
 800c67e:	881b      	ldrh	r3, [r3, #0]
 800c680:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800c684:	4293      	cmp	r3, r2
 800c686:	d106      	bne.n	800c696 <mem_trim+0x19a>
 800c688:	4b1d      	ldr	r3, [pc, #116]	@ (800c700 <mem_trim+0x204>)
 800c68a:	f240 3216 	movw	r2, #790	@ 0x316
 800c68e:	4921      	ldr	r1, [pc, #132]	@ (800c714 <mem_trim+0x218>)
 800c690:	481d      	ldr	r0, [pc, #116]	@ (800c708 <mem_trim+0x20c>)
 800c692:	f009 fd13 	bl	80160bc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c696:	89fb      	ldrh	r3, [r7, #14]
 800c698:	4618      	mov	r0, r3
 800c69a:	f7ff fd49 	bl	800c130 <ptr_to_mem>
 800c69e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c6a0:	4b1d      	ldr	r3, [pc, #116]	@ (800c718 <mem_trim+0x21c>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	693a      	ldr	r2, [r7, #16]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d202      	bcs.n	800c6b0 <mem_trim+0x1b4>
      lfree = mem2;
 800c6aa:	4a1b      	ldr	r2, [pc, #108]	@ (800c718 <mem_trim+0x21c>)
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	881a      	ldrh	r2, [r3, #0]
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	8afa      	ldrh	r2, [r7, #22]
 800c6c2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	89fa      	ldrh	r2, [r7, #14]
 800c6c8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	881b      	ldrh	r3, [r3, #0]
 800c6ce:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d007      	beq.n	800c6e6 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	881b      	ldrh	r3, [r3, #0]
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7ff fd28 	bl	800c130 <ptr_to_mem>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	89fb      	ldrh	r3, [r7, #14]
 800c6e4:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c6e6:	480a      	ldr	r0, [pc, #40]	@ (800c710 <mem_trim+0x214>)
 800c6e8:	f009 fb9d 	bl	8015e26 <sys_mutex_unlock>
  return rmem;
 800c6ec:	687b      	ldr	r3, [r7, #4]
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3720      	adds	r7, #32
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	24005f24 	.word	0x24005f24
 800c6fc:	24005f28 	.word	0x24005f28
 800c700:	080176fc 	.word	0x080176fc
 800c704:	08017888 	.word	0x08017888
 800c708:	08017744 	.word	0x08017744
 800c70c:	080178a0 	.word	0x080178a0
 800c710:	24005f2c 	.word	0x24005f2c
 800c714:	080178c0 	.word	0x080178c0
 800c718:	24005f30 	.word	0x24005f30

0800c71c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b088      	sub	sp, #32
 800c720:	af00      	add	r7, sp, #0
 800c722:	4603      	mov	r3, r0
 800c724:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c726:	88fb      	ldrh	r3, [r7, #6]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d101      	bne.n	800c730 <mem_malloc+0x14>
    return NULL;
 800c72c:	2300      	movs	r3, #0
 800c72e:	e0e6      	b.n	800c8fe <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c730:	88fb      	ldrh	r3, [r7, #6]
 800c732:	3303      	adds	r3, #3
 800c734:	b29b      	uxth	r3, r3
 800c736:	f023 0303 	bic.w	r3, r3, #3
 800c73a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c73c:	8bbb      	ldrh	r3, [r7, #28]
 800c73e:	2b0b      	cmp	r3, #11
 800c740:	d801      	bhi.n	800c746 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c742:	230c      	movs	r3, #12
 800c744:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c746:	8bbb      	ldrh	r3, [r7, #28]
 800c748:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d803      	bhi.n	800c758 <mem_malloc+0x3c>
 800c750:	8bba      	ldrh	r2, [r7, #28]
 800c752:	88fb      	ldrh	r3, [r7, #6]
 800c754:	429a      	cmp	r2, r3
 800c756:	d201      	bcs.n	800c75c <mem_malloc+0x40>
    return NULL;
 800c758:	2300      	movs	r3, #0
 800c75a:	e0d0      	b.n	800c8fe <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c75c:	486a      	ldr	r0, [pc, #424]	@ (800c908 <mem_malloc+0x1ec>)
 800c75e:	f009 fb53 	bl	8015e08 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c762:	4b6a      	ldr	r3, [pc, #424]	@ (800c90c <mem_malloc+0x1f0>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4618      	mov	r0, r3
 800c768:	f7ff fcf4 	bl	800c154 <mem_to_ptr>
 800c76c:	4603      	mov	r3, r0
 800c76e:	83fb      	strh	r3, [r7, #30]
 800c770:	e0b9      	b.n	800c8e6 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c772:	8bfb      	ldrh	r3, [r7, #30]
 800c774:	4618      	mov	r0, r3
 800c776:	f7ff fcdb 	bl	800c130 <ptr_to_mem>
 800c77a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	791b      	ldrb	r3, [r3, #4]
 800c780:	2b00      	cmp	r3, #0
 800c782:	f040 80a9 	bne.w	800c8d8 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	881b      	ldrh	r3, [r3, #0]
 800c78a:	461a      	mov	r2, r3
 800c78c:	8bfb      	ldrh	r3, [r7, #30]
 800c78e:	1ad3      	subs	r3, r2, r3
 800c790:	f1a3 0208 	sub.w	r2, r3, #8
 800c794:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c796:	429a      	cmp	r2, r3
 800c798:	f0c0 809e 	bcc.w	800c8d8 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	881b      	ldrh	r3, [r3, #0]
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	8bfb      	ldrh	r3, [r7, #30]
 800c7a4:	1ad3      	subs	r3, r2, r3
 800c7a6:	f1a3 0208 	sub.w	r2, r3, #8
 800c7aa:	8bbb      	ldrh	r3, [r7, #28]
 800c7ac:	3314      	adds	r3, #20
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d335      	bcc.n	800c81e <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c7b2:	8bfa      	ldrh	r2, [r7, #30]
 800c7b4:	8bbb      	ldrh	r3, [r7, #28]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	3308      	adds	r3, #8
 800c7bc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c7be:	8a7b      	ldrh	r3, [r7, #18]
 800c7c0:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d106      	bne.n	800c7d6 <mem_malloc+0xba>
 800c7c8:	4b51      	ldr	r3, [pc, #324]	@ (800c910 <mem_malloc+0x1f4>)
 800c7ca:	f240 3287 	movw	r2, #903	@ 0x387
 800c7ce:	4951      	ldr	r1, [pc, #324]	@ (800c914 <mem_malloc+0x1f8>)
 800c7d0:	4851      	ldr	r0, [pc, #324]	@ (800c918 <mem_malloc+0x1fc>)
 800c7d2:	f009 fc73 	bl	80160bc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c7d6:	8a7b      	ldrh	r3, [r7, #18]
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7ff fca9 	bl	800c130 <ptr_to_mem>
 800c7de:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	881a      	ldrh	r2, [r3, #0]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	8bfa      	ldrh	r2, [r7, #30]
 800c7f2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	8a7a      	ldrh	r2, [r7, #18]
 800c7f8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	881b      	ldrh	r3, [r3, #0]
 800c804:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800c808:	4293      	cmp	r3, r2
 800c80a:	d00b      	beq.n	800c824 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	881b      	ldrh	r3, [r3, #0]
 800c810:	4618      	mov	r0, r3
 800c812:	f7ff fc8d 	bl	800c130 <ptr_to_mem>
 800c816:	4602      	mov	r2, r0
 800c818:	8a7b      	ldrh	r3, [r7, #18]
 800c81a:	8053      	strh	r3, [r2, #2]
 800c81c:	e002      	b.n	800c824 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	2201      	movs	r2, #1
 800c822:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c824:	4b39      	ldr	r3, [pc, #228]	@ (800c90c <mem_malloc+0x1f0>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	697a      	ldr	r2, [r7, #20]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d127      	bne.n	800c87e <mem_malloc+0x162>
          struct mem *cur = lfree;
 800c82e:	4b37      	ldr	r3, [pc, #220]	@ (800c90c <mem_malloc+0x1f0>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c834:	e005      	b.n	800c842 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	881b      	ldrh	r3, [r3, #0]
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7ff fc78 	bl	800c130 <ptr_to_mem>
 800c840:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c842:	69bb      	ldr	r3, [r7, #24]
 800c844:	791b      	ldrb	r3, [r3, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d004      	beq.n	800c854 <mem_malloc+0x138>
 800c84a:	4b34      	ldr	r3, [pc, #208]	@ (800c91c <mem_malloc+0x200>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	69ba      	ldr	r2, [r7, #24]
 800c850:	429a      	cmp	r2, r3
 800c852:	d1f0      	bne.n	800c836 <mem_malloc+0x11a>
          }
          lfree = cur;
 800c854:	4a2d      	ldr	r2, [pc, #180]	@ (800c90c <mem_malloc+0x1f0>)
 800c856:	69bb      	ldr	r3, [r7, #24]
 800c858:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c85a:	4b2c      	ldr	r3, [pc, #176]	@ (800c90c <mem_malloc+0x1f0>)
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	4b2f      	ldr	r3, [pc, #188]	@ (800c91c <mem_malloc+0x200>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	429a      	cmp	r2, r3
 800c864:	d00b      	beq.n	800c87e <mem_malloc+0x162>
 800c866:	4b29      	ldr	r3, [pc, #164]	@ (800c90c <mem_malloc+0x1f0>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	791b      	ldrb	r3, [r3, #4]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d006      	beq.n	800c87e <mem_malloc+0x162>
 800c870:	4b27      	ldr	r3, [pc, #156]	@ (800c910 <mem_malloc+0x1f4>)
 800c872:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800c876:	492a      	ldr	r1, [pc, #168]	@ (800c920 <mem_malloc+0x204>)
 800c878:	4827      	ldr	r0, [pc, #156]	@ (800c918 <mem_malloc+0x1fc>)
 800c87a:	f009 fc1f 	bl	80160bc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c87e:	4822      	ldr	r0, [pc, #136]	@ (800c908 <mem_malloc+0x1ec>)
 800c880:	f009 fad1 	bl	8015e26 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c884:	8bba      	ldrh	r2, [r7, #28]
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	4413      	add	r3, r2
 800c88a:	3308      	adds	r3, #8
 800c88c:	4a23      	ldr	r2, [pc, #140]	@ (800c91c <mem_malloc+0x200>)
 800c88e:	6812      	ldr	r2, [r2, #0]
 800c890:	4293      	cmp	r3, r2
 800c892:	d906      	bls.n	800c8a2 <mem_malloc+0x186>
 800c894:	4b1e      	ldr	r3, [pc, #120]	@ (800c910 <mem_malloc+0x1f4>)
 800c896:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800c89a:	4922      	ldr	r1, [pc, #136]	@ (800c924 <mem_malloc+0x208>)
 800c89c:	481e      	ldr	r0, [pc, #120]	@ (800c918 <mem_malloc+0x1fc>)
 800c89e:	f009 fc0d 	bl	80160bc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	f003 0303 	and.w	r3, r3, #3
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d006      	beq.n	800c8ba <mem_malloc+0x19e>
 800c8ac:	4b18      	ldr	r3, [pc, #96]	@ (800c910 <mem_malloc+0x1f4>)
 800c8ae:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800c8b2:	491d      	ldr	r1, [pc, #116]	@ (800c928 <mem_malloc+0x20c>)
 800c8b4:	4818      	ldr	r0, [pc, #96]	@ (800c918 <mem_malloc+0x1fc>)
 800c8b6:	f009 fc01 	bl	80160bc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	f003 0303 	and.w	r3, r3, #3
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d006      	beq.n	800c8d2 <mem_malloc+0x1b6>
 800c8c4:	4b12      	ldr	r3, [pc, #72]	@ (800c910 <mem_malloc+0x1f4>)
 800c8c6:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800c8ca:	4918      	ldr	r1, [pc, #96]	@ (800c92c <mem_malloc+0x210>)
 800c8cc:	4812      	ldr	r0, [pc, #72]	@ (800c918 <mem_malloc+0x1fc>)
 800c8ce:	f009 fbf5 	bl	80160bc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	3308      	adds	r3, #8
 800c8d6:	e012      	b.n	800c8fe <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800c8d8:	8bfb      	ldrh	r3, [r7, #30]
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7ff fc28 	bl	800c130 <ptr_to_mem>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	881b      	ldrh	r3, [r3, #0]
 800c8e4:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c8e6:	8bfa      	ldrh	r2, [r7, #30]
 800c8e8:	8bb9      	ldrh	r1, [r7, #28]
 800c8ea:	f647 53e8 	movw	r3, #32232	@ 0x7de8
 800c8ee:	1a5b      	subs	r3, r3, r1
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	f4ff af3e 	bcc.w	800c772 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c8f6:	4804      	ldr	r0, [pc, #16]	@ (800c908 <mem_malloc+0x1ec>)
 800c8f8:	f009 fa95 	bl	8015e26 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3720      	adds	r7, #32
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	24005f2c 	.word	0x24005f2c
 800c90c:	24005f30 	.word	0x24005f30
 800c910:	080176fc 	.word	0x080176fc
 800c914:	080178c0 	.word	0x080178c0
 800c918:	08017744 	.word	0x08017744
 800c91c:	24005f28 	.word	0x24005f28
 800c920:	080178d4 	.word	0x080178d4
 800c924:	080178f0 	.word	0x080178f0
 800c928:	08017920 	.word	0x08017920
 800c92c:	08017950 	.word	0x08017950

0800c930 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	689b      	ldr	r3, [r3, #8]
 800c93c:	2200      	movs	r2, #0
 800c93e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	3303      	adds	r3, #3
 800c946:	f023 0303 	bic.w	r3, r3, #3
 800c94a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c94c:	2300      	movs	r3, #0
 800c94e:	60fb      	str	r3, [r7, #12]
 800c950:	e011      	b.n	800c976 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	881b      	ldrh	r3, [r3, #0]
 800c968:	461a      	mov	r2, r3
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	4413      	add	r3, r2
 800c96e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	3301      	adds	r3, #1
 800c974:	60fb      	str	r3, [r7, #12]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	885b      	ldrh	r3, [r3, #2]
 800c97a:	461a      	mov	r2, r3
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	4293      	cmp	r3, r2
 800c980:	dbe7      	blt.n	800c952 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c982:	bf00      	nop
 800c984:	bf00      	nop
 800c986:	3714      	adds	r7, #20
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c996:	2300      	movs	r3, #0
 800c998:	80fb      	strh	r3, [r7, #6]
 800c99a:	e009      	b.n	800c9b0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c99c:	88fb      	ldrh	r3, [r7, #6]
 800c99e:	4a08      	ldr	r2, [pc, #32]	@ (800c9c0 <memp_init+0x30>)
 800c9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7ff ffc3 	bl	800c930 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c9aa:	88fb      	ldrh	r3, [r7, #6]
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	80fb      	strh	r3, [r7, #6]
 800c9b0:	88fb      	ldrh	r3, [r7, #6]
 800c9b2:	2b0c      	cmp	r3, #12
 800c9b4:	d9f2      	bls.n	800c99c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c9b6:	bf00      	nop
 800c9b8:	bf00      	nop
 800c9ba:	3708      	adds	r7, #8
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	0801a180 	.word	0x0801a180

0800c9c4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c9cc:	f009 fa58 	bl	8015e80 <sys_arch_protect>
 800c9d0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	689b      	ldr	r3, [r3, #8]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d015      	beq.n	800ca0c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	68ba      	ldr	r2, [r7, #8]
 800c9e6:	6812      	ldr	r2, [r2, #0]
 800c9e8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	f003 0303 	and.w	r3, r3, #3
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d006      	beq.n	800ca02 <do_memp_malloc_pool+0x3e>
 800c9f4:	4b09      	ldr	r3, [pc, #36]	@ (800ca1c <do_memp_malloc_pool+0x58>)
 800c9f6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800c9fa:	4909      	ldr	r1, [pc, #36]	@ (800ca20 <do_memp_malloc_pool+0x5c>)
 800c9fc:	4809      	ldr	r0, [pc, #36]	@ (800ca24 <do_memp_malloc_pool+0x60>)
 800c9fe:	f009 fb5d 	bl	80160bc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f009 fa4a 	bl	8015e9c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	e003      	b.n	800ca14 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ca0c:	68f8      	ldr	r0, [r7, #12]
 800ca0e:	f009 fa45 	bl	8015e9c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ca12:	2300      	movs	r3, #0
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3710      	adds	r7, #16
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	08017974 	.word	0x08017974
 800ca20:	080179a4 	.word	0x080179a4
 800ca24:	080179c8 	.word	0x080179c8

0800ca28 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d106      	bne.n	800ca44 <memp_malloc_pool+0x1c>
 800ca36:	4b0a      	ldr	r3, [pc, #40]	@ (800ca60 <memp_malloc_pool+0x38>)
 800ca38:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800ca3c:	4909      	ldr	r1, [pc, #36]	@ (800ca64 <memp_malloc_pool+0x3c>)
 800ca3e:	480a      	ldr	r0, [pc, #40]	@ (800ca68 <memp_malloc_pool+0x40>)
 800ca40:	f009 fb3c 	bl	80160bc <iprintf>
  if (desc == NULL) {
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d101      	bne.n	800ca4e <memp_malloc_pool+0x26>
    return NULL;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	e003      	b.n	800ca56 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f7ff ffb8 	bl	800c9c4 <do_memp_malloc_pool>
 800ca54:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	08017974 	.word	0x08017974
 800ca64:	080179f0 	.word	0x080179f0
 800ca68:	080179c8 	.word	0x080179c8

0800ca6c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	4603      	mov	r3, r0
 800ca74:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ca76:	79fb      	ldrb	r3, [r7, #7]
 800ca78:	2b0c      	cmp	r3, #12
 800ca7a:	d908      	bls.n	800ca8e <memp_malloc+0x22>
 800ca7c:	4b0a      	ldr	r3, [pc, #40]	@ (800caa8 <memp_malloc+0x3c>)
 800ca7e:	f240 1257 	movw	r2, #343	@ 0x157
 800ca82:	490a      	ldr	r1, [pc, #40]	@ (800caac <memp_malloc+0x40>)
 800ca84:	480a      	ldr	r0, [pc, #40]	@ (800cab0 <memp_malloc+0x44>)
 800ca86:	f009 fb19 	bl	80160bc <iprintf>
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	e008      	b.n	800caa0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ca8e:	79fb      	ldrb	r3, [r7, #7]
 800ca90:	4a08      	ldr	r2, [pc, #32]	@ (800cab4 <memp_malloc+0x48>)
 800ca92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7ff ff94 	bl	800c9c4 <do_memp_malloc_pool>
 800ca9c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3710      	adds	r7, #16
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	08017974 	.word	0x08017974
 800caac:	08017a04 	.word	0x08017a04
 800cab0:	080179c8 	.word	0x080179c8
 800cab4:	0801a180 	.word	0x0801a180

0800cab8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	f003 0303 	and.w	r3, r3, #3
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d006      	beq.n	800cada <do_memp_free_pool+0x22>
 800cacc:	4b0d      	ldr	r3, [pc, #52]	@ (800cb04 <do_memp_free_pool+0x4c>)
 800cace:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800cad2:	490d      	ldr	r1, [pc, #52]	@ (800cb08 <do_memp_free_pool+0x50>)
 800cad4:	480d      	ldr	r0, [pc, #52]	@ (800cb0c <do_memp_free_pool+0x54>)
 800cad6:	f009 faf1 	bl	80160bc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800cade:	f009 f9cf 	bl	8015e80 <sys_arch_protect>
 800cae2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	689b      	ldr	r3, [r3, #8]
 800caf2:	68fa      	ldr	r2, [r7, #12]
 800caf4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800caf6:	68b8      	ldr	r0, [r7, #8]
 800caf8:	f009 f9d0 	bl	8015e9c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800cafc:	bf00      	nop
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	08017974 	.word	0x08017974
 800cb08:	08017a24 	.word	0x08017a24
 800cb0c:	080179c8 	.word	0x080179c8

0800cb10 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d106      	bne.n	800cb2e <memp_free_pool+0x1e>
 800cb20:	4b0a      	ldr	r3, [pc, #40]	@ (800cb4c <memp_free_pool+0x3c>)
 800cb22:	f240 1295 	movw	r2, #405	@ 0x195
 800cb26:	490a      	ldr	r1, [pc, #40]	@ (800cb50 <memp_free_pool+0x40>)
 800cb28:	480a      	ldr	r0, [pc, #40]	@ (800cb54 <memp_free_pool+0x44>)
 800cb2a:	f009 fac7 	bl	80160bc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d007      	beq.n	800cb44 <memp_free_pool+0x34>
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d004      	beq.n	800cb44 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800cb3a:	6839      	ldr	r1, [r7, #0]
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f7ff ffbb 	bl	800cab8 <do_memp_free_pool>
 800cb42:	e000      	b.n	800cb46 <memp_free_pool+0x36>
    return;
 800cb44:	bf00      	nop
}
 800cb46:	3708      	adds	r7, #8
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	08017974 	.word	0x08017974
 800cb50:	080179f0 	.word	0x080179f0
 800cb54:	080179c8 	.word	0x080179c8

0800cb58 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	4603      	mov	r3, r0
 800cb60:	6039      	str	r1, [r7, #0]
 800cb62:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cb64:	79fb      	ldrb	r3, [r7, #7]
 800cb66:	2b0c      	cmp	r3, #12
 800cb68:	d907      	bls.n	800cb7a <memp_free+0x22>
 800cb6a:	4b0c      	ldr	r3, [pc, #48]	@ (800cb9c <memp_free+0x44>)
 800cb6c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800cb70:	490b      	ldr	r1, [pc, #44]	@ (800cba0 <memp_free+0x48>)
 800cb72:	480c      	ldr	r0, [pc, #48]	@ (800cba4 <memp_free+0x4c>)
 800cb74:	f009 faa2 	bl	80160bc <iprintf>
 800cb78:	e00c      	b.n	800cb94 <memp_free+0x3c>

  if (mem == NULL) {
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d008      	beq.n	800cb92 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cb80:	79fb      	ldrb	r3, [r7, #7]
 800cb82:	4a09      	ldr	r2, [pc, #36]	@ (800cba8 <memp_free+0x50>)
 800cb84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb88:	6839      	ldr	r1, [r7, #0]
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7ff ff94 	bl	800cab8 <do_memp_free_pool>
 800cb90:	e000      	b.n	800cb94 <memp_free+0x3c>
    return;
 800cb92:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800cb94:	3708      	adds	r7, #8
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	08017974 	.word	0x08017974
 800cba0:	08017a44 	.word	0x08017a44
 800cba4:	080179c8 	.word	0x080179c8
 800cba8:	0801a180 	.word	0x0801a180

0800cbac <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800cbac:	b480      	push	{r7}
 800cbae:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cbb0:	bf00      	nop
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr
	...

0800cbbc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b086      	sub	sp, #24
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
 800cbc8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d108      	bne.n	800cbe2 <netif_add+0x26>
 800cbd0:	4b57      	ldr	r3, [pc, #348]	@ (800cd30 <netif_add+0x174>)
 800cbd2:	f240 1227 	movw	r2, #295	@ 0x127
 800cbd6:	4957      	ldr	r1, [pc, #348]	@ (800cd34 <netif_add+0x178>)
 800cbd8:	4857      	ldr	r0, [pc, #348]	@ (800cd38 <netif_add+0x17c>)
 800cbda:	f009 fa6f 	bl	80160bc <iprintf>
 800cbde:	2300      	movs	r3, #0
 800cbe0:	e0a2      	b.n	800cd28 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d108      	bne.n	800cbfa <netif_add+0x3e>
 800cbe8:	4b51      	ldr	r3, [pc, #324]	@ (800cd30 <netif_add+0x174>)
 800cbea:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800cbee:	4953      	ldr	r1, [pc, #332]	@ (800cd3c <netif_add+0x180>)
 800cbf0:	4851      	ldr	r0, [pc, #324]	@ (800cd38 <netif_add+0x17c>)
 800cbf2:	f009 fa63 	bl	80160bc <iprintf>
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	e096      	b.n	800cd28 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d101      	bne.n	800cc04 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cc00:	4b4f      	ldr	r3, [pc, #316]	@ (800cd40 <netif_add+0x184>)
 800cc02:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d101      	bne.n	800cc0e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800cc0a:	4b4d      	ldr	r3, [pc, #308]	@ (800cd40 <netif_add+0x184>)
 800cc0c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d101      	bne.n	800cc18 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800cc14:	4b4a      	ldr	r3, [pc, #296]	@ (800cd40 <netif_add+0x184>)
 800cc16:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2200      	movs	r2, #0
 800cc22:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2200      	movs	r2, #0
 800cc28:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	4a45      	ldr	r2, [pc, #276]	@ (800cd44 <netif_add+0x188>)
 800cc2e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2200      	movs	r2, #0
 800cc34:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2200      	movs	r2, #0
 800cc42:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	6a3a      	ldr	r2, [r7, #32]
 800cc48:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800cc4a:	4b3f      	ldr	r3, [pc, #252]	@ (800cd48 <netif_add+0x18c>)
 800cc4c:	781a      	ldrb	r2, [r3, #0]
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc58:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	68b9      	ldr	r1, [r7, #8]
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	f000 f913 	bl	800ce8c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	4798      	blx	r3
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d001      	beq.n	800cc76 <netif_add+0xba>
    return NULL;
 800cc72:	2300      	movs	r3, #0
 800cc74:	e058      	b.n	800cd28 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cc7c:	2bff      	cmp	r3, #255	@ 0xff
 800cc7e:	d103      	bne.n	800cc88 <netif_add+0xcc>
        netif->num = 0;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2200      	movs	r2, #0
 800cc84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cc8c:	4b2f      	ldr	r3, [pc, #188]	@ (800cd4c <netif_add+0x190>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	617b      	str	r3, [r7, #20]
 800cc92:	e02b      	b.n	800ccec <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cc94:	697a      	ldr	r2, [r7, #20]
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d106      	bne.n	800ccaa <netif_add+0xee>
 800cc9c:	4b24      	ldr	r3, [pc, #144]	@ (800cd30 <netif_add+0x174>)
 800cc9e:	f240 128b 	movw	r2, #395	@ 0x18b
 800cca2:	492b      	ldr	r1, [pc, #172]	@ (800cd50 <netif_add+0x194>)
 800cca4:	4824      	ldr	r0, [pc, #144]	@ (800cd38 <netif_add+0x17c>)
 800cca6:	f009 fa09 	bl	80160bc <iprintf>
        num_netifs++;
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	3301      	adds	r3, #1
 800ccae:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	2bff      	cmp	r3, #255	@ 0xff
 800ccb4:	dd06      	ble.n	800ccc4 <netif_add+0x108>
 800ccb6:	4b1e      	ldr	r3, [pc, #120]	@ (800cd30 <netif_add+0x174>)
 800ccb8:	f240 128d 	movw	r2, #397	@ 0x18d
 800ccbc:	4925      	ldr	r1, [pc, #148]	@ (800cd54 <netif_add+0x198>)
 800ccbe:	481e      	ldr	r0, [pc, #120]	@ (800cd38 <netif_add+0x17c>)
 800ccc0:	f009 f9fc 	bl	80160bc <iprintf>
        if (netif2->num == netif->num) {
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d108      	bne.n	800cce6 <netif_add+0x12a>
          netif->num++;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ccda:	3301      	adds	r3, #1
 800ccdc:	b2da      	uxtb	r2, r3
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800cce4:	e005      	b.n	800ccf2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	617b      	str	r3, [r7, #20]
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d1d0      	bne.n	800cc94 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d1be      	bne.n	800cc76 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ccfe:	2bfe      	cmp	r3, #254	@ 0xfe
 800cd00:	d103      	bne.n	800cd0a <netif_add+0x14e>
    netif_num = 0;
 800cd02:	4b11      	ldr	r3, [pc, #68]	@ (800cd48 <netif_add+0x18c>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	701a      	strb	r2, [r3, #0]
 800cd08:	e006      	b.n	800cd18 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cd10:	3301      	adds	r3, #1
 800cd12:	b2da      	uxtb	r2, r3
 800cd14:	4b0c      	ldr	r3, [pc, #48]	@ (800cd48 <netif_add+0x18c>)
 800cd16:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cd18:	4b0c      	ldr	r3, [pc, #48]	@ (800cd4c <netif_add+0x190>)
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cd20:	4a0a      	ldr	r2, [pc, #40]	@ (800cd4c <netif_add+0x190>)
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800cd26:	68fb      	ldr	r3, [r7, #12]
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3718      	adds	r7, #24
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	08017a60 	.word	0x08017a60
 800cd34:	08017af4 	.word	0x08017af4
 800cd38:	08017ab0 	.word	0x08017ab0
 800cd3c:	08017b10 	.word	0x08017b10
 800cd40:	0801a1f4 	.word	0x0801a1f4
 800cd44:	0800d167 	.word	0x0800d167
 800cd48:	2400c9c8 	.word	0x2400c9c8
 800cd4c:	2400c9c0 	.word	0x2400c9c0
 800cd50:	08017b34 	.word	0x08017b34
 800cd54:	08017b48 	.word	0x08017b48

0800cd58 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cd62:	6839      	ldr	r1, [r7, #0]
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f002 fb87 	bl	800f478 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cd6a:	6839      	ldr	r1, [r7, #0]
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f006 fc97 	bl	80136a0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800cd72:	bf00      	nop
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
	...

0800cd7c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b086      	sub	sp, #24
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d106      	bne.n	800cd9c <netif_do_set_ipaddr+0x20>
 800cd8e:	4b1d      	ldr	r3, [pc, #116]	@ (800ce04 <netif_do_set_ipaddr+0x88>)
 800cd90:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800cd94:	491c      	ldr	r1, [pc, #112]	@ (800ce08 <netif_do_set_ipaddr+0x8c>)
 800cd96:	481d      	ldr	r0, [pc, #116]	@ (800ce0c <netif_do_set_ipaddr+0x90>)
 800cd98:	f009 f990 	bl	80160bc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d106      	bne.n	800cdb0 <netif_do_set_ipaddr+0x34>
 800cda2:	4b18      	ldr	r3, [pc, #96]	@ (800ce04 <netif_do_set_ipaddr+0x88>)
 800cda4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800cda8:	4917      	ldr	r1, [pc, #92]	@ (800ce08 <netif_do_set_ipaddr+0x8c>)
 800cdaa:	4818      	ldr	r0, [pc, #96]	@ (800ce0c <netif_do_set_ipaddr+0x90>)
 800cdac:	f009 f986 	bl	80160bc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	3304      	adds	r3, #4
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d01c      	beq.n	800cdf8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	3304      	adds	r3, #4
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800cdce:	f107 0314 	add.w	r3, r7, #20
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f7ff ffbf 	bl	800cd58 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d002      	beq.n	800cde6 <netif_do_set_ipaddr+0x6a>
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	e000      	b.n	800cde8 <netif_do_set_ipaddr+0x6c>
 800cde6:	2300      	movs	r3, #0
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cdec:	2101      	movs	r1, #1
 800cdee:	68f8      	ldr	r0, [r7, #12]
 800cdf0:	f000 f8d2 	bl	800cf98 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	e000      	b.n	800cdfa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3718      	adds	r7, #24
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	08017a60 	.word	0x08017a60
 800ce08:	08017b78 	.word	0x08017b78
 800ce0c:	08017ab0 	.word	0x08017ab0

0800ce10 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	3308      	adds	r3, #8
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d00a      	beq.n	800ce40 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d002      	beq.n	800ce36 <netif_do_set_netmask+0x26>
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	e000      	b.n	800ce38 <netif_do_set_netmask+0x28>
 800ce36:	2300      	movs	r3, #0
 800ce38:	68fa      	ldr	r2, [r7, #12]
 800ce3a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	e000      	b.n	800ce42 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ce40:	2300      	movs	r3, #0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3714      	adds	r7, #20
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr

0800ce4e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ce4e:	b480      	push	{r7}
 800ce50:	b085      	sub	sp, #20
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	60f8      	str	r0, [r7, #12]
 800ce56:	60b9      	str	r1, [r7, #8]
 800ce58:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	330c      	adds	r3, #12
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d00a      	beq.n	800ce7e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d002      	beq.n	800ce74 <netif_do_set_gw+0x26>
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	e000      	b.n	800ce76 <netif_do_set_gw+0x28>
 800ce74:	2300      	movs	r3, #0
 800ce76:	68fa      	ldr	r2, [r7, #12]
 800ce78:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	e000      	b.n	800ce80 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ce7e:	2300      	movs	r3, #0
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3714      	adds	r7, #20
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b088      	sub	sp, #32
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
 800ce98:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d101      	bne.n	800ceac <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cea8:	4b1c      	ldr	r3, [pc, #112]	@ (800cf1c <netif_set_addr+0x90>)
 800ceaa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d101      	bne.n	800ceb6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ceb2:	4b1a      	ldr	r3, [pc, #104]	@ (800cf1c <netif_set_addr+0x90>)
 800ceb4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d101      	bne.n	800cec0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cebc:	4b17      	ldr	r3, [pc, #92]	@ (800cf1c <netif_set_addr+0x90>)
 800cebe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d003      	beq.n	800cece <netif_set_addr+0x42>
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d101      	bne.n	800ced2 <netif_set_addr+0x46>
 800cece:	2301      	movs	r3, #1
 800ced0:	e000      	b.n	800ced4 <netif_set_addr+0x48>
 800ced2:	2300      	movs	r3, #0
 800ced4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d006      	beq.n	800ceea <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cedc:	f107 0310 	add.w	r3, r7, #16
 800cee0:	461a      	mov	r2, r3
 800cee2:	68b9      	ldr	r1, [r7, #8]
 800cee4:	68f8      	ldr	r0, [r7, #12]
 800cee6:	f7ff ff49 	bl	800cd7c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ceea:	69fa      	ldr	r2, [r7, #28]
 800ceec:	6879      	ldr	r1, [r7, #4]
 800ceee:	68f8      	ldr	r0, [r7, #12]
 800cef0:	f7ff ff8e 	bl	800ce10 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800cef4:	69ba      	ldr	r2, [r7, #24]
 800cef6:	6839      	ldr	r1, [r7, #0]
 800cef8:	68f8      	ldr	r0, [r7, #12]
 800cefa:	f7ff ffa8 	bl	800ce4e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d106      	bne.n	800cf12 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cf04:	f107 0310 	add.w	r3, r7, #16
 800cf08:	461a      	mov	r2, r3
 800cf0a:	68b9      	ldr	r1, [r7, #8]
 800cf0c:	68f8      	ldr	r0, [r7, #12]
 800cf0e:	f7ff ff35 	bl	800cd7c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800cf12:	bf00      	nop
 800cf14:	3720      	adds	r7, #32
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	0801a1f4 	.word	0x0801a1f4

0800cf20 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800cf28:	4a04      	ldr	r2, [pc, #16]	@ (800cf3c <netif_set_default+0x1c>)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800cf2e:	bf00      	nop
 800cf30:	370c      	adds	r7, #12
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	2400c9c4 	.word	0x2400c9c4

0800cf40 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d107      	bne.n	800cf5e <netif_set_up+0x1e>
 800cf4e:	4b0f      	ldr	r3, [pc, #60]	@ (800cf8c <netif_set_up+0x4c>)
 800cf50:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800cf54:	490e      	ldr	r1, [pc, #56]	@ (800cf90 <netif_set_up+0x50>)
 800cf56:	480f      	ldr	r0, [pc, #60]	@ (800cf94 <netif_set_up+0x54>)
 800cf58:	f009 f8b0 	bl	80160bc <iprintf>
 800cf5c:	e013      	b.n	800cf86 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cf64:	f003 0301 	and.w	r3, r3, #1
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d10c      	bne.n	800cf86 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cf72:	f043 0301 	orr.w	r3, r3, #1
 800cf76:	b2da      	uxtb	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cf7e:	2103      	movs	r1, #3
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 f809 	bl	800cf98 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	08017a60 	.word	0x08017a60
 800cf90:	08017be8 	.word	0x08017be8
 800cf94:	08017ab0 	.word	0x08017ab0

0800cf98 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	460b      	mov	r3, r1
 800cfa2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d106      	bne.n	800cfb8 <netif_issue_reports+0x20>
 800cfaa:	4b18      	ldr	r3, [pc, #96]	@ (800d00c <netif_issue_reports+0x74>)
 800cfac:	f240 326d 	movw	r2, #877	@ 0x36d
 800cfb0:	4917      	ldr	r1, [pc, #92]	@ (800d010 <netif_issue_reports+0x78>)
 800cfb2:	4818      	ldr	r0, [pc, #96]	@ (800d014 <netif_issue_reports+0x7c>)
 800cfb4:	f009 f882 	bl	80160bc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cfbe:	f003 0304 	and.w	r3, r3, #4
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d01e      	beq.n	800d004 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cfcc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d017      	beq.n	800d004 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cfd4:	78fb      	ldrb	r3, [r7, #3]
 800cfd6:	f003 0301 	and.w	r3, r3, #1
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d013      	beq.n	800d006 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	3304      	adds	r3, #4
 800cfe2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d00e      	beq.n	800d006 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cfee:	f003 0308 	and.w	r3, r3, #8
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d007      	beq.n	800d006 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	3304      	adds	r3, #4
 800cffa:	4619      	mov	r1, r3
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f007 fab9 	bl	8014574 <etharp_request>
 800d002:	e000      	b.n	800d006 <netif_issue_reports+0x6e>
    return;
 800d004:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d006:	3708      	adds	r7, #8
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}
 800d00c:	08017a60 	.word	0x08017a60
 800d010:	08017c04 	.word	0x08017c04
 800d014:	08017ab0 	.word	0x08017ab0

0800d018 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d107      	bne.n	800d036 <netif_set_down+0x1e>
 800d026:	4b12      	ldr	r3, [pc, #72]	@ (800d070 <netif_set_down+0x58>)
 800d028:	f240 329b 	movw	r2, #923	@ 0x39b
 800d02c:	4911      	ldr	r1, [pc, #68]	@ (800d074 <netif_set_down+0x5c>)
 800d02e:	4812      	ldr	r0, [pc, #72]	@ (800d078 <netif_set_down+0x60>)
 800d030:	f009 f844 	bl	80160bc <iprintf>
 800d034:	e019      	b.n	800d06a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d03c:	f003 0301 	and.w	r3, r3, #1
 800d040:	2b00      	cmp	r3, #0
 800d042:	d012      	beq.n	800d06a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d04a:	f023 0301 	bic.w	r3, r3, #1
 800d04e:	b2da      	uxtb	r2, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d05c:	f003 0308 	and.w	r3, r3, #8
 800d060:	2b00      	cmp	r3, #0
 800d062:	d002      	beq.n	800d06a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f006 fe43 	bl	8013cf0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	08017a60 	.word	0x08017a60
 800d074:	08017c28 	.word	0x08017c28
 800d078:	08017ab0 	.word	0x08017ab0

0800d07c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d107      	bne.n	800d09a <netif_set_link_up+0x1e>
 800d08a:	4b13      	ldr	r3, [pc, #76]	@ (800d0d8 <netif_set_link_up+0x5c>)
 800d08c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800d090:	4912      	ldr	r1, [pc, #72]	@ (800d0dc <netif_set_link_up+0x60>)
 800d092:	4813      	ldr	r0, [pc, #76]	@ (800d0e0 <netif_set_link_up+0x64>)
 800d094:	f009 f812 	bl	80160bc <iprintf>
 800d098:	e01b      	b.n	800d0d2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d0a0:	f003 0304 	and.w	r3, r3, #4
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d114      	bne.n	800d0d2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d0ae:	f043 0304 	orr.w	r3, r3, #4
 800d0b2:	b2da      	uxtb	r2, r3
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d0ba:	2103      	movs	r1, #3
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f7ff ff6b 	bl	800cf98 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	69db      	ldr	r3, [r3, #28]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d003      	beq.n	800d0d2 <netif_set_link_up+0x56>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	69db      	ldr	r3, [r3, #28]
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	08017a60 	.word	0x08017a60
 800d0dc:	08017c48 	.word	0x08017c48
 800d0e0:	08017ab0 	.word	0x08017ab0

0800d0e4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d107      	bne.n	800d102 <netif_set_link_down+0x1e>
 800d0f2:	4b11      	ldr	r3, [pc, #68]	@ (800d138 <netif_set_link_down+0x54>)
 800d0f4:	f240 4206 	movw	r2, #1030	@ 0x406
 800d0f8:	4910      	ldr	r1, [pc, #64]	@ (800d13c <netif_set_link_down+0x58>)
 800d0fa:	4811      	ldr	r0, [pc, #68]	@ (800d140 <netif_set_link_down+0x5c>)
 800d0fc:	f008 ffde 	bl	80160bc <iprintf>
 800d100:	e017      	b.n	800d132 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d108:	f003 0304 	and.w	r3, r3, #4
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d010      	beq.n	800d132 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d116:	f023 0304 	bic.w	r3, r3, #4
 800d11a:	b2da      	uxtb	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	69db      	ldr	r3, [r3, #28]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d003      	beq.n	800d132 <netif_set_link_down+0x4e>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	69db      	ldr	r3, [r3, #28]
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d132:	3708      	adds	r7, #8
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	08017a60 	.word	0x08017a60
 800d13c:	08017c6c 	.word	0x08017c6c
 800d140:	08017ab0 	.word	0x08017ab0

0800d144 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d002      	beq.n	800d15a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	683a      	ldr	r2, [r7, #0]
 800d158:	61da      	str	r2, [r3, #28]
  }
}
 800d15a:	bf00      	nop
 800d15c:	370c      	adds	r7, #12
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr

0800d166 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d166:	b480      	push	{r7}
 800d168:	b085      	sub	sp, #20
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	60f8      	str	r0, [r7, #12]
 800d16e:	60b9      	str	r1, [r7, #8]
 800d170:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d172:	f06f 030b 	mvn.w	r3, #11
}
 800d176:	4618      	mov	r0, r3
 800d178:	3714      	adds	r7, #20
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr
	...

0800d184 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d184:	b480      	push	{r7}
 800d186:	b085      	sub	sp, #20
 800d188:	af00      	add	r7, sp, #0
 800d18a:	4603      	mov	r3, r0
 800d18c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d18e:	79fb      	ldrb	r3, [r7, #7]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d013      	beq.n	800d1bc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d194:	4b0d      	ldr	r3, [pc, #52]	@ (800d1cc <netif_get_by_index+0x48>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	60fb      	str	r3, [r7, #12]
 800d19a:	e00c      	b.n	800d1b6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	79fa      	ldrb	r2, [r7, #7]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d101      	bne.n	800d1b0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	e006      	b.n	800d1be <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	60fb      	str	r3, [r7, #12]
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d1ef      	bne.n	800d19c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d1bc:	2300      	movs	r3, #0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3714      	adds	r7, #20
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr
 800d1ca:	bf00      	nop
 800d1cc:	2400c9c0 	.word	0x2400c9c0

0800d1d0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d1d6:	f008 fe53 	bl	8015e80 <sys_arch_protect>
 800d1da:	6038      	str	r0, [r7, #0]
 800d1dc:	4b0d      	ldr	r3, [pc, #52]	@ (800d214 <pbuf_free_ooseq+0x44>)
 800d1de:	2200      	movs	r2, #0
 800d1e0:	701a      	strb	r2, [r3, #0]
 800d1e2:	6838      	ldr	r0, [r7, #0]
 800d1e4:	f008 fe5a 	bl	8015e9c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d1e8:	4b0b      	ldr	r3, [pc, #44]	@ (800d218 <pbuf_free_ooseq+0x48>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	607b      	str	r3, [r7, #4]
 800d1ee:	e00a      	b.n	800d206 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d003      	beq.n	800d200 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f002 f97b 	bl	800f4f4 <tcp_free_ooseq>
      return;
 800d1fe:	e005      	b.n	800d20c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	607b      	str	r3, [r7, #4]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d1f1      	bne.n	800d1f0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d20c:	3708      	adds	r7, #8
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	2400c9c9 	.word	0x2400c9c9
 800d218:	2400c9d8 	.word	0x2400c9d8

0800d21c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b082      	sub	sp, #8
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d224:	f7ff ffd4 	bl	800d1d0 <pbuf_free_ooseq>
}
 800d228:	bf00      	nop
 800d22a:	3708      	adds	r7, #8
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d236:	f008 fe23 	bl	8015e80 <sys_arch_protect>
 800d23a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d23c:	4b0f      	ldr	r3, [pc, #60]	@ (800d27c <pbuf_pool_is_empty+0x4c>)
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d242:	4b0e      	ldr	r3, [pc, #56]	@ (800d27c <pbuf_pool_is_empty+0x4c>)
 800d244:	2201      	movs	r2, #1
 800d246:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f008 fe27 	bl	8015e9c <sys_arch_unprotect>

  if (!queued) {
 800d24e:	78fb      	ldrb	r3, [r7, #3]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d10f      	bne.n	800d274 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d254:	2100      	movs	r1, #0
 800d256:	480a      	ldr	r0, [pc, #40]	@ (800d280 <pbuf_pool_is_empty+0x50>)
 800d258:	f7fe fdde 	bl	800be18 <tcpip_try_callback>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d008      	beq.n	800d274 <pbuf_pool_is_empty+0x44>
 800d262:	f008 fe0d 	bl	8015e80 <sys_arch_protect>
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	4b04      	ldr	r3, [pc, #16]	@ (800d27c <pbuf_pool_is_empty+0x4c>)
 800d26a:	2200      	movs	r2, #0
 800d26c:	701a      	strb	r2, [r3, #0]
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f008 fe14 	bl	8015e9c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d274:	bf00      	nop
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	2400c9c9 	.word	0x2400c9c9
 800d280:	0800d21d 	.word	0x0800d21d

0800d284 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d284:	b480      	push	{r7}
 800d286:	b085      	sub	sp, #20
 800d288:	af00      	add	r7, sp, #0
 800d28a:	60f8      	str	r0, [r7, #12]
 800d28c:	60b9      	str	r1, [r7, #8]
 800d28e:	4611      	mov	r1, r2
 800d290:	461a      	mov	r2, r3
 800d292:	460b      	mov	r3, r1
 800d294:	80fb      	strh	r3, [r7, #6]
 800d296:	4613      	mov	r3, r2
 800d298:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2200      	movs	r2, #0
 800d29e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	88fa      	ldrh	r2, [r7, #6]
 800d2aa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	88ba      	ldrh	r2, [r7, #4]
 800d2b0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d2b2:	8b3b      	ldrh	r3, [r7, #24]
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	7f3a      	ldrb	r2, [r7, #28]
 800d2be:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	73da      	strb	r2, [r3, #15]
}
 800d2cc:	bf00      	nop
 800d2ce:	3714      	adds	r7, #20
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b08c      	sub	sp, #48	@ 0x30
 800d2dc:	af02      	add	r7, sp, #8
 800d2de:	4603      	mov	r3, r0
 800d2e0:	71fb      	strb	r3, [r7, #7]
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	80bb      	strh	r3, [r7, #4]
 800d2e6:	4613      	mov	r3, r2
 800d2e8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d2ea:	79fb      	ldrb	r3, [r7, #7]
 800d2ec:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d2ee:	887b      	ldrh	r3, [r7, #2]
 800d2f0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d2f4:	f000 8082 	beq.w	800d3fc <pbuf_alloc+0x124>
 800d2f8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d2fc:	f300 80ca 	bgt.w	800d494 <pbuf_alloc+0x1bc>
 800d300:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d304:	d010      	beq.n	800d328 <pbuf_alloc+0x50>
 800d306:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d30a:	f300 80c3 	bgt.w	800d494 <pbuf_alloc+0x1bc>
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d002      	beq.n	800d318 <pbuf_alloc+0x40>
 800d312:	2b41      	cmp	r3, #65	@ 0x41
 800d314:	f040 80be 	bne.w	800d494 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d318:	887a      	ldrh	r2, [r7, #2]
 800d31a:	88bb      	ldrh	r3, [r7, #4]
 800d31c:	4619      	mov	r1, r3
 800d31e:	2000      	movs	r0, #0
 800d320:	f000 f8d4 	bl	800d4cc <pbuf_alloc_reference>
 800d324:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800d326:	e0bf      	b.n	800d4a8 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d328:	2300      	movs	r3, #0
 800d32a:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800d32c:	2300      	movs	r3, #0
 800d32e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d330:	88bb      	ldrh	r3, [r7, #4]
 800d332:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d334:	200c      	movs	r0, #12
 800d336:	f7ff fb99 	bl	800ca6c <memp_malloc>
 800d33a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d109      	bne.n	800d356 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800d342:	f7ff ff75 	bl	800d230 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d002      	beq.n	800d352 <pbuf_alloc+0x7a>
            pbuf_free(p);
 800d34c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d34e:	f000 faab 	bl	800d8a8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d352:	2300      	movs	r3, #0
 800d354:	e0a9      	b.n	800d4aa <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d356:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d358:	3303      	adds	r3, #3
 800d35a:	b29b      	uxth	r3, r3
 800d35c:	f023 0303 	bic.w	r3, r3, #3
 800d360:	b29a      	uxth	r2, r3
 800d362:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 800d366:	1a9b      	subs	r3, r3, r2
 800d368:	b29b      	uxth	r3, r3
 800d36a:	8b7a      	ldrh	r2, [r7, #26]
 800d36c:	4293      	cmp	r3, r2
 800d36e:	bf28      	it	cs
 800d370:	4613      	movcs	r3, r2
 800d372:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d374:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d376:	3310      	adds	r3, #16
 800d378:	693a      	ldr	r2, [r7, #16]
 800d37a:	4413      	add	r3, r2
 800d37c:	3303      	adds	r3, #3
 800d37e:	f023 0303 	bic.w	r3, r3, #3
 800d382:	4618      	mov	r0, r3
 800d384:	89f9      	ldrh	r1, [r7, #14]
 800d386:	8b7a      	ldrh	r2, [r7, #26]
 800d388:	2300      	movs	r3, #0
 800d38a:	9301      	str	r3, [sp, #4]
 800d38c:	887b      	ldrh	r3, [r7, #2]
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	460b      	mov	r3, r1
 800d392:	4601      	mov	r1, r0
 800d394:	6938      	ldr	r0, [r7, #16]
 800d396:	f7ff ff75 	bl	800d284 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	f003 0303 	and.w	r3, r3, #3
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d006      	beq.n	800d3b4 <pbuf_alloc+0xdc>
 800d3a6:	4b43      	ldr	r3, [pc, #268]	@ (800d4b4 <pbuf_alloc+0x1dc>)
 800d3a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d3ac:	4942      	ldr	r1, [pc, #264]	@ (800d4b8 <pbuf_alloc+0x1e0>)
 800d3ae:	4843      	ldr	r0, [pc, #268]	@ (800d4bc <pbuf_alloc+0x1e4>)
 800d3b0:	f008 fe84 	bl	80160bc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d3b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d3b6:	3303      	adds	r3, #3
 800d3b8:	f023 0303 	bic.w	r3, r3, #3
 800d3bc:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d106      	bne.n	800d3d2 <pbuf_alloc+0xfa>
 800d3c4:	4b3b      	ldr	r3, [pc, #236]	@ (800d4b4 <pbuf_alloc+0x1dc>)
 800d3c6:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800d3ca:	493d      	ldr	r1, [pc, #244]	@ (800d4c0 <pbuf_alloc+0x1e8>)
 800d3cc:	483b      	ldr	r0, [pc, #236]	@ (800d4bc <pbuf_alloc+0x1e4>)
 800d3ce:	f008 fe75 	bl	80160bc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d102      	bne.n	800d3de <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	627b      	str	r3, [r7, #36]	@ 0x24
 800d3dc:	e002      	b.n	800d3e4 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	693a      	ldr	r2, [r7, #16]
 800d3e2:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d3e8:	8b7a      	ldrh	r2, [r7, #26]
 800d3ea:	89fb      	ldrh	r3, [r7, #14]
 800d3ec:	1ad3      	subs	r3, r2, r3
 800d3ee:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800d3f4:	8b7b      	ldrh	r3, [r7, #26]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d19c      	bne.n	800d334 <pbuf_alloc+0x5c>
      break;
 800d3fa:	e055      	b.n	800d4a8 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d3fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d3fe:	3303      	adds	r3, #3
 800d400:	b29b      	uxth	r3, r3
 800d402:	f023 0303 	bic.w	r3, r3, #3
 800d406:	b29a      	uxth	r2, r3
 800d408:	88bb      	ldrh	r3, [r7, #4]
 800d40a:	3303      	adds	r3, #3
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	f023 0303 	bic.w	r3, r3, #3
 800d412:	b29b      	uxth	r3, r3
 800d414:	4413      	add	r3, r2
 800d416:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d418:	8b3b      	ldrh	r3, [r7, #24]
 800d41a:	3310      	adds	r3, #16
 800d41c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d41e:	8b3a      	ldrh	r2, [r7, #24]
 800d420:	88bb      	ldrh	r3, [r7, #4]
 800d422:	3303      	adds	r3, #3
 800d424:	f023 0303 	bic.w	r3, r3, #3
 800d428:	429a      	cmp	r2, r3
 800d42a:	d306      	bcc.n	800d43a <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d42c:	8afa      	ldrh	r2, [r7, #22]
 800d42e:	88bb      	ldrh	r3, [r7, #4]
 800d430:	3303      	adds	r3, #3
 800d432:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d436:	429a      	cmp	r2, r3
 800d438:	d201      	bcs.n	800d43e <pbuf_alloc+0x166>
        return NULL;
 800d43a:	2300      	movs	r3, #0
 800d43c:	e035      	b.n	800d4aa <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d43e:	8afb      	ldrh	r3, [r7, #22]
 800d440:	4618      	mov	r0, r3
 800d442:	f7ff f96b 	bl	800c71c <mem_malloc>
 800d446:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800d448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d101      	bne.n	800d452 <pbuf_alloc+0x17a>
        return NULL;
 800d44e:	2300      	movs	r3, #0
 800d450:	e02b      	b.n	800d4aa <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d452:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d454:	3310      	adds	r3, #16
 800d456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d458:	4413      	add	r3, r2
 800d45a:	3303      	adds	r3, #3
 800d45c:	f023 0303 	bic.w	r3, r3, #3
 800d460:	4618      	mov	r0, r3
 800d462:	88b9      	ldrh	r1, [r7, #4]
 800d464:	88ba      	ldrh	r2, [r7, #4]
 800d466:	2300      	movs	r3, #0
 800d468:	9301      	str	r3, [sp, #4]
 800d46a:	887b      	ldrh	r3, [r7, #2]
 800d46c:	9300      	str	r3, [sp, #0]
 800d46e:	460b      	mov	r3, r1
 800d470:	4601      	mov	r1, r0
 800d472:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d474:	f7ff ff06 	bl	800d284 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	f003 0303 	and.w	r3, r3, #3
 800d480:	2b00      	cmp	r3, #0
 800d482:	d010      	beq.n	800d4a6 <pbuf_alloc+0x1ce>
 800d484:	4b0b      	ldr	r3, [pc, #44]	@ (800d4b4 <pbuf_alloc+0x1dc>)
 800d486:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800d48a:	490e      	ldr	r1, [pc, #56]	@ (800d4c4 <pbuf_alloc+0x1ec>)
 800d48c:	480b      	ldr	r0, [pc, #44]	@ (800d4bc <pbuf_alloc+0x1e4>)
 800d48e:	f008 fe15 	bl	80160bc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d492:	e008      	b.n	800d4a6 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d494:	4b07      	ldr	r3, [pc, #28]	@ (800d4b4 <pbuf_alloc+0x1dc>)
 800d496:	f240 1227 	movw	r2, #295	@ 0x127
 800d49a:	490b      	ldr	r1, [pc, #44]	@ (800d4c8 <pbuf_alloc+0x1f0>)
 800d49c:	4807      	ldr	r0, [pc, #28]	@ (800d4bc <pbuf_alloc+0x1e4>)
 800d49e:	f008 fe0d 	bl	80160bc <iprintf>
      return NULL;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	e001      	b.n	800d4aa <pbuf_alloc+0x1d2>
      break;
 800d4a6:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3728      	adds	r7, #40	@ 0x28
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	08017c90 	.word	0x08017c90
 800d4b8:	08017cc0 	.word	0x08017cc0
 800d4bc:	08017cf0 	.word	0x08017cf0
 800d4c0:	08017d18 	.word	0x08017d18
 800d4c4:	08017d4c 	.word	0x08017d4c
 800d4c8:	08017d78 	.word	0x08017d78

0800d4cc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b086      	sub	sp, #24
 800d4d0:	af02      	add	r7, sp, #8
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	460b      	mov	r3, r1
 800d4d6:	807b      	strh	r3, [r7, #2]
 800d4d8:	4613      	mov	r3, r2
 800d4da:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d4dc:	883b      	ldrh	r3, [r7, #0]
 800d4de:	2b41      	cmp	r3, #65	@ 0x41
 800d4e0:	d009      	beq.n	800d4f6 <pbuf_alloc_reference+0x2a>
 800d4e2:	883b      	ldrh	r3, [r7, #0]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d006      	beq.n	800d4f6 <pbuf_alloc_reference+0x2a>
 800d4e8:	4b0f      	ldr	r3, [pc, #60]	@ (800d528 <pbuf_alloc_reference+0x5c>)
 800d4ea:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800d4ee:	490f      	ldr	r1, [pc, #60]	@ (800d52c <pbuf_alloc_reference+0x60>)
 800d4f0:	480f      	ldr	r0, [pc, #60]	@ (800d530 <pbuf_alloc_reference+0x64>)
 800d4f2:	f008 fde3 	bl	80160bc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d4f6:	200b      	movs	r0, #11
 800d4f8:	f7ff fab8 	bl	800ca6c <memp_malloc>
 800d4fc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d101      	bne.n	800d508 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d504:	2300      	movs	r3, #0
 800d506:	e00b      	b.n	800d520 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d508:	8879      	ldrh	r1, [r7, #2]
 800d50a:	887a      	ldrh	r2, [r7, #2]
 800d50c:	2300      	movs	r3, #0
 800d50e:	9301      	str	r3, [sp, #4]
 800d510:	883b      	ldrh	r3, [r7, #0]
 800d512:	9300      	str	r3, [sp, #0]
 800d514:	460b      	mov	r3, r1
 800d516:	6879      	ldr	r1, [r7, #4]
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f7ff feb3 	bl	800d284 <pbuf_init_alloced_pbuf>
  return p;
 800d51e:	68fb      	ldr	r3, [r7, #12]
}
 800d520:	4618      	mov	r0, r3
 800d522:	3710      	adds	r7, #16
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	08017c90 	.word	0x08017c90
 800d52c:	08017d94 	.word	0x08017d94
 800d530:	08017cf0 	.word	0x08017cf0

0800d534 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b088      	sub	sp, #32
 800d538:	af02      	add	r7, sp, #8
 800d53a:	607b      	str	r3, [r7, #4]
 800d53c:	4603      	mov	r3, r0
 800d53e:	73fb      	strb	r3, [r7, #15]
 800d540:	460b      	mov	r3, r1
 800d542:	81bb      	strh	r3, [r7, #12]
 800d544:	4613      	mov	r3, r2
 800d546:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d548:	7bfb      	ldrb	r3, [r7, #15]
 800d54a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d54c:	8a7b      	ldrh	r3, [r7, #18]
 800d54e:	3303      	adds	r3, #3
 800d550:	f023 0203 	bic.w	r2, r3, #3
 800d554:	89bb      	ldrh	r3, [r7, #12]
 800d556:	441a      	add	r2, r3
 800d558:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d901      	bls.n	800d562 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d55e:	2300      	movs	r3, #0
 800d560:	e018      	b.n	800d594 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d562:	6a3b      	ldr	r3, [r7, #32]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d007      	beq.n	800d578 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d568:	8a7b      	ldrh	r3, [r7, #18]
 800d56a:	3303      	adds	r3, #3
 800d56c:	f023 0303 	bic.w	r3, r3, #3
 800d570:	6a3a      	ldr	r2, [r7, #32]
 800d572:	4413      	add	r3, r2
 800d574:	617b      	str	r3, [r7, #20]
 800d576:	e001      	b.n	800d57c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d578:	2300      	movs	r3, #0
 800d57a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	89b9      	ldrh	r1, [r7, #12]
 800d580:	89ba      	ldrh	r2, [r7, #12]
 800d582:	2302      	movs	r3, #2
 800d584:	9301      	str	r3, [sp, #4]
 800d586:	897b      	ldrh	r3, [r7, #10]
 800d588:	9300      	str	r3, [sp, #0]
 800d58a:	460b      	mov	r3, r1
 800d58c:	6979      	ldr	r1, [r7, #20]
 800d58e:	f7ff fe79 	bl	800d284 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d592:	687b      	ldr	r3, [r7, #4]
}
 800d594:	4618      	mov	r0, r3
 800d596:	3718      	adds	r7, #24
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d106      	bne.n	800d5bc <pbuf_realloc+0x20>
 800d5ae:	4b3a      	ldr	r3, [pc, #232]	@ (800d698 <pbuf_realloc+0xfc>)
 800d5b0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800d5b4:	4939      	ldr	r1, [pc, #228]	@ (800d69c <pbuf_realloc+0x100>)
 800d5b6:	483a      	ldr	r0, [pc, #232]	@ (800d6a0 <pbuf_realloc+0x104>)
 800d5b8:	f008 fd80 	bl	80160bc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	891b      	ldrh	r3, [r3, #8]
 800d5c0:	887a      	ldrh	r2, [r7, #2]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d263      	bcs.n	800d68e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	891a      	ldrh	r2, [r3, #8]
 800d5ca:	887b      	ldrh	r3, [r7, #2]
 800d5cc:	1ad3      	subs	r3, r2, r3
 800d5ce:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d5d0:	887b      	ldrh	r3, [r7, #2]
 800d5d2:	817b      	strh	r3, [r7, #10]
  q = p;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d5d8:	e018      	b.n	800d60c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	895b      	ldrh	r3, [r3, #10]
 800d5de:	897a      	ldrh	r2, [r7, #10]
 800d5e0:	1ad3      	subs	r3, r2, r3
 800d5e2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	891a      	ldrh	r2, [r3, #8]
 800d5e8:	893b      	ldrh	r3, [r7, #8]
 800d5ea:	1ad3      	subs	r3, r2, r3
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d106      	bne.n	800d60c <pbuf_realloc+0x70>
 800d5fe:	4b26      	ldr	r3, [pc, #152]	@ (800d698 <pbuf_realloc+0xfc>)
 800d600:	f240 12af 	movw	r2, #431	@ 0x1af
 800d604:	4927      	ldr	r1, [pc, #156]	@ (800d6a4 <pbuf_realloc+0x108>)
 800d606:	4826      	ldr	r0, [pc, #152]	@ (800d6a0 <pbuf_realloc+0x104>)
 800d608:	f008 fd58 	bl	80160bc <iprintf>
  while (rem_len > q->len) {
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	895b      	ldrh	r3, [r3, #10]
 800d610:	897a      	ldrh	r2, [r7, #10]
 800d612:	429a      	cmp	r2, r3
 800d614:	d8e1      	bhi.n	800d5da <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	7b1b      	ldrb	r3, [r3, #12]
 800d61a:	f003 030f 	and.w	r3, r3, #15
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d121      	bne.n	800d666 <pbuf_realloc+0xca>
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	895b      	ldrh	r3, [r3, #10]
 800d626:	897a      	ldrh	r2, [r7, #10]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d01c      	beq.n	800d666 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	7b5b      	ldrb	r3, [r3, #13]
 800d630:	f003 0302 	and.w	r3, r3, #2
 800d634:	2b00      	cmp	r3, #0
 800d636:	d116      	bne.n	800d666 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	685a      	ldr	r2, [r3, #4]
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	1ad3      	subs	r3, r2, r3
 800d640:	b29a      	uxth	r2, r3
 800d642:	897b      	ldrh	r3, [r7, #10]
 800d644:	4413      	add	r3, r2
 800d646:	b29b      	uxth	r3, r3
 800d648:	4619      	mov	r1, r3
 800d64a:	68f8      	ldr	r0, [r7, #12]
 800d64c:	f7fe ff56 	bl	800c4fc <mem_trim>
 800d650:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d106      	bne.n	800d666 <pbuf_realloc+0xca>
 800d658:	4b0f      	ldr	r3, [pc, #60]	@ (800d698 <pbuf_realloc+0xfc>)
 800d65a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800d65e:	4912      	ldr	r1, [pc, #72]	@ (800d6a8 <pbuf_realloc+0x10c>)
 800d660:	480f      	ldr	r0, [pc, #60]	@ (800d6a0 <pbuf_realloc+0x104>)
 800d662:	f008 fd2b 	bl	80160bc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	897a      	ldrh	r2, [r7, #10]
 800d66a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	895a      	ldrh	r2, [r3, #10]
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d004      	beq.n	800d686 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4618      	mov	r0, r3
 800d682:	f000 f911 	bl	800d8a8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2200      	movs	r2, #0
 800d68a:	601a      	str	r2, [r3, #0]
 800d68c:	e000      	b.n	800d690 <pbuf_realloc+0xf4>
    return;
 800d68e:	bf00      	nop

}
 800d690:	3710      	adds	r7, #16
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	08017c90 	.word	0x08017c90
 800d69c:	08017da8 	.word	0x08017da8
 800d6a0:	08017cf0 	.word	0x08017cf0
 800d6a4:	08017dc0 	.word	0x08017dc0
 800d6a8:	08017dd8 	.word	0x08017dd8

0800d6ac <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b086      	sub	sp, #24
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	4613      	mov	r3, r2
 800d6b8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d106      	bne.n	800d6ce <pbuf_add_header_impl+0x22>
 800d6c0:	4b2b      	ldr	r3, [pc, #172]	@ (800d770 <pbuf_add_header_impl+0xc4>)
 800d6c2:	f240 12df 	movw	r2, #479	@ 0x1df
 800d6c6:	492b      	ldr	r1, [pc, #172]	@ (800d774 <pbuf_add_header_impl+0xc8>)
 800d6c8:	482b      	ldr	r0, [pc, #172]	@ (800d778 <pbuf_add_header_impl+0xcc>)
 800d6ca:	f008 fcf7 	bl	80160bc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d003      	beq.n	800d6dc <pbuf_add_header_impl+0x30>
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6da:	d301      	bcc.n	800d6e0 <pbuf_add_header_impl+0x34>
    return 1;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e043      	b.n	800d768 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d101      	bne.n	800d6ea <pbuf_add_header_impl+0x3e>
    return 0;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	e03e      	b.n	800d768 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	891a      	ldrh	r2, [r3, #8]
 800d6f2:	8a7b      	ldrh	r3, [r7, #18]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	8a7a      	ldrh	r2, [r7, #18]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d901      	bls.n	800d702 <pbuf_add_header_impl+0x56>
    return 1;
 800d6fe:	2301      	movs	r3, #1
 800d700:	e032      	b.n	800d768 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	7b1b      	ldrb	r3, [r3, #12]
 800d706:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d708:	8a3b      	ldrh	r3, [r7, #16]
 800d70a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d00c      	beq.n	800d72c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	685a      	ldr	r2, [r3, #4]
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	425b      	negs	r3, r3
 800d71a:	4413      	add	r3, r2
 800d71c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	3310      	adds	r3, #16
 800d722:	697a      	ldr	r2, [r7, #20]
 800d724:	429a      	cmp	r2, r3
 800d726:	d20d      	bcs.n	800d744 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d728:	2301      	movs	r3, #1
 800d72a:	e01d      	b.n	800d768 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d72c:	79fb      	ldrb	r3, [r7, #7]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d006      	beq.n	800d740 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	685a      	ldr	r2, [r3, #4]
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	425b      	negs	r3, r3
 800d73a:	4413      	add	r3, r2
 800d73c:	617b      	str	r3, [r7, #20]
 800d73e:	e001      	b.n	800d744 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d740:	2301      	movs	r3, #1
 800d742:	e011      	b.n	800d768 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	697a      	ldr	r2, [r7, #20]
 800d748:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	895a      	ldrh	r2, [r3, #10]
 800d74e:	8a7b      	ldrh	r3, [r7, #18]
 800d750:	4413      	add	r3, r2
 800d752:	b29a      	uxth	r2, r3
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	891a      	ldrh	r2, [r3, #8]
 800d75c:	8a7b      	ldrh	r3, [r7, #18]
 800d75e:	4413      	add	r3, r2
 800d760:	b29a      	uxth	r2, r3
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	811a      	strh	r2, [r3, #8]


  return 0;
 800d766:	2300      	movs	r3, #0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3718      	adds	r7, #24
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	08017c90 	.word	0x08017c90
 800d774:	08017df4 	.word	0x08017df4
 800d778:	08017cf0 	.word	0x08017cf0

0800d77c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d786:	2200      	movs	r2, #0
 800d788:	6839      	ldr	r1, [r7, #0]
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f7ff ff8e 	bl	800d6ac <pbuf_add_header_impl>
 800d790:	4603      	mov	r3, r0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3708      	adds	r7, #8
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
	...

0800d79c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d106      	bne.n	800d7ba <pbuf_remove_header+0x1e>
 800d7ac:	4b20      	ldr	r3, [pc, #128]	@ (800d830 <pbuf_remove_header+0x94>)
 800d7ae:	f240 224b 	movw	r2, #587	@ 0x24b
 800d7b2:	4920      	ldr	r1, [pc, #128]	@ (800d834 <pbuf_remove_header+0x98>)
 800d7b4:	4820      	ldr	r0, [pc, #128]	@ (800d838 <pbuf_remove_header+0x9c>)
 800d7b6:	f008 fc81 	bl	80160bc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d003      	beq.n	800d7c8 <pbuf_remove_header+0x2c>
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7c6:	d301      	bcc.n	800d7cc <pbuf_remove_header+0x30>
    return 1;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e02c      	b.n	800d826 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d101      	bne.n	800d7d6 <pbuf_remove_header+0x3a>
    return 0;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	e027      	b.n	800d826 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	895b      	ldrh	r3, [r3, #10]
 800d7de:	89fa      	ldrh	r2, [r7, #14]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d908      	bls.n	800d7f6 <pbuf_remove_header+0x5a>
 800d7e4:	4b12      	ldr	r3, [pc, #72]	@ (800d830 <pbuf_remove_header+0x94>)
 800d7e6:	f240 2255 	movw	r2, #597	@ 0x255
 800d7ea:	4914      	ldr	r1, [pc, #80]	@ (800d83c <pbuf_remove_header+0xa0>)
 800d7ec:	4812      	ldr	r0, [pc, #72]	@ (800d838 <pbuf_remove_header+0x9c>)
 800d7ee:	f008 fc65 	bl	80160bc <iprintf>
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e017      	b.n	800d826 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	685a      	ldr	r2, [r3, #4]
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	441a      	add	r2, r3
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	895a      	ldrh	r2, [r3, #10]
 800d80c:	89fb      	ldrh	r3, [r7, #14]
 800d80e:	1ad3      	subs	r3, r2, r3
 800d810:	b29a      	uxth	r2, r3
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	891a      	ldrh	r2, [r3, #8]
 800d81a:	89fb      	ldrh	r3, [r7, #14]
 800d81c:	1ad3      	subs	r3, r2, r3
 800d81e:	b29a      	uxth	r2, r3
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d824:	2300      	movs	r3, #0
}
 800d826:	4618      	mov	r0, r3
 800d828:	3710      	adds	r7, #16
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	08017c90 	.word	0x08017c90
 800d834:	08017df4 	.word	0x08017df4
 800d838:	08017cf0 	.word	0x08017cf0
 800d83c:	08017e00 	.word	0x08017e00

0800d840 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	460b      	mov	r3, r1
 800d84a:	807b      	strh	r3, [r7, #2]
 800d84c:	4613      	mov	r3, r2
 800d84e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d850:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d854:	2b00      	cmp	r3, #0
 800d856:	da08      	bge.n	800d86a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d858:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d85c:	425b      	negs	r3, r3
 800d85e:	4619      	mov	r1, r3
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f7ff ff9b 	bl	800d79c <pbuf_remove_header>
 800d866:	4603      	mov	r3, r0
 800d868:	e007      	b.n	800d87a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d86a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d86e:	787a      	ldrb	r2, [r7, #1]
 800d870:	4619      	mov	r1, r3
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f7ff ff1a 	bl	800d6ac <pbuf_add_header_impl>
 800d878:	4603      	mov	r3, r0
  }
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d882:	b580      	push	{r7, lr}
 800d884:	b082      	sub	sp, #8
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
 800d88a:	460b      	mov	r3, r1
 800d88c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d88e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d892:	2201      	movs	r2, #1
 800d894:	4619      	mov	r1, r3
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f7ff ffd2 	bl	800d840 <pbuf_header_impl>
 800d89c:	4603      	mov	r3, r0
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3708      	adds	r7, #8
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
	...

0800d8a8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b088      	sub	sp, #32
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d10b      	bne.n	800d8ce <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d106      	bne.n	800d8ca <pbuf_free+0x22>
 800d8bc:	4b3b      	ldr	r3, [pc, #236]	@ (800d9ac <pbuf_free+0x104>)
 800d8be:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800d8c2:	493b      	ldr	r1, [pc, #236]	@ (800d9b0 <pbuf_free+0x108>)
 800d8c4:	483b      	ldr	r0, [pc, #236]	@ (800d9b4 <pbuf_free+0x10c>)
 800d8c6:	f008 fbf9 	bl	80160bc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	e069      	b.n	800d9a2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d8d2:	e062      	b.n	800d99a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d8d4:	f008 fad4 	bl	8015e80 <sys_arch_protect>
 800d8d8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	7b9b      	ldrb	r3, [r3, #14]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d106      	bne.n	800d8f0 <pbuf_free+0x48>
 800d8e2:	4b32      	ldr	r3, [pc, #200]	@ (800d9ac <pbuf_free+0x104>)
 800d8e4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800d8e8:	4933      	ldr	r1, [pc, #204]	@ (800d9b8 <pbuf_free+0x110>)
 800d8ea:	4832      	ldr	r0, [pc, #200]	@ (800d9b4 <pbuf_free+0x10c>)
 800d8ec:	f008 fbe6 	bl	80160bc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	7b9b      	ldrb	r3, [r3, #14]
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	b2da      	uxtb	r2, r3
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	739a      	strb	r2, [r3, #14]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	7b9b      	ldrb	r3, [r3, #14]
 800d900:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d902:	69b8      	ldr	r0, [r7, #24]
 800d904:	f008 faca 	bl	8015e9c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d908:	7dfb      	ldrb	r3, [r7, #23]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d143      	bne.n	800d996 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	7b1b      	ldrb	r3, [r3, #12]
 800d918:	f003 030f 	and.w	r3, r3, #15
 800d91c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	7b5b      	ldrb	r3, [r3, #13]
 800d922:	f003 0302 	and.w	r3, r3, #2
 800d926:	2b00      	cmp	r3, #0
 800d928:	d011      	beq.n	800d94e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	691b      	ldr	r3, [r3, #16]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d106      	bne.n	800d944 <pbuf_free+0x9c>
 800d936:	4b1d      	ldr	r3, [pc, #116]	@ (800d9ac <pbuf_free+0x104>)
 800d938:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800d93c:	491f      	ldr	r1, [pc, #124]	@ (800d9bc <pbuf_free+0x114>)
 800d93e:	481d      	ldr	r0, [pc, #116]	@ (800d9b4 <pbuf_free+0x10c>)
 800d940:	f008 fbbc 	bl	80160bc <iprintf>
        pc->custom_free_function(p);
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	691b      	ldr	r3, [r3, #16]
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	4798      	blx	r3
 800d94c:	e01d      	b.n	800d98a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d94e:	7bfb      	ldrb	r3, [r7, #15]
 800d950:	2b02      	cmp	r3, #2
 800d952:	d104      	bne.n	800d95e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d954:	6879      	ldr	r1, [r7, #4]
 800d956:	200c      	movs	r0, #12
 800d958:	f7ff f8fe 	bl	800cb58 <memp_free>
 800d95c:	e015      	b.n	800d98a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d95e:	7bfb      	ldrb	r3, [r7, #15]
 800d960:	2b01      	cmp	r3, #1
 800d962:	d104      	bne.n	800d96e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d964:	6879      	ldr	r1, [r7, #4]
 800d966:	200b      	movs	r0, #11
 800d968:	f7ff f8f6 	bl	800cb58 <memp_free>
 800d96c:	e00d      	b.n	800d98a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d96e:	7bfb      	ldrb	r3, [r7, #15]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d103      	bne.n	800d97c <pbuf_free+0xd4>
          mem_free(p);
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f7fe fd31 	bl	800c3dc <mem_free>
 800d97a:	e006      	b.n	800d98a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d97c:	4b0b      	ldr	r3, [pc, #44]	@ (800d9ac <pbuf_free+0x104>)
 800d97e:	f240 320f 	movw	r2, #783	@ 0x30f
 800d982:	490f      	ldr	r1, [pc, #60]	@ (800d9c0 <pbuf_free+0x118>)
 800d984:	480b      	ldr	r0, [pc, #44]	@ (800d9b4 <pbuf_free+0x10c>)
 800d986:	f008 fb99 	bl	80160bc <iprintf>
        }
      }
      count++;
 800d98a:	7ffb      	ldrb	r3, [r7, #31]
 800d98c:	3301      	adds	r3, #1
 800d98e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	607b      	str	r3, [r7, #4]
 800d994:	e001      	b.n	800d99a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d996:	2300      	movs	r3, #0
 800d998:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d199      	bne.n	800d8d4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d9a0:	7ffb      	ldrb	r3, [r7, #31]
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3720      	adds	r7, #32
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	bf00      	nop
 800d9ac:	08017c90 	.word	0x08017c90
 800d9b0:	08017df4 	.word	0x08017df4
 800d9b4:	08017cf0 	.word	0x08017cf0
 800d9b8:	08017e20 	.word	0x08017e20
 800d9bc:	08017e38 	.word	0x08017e38
 800d9c0:	08017e5c 	.word	0x08017e5c

0800d9c4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b085      	sub	sp, #20
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d9d0:	e005      	b.n	800d9de <pbuf_clen+0x1a>
    ++len;
 800d9d2:	89fb      	ldrh	r3, [r7, #14]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d1f6      	bne.n	800d9d2 <pbuf_clen+0xe>
  }
  return len;
 800d9e4:	89fb      	ldrh	r3, [r7, #14]
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3714      	adds	r7, #20
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr
	...

0800d9f4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d016      	beq.n	800da30 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800da02:	f008 fa3d 	bl	8015e80 <sys_arch_protect>
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	7b9b      	ldrb	r3, [r3, #14]
 800da0c:	3301      	adds	r3, #1
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	739a      	strb	r2, [r3, #14]
 800da14:	68f8      	ldr	r0, [r7, #12]
 800da16:	f008 fa41 	bl	8015e9c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	7b9b      	ldrb	r3, [r3, #14]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d106      	bne.n	800da30 <pbuf_ref+0x3c>
 800da22:	4b05      	ldr	r3, [pc, #20]	@ (800da38 <pbuf_ref+0x44>)
 800da24:	f240 3242 	movw	r2, #834	@ 0x342
 800da28:	4904      	ldr	r1, [pc, #16]	@ (800da3c <pbuf_ref+0x48>)
 800da2a:	4805      	ldr	r0, [pc, #20]	@ (800da40 <pbuf_ref+0x4c>)
 800da2c:	f008 fb46 	bl	80160bc <iprintf>
  }
}
 800da30:	bf00      	nop
 800da32:	3710      	adds	r7, #16
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	08017c90 	.word	0x08017c90
 800da3c:	08017e70 	.word	0x08017e70
 800da40:	08017cf0 	.word	0x08017cf0

0800da44 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d002      	beq.n	800da5a <pbuf_cat+0x16>
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d107      	bne.n	800da6a <pbuf_cat+0x26>
 800da5a:	4b20      	ldr	r3, [pc, #128]	@ (800dadc <pbuf_cat+0x98>)
 800da5c:	f240 3259 	movw	r2, #857	@ 0x359
 800da60:	491f      	ldr	r1, [pc, #124]	@ (800dae0 <pbuf_cat+0x9c>)
 800da62:	4820      	ldr	r0, [pc, #128]	@ (800dae4 <pbuf_cat+0xa0>)
 800da64:	f008 fb2a 	bl	80160bc <iprintf>
 800da68:	e034      	b.n	800dad4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	60fb      	str	r3, [r7, #12]
 800da6e:	e00a      	b.n	800da86 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	891a      	ldrh	r2, [r3, #8]
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	891b      	ldrh	r3, [r3, #8]
 800da78:	4413      	add	r3, r2
 800da7a:	b29a      	uxth	r2, r3
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	60fb      	str	r3, [r7, #12]
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d1f0      	bne.n	800da70 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	891a      	ldrh	r2, [r3, #8]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	895b      	ldrh	r3, [r3, #10]
 800da96:	429a      	cmp	r2, r3
 800da98:	d006      	beq.n	800daa8 <pbuf_cat+0x64>
 800da9a:	4b10      	ldr	r3, [pc, #64]	@ (800dadc <pbuf_cat+0x98>)
 800da9c:	f240 3262 	movw	r2, #866	@ 0x362
 800daa0:	4911      	ldr	r1, [pc, #68]	@ (800dae8 <pbuf_cat+0xa4>)
 800daa2:	4810      	ldr	r0, [pc, #64]	@ (800dae4 <pbuf_cat+0xa0>)
 800daa4:	f008 fb0a 	bl	80160bc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d006      	beq.n	800dabe <pbuf_cat+0x7a>
 800dab0:	4b0a      	ldr	r3, [pc, #40]	@ (800dadc <pbuf_cat+0x98>)
 800dab2:	f240 3263 	movw	r2, #867	@ 0x363
 800dab6:	490d      	ldr	r1, [pc, #52]	@ (800daec <pbuf_cat+0xa8>)
 800dab8:	480a      	ldr	r0, [pc, #40]	@ (800dae4 <pbuf_cat+0xa0>)
 800daba:	f008 faff 	bl	80160bc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	891a      	ldrh	r2, [r3, #8]
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	891b      	ldrh	r3, [r3, #8]
 800dac6:	4413      	add	r3, r2
 800dac8:	b29a      	uxth	r2, r3
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	683a      	ldr	r2, [r7, #0]
 800dad2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	08017c90 	.word	0x08017c90
 800dae0:	08017e84 	.word	0x08017e84
 800dae4:	08017cf0 	.word	0x08017cf0
 800dae8:	08017ebc 	.word	0x08017ebc
 800daec:	08017eec 	.word	0x08017eec

0800daf0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b086      	sub	sp, #24
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800dafa:	2300      	movs	r3, #0
 800dafc:	617b      	str	r3, [r7, #20]
 800dafe:	2300      	movs	r3, #0
 800db00:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d008      	beq.n	800db1a <pbuf_copy+0x2a>
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d005      	beq.n	800db1a <pbuf_copy+0x2a>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	891a      	ldrh	r2, [r3, #8]
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	891b      	ldrh	r3, [r3, #8]
 800db16:	429a      	cmp	r2, r3
 800db18:	d209      	bcs.n	800db2e <pbuf_copy+0x3e>
 800db1a:	4b57      	ldr	r3, [pc, #348]	@ (800dc78 <pbuf_copy+0x188>)
 800db1c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800db20:	4956      	ldr	r1, [pc, #344]	@ (800dc7c <pbuf_copy+0x18c>)
 800db22:	4857      	ldr	r0, [pc, #348]	@ (800dc80 <pbuf_copy+0x190>)
 800db24:	f008 faca 	bl	80160bc <iprintf>
 800db28:	f06f 030f 	mvn.w	r3, #15
 800db2c:	e09f      	b.n	800dc6e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	895b      	ldrh	r3, [r3, #10]
 800db32:	461a      	mov	r2, r3
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	1ad2      	subs	r2, r2, r3
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	895b      	ldrh	r3, [r3, #10]
 800db3c:	4619      	mov	r1, r3
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	1acb      	subs	r3, r1, r3
 800db42:	429a      	cmp	r2, r3
 800db44:	d306      	bcc.n	800db54 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	895b      	ldrh	r3, [r3, #10]
 800db4a:	461a      	mov	r2, r3
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	1ad3      	subs	r3, r2, r3
 800db50:	60fb      	str	r3, [r7, #12]
 800db52:	e005      	b.n	800db60 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	895b      	ldrh	r3, [r3, #10]
 800db58:	461a      	mov	r2, r3
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	1ad3      	subs	r3, r2, r3
 800db5e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	685a      	ldr	r2, [r3, #4]
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	18d0      	adds	r0, r2, r3
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	685a      	ldr	r2, [r3, #4]
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	4413      	add	r3, r2
 800db70:	68fa      	ldr	r2, [r7, #12]
 800db72:	4619      	mov	r1, r3
 800db74:	f008 fbd9 	bl	801632a <memcpy>
    offset_to += len;
 800db78:	697a      	ldr	r2, [r7, #20]
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	4413      	add	r3, r2
 800db7e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800db80:	693a      	ldr	r2, [r7, #16]
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	4413      	add	r3, r2
 800db86:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	895b      	ldrh	r3, [r3, #10]
 800db8c:	461a      	mov	r2, r3
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	4293      	cmp	r3, r2
 800db92:	d906      	bls.n	800dba2 <pbuf_copy+0xb2>
 800db94:	4b38      	ldr	r3, [pc, #224]	@ (800dc78 <pbuf_copy+0x188>)
 800db96:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800db9a:	493a      	ldr	r1, [pc, #232]	@ (800dc84 <pbuf_copy+0x194>)
 800db9c:	4838      	ldr	r0, [pc, #224]	@ (800dc80 <pbuf_copy+0x190>)
 800db9e:	f008 fa8d 	bl	80160bc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	895b      	ldrh	r3, [r3, #10]
 800dba6:	461a      	mov	r2, r3
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d906      	bls.n	800dbbc <pbuf_copy+0xcc>
 800dbae:	4b32      	ldr	r3, [pc, #200]	@ (800dc78 <pbuf_copy+0x188>)
 800dbb0:	f240 32da 	movw	r2, #986	@ 0x3da
 800dbb4:	4934      	ldr	r1, [pc, #208]	@ (800dc88 <pbuf_copy+0x198>)
 800dbb6:	4832      	ldr	r0, [pc, #200]	@ (800dc80 <pbuf_copy+0x190>)
 800dbb8:	f008 fa80 	bl	80160bc <iprintf>
    if (offset_from >= p_from->len) {
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	895b      	ldrh	r3, [r3, #10]
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d304      	bcc.n	800dbd2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	895b      	ldrh	r3, [r3, #10]
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d114      	bne.n	800dc08 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d10c      	bne.n	800dc08 <pbuf_copy+0x118>
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d009      	beq.n	800dc08 <pbuf_copy+0x118>
 800dbf4:	4b20      	ldr	r3, [pc, #128]	@ (800dc78 <pbuf_copy+0x188>)
 800dbf6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800dbfa:	4924      	ldr	r1, [pc, #144]	@ (800dc8c <pbuf_copy+0x19c>)
 800dbfc:	4820      	ldr	r0, [pc, #128]	@ (800dc80 <pbuf_copy+0x190>)
 800dbfe:	f008 fa5d 	bl	80160bc <iprintf>
 800dc02:	f06f 030f 	mvn.w	r3, #15
 800dc06:	e032      	b.n	800dc6e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d013      	beq.n	800dc36 <pbuf_copy+0x146>
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	895a      	ldrh	r2, [r3, #10]
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	891b      	ldrh	r3, [r3, #8]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d10d      	bne.n	800dc36 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d009      	beq.n	800dc36 <pbuf_copy+0x146>
 800dc22:	4b15      	ldr	r3, [pc, #84]	@ (800dc78 <pbuf_copy+0x188>)
 800dc24:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800dc28:	4919      	ldr	r1, [pc, #100]	@ (800dc90 <pbuf_copy+0x1a0>)
 800dc2a:	4815      	ldr	r0, [pc, #84]	@ (800dc80 <pbuf_copy+0x190>)
 800dc2c:	f008 fa46 	bl	80160bc <iprintf>
 800dc30:	f06f 0305 	mvn.w	r3, #5
 800dc34:	e01b      	b.n	800dc6e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d013      	beq.n	800dc64 <pbuf_copy+0x174>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	895a      	ldrh	r2, [r3, #10]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	891b      	ldrh	r3, [r3, #8]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d10d      	bne.n	800dc64 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d009      	beq.n	800dc64 <pbuf_copy+0x174>
 800dc50:	4b09      	ldr	r3, [pc, #36]	@ (800dc78 <pbuf_copy+0x188>)
 800dc52:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800dc56:	490e      	ldr	r1, [pc, #56]	@ (800dc90 <pbuf_copy+0x1a0>)
 800dc58:	4809      	ldr	r0, [pc, #36]	@ (800dc80 <pbuf_copy+0x190>)
 800dc5a:	f008 fa2f 	bl	80160bc <iprintf>
 800dc5e:	f06f 0305 	mvn.w	r3, #5
 800dc62:	e004      	b.n	800dc6e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	f47f af61 	bne.w	800db2e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800dc6c:	2300      	movs	r3, #0
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3718      	adds	r7, #24
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
 800dc76:	bf00      	nop
 800dc78:	08017c90 	.word	0x08017c90
 800dc7c:	08017f38 	.word	0x08017f38
 800dc80:	08017cf0 	.word	0x08017cf0
 800dc84:	08017f68 	.word	0x08017f68
 800dc88:	08017f80 	.word	0x08017f80
 800dc8c:	08017f9c 	.word	0x08017f9c
 800dc90:	08017fac 	.word	0x08017fac

0800dc94 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b088      	sub	sp, #32
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	4611      	mov	r1, r2
 800dca0:	461a      	mov	r2, r3
 800dca2:	460b      	mov	r3, r1
 800dca4:	80fb      	strh	r3, [r7, #6]
 800dca6:	4613      	mov	r3, r2
 800dca8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d108      	bne.n	800dcca <pbuf_copy_partial+0x36>
 800dcb8:	4b2b      	ldr	r3, [pc, #172]	@ (800dd68 <pbuf_copy_partial+0xd4>)
 800dcba:	f240 420a 	movw	r2, #1034	@ 0x40a
 800dcbe:	492b      	ldr	r1, [pc, #172]	@ (800dd6c <pbuf_copy_partial+0xd8>)
 800dcc0:	482b      	ldr	r0, [pc, #172]	@ (800dd70 <pbuf_copy_partial+0xdc>)
 800dcc2:	f008 f9fb 	bl	80160bc <iprintf>
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	e04a      	b.n	800dd60 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d108      	bne.n	800dce2 <pbuf_copy_partial+0x4e>
 800dcd0:	4b25      	ldr	r3, [pc, #148]	@ (800dd68 <pbuf_copy_partial+0xd4>)
 800dcd2:	f240 420b 	movw	r2, #1035	@ 0x40b
 800dcd6:	4927      	ldr	r1, [pc, #156]	@ (800dd74 <pbuf_copy_partial+0xe0>)
 800dcd8:	4825      	ldr	r0, [pc, #148]	@ (800dd70 <pbuf_copy_partial+0xdc>)
 800dcda:	f008 f9ef 	bl	80160bc <iprintf>
 800dcde:	2300      	movs	r3, #0
 800dce0:	e03e      	b.n	800dd60 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	61fb      	str	r3, [r7, #28]
 800dce6:	e034      	b.n	800dd52 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800dce8:	88bb      	ldrh	r3, [r7, #4]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d00a      	beq.n	800dd04 <pbuf_copy_partial+0x70>
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	895b      	ldrh	r3, [r3, #10]
 800dcf2:	88ba      	ldrh	r2, [r7, #4]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d305      	bcc.n	800dd04 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	895b      	ldrh	r3, [r3, #10]
 800dcfc:	88ba      	ldrh	r2, [r7, #4]
 800dcfe:	1ad3      	subs	r3, r2, r3
 800dd00:	80bb      	strh	r3, [r7, #4]
 800dd02:	e023      	b.n	800dd4c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	895a      	ldrh	r2, [r3, #10]
 800dd08:	88bb      	ldrh	r3, [r7, #4]
 800dd0a:	1ad3      	subs	r3, r2, r3
 800dd0c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800dd0e:	8b3a      	ldrh	r2, [r7, #24]
 800dd10:	88fb      	ldrh	r3, [r7, #6]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d901      	bls.n	800dd1a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800dd16:	88fb      	ldrh	r3, [r7, #6]
 800dd18:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800dd1a:	8b7b      	ldrh	r3, [r7, #26]
 800dd1c:	68ba      	ldr	r2, [r7, #8]
 800dd1e:	18d0      	adds	r0, r2, r3
 800dd20:	69fb      	ldr	r3, [r7, #28]
 800dd22:	685a      	ldr	r2, [r3, #4]
 800dd24:	88bb      	ldrh	r3, [r7, #4]
 800dd26:	4413      	add	r3, r2
 800dd28:	8b3a      	ldrh	r2, [r7, #24]
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	f008 fafd 	bl	801632a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800dd30:	8afa      	ldrh	r2, [r7, #22]
 800dd32:	8b3b      	ldrh	r3, [r7, #24]
 800dd34:	4413      	add	r3, r2
 800dd36:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800dd38:	8b7a      	ldrh	r2, [r7, #26]
 800dd3a:	8b3b      	ldrh	r3, [r7, #24]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800dd40:	88fa      	ldrh	r2, [r7, #6]
 800dd42:	8b3b      	ldrh	r3, [r7, #24]
 800dd44:	1ad3      	subs	r3, r2, r3
 800dd46:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	61fb      	str	r3, [r7, #28]
 800dd52:	88fb      	ldrh	r3, [r7, #6]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d002      	beq.n	800dd5e <pbuf_copy_partial+0xca>
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d1c4      	bne.n	800dce8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800dd5e:	8afb      	ldrh	r3, [r7, #22]
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3720      	adds	r7, #32
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}
 800dd68:	08017c90 	.word	0x08017c90
 800dd6c:	08017fd8 	.word	0x08017fd8
 800dd70:	08017cf0 	.word	0x08017cf0
 800dd74:	08017ff8 	.word	0x08017ff8

0800dd78 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	4603      	mov	r3, r0
 800dd80:	603a      	str	r2, [r7, #0]
 800dd82:	71fb      	strb	r3, [r7, #7]
 800dd84:	460b      	mov	r3, r1
 800dd86:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	8919      	ldrh	r1, [r3, #8]
 800dd8c:	88ba      	ldrh	r2, [r7, #4]
 800dd8e:	79fb      	ldrb	r3, [r7, #7]
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7ff faa1 	bl	800d2d8 <pbuf_alloc>
 800dd96:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d101      	bne.n	800dda2 <pbuf_clone+0x2a>
    return NULL;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	e011      	b.n	800ddc6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800dda2:	6839      	ldr	r1, [r7, #0]
 800dda4:	68f8      	ldr	r0, [r7, #12]
 800dda6:	f7ff fea3 	bl	800daf0 <pbuf_copy>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ddae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d006      	beq.n	800ddc4 <pbuf_clone+0x4c>
 800ddb6:	4b06      	ldr	r3, [pc, #24]	@ (800ddd0 <pbuf_clone+0x58>)
 800ddb8:	f240 5224 	movw	r2, #1316	@ 0x524
 800ddbc:	4905      	ldr	r1, [pc, #20]	@ (800ddd4 <pbuf_clone+0x5c>)
 800ddbe:	4806      	ldr	r0, [pc, #24]	@ (800ddd8 <pbuf_clone+0x60>)
 800ddc0:	f008 f97c 	bl	80160bc <iprintf>
  return q;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3710      	adds	r7, #16
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
 800ddce:	bf00      	nop
 800ddd0:	08017c90 	.word	0x08017c90
 800ddd4:	08018104 	.word	0x08018104
 800ddd8:	08017cf0 	.word	0x08017cf0

0800dddc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dde0:	f008 f86c 	bl	8015ebc <rand>
 800dde4:	4603      	mov	r3, r0
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	4b01      	ldr	r3, [pc, #4]	@ (800ddfc <tcp_init+0x20>)
 800ddf6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ddf8:	bf00      	nop
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	24000028 	.word	0x24000028

0800de00 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	7d1b      	ldrb	r3, [r3, #20]
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d105      	bne.n	800de1c <tcp_free+0x1c>
 800de10:	4b06      	ldr	r3, [pc, #24]	@ (800de2c <tcp_free+0x2c>)
 800de12:	22d4      	movs	r2, #212	@ 0xd4
 800de14:	4906      	ldr	r1, [pc, #24]	@ (800de30 <tcp_free+0x30>)
 800de16:	4807      	ldr	r0, [pc, #28]	@ (800de34 <tcp_free+0x34>)
 800de18:	f008 f950 	bl	80160bc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800de1c:	6879      	ldr	r1, [r7, #4]
 800de1e:	2001      	movs	r0, #1
 800de20:	f7fe fe9a 	bl	800cb58 <memp_free>
}
 800de24:	bf00      	nop
 800de26:	3708      	adds	r7, #8
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	08018190 	.word	0x08018190
 800de30:	080181c0 	.word	0x080181c0
 800de34:	080181d4 	.word	0x080181d4

0800de38 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	7d1b      	ldrb	r3, [r3, #20]
 800de44:	2b01      	cmp	r3, #1
 800de46:	d105      	bne.n	800de54 <tcp_free_listen+0x1c>
 800de48:	4b06      	ldr	r3, [pc, #24]	@ (800de64 <tcp_free_listen+0x2c>)
 800de4a:	22df      	movs	r2, #223	@ 0xdf
 800de4c:	4906      	ldr	r1, [pc, #24]	@ (800de68 <tcp_free_listen+0x30>)
 800de4e:	4807      	ldr	r0, [pc, #28]	@ (800de6c <tcp_free_listen+0x34>)
 800de50:	f008 f934 	bl	80160bc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800de54:	6879      	ldr	r1, [r7, #4]
 800de56:	2002      	movs	r0, #2
 800de58:	f7fe fe7e 	bl	800cb58 <memp_free>
}
 800de5c:	bf00      	nop
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	08018190 	.word	0x08018190
 800de68:	080181fc 	.word	0x080181fc
 800de6c:	080181d4 	.word	0x080181d4

0800de70 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800de74:	f000 fea6 	bl	800ebc4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800de78:	4b07      	ldr	r3, [pc, #28]	@ (800de98 <tcp_tmr+0x28>)
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	3301      	adds	r3, #1
 800de7e:	b2da      	uxtb	r2, r3
 800de80:	4b05      	ldr	r3, [pc, #20]	@ (800de98 <tcp_tmr+0x28>)
 800de82:	701a      	strb	r2, [r3, #0]
 800de84:	4b04      	ldr	r3, [pc, #16]	@ (800de98 <tcp_tmr+0x28>)
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	f003 0301 	and.w	r3, r3, #1
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d001      	beq.n	800de94 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800de90:	f000 fb56 	bl	800e540 <tcp_slowtmr>
  }
}
 800de94:	bf00      	nop
 800de96:	bd80      	pop	{r7, pc}
 800de98:	2400c9e1 	.word	0x2400c9e1

0800de9c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b084      	sub	sp, #16
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d105      	bne.n	800deb8 <tcp_remove_listener+0x1c>
 800deac:	4b0d      	ldr	r3, [pc, #52]	@ (800dee4 <tcp_remove_listener+0x48>)
 800deae:	22ff      	movs	r2, #255	@ 0xff
 800deb0:	490d      	ldr	r1, [pc, #52]	@ (800dee8 <tcp_remove_listener+0x4c>)
 800deb2:	480e      	ldr	r0, [pc, #56]	@ (800deec <tcp_remove_listener+0x50>)
 800deb4:	f008 f902 	bl	80160bc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	60fb      	str	r3, [r7, #12]
 800debc:	e00a      	b.n	800ded4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dec2:	683a      	ldr	r2, [r7, #0]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d102      	bne.n	800dece <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2200      	movs	r2, #0
 800decc:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	60fb      	str	r3, [r7, #12]
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d1f1      	bne.n	800debe <tcp_remove_listener+0x22>
    }
  }
}
 800deda:	bf00      	nop
 800dedc:	bf00      	nop
 800dede:	3710      	adds	r7, #16
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	08018190 	.word	0x08018190
 800dee8:	08018218 	.word	0x08018218
 800deec:	080181d4 	.word	0x080181d4

0800def0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d106      	bne.n	800df0c <tcp_listen_closed+0x1c>
 800defe:	4b14      	ldr	r3, [pc, #80]	@ (800df50 <tcp_listen_closed+0x60>)
 800df00:	f240 1211 	movw	r2, #273	@ 0x111
 800df04:	4913      	ldr	r1, [pc, #76]	@ (800df54 <tcp_listen_closed+0x64>)
 800df06:	4814      	ldr	r0, [pc, #80]	@ (800df58 <tcp_listen_closed+0x68>)
 800df08:	f008 f8d8 	bl	80160bc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	7d1b      	ldrb	r3, [r3, #20]
 800df10:	2b01      	cmp	r3, #1
 800df12:	d006      	beq.n	800df22 <tcp_listen_closed+0x32>
 800df14:	4b0e      	ldr	r3, [pc, #56]	@ (800df50 <tcp_listen_closed+0x60>)
 800df16:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800df1a:	4910      	ldr	r1, [pc, #64]	@ (800df5c <tcp_listen_closed+0x6c>)
 800df1c:	480e      	ldr	r0, [pc, #56]	@ (800df58 <tcp_listen_closed+0x68>)
 800df1e:	f008 f8cd 	bl	80160bc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800df22:	2301      	movs	r3, #1
 800df24:	60fb      	str	r3, [r7, #12]
 800df26:	e00b      	b.n	800df40 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800df28:	4a0d      	ldr	r2, [pc, #52]	@ (800df60 <tcp_listen_closed+0x70>)
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	6879      	ldr	r1, [r7, #4]
 800df34:	4618      	mov	r0, r3
 800df36:	f7ff ffb1 	bl	800de9c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	3301      	adds	r3, #1
 800df3e:	60fb      	str	r3, [r7, #12]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2b03      	cmp	r3, #3
 800df44:	d9f0      	bls.n	800df28 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800df46:	bf00      	nop
 800df48:	bf00      	nop
 800df4a:	3710      	adds	r7, #16
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	08018190 	.word	0x08018190
 800df54:	08018240 	.word	0x08018240
 800df58:	080181d4 	.word	0x080181d4
 800df5c:	0801824c 	.word	0x0801824c
 800df60:	0801a1cc 	.word	0x0801a1cc

0800df64 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800df64:	b5b0      	push	{r4, r5, r7, lr}
 800df66:	b088      	sub	sp, #32
 800df68:	af04      	add	r7, sp, #16
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	460b      	mov	r3, r1
 800df6e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d106      	bne.n	800df84 <tcp_close_shutdown+0x20>
 800df76:	4b63      	ldr	r3, [pc, #396]	@ (800e104 <tcp_close_shutdown+0x1a0>)
 800df78:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800df7c:	4962      	ldr	r1, [pc, #392]	@ (800e108 <tcp_close_shutdown+0x1a4>)
 800df7e:	4863      	ldr	r0, [pc, #396]	@ (800e10c <tcp_close_shutdown+0x1a8>)
 800df80:	f008 f89c 	bl	80160bc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800df84:	78fb      	ldrb	r3, [r7, #3]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d067      	beq.n	800e05a <tcp_close_shutdown+0xf6>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	7d1b      	ldrb	r3, [r3, #20]
 800df8e:	2b04      	cmp	r3, #4
 800df90:	d003      	beq.n	800df9a <tcp_close_shutdown+0x36>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	7d1b      	ldrb	r3, [r3, #20]
 800df96:	2b07      	cmp	r3, #7
 800df98:	d15f      	bne.n	800e05a <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d105      	bne.n	800dfae <tcp_close_shutdown+0x4a>
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfa6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d055      	beq.n	800e05a <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	8b5b      	ldrh	r3, [r3, #26]
 800dfb2:	f003 0310 	and.w	r3, r3, #16
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d106      	bne.n	800dfc8 <tcp_close_shutdown+0x64>
 800dfba:	4b52      	ldr	r3, [pc, #328]	@ (800e104 <tcp_close_shutdown+0x1a0>)
 800dfbc:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800dfc0:	4953      	ldr	r1, [pc, #332]	@ (800e110 <tcp_close_shutdown+0x1ac>)
 800dfc2:	4852      	ldr	r0, [pc, #328]	@ (800e10c <tcp_close_shutdown+0x1a8>)
 800dfc4:	f008 f87a 	bl	80160bc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800dfd0:	687d      	ldr	r5, [r7, #4]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	3304      	adds	r3, #4
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	8ad2      	ldrh	r2, [r2, #22]
 800dfda:	6879      	ldr	r1, [r7, #4]
 800dfdc:	8b09      	ldrh	r1, [r1, #24]
 800dfde:	9102      	str	r1, [sp, #8]
 800dfe0:	9201      	str	r2, [sp, #4]
 800dfe2:	9300      	str	r3, [sp, #0]
 800dfe4:	462b      	mov	r3, r5
 800dfe6:	4622      	mov	r2, r4
 800dfe8:	4601      	mov	r1, r0
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f004 fe92 	bl	8012d14 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f001 f8cb 	bl	800f18c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800dff6:	4b47      	ldr	r3, [pc, #284]	@ (800e114 <tcp_close_shutdown+0x1b0>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	687a      	ldr	r2, [r7, #4]
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d105      	bne.n	800e00c <tcp_close_shutdown+0xa8>
 800e000:	4b44      	ldr	r3, [pc, #272]	@ (800e114 <tcp_close_shutdown+0x1b0>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	68db      	ldr	r3, [r3, #12]
 800e006:	4a43      	ldr	r2, [pc, #268]	@ (800e114 <tcp_close_shutdown+0x1b0>)
 800e008:	6013      	str	r3, [r2, #0]
 800e00a:	e013      	b.n	800e034 <tcp_close_shutdown+0xd0>
 800e00c:	4b41      	ldr	r3, [pc, #260]	@ (800e114 <tcp_close_shutdown+0x1b0>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	60fb      	str	r3, [r7, #12]
 800e012:	e00c      	b.n	800e02e <tcp_close_shutdown+0xca>
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d104      	bne.n	800e028 <tcp_close_shutdown+0xc4>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	68da      	ldr	r2, [r3, #12]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	60da      	str	r2, [r3, #12]
 800e026:	e005      	b.n	800e034 <tcp_close_shutdown+0xd0>
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	68db      	ldr	r3, [r3, #12]
 800e02c:	60fb      	str	r3, [r7, #12]
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d1ef      	bne.n	800e014 <tcp_close_shutdown+0xb0>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2200      	movs	r2, #0
 800e038:	60da      	str	r2, [r3, #12]
 800e03a:	4b37      	ldr	r3, [pc, #220]	@ (800e118 <tcp_close_shutdown+0x1b4>)
 800e03c:	2201      	movs	r2, #1
 800e03e:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e040:	4b36      	ldr	r3, [pc, #216]	@ (800e11c <tcp_close_shutdown+0x1b8>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	687a      	ldr	r2, [r7, #4]
 800e046:	429a      	cmp	r2, r3
 800e048:	d102      	bne.n	800e050 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e04a:	f003 fd61 	bl	8011b10 <tcp_trigger_input_pcb_close>
 800e04e:	e002      	b.n	800e056 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f7ff fed5 	bl	800de00 <tcp_free>
      }
      return ERR_OK;
 800e056:	2300      	movs	r3, #0
 800e058:	e050      	b.n	800e0fc <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	7d1b      	ldrb	r3, [r3, #20]
 800e05e:	2b02      	cmp	r3, #2
 800e060:	d03b      	beq.n	800e0da <tcp_close_shutdown+0x176>
 800e062:	2b02      	cmp	r3, #2
 800e064:	dc44      	bgt.n	800e0f0 <tcp_close_shutdown+0x18c>
 800e066:	2b00      	cmp	r3, #0
 800e068:	d002      	beq.n	800e070 <tcp_close_shutdown+0x10c>
 800e06a:	2b01      	cmp	r3, #1
 800e06c:	d02a      	beq.n	800e0c4 <tcp_close_shutdown+0x160>
 800e06e:	e03f      	b.n	800e0f0 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	8adb      	ldrh	r3, [r3, #22]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d021      	beq.n	800e0bc <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e078:	4b29      	ldr	r3, [pc, #164]	@ (800e120 <tcp_close_shutdown+0x1bc>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d105      	bne.n	800e08e <tcp_close_shutdown+0x12a>
 800e082:	4b27      	ldr	r3, [pc, #156]	@ (800e120 <tcp_close_shutdown+0x1bc>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	68db      	ldr	r3, [r3, #12]
 800e088:	4a25      	ldr	r2, [pc, #148]	@ (800e120 <tcp_close_shutdown+0x1bc>)
 800e08a:	6013      	str	r3, [r2, #0]
 800e08c:	e013      	b.n	800e0b6 <tcp_close_shutdown+0x152>
 800e08e:	4b24      	ldr	r3, [pc, #144]	@ (800e120 <tcp_close_shutdown+0x1bc>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	60bb      	str	r3, [r7, #8]
 800e094:	e00c      	b.n	800e0b0 <tcp_close_shutdown+0x14c>
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	68db      	ldr	r3, [r3, #12]
 800e09a:	687a      	ldr	r2, [r7, #4]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d104      	bne.n	800e0aa <tcp_close_shutdown+0x146>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	68da      	ldr	r2, [r3, #12]
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	60da      	str	r2, [r3, #12]
 800e0a8:	e005      	b.n	800e0b6 <tcp_close_shutdown+0x152>
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	68db      	ldr	r3, [r3, #12]
 800e0ae:	60bb      	str	r3, [r7, #8]
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d1ef      	bne.n	800e096 <tcp_close_shutdown+0x132>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f7ff fe9f 	bl	800de00 <tcp_free>
      break;
 800e0c2:	e01a      	b.n	800e0fa <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f7ff ff13 	bl	800def0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e0ca:	6879      	ldr	r1, [r7, #4]
 800e0cc:	4815      	ldr	r0, [pc, #84]	@ (800e124 <tcp_close_shutdown+0x1c0>)
 800e0ce:	f001 f8ad 	bl	800f22c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f7ff feb0 	bl	800de38 <tcp_free_listen>
      break;
 800e0d8:	e00f      	b.n	800e0fa <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e0da:	6879      	ldr	r1, [r7, #4]
 800e0dc:	480d      	ldr	r0, [pc, #52]	@ (800e114 <tcp_close_shutdown+0x1b0>)
 800e0de:	f001 f8a5 	bl	800f22c <tcp_pcb_remove>
 800e0e2:	4b0d      	ldr	r3, [pc, #52]	@ (800e118 <tcp_close_shutdown+0x1b4>)
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f7ff fe89 	bl	800de00 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e0ee:	e004      	b.n	800e0fa <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 f819 	bl	800e128 <tcp_close_shutdown_fin>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	e000      	b.n	800e0fc <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800e0fa:	2300      	movs	r3, #0
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3710      	adds	r7, #16
 800e100:	46bd      	mov	sp, r7
 800e102:	bdb0      	pop	{r4, r5, r7, pc}
 800e104:	08018190 	.word	0x08018190
 800e108:	08018264 	.word	0x08018264
 800e10c:	080181d4 	.word	0x080181d4
 800e110:	08018284 	.word	0x08018284
 800e114:	2400c9d8 	.word	0x2400c9d8
 800e118:	2400c9e0 	.word	0x2400c9e0
 800e11c:	2400ca18 	.word	0x2400ca18
 800e120:	2400c9d0 	.word	0x2400c9d0
 800e124:	2400c9d4 	.word	0x2400c9d4

0800e128 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b084      	sub	sp, #16
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d106      	bne.n	800e144 <tcp_close_shutdown_fin+0x1c>
 800e136:	4b2e      	ldr	r3, [pc, #184]	@ (800e1f0 <tcp_close_shutdown_fin+0xc8>)
 800e138:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800e13c:	492d      	ldr	r1, [pc, #180]	@ (800e1f4 <tcp_close_shutdown_fin+0xcc>)
 800e13e:	482e      	ldr	r0, [pc, #184]	@ (800e1f8 <tcp_close_shutdown_fin+0xd0>)
 800e140:	f007 ffbc 	bl	80160bc <iprintf>

  switch (pcb->state) {
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	7d1b      	ldrb	r3, [r3, #20]
 800e148:	2b07      	cmp	r3, #7
 800e14a:	d020      	beq.n	800e18e <tcp_close_shutdown_fin+0x66>
 800e14c:	2b07      	cmp	r3, #7
 800e14e:	dc2b      	bgt.n	800e1a8 <tcp_close_shutdown_fin+0x80>
 800e150:	2b03      	cmp	r3, #3
 800e152:	d002      	beq.n	800e15a <tcp_close_shutdown_fin+0x32>
 800e154:	2b04      	cmp	r3, #4
 800e156:	d00d      	beq.n	800e174 <tcp_close_shutdown_fin+0x4c>
 800e158:	e026      	b.n	800e1a8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f003 fee8 	bl	8011f30 <tcp_send_fin>
 800e160:	4603      	mov	r3, r0
 800e162:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d11f      	bne.n	800e1ac <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2205      	movs	r2, #5
 800e170:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e172:	e01b      	b.n	800e1ac <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f003 fedb 	bl	8011f30 <tcp_send_fin>
 800e17a:	4603      	mov	r3, r0
 800e17c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e17e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d114      	bne.n	800e1b0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2205      	movs	r2, #5
 800e18a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e18c:	e010      	b.n	800e1b0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f003 fece 	bl	8011f30 <tcp_send_fin>
 800e194:	4603      	mov	r3, r0
 800e196:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d109      	bne.n	800e1b4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2209      	movs	r2, #9
 800e1a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e1a6:	e005      	b.n	800e1b4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	e01c      	b.n	800e1e6 <tcp_close_shutdown_fin+0xbe>
      break;
 800e1ac:	bf00      	nop
 800e1ae:	e002      	b.n	800e1b6 <tcp_close_shutdown_fin+0x8e>
      break;
 800e1b0:	bf00      	nop
 800e1b2:	e000      	b.n	800e1b6 <tcp_close_shutdown_fin+0x8e>
      break;
 800e1b4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e1b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d103      	bne.n	800e1c6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f003 fff4 	bl	80121ac <tcp_output>
 800e1c4:	e00d      	b.n	800e1e2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e1c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ce:	d108      	bne.n	800e1e2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	8b5b      	ldrh	r3, [r3, #26]
 800e1d4:	f043 0308 	orr.w	r3, r3, #8
 800e1d8:	b29a      	uxth	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	e001      	b.n	800e1e6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e1e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3710      	adds	r7, #16
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	08018190 	.word	0x08018190
 800e1f4:	08018240 	.word	0x08018240
 800e1f8:	080181d4 	.word	0x080181d4

0800e1fc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d109      	bne.n	800e21e <tcp_close+0x22>
 800e20a:	4b0f      	ldr	r3, [pc, #60]	@ (800e248 <tcp_close+0x4c>)
 800e20c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800e210:	490e      	ldr	r1, [pc, #56]	@ (800e24c <tcp_close+0x50>)
 800e212:	480f      	ldr	r0, [pc, #60]	@ (800e250 <tcp_close+0x54>)
 800e214:	f007 ff52 	bl	80160bc <iprintf>
 800e218:	f06f 030f 	mvn.w	r3, #15
 800e21c:	e00f      	b.n	800e23e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	7d1b      	ldrb	r3, [r3, #20]
 800e222:	2b01      	cmp	r3, #1
 800e224:	d006      	beq.n	800e234 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	8b5b      	ldrh	r3, [r3, #26]
 800e22a:	f043 0310 	orr.w	r3, r3, #16
 800e22e:	b29a      	uxth	r2, r3
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e234:	2101      	movs	r1, #1
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f7ff fe94 	bl	800df64 <tcp_close_shutdown>
 800e23c:	4603      	mov	r3, r0
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3708      	adds	r7, #8
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	08018190 	.word	0x08018190
 800e24c:	080182a0 	.word	0x080182a0
 800e250:	080181d4 	.word	0x080181d4

0800e254 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b08e      	sub	sp, #56	@ 0x38
 800e258:	af04      	add	r7, sp, #16
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d107      	bne.n	800e274 <tcp_abandon+0x20>
 800e264:	4b52      	ldr	r3, [pc, #328]	@ (800e3b0 <tcp_abandon+0x15c>)
 800e266:	f240 223d 	movw	r2, #573	@ 0x23d
 800e26a:	4952      	ldr	r1, [pc, #328]	@ (800e3b4 <tcp_abandon+0x160>)
 800e26c:	4852      	ldr	r0, [pc, #328]	@ (800e3b8 <tcp_abandon+0x164>)
 800e26e:	f007 ff25 	bl	80160bc <iprintf>
 800e272:	e099      	b.n	800e3a8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	7d1b      	ldrb	r3, [r3, #20]
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d106      	bne.n	800e28a <tcp_abandon+0x36>
 800e27c:	4b4c      	ldr	r3, [pc, #304]	@ (800e3b0 <tcp_abandon+0x15c>)
 800e27e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800e282:	494e      	ldr	r1, [pc, #312]	@ (800e3bc <tcp_abandon+0x168>)
 800e284:	484c      	ldr	r0, [pc, #304]	@ (800e3b8 <tcp_abandon+0x164>)
 800e286:	f007 ff19 	bl	80160bc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	7d1b      	ldrb	r3, [r3, #20]
 800e28e:	2b0a      	cmp	r3, #10
 800e290:	d107      	bne.n	800e2a2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e292:	6879      	ldr	r1, [r7, #4]
 800e294:	484a      	ldr	r0, [pc, #296]	@ (800e3c0 <tcp_abandon+0x16c>)
 800e296:	f000 ffc9 	bl	800f22c <tcp_pcb_remove>
    tcp_free(pcb);
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f7ff fdb0 	bl	800de00 <tcp_free>
 800e2a0:	e082      	b.n	800e3a8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2ae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2b4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2bc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	691b      	ldr	r3, [r3, #16]
 800e2c2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	7d1b      	ldrb	r3, [r3, #20]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d126      	bne.n	800e31a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	8adb      	ldrh	r3, [r3, #22]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d02e      	beq.n	800e332 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e2d4:	4b3b      	ldr	r3, [pc, #236]	@ (800e3c4 <tcp_abandon+0x170>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	687a      	ldr	r2, [r7, #4]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d105      	bne.n	800e2ea <tcp_abandon+0x96>
 800e2de:	4b39      	ldr	r3, [pc, #228]	@ (800e3c4 <tcp_abandon+0x170>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	68db      	ldr	r3, [r3, #12]
 800e2e4:	4a37      	ldr	r2, [pc, #220]	@ (800e3c4 <tcp_abandon+0x170>)
 800e2e6:	6013      	str	r3, [r2, #0]
 800e2e8:	e013      	b.n	800e312 <tcp_abandon+0xbe>
 800e2ea:	4b36      	ldr	r3, [pc, #216]	@ (800e3c4 <tcp_abandon+0x170>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	61fb      	str	r3, [r7, #28]
 800e2f0:	e00c      	b.n	800e30c <tcp_abandon+0xb8>
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	68db      	ldr	r3, [r3, #12]
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d104      	bne.n	800e306 <tcp_abandon+0xb2>
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	68da      	ldr	r2, [r3, #12]
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	60da      	str	r2, [r3, #12]
 800e304:	e005      	b.n	800e312 <tcp_abandon+0xbe>
 800e306:	69fb      	ldr	r3, [r7, #28]
 800e308:	68db      	ldr	r3, [r3, #12]
 800e30a:	61fb      	str	r3, [r7, #28]
 800e30c:	69fb      	ldr	r3, [r7, #28]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d1ef      	bne.n	800e2f2 <tcp_abandon+0x9e>
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2200      	movs	r2, #0
 800e316:	60da      	str	r2, [r3, #12]
 800e318:	e00b      	b.n	800e332 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	8adb      	ldrh	r3, [r3, #22]
 800e322:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e324:	6879      	ldr	r1, [r7, #4]
 800e326:	4828      	ldr	r0, [pc, #160]	@ (800e3c8 <tcp_abandon+0x174>)
 800e328:	f000 ff80 	bl	800f22c <tcp_pcb_remove>
 800e32c:	4b27      	ldr	r3, [pc, #156]	@ (800e3cc <tcp_abandon+0x178>)
 800e32e:	2201      	movs	r2, #1
 800e330:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e336:	2b00      	cmp	r3, #0
 800e338:	d004      	beq.n	800e344 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e33e:	4618      	mov	r0, r3
 800e340:	f000 fd22 	bl	800ed88 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d004      	beq.n	800e356 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e350:	4618      	mov	r0, r3
 800e352:	f000 fd19 	bl	800ed88 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d004      	beq.n	800e368 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e362:	4618      	mov	r0, r3
 800e364:	f000 fd10 	bl	800ed88 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d00e      	beq.n	800e38c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e36e:	6879      	ldr	r1, [r7, #4]
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	3304      	adds	r3, #4
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	8b12      	ldrh	r2, [r2, #24]
 800e378:	9202      	str	r2, [sp, #8]
 800e37a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e37c:	9201      	str	r2, [sp, #4]
 800e37e:	9300      	str	r3, [sp, #0]
 800e380:	460b      	mov	r3, r1
 800e382:	697a      	ldr	r2, [r7, #20]
 800e384:	69b9      	ldr	r1, [r7, #24]
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f004 fcc4 	bl	8012d14 <tcp_rst>
    }
    last_state = pcb->state;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	7d1b      	ldrb	r3, [r3, #20]
 800e390:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f7ff fd34 	bl	800de00 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d004      	beq.n	800e3a8 <tcp_abandon+0x154>
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	f06f 010c 	mvn.w	r1, #12
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	4798      	blx	r3
  }
}
 800e3a8:	3728      	adds	r7, #40	@ 0x28
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	08018190 	.word	0x08018190
 800e3b4:	080182d4 	.word	0x080182d4
 800e3b8:	080181d4 	.word	0x080181d4
 800e3bc:	080182f0 	.word	0x080182f0
 800e3c0:	2400c9dc 	.word	0x2400c9dc
 800e3c4:	2400c9d0 	.word	0x2400c9d0
 800e3c8:	2400c9d8 	.word	0x2400c9d8
 800e3cc:	2400c9e0 	.word	0x2400c9e0

0800e3d0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e3d8:	2101      	movs	r1, #1
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f7ff ff3a 	bl	800e254 <tcp_abandon>
}
 800e3e0:	bf00      	nop
 800e3e2:	3708      	adds	r7, #8
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b084      	sub	sp, #16
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d106      	bne.n	800e404 <tcp_update_rcv_ann_wnd+0x1c>
 800e3f6:	4b25      	ldr	r3, [pc, #148]	@ (800e48c <tcp_update_rcv_ann_wnd+0xa4>)
 800e3f8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800e3fc:	4924      	ldr	r1, [pc, #144]	@ (800e490 <tcp_update_rcv_ann_wnd+0xa8>)
 800e3fe:	4825      	ldr	r0, [pc, #148]	@ (800e494 <tcp_update_rcv_ann_wnd+0xac>)
 800e400:	f007 fe5c 	bl	80160bc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e408:	687a      	ldr	r2, [r7, #4]
 800e40a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800e40c:	4413      	add	r3, r2
 800e40e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e414:	687a      	ldr	r2, [r7, #4]
 800e416:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800e418:	f640 3168 	movw	r1, #2920	@ 0xb68
 800e41c:	428a      	cmp	r2, r1
 800e41e:	bf28      	it	cs
 800e420:	460a      	movcs	r2, r1
 800e422:	b292      	uxth	r2, r2
 800e424:	4413      	add	r3, r2
 800e426:	68fa      	ldr	r2, [r7, #12]
 800e428:	1ad3      	subs	r3, r2, r3
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	db08      	blt.n	800e440 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e43a:	68fa      	ldr	r2, [r7, #12]
 800e43c:	1ad3      	subs	r3, r2, r3
 800e43e:	e020      	b.n	800e482 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e448:	1ad3      	subs	r3, r2, r3
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	dd03      	ble.n	800e456 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2200      	movs	r2, #0
 800e452:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e454:	e014      	b.n	800e480 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e45e:	1ad3      	subs	r3, r2, r3
 800e460:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e468:	d306      	bcc.n	800e478 <tcp_update_rcv_ann_wnd+0x90>
 800e46a:	4b08      	ldr	r3, [pc, #32]	@ (800e48c <tcp_update_rcv_ann_wnd+0xa4>)
 800e46c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800e470:	4909      	ldr	r1, [pc, #36]	@ (800e498 <tcp_update_rcv_ann_wnd+0xb0>)
 800e472:	4808      	ldr	r0, [pc, #32]	@ (800e494 <tcp_update_rcv_ann_wnd+0xac>)
 800e474:	f007 fe22 	bl	80160bc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	b29a      	uxth	r2, r3
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800e480:	2300      	movs	r3, #0
  }
}
 800e482:	4618      	mov	r0, r3
 800e484:	3710      	adds	r7, #16
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	08018190 	.word	0x08018190
 800e490:	080183ec 	.word	0x080183ec
 800e494:	080181d4 	.word	0x080181d4
 800e498:	08018410 	.word	0x08018410

0800e49c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d107      	bne.n	800e4be <tcp_recved+0x22>
 800e4ae:	4b20      	ldr	r3, [pc, #128]	@ (800e530 <tcp_recved+0x94>)
 800e4b0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800e4b4:	491f      	ldr	r1, [pc, #124]	@ (800e534 <tcp_recved+0x98>)
 800e4b6:	4820      	ldr	r0, [pc, #128]	@ (800e538 <tcp_recved+0x9c>)
 800e4b8:	f007 fe00 	bl	80160bc <iprintf>
 800e4bc:	e034      	b.n	800e528 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	7d1b      	ldrb	r3, [r3, #20]
 800e4c2:	2b01      	cmp	r3, #1
 800e4c4:	d106      	bne.n	800e4d4 <tcp_recved+0x38>
 800e4c6:	4b1a      	ldr	r3, [pc, #104]	@ (800e530 <tcp_recved+0x94>)
 800e4c8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800e4cc:	491b      	ldr	r1, [pc, #108]	@ (800e53c <tcp_recved+0xa0>)
 800e4ce:	481a      	ldr	r0, [pc, #104]	@ (800e538 <tcp_recved+0x9c>)
 800e4d0:	f007 fdf4 	bl	80160bc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e4d8:	887b      	ldrh	r3, [r7, #2]
 800e4da:	4413      	add	r3, r2
 800e4dc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e4de:	89fb      	ldrh	r3, [r7, #14]
 800e4e0:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d804      	bhi.n	800e4f2 <tcp_recved+0x56>
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e4ec:	89fa      	ldrh	r2, [r7, #14]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d204      	bcs.n	800e4fc <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800e4f8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e4fa:	e002      	b.n	800e502 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	89fa      	ldrh	r2, [r7, #14]
 800e500:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f7ff ff70 	bl	800e3e8 <tcp_update_rcv_ann_wnd>
 800e508:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e510:	4293      	cmp	r3, r2
 800e512:	d909      	bls.n	800e528 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	8b5b      	ldrh	r3, [r3, #26]
 800e518:	f043 0302 	orr.w	r3, r3, #2
 800e51c:	b29a      	uxth	r2, r3
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f003 fe42 	bl	80121ac <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e528:	3710      	adds	r7, #16
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	08018190 	.word	0x08018190
 800e534:	0801842c 	.word	0x0801842c
 800e538:	080181d4 	.word	0x080181d4
 800e53c:	08018444 	.word	0x08018444

0800e540 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e540:	b5b0      	push	{r4, r5, r7, lr}
 800e542:	b090      	sub	sp, #64	@ 0x40
 800e544:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e546:	2300      	movs	r3, #0
 800e548:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800e54c:	4b95      	ldr	r3, [pc, #596]	@ (800e7a4 <tcp_slowtmr+0x264>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	3301      	adds	r3, #1
 800e552:	4a94      	ldr	r2, [pc, #592]	@ (800e7a4 <tcp_slowtmr+0x264>)
 800e554:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e556:	4b94      	ldr	r3, [pc, #592]	@ (800e7a8 <tcp_slowtmr+0x268>)
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	3301      	adds	r3, #1
 800e55c:	b2da      	uxtb	r2, r3
 800e55e:	4b92      	ldr	r3, [pc, #584]	@ (800e7a8 <tcp_slowtmr+0x268>)
 800e560:	701a      	strb	r2, [r3, #0]
 800e562:	e000      	b.n	800e566 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800e564:	bf00      	nop
  prev = NULL;
 800e566:	2300      	movs	r3, #0
 800e568:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800e56a:	4b90      	ldr	r3, [pc, #576]	@ (800e7ac <tcp_slowtmr+0x26c>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e570:	e29d      	b.n	800eaae <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e574:	7d1b      	ldrb	r3, [r3, #20]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d106      	bne.n	800e588 <tcp_slowtmr+0x48>
 800e57a:	4b8d      	ldr	r3, [pc, #564]	@ (800e7b0 <tcp_slowtmr+0x270>)
 800e57c:	f240 42be 	movw	r2, #1214	@ 0x4be
 800e580:	498c      	ldr	r1, [pc, #560]	@ (800e7b4 <tcp_slowtmr+0x274>)
 800e582:	488d      	ldr	r0, [pc, #564]	@ (800e7b8 <tcp_slowtmr+0x278>)
 800e584:	f007 fd9a 	bl	80160bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e58a:	7d1b      	ldrb	r3, [r3, #20]
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d106      	bne.n	800e59e <tcp_slowtmr+0x5e>
 800e590:	4b87      	ldr	r3, [pc, #540]	@ (800e7b0 <tcp_slowtmr+0x270>)
 800e592:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800e596:	4989      	ldr	r1, [pc, #548]	@ (800e7bc <tcp_slowtmr+0x27c>)
 800e598:	4887      	ldr	r0, [pc, #540]	@ (800e7b8 <tcp_slowtmr+0x278>)
 800e59a:	f007 fd8f 	bl	80160bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e59e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a0:	7d1b      	ldrb	r3, [r3, #20]
 800e5a2:	2b0a      	cmp	r3, #10
 800e5a4:	d106      	bne.n	800e5b4 <tcp_slowtmr+0x74>
 800e5a6:	4b82      	ldr	r3, [pc, #520]	@ (800e7b0 <tcp_slowtmr+0x270>)
 800e5a8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800e5ac:	4984      	ldr	r1, [pc, #528]	@ (800e7c0 <tcp_slowtmr+0x280>)
 800e5ae:	4882      	ldr	r0, [pc, #520]	@ (800e7b8 <tcp_slowtmr+0x278>)
 800e5b0:	f007 fd84 	bl	80160bc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5b6:	7f9a      	ldrb	r2, [r3, #30]
 800e5b8:	4b7b      	ldr	r3, [pc, #492]	@ (800e7a8 <tcp_slowtmr+0x268>)
 800e5ba:	781b      	ldrb	r3, [r3, #0]
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d105      	bne.n	800e5cc <tcp_slowtmr+0x8c>
      prev = pcb;
 800e5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800e5ca:	e270      	b.n	800eaae <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800e5cc:	4b76      	ldr	r3, [pc, #472]	@ (800e7a8 <tcp_slowtmr+0x268>)
 800e5ce:	781a      	ldrb	r2, [r3, #0]
 800e5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d2:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5e2:	7d1b      	ldrb	r3, [r3, #20]
 800e5e4:	2b02      	cmp	r3, #2
 800e5e6:	d10a      	bne.n	800e5fe <tcp_slowtmr+0xbe>
 800e5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e5ee:	2b05      	cmp	r3, #5
 800e5f0:	d905      	bls.n	800e5fe <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e5f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e5fc:	e11e      	b.n	800e83c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e600:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e604:	2b0b      	cmp	r3, #11
 800e606:	d905      	bls.n	800e614 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800e608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e60c:	3301      	adds	r3, #1
 800e60e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e612:	e113      	b.n	800e83c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800e614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e616:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d075      	beq.n	800e70a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e61e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e622:	2b00      	cmp	r3, #0
 800e624:	d006      	beq.n	800e634 <tcp_slowtmr+0xf4>
 800e626:	4b62      	ldr	r3, [pc, #392]	@ (800e7b0 <tcp_slowtmr+0x270>)
 800e628:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800e62c:	4965      	ldr	r1, [pc, #404]	@ (800e7c4 <tcp_slowtmr+0x284>)
 800e62e:	4862      	ldr	r0, [pc, #392]	@ (800e7b8 <tcp_slowtmr+0x278>)
 800e630:	f007 fd44 	bl	80160bc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d106      	bne.n	800e64a <tcp_slowtmr+0x10a>
 800e63c:	4b5c      	ldr	r3, [pc, #368]	@ (800e7b0 <tcp_slowtmr+0x270>)
 800e63e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800e642:	4961      	ldr	r1, [pc, #388]	@ (800e7c8 <tcp_slowtmr+0x288>)
 800e644:	485c      	ldr	r0, [pc, #368]	@ (800e7b8 <tcp_slowtmr+0x278>)
 800e646:	f007 fd39 	bl	80160bc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e64c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e650:	2b0b      	cmp	r3, #11
 800e652:	d905      	bls.n	800e660 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800e654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e658:	3301      	adds	r3, #1
 800e65a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e65e:	e0ed      	b.n	800e83c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e662:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e666:	3b01      	subs	r3, #1
 800e668:	4a58      	ldr	r2, [pc, #352]	@ (800e7cc <tcp_slowtmr+0x28c>)
 800e66a:	5cd3      	ldrb	r3, [r2, r3]
 800e66c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e670:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e674:	7c7a      	ldrb	r2, [r7, #17]
 800e676:	429a      	cmp	r2, r3
 800e678:	d907      	bls.n	800e68a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800e67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e67c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e680:	3301      	adds	r3, #1
 800e682:	b2da      	uxtb	r2, r3
 800e684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e686:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800e68a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e68c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e690:	7c7a      	ldrb	r2, [r7, #17]
 800e692:	429a      	cmp	r2, r3
 800e694:	f200 80d2 	bhi.w	800e83c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800e698:	2301      	movs	r3, #1
 800e69a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800e69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e69e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d108      	bne.n	800e6b8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e6a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e6a8:	f004 fc28 	bl	8012efc <tcp_zero_window_probe>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d014      	beq.n	800e6dc <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	623b      	str	r3, [r7, #32]
 800e6b6:	e011      	b.n	800e6dc <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e6be:	4619      	mov	r1, r3
 800e6c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e6c2:	f003 faed 	bl	8011ca0 <tcp_split_unsent_seg>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d107      	bne.n	800e6dc <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800e6cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e6ce:	f003 fd6d 	bl	80121ac <tcp_output>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d101      	bne.n	800e6dc <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800e6dc:	6a3b      	ldr	r3, [r7, #32]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	f000 80ac 	beq.w	800e83c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800e6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ee:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e6f2:	2b06      	cmp	r3, #6
 800e6f4:	f200 80a2 	bhi.w	800e83c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800e6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6fa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e6fe:	3301      	adds	r3, #1
 800e700:	b2da      	uxtb	r2, r3
 800e702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e704:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800e708:	e098      	b.n	800e83c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e70c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e710:	2b00      	cmp	r3, #0
 800e712:	db0f      	blt.n	800e734 <tcp_slowtmr+0x1f4>
 800e714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e716:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e71a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e71e:	4293      	cmp	r3, r2
 800e720:	d008      	beq.n	800e734 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800e722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e724:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e728:	b29b      	uxth	r3, r3
 800e72a:	3301      	adds	r3, #1
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	b21a      	sxth	r2, r3
 800e730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e732:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800e734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e736:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800e73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e73c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e740:	429a      	cmp	r2, r3
 800e742:	db7b      	blt.n	800e83c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e744:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e746:	f004 f825 	bl	8012794 <tcp_rexmit_rto_prepare>
 800e74a:	4603      	mov	r3, r0
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d007      	beq.n	800e760 <tcp_slowtmr+0x220>
 800e750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e754:	2b00      	cmp	r3, #0
 800e756:	d171      	bne.n	800e83c <tcp_slowtmr+0x2fc>
 800e758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e75a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d06d      	beq.n	800e83c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800e760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e762:	7d1b      	ldrb	r3, [r3, #20]
 800e764:	2b02      	cmp	r3, #2
 800e766:	d03a      	beq.n	800e7de <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e76a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e76e:	2b0c      	cmp	r3, #12
 800e770:	bf28      	it	cs
 800e772:	230c      	movcs	r3, #12
 800e774:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e778:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e77c:	10db      	asrs	r3, r3, #3
 800e77e:	b21b      	sxth	r3, r3
 800e780:	461a      	mov	r2, r3
 800e782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e784:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e788:	4413      	add	r3, r2
 800e78a:	7efa      	ldrb	r2, [r7, #27]
 800e78c:	4910      	ldr	r1, [pc, #64]	@ (800e7d0 <tcp_slowtmr+0x290>)
 800e78e:	5c8a      	ldrb	r2, [r1, r2]
 800e790:	4093      	lsls	r3, r2
 800e792:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800e79a:	4293      	cmp	r3, r2
 800e79c:	dc1a      	bgt.n	800e7d4 <tcp_slowtmr+0x294>
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	b21a      	sxth	r2, r3
 800e7a2:	e019      	b.n	800e7d8 <tcp_slowtmr+0x298>
 800e7a4:	2400c9cc 	.word	0x2400c9cc
 800e7a8:	2400c9e2 	.word	0x2400c9e2
 800e7ac:	2400c9d8 	.word	0x2400c9d8
 800e7b0:	08018190 	.word	0x08018190
 800e7b4:	080184d4 	.word	0x080184d4
 800e7b8:	080181d4 	.word	0x080181d4
 800e7bc:	08018500 	.word	0x08018500
 800e7c0:	0801852c 	.word	0x0801852c
 800e7c4:	0801855c 	.word	0x0801855c
 800e7c8:	08018590 	.word	0x08018590
 800e7cc:	0801a1c4 	.word	0x0801a1c4
 800e7d0:	0801a1b4 	.word	0x0801a1b4
 800e7d4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800e7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e7ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	bf28      	it	cs
 800e7f4:	4613      	movcs	r3, r2
 800e7f6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e7f8:	8a7b      	ldrh	r3, [r7, #18]
 800e7fa:	085b      	lsrs	r3, r3, #1
 800e7fc:	b29a      	uxth	r2, r3
 800e7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e800:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e806:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e80a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e80c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e80e:	005b      	lsls	r3, r3, #1
 800e810:	b29b      	uxth	r3, r3
 800e812:	429a      	cmp	r2, r3
 800e814:	d206      	bcs.n	800e824 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e818:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e81a:	005b      	lsls	r3, r3, #1
 800e81c:	b29a      	uxth	r2, r3
 800e81e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e820:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800e824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e826:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800e828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e82a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800e82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e830:	2200      	movs	r2, #0
 800e832:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800e836:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e838:	f004 f81c 	bl	8012874 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800e83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e83e:	7d1b      	ldrb	r3, [r3, #20]
 800e840:	2b06      	cmp	r3, #6
 800e842:	d111      	bne.n	800e868 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800e844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e846:	8b5b      	ldrh	r3, [r3, #26]
 800e848:	f003 0310 	and.w	r3, r3, #16
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d00b      	beq.n	800e868 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e850:	4b9c      	ldr	r3, [pc, #624]	@ (800eac4 <tcp_slowtmr+0x584>)
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e856:	6a1b      	ldr	r3, [r3, #32]
 800e858:	1ad3      	subs	r3, r2, r3
 800e85a:	2b28      	cmp	r3, #40	@ 0x28
 800e85c:	d904      	bls.n	800e868 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800e85e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e862:	3301      	adds	r3, #1
 800e864:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e86a:	7a5b      	ldrb	r3, [r3, #9]
 800e86c:	f003 0308 	and.w	r3, r3, #8
 800e870:	2b00      	cmp	r3, #0
 800e872:	d04a      	beq.n	800e90a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e876:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e878:	2b04      	cmp	r3, #4
 800e87a:	d003      	beq.n	800e884 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800e87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e87e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e880:	2b07      	cmp	r3, #7
 800e882:	d142      	bne.n	800e90a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e884:	4b8f      	ldr	r3, [pc, #572]	@ (800eac4 <tcp_slowtmr+0x584>)
 800e886:	681a      	ldr	r2, [r3, #0]
 800e888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e88a:	6a1b      	ldr	r3, [r3, #32]
 800e88c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e88e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e890:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e894:	4b8c      	ldr	r3, [pc, #560]	@ (800eac8 <tcp_slowtmr+0x588>)
 800e896:	440b      	add	r3, r1
 800e898:	498c      	ldr	r1, [pc, #560]	@ (800eacc <tcp_slowtmr+0x58c>)
 800e89a:	fba1 1303 	umull	r1, r3, r1, r3
 800e89e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d90a      	bls.n	800e8ba <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800e8a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800e8ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e8b8:	e027      	b.n	800e90a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e8ba:	4b82      	ldr	r3, [pc, #520]	@ (800eac4 <tcp_slowtmr+0x584>)
 800e8bc:	681a      	ldr	r2, [r3, #0]
 800e8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8c0:	6a1b      	ldr	r3, [r3, #32]
 800e8c2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8c6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8cc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	4b7f      	ldr	r3, [pc, #508]	@ (800ead0 <tcp_slowtmr+0x590>)
 800e8d4:	fb00 f303 	mul.w	r3, r0, r3
 800e8d8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e8da:	497c      	ldr	r1, [pc, #496]	@ (800eacc <tcp_slowtmr+0x58c>)
 800e8dc:	fba1 1303 	umull	r1, r3, r1, r3
 800e8e0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d911      	bls.n	800e90a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e8e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e8e8:	f004 fac8 	bl	8012e7c <tcp_keepalive>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800e8f2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d107      	bne.n	800e90a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e8fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8fc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e900:	3301      	adds	r3, #1
 800e902:	b2da      	uxtb	r2, r3
 800e904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e906:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800e90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e90c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d011      	beq.n	800e936 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e912:	4b6c      	ldr	r3, [pc, #432]	@ (800eac4 <tcp_slowtmr+0x584>)
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e918:	6a1b      	ldr	r3, [r3, #32]
 800e91a:	1ad2      	subs	r2, r2, r3
 800e91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e91e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e922:	4619      	mov	r1, r3
 800e924:	460b      	mov	r3, r1
 800e926:	005b      	lsls	r3, r3, #1
 800e928:	440b      	add	r3, r1
 800e92a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d302      	bcc.n	800e936 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800e930:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e932:	f000 fddf 	bl	800f4f4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800e936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e938:	7d1b      	ldrb	r3, [r3, #20]
 800e93a:	2b03      	cmp	r3, #3
 800e93c:	d10b      	bne.n	800e956 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e93e:	4b61      	ldr	r3, [pc, #388]	@ (800eac4 <tcp_slowtmr+0x584>)
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e944:	6a1b      	ldr	r3, [r3, #32]
 800e946:	1ad3      	subs	r3, r2, r3
 800e948:	2b28      	cmp	r3, #40	@ 0x28
 800e94a:	d904      	bls.n	800e956 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800e94c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e950:	3301      	adds	r3, #1
 800e952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800e956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e958:	7d1b      	ldrb	r3, [r3, #20]
 800e95a:	2b09      	cmp	r3, #9
 800e95c:	d10b      	bne.n	800e976 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e95e:	4b59      	ldr	r3, [pc, #356]	@ (800eac4 <tcp_slowtmr+0x584>)
 800e960:	681a      	ldr	r2, [r3, #0]
 800e962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e964:	6a1b      	ldr	r3, [r3, #32]
 800e966:	1ad3      	subs	r3, r2, r3
 800e968:	2bf0      	cmp	r3, #240	@ 0xf0
 800e96a:	d904      	bls.n	800e976 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e96c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e970:	3301      	adds	r3, #1
 800e972:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800e976:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d060      	beq.n	800ea40 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800e97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e984:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e986:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e988:	f000 fc00 	bl	800f18c <tcp_pcb_purge>
      if (prev != NULL) {
 800e98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d010      	beq.n	800e9b4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e992:	4b50      	ldr	r3, [pc, #320]	@ (800ead4 <tcp_slowtmr+0x594>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e998:	429a      	cmp	r2, r3
 800e99a:	d106      	bne.n	800e9aa <tcp_slowtmr+0x46a>
 800e99c:	4b4e      	ldr	r3, [pc, #312]	@ (800ead8 <tcp_slowtmr+0x598>)
 800e99e:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e9a2:	494e      	ldr	r1, [pc, #312]	@ (800eadc <tcp_slowtmr+0x59c>)
 800e9a4:	484e      	ldr	r0, [pc, #312]	@ (800eae0 <tcp_slowtmr+0x5a0>)
 800e9a6:	f007 fb89 	bl	80160bc <iprintf>
        prev->next = pcb->next;
 800e9aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9ac:	68da      	ldr	r2, [r3, #12]
 800e9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9b0:	60da      	str	r2, [r3, #12]
 800e9b2:	e00f      	b.n	800e9d4 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e9b4:	4b47      	ldr	r3, [pc, #284]	@ (800ead4 <tcp_slowtmr+0x594>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d006      	beq.n	800e9cc <tcp_slowtmr+0x48c>
 800e9be:	4b46      	ldr	r3, [pc, #280]	@ (800ead8 <tcp_slowtmr+0x598>)
 800e9c0:	f240 5271 	movw	r2, #1393	@ 0x571
 800e9c4:	4947      	ldr	r1, [pc, #284]	@ (800eae4 <tcp_slowtmr+0x5a4>)
 800e9c6:	4846      	ldr	r0, [pc, #280]	@ (800eae0 <tcp_slowtmr+0x5a0>)
 800e9c8:	f007 fb78 	bl	80160bc <iprintf>
        tcp_active_pcbs = pcb->next;
 800e9cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9ce:	68db      	ldr	r3, [r3, #12]
 800e9d0:	4a40      	ldr	r2, [pc, #256]	@ (800ead4 <tcp_slowtmr+0x594>)
 800e9d2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e9d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d013      	beq.n	800ea04 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9de:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e9e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9e2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e9e4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9e8:	3304      	adds	r3, #4
 800e9ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e9ec:	8ad2      	ldrh	r2, [r2, #22]
 800e9ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e9f0:	8b09      	ldrh	r1, [r1, #24]
 800e9f2:	9102      	str	r1, [sp, #8]
 800e9f4:	9201      	str	r2, [sp, #4]
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	462b      	mov	r3, r5
 800e9fa:	4622      	mov	r2, r4
 800e9fc:	4601      	mov	r1, r0
 800e9fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea00:	f004 f988 	bl	8012d14 <tcp_rst>
      err_arg = pcb->callback_arg;
 800ea04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea06:	691b      	ldr	r3, [r3, #16]
 800ea08:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ea0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea0c:	7d1b      	ldrb	r3, [r3, #20]
 800ea0e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ea10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea12:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ea14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea16:	68db      	ldr	r3, [r3, #12]
 800ea18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ea1a:	6838      	ldr	r0, [r7, #0]
 800ea1c:	f7ff f9f0 	bl	800de00 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800ea20:	4b31      	ldr	r3, [pc, #196]	@ (800eae8 <tcp_slowtmr+0x5a8>)
 800ea22:	2200      	movs	r2, #0
 800ea24:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d004      	beq.n	800ea36 <tcp_slowtmr+0x4f6>
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f06f 010c 	mvn.w	r1, #12
 800ea32:	68b8      	ldr	r0, [r7, #8]
 800ea34:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ea36:	4b2c      	ldr	r3, [pc, #176]	@ (800eae8 <tcp_slowtmr+0x5a8>)
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d037      	beq.n	800eaae <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ea3e:	e592      	b.n	800e566 <tcp_slowtmr+0x26>
      prev = pcb;
 800ea40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea42:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ea44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea46:	68db      	ldr	r3, [r3, #12]
 800ea48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800ea4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea4c:	7f1b      	ldrb	r3, [r3, #28]
 800ea4e:	3301      	adds	r3, #1
 800ea50:	b2da      	uxtb	r2, r3
 800ea52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea54:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ea56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea58:	7f1a      	ldrb	r2, [r3, #28]
 800ea5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea5c:	7f5b      	ldrb	r3, [r3, #29]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d325      	bcc.n	800eaae <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ea62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea64:	2200      	movs	r2, #0
 800ea66:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800ea68:	4b1f      	ldr	r3, [pc, #124]	@ (800eae8 <tcp_slowtmr+0x5a8>)
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ea6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d00b      	beq.n	800ea90 <tcp_slowtmr+0x550>
 800ea78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ea7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea80:	6912      	ldr	r2, [r2, #16]
 800ea82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea84:	4610      	mov	r0, r2
 800ea86:	4798      	blx	r3
 800ea88:	4603      	mov	r3, r0
 800ea8a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800ea8e:	e002      	b.n	800ea96 <tcp_slowtmr+0x556>
 800ea90:	2300      	movs	r3, #0
 800ea92:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800ea96:	4b14      	ldr	r3, [pc, #80]	@ (800eae8 <tcp_slowtmr+0x5a8>)
 800ea98:	781b      	ldrb	r3, [r3, #0]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	f47f ad62 	bne.w	800e564 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800eaa0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d102      	bne.n	800eaae <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800eaa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eaaa:	f003 fb7f 	bl	80121ac <tcp_output>
  while (pcb != NULL) {
 800eaae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	f47f ad5e 	bne.w	800e572 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800eab6:	2300      	movs	r3, #0
 800eab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800eaba:	4b0c      	ldr	r3, [pc, #48]	@ (800eaec <tcp_slowtmr+0x5ac>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800eac0:	e069      	b.n	800eb96 <tcp_slowtmr+0x656>
 800eac2:	bf00      	nop
 800eac4:	2400c9cc 	.word	0x2400c9cc
 800eac8:	000a4cb8 	.word	0x000a4cb8
 800eacc:	10624dd3 	.word	0x10624dd3
 800ead0:	000124f8 	.word	0x000124f8
 800ead4:	2400c9d8 	.word	0x2400c9d8
 800ead8:	08018190 	.word	0x08018190
 800eadc:	080185c8 	.word	0x080185c8
 800eae0:	080181d4 	.word	0x080181d4
 800eae4:	080185f4 	.word	0x080185f4
 800eae8:	2400c9e0 	.word	0x2400c9e0
 800eaec:	2400c9dc 	.word	0x2400c9dc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800eaf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf2:	7d1b      	ldrb	r3, [r3, #20]
 800eaf4:	2b0a      	cmp	r3, #10
 800eaf6:	d006      	beq.n	800eb06 <tcp_slowtmr+0x5c6>
 800eaf8:	4b2b      	ldr	r3, [pc, #172]	@ (800eba8 <tcp_slowtmr+0x668>)
 800eafa:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800eafe:	492b      	ldr	r1, [pc, #172]	@ (800ebac <tcp_slowtmr+0x66c>)
 800eb00:	482b      	ldr	r0, [pc, #172]	@ (800ebb0 <tcp_slowtmr+0x670>)
 800eb02:	f007 fadb 	bl	80160bc <iprintf>
    pcb_remove = 0;
 800eb06:	2300      	movs	r3, #0
 800eb08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eb0c:	4b29      	ldr	r3, [pc, #164]	@ (800ebb4 <tcp_slowtmr+0x674>)
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb12:	6a1b      	ldr	r3, [r3, #32]
 800eb14:	1ad3      	subs	r3, r2, r3
 800eb16:	2bf0      	cmp	r3, #240	@ 0xf0
 800eb18:	d904      	bls.n	800eb24 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800eb1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb1e:	3301      	adds	r3, #1
 800eb20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800eb24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d02f      	beq.n	800eb8c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800eb2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb2e:	f000 fb2d 	bl	800f18c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800eb32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d010      	beq.n	800eb5a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800eb38:	4b1f      	ldr	r3, [pc, #124]	@ (800ebb8 <tcp_slowtmr+0x678>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d106      	bne.n	800eb50 <tcp_slowtmr+0x610>
 800eb42:	4b19      	ldr	r3, [pc, #100]	@ (800eba8 <tcp_slowtmr+0x668>)
 800eb44:	f240 52af 	movw	r2, #1455	@ 0x5af
 800eb48:	491c      	ldr	r1, [pc, #112]	@ (800ebbc <tcp_slowtmr+0x67c>)
 800eb4a:	4819      	ldr	r0, [pc, #100]	@ (800ebb0 <tcp_slowtmr+0x670>)
 800eb4c:	f007 fab6 	bl	80160bc <iprintf>
        prev->next = pcb->next;
 800eb50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb52:	68da      	ldr	r2, [r3, #12]
 800eb54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb56:	60da      	str	r2, [r3, #12]
 800eb58:	e00f      	b.n	800eb7a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800eb5a:	4b17      	ldr	r3, [pc, #92]	@ (800ebb8 <tcp_slowtmr+0x678>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d006      	beq.n	800eb72 <tcp_slowtmr+0x632>
 800eb64:	4b10      	ldr	r3, [pc, #64]	@ (800eba8 <tcp_slowtmr+0x668>)
 800eb66:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800eb6a:	4915      	ldr	r1, [pc, #84]	@ (800ebc0 <tcp_slowtmr+0x680>)
 800eb6c:	4810      	ldr	r0, [pc, #64]	@ (800ebb0 <tcp_slowtmr+0x670>)
 800eb6e:	f007 faa5 	bl	80160bc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800eb72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb74:	68db      	ldr	r3, [r3, #12]
 800eb76:	4a10      	ldr	r2, [pc, #64]	@ (800ebb8 <tcp_slowtmr+0x678>)
 800eb78:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800eb7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb7c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800eb7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800eb84:	69f8      	ldr	r0, [r7, #28]
 800eb86:	f7ff f93b 	bl	800de00 <tcp_free>
 800eb8a:	e004      	b.n	800eb96 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800eb8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800eb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb92:	68db      	ldr	r3, [r3, #12]
 800eb94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800eb96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d1a9      	bne.n	800eaf0 <tcp_slowtmr+0x5b0>
    }
  }
}
 800eb9c:	bf00      	nop
 800eb9e:	bf00      	nop
 800eba0:	3730      	adds	r7, #48	@ 0x30
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bdb0      	pop	{r4, r5, r7, pc}
 800eba6:	bf00      	nop
 800eba8:	08018190 	.word	0x08018190
 800ebac:	08018620 	.word	0x08018620
 800ebb0:	080181d4 	.word	0x080181d4
 800ebb4:	2400c9cc 	.word	0x2400c9cc
 800ebb8:	2400c9dc 	.word	0x2400c9dc
 800ebbc:	08018650 	.word	0x08018650
 800ebc0:	08018678 	.word	0x08018678

0800ebc4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ebca:	4b2d      	ldr	r3, [pc, #180]	@ (800ec80 <tcp_fasttmr+0xbc>)
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	b2da      	uxtb	r2, r3
 800ebd2:	4b2b      	ldr	r3, [pc, #172]	@ (800ec80 <tcp_fasttmr+0xbc>)
 800ebd4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ebd6:	4b2b      	ldr	r3, [pc, #172]	@ (800ec84 <tcp_fasttmr+0xc0>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ebdc:	e048      	b.n	800ec70 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	7f9a      	ldrb	r2, [r3, #30]
 800ebe2:	4b27      	ldr	r3, [pc, #156]	@ (800ec80 <tcp_fasttmr+0xbc>)
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d03f      	beq.n	800ec6a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ebea:	4b25      	ldr	r3, [pc, #148]	@ (800ec80 <tcp_fasttmr+0xbc>)
 800ebec:	781a      	ldrb	r2, [r3, #0]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	8b5b      	ldrh	r3, [r3, #26]
 800ebf6:	f003 0301 	and.w	r3, r3, #1
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d010      	beq.n	800ec20 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	8b5b      	ldrh	r3, [r3, #26]
 800ec02:	f043 0302 	orr.w	r3, r3, #2
 800ec06:	b29a      	uxth	r2, r3
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f003 facd 	bl	80121ac <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	8b5b      	ldrh	r3, [r3, #26]
 800ec16:	f023 0303 	bic.w	r3, r3, #3
 800ec1a:	b29a      	uxth	r2, r3
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	8b5b      	ldrh	r3, [r3, #26]
 800ec24:	f003 0308 	and.w	r3, r3, #8
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d009      	beq.n	800ec40 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	8b5b      	ldrh	r3, [r3, #26]
 800ec30:	f023 0308 	bic.w	r3, r3, #8
 800ec34:	b29a      	uxth	r2, r3
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f7ff fa74 	bl	800e128 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	68db      	ldr	r3, [r3, #12]
 800ec44:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d00a      	beq.n	800ec64 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ec4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ec88 <tcp_fasttmr+0xc4>)
 800ec50:	2200      	movs	r2, #0
 800ec52:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f000 f819 	bl	800ec8c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ec5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ec88 <tcp_fasttmr+0xc4>)
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d000      	beq.n	800ec64 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ec62:	e7b8      	b.n	800ebd6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	607b      	str	r3, [r7, #4]
 800ec68:	e002      	b.n	800ec70 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	68db      	ldr	r3, [r3, #12]
 800ec6e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d1b3      	bne.n	800ebde <tcp_fasttmr+0x1a>
    }
  }
}
 800ec76:	bf00      	nop
 800ec78:	bf00      	nop
 800ec7a:	3708      	adds	r7, #8
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	2400c9e2 	.word	0x2400c9e2
 800ec84:	2400c9d8 	.word	0x2400c9d8
 800ec88:	2400c9e0 	.word	0x2400c9e0

0800ec8c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ec8c:	b590      	push	{r4, r7, lr}
 800ec8e:	b085      	sub	sp, #20
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d109      	bne.n	800ecae <tcp_process_refused_data+0x22>
 800ec9a:	4b38      	ldr	r3, [pc, #224]	@ (800ed7c <tcp_process_refused_data+0xf0>)
 800ec9c:	f240 6209 	movw	r2, #1545	@ 0x609
 800eca0:	4937      	ldr	r1, [pc, #220]	@ (800ed80 <tcp_process_refused_data+0xf4>)
 800eca2:	4838      	ldr	r0, [pc, #224]	@ (800ed84 <tcp_process_refused_data+0xf8>)
 800eca4:	f007 fa0a 	bl	80160bc <iprintf>
 800eca8:	f06f 030f 	mvn.w	r3, #15
 800ecac:	e061      	b.n	800ed72 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ecb2:	7b5b      	ldrb	r3, [r3, #13]
 800ecb4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ecba:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d00b      	beq.n	800ece4 <tcp_process_refused_data+0x58>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6918      	ldr	r0, [r3, #16]
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	68ba      	ldr	r2, [r7, #8]
 800ecda:	6879      	ldr	r1, [r7, #4]
 800ecdc:	47a0      	blx	r4
 800ecde:	4603      	mov	r3, r0
 800ece0:	73fb      	strb	r3, [r7, #15]
 800ece2:	e007      	b.n	800ecf4 <tcp_process_refused_data+0x68>
 800ece4:	2300      	movs	r3, #0
 800ece6:	68ba      	ldr	r2, [r7, #8]
 800ece8:	6879      	ldr	r1, [r7, #4]
 800ecea:	2000      	movs	r0, #0
 800ecec:	f000 f8a6 	bl	800ee3c <tcp_recv_null>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ecf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d12b      	bne.n	800ed54 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ecfc:	7bbb      	ldrb	r3, [r7, #14]
 800ecfe:	f003 0320 	and.w	r3, r3, #32
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d034      	beq.n	800ed70 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed0a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d005      	beq.n	800ed1e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed16:	3301      	adds	r3, #1
 800ed18:	b29a      	uxth	r2, r3
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d00b      	beq.n	800ed40 <tcp_process_refused_data+0xb4>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6918      	ldr	r0, [r3, #16]
 800ed32:	2300      	movs	r3, #0
 800ed34:	2200      	movs	r2, #0
 800ed36:	6879      	ldr	r1, [r7, #4]
 800ed38:	47a0      	blx	r4
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	73fb      	strb	r3, [r7, #15]
 800ed3e:	e001      	b.n	800ed44 <tcp_process_refused_data+0xb8>
 800ed40:	2300      	movs	r3, #0
 800ed42:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ed44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed48:	f113 0f0d 	cmn.w	r3, #13
 800ed4c:	d110      	bne.n	800ed70 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 800ed4e:	f06f 030c 	mvn.w	r3, #12
 800ed52:	e00e      	b.n	800ed72 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 800ed54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed58:	f113 0f0d 	cmn.w	r3, #13
 800ed5c:	d102      	bne.n	800ed64 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ed5e:	f06f 030c 	mvn.w	r3, #12
 800ed62:	e006      	b.n	800ed72 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	68ba      	ldr	r2, [r7, #8]
 800ed68:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800ed6a:	f06f 0304 	mvn.w	r3, #4
 800ed6e:	e000      	b.n	800ed72 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800ed70:	2300      	movs	r3, #0
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3714      	adds	r7, #20
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd90      	pop	{r4, r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	08018190 	.word	0x08018190
 800ed80:	080186a0 	.word	0x080186a0
 800ed84:	080181d4 	.word	0x080181d4

0800ed88 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b084      	sub	sp, #16
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ed90:	e007      	b.n	800eda2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f000 f80a 	bl	800edb2 <tcp_seg_free>
    seg = next;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d1f4      	bne.n	800ed92 <tcp_segs_free+0xa>
  }
}
 800eda8:	bf00      	nop
 800edaa:	bf00      	nop
 800edac:	3710      	adds	r7, #16
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}

0800edb2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800edb2:	b580      	push	{r7, lr}
 800edb4:	b082      	sub	sp, #8
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d00c      	beq.n	800edda <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	685b      	ldr	r3, [r3, #4]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d004      	beq.n	800edd2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	685b      	ldr	r3, [r3, #4]
 800edcc:	4618      	mov	r0, r3
 800edce:	f7fe fd6b 	bl	800d8a8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800edd2:	6879      	ldr	r1, [r7, #4]
 800edd4:	2003      	movs	r0, #3
 800edd6:	f7fd febf 	bl	800cb58 <memp_free>
  }
}
 800edda:	bf00      	nop
 800eddc:	3708      	adds	r7, #8
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
	...

0800ede4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d106      	bne.n	800ee00 <tcp_seg_copy+0x1c>
 800edf2:	4b0f      	ldr	r3, [pc, #60]	@ (800ee30 <tcp_seg_copy+0x4c>)
 800edf4:	f240 6282 	movw	r2, #1666	@ 0x682
 800edf8:	490e      	ldr	r1, [pc, #56]	@ (800ee34 <tcp_seg_copy+0x50>)
 800edfa:	480f      	ldr	r0, [pc, #60]	@ (800ee38 <tcp_seg_copy+0x54>)
 800edfc:	f007 f95e 	bl	80160bc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ee00:	2003      	movs	r0, #3
 800ee02:	f7fd fe33 	bl	800ca6c <memp_malloc>
 800ee06:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d101      	bne.n	800ee12 <tcp_seg_copy+0x2e>
    return NULL;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	e00a      	b.n	800ee28 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ee12:	2210      	movs	r2, #16
 800ee14:	6879      	ldr	r1, [r7, #4]
 800ee16:	68f8      	ldr	r0, [r7, #12]
 800ee18:	f007 fa87 	bl	801632a <memcpy>
  pbuf_ref(cseg->p);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7fe fde7 	bl	800d9f4 <pbuf_ref>
  return cseg;
 800ee26:	68fb      	ldr	r3, [r7, #12]
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	3710      	adds	r7, #16
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}
 800ee30:	08018190 	.word	0x08018190
 800ee34:	080186e4 	.word	0x080186e4
 800ee38:	080181d4 	.word	0x080181d4

0800ee3c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b084      	sub	sp, #16
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	60f8      	str	r0, [r7, #12]
 800ee44:	60b9      	str	r1, [r7, #8]
 800ee46:	607a      	str	r2, [r7, #4]
 800ee48:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d109      	bne.n	800ee64 <tcp_recv_null+0x28>
 800ee50:	4b12      	ldr	r3, [pc, #72]	@ (800ee9c <tcp_recv_null+0x60>)
 800ee52:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ee56:	4912      	ldr	r1, [pc, #72]	@ (800eea0 <tcp_recv_null+0x64>)
 800ee58:	4812      	ldr	r0, [pc, #72]	@ (800eea4 <tcp_recv_null+0x68>)
 800ee5a:	f007 f92f 	bl	80160bc <iprintf>
 800ee5e:	f06f 030f 	mvn.w	r3, #15
 800ee62:	e016      	b.n	800ee92 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d009      	beq.n	800ee7e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	891b      	ldrh	r3, [r3, #8]
 800ee6e:	4619      	mov	r1, r3
 800ee70:	68b8      	ldr	r0, [r7, #8]
 800ee72:	f7ff fb13 	bl	800e49c <tcp_recved>
    pbuf_free(p);
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f7fe fd16 	bl	800d8a8 <pbuf_free>
 800ee7c:	e008      	b.n	800ee90 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ee7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d104      	bne.n	800ee90 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ee86:	68b8      	ldr	r0, [r7, #8]
 800ee88:	f7ff f9b8 	bl	800e1fc <tcp_close>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	e000      	b.n	800ee92 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ee90:	2300      	movs	r3, #0
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3710      	adds	r7, #16
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	08018190 	.word	0x08018190
 800eea0:	08018700 	.word	0x08018700
 800eea4:	080181d4 	.word	0x080181d4

0800eea8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b086      	sub	sp, #24
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	4603      	mov	r3, r0
 800eeb0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800eeb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	db01      	blt.n	800eebe <tcp_kill_prio+0x16>
 800eeba:	79fb      	ldrb	r3, [r7, #7]
 800eebc:	e000      	b.n	800eec0 <tcp_kill_prio+0x18>
 800eebe:	237f      	movs	r3, #127	@ 0x7f
 800eec0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800eec2:	7afb      	ldrb	r3, [r7, #11]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d034      	beq.n	800ef32 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800eec8:	7afb      	ldrb	r3, [r7, #11]
 800eeca:	3b01      	subs	r3, #1
 800eecc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800eece:	2300      	movs	r3, #0
 800eed0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eed2:	2300      	movs	r3, #0
 800eed4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eed6:	4b19      	ldr	r3, [pc, #100]	@ (800ef3c <tcp_kill_prio+0x94>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	617b      	str	r3, [r7, #20]
 800eedc:	e01f      	b.n	800ef1e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	7d5b      	ldrb	r3, [r3, #21]
 800eee2:	7afa      	ldrb	r2, [r7, #11]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d80c      	bhi.n	800ef02 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800eeec:	7afa      	ldrb	r2, [r7, #11]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d112      	bne.n	800ef18 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800eef2:	4b13      	ldr	r3, [pc, #76]	@ (800ef40 <tcp_kill_prio+0x98>)
 800eef4:	681a      	ldr	r2, [r3, #0]
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	6a1b      	ldr	r3, [r3, #32]
 800eefa:	1ad3      	subs	r3, r2, r3
 800eefc:	68fa      	ldr	r2, [r7, #12]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d80a      	bhi.n	800ef18 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ef02:	4b0f      	ldr	r3, [pc, #60]	@ (800ef40 <tcp_kill_prio+0x98>)
 800ef04:	681a      	ldr	r2, [r3, #0]
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	6a1b      	ldr	r3, [r3, #32]
 800ef0a:	1ad3      	subs	r3, r2, r3
 800ef0c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	7d5b      	ldrb	r3, [r3, #21]
 800ef16:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	68db      	ldr	r3, [r3, #12]
 800ef1c:	617b      	str	r3, [r7, #20]
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d1dc      	bne.n	800eede <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d004      	beq.n	800ef34 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ef2a:	6938      	ldr	r0, [r7, #16]
 800ef2c:	f7ff fa50 	bl	800e3d0 <tcp_abort>
 800ef30:	e000      	b.n	800ef34 <tcp_kill_prio+0x8c>
    return;
 800ef32:	bf00      	nop
  }
}
 800ef34:	3718      	adds	r7, #24
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
 800ef3a:	bf00      	nop
 800ef3c:	2400c9d8 	.word	0x2400c9d8
 800ef40:	2400c9cc 	.word	0x2400c9cc

0800ef44 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b086      	sub	sp, #24
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ef4e:	79fb      	ldrb	r3, [r7, #7]
 800ef50:	2b08      	cmp	r3, #8
 800ef52:	d009      	beq.n	800ef68 <tcp_kill_state+0x24>
 800ef54:	79fb      	ldrb	r3, [r7, #7]
 800ef56:	2b09      	cmp	r3, #9
 800ef58:	d006      	beq.n	800ef68 <tcp_kill_state+0x24>
 800ef5a:	4b1a      	ldr	r3, [pc, #104]	@ (800efc4 <tcp_kill_state+0x80>)
 800ef5c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800ef60:	4919      	ldr	r1, [pc, #100]	@ (800efc8 <tcp_kill_state+0x84>)
 800ef62:	481a      	ldr	r0, [pc, #104]	@ (800efcc <tcp_kill_state+0x88>)
 800ef64:	f007 f8aa 	bl	80160bc <iprintf>

  inactivity = 0;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef70:	4b17      	ldr	r3, [pc, #92]	@ (800efd0 <tcp_kill_state+0x8c>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	617b      	str	r3, [r7, #20]
 800ef76:	e017      	b.n	800efa8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	7d1b      	ldrb	r3, [r3, #20]
 800ef7c:	79fa      	ldrb	r2, [r7, #7]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d10f      	bne.n	800efa2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ef82:	4b14      	ldr	r3, [pc, #80]	@ (800efd4 <tcp_kill_state+0x90>)
 800ef84:	681a      	ldr	r2, [r3, #0]
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	6a1b      	ldr	r3, [r3, #32]
 800ef8a:	1ad3      	subs	r3, r2, r3
 800ef8c:	68fa      	ldr	r2, [r7, #12]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d807      	bhi.n	800efa2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ef92:	4b10      	ldr	r3, [pc, #64]	@ (800efd4 <tcp_kill_state+0x90>)
 800ef94:	681a      	ldr	r2, [r3, #0]
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	6a1b      	ldr	r3, [r3, #32]
 800ef9a:	1ad3      	subs	r3, r2, r3
 800ef9c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	68db      	ldr	r3, [r3, #12]
 800efa6:	617b      	str	r3, [r7, #20]
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d1e4      	bne.n	800ef78 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d003      	beq.n	800efbc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800efb4:	2100      	movs	r1, #0
 800efb6:	6938      	ldr	r0, [r7, #16]
 800efb8:	f7ff f94c 	bl	800e254 <tcp_abandon>
  }
}
 800efbc:	bf00      	nop
 800efbe:	3718      	adds	r7, #24
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	08018190 	.word	0x08018190
 800efc8:	0801871c 	.word	0x0801871c
 800efcc:	080181d4 	.word	0x080181d4
 800efd0:	2400c9d8 	.word	0x2400c9d8
 800efd4:	2400c9cc 	.word	0x2400c9cc

0800efd8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800efde:	2300      	movs	r3, #0
 800efe0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800efe2:	2300      	movs	r3, #0
 800efe4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800efe6:	4b12      	ldr	r3, [pc, #72]	@ (800f030 <tcp_kill_timewait+0x58>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	60fb      	str	r3, [r7, #12]
 800efec:	e012      	b.n	800f014 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800efee:	4b11      	ldr	r3, [pc, #68]	@ (800f034 <tcp_kill_timewait+0x5c>)
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	6a1b      	ldr	r3, [r3, #32]
 800eff6:	1ad3      	subs	r3, r2, r3
 800eff8:	687a      	ldr	r2, [r7, #4]
 800effa:	429a      	cmp	r2, r3
 800effc:	d807      	bhi.n	800f00e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800effe:	4b0d      	ldr	r3, [pc, #52]	@ (800f034 <tcp_kill_timewait+0x5c>)
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	6a1b      	ldr	r3, [r3, #32]
 800f006:	1ad3      	subs	r3, r2, r3
 800f008:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	68db      	ldr	r3, [r3, #12]
 800f012:	60fb      	str	r3, [r7, #12]
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d1e9      	bne.n	800efee <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d002      	beq.n	800f026 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f020:	68b8      	ldr	r0, [r7, #8]
 800f022:	f7ff f9d5 	bl	800e3d0 <tcp_abort>
  }
}
 800f026:	bf00      	nop
 800f028:	3710      	adds	r7, #16
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	2400c9dc 	.word	0x2400c9dc
 800f034:	2400c9cc 	.word	0x2400c9cc

0800f038 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f03e:	4b10      	ldr	r3, [pc, #64]	@ (800f080 <tcp_handle_closepend+0x48>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f044:	e014      	b.n	800f070 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	68db      	ldr	r3, [r3, #12]
 800f04a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	8b5b      	ldrh	r3, [r3, #26]
 800f050:	f003 0308 	and.w	r3, r3, #8
 800f054:	2b00      	cmp	r3, #0
 800f056:	d009      	beq.n	800f06c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	8b5b      	ldrh	r3, [r3, #26]
 800f05c:	f023 0308 	bic.w	r3, r3, #8
 800f060:	b29a      	uxth	r2, r3
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f7ff f85e 	bl	800e128 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d1e7      	bne.n	800f046 <tcp_handle_closepend+0xe>
  }
}
 800f076:	bf00      	nop
 800f078:	bf00      	nop
 800f07a:	3708      	adds	r7, #8
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}
 800f080:	2400c9d8 	.word	0x2400c9d8

0800f084 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b084      	sub	sp, #16
 800f088:	af00      	add	r7, sp, #0
 800f08a:	4603      	mov	r3, r0
 800f08c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f08e:	2001      	movs	r0, #1
 800f090:	f7fd fcec 	bl	800ca6c <memp_malloc>
 800f094:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d126      	bne.n	800f0ea <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f09c:	f7ff ffcc 	bl	800f038 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f0a0:	f7ff ff9a 	bl	800efd8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f0a4:	2001      	movs	r0, #1
 800f0a6:	f7fd fce1 	bl	800ca6c <memp_malloc>
 800f0aa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d11b      	bne.n	800f0ea <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f0b2:	2009      	movs	r0, #9
 800f0b4:	f7ff ff46 	bl	800ef44 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f0b8:	2001      	movs	r0, #1
 800f0ba:	f7fd fcd7 	bl	800ca6c <memp_malloc>
 800f0be:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d111      	bne.n	800f0ea <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f0c6:	2008      	movs	r0, #8
 800f0c8:	f7ff ff3c 	bl	800ef44 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f0cc:	2001      	movs	r0, #1
 800f0ce:	f7fd fccd 	bl	800ca6c <memp_malloc>
 800f0d2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d107      	bne.n	800f0ea <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f0da:	79fb      	ldrb	r3, [r7, #7]
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f7ff fee3 	bl	800eea8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f0e2:	2001      	movs	r0, #1
 800f0e4:	f7fd fcc2 	bl	800ca6c <memp_malloc>
 800f0e8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d03f      	beq.n	800f170 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f0f0:	229c      	movs	r2, #156	@ 0x9c
 800f0f2:	2100      	movs	r1, #0
 800f0f4:	68f8      	ldr	r0, [r7, #12]
 800f0f6:	f007 f846 	bl	8016186 <memset>
    pcb->prio = prio;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	79fa      	ldrb	r2, [r7, #7]
 800f0fe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800f106:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800f110:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	22ff      	movs	r2, #255	@ 0xff
 800f11e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f126:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	2206      	movs	r2, #6
 800f12c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2206      	movs	r2, #6
 800f134:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f13c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	2201      	movs	r2, #1
 800f142:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800f146:	4b0d      	ldr	r3, [pc, #52]	@ (800f17c <tcp_alloc+0xf8>)
 800f148:	681a      	ldr	r2, [r3, #0]
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f14e:	4b0c      	ldr	r3, [pc, #48]	@ (800f180 <tcp_alloc+0xfc>)
 800f150:	781a      	ldrb	r2, [r3, #0]
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800f15c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	4a08      	ldr	r2, [pc, #32]	@ (800f184 <tcp_alloc+0x100>)
 800f164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	4a07      	ldr	r2, [pc, #28]	@ (800f188 <tcp_alloc+0x104>)
 800f16c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f170:	68fb      	ldr	r3, [r7, #12]
}
 800f172:	4618      	mov	r0, r3
 800f174:	3710      	adds	r7, #16
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	2400c9cc 	.word	0x2400c9cc
 800f180:	2400c9e2 	.word	0x2400c9e2
 800f184:	0800ee3d 	.word	0x0800ee3d
 800f188:	006ddd00 	.word	0x006ddd00

0800f18c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b082      	sub	sp, #8
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d107      	bne.n	800f1aa <tcp_pcb_purge+0x1e>
 800f19a:	4b21      	ldr	r3, [pc, #132]	@ (800f220 <tcp_pcb_purge+0x94>)
 800f19c:	f640 0251 	movw	r2, #2129	@ 0x851
 800f1a0:	4920      	ldr	r1, [pc, #128]	@ (800f224 <tcp_pcb_purge+0x98>)
 800f1a2:	4821      	ldr	r0, [pc, #132]	@ (800f228 <tcp_pcb_purge+0x9c>)
 800f1a4:	f006 ff8a 	bl	80160bc <iprintf>
 800f1a8:	e037      	b.n	800f21a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	7d1b      	ldrb	r3, [r3, #20]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d033      	beq.n	800f21a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f1b6:	2b0a      	cmp	r3, #10
 800f1b8:	d02f      	beq.n	800f21a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	d02b      	beq.n	800f21a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d007      	beq.n	800f1da <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7fe fb6a 	bl	800d8a8 <pbuf_free>
      pcb->refused_data = NULL;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d002      	beq.n	800f1e8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f000 f986 	bl	800f4f4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f1ee:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7ff fdc7 	bl	800ed88 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7ff fdc2 	bl	800ed88 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2200      	movs	r2, #0
 800f208:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	2200      	movs	r2, #0
 800f216:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f21a:	3708      	adds	r7, #8
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}
 800f220:	08018190 	.word	0x08018190
 800f224:	080187dc 	.word	0x080187dc
 800f228:	080181d4 	.word	0x080181d4

0800f22c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b084      	sub	sp, #16
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d106      	bne.n	800f24a <tcp_pcb_remove+0x1e>
 800f23c:	4b3e      	ldr	r3, [pc, #248]	@ (800f338 <tcp_pcb_remove+0x10c>)
 800f23e:	f640 0283 	movw	r2, #2179	@ 0x883
 800f242:	493e      	ldr	r1, [pc, #248]	@ (800f33c <tcp_pcb_remove+0x110>)
 800f244:	483e      	ldr	r0, [pc, #248]	@ (800f340 <tcp_pcb_remove+0x114>)
 800f246:	f006 ff39 	bl	80160bc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d106      	bne.n	800f25e <tcp_pcb_remove+0x32>
 800f250:	4b39      	ldr	r3, [pc, #228]	@ (800f338 <tcp_pcb_remove+0x10c>)
 800f252:	f640 0284 	movw	r2, #2180	@ 0x884
 800f256:	493b      	ldr	r1, [pc, #236]	@ (800f344 <tcp_pcb_remove+0x118>)
 800f258:	4839      	ldr	r0, [pc, #228]	@ (800f340 <tcp_pcb_remove+0x114>)
 800f25a:	f006 ff2f 	bl	80160bc <iprintf>

  TCP_RMV(pcblist, pcb);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	683a      	ldr	r2, [r7, #0]
 800f264:	429a      	cmp	r2, r3
 800f266:	d105      	bne.n	800f274 <tcp_pcb_remove+0x48>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	68da      	ldr	r2, [r3, #12]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	601a      	str	r2, [r3, #0]
 800f272:	e013      	b.n	800f29c <tcp_pcb_remove+0x70>
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	60fb      	str	r3, [r7, #12]
 800f27a:	e00c      	b.n	800f296 <tcp_pcb_remove+0x6a>
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	68db      	ldr	r3, [r3, #12]
 800f280:	683a      	ldr	r2, [r7, #0]
 800f282:	429a      	cmp	r2, r3
 800f284:	d104      	bne.n	800f290 <tcp_pcb_remove+0x64>
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	68da      	ldr	r2, [r3, #12]
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	60da      	str	r2, [r3, #12]
 800f28e:	e005      	b.n	800f29c <tcp_pcb_remove+0x70>
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	68db      	ldr	r3, [r3, #12]
 800f294:	60fb      	str	r3, [r7, #12]
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d1ef      	bne.n	800f27c <tcp_pcb_remove+0x50>
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	2200      	movs	r2, #0
 800f2a0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f2a2:	6838      	ldr	r0, [r7, #0]
 800f2a4:	f7ff ff72 	bl	800f18c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	7d1b      	ldrb	r3, [r3, #20]
 800f2ac:	2b0a      	cmp	r3, #10
 800f2ae:	d013      	beq.n	800f2d8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d00f      	beq.n	800f2d8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	8b5b      	ldrh	r3, [r3, #26]
 800f2bc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d009      	beq.n	800f2d8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	8b5b      	ldrh	r3, [r3, #26]
 800f2c8:	f043 0302 	orr.w	r3, r3, #2
 800f2cc:	b29a      	uxth	r2, r3
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f2d2:	6838      	ldr	r0, [r7, #0]
 800f2d4:	f002 ff6a 	bl	80121ac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	7d1b      	ldrb	r3, [r3, #20]
 800f2dc:	2b01      	cmp	r3, #1
 800f2de:	d020      	beq.n	800f322 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d006      	beq.n	800f2f6 <tcp_pcb_remove+0xca>
 800f2e8:	4b13      	ldr	r3, [pc, #76]	@ (800f338 <tcp_pcb_remove+0x10c>)
 800f2ea:	f640 0293 	movw	r2, #2195	@ 0x893
 800f2ee:	4916      	ldr	r1, [pc, #88]	@ (800f348 <tcp_pcb_remove+0x11c>)
 800f2f0:	4813      	ldr	r0, [pc, #76]	@ (800f340 <tcp_pcb_remove+0x114>)
 800f2f2:	f006 fee3 	bl	80160bc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d006      	beq.n	800f30c <tcp_pcb_remove+0xe0>
 800f2fe:	4b0e      	ldr	r3, [pc, #56]	@ (800f338 <tcp_pcb_remove+0x10c>)
 800f300:	f640 0294 	movw	r2, #2196	@ 0x894
 800f304:	4911      	ldr	r1, [pc, #68]	@ (800f34c <tcp_pcb_remove+0x120>)
 800f306:	480e      	ldr	r0, [pc, #56]	@ (800f340 <tcp_pcb_remove+0x114>)
 800f308:	f006 fed8 	bl	80160bc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f310:	2b00      	cmp	r3, #0
 800f312:	d006      	beq.n	800f322 <tcp_pcb_remove+0xf6>
 800f314:	4b08      	ldr	r3, [pc, #32]	@ (800f338 <tcp_pcb_remove+0x10c>)
 800f316:	f640 0296 	movw	r2, #2198	@ 0x896
 800f31a:	490d      	ldr	r1, [pc, #52]	@ (800f350 <tcp_pcb_remove+0x124>)
 800f31c:	4808      	ldr	r0, [pc, #32]	@ (800f340 <tcp_pcb_remove+0x114>)
 800f31e:	f006 fecd 	bl	80160bc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	2200      	movs	r2, #0
 800f326:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	2200      	movs	r2, #0
 800f32c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f32e:	bf00      	nop
 800f330:	3710      	adds	r7, #16
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	08018190 	.word	0x08018190
 800f33c:	080187f8 	.word	0x080187f8
 800f340:	080181d4 	.word	0x080181d4
 800f344:	08018814 	.word	0x08018814
 800f348:	08018834 	.word	0x08018834
 800f34c:	0801884c 	.word	0x0801884c
 800f350:	08018868 	.word	0x08018868

0800f354 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b082      	sub	sp, #8
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d106      	bne.n	800f370 <tcp_next_iss+0x1c>
 800f362:	4b0a      	ldr	r3, [pc, #40]	@ (800f38c <tcp_next_iss+0x38>)
 800f364:	f640 02af 	movw	r2, #2223	@ 0x8af
 800f368:	4909      	ldr	r1, [pc, #36]	@ (800f390 <tcp_next_iss+0x3c>)
 800f36a:	480a      	ldr	r0, [pc, #40]	@ (800f394 <tcp_next_iss+0x40>)
 800f36c:	f006 fea6 	bl	80160bc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f370:	4b09      	ldr	r3, [pc, #36]	@ (800f398 <tcp_next_iss+0x44>)
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	4b09      	ldr	r3, [pc, #36]	@ (800f39c <tcp_next_iss+0x48>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	4413      	add	r3, r2
 800f37a:	4a07      	ldr	r2, [pc, #28]	@ (800f398 <tcp_next_iss+0x44>)
 800f37c:	6013      	str	r3, [r2, #0]
  return iss;
 800f37e:	4b06      	ldr	r3, [pc, #24]	@ (800f398 <tcp_next_iss+0x44>)
 800f380:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f382:	4618      	mov	r0, r3
 800f384:	3708      	adds	r7, #8
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	08018190 	.word	0x08018190
 800f390:	08018880 	.word	0x08018880
 800f394:	080181d4 	.word	0x080181d4
 800f398:	2400002c 	.word	0x2400002c
 800f39c:	2400c9cc 	.word	0x2400c9cc

0800f3a0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b086      	sub	sp, #24
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	60b9      	str	r1, [r7, #8]
 800f3aa:	607a      	str	r2, [r7, #4]
 800f3ac:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d106      	bne.n	800f3c2 <tcp_eff_send_mss_netif+0x22>
 800f3b4:	4b14      	ldr	r3, [pc, #80]	@ (800f408 <tcp_eff_send_mss_netif+0x68>)
 800f3b6:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800f3ba:	4914      	ldr	r1, [pc, #80]	@ (800f40c <tcp_eff_send_mss_netif+0x6c>)
 800f3bc:	4814      	ldr	r0, [pc, #80]	@ (800f410 <tcp_eff_send_mss_netif+0x70>)
 800f3be:	f006 fe7d 	bl	80160bc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d101      	bne.n	800f3cc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f3c8:	89fb      	ldrh	r3, [r7, #14]
 800f3ca:	e019      	b.n	800f400 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f3d0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f3d2:	8afb      	ldrh	r3, [r7, #22]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d012      	beq.n	800f3fe <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f3d8:	2328      	movs	r3, #40	@ 0x28
 800f3da:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f3dc:	8afa      	ldrh	r2, [r7, #22]
 800f3de:	8abb      	ldrh	r3, [r7, #20]
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d904      	bls.n	800f3ee <tcp_eff_send_mss_netif+0x4e>
 800f3e4:	8afa      	ldrh	r2, [r7, #22]
 800f3e6:	8abb      	ldrh	r3, [r7, #20]
 800f3e8:	1ad3      	subs	r3, r2, r3
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	e000      	b.n	800f3f0 <tcp_eff_send_mss_netif+0x50>
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f3f2:	8a7a      	ldrh	r2, [r7, #18]
 800f3f4:	89fb      	ldrh	r3, [r7, #14]
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	bf28      	it	cs
 800f3fa:	4613      	movcs	r3, r2
 800f3fc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f3fe:	89fb      	ldrh	r3, [r7, #14]
}
 800f400:	4618      	mov	r0, r3
 800f402:	3718      	adds	r7, #24
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	08018190 	.word	0x08018190
 800f40c:	0801889c 	.word	0x0801889c
 800f410:	080181d4 	.word	0x080181d4

0800f414 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b084      	sub	sp, #16
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d119      	bne.n	800f45c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f428:	4b10      	ldr	r3, [pc, #64]	@ (800f46c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f42a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800f42e:	4910      	ldr	r1, [pc, #64]	@ (800f470 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f430:	4810      	ldr	r0, [pc, #64]	@ (800f474 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f432:	f006 fe43 	bl	80160bc <iprintf>

  while (pcb != NULL) {
 800f436:	e011      	b.n	800f45c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681a      	ldr	r2, [r3, #0]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	429a      	cmp	r2, r3
 800f442:	d108      	bne.n	800f456 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	68db      	ldr	r3, [r3, #12]
 800f448:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f44a:	68f8      	ldr	r0, [r7, #12]
 800f44c:	f7fe ffc0 	bl	800e3d0 <tcp_abort>
      pcb = next;
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	60fb      	str	r3, [r7, #12]
 800f454:	e002      	b.n	800f45c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	68db      	ldr	r3, [r3, #12]
 800f45a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d1ea      	bne.n	800f438 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f462:	bf00      	nop
 800f464:	bf00      	nop
 800f466:	3710      	adds	r7, #16
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	08018190 	.word	0x08018190
 800f470:	080188c4 	.word	0x080188c4
 800f474:	080181d4 	.word	0x080181d4

0800f478 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b084      	sub	sp, #16
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
 800f480:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d02a      	beq.n	800f4de <tcp_netif_ip_addr_changed+0x66>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d026      	beq.n	800f4de <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f490:	4b15      	ldr	r3, [pc, #84]	@ (800f4e8 <tcp_netif_ip_addr_changed+0x70>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4619      	mov	r1, r3
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f7ff ffbc 	bl	800f414 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f49c:	4b13      	ldr	r3, [pc, #76]	@ (800f4ec <tcp_netif_ip_addr_changed+0x74>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	4619      	mov	r1, r3
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f7ff ffb6 	bl	800f414 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d017      	beq.n	800f4de <tcp_netif_ip_addr_changed+0x66>
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d013      	beq.n	800f4de <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4b6:	4b0e      	ldr	r3, [pc, #56]	@ (800f4f0 <tcp_netif_ip_addr_changed+0x78>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	60fb      	str	r3, [r7, #12]
 800f4bc:	e00c      	b.n	800f4d8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d103      	bne.n	800f4d2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	681a      	ldr	r2, [r3, #0]
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	68db      	ldr	r3, [r3, #12]
 800f4d6:	60fb      	str	r3, [r7, #12]
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d1ef      	bne.n	800f4be <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f4de:	bf00      	nop
 800f4e0:	3710      	adds	r7, #16
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}
 800f4e6:	bf00      	nop
 800f4e8:	2400c9d8 	.word	0x2400c9d8
 800f4ec:	2400c9d0 	.word	0x2400c9d0
 800f4f0:	2400c9d4 	.word	0x2400c9d4

0800f4f4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b082      	sub	sp, #8
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f500:	2b00      	cmp	r3, #0
 800f502:	d007      	beq.n	800f514 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f508:	4618      	mov	r0, r3
 800f50a:	f7ff fc3d 	bl	800ed88 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2200      	movs	r2, #0
 800f512:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f514:	bf00      	nop
 800f516:	3708      	adds	r7, #8
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f51c:	b590      	push	{r4, r7, lr}
 800f51e:	b08d      	sub	sp, #52	@ 0x34
 800f520:	af04      	add	r7, sp, #16
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d105      	bne.n	800f538 <tcp_input+0x1c>
 800f52c:	4b9b      	ldr	r3, [pc, #620]	@ (800f79c <tcp_input+0x280>)
 800f52e:	2283      	movs	r2, #131	@ 0x83
 800f530:	499b      	ldr	r1, [pc, #620]	@ (800f7a0 <tcp_input+0x284>)
 800f532:	489c      	ldr	r0, [pc, #624]	@ (800f7a4 <tcp_input+0x288>)
 800f534:	f006 fdc2 	bl	80160bc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	4a9a      	ldr	r2, [pc, #616]	@ (800f7a8 <tcp_input+0x28c>)
 800f53e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	895b      	ldrh	r3, [r3, #10]
 800f544:	2b13      	cmp	r3, #19
 800f546:	f240 83d1 	bls.w	800fcec <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f54a:	4b98      	ldr	r3, [pc, #608]	@ (800f7ac <tcp_input+0x290>)
 800f54c:	695b      	ldr	r3, [r3, #20]
 800f54e:	4a97      	ldr	r2, [pc, #604]	@ (800f7ac <tcp_input+0x290>)
 800f550:	6812      	ldr	r2, [r2, #0]
 800f552:	4611      	mov	r1, r2
 800f554:	4618      	mov	r0, r3
 800f556:	f005 fc69 	bl	8014e2c <ip4_addr_isbroadcast_u32>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	f040 83c7 	bne.w	800fcf0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f562:	4b92      	ldr	r3, [pc, #584]	@ (800f7ac <tcp_input+0x290>)
 800f564:	695b      	ldr	r3, [r3, #20]
 800f566:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f56a:	2be0      	cmp	r3, #224	@ 0xe0
 800f56c:	f000 83c0 	beq.w	800fcf0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f570:	4b8d      	ldr	r3, [pc, #564]	@ (800f7a8 <tcp_input+0x28c>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	899b      	ldrh	r3, [r3, #12]
 800f576:	b29b      	uxth	r3, r3
 800f578:	4618      	mov	r0, r3
 800f57a:	f7fc fcd7 	bl	800bf2c <lwip_htons>
 800f57e:	4603      	mov	r3, r0
 800f580:	0b1b      	lsrs	r3, r3, #12
 800f582:	b29b      	uxth	r3, r3
 800f584:	b2db      	uxtb	r3, r3
 800f586:	009b      	lsls	r3, r3, #2
 800f588:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f58a:	7cbb      	ldrb	r3, [r7, #18]
 800f58c:	2b13      	cmp	r3, #19
 800f58e:	f240 83b1 	bls.w	800fcf4 <tcp_input+0x7d8>
 800f592:	7cbb      	ldrb	r3, [r7, #18]
 800f594:	b29a      	uxth	r2, r3
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	891b      	ldrh	r3, [r3, #8]
 800f59a:	429a      	cmp	r2, r3
 800f59c:	f200 83aa 	bhi.w	800fcf4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f5a0:	7cbb      	ldrb	r3, [r7, #18]
 800f5a2:	b29b      	uxth	r3, r3
 800f5a4:	3b14      	subs	r3, #20
 800f5a6:	b29a      	uxth	r2, r3
 800f5a8:	4b81      	ldr	r3, [pc, #516]	@ (800f7b0 <tcp_input+0x294>)
 800f5aa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f5ac:	4b81      	ldr	r3, [pc, #516]	@ (800f7b4 <tcp_input+0x298>)
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	895a      	ldrh	r2, [r3, #10]
 800f5b6:	7cbb      	ldrb	r3, [r7, #18]
 800f5b8:	b29b      	uxth	r3, r3
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d309      	bcc.n	800f5d2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f5be:	4b7c      	ldr	r3, [pc, #496]	@ (800f7b0 <tcp_input+0x294>)
 800f5c0:	881a      	ldrh	r2, [r3, #0]
 800f5c2:	4b7d      	ldr	r3, [pc, #500]	@ (800f7b8 <tcp_input+0x29c>)
 800f5c4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f5c6:	7cbb      	ldrb	r3, [r7, #18]
 800f5c8:	4619      	mov	r1, r3
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f7fe f8e6 	bl	800d79c <pbuf_remove_header>
 800f5d0:	e04e      	b.n	800f670 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d105      	bne.n	800f5e6 <tcp_input+0xca>
 800f5da:	4b70      	ldr	r3, [pc, #448]	@ (800f79c <tcp_input+0x280>)
 800f5dc:	22c2      	movs	r2, #194	@ 0xc2
 800f5de:	4977      	ldr	r1, [pc, #476]	@ (800f7bc <tcp_input+0x2a0>)
 800f5e0:	4870      	ldr	r0, [pc, #448]	@ (800f7a4 <tcp_input+0x288>)
 800f5e2:	f006 fd6b 	bl	80160bc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f5e6:	2114      	movs	r1, #20
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f7fe f8d7 	bl	800d79c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	895a      	ldrh	r2, [r3, #10]
 800f5f2:	4b71      	ldr	r3, [pc, #452]	@ (800f7b8 <tcp_input+0x29c>)
 800f5f4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f5f6:	4b6e      	ldr	r3, [pc, #440]	@ (800f7b0 <tcp_input+0x294>)
 800f5f8:	881a      	ldrh	r2, [r3, #0]
 800f5fa:	4b6f      	ldr	r3, [pc, #444]	@ (800f7b8 <tcp_input+0x29c>)
 800f5fc:	881b      	ldrh	r3, [r3, #0]
 800f5fe:	1ad3      	subs	r3, r2, r3
 800f600:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f602:	4b6d      	ldr	r3, [pc, #436]	@ (800f7b8 <tcp_input+0x29c>)
 800f604:	881b      	ldrh	r3, [r3, #0]
 800f606:	4619      	mov	r1, r3
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f7fe f8c7 	bl	800d79c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	895b      	ldrh	r3, [r3, #10]
 800f614:	8a3a      	ldrh	r2, [r7, #16]
 800f616:	429a      	cmp	r2, r3
 800f618:	f200 836e 	bhi.w	800fcf8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	685b      	ldr	r3, [r3, #4]
 800f622:	4a64      	ldr	r2, [pc, #400]	@ (800f7b4 <tcp_input+0x298>)
 800f624:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	8a3a      	ldrh	r2, [r7, #16]
 800f62c:	4611      	mov	r1, r2
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fe f8b4 	bl	800d79c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	891a      	ldrh	r2, [r3, #8]
 800f638:	8a3b      	ldrh	r3, [r7, #16]
 800f63a:	1ad3      	subs	r3, r2, r3
 800f63c:	b29a      	uxth	r2, r3
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	895b      	ldrh	r3, [r3, #10]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d005      	beq.n	800f656 <tcp_input+0x13a>
 800f64a:	4b54      	ldr	r3, [pc, #336]	@ (800f79c <tcp_input+0x280>)
 800f64c:	22df      	movs	r2, #223	@ 0xdf
 800f64e:	495c      	ldr	r1, [pc, #368]	@ (800f7c0 <tcp_input+0x2a4>)
 800f650:	4854      	ldr	r0, [pc, #336]	@ (800f7a4 <tcp_input+0x288>)
 800f652:	f006 fd33 	bl	80160bc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	891a      	ldrh	r2, [r3, #8]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	891b      	ldrh	r3, [r3, #8]
 800f660:	429a      	cmp	r2, r3
 800f662:	d005      	beq.n	800f670 <tcp_input+0x154>
 800f664:	4b4d      	ldr	r3, [pc, #308]	@ (800f79c <tcp_input+0x280>)
 800f666:	22e0      	movs	r2, #224	@ 0xe0
 800f668:	4956      	ldr	r1, [pc, #344]	@ (800f7c4 <tcp_input+0x2a8>)
 800f66a:	484e      	ldr	r0, [pc, #312]	@ (800f7a4 <tcp_input+0x288>)
 800f66c:	f006 fd26 	bl	80160bc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f670:	4b4d      	ldr	r3, [pc, #308]	@ (800f7a8 <tcp_input+0x28c>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	881b      	ldrh	r3, [r3, #0]
 800f676:	b29b      	uxth	r3, r3
 800f678:	4a4b      	ldr	r2, [pc, #300]	@ (800f7a8 <tcp_input+0x28c>)
 800f67a:	6814      	ldr	r4, [r2, #0]
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7fc fc55 	bl	800bf2c <lwip_htons>
 800f682:	4603      	mov	r3, r0
 800f684:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f686:	4b48      	ldr	r3, [pc, #288]	@ (800f7a8 <tcp_input+0x28c>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	885b      	ldrh	r3, [r3, #2]
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	4a46      	ldr	r2, [pc, #280]	@ (800f7a8 <tcp_input+0x28c>)
 800f690:	6814      	ldr	r4, [r2, #0]
 800f692:	4618      	mov	r0, r3
 800f694:	f7fc fc4a 	bl	800bf2c <lwip_htons>
 800f698:	4603      	mov	r3, r0
 800f69a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f69c:	4b42      	ldr	r3, [pc, #264]	@ (800f7a8 <tcp_input+0x28c>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	685b      	ldr	r3, [r3, #4]
 800f6a2:	4a41      	ldr	r2, [pc, #260]	@ (800f7a8 <tcp_input+0x28c>)
 800f6a4:	6814      	ldr	r4, [r2, #0]
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fc fc55 	bl	800bf56 <lwip_htonl>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	6063      	str	r3, [r4, #4]
 800f6b0:	6863      	ldr	r3, [r4, #4]
 800f6b2:	4a45      	ldr	r2, [pc, #276]	@ (800f7c8 <tcp_input+0x2ac>)
 800f6b4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f6b6:	4b3c      	ldr	r3, [pc, #240]	@ (800f7a8 <tcp_input+0x28c>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	689b      	ldr	r3, [r3, #8]
 800f6bc:	4a3a      	ldr	r2, [pc, #232]	@ (800f7a8 <tcp_input+0x28c>)
 800f6be:	6814      	ldr	r4, [r2, #0]
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7fc fc48 	bl	800bf56 <lwip_htonl>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	60a3      	str	r3, [r4, #8]
 800f6ca:	68a3      	ldr	r3, [r4, #8]
 800f6cc:	4a3f      	ldr	r2, [pc, #252]	@ (800f7cc <tcp_input+0x2b0>)
 800f6ce:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f6d0:	4b35      	ldr	r3, [pc, #212]	@ (800f7a8 <tcp_input+0x28c>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	89db      	ldrh	r3, [r3, #14]
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	4a33      	ldr	r2, [pc, #204]	@ (800f7a8 <tcp_input+0x28c>)
 800f6da:	6814      	ldr	r4, [r2, #0]
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7fc fc25 	bl	800bf2c <lwip_htons>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f6e6:	4b30      	ldr	r3, [pc, #192]	@ (800f7a8 <tcp_input+0x28c>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	899b      	ldrh	r3, [r3, #12]
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7fc fc1c 	bl	800bf2c <lwip_htons>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f6fc:	b2da      	uxtb	r2, r3
 800f6fe:	4b34      	ldr	r3, [pc, #208]	@ (800f7d0 <tcp_input+0x2b4>)
 800f700:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	891a      	ldrh	r2, [r3, #8]
 800f706:	4b33      	ldr	r3, [pc, #204]	@ (800f7d4 <tcp_input+0x2b8>)
 800f708:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f70a:	4b31      	ldr	r3, [pc, #196]	@ (800f7d0 <tcp_input+0x2b4>)
 800f70c:	781b      	ldrb	r3, [r3, #0]
 800f70e:	f003 0303 	and.w	r3, r3, #3
 800f712:	2b00      	cmp	r3, #0
 800f714:	d00c      	beq.n	800f730 <tcp_input+0x214>
    tcplen++;
 800f716:	4b2f      	ldr	r3, [pc, #188]	@ (800f7d4 <tcp_input+0x2b8>)
 800f718:	881b      	ldrh	r3, [r3, #0]
 800f71a:	3301      	adds	r3, #1
 800f71c:	b29a      	uxth	r2, r3
 800f71e:	4b2d      	ldr	r3, [pc, #180]	@ (800f7d4 <tcp_input+0x2b8>)
 800f720:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	891a      	ldrh	r2, [r3, #8]
 800f726:	4b2b      	ldr	r3, [pc, #172]	@ (800f7d4 <tcp_input+0x2b8>)
 800f728:	881b      	ldrh	r3, [r3, #0]
 800f72a:	429a      	cmp	r2, r3
 800f72c:	f200 82e6 	bhi.w	800fcfc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f730:	2300      	movs	r3, #0
 800f732:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f734:	4b28      	ldr	r3, [pc, #160]	@ (800f7d8 <tcp_input+0x2bc>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	61fb      	str	r3, [r7, #28]
 800f73a:	e09d      	b.n	800f878 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f73c:	69fb      	ldr	r3, [r7, #28]
 800f73e:	7d1b      	ldrb	r3, [r3, #20]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d105      	bne.n	800f750 <tcp_input+0x234>
 800f744:	4b15      	ldr	r3, [pc, #84]	@ (800f79c <tcp_input+0x280>)
 800f746:	22fb      	movs	r2, #251	@ 0xfb
 800f748:	4924      	ldr	r1, [pc, #144]	@ (800f7dc <tcp_input+0x2c0>)
 800f74a:	4816      	ldr	r0, [pc, #88]	@ (800f7a4 <tcp_input+0x288>)
 800f74c:	f006 fcb6 	bl	80160bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f750:	69fb      	ldr	r3, [r7, #28]
 800f752:	7d1b      	ldrb	r3, [r3, #20]
 800f754:	2b0a      	cmp	r3, #10
 800f756:	d105      	bne.n	800f764 <tcp_input+0x248>
 800f758:	4b10      	ldr	r3, [pc, #64]	@ (800f79c <tcp_input+0x280>)
 800f75a:	22fc      	movs	r2, #252	@ 0xfc
 800f75c:	4920      	ldr	r1, [pc, #128]	@ (800f7e0 <tcp_input+0x2c4>)
 800f75e:	4811      	ldr	r0, [pc, #68]	@ (800f7a4 <tcp_input+0x288>)
 800f760:	f006 fcac 	bl	80160bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	7d1b      	ldrb	r3, [r3, #20]
 800f768:	2b01      	cmp	r3, #1
 800f76a:	d105      	bne.n	800f778 <tcp_input+0x25c>
 800f76c:	4b0b      	ldr	r3, [pc, #44]	@ (800f79c <tcp_input+0x280>)
 800f76e:	22fd      	movs	r2, #253	@ 0xfd
 800f770:	491c      	ldr	r1, [pc, #112]	@ (800f7e4 <tcp_input+0x2c8>)
 800f772:	480c      	ldr	r0, [pc, #48]	@ (800f7a4 <tcp_input+0x288>)
 800f774:	f006 fca2 	bl	80160bc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	7a1b      	ldrb	r3, [r3, #8]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d033      	beq.n	800f7e8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	7a1a      	ldrb	r2, [r3, #8]
 800f784:	4b09      	ldr	r3, [pc, #36]	@ (800f7ac <tcp_input+0x290>)
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f78c:	3301      	adds	r3, #1
 800f78e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f790:	429a      	cmp	r2, r3
 800f792:	d029      	beq.n	800f7e8 <tcp_input+0x2cc>
      prev = pcb;
 800f794:	69fb      	ldr	r3, [r7, #28]
 800f796:	61bb      	str	r3, [r7, #24]
      continue;
 800f798:	e06b      	b.n	800f872 <tcp_input+0x356>
 800f79a:	bf00      	nop
 800f79c:	080188f8 	.word	0x080188f8
 800f7a0:	0801892c 	.word	0x0801892c
 800f7a4:	08018944 	.word	0x08018944
 800f7a8:	2400c9f4 	.word	0x2400c9f4
 800f7ac:	24005f0c 	.word	0x24005f0c
 800f7b0:	2400c9f8 	.word	0x2400c9f8
 800f7b4:	2400c9fc 	.word	0x2400c9fc
 800f7b8:	2400c9fa 	.word	0x2400c9fa
 800f7bc:	0801896c 	.word	0x0801896c
 800f7c0:	0801897c 	.word	0x0801897c
 800f7c4:	08018988 	.word	0x08018988
 800f7c8:	2400ca04 	.word	0x2400ca04
 800f7cc:	2400ca08 	.word	0x2400ca08
 800f7d0:	2400ca10 	.word	0x2400ca10
 800f7d4:	2400ca0e 	.word	0x2400ca0e
 800f7d8:	2400c9d8 	.word	0x2400c9d8
 800f7dc:	080189a8 	.word	0x080189a8
 800f7e0:	080189d0 	.word	0x080189d0
 800f7e4:	080189fc 	.word	0x080189fc
    }

    if (pcb->remote_port == tcphdr->src &&
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	8b1a      	ldrh	r2, [r3, #24]
 800f7ec:	4b72      	ldr	r3, [pc, #456]	@ (800f9b8 <tcp_input+0x49c>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	881b      	ldrh	r3, [r3, #0]
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d13a      	bne.n	800f86e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f7f8:	69fb      	ldr	r3, [r7, #28]
 800f7fa:	8ada      	ldrh	r2, [r3, #22]
 800f7fc:	4b6e      	ldr	r3, [pc, #440]	@ (800f9b8 <tcp_input+0x49c>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	885b      	ldrh	r3, [r3, #2]
 800f802:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f804:	429a      	cmp	r2, r3
 800f806:	d132      	bne.n	800f86e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f808:	69fb      	ldr	r3, [r7, #28]
 800f80a:	685a      	ldr	r2, [r3, #4]
 800f80c:	4b6b      	ldr	r3, [pc, #428]	@ (800f9bc <tcp_input+0x4a0>)
 800f80e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f810:	429a      	cmp	r2, r3
 800f812:	d12c      	bne.n	800f86e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f814:	69fb      	ldr	r3, [r7, #28]
 800f816:	681a      	ldr	r2, [r3, #0]
 800f818:	4b68      	ldr	r3, [pc, #416]	@ (800f9bc <tcp_input+0x4a0>)
 800f81a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d126      	bne.n	800f86e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	68db      	ldr	r3, [r3, #12]
 800f824:	69fa      	ldr	r2, [r7, #28]
 800f826:	429a      	cmp	r2, r3
 800f828:	d106      	bne.n	800f838 <tcp_input+0x31c>
 800f82a:	4b65      	ldr	r3, [pc, #404]	@ (800f9c0 <tcp_input+0x4a4>)
 800f82c:	f240 120d 	movw	r2, #269	@ 0x10d
 800f830:	4964      	ldr	r1, [pc, #400]	@ (800f9c4 <tcp_input+0x4a8>)
 800f832:	4865      	ldr	r0, [pc, #404]	@ (800f9c8 <tcp_input+0x4ac>)
 800f834:	f006 fc42 	bl	80160bc <iprintf>
      if (prev != NULL) {
 800f838:	69bb      	ldr	r3, [r7, #24]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d00a      	beq.n	800f854 <tcp_input+0x338>
        prev->next = pcb->next;
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	68da      	ldr	r2, [r3, #12]
 800f842:	69bb      	ldr	r3, [r7, #24]
 800f844:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f846:	4b61      	ldr	r3, [pc, #388]	@ (800f9cc <tcp_input+0x4b0>)
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	69fb      	ldr	r3, [r7, #28]
 800f84c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f84e:	4a5f      	ldr	r2, [pc, #380]	@ (800f9cc <tcp_input+0x4b0>)
 800f850:	69fb      	ldr	r3, [r7, #28]
 800f852:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f854:	69fb      	ldr	r3, [r7, #28]
 800f856:	68db      	ldr	r3, [r3, #12]
 800f858:	69fa      	ldr	r2, [r7, #28]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d111      	bne.n	800f882 <tcp_input+0x366>
 800f85e:	4b58      	ldr	r3, [pc, #352]	@ (800f9c0 <tcp_input+0x4a4>)
 800f860:	f240 1215 	movw	r2, #277	@ 0x115
 800f864:	495a      	ldr	r1, [pc, #360]	@ (800f9d0 <tcp_input+0x4b4>)
 800f866:	4858      	ldr	r0, [pc, #352]	@ (800f9c8 <tcp_input+0x4ac>)
 800f868:	f006 fc28 	bl	80160bc <iprintf>
      break;
 800f86c:	e009      	b.n	800f882 <tcp_input+0x366>
    }
    prev = pcb;
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	68db      	ldr	r3, [r3, #12]
 800f876:	61fb      	str	r3, [r7, #28]
 800f878:	69fb      	ldr	r3, [r7, #28]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	f47f af5e 	bne.w	800f73c <tcp_input+0x220>
 800f880:	e000      	b.n	800f884 <tcp_input+0x368>
      break;
 800f882:	bf00      	nop
  }

  if (pcb == NULL) {
 800f884:	69fb      	ldr	r3, [r7, #28]
 800f886:	2b00      	cmp	r3, #0
 800f888:	f040 80aa 	bne.w	800f9e0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f88c:	4b51      	ldr	r3, [pc, #324]	@ (800f9d4 <tcp_input+0x4b8>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	61fb      	str	r3, [r7, #28]
 800f892:	e03f      	b.n	800f914 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	7d1b      	ldrb	r3, [r3, #20]
 800f898:	2b0a      	cmp	r3, #10
 800f89a:	d006      	beq.n	800f8aa <tcp_input+0x38e>
 800f89c:	4b48      	ldr	r3, [pc, #288]	@ (800f9c0 <tcp_input+0x4a4>)
 800f89e:	f240 121f 	movw	r2, #287	@ 0x11f
 800f8a2:	494d      	ldr	r1, [pc, #308]	@ (800f9d8 <tcp_input+0x4bc>)
 800f8a4:	4848      	ldr	r0, [pc, #288]	@ (800f9c8 <tcp_input+0x4ac>)
 800f8a6:	f006 fc09 	bl	80160bc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8aa:	69fb      	ldr	r3, [r7, #28]
 800f8ac:	7a1b      	ldrb	r3, [r3, #8]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d009      	beq.n	800f8c6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	7a1a      	ldrb	r2, [r3, #8]
 800f8b6:	4b41      	ldr	r3, [pc, #260]	@ (800f9bc <tcp_input+0x4a0>)
 800f8b8:	685b      	ldr	r3, [r3, #4]
 800f8ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f8be:	3301      	adds	r3, #1
 800f8c0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d122      	bne.n	800f90c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f8c6:	69fb      	ldr	r3, [r7, #28]
 800f8c8:	8b1a      	ldrh	r2, [r3, #24]
 800f8ca:	4b3b      	ldr	r3, [pc, #236]	@ (800f9b8 <tcp_input+0x49c>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	881b      	ldrh	r3, [r3, #0]
 800f8d0:	b29b      	uxth	r3, r3
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d11b      	bne.n	800f90e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f8d6:	69fb      	ldr	r3, [r7, #28]
 800f8d8:	8ada      	ldrh	r2, [r3, #22]
 800f8da:	4b37      	ldr	r3, [pc, #220]	@ (800f9b8 <tcp_input+0x49c>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	885b      	ldrh	r3, [r3, #2]
 800f8e0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d113      	bne.n	800f90e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8e6:	69fb      	ldr	r3, [r7, #28]
 800f8e8:	685a      	ldr	r2, [r3, #4]
 800f8ea:	4b34      	ldr	r3, [pc, #208]	@ (800f9bc <tcp_input+0x4a0>)
 800f8ec:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d10d      	bne.n	800f90e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f8f2:	69fb      	ldr	r3, [r7, #28]
 800f8f4:	681a      	ldr	r2, [r3, #0]
 800f8f6:	4b31      	ldr	r3, [pc, #196]	@ (800f9bc <tcp_input+0x4a0>)
 800f8f8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d107      	bne.n	800f90e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f8fe:	69f8      	ldr	r0, [r7, #28]
 800f900:	f000 fb56 	bl	800ffb0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f7fd ffcf 	bl	800d8a8 <pbuf_free>
        return;
 800f90a:	e1fd      	b.n	800fd08 <tcp_input+0x7ec>
        continue;
 800f90c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	68db      	ldr	r3, [r3, #12]
 800f912:	61fb      	str	r3, [r7, #28]
 800f914:	69fb      	ldr	r3, [r7, #28]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d1bc      	bne.n	800f894 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f91a:	2300      	movs	r3, #0
 800f91c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f91e:	4b2f      	ldr	r3, [pc, #188]	@ (800f9dc <tcp_input+0x4c0>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	617b      	str	r3, [r7, #20]
 800f924:	e02a      	b.n	800f97c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	7a1b      	ldrb	r3, [r3, #8]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d00c      	beq.n	800f948 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	7a1a      	ldrb	r2, [r3, #8]
 800f932:	4b22      	ldr	r3, [pc, #136]	@ (800f9bc <tcp_input+0x4a0>)
 800f934:	685b      	ldr	r3, [r3, #4]
 800f936:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f93a:	3301      	adds	r3, #1
 800f93c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f93e:	429a      	cmp	r2, r3
 800f940:	d002      	beq.n	800f948 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	61bb      	str	r3, [r7, #24]
        continue;
 800f946:	e016      	b.n	800f976 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	8ada      	ldrh	r2, [r3, #22]
 800f94c:	4b1a      	ldr	r3, [pc, #104]	@ (800f9b8 <tcp_input+0x49c>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	885b      	ldrh	r3, [r3, #2]
 800f952:	b29b      	uxth	r3, r3
 800f954:	429a      	cmp	r2, r3
 800f956:	d10c      	bne.n	800f972 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	681a      	ldr	r2, [r3, #0]
 800f95c:	4b17      	ldr	r3, [pc, #92]	@ (800f9bc <tcp_input+0x4a0>)
 800f95e:	695b      	ldr	r3, [r3, #20]
 800f960:	429a      	cmp	r2, r3
 800f962:	d00f      	beq.n	800f984 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d00d      	beq.n	800f986 <tcp_input+0x46a>
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d009      	beq.n	800f986 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	68db      	ldr	r3, [r3, #12]
 800f97a:	617b      	str	r3, [r7, #20]
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d1d1      	bne.n	800f926 <tcp_input+0x40a>
 800f982:	e000      	b.n	800f986 <tcp_input+0x46a>
            break;
 800f984:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d029      	beq.n	800f9e0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f98c:	69bb      	ldr	r3, [r7, #24]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d00a      	beq.n	800f9a8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	68da      	ldr	r2, [r3, #12]
 800f996:	69bb      	ldr	r3, [r7, #24]
 800f998:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f99a:	4b10      	ldr	r3, [pc, #64]	@ (800f9dc <tcp_input+0x4c0>)
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f9a2:	4a0e      	ldr	r2, [pc, #56]	@ (800f9dc <tcp_input+0x4c0>)
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f9a8:	6978      	ldr	r0, [r7, #20]
 800f9aa:	f000 fa03 	bl	800fdb4 <tcp_listen_input>
      }
      pbuf_free(p);
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f7fd ff7a 	bl	800d8a8 <pbuf_free>
      return;
 800f9b4:	e1a8      	b.n	800fd08 <tcp_input+0x7ec>
 800f9b6:	bf00      	nop
 800f9b8:	2400c9f4 	.word	0x2400c9f4
 800f9bc:	24005f0c 	.word	0x24005f0c
 800f9c0:	080188f8 	.word	0x080188f8
 800f9c4:	08018a24 	.word	0x08018a24
 800f9c8:	08018944 	.word	0x08018944
 800f9cc:	2400c9d8 	.word	0x2400c9d8
 800f9d0:	08018a50 	.word	0x08018a50
 800f9d4:	2400c9dc 	.word	0x2400c9dc
 800f9d8:	08018a7c 	.word	0x08018a7c
 800f9dc:	2400c9d4 	.word	0x2400c9d4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f9e0:	69fb      	ldr	r3, [r7, #28]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	f000 8158 	beq.w	800fc98 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f9e8:	4b95      	ldr	r3, [pc, #596]	@ (800fc40 <tcp_input+0x724>)
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	891a      	ldrh	r2, [r3, #8]
 800f9f2:	4b93      	ldr	r3, [pc, #588]	@ (800fc40 <tcp_input+0x724>)
 800f9f4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f9f6:	4a92      	ldr	r2, [pc, #584]	@ (800fc40 <tcp_input+0x724>)
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f9fc:	4b91      	ldr	r3, [pc, #580]	@ (800fc44 <tcp_input+0x728>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	4a8f      	ldr	r2, [pc, #572]	@ (800fc40 <tcp_input+0x724>)
 800fa02:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fa04:	4b90      	ldr	r3, [pc, #576]	@ (800fc48 <tcp_input+0x72c>)
 800fa06:	2200      	movs	r2, #0
 800fa08:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fa0a:	4b90      	ldr	r3, [pc, #576]	@ (800fc4c <tcp_input+0x730>)
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fa10:	4b8f      	ldr	r3, [pc, #572]	@ (800fc50 <tcp_input+0x734>)
 800fa12:	2200      	movs	r2, #0
 800fa14:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fa16:	4b8f      	ldr	r3, [pc, #572]	@ (800fc54 <tcp_input+0x738>)
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	f003 0308 	and.w	r3, r3, #8
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d006      	beq.n	800fa30 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	7b5b      	ldrb	r3, [r3, #13]
 800fa26:	f043 0301 	orr.w	r3, r3, #1
 800fa2a:	b2da      	uxtb	r2, r3
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fa30:	69fb      	ldr	r3, [r7, #28]
 800fa32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d017      	beq.n	800fa68 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa38:	69f8      	ldr	r0, [r7, #28]
 800fa3a:	f7ff f927 	bl	800ec8c <tcp_process_refused_data>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	f113 0f0d 	cmn.w	r3, #13
 800fa44:	d007      	beq.n	800fa56 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d00c      	beq.n	800fa68 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fa4e:	4b82      	ldr	r3, [pc, #520]	@ (800fc58 <tcp_input+0x73c>)
 800fa50:	881b      	ldrh	r3, [r3, #0]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d008      	beq.n	800fa68 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fa56:	69fb      	ldr	r3, [r7, #28]
 800fa58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	f040 80e4 	bne.w	800fc28 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fa60:	69f8      	ldr	r0, [r7, #28]
 800fa62:	f003 f9a9 	bl	8012db8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fa66:	e0df      	b.n	800fc28 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 800fa68:	4a7c      	ldr	r2, [pc, #496]	@ (800fc5c <tcp_input+0x740>)
 800fa6a:	69fb      	ldr	r3, [r7, #28]
 800fa6c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fa6e:	69f8      	ldr	r0, [r7, #28]
 800fa70:	f000 fb18 	bl	80100a4 <tcp_process>
 800fa74:	4603      	mov	r3, r0
 800fa76:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fa78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa7c:	f113 0f0d 	cmn.w	r3, #13
 800fa80:	f000 80d4 	beq.w	800fc2c <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 800fa84:	4b71      	ldr	r3, [pc, #452]	@ (800fc4c <tcp_input+0x730>)
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	f003 0308 	and.w	r3, r3, #8
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d015      	beq.n	800fabc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fa90:	69fb      	ldr	r3, [r7, #28]
 800fa92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d008      	beq.n	800faac <tcp_input+0x590>
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800faa0:	69fa      	ldr	r2, [r7, #28]
 800faa2:	6912      	ldr	r2, [r2, #16]
 800faa4:	f06f 010d 	mvn.w	r1, #13
 800faa8:	4610      	mov	r0, r2
 800faaa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800faac:	69f9      	ldr	r1, [r7, #28]
 800faae:	486c      	ldr	r0, [pc, #432]	@ (800fc60 <tcp_input+0x744>)
 800fab0:	f7ff fbbc 	bl	800f22c <tcp_pcb_remove>
        tcp_free(pcb);
 800fab4:	69f8      	ldr	r0, [r7, #28]
 800fab6:	f7fe f9a3 	bl	800de00 <tcp_free>
 800faba:	e0da      	b.n	800fc72 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800fabc:	2300      	movs	r3, #0
 800fabe:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fac0:	4b63      	ldr	r3, [pc, #396]	@ (800fc50 <tcp_input+0x734>)
 800fac2:	881b      	ldrh	r3, [r3, #0]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d01d      	beq.n	800fb04 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fac8:	4b61      	ldr	r3, [pc, #388]	@ (800fc50 <tcp_input+0x734>)
 800faca:	881b      	ldrh	r3, [r3, #0]
 800facc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800face:	69fb      	ldr	r3, [r7, #28]
 800fad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d00a      	beq.n	800faee <tcp_input+0x5d2>
 800fad8:	69fb      	ldr	r3, [r7, #28]
 800fada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fade:	69fa      	ldr	r2, [r7, #28]
 800fae0:	6910      	ldr	r0, [r2, #16]
 800fae2:	89fa      	ldrh	r2, [r7, #14]
 800fae4:	69f9      	ldr	r1, [r7, #28]
 800fae6:	4798      	blx	r3
 800fae8:	4603      	mov	r3, r0
 800faea:	74fb      	strb	r3, [r7, #19]
 800faec:	e001      	b.n	800faf2 <tcp_input+0x5d6>
 800faee:	2300      	movs	r3, #0
 800faf0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800faf2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800faf6:	f113 0f0d 	cmn.w	r3, #13
 800fafa:	f000 8099 	beq.w	800fc30 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fafe:	4b54      	ldr	r3, [pc, #336]	@ (800fc50 <tcp_input+0x734>)
 800fb00:	2200      	movs	r2, #0
 800fb02:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fb04:	69f8      	ldr	r0, [r7, #28]
 800fb06:	f000 f915 	bl	800fd34 <tcp_input_delayed_close>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	f040 8091 	bne.w	800fc34 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fb12:	4b4d      	ldr	r3, [pc, #308]	@ (800fc48 <tcp_input+0x72c>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d041      	beq.n	800fb9e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fb1a:	69fb      	ldr	r3, [r7, #28]
 800fb1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d006      	beq.n	800fb30 <tcp_input+0x614>
 800fb22:	4b50      	ldr	r3, [pc, #320]	@ (800fc64 <tcp_input+0x748>)
 800fb24:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800fb28:	494f      	ldr	r1, [pc, #316]	@ (800fc68 <tcp_input+0x74c>)
 800fb2a:	4850      	ldr	r0, [pc, #320]	@ (800fc6c <tcp_input+0x750>)
 800fb2c:	f006 fac6 	bl	80160bc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fb30:	69fb      	ldr	r3, [r7, #28]
 800fb32:	8b5b      	ldrh	r3, [r3, #26]
 800fb34:	f003 0310 	and.w	r3, r3, #16
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d008      	beq.n	800fb4e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fb3c:	4b42      	ldr	r3, [pc, #264]	@ (800fc48 <tcp_input+0x72c>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7fd feb1 	bl	800d8a8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fb46:	69f8      	ldr	r0, [r7, #28]
 800fb48:	f7fe fc42 	bl	800e3d0 <tcp_abort>
            goto aborted;
 800fb4c:	e091      	b.n	800fc72 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fb4e:	69fb      	ldr	r3, [r7, #28]
 800fb50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d00c      	beq.n	800fb72 <tcp_input+0x656>
 800fb58:	69fb      	ldr	r3, [r7, #28]
 800fb5a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fb5e:	69fb      	ldr	r3, [r7, #28]
 800fb60:	6918      	ldr	r0, [r3, #16]
 800fb62:	4b39      	ldr	r3, [pc, #228]	@ (800fc48 <tcp_input+0x72c>)
 800fb64:	681a      	ldr	r2, [r3, #0]
 800fb66:	2300      	movs	r3, #0
 800fb68:	69f9      	ldr	r1, [r7, #28]
 800fb6a:	47a0      	blx	r4
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	74fb      	strb	r3, [r7, #19]
 800fb70:	e008      	b.n	800fb84 <tcp_input+0x668>
 800fb72:	4b35      	ldr	r3, [pc, #212]	@ (800fc48 <tcp_input+0x72c>)
 800fb74:	681a      	ldr	r2, [r3, #0]
 800fb76:	2300      	movs	r3, #0
 800fb78:	69f9      	ldr	r1, [r7, #28]
 800fb7a:	2000      	movs	r0, #0
 800fb7c:	f7ff f95e 	bl	800ee3c <tcp_recv_null>
 800fb80:	4603      	mov	r3, r0
 800fb82:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fb84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb88:	f113 0f0d 	cmn.w	r3, #13
 800fb8c:	d054      	beq.n	800fc38 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fb8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d003      	beq.n	800fb9e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fb96:	4b2c      	ldr	r3, [pc, #176]	@ (800fc48 <tcp_input+0x72c>)
 800fb98:	681a      	ldr	r2, [r3, #0]
 800fb9a:	69fb      	ldr	r3, [r7, #28]
 800fb9c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fb9e:	4b2b      	ldr	r3, [pc, #172]	@ (800fc4c <tcp_input+0x730>)
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	f003 0320 	and.w	r3, r3, #32
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d031      	beq.n	800fc0e <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 800fbaa:	69fb      	ldr	r3, [r7, #28]
 800fbac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d009      	beq.n	800fbc6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fbb2:	69fb      	ldr	r3, [r7, #28]
 800fbb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fbb6:	7b5a      	ldrb	r2, [r3, #13]
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fbbc:	f042 0220 	orr.w	r2, r2, #32
 800fbc0:	b2d2      	uxtb	r2, r2
 800fbc2:	735a      	strb	r2, [r3, #13]
 800fbc4:	e023      	b.n	800fc0e <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fbca:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d005      	beq.n	800fbde <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 800fbd2:	69fb      	ldr	r3, [r7, #28]
 800fbd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fbd6:	3301      	adds	r3, #1
 800fbd8:	b29a      	uxth	r2, r3
 800fbda:	69fb      	ldr	r3, [r7, #28]
 800fbdc:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fbde:	69fb      	ldr	r3, [r7, #28]
 800fbe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d00b      	beq.n	800fc00 <tcp_input+0x6e4>
 800fbe8:	69fb      	ldr	r3, [r7, #28]
 800fbea:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fbee:	69fb      	ldr	r3, [r7, #28]
 800fbf0:	6918      	ldr	r0, [r3, #16]
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	69f9      	ldr	r1, [r7, #28]
 800fbf8:	47a0      	blx	r4
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	74fb      	strb	r3, [r7, #19]
 800fbfe:	e001      	b.n	800fc04 <tcp_input+0x6e8>
 800fc00:	2300      	movs	r3, #0
 800fc02:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fc04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc08:	f113 0f0d 	cmn.w	r3, #13
 800fc0c:	d016      	beq.n	800fc3c <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fc0e:	4b13      	ldr	r3, [pc, #76]	@ (800fc5c <tcp_input+0x740>)
 800fc10:	2200      	movs	r2, #0
 800fc12:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fc14:	69f8      	ldr	r0, [r7, #28]
 800fc16:	f000 f88d 	bl	800fd34 <tcp_input_delayed_close>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d127      	bne.n	800fc70 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fc20:	69f8      	ldr	r0, [r7, #28]
 800fc22:	f002 fac3 	bl	80121ac <tcp_output>
 800fc26:	e024      	b.n	800fc72 <tcp_input+0x756>
        goto aborted;
 800fc28:	bf00      	nop
 800fc2a:	e022      	b.n	800fc72 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fc2c:	bf00      	nop
 800fc2e:	e020      	b.n	800fc72 <tcp_input+0x756>
              goto aborted;
 800fc30:	bf00      	nop
 800fc32:	e01e      	b.n	800fc72 <tcp_input+0x756>
          goto aborted;
 800fc34:	bf00      	nop
 800fc36:	e01c      	b.n	800fc72 <tcp_input+0x756>
            goto aborted;
 800fc38:	bf00      	nop
 800fc3a:	e01a      	b.n	800fc72 <tcp_input+0x756>
              goto aborted;
 800fc3c:	bf00      	nop
 800fc3e:	e018      	b.n	800fc72 <tcp_input+0x756>
 800fc40:	2400c9e4 	.word	0x2400c9e4
 800fc44:	2400c9f4 	.word	0x2400c9f4
 800fc48:	2400ca14 	.word	0x2400ca14
 800fc4c:	2400ca11 	.word	0x2400ca11
 800fc50:	2400ca0c 	.word	0x2400ca0c
 800fc54:	2400ca10 	.word	0x2400ca10
 800fc58:	2400ca0e 	.word	0x2400ca0e
 800fc5c:	2400ca18 	.word	0x2400ca18
 800fc60:	2400c9d8 	.word	0x2400c9d8
 800fc64:	080188f8 	.word	0x080188f8
 800fc68:	08018aac 	.word	0x08018aac
 800fc6c:	08018944 	.word	0x08018944
          goto aborted;
 800fc70:	bf00      	nop
    tcp_input_pcb = NULL;
 800fc72:	4b27      	ldr	r3, [pc, #156]	@ (800fd10 <tcp_input+0x7f4>)
 800fc74:	2200      	movs	r2, #0
 800fc76:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fc78:	4b26      	ldr	r3, [pc, #152]	@ (800fd14 <tcp_input+0x7f8>)
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fc7e:	4b26      	ldr	r3, [pc, #152]	@ (800fd18 <tcp_input+0x7fc>)
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d03f      	beq.n	800fd06 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fc86:	4b24      	ldr	r3, [pc, #144]	@ (800fd18 <tcp_input+0x7fc>)
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7fd fe0c 	bl	800d8a8 <pbuf_free>
      inseg.p = NULL;
 800fc90:	4b21      	ldr	r3, [pc, #132]	@ (800fd18 <tcp_input+0x7fc>)
 800fc92:	2200      	movs	r2, #0
 800fc94:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fc96:	e036      	b.n	800fd06 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fc98:	4b20      	ldr	r3, [pc, #128]	@ (800fd1c <tcp_input+0x800>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	899b      	ldrh	r3, [r3, #12]
 800fc9e:	b29b      	uxth	r3, r3
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7fc f943 	bl	800bf2c <lwip_htons>
 800fca6:	4603      	mov	r3, r0
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	f003 0304 	and.w	r3, r3, #4
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d118      	bne.n	800fce4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcb2:	4b1b      	ldr	r3, [pc, #108]	@ (800fd20 <tcp_input+0x804>)
 800fcb4:	6819      	ldr	r1, [r3, #0]
 800fcb6:	4b1b      	ldr	r3, [pc, #108]	@ (800fd24 <tcp_input+0x808>)
 800fcb8:	881b      	ldrh	r3, [r3, #0]
 800fcba:	461a      	mov	r2, r3
 800fcbc:	4b1a      	ldr	r3, [pc, #104]	@ (800fd28 <tcp_input+0x80c>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcc2:	4b16      	ldr	r3, [pc, #88]	@ (800fd1c <tcp_input+0x800>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcc6:	885b      	ldrh	r3, [r3, #2]
 800fcc8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcca:	4a14      	ldr	r2, [pc, #80]	@ (800fd1c <tcp_input+0x800>)
 800fccc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcce:	8812      	ldrh	r2, [r2, #0]
 800fcd0:	b292      	uxth	r2, r2
 800fcd2:	9202      	str	r2, [sp, #8]
 800fcd4:	9301      	str	r3, [sp, #4]
 800fcd6:	4b15      	ldr	r3, [pc, #84]	@ (800fd2c <tcp_input+0x810>)
 800fcd8:	9300      	str	r3, [sp, #0]
 800fcda:	4b15      	ldr	r3, [pc, #84]	@ (800fd30 <tcp_input+0x814>)
 800fcdc:	4602      	mov	r2, r0
 800fcde:	2000      	movs	r0, #0
 800fce0:	f003 f818 	bl	8012d14 <tcp_rst>
    pbuf_free(p);
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f7fd fddf 	bl	800d8a8 <pbuf_free>
  return;
 800fcea:	e00c      	b.n	800fd06 <tcp_input+0x7ea>
    goto dropped;
 800fcec:	bf00      	nop
 800fcee:	e006      	b.n	800fcfe <tcp_input+0x7e2>
    goto dropped;
 800fcf0:	bf00      	nop
 800fcf2:	e004      	b.n	800fcfe <tcp_input+0x7e2>
    goto dropped;
 800fcf4:	bf00      	nop
 800fcf6:	e002      	b.n	800fcfe <tcp_input+0x7e2>
      goto dropped;
 800fcf8:	bf00      	nop
 800fcfa:	e000      	b.n	800fcfe <tcp_input+0x7e2>
      goto dropped;
 800fcfc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f7fd fdd2 	bl	800d8a8 <pbuf_free>
 800fd04:	e000      	b.n	800fd08 <tcp_input+0x7ec>
  return;
 800fd06:	bf00      	nop
}
 800fd08:	3724      	adds	r7, #36	@ 0x24
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd90      	pop	{r4, r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	2400ca18 	.word	0x2400ca18
 800fd14:	2400ca14 	.word	0x2400ca14
 800fd18:	2400c9e4 	.word	0x2400c9e4
 800fd1c:	2400c9f4 	.word	0x2400c9f4
 800fd20:	2400ca08 	.word	0x2400ca08
 800fd24:	2400ca0e 	.word	0x2400ca0e
 800fd28:	2400ca04 	.word	0x2400ca04
 800fd2c:	24005f1c 	.word	0x24005f1c
 800fd30:	24005f20 	.word	0x24005f20

0800fd34 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d106      	bne.n	800fd50 <tcp_input_delayed_close+0x1c>
 800fd42:	4b17      	ldr	r3, [pc, #92]	@ (800fda0 <tcp_input_delayed_close+0x6c>)
 800fd44:	f240 225a 	movw	r2, #602	@ 0x25a
 800fd48:	4916      	ldr	r1, [pc, #88]	@ (800fda4 <tcp_input_delayed_close+0x70>)
 800fd4a:	4817      	ldr	r0, [pc, #92]	@ (800fda8 <tcp_input_delayed_close+0x74>)
 800fd4c:	f006 f9b6 	bl	80160bc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fd50:	4b16      	ldr	r3, [pc, #88]	@ (800fdac <tcp_input_delayed_close+0x78>)
 800fd52:	781b      	ldrb	r3, [r3, #0]
 800fd54:	f003 0310 	and.w	r3, r3, #16
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d01c      	beq.n	800fd96 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	8b5b      	ldrh	r3, [r3, #26]
 800fd60:	f003 0310 	and.w	r3, r3, #16
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d10d      	bne.n	800fd84 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d008      	beq.n	800fd84 <tcp_input_delayed_close+0x50>
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	6912      	ldr	r2, [r2, #16]
 800fd7c:	f06f 010e 	mvn.w	r1, #14
 800fd80:	4610      	mov	r0, r2
 800fd82:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fd84:	6879      	ldr	r1, [r7, #4]
 800fd86:	480a      	ldr	r0, [pc, #40]	@ (800fdb0 <tcp_input_delayed_close+0x7c>)
 800fd88:	f7ff fa50 	bl	800f22c <tcp_pcb_remove>
    tcp_free(pcb);
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f7fe f837 	bl	800de00 <tcp_free>
    return 1;
 800fd92:	2301      	movs	r3, #1
 800fd94:	e000      	b.n	800fd98 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fd96:	2300      	movs	r3, #0
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3708      	adds	r7, #8
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	080188f8 	.word	0x080188f8
 800fda4:	08018ac8 	.word	0x08018ac8
 800fda8:	08018944 	.word	0x08018944
 800fdac:	2400ca11 	.word	0x2400ca11
 800fdb0:	2400c9d8 	.word	0x2400c9d8

0800fdb4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fdb4:	b590      	push	{r4, r7, lr}
 800fdb6:	b08b      	sub	sp, #44	@ 0x2c
 800fdb8:	af04      	add	r7, sp, #16
 800fdba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fdbc:	4b6f      	ldr	r3, [pc, #444]	@ (800ff7c <tcp_listen_input+0x1c8>)
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	f003 0304 	and.w	r3, r3, #4
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	f040 80d2 	bne.w	800ff6e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d106      	bne.n	800fdde <tcp_listen_input+0x2a>
 800fdd0:	4b6b      	ldr	r3, [pc, #428]	@ (800ff80 <tcp_listen_input+0x1cc>)
 800fdd2:	f240 2281 	movw	r2, #641	@ 0x281
 800fdd6:	496b      	ldr	r1, [pc, #428]	@ (800ff84 <tcp_listen_input+0x1d0>)
 800fdd8:	486b      	ldr	r0, [pc, #428]	@ (800ff88 <tcp_listen_input+0x1d4>)
 800fdda:	f006 f96f 	bl	80160bc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fdde:	4b67      	ldr	r3, [pc, #412]	@ (800ff7c <tcp_listen_input+0x1c8>)
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	f003 0310 	and.w	r3, r3, #16
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d019      	beq.n	800fe1e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdea:	4b68      	ldr	r3, [pc, #416]	@ (800ff8c <tcp_listen_input+0x1d8>)
 800fdec:	6819      	ldr	r1, [r3, #0]
 800fdee:	4b68      	ldr	r3, [pc, #416]	@ (800ff90 <tcp_listen_input+0x1dc>)
 800fdf0:	881b      	ldrh	r3, [r3, #0]
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	4b67      	ldr	r3, [pc, #412]	@ (800ff94 <tcp_listen_input+0x1e0>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdfa:	4b67      	ldr	r3, [pc, #412]	@ (800ff98 <tcp_listen_input+0x1e4>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdfe:	885b      	ldrh	r3, [r3, #2]
 800fe00:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe02:	4a65      	ldr	r2, [pc, #404]	@ (800ff98 <tcp_listen_input+0x1e4>)
 800fe04:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe06:	8812      	ldrh	r2, [r2, #0]
 800fe08:	b292      	uxth	r2, r2
 800fe0a:	9202      	str	r2, [sp, #8]
 800fe0c:	9301      	str	r3, [sp, #4]
 800fe0e:	4b63      	ldr	r3, [pc, #396]	@ (800ff9c <tcp_listen_input+0x1e8>)
 800fe10:	9300      	str	r3, [sp, #0]
 800fe12:	4b63      	ldr	r3, [pc, #396]	@ (800ffa0 <tcp_listen_input+0x1ec>)
 800fe14:	4602      	mov	r2, r0
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f002 ff7c 	bl	8012d14 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fe1c:	e0a9      	b.n	800ff72 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fe1e:	4b57      	ldr	r3, [pc, #348]	@ (800ff7c <tcp_listen_input+0x1c8>)
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	f003 0302 	and.w	r3, r3, #2
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	f000 80a3 	beq.w	800ff72 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	7d5b      	ldrb	r3, [r3, #21]
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7ff f927 	bl	800f084 <tcp_alloc>
 800fe36:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d111      	bne.n	800fe62 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	699b      	ldr	r3, [r3, #24]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d00a      	beq.n	800fe5c <tcp_listen_input+0xa8>
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	699b      	ldr	r3, [r3, #24]
 800fe4a:	687a      	ldr	r2, [r7, #4]
 800fe4c:	6910      	ldr	r0, [r2, #16]
 800fe4e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe52:	2100      	movs	r1, #0
 800fe54:	4798      	blx	r3
 800fe56:	4603      	mov	r3, r0
 800fe58:	73bb      	strb	r3, [r7, #14]
      return;
 800fe5a:	e08b      	b.n	800ff74 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fe5c:	23f0      	movs	r3, #240	@ 0xf0
 800fe5e:	73bb      	strb	r3, [r7, #14]
      return;
 800fe60:	e088      	b.n	800ff74 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fe62:	4b50      	ldr	r3, [pc, #320]	@ (800ffa4 <tcp_listen_input+0x1f0>)
 800fe64:	695a      	ldr	r2, [r3, #20]
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fe6a:	4b4e      	ldr	r3, [pc, #312]	@ (800ffa4 <tcp_listen_input+0x1f0>)
 800fe6c:	691a      	ldr	r2, [r3, #16]
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	8ada      	ldrh	r2, [r3, #22]
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fe7a:	4b47      	ldr	r3, [pc, #284]	@ (800ff98 <tcp_listen_input+0x1e4>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	881b      	ldrh	r3, [r3, #0]
 800fe80:	b29a      	uxth	r2, r3
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	2203      	movs	r2, #3
 800fe8a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fe8c:	4b41      	ldr	r3, [pc, #260]	@ (800ff94 <tcp_listen_input+0x1e0>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	1c5a      	adds	r2, r3, #1
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800fe9e:	6978      	ldr	r0, [r7, #20]
 800fea0:	f7ff fa58 	bl	800f354 <tcp_next_iss>
 800fea4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	693a      	ldr	r2, [r7, #16]
 800feaa:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800feac:	697b      	ldr	r3, [r7, #20]
 800feae:	693a      	ldr	r2, [r7, #16]
 800feb0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	693a      	ldr	r2, [r7, #16]
 800feb6:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	693a      	ldr	r2, [r7, #16]
 800febc:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800febe:	4b35      	ldr	r3, [pc, #212]	@ (800ff94 <tcp_listen_input+0x1e0>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	1e5a      	subs	r2, r3, #1
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	691a      	ldr	r2, [r3, #16]
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	687a      	ldr	r2, [r7, #4]
 800fed4:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	7a5b      	ldrb	r3, [r3, #9]
 800feda:	f003 030c 	and.w	r3, r3, #12
 800fede:	b2da      	uxtb	r2, r3
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	7a1a      	ldrb	r2, [r3, #8]
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800feec:	4b2e      	ldr	r3, [pc, #184]	@ (800ffa8 <tcp_listen_input+0x1f4>)
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	60da      	str	r2, [r3, #12]
 800fef4:	4a2c      	ldr	r2, [pc, #176]	@ (800ffa8 <tcp_listen_input+0x1f4>)
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	6013      	str	r3, [r2, #0]
 800fefa:	f003 f8cd 	bl	8013098 <tcp_timer_needed>
 800fefe:	4b2b      	ldr	r3, [pc, #172]	@ (800ffac <tcp_listen_input+0x1f8>)
 800ff00:	2201      	movs	r2, #1
 800ff02:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ff04:	6978      	ldr	r0, [r7, #20]
 800ff06:	f001 fd8b 	bl	8011a20 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ff0a:	4b23      	ldr	r3, [pc, #140]	@ (800ff98 <tcp_listen_input+0x1e4>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	89db      	ldrh	r3, [r3, #14]
 800ff10:	b29a      	uxth	r2, r3
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	3304      	adds	r3, #4
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f004 fce7 	bl	8014900 <ip4_route>
 800ff32:	4601      	mov	r1, r0
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	3304      	adds	r3, #4
 800ff38:	461a      	mov	r2, r3
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	f7ff fa30 	bl	800f3a0 <tcp_eff_send_mss_netif>
 800ff40:	4603      	mov	r3, r0
 800ff42:	461a      	mov	r2, r3
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ff48:	2112      	movs	r1, #18
 800ff4a:	6978      	ldr	r0, [r7, #20]
 800ff4c:	f002 f840 	bl	8011fd0 <tcp_enqueue_flags>
 800ff50:	4603      	mov	r3, r0
 800ff52:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ff54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d004      	beq.n	800ff66 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ff5c:	2100      	movs	r1, #0
 800ff5e:	6978      	ldr	r0, [r7, #20]
 800ff60:	f7fe f978 	bl	800e254 <tcp_abandon>
      return;
 800ff64:	e006      	b.n	800ff74 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ff66:	6978      	ldr	r0, [r7, #20]
 800ff68:	f002 f920 	bl	80121ac <tcp_output>
  return;
 800ff6c:	e001      	b.n	800ff72 <tcp_listen_input+0x1be>
    return;
 800ff6e:	bf00      	nop
 800ff70:	e000      	b.n	800ff74 <tcp_listen_input+0x1c0>
  return;
 800ff72:	bf00      	nop
}
 800ff74:	371c      	adds	r7, #28
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd90      	pop	{r4, r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	2400ca10 	.word	0x2400ca10
 800ff80:	080188f8 	.word	0x080188f8
 800ff84:	08018af0 	.word	0x08018af0
 800ff88:	08018944 	.word	0x08018944
 800ff8c:	2400ca08 	.word	0x2400ca08
 800ff90:	2400ca0e 	.word	0x2400ca0e
 800ff94:	2400ca04 	.word	0x2400ca04
 800ff98:	2400c9f4 	.word	0x2400c9f4
 800ff9c:	24005f1c 	.word	0x24005f1c
 800ffa0:	24005f20 	.word	0x24005f20
 800ffa4:	24005f0c 	.word	0x24005f0c
 800ffa8:	2400c9d8 	.word	0x2400c9d8
 800ffac:	2400c9e0 	.word	0x2400c9e0

0800ffb0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b086      	sub	sp, #24
 800ffb4:	af04      	add	r7, sp, #16
 800ffb6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ffb8:	4b2f      	ldr	r3, [pc, #188]	@ (8010078 <tcp_timewait_input+0xc8>)
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	f003 0304 	and.w	r3, r3, #4
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d153      	bne.n	801006c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d106      	bne.n	800ffd8 <tcp_timewait_input+0x28>
 800ffca:	4b2c      	ldr	r3, [pc, #176]	@ (801007c <tcp_timewait_input+0xcc>)
 800ffcc:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800ffd0:	492b      	ldr	r1, [pc, #172]	@ (8010080 <tcp_timewait_input+0xd0>)
 800ffd2:	482c      	ldr	r0, [pc, #176]	@ (8010084 <tcp_timewait_input+0xd4>)
 800ffd4:	f006 f872 	bl	80160bc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ffd8:	4b27      	ldr	r3, [pc, #156]	@ (8010078 <tcp_timewait_input+0xc8>)
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	f003 0302 	and.w	r3, r3, #2
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d02a      	beq.n	801003a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ffe4:	4b28      	ldr	r3, [pc, #160]	@ (8010088 <tcp_timewait_input+0xd8>)
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffec:	1ad3      	subs	r3, r2, r3
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	db2d      	blt.n	801004e <tcp_timewait_input+0x9e>
 800fff2:	4b25      	ldr	r3, [pc, #148]	@ (8010088 <tcp_timewait_input+0xd8>)
 800fff4:	681a      	ldr	r2, [r3, #0]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fffa:	6879      	ldr	r1, [r7, #4]
 800fffc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fffe:	440b      	add	r3, r1
 8010000:	1ad3      	subs	r3, r2, r3
 8010002:	2b00      	cmp	r3, #0
 8010004:	dc23      	bgt.n	801004e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010006:	4b21      	ldr	r3, [pc, #132]	@ (801008c <tcp_timewait_input+0xdc>)
 8010008:	6819      	ldr	r1, [r3, #0]
 801000a:	4b21      	ldr	r3, [pc, #132]	@ (8010090 <tcp_timewait_input+0xe0>)
 801000c:	881b      	ldrh	r3, [r3, #0]
 801000e:	461a      	mov	r2, r3
 8010010:	4b1d      	ldr	r3, [pc, #116]	@ (8010088 <tcp_timewait_input+0xd8>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010016:	4b1f      	ldr	r3, [pc, #124]	@ (8010094 <tcp_timewait_input+0xe4>)
 8010018:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801001a:	885b      	ldrh	r3, [r3, #2]
 801001c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801001e:	4a1d      	ldr	r2, [pc, #116]	@ (8010094 <tcp_timewait_input+0xe4>)
 8010020:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010022:	8812      	ldrh	r2, [r2, #0]
 8010024:	b292      	uxth	r2, r2
 8010026:	9202      	str	r2, [sp, #8]
 8010028:	9301      	str	r3, [sp, #4]
 801002a:	4b1b      	ldr	r3, [pc, #108]	@ (8010098 <tcp_timewait_input+0xe8>)
 801002c:	9300      	str	r3, [sp, #0]
 801002e:	4b1b      	ldr	r3, [pc, #108]	@ (801009c <tcp_timewait_input+0xec>)
 8010030:	4602      	mov	r2, r0
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f002 fe6e 	bl	8012d14 <tcp_rst>
      return;
 8010038:	e01b      	b.n	8010072 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801003a:	4b0f      	ldr	r3, [pc, #60]	@ (8010078 <tcp_timewait_input+0xc8>)
 801003c:	781b      	ldrb	r3, [r3, #0]
 801003e:	f003 0301 	and.w	r3, r3, #1
 8010042:	2b00      	cmp	r3, #0
 8010044:	d003      	beq.n	801004e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010046:	4b16      	ldr	r3, [pc, #88]	@ (80100a0 <tcp_timewait_input+0xf0>)
 8010048:	681a      	ldr	r2, [r3, #0]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801004e:	4b10      	ldr	r3, [pc, #64]	@ (8010090 <tcp_timewait_input+0xe0>)
 8010050:	881b      	ldrh	r3, [r3, #0]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d00c      	beq.n	8010070 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	8b5b      	ldrh	r3, [r3, #26]
 801005a:	f043 0302 	orr.w	r3, r3, #2
 801005e:	b29a      	uxth	r2, r3
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f002 f8a1 	bl	80121ac <tcp_output>
  }
  return;
 801006a:	e001      	b.n	8010070 <tcp_timewait_input+0xc0>
    return;
 801006c:	bf00      	nop
 801006e:	e000      	b.n	8010072 <tcp_timewait_input+0xc2>
  return;
 8010070:	bf00      	nop
}
 8010072:	3708      	adds	r7, #8
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}
 8010078:	2400ca10 	.word	0x2400ca10
 801007c:	080188f8 	.word	0x080188f8
 8010080:	08018b10 	.word	0x08018b10
 8010084:	08018944 	.word	0x08018944
 8010088:	2400ca04 	.word	0x2400ca04
 801008c:	2400ca08 	.word	0x2400ca08
 8010090:	2400ca0e 	.word	0x2400ca0e
 8010094:	2400c9f4 	.word	0x2400c9f4
 8010098:	24005f1c 	.word	0x24005f1c
 801009c:	24005f20 	.word	0x24005f20
 80100a0:	2400c9cc 	.word	0x2400c9cc

080100a4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80100a4:	b590      	push	{r4, r7, lr}
 80100a6:	b08d      	sub	sp, #52	@ 0x34
 80100a8:	af04      	add	r7, sp, #16
 80100aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80100ac:	2300      	movs	r3, #0
 80100ae:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80100b0:	2300      	movs	r3, #0
 80100b2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d106      	bne.n	80100c8 <tcp_process+0x24>
 80100ba:	4b9d      	ldr	r3, [pc, #628]	@ (8010330 <tcp_process+0x28c>)
 80100bc:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80100c0:	499c      	ldr	r1, [pc, #624]	@ (8010334 <tcp_process+0x290>)
 80100c2:	489d      	ldr	r0, [pc, #628]	@ (8010338 <tcp_process+0x294>)
 80100c4:	f005 fffa 	bl	80160bc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80100c8:	4b9c      	ldr	r3, [pc, #624]	@ (801033c <tcp_process+0x298>)
 80100ca:	781b      	ldrb	r3, [r3, #0]
 80100cc:	f003 0304 	and.w	r3, r3, #4
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d04e      	beq.n	8010172 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	7d1b      	ldrb	r3, [r3, #20]
 80100d8:	2b02      	cmp	r3, #2
 80100da:	d108      	bne.n	80100ee <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80100e0:	4b97      	ldr	r3, [pc, #604]	@ (8010340 <tcp_process+0x29c>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	429a      	cmp	r2, r3
 80100e6:	d123      	bne.n	8010130 <tcp_process+0x8c>
        acceptable = 1;
 80100e8:	2301      	movs	r3, #1
 80100ea:	76fb      	strb	r3, [r7, #27]
 80100ec:	e020      	b.n	8010130 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80100f2:	4b94      	ldr	r3, [pc, #592]	@ (8010344 <tcp_process+0x2a0>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d102      	bne.n	8010100 <tcp_process+0x5c>
        acceptable = 1;
 80100fa:	2301      	movs	r3, #1
 80100fc:	76fb      	strb	r3, [r7, #27]
 80100fe:	e017      	b.n	8010130 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010100:	4b90      	ldr	r3, [pc, #576]	@ (8010344 <tcp_process+0x2a0>)
 8010102:	681a      	ldr	r2, [r3, #0]
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010108:	1ad3      	subs	r3, r2, r3
 801010a:	2b00      	cmp	r3, #0
 801010c:	db10      	blt.n	8010130 <tcp_process+0x8c>
 801010e:	4b8d      	ldr	r3, [pc, #564]	@ (8010344 <tcp_process+0x2a0>)
 8010110:	681a      	ldr	r2, [r3, #0]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010116:	6879      	ldr	r1, [r7, #4]
 8010118:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801011a:	440b      	add	r3, r1
 801011c:	1ad3      	subs	r3, r2, r3
 801011e:	2b00      	cmp	r3, #0
 8010120:	dc06      	bgt.n	8010130 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	8b5b      	ldrh	r3, [r3, #26]
 8010126:	f043 0302 	orr.w	r3, r3, #2
 801012a:	b29a      	uxth	r2, r3
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010130:	7efb      	ldrb	r3, [r7, #27]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d01b      	beq.n	801016e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	7d1b      	ldrb	r3, [r3, #20]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d106      	bne.n	801014c <tcp_process+0xa8>
 801013e:	4b7c      	ldr	r3, [pc, #496]	@ (8010330 <tcp_process+0x28c>)
 8010140:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8010144:	4980      	ldr	r1, [pc, #512]	@ (8010348 <tcp_process+0x2a4>)
 8010146:	487c      	ldr	r0, [pc, #496]	@ (8010338 <tcp_process+0x294>)
 8010148:	f005 ffb8 	bl	80160bc <iprintf>
      recv_flags |= TF_RESET;
 801014c:	4b7f      	ldr	r3, [pc, #508]	@ (801034c <tcp_process+0x2a8>)
 801014e:	781b      	ldrb	r3, [r3, #0]
 8010150:	f043 0308 	orr.w	r3, r3, #8
 8010154:	b2da      	uxtb	r2, r3
 8010156:	4b7d      	ldr	r3, [pc, #500]	@ (801034c <tcp_process+0x2a8>)
 8010158:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	8b5b      	ldrh	r3, [r3, #26]
 801015e:	f023 0301 	bic.w	r3, r3, #1
 8010162:	b29a      	uxth	r2, r3
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010168:	f06f 030d 	mvn.w	r3, #13
 801016c:	e37a      	b.n	8010864 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801016e:	2300      	movs	r3, #0
 8010170:	e378      	b.n	8010864 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010172:	4b72      	ldr	r3, [pc, #456]	@ (801033c <tcp_process+0x298>)
 8010174:	781b      	ldrb	r3, [r3, #0]
 8010176:	f003 0302 	and.w	r3, r3, #2
 801017a:	2b00      	cmp	r3, #0
 801017c:	d010      	beq.n	80101a0 <tcp_process+0xfc>
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	7d1b      	ldrb	r3, [r3, #20]
 8010182:	2b02      	cmp	r3, #2
 8010184:	d00c      	beq.n	80101a0 <tcp_process+0xfc>
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	7d1b      	ldrb	r3, [r3, #20]
 801018a:	2b03      	cmp	r3, #3
 801018c:	d008      	beq.n	80101a0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	8b5b      	ldrh	r3, [r3, #26]
 8010192:	f043 0302 	orr.w	r3, r3, #2
 8010196:	b29a      	uxth	r2, r3
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801019c:	2300      	movs	r3, #0
 801019e:	e361      	b.n	8010864 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	8b5b      	ldrh	r3, [r3, #26]
 80101a4:	f003 0310 	and.w	r3, r3, #16
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d103      	bne.n	80101b4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80101ac:	4b68      	ldr	r3, [pc, #416]	@ (8010350 <tcp_process+0x2ac>)
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2200      	movs	r2, #0
 80101b8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2200      	movs	r2, #0
 80101c0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f001 fc2b 	bl	8011a20 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	7d1b      	ldrb	r3, [r3, #20]
 80101ce:	3b02      	subs	r3, #2
 80101d0:	2b07      	cmp	r3, #7
 80101d2:	f200 8337 	bhi.w	8010844 <tcp_process+0x7a0>
 80101d6:	a201      	add	r2, pc, #4	@ (adr r2, 80101dc <tcp_process+0x138>)
 80101d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101dc:	080101fd 	.word	0x080101fd
 80101e0:	0801042d 	.word	0x0801042d
 80101e4:	080105a5 	.word	0x080105a5
 80101e8:	080105cf 	.word	0x080105cf
 80101ec:	080106f3 	.word	0x080106f3
 80101f0:	080105a5 	.word	0x080105a5
 80101f4:	0801077f 	.word	0x0801077f
 80101f8:	0801080f 	.word	0x0801080f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80101fc:	4b4f      	ldr	r3, [pc, #316]	@ (801033c <tcp_process+0x298>)
 80101fe:	781b      	ldrb	r3, [r3, #0]
 8010200:	f003 0310 	and.w	r3, r3, #16
 8010204:	2b00      	cmp	r3, #0
 8010206:	f000 80e4 	beq.w	80103d2 <tcp_process+0x32e>
 801020a:	4b4c      	ldr	r3, [pc, #304]	@ (801033c <tcp_process+0x298>)
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	f003 0302 	and.w	r3, r3, #2
 8010212:	2b00      	cmp	r3, #0
 8010214:	f000 80dd 	beq.w	80103d2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801021c:	1c5a      	adds	r2, r3, #1
 801021e:	4b48      	ldr	r3, [pc, #288]	@ (8010340 <tcp_process+0x29c>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	429a      	cmp	r2, r3
 8010224:	f040 80d5 	bne.w	80103d2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010228:	4b46      	ldr	r3, [pc, #280]	@ (8010344 <tcp_process+0x2a0>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	1c5a      	adds	r2, r3, #1
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801023a:	4b41      	ldr	r3, [pc, #260]	@ (8010340 <tcp_process+0x29c>)
 801023c:	681a      	ldr	r2, [r3, #0]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010242:	4b44      	ldr	r3, [pc, #272]	@ (8010354 <tcp_process+0x2b0>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	89db      	ldrh	r3, [r3, #14]
 8010248:	b29a      	uxth	r2, r3
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801025c:	4b39      	ldr	r3, [pc, #228]	@ (8010344 <tcp_process+0x2a0>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	1e5a      	subs	r2, r3, #1
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2204      	movs	r2, #4
 801026a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	3304      	adds	r3, #4
 8010274:	4618      	mov	r0, r3
 8010276:	f004 fb43 	bl	8014900 <ip4_route>
 801027a:	4601      	mov	r1, r0
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	3304      	adds	r3, #4
 8010280:	461a      	mov	r2, r3
 8010282:	4620      	mov	r0, r4
 8010284:	f7ff f88c 	bl	800f3a0 <tcp_eff_send_mss_netif>
 8010288:	4603      	mov	r3, r0
 801028a:	461a      	mov	r2, r3
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010294:	009a      	lsls	r2, r3, #2
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801029a:	005b      	lsls	r3, r3, #1
 801029c:	f241 111c 	movw	r1, #4380	@ 0x111c
 80102a0:	428b      	cmp	r3, r1
 80102a2:	bf38      	it	cc
 80102a4:	460b      	movcc	r3, r1
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d204      	bcs.n	80102b4 <tcp_process+0x210>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80102ae:	009b      	lsls	r3, r3, #2
 80102b0:	b29b      	uxth	r3, r3
 80102b2:	e00d      	b.n	80102d0 <tcp_process+0x22c>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80102b8:	005b      	lsls	r3, r3, #1
 80102ba:	f241 121c 	movw	r2, #4380	@ 0x111c
 80102be:	4293      	cmp	r3, r2
 80102c0:	d904      	bls.n	80102cc <tcp_process+0x228>
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80102c6:	005b      	lsls	r3, r3, #1
 80102c8:	b29b      	uxth	r3, r3
 80102ca:	e001      	b.n	80102d0 <tcp_process+0x22c>
 80102cc:	f241 131c 	movw	r3, #4380	@ 0x111c
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d106      	bne.n	80102ee <tcp_process+0x24a>
 80102e0:	4b13      	ldr	r3, [pc, #76]	@ (8010330 <tcp_process+0x28c>)
 80102e2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80102e6:	491c      	ldr	r1, [pc, #112]	@ (8010358 <tcp_process+0x2b4>)
 80102e8:	4813      	ldr	r0, [pc, #76]	@ (8010338 <tcp_process+0x294>)
 80102ea:	f005 fee7 	bl	80160bc <iprintf>
        --pcb->snd_queuelen;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80102f4:	3b01      	subs	r3, #1
 80102f6:	b29a      	uxth	r2, r3
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010302:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010304:	69fb      	ldr	r3, [r7, #28]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d12a      	bne.n	8010360 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801030e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010310:	69fb      	ldr	r3, [r7, #28]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d106      	bne.n	8010324 <tcp_process+0x280>
 8010316:	4b06      	ldr	r3, [pc, #24]	@ (8010330 <tcp_process+0x28c>)
 8010318:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801031c:	490f      	ldr	r1, [pc, #60]	@ (801035c <tcp_process+0x2b8>)
 801031e:	4806      	ldr	r0, [pc, #24]	@ (8010338 <tcp_process+0x294>)
 8010320:	f005 fecc 	bl	80160bc <iprintf>
          pcb->unsent = rseg->next;
 8010324:	69fb      	ldr	r3, [r7, #28]
 8010326:	681a      	ldr	r2, [r3, #0]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	66da      	str	r2, [r3, #108]	@ 0x6c
 801032c:	e01c      	b.n	8010368 <tcp_process+0x2c4>
 801032e:	bf00      	nop
 8010330:	080188f8 	.word	0x080188f8
 8010334:	08018b30 	.word	0x08018b30
 8010338:	08018944 	.word	0x08018944
 801033c:	2400ca10 	.word	0x2400ca10
 8010340:	2400ca08 	.word	0x2400ca08
 8010344:	2400ca04 	.word	0x2400ca04
 8010348:	08018b4c 	.word	0x08018b4c
 801034c:	2400ca11 	.word	0x2400ca11
 8010350:	2400c9cc 	.word	0x2400c9cc
 8010354:	2400c9f4 	.word	0x2400c9f4
 8010358:	08018b6c 	.word	0x08018b6c
 801035c:	08018b84 	.word	0x08018b84
        } else {
          pcb->unacked = rseg->next;
 8010360:	69fb      	ldr	r3, [r7, #28]
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8010368:	69f8      	ldr	r0, [r7, #28]
 801036a:	f7fe fd22 	bl	800edb2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010372:	2b00      	cmp	r3, #0
 8010374:	d104      	bne.n	8010380 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801037c:	861a      	strh	r2, [r3, #48]	@ 0x30
 801037e:	e006      	b.n	801038e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2200      	movs	r2, #0
 8010384:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2200      	movs	r2, #0
 801038a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010394:	2b00      	cmp	r3, #0
 8010396:	d00a      	beq.n	80103ae <tcp_process+0x30a>
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	6910      	ldr	r0, [r2, #16]
 80103a2:	2200      	movs	r2, #0
 80103a4:	6879      	ldr	r1, [r7, #4]
 80103a6:	4798      	blx	r3
 80103a8:	4603      	mov	r3, r0
 80103aa:	76bb      	strb	r3, [r7, #26]
 80103ac:	e001      	b.n	80103b2 <tcp_process+0x30e>
 80103ae:	2300      	movs	r3, #0
 80103b0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80103b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103b6:	f113 0f0d 	cmn.w	r3, #13
 80103ba:	d102      	bne.n	80103c2 <tcp_process+0x31e>
          return ERR_ABRT;
 80103bc:	f06f 030c 	mvn.w	r3, #12
 80103c0:	e250      	b.n	8010864 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	8b5b      	ldrh	r3, [r3, #26]
 80103c6:	f043 0302 	orr.w	r3, r3, #2
 80103ca:	b29a      	uxth	r2, r3
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80103d0:	e23a      	b.n	8010848 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80103d2:	4b98      	ldr	r3, [pc, #608]	@ (8010634 <tcp_process+0x590>)
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	f003 0310 	and.w	r3, r3, #16
 80103da:	2b00      	cmp	r3, #0
 80103dc:	f000 8234 	beq.w	8010848 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103e0:	4b95      	ldr	r3, [pc, #596]	@ (8010638 <tcp_process+0x594>)
 80103e2:	6819      	ldr	r1, [r3, #0]
 80103e4:	4b95      	ldr	r3, [pc, #596]	@ (801063c <tcp_process+0x598>)
 80103e6:	881b      	ldrh	r3, [r3, #0]
 80103e8:	461a      	mov	r2, r3
 80103ea:	4b95      	ldr	r3, [pc, #596]	@ (8010640 <tcp_process+0x59c>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103f0:	4b94      	ldr	r3, [pc, #592]	@ (8010644 <tcp_process+0x5a0>)
 80103f2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103f4:	885b      	ldrh	r3, [r3, #2]
 80103f6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103f8:	4a92      	ldr	r2, [pc, #584]	@ (8010644 <tcp_process+0x5a0>)
 80103fa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103fc:	8812      	ldrh	r2, [r2, #0]
 80103fe:	b292      	uxth	r2, r2
 8010400:	9202      	str	r2, [sp, #8]
 8010402:	9301      	str	r3, [sp, #4]
 8010404:	4b90      	ldr	r3, [pc, #576]	@ (8010648 <tcp_process+0x5a4>)
 8010406:	9300      	str	r3, [sp, #0]
 8010408:	4b90      	ldr	r3, [pc, #576]	@ (801064c <tcp_process+0x5a8>)
 801040a:	4602      	mov	r2, r0
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f002 fc81 	bl	8012d14 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010418:	2b05      	cmp	r3, #5
 801041a:	f200 8215 	bhi.w	8010848 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	2200      	movs	r2, #0
 8010422:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f002 fa4d 	bl	80128c4 <tcp_rexmit_rto>
      break;
 801042a:	e20d      	b.n	8010848 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801042c:	4b81      	ldr	r3, [pc, #516]	@ (8010634 <tcp_process+0x590>)
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	f003 0310 	and.w	r3, r3, #16
 8010434:	2b00      	cmp	r3, #0
 8010436:	f000 80a1 	beq.w	801057c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801043a:	4b7f      	ldr	r3, [pc, #508]	@ (8010638 <tcp_process+0x594>)
 801043c:	681a      	ldr	r2, [r3, #0]
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010442:	1ad3      	subs	r3, r2, r3
 8010444:	3b01      	subs	r3, #1
 8010446:	2b00      	cmp	r3, #0
 8010448:	db7e      	blt.n	8010548 <tcp_process+0x4a4>
 801044a:	4b7b      	ldr	r3, [pc, #492]	@ (8010638 <tcp_process+0x594>)
 801044c:	681a      	ldr	r2, [r3, #0]
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010452:	1ad3      	subs	r3, r2, r3
 8010454:	2b00      	cmp	r3, #0
 8010456:	dc77      	bgt.n	8010548 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2204      	movs	r2, #4
 801045c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010462:	2b00      	cmp	r3, #0
 8010464:	d102      	bne.n	801046c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010466:	23fa      	movs	r3, #250	@ 0xfa
 8010468:	76bb      	strb	r3, [r7, #26]
 801046a:	e01d      	b.n	80104a8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010470:	699b      	ldr	r3, [r3, #24]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d106      	bne.n	8010484 <tcp_process+0x3e0>
 8010476:	4b76      	ldr	r3, [pc, #472]	@ (8010650 <tcp_process+0x5ac>)
 8010478:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801047c:	4975      	ldr	r1, [pc, #468]	@ (8010654 <tcp_process+0x5b0>)
 801047e:	4876      	ldr	r0, [pc, #472]	@ (8010658 <tcp_process+0x5b4>)
 8010480:	f005 fe1c 	bl	80160bc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010488:	699b      	ldr	r3, [r3, #24]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d00a      	beq.n	80104a4 <tcp_process+0x400>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010492:	699b      	ldr	r3, [r3, #24]
 8010494:	687a      	ldr	r2, [r7, #4]
 8010496:	6910      	ldr	r0, [r2, #16]
 8010498:	2200      	movs	r2, #0
 801049a:	6879      	ldr	r1, [r7, #4]
 801049c:	4798      	blx	r3
 801049e:	4603      	mov	r3, r0
 80104a0:	76bb      	strb	r3, [r7, #26]
 80104a2:	e001      	b.n	80104a8 <tcp_process+0x404>
 80104a4:	23f0      	movs	r3, #240	@ 0xf0
 80104a6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80104a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d00a      	beq.n	80104c6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80104b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104b4:	f113 0f0d 	cmn.w	r3, #13
 80104b8:	d002      	beq.n	80104c0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f7fd ff88 	bl	800e3d0 <tcp_abort>
            }
            return ERR_ABRT;
 80104c0:	f06f 030c 	mvn.w	r3, #12
 80104c4:	e1ce      	b.n	8010864 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f000 fae0 	bl	8010a8c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80104cc:	4b63      	ldr	r3, [pc, #396]	@ (801065c <tcp_process+0x5b8>)
 80104ce:	881b      	ldrh	r3, [r3, #0]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d005      	beq.n	80104e0 <tcp_process+0x43c>
            recv_acked--;
 80104d4:	4b61      	ldr	r3, [pc, #388]	@ (801065c <tcp_process+0x5b8>)
 80104d6:	881b      	ldrh	r3, [r3, #0]
 80104d8:	3b01      	subs	r3, #1
 80104da:	b29a      	uxth	r2, r3
 80104dc:	4b5f      	ldr	r3, [pc, #380]	@ (801065c <tcp_process+0x5b8>)
 80104de:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80104e4:	009a      	lsls	r2, r3, #2
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80104ea:	005b      	lsls	r3, r3, #1
 80104ec:	f241 111c 	movw	r1, #4380	@ 0x111c
 80104f0:	428b      	cmp	r3, r1
 80104f2:	bf38      	it	cc
 80104f4:	460b      	movcc	r3, r1
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d204      	bcs.n	8010504 <tcp_process+0x460>
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80104fe:	009b      	lsls	r3, r3, #2
 8010500:	b29b      	uxth	r3, r3
 8010502:	e00d      	b.n	8010520 <tcp_process+0x47c>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010508:	005b      	lsls	r3, r3, #1
 801050a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801050e:	4293      	cmp	r3, r2
 8010510:	d904      	bls.n	801051c <tcp_process+0x478>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010516:	005b      	lsls	r3, r3, #1
 8010518:	b29b      	uxth	r3, r3
 801051a:	e001      	b.n	8010520 <tcp_process+0x47c>
 801051c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010520:	687a      	ldr	r2, [r7, #4]
 8010522:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010526:	4b4e      	ldr	r3, [pc, #312]	@ (8010660 <tcp_process+0x5bc>)
 8010528:	781b      	ldrb	r3, [r3, #0]
 801052a:	f003 0320 	and.w	r3, r3, #32
 801052e:	2b00      	cmp	r3, #0
 8010530:	d037      	beq.n	80105a2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	8b5b      	ldrh	r3, [r3, #26]
 8010536:	f043 0302 	orr.w	r3, r3, #2
 801053a:	b29a      	uxth	r2, r3
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2207      	movs	r2, #7
 8010544:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010546:	e02c      	b.n	80105a2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010548:	4b3b      	ldr	r3, [pc, #236]	@ (8010638 <tcp_process+0x594>)
 801054a:	6819      	ldr	r1, [r3, #0]
 801054c:	4b3b      	ldr	r3, [pc, #236]	@ (801063c <tcp_process+0x598>)
 801054e:	881b      	ldrh	r3, [r3, #0]
 8010550:	461a      	mov	r2, r3
 8010552:	4b3b      	ldr	r3, [pc, #236]	@ (8010640 <tcp_process+0x59c>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010558:	4b3a      	ldr	r3, [pc, #232]	@ (8010644 <tcp_process+0x5a0>)
 801055a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801055c:	885b      	ldrh	r3, [r3, #2]
 801055e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010560:	4a38      	ldr	r2, [pc, #224]	@ (8010644 <tcp_process+0x5a0>)
 8010562:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010564:	8812      	ldrh	r2, [r2, #0]
 8010566:	b292      	uxth	r2, r2
 8010568:	9202      	str	r2, [sp, #8]
 801056a:	9301      	str	r3, [sp, #4]
 801056c:	4b36      	ldr	r3, [pc, #216]	@ (8010648 <tcp_process+0x5a4>)
 801056e:	9300      	str	r3, [sp, #0]
 8010570:	4b36      	ldr	r3, [pc, #216]	@ (801064c <tcp_process+0x5a8>)
 8010572:	4602      	mov	r2, r0
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f002 fbcd 	bl	8012d14 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801057a:	e167      	b.n	801084c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801057c:	4b2d      	ldr	r3, [pc, #180]	@ (8010634 <tcp_process+0x590>)
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	f003 0302 	and.w	r3, r3, #2
 8010584:	2b00      	cmp	r3, #0
 8010586:	f000 8161 	beq.w	801084c <tcp_process+0x7a8>
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801058e:	1e5a      	subs	r2, r3, #1
 8010590:	4b2b      	ldr	r3, [pc, #172]	@ (8010640 <tcp_process+0x59c>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	429a      	cmp	r2, r3
 8010596:	f040 8159 	bne.w	801084c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f002 f9b4 	bl	8012908 <tcp_rexmit>
      break;
 80105a0:	e154      	b.n	801084c <tcp_process+0x7a8>
 80105a2:	e153      	b.n	801084c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f000 fa71 	bl	8010a8c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80105aa:	4b2d      	ldr	r3, [pc, #180]	@ (8010660 <tcp_process+0x5bc>)
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	f003 0320 	and.w	r3, r3, #32
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	f000 814c 	beq.w	8010850 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	8b5b      	ldrh	r3, [r3, #26]
 80105bc:	f043 0302 	orr.w	r3, r3, #2
 80105c0:	b29a      	uxth	r2, r3
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2207      	movs	r2, #7
 80105ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 80105cc:	e140      	b.n	8010850 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	f000 fa5c 	bl	8010a8c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80105d4:	4b22      	ldr	r3, [pc, #136]	@ (8010660 <tcp_process+0x5bc>)
 80105d6:	781b      	ldrb	r3, [r3, #0]
 80105d8:	f003 0320 	and.w	r3, r3, #32
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d071      	beq.n	80106c4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105e0:	4b14      	ldr	r3, [pc, #80]	@ (8010634 <tcp_process+0x590>)
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	f003 0310 	and.w	r3, r3, #16
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d060      	beq.n	80106ae <tcp_process+0x60a>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80105f0:	4b11      	ldr	r3, [pc, #68]	@ (8010638 <tcp_process+0x594>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d15a      	bne.n	80106ae <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d156      	bne.n	80106ae <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	8b5b      	ldrh	r3, [r3, #26]
 8010604:	f043 0302 	orr.w	r3, r3, #2
 8010608:	b29a      	uxth	r2, r3
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f7fe fdbc 	bl	800f18c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010614:	4b13      	ldr	r3, [pc, #76]	@ (8010664 <tcp_process+0x5c0>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	687a      	ldr	r2, [r7, #4]
 801061a:	429a      	cmp	r2, r3
 801061c:	d105      	bne.n	801062a <tcp_process+0x586>
 801061e:	4b11      	ldr	r3, [pc, #68]	@ (8010664 <tcp_process+0x5c0>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	68db      	ldr	r3, [r3, #12]
 8010624:	4a0f      	ldr	r2, [pc, #60]	@ (8010664 <tcp_process+0x5c0>)
 8010626:	6013      	str	r3, [r2, #0]
 8010628:	e02e      	b.n	8010688 <tcp_process+0x5e4>
 801062a:	4b0e      	ldr	r3, [pc, #56]	@ (8010664 <tcp_process+0x5c0>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	617b      	str	r3, [r7, #20]
 8010630:	e027      	b.n	8010682 <tcp_process+0x5de>
 8010632:	bf00      	nop
 8010634:	2400ca10 	.word	0x2400ca10
 8010638:	2400ca08 	.word	0x2400ca08
 801063c:	2400ca0e 	.word	0x2400ca0e
 8010640:	2400ca04 	.word	0x2400ca04
 8010644:	2400c9f4 	.word	0x2400c9f4
 8010648:	24005f1c 	.word	0x24005f1c
 801064c:	24005f20 	.word	0x24005f20
 8010650:	080188f8 	.word	0x080188f8
 8010654:	08018b98 	.word	0x08018b98
 8010658:	08018944 	.word	0x08018944
 801065c:	2400ca0c 	.word	0x2400ca0c
 8010660:	2400ca11 	.word	0x2400ca11
 8010664:	2400c9d8 	.word	0x2400c9d8
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	687a      	ldr	r2, [r7, #4]
 801066e:	429a      	cmp	r2, r3
 8010670:	d104      	bne.n	801067c <tcp_process+0x5d8>
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	68da      	ldr	r2, [r3, #12]
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	60da      	str	r2, [r3, #12]
 801067a:	e005      	b.n	8010688 <tcp_process+0x5e4>
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	68db      	ldr	r3, [r3, #12]
 8010680:	617b      	str	r3, [r7, #20]
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d1ef      	bne.n	8010668 <tcp_process+0x5c4>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2200      	movs	r2, #0
 801068c:	60da      	str	r2, [r3, #12]
 801068e:	4b77      	ldr	r3, [pc, #476]	@ (801086c <tcp_process+0x7c8>)
 8010690:	2201      	movs	r2, #1
 8010692:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	220a      	movs	r2, #10
 8010698:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801069a:	4b75      	ldr	r3, [pc, #468]	@ (8010870 <tcp_process+0x7cc>)
 801069c:	681a      	ldr	r2, [r3, #0]
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	60da      	str	r2, [r3, #12]
 80106a2:	4a73      	ldr	r2, [pc, #460]	@ (8010870 <tcp_process+0x7cc>)
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6013      	str	r3, [r2, #0]
 80106a8:	f002 fcf6 	bl	8013098 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80106ac:	e0d2      	b.n	8010854 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	8b5b      	ldrh	r3, [r3, #26]
 80106b2:	f043 0302 	orr.w	r3, r3, #2
 80106b6:	b29a      	uxth	r2, r3
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2208      	movs	r2, #8
 80106c0:	751a      	strb	r2, [r3, #20]
      break;
 80106c2:	e0c7      	b.n	8010854 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106c4:	4b6b      	ldr	r3, [pc, #428]	@ (8010874 <tcp_process+0x7d0>)
 80106c6:	781b      	ldrb	r3, [r3, #0]
 80106c8:	f003 0310 	and.w	r3, r3, #16
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	f000 80c1 	beq.w	8010854 <tcp_process+0x7b0>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80106d6:	4b68      	ldr	r3, [pc, #416]	@ (8010878 <tcp_process+0x7d4>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	429a      	cmp	r2, r3
 80106dc:	f040 80ba 	bne.w	8010854 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	f040 80b5 	bne.w	8010854 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2206      	movs	r2, #6
 80106ee:	751a      	strb	r2, [r3, #20]
      break;
 80106f0:	e0b0      	b.n	8010854 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f000 f9ca 	bl	8010a8c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80106f8:	4b60      	ldr	r3, [pc, #384]	@ (801087c <tcp_process+0x7d8>)
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	f003 0320 	and.w	r3, r3, #32
 8010700:	2b00      	cmp	r3, #0
 8010702:	f000 80a9 	beq.w	8010858 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	8b5b      	ldrh	r3, [r3, #26]
 801070a:	f043 0302 	orr.w	r3, r3, #2
 801070e:	b29a      	uxth	r2, r3
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f7fe fd39 	bl	800f18c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801071a:	4b59      	ldr	r3, [pc, #356]	@ (8010880 <tcp_process+0x7dc>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	429a      	cmp	r2, r3
 8010722:	d105      	bne.n	8010730 <tcp_process+0x68c>
 8010724:	4b56      	ldr	r3, [pc, #344]	@ (8010880 <tcp_process+0x7dc>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	68db      	ldr	r3, [r3, #12]
 801072a:	4a55      	ldr	r2, [pc, #340]	@ (8010880 <tcp_process+0x7dc>)
 801072c:	6013      	str	r3, [r2, #0]
 801072e:	e013      	b.n	8010758 <tcp_process+0x6b4>
 8010730:	4b53      	ldr	r3, [pc, #332]	@ (8010880 <tcp_process+0x7dc>)
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	613b      	str	r3, [r7, #16]
 8010736:	e00c      	b.n	8010752 <tcp_process+0x6ae>
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	68db      	ldr	r3, [r3, #12]
 801073c:	687a      	ldr	r2, [r7, #4]
 801073e:	429a      	cmp	r2, r3
 8010740:	d104      	bne.n	801074c <tcp_process+0x6a8>
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	68da      	ldr	r2, [r3, #12]
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	60da      	str	r2, [r3, #12]
 801074a:	e005      	b.n	8010758 <tcp_process+0x6b4>
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	68db      	ldr	r3, [r3, #12]
 8010750:	613b      	str	r3, [r7, #16]
 8010752:	693b      	ldr	r3, [r7, #16]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d1ef      	bne.n	8010738 <tcp_process+0x694>
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2200      	movs	r2, #0
 801075c:	60da      	str	r2, [r3, #12]
 801075e:	4b43      	ldr	r3, [pc, #268]	@ (801086c <tcp_process+0x7c8>)
 8010760:	2201      	movs	r2, #1
 8010762:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	220a      	movs	r2, #10
 8010768:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801076a:	4b41      	ldr	r3, [pc, #260]	@ (8010870 <tcp_process+0x7cc>)
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	60da      	str	r2, [r3, #12]
 8010772:	4a3f      	ldr	r2, [pc, #252]	@ (8010870 <tcp_process+0x7cc>)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6013      	str	r3, [r2, #0]
 8010778:	f002 fc8e 	bl	8013098 <tcp_timer_needed>
      }
      break;
 801077c:	e06c      	b.n	8010858 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f000 f984 	bl	8010a8c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010784:	4b3b      	ldr	r3, [pc, #236]	@ (8010874 <tcp_process+0x7d0>)
 8010786:	781b      	ldrb	r3, [r3, #0]
 8010788:	f003 0310 	and.w	r3, r3, #16
 801078c:	2b00      	cmp	r3, #0
 801078e:	d065      	beq.n	801085c <tcp_process+0x7b8>
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010794:	4b38      	ldr	r3, [pc, #224]	@ (8010878 <tcp_process+0x7d4>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	429a      	cmp	r2, r3
 801079a:	d15f      	bne.n	801085c <tcp_process+0x7b8>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d15b      	bne.n	801085c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	f7fe fcf1 	bl	800f18c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80107aa:	4b35      	ldr	r3, [pc, #212]	@ (8010880 <tcp_process+0x7dc>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	687a      	ldr	r2, [r7, #4]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d105      	bne.n	80107c0 <tcp_process+0x71c>
 80107b4:	4b32      	ldr	r3, [pc, #200]	@ (8010880 <tcp_process+0x7dc>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	68db      	ldr	r3, [r3, #12]
 80107ba:	4a31      	ldr	r2, [pc, #196]	@ (8010880 <tcp_process+0x7dc>)
 80107bc:	6013      	str	r3, [r2, #0]
 80107be:	e013      	b.n	80107e8 <tcp_process+0x744>
 80107c0:	4b2f      	ldr	r3, [pc, #188]	@ (8010880 <tcp_process+0x7dc>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	60fb      	str	r3, [r7, #12]
 80107c6:	e00c      	b.n	80107e2 <tcp_process+0x73e>
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	68db      	ldr	r3, [r3, #12]
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d104      	bne.n	80107dc <tcp_process+0x738>
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	68da      	ldr	r2, [r3, #12]
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	60da      	str	r2, [r3, #12]
 80107da:	e005      	b.n	80107e8 <tcp_process+0x744>
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	68db      	ldr	r3, [r3, #12]
 80107e0:	60fb      	str	r3, [r7, #12]
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d1ef      	bne.n	80107c8 <tcp_process+0x724>
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2200      	movs	r2, #0
 80107ec:	60da      	str	r2, [r3, #12]
 80107ee:	4b1f      	ldr	r3, [pc, #124]	@ (801086c <tcp_process+0x7c8>)
 80107f0:	2201      	movs	r2, #1
 80107f2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	220a      	movs	r2, #10
 80107f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80107fa:	4b1d      	ldr	r3, [pc, #116]	@ (8010870 <tcp_process+0x7cc>)
 80107fc:	681a      	ldr	r2, [r3, #0]
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	60da      	str	r2, [r3, #12]
 8010802:	4a1b      	ldr	r2, [pc, #108]	@ (8010870 <tcp_process+0x7cc>)
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6013      	str	r3, [r2, #0]
 8010808:	f002 fc46 	bl	8013098 <tcp_timer_needed>
      }
      break;
 801080c:	e026      	b.n	801085c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f000 f93c 	bl	8010a8c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010814:	4b17      	ldr	r3, [pc, #92]	@ (8010874 <tcp_process+0x7d0>)
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	f003 0310 	and.w	r3, r3, #16
 801081c:	2b00      	cmp	r3, #0
 801081e:	d01f      	beq.n	8010860 <tcp_process+0x7bc>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010824:	4b14      	ldr	r3, [pc, #80]	@ (8010878 <tcp_process+0x7d4>)
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	429a      	cmp	r2, r3
 801082a:	d119      	bne.n	8010860 <tcp_process+0x7bc>
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010830:	2b00      	cmp	r3, #0
 8010832:	d115      	bne.n	8010860 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010834:	4b11      	ldr	r3, [pc, #68]	@ (801087c <tcp_process+0x7d8>)
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	f043 0310 	orr.w	r3, r3, #16
 801083c:	b2da      	uxtb	r2, r3
 801083e:	4b0f      	ldr	r3, [pc, #60]	@ (801087c <tcp_process+0x7d8>)
 8010840:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010842:	e00d      	b.n	8010860 <tcp_process+0x7bc>
    default:
      break;
 8010844:	bf00      	nop
 8010846:	e00c      	b.n	8010862 <tcp_process+0x7be>
      break;
 8010848:	bf00      	nop
 801084a:	e00a      	b.n	8010862 <tcp_process+0x7be>
      break;
 801084c:	bf00      	nop
 801084e:	e008      	b.n	8010862 <tcp_process+0x7be>
      break;
 8010850:	bf00      	nop
 8010852:	e006      	b.n	8010862 <tcp_process+0x7be>
      break;
 8010854:	bf00      	nop
 8010856:	e004      	b.n	8010862 <tcp_process+0x7be>
      break;
 8010858:	bf00      	nop
 801085a:	e002      	b.n	8010862 <tcp_process+0x7be>
      break;
 801085c:	bf00      	nop
 801085e:	e000      	b.n	8010862 <tcp_process+0x7be>
      break;
 8010860:	bf00      	nop
  }
  return ERR_OK;
 8010862:	2300      	movs	r3, #0
}
 8010864:	4618      	mov	r0, r3
 8010866:	3724      	adds	r7, #36	@ 0x24
 8010868:	46bd      	mov	sp, r7
 801086a:	bd90      	pop	{r4, r7, pc}
 801086c:	2400c9e0 	.word	0x2400c9e0
 8010870:	2400c9dc 	.word	0x2400c9dc
 8010874:	2400ca10 	.word	0x2400ca10
 8010878:	2400ca08 	.word	0x2400ca08
 801087c:	2400ca11 	.word	0x2400ca11
 8010880:	2400c9d8 	.word	0x2400c9d8

08010884 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010884:	b590      	push	{r4, r7, lr}
 8010886:	b085      	sub	sp, #20
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d106      	bne.n	80108a2 <tcp_oos_insert_segment+0x1e>
 8010894:	4b3b      	ldr	r3, [pc, #236]	@ (8010984 <tcp_oos_insert_segment+0x100>)
 8010896:	f240 421f 	movw	r2, #1055	@ 0x41f
 801089a:	493b      	ldr	r1, [pc, #236]	@ (8010988 <tcp_oos_insert_segment+0x104>)
 801089c:	483b      	ldr	r0, [pc, #236]	@ (801098c <tcp_oos_insert_segment+0x108>)
 801089e:	f005 fc0d 	bl	80160bc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	68db      	ldr	r3, [r3, #12]
 80108a6:	899b      	ldrh	r3, [r3, #12]
 80108a8:	b29b      	uxth	r3, r3
 80108aa:	4618      	mov	r0, r3
 80108ac:	f7fb fb3e 	bl	800bf2c <lwip_htons>
 80108b0:	4603      	mov	r3, r0
 80108b2:	b2db      	uxtb	r3, r3
 80108b4:	f003 0301 	and.w	r3, r3, #1
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d028      	beq.n	801090e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80108bc:	6838      	ldr	r0, [r7, #0]
 80108be:	f7fe fa63 	bl	800ed88 <tcp_segs_free>
    next = NULL;
 80108c2:	2300      	movs	r3, #0
 80108c4:	603b      	str	r3, [r7, #0]
 80108c6:	e056      	b.n	8010976 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	68db      	ldr	r3, [r3, #12]
 80108cc:	899b      	ldrh	r3, [r3, #12]
 80108ce:	b29b      	uxth	r3, r3
 80108d0:	4618      	mov	r0, r3
 80108d2:	f7fb fb2b 	bl	800bf2c <lwip_htons>
 80108d6:	4603      	mov	r3, r0
 80108d8:	b2db      	uxtb	r3, r3
 80108da:	f003 0301 	and.w	r3, r3, #1
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d00d      	beq.n	80108fe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	68db      	ldr	r3, [r3, #12]
 80108e6:	899b      	ldrh	r3, [r3, #12]
 80108e8:	b29c      	uxth	r4, r3
 80108ea:	2001      	movs	r0, #1
 80108ec:	f7fb fb1e 	bl	800bf2c <lwip_htons>
 80108f0:	4603      	mov	r3, r0
 80108f2:	461a      	mov	r2, r3
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	68db      	ldr	r3, [r3, #12]
 80108f8:	4322      	orrs	r2, r4
 80108fa:	b292      	uxth	r2, r2
 80108fc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010908:	68f8      	ldr	r0, [r7, #12]
 801090a:	f7fe fa52 	bl	800edb2 <tcp_seg_free>
    while (next &&
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d00e      	beq.n	8010932 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	891b      	ldrh	r3, [r3, #8]
 8010918:	461a      	mov	r2, r3
 801091a:	4b1d      	ldr	r3, [pc, #116]	@ (8010990 <tcp_oos_insert_segment+0x10c>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	441a      	add	r2, r3
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	68db      	ldr	r3, [r3, #12]
 8010924:	685b      	ldr	r3, [r3, #4]
 8010926:	6839      	ldr	r1, [r7, #0]
 8010928:	8909      	ldrh	r1, [r1, #8]
 801092a:	440b      	add	r3, r1
 801092c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801092e:	2b00      	cmp	r3, #0
 8010930:	daca      	bge.n	80108c8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d01e      	beq.n	8010976 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	891b      	ldrh	r3, [r3, #8]
 801093c:	461a      	mov	r2, r3
 801093e:	4b14      	ldr	r3, [pc, #80]	@ (8010990 <tcp_oos_insert_segment+0x10c>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	441a      	add	r2, r3
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	68db      	ldr	r3, [r3, #12]
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801094c:	2b00      	cmp	r3, #0
 801094e:	dd12      	ble.n	8010976 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	68db      	ldr	r3, [r3, #12]
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	b29a      	uxth	r2, r3
 8010958:	4b0d      	ldr	r3, [pc, #52]	@ (8010990 <tcp_oos_insert_segment+0x10c>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	b29b      	uxth	r3, r3
 801095e:	1ad3      	subs	r3, r2, r3
 8010960:	b29a      	uxth	r2, r3
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	685a      	ldr	r2, [r3, #4]
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	891b      	ldrh	r3, [r3, #8]
 801096e:	4619      	mov	r1, r3
 8010970:	4610      	mov	r0, r2
 8010972:	f7fc fe13 	bl	800d59c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	683a      	ldr	r2, [r7, #0]
 801097a:	601a      	str	r2, [r3, #0]
}
 801097c:	bf00      	nop
 801097e:	3714      	adds	r7, #20
 8010980:	46bd      	mov	sp, r7
 8010982:	bd90      	pop	{r4, r7, pc}
 8010984:	080188f8 	.word	0x080188f8
 8010988:	08018bb8 	.word	0x08018bb8
 801098c:	08018944 	.word	0x08018944
 8010990:	2400ca04 	.word	0x2400ca04

08010994 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010994:	b5b0      	push	{r4, r5, r7, lr}
 8010996:	b086      	sub	sp, #24
 8010998:	af00      	add	r7, sp, #0
 801099a:	60f8      	str	r0, [r7, #12]
 801099c:	60b9      	str	r1, [r7, #8]
 801099e:	607a      	str	r2, [r7, #4]
 80109a0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80109a2:	e03e      	b.n	8010a22 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7fd f806 	bl	800d9c4 <pbuf_clen>
 80109b8:	4603      	mov	r3, r0
 80109ba:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80109c2:	8a7a      	ldrh	r2, [r7, #18]
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d906      	bls.n	80109d6 <tcp_free_acked_segments+0x42>
 80109c8:	4b2a      	ldr	r3, [pc, #168]	@ (8010a74 <tcp_free_acked_segments+0xe0>)
 80109ca:	f240 4257 	movw	r2, #1111	@ 0x457
 80109ce:	492a      	ldr	r1, [pc, #168]	@ (8010a78 <tcp_free_acked_segments+0xe4>)
 80109d0:	482a      	ldr	r0, [pc, #168]	@ (8010a7c <tcp_free_acked_segments+0xe8>)
 80109d2:	f005 fb73 	bl	80160bc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80109dc:	8a7b      	ldrh	r3, [r7, #18]
 80109de:	1ad3      	subs	r3, r2, r3
 80109e0:	b29a      	uxth	r2, r3
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	891a      	ldrh	r2, [r3, #8]
 80109ec:	4b24      	ldr	r3, [pc, #144]	@ (8010a80 <tcp_free_acked_segments+0xec>)
 80109ee:	881b      	ldrh	r3, [r3, #0]
 80109f0:	4413      	add	r3, r2
 80109f2:	b29a      	uxth	r2, r3
 80109f4:	4b22      	ldr	r3, [pc, #136]	@ (8010a80 <tcp_free_acked_segments+0xec>)
 80109f6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80109f8:	6978      	ldr	r0, [r7, #20]
 80109fa:	f7fe f9da 	bl	800edb2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d00c      	beq.n	8010a22 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d109      	bne.n	8010a22 <tcp_free_acked_segments+0x8e>
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d106      	bne.n	8010a22 <tcp_free_acked_segments+0x8e>
 8010a14:	4b17      	ldr	r3, [pc, #92]	@ (8010a74 <tcp_free_acked_segments+0xe0>)
 8010a16:	f240 4261 	movw	r2, #1121	@ 0x461
 8010a1a:	491a      	ldr	r1, [pc, #104]	@ (8010a84 <tcp_free_acked_segments+0xf0>)
 8010a1c:	4817      	ldr	r0, [pc, #92]	@ (8010a7c <tcp_free_acked_segments+0xe8>)
 8010a1e:	f005 fb4d 	bl	80160bc <iprintf>
  while (seg_list != NULL &&
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d020      	beq.n	8010a6a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	68db      	ldr	r3, [r3, #12]
 8010a2c:	685b      	ldr	r3, [r3, #4]
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7fb fa91 	bl	800bf56 <lwip_htonl>
 8010a34:	4604      	mov	r4, r0
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	891b      	ldrh	r3, [r3, #8]
 8010a3a:	461d      	mov	r5, r3
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	68db      	ldr	r3, [r3, #12]
 8010a40:	899b      	ldrh	r3, [r3, #12]
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7fb fa71 	bl	800bf2c <lwip_htons>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	b2db      	uxtb	r3, r3
 8010a4e:	f003 0303 	and.w	r3, r3, #3
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d001      	beq.n	8010a5a <tcp_free_acked_segments+0xc6>
 8010a56:	2301      	movs	r3, #1
 8010a58:	e000      	b.n	8010a5c <tcp_free_acked_segments+0xc8>
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	442b      	add	r3, r5
 8010a5e:	18e2      	adds	r2, r4, r3
 8010a60:	4b09      	ldr	r3, [pc, #36]	@ (8010a88 <tcp_free_acked_segments+0xf4>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	dd9c      	ble.n	80109a4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010a6a:	68bb      	ldr	r3, [r7, #8]
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3718      	adds	r7, #24
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bdb0      	pop	{r4, r5, r7, pc}
 8010a74:	080188f8 	.word	0x080188f8
 8010a78:	08018be0 	.word	0x08018be0
 8010a7c:	08018944 	.word	0x08018944
 8010a80:	2400ca0c 	.word	0x2400ca0c
 8010a84:	08018c08 	.word	0x08018c08
 8010a88:	2400ca08 	.word	0x2400ca08

08010a8c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010a8c:	b5b0      	push	{r4, r5, r7, lr}
 8010a8e:	b094      	sub	sp, #80	@ 0x50
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010a94:	2300      	movs	r3, #0
 8010a96:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d106      	bne.n	8010aac <tcp_receive+0x20>
 8010a9e:	4b91      	ldr	r3, [pc, #580]	@ (8010ce4 <tcp_receive+0x258>)
 8010aa0:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010aa4:	4990      	ldr	r1, [pc, #576]	@ (8010ce8 <tcp_receive+0x25c>)
 8010aa6:	4891      	ldr	r0, [pc, #580]	@ (8010cec <tcp_receive+0x260>)
 8010aa8:	f005 fb08 	bl	80160bc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	7d1b      	ldrb	r3, [r3, #20]
 8010ab0:	2b03      	cmp	r3, #3
 8010ab2:	d806      	bhi.n	8010ac2 <tcp_receive+0x36>
 8010ab4:	4b8b      	ldr	r3, [pc, #556]	@ (8010ce4 <tcp_receive+0x258>)
 8010ab6:	f240 427c 	movw	r2, #1148	@ 0x47c
 8010aba:	498d      	ldr	r1, [pc, #564]	@ (8010cf0 <tcp_receive+0x264>)
 8010abc:	488b      	ldr	r0, [pc, #556]	@ (8010cec <tcp_receive+0x260>)
 8010abe:	f005 fafd 	bl	80160bc <iprintf>

  if (flags & TCP_ACK) {
 8010ac2:	4b8c      	ldr	r3, [pc, #560]	@ (8010cf4 <tcp_receive+0x268>)
 8010ac4:	781b      	ldrb	r3, [r3, #0]
 8010ac6:	f003 0310 	and.w	r3, r3, #16
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	f000 8264 	beq.w	8010f98 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010adc:	4413      	add	r3, r2
 8010ade:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010ae4:	4b84      	ldr	r3, [pc, #528]	@ (8010cf8 <tcp_receive+0x26c>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	1ad3      	subs	r3, r2, r3
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	db1b      	blt.n	8010b26 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010af2:	4b81      	ldr	r3, [pc, #516]	@ (8010cf8 <tcp_receive+0x26c>)
 8010af4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d106      	bne.n	8010b08 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010afe:	4b7f      	ldr	r3, [pc, #508]	@ (8010cfc <tcp_receive+0x270>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	1ad3      	subs	r3, r2, r3
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	db0e      	blt.n	8010b26 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010b0c:	4b7b      	ldr	r3, [pc, #492]	@ (8010cfc <tcp_receive+0x270>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d125      	bne.n	8010b60 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010b14:	4b7a      	ldr	r3, [pc, #488]	@ (8010d00 <tcp_receive+0x274>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	89db      	ldrh	r3, [r3, #14]
 8010b1a:	b29a      	uxth	r2, r3
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010b22:	429a      	cmp	r2, r3
 8010b24:	d91c      	bls.n	8010b60 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010b26:	4b76      	ldr	r3, [pc, #472]	@ (8010d00 <tcp_receive+0x274>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	89db      	ldrh	r3, [r3, #14]
 8010b2c:	b29a      	uxth	r2, r3
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d205      	bcs.n	8010b50 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8010b50:	4b69      	ldr	r3, [pc, #420]	@ (8010cf8 <tcp_receive+0x26c>)
 8010b52:	681a      	ldr	r2, [r3, #0]
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8010b58:	4b68      	ldr	r3, [pc, #416]	@ (8010cfc <tcp_receive+0x270>)
 8010b5a:	681a      	ldr	r2, [r3, #0]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010b60:	4b66      	ldr	r3, [pc, #408]	@ (8010cfc <tcp_receive+0x270>)
 8010b62:	681a      	ldr	r2, [r3, #0]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b68:	1ad3      	subs	r3, r2, r3
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	dc58      	bgt.n	8010c20 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010b6e:	4b65      	ldr	r3, [pc, #404]	@ (8010d04 <tcp_receive+0x278>)
 8010b70:	881b      	ldrh	r3, [r3, #0]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d14b      	bne.n	8010c0e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010b7a:	687a      	ldr	r2, [r7, #4]
 8010b7c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010b80:	4413      	add	r3, r2
 8010b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d142      	bne.n	8010c0e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	db3d      	blt.n	8010c0e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010b96:	4b59      	ldr	r3, [pc, #356]	@ (8010cfc <tcp_receive+0x270>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	429a      	cmp	r2, r3
 8010b9c:	d137      	bne.n	8010c0e <tcp_receive+0x182>
              found_dupack = 1;
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010ba8:	2bff      	cmp	r3, #255	@ 0xff
 8010baa:	d007      	beq.n	8010bbc <tcp_receive+0x130>
                ++pcb->dupacks;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	b2da      	uxtb	r2, r3
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010bc2:	2b03      	cmp	r3, #3
 8010bc4:	d91b      	bls.n	8010bfe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010bd0:	4413      	add	r3, r2
 8010bd2:	b29a      	uxth	r2, r3
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	d30a      	bcc.n	8010bf4 <tcp_receive+0x168>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010be8:	4413      	add	r3, r2
 8010bea:	b29a      	uxth	r2, r3
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010bf2:	e004      	b.n	8010bfe <tcp_receive+0x172>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010bfa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010c04:	2b02      	cmp	r3, #2
 8010c06:	d902      	bls.n	8010c0e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f001 fee9 	bl	80129e0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	f040 8161 	bne.w	8010ed8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2200      	movs	r2, #0
 8010c1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010c1e:	e15b      	b.n	8010ed8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c20:	4b36      	ldr	r3, [pc, #216]	@ (8010cfc <tcp_receive+0x270>)
 8010c22:	681a      	ldr	r2, [r3, #0]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c28:	1ad3      	subs	r3, r2, r3
 8010c2a:	3b01      	subs	r3, #1
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	f2c0 814e 	blt.w	8010ece <tcp_receive+0x442>
 8010c32:	4b32      	ldr	r3, [pc, #200]	@ (8010cfc <tcp_receive+0x270>)
 8010c34:	681a      	ldr	r2, [r3, #0]
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c3a:	1ad3      	subs	r3, r2, r3
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	f300 8146 	bgt.w	8010ece <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	8b5b      	ldrh	r3, [r3, #26]
 8010c46:	f003 0304 	and.w	r3, r3, #4
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d010      	beq.n	8010c70 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	8b5b      	ldrh	r3, [r3, #26]
 8010c52:	f023 0304 	bic.w	r3, r3, #4
 8010c56:	b29a      	uxth	r2, r3
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2200      	movs	r2, #0
 8010c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010c7e:	10db      	asrs	r3, r3, #3
 8010c80:	b21b      	sxth	r3, r3
 8010c82:	b29a      	uxth	r2, r3
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	4413      	add	r3, r2
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	b21a      	sxth	r2, r3
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010c98:	4b18      	ldr	r3, [pc, #96]	@ (8010cfc <tcp_receive+0x270>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	b29a      	uxth	r2, r3
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ca2:	b29b      	uxth	r3, r3
 8010ca4:	1ad3      	subs	r3, r2, r3
 8010ca6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2200      	movs	r2, #0
 8010cac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010cb0:	4b12      	ldr	r3, [pc, #72]	@ (8010cfc <tcp_receive+0x270>)
 8010cb2:	681a      	ldr	r2, [r3, #0]
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	7d1b      	ldrb	r3, [r3, #20]
 8010cbc:	2b03      	cmp	r3, #3
 8010cbe:	f240 8097 	bls.w	8010df0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010cce:	429a      	cmp	r2, r3
 8010cd0:	d245      	bcs.n	8010d5e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	8b5b      	ldrh	r3, [r3, #26]
 8010cd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d014      	beq.n	8010d08 <tcp_receive+0x27c>
 8010cde:	2301      	movs	r3, #1
 8010ce0:	e013      	b.n	8010d0a <tcp_receive+0x27e>
 8010ce2:	bf00      	nop
 8010ce4:	080188f8 	.word	0x080188f8
 8010ce8:	08018c28 	.word	0x08018c28
 8010cec:	08018944 	.word	0x08018944
 8010cf0:	08018c44 	.word	0x08018c44
 8010cf4:	2400ca10 	.word	0x2400ca10
 8010cf8:	2400ca04 	.word	0x2400ca04
 8010cfc:	2400ca08 	.word	0x2400ca08
 8010d00:	2400c9f4 	.word	0x2400c9f4
 8010d04:	2400ca0e 	.word	0x2400ca0e
 8010d08:	2302      	movs	r3, #2
 8010d0a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010d0e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010d12:	b29a      	uxth	r2, r3
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d18:	fb12 f303 	smulbb	r3, r2, r3
 8010d1c:	b29b      	uxth	r3, r3
 8010d1e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010d20:	4293      	cmp	r3, r2
 8010d22:	bf28      	it	cs
 8010d24:	4613      	movcs	r3, r2
 8010d26:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010d2e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010d30:	4413      	add	r3, r2
 8010d32:	b29a      	uxth	r2, r3
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010d3a:	429a      	cmp	r2, r3
 8010d3c:	d309      	bcc.n	8010d52 <tcp_receive+0x2c6>
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010d44:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010d46:	4413      	add	r3, r2
 8010d48:	b29a      	uxth	r2, r3
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010d50:	e04e      	b.n	8010df0 <tcp_receive+0x364>
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010d58:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010d5c:	e048      	b.n	8010df0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010d64:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010d66:	4413      	add	r3, r2
 8010d68:	b29a      	uxth	r2, r3
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d309      	bcc.n	8010d88 <tcp_receive+0x2fc>
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010d7a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010d7c:	4413      	add	r3, r2
 8010d7e:	b29a      	uxth	r2, r3
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010d86:	e004      	b.n	8010d92 <tcp_receive+0x306>
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010d8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d326      	bcc.n	8010df0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010dae:	1ad3      	subs	r3, r2, r3
 8010db0:	b29a      	uxth	r2, r3
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010dc2:	4413      	add	r3, r2
 8010dc4:	b29a      	uxth	r2, r3
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d30a      	bcc.n	8010de6 <tcp_receive+0x35a>
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010dda:	4413      	add	r3, r2
 8010ddc:	b29a      	uxth	r2, r3
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010de4:	e004      	b.n	8010df0 <tcp_receive+0x364>
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010dec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010df8:	4a98      	ldr	r2, [pc, #608]	@ (801105c <tcp_receive+0x5d0>)
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f7ff fdca 	bl	8010994 <tcp_free_acked_segments>
 8010e00:	4602      	mov	r2, r0
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e0e:	4a94      	ldr	r2, [pc, #592]	@ (8011060 <tcp_receive+0x5d4>)
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f7ff fdbf 	bl	8010994 <tcp_free_acked_segments>
 8010e16:	4602      	mov	r2, r0
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d104      	bne.n	8010e2e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010e2a:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010e2c:	e002      	b.n	8010e34 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2200      	movs	r2, #0
 8010e32:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2200      	movs	r2, #0
 8010e38:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d103      	bne.n	8010e4a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2200      	movs	r2, #0
 8010e46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010e50:	4b84      	ldr	r3, [pc, #528]	@ (8011064 <tcp_receive+0x5d8>)
 8010e52:	881b      	ldrh	r3, [r3, #0]
 8010e54:	4413      	add	r3, r2
 8010e56:	b29a      	uxth	r2, r3
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	8b5b      	ldrh	r3, [r3, #26]
 8010e62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d035      	beq.n	8010ed6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d118      	bne.n	8010ea4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d00c      	beq.n	8010e94 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e82:	68db      	ldr	r3, [r3, #12]
 8010e84:	685b      	ldr	r3, [r3, #4]
 8010e86:	4618      	mov	r0, r3
 8010e88:	f7fb f865 	bl	800bf56 <lwip_htonl>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	dc20      	bgt.n	8010ed6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	8b5b      	ldrh	r3, [r3, #26]
 8010e98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010e9c:	b29a      	uxth	r2, r3
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ea2:	e018      	b.n	8010ed6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010eac:	68db      	ldr	r3, [r3, #12]
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7fb f850 	bl	800bf56 <lwip_htonl>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	1ae3      	subs	r3, r4, r3
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	dc0b      	bgt.n	8010ed6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	8b5b      	ldrh	r3, [r3, #26]
 8010ec2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010ec6:	b29a      	uxth	r2, r3
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ecc:	e003      	b.n	8010ed6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f001 ff72 	bl	8012db8 <tcp_send_empty_ack>
 8010ed4:	e000      	b.n	8010ed8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ed6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d05b      	beq.n	8010f98 <tcp_receive+0x50c>
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010ee4:	4b60      	ldr	r3, [pc, #384]	@ (8011068 <tcp_receive+0x5dc>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	1ad3      	subs	r3, r2, r3
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	da54      	bge.n	8010f98 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010eee:	4b5f      	ldr	r3, [pc, #380]	@ (801106c <tcp_receive+0x5e0>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	b29a      	uxth	r2, r3
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ef8:	b29b      	uxth	r3, r3
 8010efa:	1ad3      	subs	r3, r2, r3
 8010efc:	b29b      	uxth	r3, r3
 8010efe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010f02:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010f0c:	10db      	asrs	r3, r3, #3
 8010f0e:	b21b      	sxth	r3, r3
 8010f10:	b29b      	uxth	r3, r3
 8010f12:	1ad3      	subs	r3, r2, r3
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010f20:	b29a      	uxth	r2, r3
 8010f22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010f26:	4413      	add	r3, r2
 8010f28:	b29b      	uxth	r3, r3
 8010f2a:	b21a      	sxth	r2, r3
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8010f30:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	da05      	bge.n	8010f44 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010f38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010f3c:	425b      	negs	r3, r3
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010f44:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010f4e:	109b      	asrs	r3, r3, #2
 8010f50:	b21b      	sxth	r3, r3
 8010f52:	b29b      	uxth	r3, r3
 8010f54:	1ad3      	subs	r3, r2, r3
 8010f56:	b29b      	uxth	r3, r3
 8010f58:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010f62:	b29a      	uxth	r2, r3
 8010f64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010f68:	4413      	add	r3, r2
 8010f6a:	b29b      	uxth	r3, r3
 8010f6c:	b21a      	sxth	r2, r3
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010f78:	10db      	asrs	r3, r3, #3
 8010f7a:	b21b      	sxth	r3, r3
 8010f7c:	b29a      	uxth	r2, r3
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010f84:	b29b      	uxth	r3, r3
 8010f86:	4413      	add	r3, r2
 8010f88:	b29b      	uxth	r3, r3
 8010f8a:	b21a      	sxth	r2, r3
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2200      	movs	r2, #0
 8010f96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010f98:	4b35      	ldr	r3, [pc, #212]	@ (8011070 <tcp_receive+0x5e4>)
 8010f9a:	881b      	ldrh	r3, [r3, #0]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	f000 84df 	beq.w	8011960 <tcp_receive+0xed4>
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	7d1b      	ldrb	r3, [r3, #20]
 8010fa6:	2b06      	cmp	r3, #6
 8010fa8:	f200 84da 	bhi.w	8011960 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010fb0:	4b30      	ldr	r3, [pc, #192]	@ (8011074 <tcp_receive+0x5e8>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	1ad3      	subs	r3, r2, r3
 8010fb6:	3b01      	subs	r3, #1
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	f2c0 808f 	blt.w	80110dc <tcp_receive+0x650>
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8011070 <tcp_receive+0x5e4>)
 8010fc4:	881b      	ldrh	r3, [r3, #0]
 8010fc6:	4619      	mov	r1, r3
 8010fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8011074 <tcp_receive+0x5e8>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	440b      	add	r3, r1
 8010fce:	1ad3      	subs	r3, r2, r3
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	f300 8082 	bgt.w	80110dc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010fd8:	4b27      	ldr	r3, [pc, #156]	@ (8011078 <tcp_receive+0x5ec>)
 8010fda:	685b      	ldr	r3, [r3, #4]
 8010fdc:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010fe2:	4b24      	ldr	r3, [pc, #144]	@ (8011074 <tcp_receive+0x5e8>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	1ad3      	subs	r3, r2, r3
 8010fe8:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010fea:	4b23      	ldr	r3, [pc, #140]	@ (8011078 <tcp_receive+0x5ec>)
 8010fec:	685b      	ldr	r3, [r3, #4]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d106      	bne.n	8011000 <tcp_receive+0x574>
 8010ff2:	4b22      	ldr	r3, [pc, #136]	@ (801107c <tcp_receive+0x5f0>)
 8010ff4:	f240 5294 	movw	r2, #1428	@ 0x594
 8010ff8:	4921      	ldr	r1, [pc, #132]	@ (8011080 <tcp_receive+0x5f4>)
 8010ffa:	4822      	ldr	r0, [pc, #136]	@ (8011084 <tcp_receive+0x5f8>)
 8010ffc:	f005 f85e 	bl	80160bc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011002:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011006:	4293      	cmp	r3, r2
 8011008:	d906      	bls.n	8011018 <tcp_receive+0x58c>
 801100a:	4b1c      	ldr	r3, [pc, #112]	@ (801107c <tcp_receive+0x5f0>)
 801100c:	f240 5295 	movw	r2, #1429	@ 0x595
 8011010:	491d      	ldr	r1, [pc, #116]	@ (8011088 <tcp_receive+0x5fc>)
 8011012:	481c      	ldr	r0, [pc, #112]	@ (8011084 <tcp_receive+0x5f8>)
 8011014:	f005 f852 	bl	80160bc <iprintf>
      off = (u16_t)off32;
 8011018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801101a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801101e:	4b16      	ldr	r3, [pc, #88]	@ (8011078 <tcp_receive+0x5ec>)
 8011020:	685b      	ldr	r3, [r3, #4]
 8011022:	891b      	ldrh	r3, [r3, #8]
 8011024:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011028:	429a      	cmp	r2, r3
 801102a:	d906      	bls.n	801103a <tcp_receive+0x5ae>
 801102c:	4b13      	ldr	r3, [pc, #76]	@ (801107c <tcp_receive+0x5f0>)
 801102e:	f240 5297 	movw	r2, #1431	@ 0x597
 8011032:	4916      	ldr	r1, [pc, #88]	@ (801108c <tcp_receive+0x600>)
 8011034:	4813      	ldr	r0, [pc, #76]	@ (8011084 <tcp_receive+0x5f8>)
 8011036:	f005 f841 	bl	80160bc <iprintf>
      inseg.len -= off;
 801103a:	4b0f      	ldr	r3, [pc, #60]	@ (8011078 <tcp_receive+0x5ec>)
 801103c:	891a      	ldrh	r2, [r3, #8]
 801103e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011042:	1ad3      	subs	r3, r2, r3
 8011044:	b29a      	uxth	r2, r3
 8011046:	4b0c      	ldr	r3, [pc, #48]	@ (8011078 <tcp_receive+0x5ec>)
 8011048:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801104a:	4b0b      	ldr	r3, [pc, #44]	@ (8011078 <tcp_receive+0x5ec>)
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	891a      	ldrh	r2, [r3, #8]
 8011050:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011054:	1ad3      	subs	r3, r2, r3
 8011056:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8011058:	e02a      	b.n	80110b0 <tcp_receive+0x624>
 801105a:	bf00      	nop
 801105c:	08018c60 	.word	0x08018c60
 8011060:	08018c68 	.word	0x08018c68
 8011064:	2400ca0c 	.word	0x2400ca0c
 8011068:	2400ca08 	.word	0x2400ca08
 801106c:	2400c9cc 	.word	0x2400c9cc
 8011070:	2400ca0e 	.word	0x2400ca0e
 8011074:	2400ca04 	.word	0x2400ca04
 8011078:	2400c9e4 	.word	0x2400c9e4
 801107c:	080188f8 	.word	0x080188f8
 8011080:	08018c70 	.word	0x08018c70
 8011084:	08018944 	.word	0x08018944
 8011088:	08018c80 	.word	0x08018c80
 801108c:	08018c90 	.word	0x08018c90
        off -= p->len;
 8011090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011092:	895b      	ldrh	r3, [r3, #10]
 8011094:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011098:	1ad3      	subs	r3, r2, r3
 801109a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801109e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110a0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80110a2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80110a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110a6:	2200      	movs	r2, #0
 80110a8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80110aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80110b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110b2:	895b      	ldrh	r3, [r3, #10]
 80110b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d8e9      	bhi.n	8011090 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80110bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80110c0:	4619      	mov	r1, r3
 80110c2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80110c4:	f7fc fb6a 	bl	800d79c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110cc:	4a90      	ldr	r2, [pc, #576]	@ (8011310 <tcp_receive+0x884>)
 80110ce:	6013      	str	r3, [r2, #0]
 80110d0:	4b90      	ldr	r3, [pc, #576]	@ (8011314 <tcp_receive+0x888>)
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	4a8e      	ldr	r2, [pc, #568]	@ (8011310 <tcp_receive+0x884>)
 80110d6:	6812      	ldr	r2, [r2, #0]
 80110d8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80110da:	e00d      	b.n	80110f8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80110dc:	4b8c      	ldr	r3, [pc, #560]	@ (8011310 <tcp_receive+0x884>)
 80110de:	681a      	ldr	r2, [r3, #0]
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110e4:	1ad3      	subs	r3, r2, r3
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	da06      	bge.n	80110f8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	8b5b      	ldrh	r3, [r3, #26]
 80110ee:	f043 0302 	orr.w	r3, r3, #2
 80110f2:	b29a      	uxth	r2, r3
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80110f8:	4b85      	ldr	r3, [pc, #532]	@ (8011310 <tcp_receive+0x884>)
 80110fa:	681a      	ldr	r2, [r3, #0]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011100:	1ad3      	subs	r3, r2, r3
 8011102:	2b00      	cmp	r3, #0
 8011104:	f2c0 8427 	blt.w	8011956 <tcp_receive+0xeca>
 8011108:	4b81      	ldr	r3, [pc, #516]	@ (8011310 <tcp_receive+0x884>)
 801110a:	681a      	ldr	r2, [r3, #0]
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011110:	6879      	ldr	r1, [r7, #4]
 8011112:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011114:	440b      	add	r3, r1
 8011116:	1ad3      	subs	r3, r2, r3
 8011118:	3301      	adds	r3, #1
 801111a:	2b00      	cmp	r3, #0
 801111c:	f300 841b 	bgt.w	8011956 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011124:	4b7a      	ldr	r3, [pc, #488]	@ (8011310 <tcp_receive+0x884>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	429a      	cmp	r2, r3
 801112a:	f040 8298 	bne.w	801165e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801112e:	4b79      	ldr	r3, [pc, #484]	@ (8011314 <tcp_receive+0x888>)
 8011130:	891c      	ldrh	r4, [r3, #8]
 8011132:	4b78      	ldr	r3, [pc, #480]	@ (8011314 <tcp_receive+0x888>)
 8011134:	68db      	ldr	r3, [r3, #12]
 8011136:	899b      	ldrh	r3, [r3, #12]
 8011138:	b29b      	uxth	r3, r3
 801113a:	4618      	mov	r0, r3
 801113c:	f7fa fef6 	bl	800bf2c <lwip_htons>
 8011140:	4603      	mov	r3, r0
 8011142:	b2db      	uxtb	r3, r3
 8011144:	f003 0303 	and.w	r3, r3, #3
 8011148:	2b00      	cmp	r3, #0
 801114a:	d001      	beq.n	8011150 <tcp_receive+0x6c4>
 801114c:	2301      	movs	r3, #1
 801114e:	e000      	b.n	8011152 <tcp_receive+0x6c6>
 8011150:	2300      	movs	r3, #0
 8011152:	4423      	add	r3, r4
 8011154:	b29a      	uxth	r2, r3
 8011156:	4b70      	ldr	r3, [pc, #448]	@ (8011318 <tcp_receive+0x88c>)
 8011158:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801115e:	4b6e      	ldr	r3, [pc, #440]	@ (8011318 <tcp_receive+0x88c>)
 8011160:	881b      	ldrh	r3, [r3, #0]
 8011162:	429a      	cmp	r2, r3
 8011164:	d274      	bcs.n	8011250 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011166:	4b6b      	ldr	r3, [pc, #428]	@ (8011314 <tcp_receive+0x888>)
 8011168:	68db      	ldr	r3, [r3, #12]
 801116a:	899b      	ldrh	r3, [r3, #12]
 801116c:	b29b      	uxth	r3, r3
 801116e:	4618      	mov	r0, r3
 8011170:	f7fa fedc 	bl	800bf2c <lwip_htons>
 8011174:	4603      	mov	r3, r0
 8011176:	b2db      	uxtb	r3, r3
 8011178:	f003 0301 	and.w	r3, r3, #1
 801117c:	2b00      	cmp	r3, #0
 801117e:	d01e      	beq.n	80111be <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011180:	4b64      	ldr	r3, [pc, #400]	@ (8011314 <tcp_receive+0x888>)
 8011182:	68db      	ldr	r3, [r3, #12]
 8011184:	899b      	ldrh	r3, [r3, #12]
 8011186:	b29b      	uxth	r3, r3
 8011188:	b21b      	sxth	r3, r3
 801118a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801118e:	b21c      	sxth	r4, r3
 8011190:	4b60      	ldr	r3, [pc, #384]	@ (8011314 <tcp_receive+0x888>)
 8011192:	68db      	ldr	r3, [r3, #12]
 8011194:	899b      	ldrh	r3, [r3, #12]
 8011196:	b29b      	uxth	r3, r3
 8011198:	4618      	mov	r0, r3
 801119a:	f7fa fec7 	bl	800bf2c <lwip_htons>
 801119e:	4603      	mov	r3, r0
 80111a0:	b2db      	uxtb	r3, r3
 80111a2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80111a6:	b29b      	uxth	r3, r3
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7fa febf 	bl	800bf2c <lwip_htons>
 80111ae:	4603      	mov	r3, r0
 80111b0:	b21b      	sxth	r3, r3
 80111b2:	4323      	orrs	r3, r4
 80111b4:	b21a      	sxth	r2, r3
 80111b6:	4b57      	ldr	r3, [pc, #348]	@ (8011314 <tcp_receive+0x888>)
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	b292      	uxth	r2, r2
 80111bc:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80111c2:	4b54      	ldr	r3, [pc, #336]	@ (8011314 <tcp_receive+0x888>)
 80111c4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80111c6:	4b53      	ldr	r3, [pc, #332]	@ (8011314 <tcp_receive+0x888>)
 80111c8:	68db      	ldr	r3, [r3, #12]
 80111ca:	899b      	ldrh	r3, [r3, #12]
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	4618      	mov	r0, r3
 80111d0:	f7fa feac 	bl	800bf2c <lwip_htons>
 80111d4:	4603      	mov	r3, r0
 80111d6:	b2db      	uxtb	r3, r3
 80111d8:	f003 0302 	and.w	r3, r3, #2
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d005      	beq.n	80111ec <tcp_receive+0x760>
            inseg.len -= 1;
 80111e0:	4b4c      	ldr	r3, [pc, #304]	@ (8011314 <tcp_receive+0x888>)
 80111e2:	891b      	ldrh	r3, [r3, #8]
 80111e4:	3b01      	subs	r3, #1
 80111e6:	b29a      	uxth	r2, r3
 80111e8:	4b4a      	ldr	r3, [pc, #296]	@ (8011314 <tcp_receive+0x888>)
 80111ea:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80111ec:	4b49      	ldr	r3, [pc, #292]	@ (8011314 <tcp_receive+0x888>)
 80111ee:	685b      	ldr	r3, [r3, #4]
 80111f0:	4a48      	ldr	r2, [pc, #288]	@ (8011314 <tcp_receive+0x888>)
 80111f2:	8912      	ldrh	r2, [r2, #8]
 80111f4:	4611      	mov	r1, r2
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7fc f9d0 	bl	800d59c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80111fc:	4b45      	ldr	r3, [pc, #276]	@ (8011314 <tcp_receive+0x888>)
 80111fe:	891c      	ldrh	r4, [r3, #8]
 8011200:	4b44      	ldr	r3, [pc, #272]	@ (8011314 <tcp_receive+0x888>)
 8011202:	68db      	ldr	r3, [r3, #12]
 8011204:	899b      	ldrh	r3, [r3, #12]
 8011206:	b29b      	uxth	r3, r3
 8011208:	4618      	mov	r0, r3
 801120a:	f7fa fe8f 	bl	800bf2c <lwip_htons>
 801120e:	4603      	mov	r3, r0
 8011210:	b2db      	uxtb	r3, r3
 8011212:	f003 0303 	and.w	r3, r3, #3
 8011216:	2b00      	cmp	r3, #0
 8011218:	d001      	beq.n	801121e <tcp_receive+0x792>
 801121a:	2301      	movs	r3, #1
 801121c:	e000      	b.n	8011220 <tcp_receive+0x794>
 801121e:	2300      	movs	r3, #0
 8011220:	4423      	add	r3, r4
 8011222:	b29a      	uxth	r2, r3
 8011224:	4b3c      	ldr	r3, [pc, #240]	@ (8011318 <tcp_receive+0x88c>)
 8011226:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011228:	4b3b      	ldr	r3, [pc, #236]	@ (8011318 <tcp_receive+0x88c>)
 801122a:	881b      	ldrh	r3, [r3, #0]
 801122c:	461a      	mov	r2, r3
 801122e:	4b38      	ldr	r3, [pc, #224]	@ (8011310 <tcp_receive+0x884>)
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	441a      	add	r2, r3
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011238:	6879      	ldr	r1, [r7, #4]
 801123a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801123c:	440b      	add	r3, r1
 801123e:	429a      	cmp	r2, r3
 8011240:	d006      	beq.n	8011250 <tcp_receive+0x7c4>
 8011242:	4b36      	ldr	r3, [pc, #216]	@ (801131c <tcp_receive+0x890>)
 8011244:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8011248:	4935      	ldr	r1, [pc, #212]	@ (8011320 <tcp_receive+0x894>)
 801124a:	4836      	ldr	r0, [pc, #216]	@ (8011324 <tcp_receive+0x898>)
 801124c:	f004 ff36 	bl	80160bc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011254:	2b00      	cmp	r3, #0
 8011256:	f000 80e6 	beq.w	8011426 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801125a:	4b2e      	ldr	r3, [pc, #184]	@ (8011314 <tcp_receive+0x888>)
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	899b      	ldrh	r3, [r3, #12]
 8011260:	b29b      	uxth	r3, r3
 8011262:	4618      	mov	r0, r3
 8011264:	f7fa fe62 	bl	800bf2c <lwip_htons>
 8011268:	4603      	mov	r3, r0
 801126a:	b2db      	uxtb	r3, r3
 801126c:	f003 0301 	and.w	r3, r3, #1
 8011270:	2b00      	cmp	r3, #0
 8011272:	d010      	beq.n	8011296 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011274:	e00a      	b.n	801128c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801127a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011280:	681a      	ldr	r2, [r3, #0]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8011286:	68f8      	ldr	r0, [r7, #12]
 8011288:	f7fd fd93 	bl	800edb2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011290:	2b00      	cmp	r3, #0
 8011292:	d1f0      	bne.n	8011276 <tcp_receive+0x7ea>
 8011294:	e0c7      	b.n	8011426 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801129c:	e051      	b.n	8011342 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801129e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112a0:	68db      	ldr	r3, [r3, #12]
 80112a2:	899b      	ldrh	r3, [r3, #12]
 80112a4:	b29b      	uxth	r3, r3
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7fa fe40 	bl	800bf2c <lwip_htons>
 80112ac:	4603      	mov	r3, r0
 80112ae:	b2db      	uxtb	r3, r3
 80112b0:	f003 0301 	and.w	r3, r3, #1
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d03c      	beq.n	8011332 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80112b8:	4b16      	ldr	r3, [pc, #88]	@ (8011314 <tcp_receive+0x888>)
 80112ba:	68db      	ldr	r3, [r3, #12]
 80112bc:	899b      	ldrh	r3, [r3, #12]
 80112be:	b29b      	uxth	r3, r3
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7fa fe33 	bl	800bf2c <lwip_htons>
 80112c6:	4603      	mov	r3, r0
 80112c8:	b2db      	uxtb	r3, r3
 80112ca:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d12f      	bne.n	8011332 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80112d2:	4b10      	ldr	r3, [pc, #64]	@ (8011314 <tcp_receive+0x888>)
 80112d4:	68db      	ldr	r3, [r3, #12]
 80112d6:	899b      	ldrh	r3, [r3, #12]
 80112d8:	b29c      	uxth	r4, r3
 80112da:	2001      	movs	r0, #1
 80112dc:	f7fa fe26 	bl	800bf2c <lwip_htons>
 80112e0:	4603      	mov	r3, r0
 80112e2:	461a      	mov	r2, r3
 80112e4:	4b0b      	ldr	r3, [pc, #44]	@ (8011314 <tcp_receive+0x888>)
 80112e6:	68db      	ldr	r3, [r3, #12]
 80112e8:	4322      	orrs	r2, r4
 80112ea:	b292      	uxth	r2, r2
 80112ec:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80112ee:	4b09      	ldr	r3, [pc, #36]	@ (8011314 <tcp_receive+0x888>)
 80112f0:	891c      	ldrh	r4, [r3, #8]
 80112f2:	4b08      	ldr	r3, [pc, #32]	@ (8011314 <tcp_receive+0x888>)
 80112f4:	68db      	ldr	r3, [r3, #12]
 80112f6:	899b      	ldrh	r3, [r3, #12]
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	4618      	mov	r0, r3
 80112fc:	f7fa fe16 	bl	800bf2c <lwip_htons>
 8011300:	4603      	mov	r3, r0
 8011302:	b2db      	uxtb	r3, r3
 8011304:	f003 0303 	and.w	r3, r3, #3
 8011308:	2b00      	cmp	r3, #0
 801130a:	d00d      	beq.n	8011328 <tcp_receive+0x89c>
 801130c:	2301      	movs	r3, #1
 801130e:	e00c      	b.n	801132a <tcp_receive+0x89e>
 8011310:	2400ca04 	.word	0x2400ca04
 8011314:	2400c9e4 	.word	0x2400c9e4
 8011318:	2400ca0e 	.word	0x2400ca0e
 801131c:	080188f8 	.word	0x080188f8
 8011320:	08018ca0 	.word	0x08018ca0
 8011324:	08018944 	.word	0x08018944
 8011328:	2300      	movs	r3, #0
 801132a:	4423      	add	r3, r4
 801132c:	b29a      	uxth	r2, r3
 801132e:	4b98      	ldr	r3, [pc, #608]	@ (8011590 <tcp_receive+0xb04>)
 8011330:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011334:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801133c:	6938      	ldr	r0, [r7, #16]
 801133e:	f7fd fd38 	bl	800edb2 <tcp_seg_free>
            while (next &&
 8011342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011344:	2b00      	cmp	r3, #0
 8011346:	d00e      	beq.n	8011366 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011348:	4b91      	ldr	r3, [pc, #580]	@ (8011590 <tcp_receive+0xb04>)
 801134a:	881b      	ldrh	r3, [r3, #0]
 801134c:	461a      	mov	r2, r3
 801134e:	4b91      	ldr	r3, [pc, #580]	@ (8011594 <tcp_receive+0xb08>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	441a      	add	r2, r3
 8011354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011356:	68db      	ldr	r3, [r3, #12]
 8011358:	685b      	ldr	r3, [r3, #4]
 801135a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801135c:	8909      	ldrh	r1, [r1, #8]
 801135e:	440b      	add	r3, r1
 8011360:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011362:	2b00      	cmp	r3, #0
 8011364:	da9b      	bge.n	801129e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011368:	2b00      	cmp	r3, #0
 801136a:	d059      	beq.n	8011420 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801136c:	4b88      	ldr	r3, [pc, #544]	@ (8011590 <tcp_receive+0xb04>)
 801136e:	881b      	ldrh	r3, [r3, #0]
 8011370:	461a      	mov	r2, r3
 8011372:	4b88      	ldr	r3, [pc, #544]	@ (8011594 <tcp_receive+0xb08>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	441a      	add	r2, r3
 8011378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	685b      	ldr	r3, [r3, #4]
 801137e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011380:	2b00      	cmp	r3, #0
 8011382:	dd4d      	ble.n	8011420 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011386:	68db      	ldr	r3, [r3, #12]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	b29a      	uxth	r2, r3
 801138c:	4b81      	ldr	r3, [pc, #516]	@ (8011594 <tcp_receive+0xb08>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	b29b      	uxth	r3, r3
 8011392:	1ad3      	subs	r3, r2, r3
 8011394:	b29a      	uxth	r2, r3
 8011396:	4b80      	ldr	r3, [pc, #512]	@ (8011598 <tcp_receive+0xb0c>)
 8011398:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801139a:	4b7f      	ldr	r3, [pc, #508]	@ (8011598 <tcp_receive+0xb0c>)
 801139c:	68db      	ldr	r3, [r3, #12]
 801139e:	899b      	ldrh	r3, [r3, #12]
 80113a0:	b29b      	uxth	r3, r3
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7fa fdc2 	bl	800bf2c <lwip_htons>
 80113a8:	4603      	mov	r3, r0
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	f003 0302 	and.w	r3, r3, #2
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d005      	beq.n	80113c0 <tcp_receive+0x934>
                inseg.len -= 1;
 80113b4:	4b78      	ldr	r3, [pc, #480]	@ (8011598 <tcp_receive+0xb0c>)
 80113b6:	891b      	ldrh	r3, [r3, #8]
 80113b8:	3b01      	subs	r3, #1
 80113ba:	b29a      	uxth	r2, r3
 80113bc:	4b76      	ldr	r3, [pc, #472]	@ (8011598 <tcp_receive+0xb0c>)
 80113be:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80113c0:	4b75      	ldr	r3, [pc, #468]	@ (8011598 <tcp_receive+0xb0c>)
 80113c2:	685b      	ldr	r3, [r3, #4]
 80113c4:	4a74      	ldr	r2, [pc, #464]	@ (8011598 <tcp_receive+0xb0c>)
 80113c6:	8912      	ldrh	r2, [r2, #8]
 80113c8:	4611      	mov	r1, r2
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7fc f8e6 	bl	800d59c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80113d0:	4b71      	ldr	r3, [pc, #452]	@ (8011598 <tcp_receive+0xb0c>)
 80113d2:	891c      	ldrh	r4, [r3, #8]
 80113d4:	4b70      	ldr	r3, [pc, #448]	@ (8011598 <tcp_receive+0xb0c>)
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	899b      	ldrh	r3, [r3, #12]
 80113da:	b29b      	uxth	r3, r3
 80113dc:	4618      	mov	r0, r3
 80113de:	f7fa fda5 	bl	800bf2c <lwip_htons>
 80113e2:	4603      	mov	r3, r0
 80113e4:	b2db      	uxtb	r3, r3
 80113e6:	f003 0303 	and.w	r3, r3, #3
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d001      	beq.n	80113f2 <tcp_receive+0x966>
 80113ee:	2301      	movs	r3, #1
 80113f0:	e000      	b.n	80113f4 <tcp_receive+0x968>
 80113f2:	2300      	movs	r3, #0
 80113f4:	4423      	add	r3, r4
 80113f6:	b29a      	uxth	r2, r3
 80113f8:	4b65      	ldr	r3, [pc, #404]	@ (8011590 <tcp_receive+0xb04>)
 80113fa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80113fc:	4b64      	ldr	r3, [pc, #400]	@ (8011590 <tcp_receive+0xb04>)
 80113fe:	881b      	ldrh	r3, [r3, #0]
 8011400:	461a      	mov	r2, r3
 8011402:	4b64      	ldr	r3, [pc, #400]	@ (8011594 <tcp_receive+0xb08>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	441a      	add	r2, r3
 8011408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801140a:	68db      	ldr	r3, [r3, #12]
 801140c:	685b      	ldr	r3, [r3, #4]
 801140e:	429a      	cmp	r2, r3
 8011410:	d006      	beq.n	8011420 <tcp_receive+0x994>
 8011412:	4b62      	ldr	r3, [pc, #392]	@ (801159c <tcp_receive+0xb10>)
 8011414:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8011418:	4961      	ldr	r1, [pc, #388]	@ (80115a0 <tcp_receive+0xb14>)
 801141a:	4862      	ldr	r0, [pc, #392]	@ (80115a4 <tcp_receive+0xb18>)
 801141c:	f004 fe4e 	bl	80160bc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011424:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011426:	4b5a      	ldr	r3, [pc, #360]	@ (8011590 <tcp_receive+0xb04>)
 8011428:	881b      	ldrh	r3, [r3, #0]
 801142a:	461a      	mov	r2, r3
 801142c:	4b59      	ldr	r3, [pc, #356]	@ (8011594 <tcp_receive+0xb08>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	441a      	add	r2, r3
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801143a:	4b55      	ldr	r3, [pc, #340]	@ (8011590 <tcp_receive+0xb04>)
 801143c:	881b      	ldrh	r3, [r3, #0]
 801143e:	429a      	cmp	r2, r3
 8011440:	d206      	bcs.n	8011450 <tcp_receive+0x9c4>
 8011442:	4b56      	ldr	r3, [pc, #344]	@ (801159c <tcp_receive+0xb10>)
 8011444:	f240 6207 	movw	r2, #1543	@ 0x607
 8011448:	4957      	ldr	r1, [pc, #348]	@ (80115a8 <tcp_receive+0xb1c>)
 801144a:	4856      	ldr	r0, [pc, #344]	@ (80115a4 <tcp_receive+0xb18>)
 801144c:	f004 fe36 	bl	80160bc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011454:	4b4e      	ldr	r3, [pc, #312]	@ (8011590 <tcp_receive+0xb04>)
 8011456:	881b      	ldrh	r3, [r3, #0]
 8011458:	1ad3      	subs	r3, r2, r3
 801145a:	b29a      	uxth	r2, r3
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f7fc ffc1 	bl	800e3e8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011466:	4b4c      	ldr	r3, [pc, #304]	@ (8011598 <tcp_receive+0xb0c>)
 8011468:	685b      	ldr	r3, [r3, #4]
 801146a:	891b      	ldrh	r3, [r3, #8]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d006      	beq.n	801147e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011470:	4b49      	ldr	r3, [pc, #292]	@ (8011598 <tcp_receive+0xb0c>)
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	4a4d      	ldr	r2, [pc, #308]	@ (80115ac <tcp_receive+0xb20>)
 8011476:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011478:	4b47      	ldr	r3, [pc, #284]	@ (8011598 <tcp_receive+0xb0c>)
 801147a:	2200      	movs	r2, #0
 801147c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801147e:	4b46      	ldr	r3, [pc, #280]	@ (8011598 <tcp_receive+0xb0c>)
 8011480:	68db      	ldr	r3, [r3, #12]
 8011482:	899b      	ldrh	r3, [r3, #12]
 8011484:	b29b      	uxth	r3, r3
 8011486:	4618      	mov	r0, r3
 8011488:	f7fa fd50 	bl	800bf2c <lwip_htons>
 801148c:	4603      	mov	r3, r0
 801148e:	b2db      	uxtb	r3, r3
 8011490:	f003 0301 	and.w	r3, r3, #1
 8011494:	2b00      	cmp	r3, #0
 8011496:	f000 80b8 	beq.w	801160a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801149a:	4b45      	ldr	r3, [pc, #276]	@ (80115b0 <tcp_receive+0xb24>)
 801149c:	781b      	ldrb	r3, [r3, #0]
 801149e:	f043 0320 	orr.w	r3, r3, #32
 80114a2:	b2da      	uxtb	r2, r3
 80114a4:	4b42      	ldr	r3, [pc, #264]	@ (80115b0 <tcp_receive+0xb24>)
 80114a6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80114a8:	e0af      	b.n	801160a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114ae:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114b4:	68db      	ldr	r3, [r3, #12]
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	4a36      	ldr	r2, [pc, #216]	@ (8011594 <tcp_receive+0xb08>)
 80114ba:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	891b      	ldrh	r3, [r3, #8]
 80114c0:	461c      	mov	r4, r3
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	68db      	ldr	r3, [r3, #12]
 80114c6:	899b      	ldrh	r3, [r3, #12]
 80114c8:	b29b      	uxth	r3, r3
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7fa fd2e 	bl	800bf2c <lwip_htons>
 80114d0:	4603      	mov	r3, r0
 80114d2:	b2db      	uxtb	r3, r3
 80114d4:	f003 0303 	and.w	r3, r3, #3
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d001      	beq.n	80114e0 <tcp_receive+0xa54>
 80114dc:	2301      	movs	r3, #1
 80114de:	e000      	b.n	80114e2 <tcp_receive+0xa56>
 80114e0:	2300      	movs	r3, #0
 80114e2:	191a      	adds	r2, r3, r4
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114e8:	441a      	add	r2, r3
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80114f2:	461c      	mov	r4, r3
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	891b      	ldrh	r3, [r3, #8]
 80114f8:	461d      	mov	r5, r3
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	68db      	ldr	r3, [r3, #12]
 80114fe:	899b      	ldrh	r3, [r3, #12]
 8011500:	b29b      	uxth	r3, r3
 8011502:	4618      	mov	r0, r3
 8011504:	f7fa fd12 	bl	800bf2c <lwip_htons>
 8011508:	4603      	mov	r3, r0
 801150a:	b2db      	uxtb	r3, r3
 801150c:	f003 0303 	and.w	r3, r3, #3
 8011510:	2b00      	cmp	r3, #0
 8011512:	d001      	beq.n	8011518 <tcp_receive+0xa8c>
 8011514:	2301      	movs	r3, #1
 8011516:	e000      	b.n	801151a <tcp_receive+0xa8e>
 8011518:	2300      	movs	r3, #0
 801151a:	442b      	add	r3, r5
 801151c:	429c      	cmp	r4, r3
 801151e:	d206      	bcs.n	801152e <tcp_receive+0xaa2>
 8011520:	4b1e      	ldr	r3, [pc, #120]	@ (801159c <tcp_receive+0xb10>)
 8011522:	f240 622b 	movw	r2, #1579	@ 0x62b
 8011526:	4923      	ldr	r1, [pc, #140]	@ (80115b4 <tcp_receive+0xb28>)
 8011528:	481e      	ldr	r0, [pc, #120]	@ (80115a4 <tcp_receive+0xb18>)
 801152a:	f004 fdc7 	bl	80160bc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801152e:	68bb      	ldr	r3, [r7, #8]
 8011530:	891b      	ldrh	r3, [r3, #8]
 8011532:	461c      	mov	r4, r3
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	68db      	ldr	r3, [r3, #12]
 8011538:	899b      	ldrh	r3, [r3, #12]
 801153a:	b29b      	uxth	r3, r3
 801153c:	4618      	mov	r0, r3
 801153e:	f7fa fcf5 	bl	800bf2c <lwip_htons>
 8011542:	4603      	mov	r3, r0
 8011544:	b2db      	uxtb	r3, r3
 8011546:	f003 0303 	and.w	r3, r3, #3
 801154a:	2b00      	cmp	r3, #0
 801154c:	d001      	beq.n	8011552 <tcp_receive+0xac6>
 801154e:	2301      	movs	r3, #1
 8011550:	e000      	b.n	8011554 <tcp_receive+0xac8>
 8011552:	2300      	movs	r3, #0
 8011554:	1919      	adds	r1, r3, r4
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801155a:	b28b      	uxth	r3, r1
 801155c:	1ad3      	subs	r3, r2, r3
 801155e:	b29a      	uxth	r2, r3
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f7fc ff3f 	bl	800e3e8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	891b      	ldrh	r3, [r3, #8]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d028      	beq.n	80115c6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011574:	4b0d      	ldr	r3, [pc, #52]	@ (80115ac <tcp_receive+0xb20>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d01d      	beq.n	80115b8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801157c:	4b0b      	ldr	r3, [pc, #44]	@ (80115ac <tcp_receive+0xb20>)
 801157e:	681a      	ldr	r2, [r3, #0]
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	4619      	mov	r1, r3
 8011586:	4610      	mov	r0, r2
 8011588:	f7fc fa5c 	bl	800da44 <pbuf_cat>
 801158c:	e018      	b.n	80115c0 <tcp_receive+0xb34>
 801158e:	bf00      	nop
 8011590:	2400ca0e 	.word	0x2400ca0e
 8011594:	2400ca04 	.word	0x2400ca04
 8011598:	2400c9e4 	.word	0x2400c9e4
 801159c:	080188f8 	.word	0x080188f8
 80115a0:	08018cd8 	.word	0x08018cd8
 80115a4:	08018944 	.word	0x08018944
 80115a8:	08018d14 	.word	0x08018d14
 80115ac:	2400ca14 	.word	0x2400ca14
 80115b0:	2400ca11 	.word	0x2400ca11
 80115b4:	08018d34 	.word	0x08018d34
            } else {
              recv_data = cseg->p;
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	4a70      	ldr	r2, [pc, #448]	@ (8011780 <tcp_receive+0xcf4>)
 80115be:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	2200      	movs	r2, #0
 80115c4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	68db      	ldr	r3, [r3, #12]
 80115ca:	899b      	ldrh	r3, [r3, #12]
 80115cc:	b29b      	uxth	r3, r3
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7fa fcac 	bl	800bf2c <lwip_htons>
 80115d4:	4603      	mov	r3, r0
 80115d6:	b2db      	uxtb	r3, r3
 80115d8:	f003 0301 	and.w	r3, r3, #1
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d00d      	beq.n	80115fc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80115e0:	4b68      	ldr	r3, [pc, #416]	@ (8011784 <tcp_receive+0xcf8>)
 80115e2:	781b      	ldrb	r3, [r3, #0]
 80115e4:	f043 0320 	orr.w	r3, r3, #32
 80115e8:	b2da      	uxtb	r2, r3
 80115ea:	4b66      	ldr	r3, [pc, #408]	@ (8011784 <tcp_receive+0xcf8>)
 80115ec:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	7d1b      	ldrb	r3, [r3, #20]
 80115f2:	2b04      	cmp	r3, #4
 80115f4:	d102      	bne.n	80115fc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2207      	movs	r2, #7
 80115fa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	681a      	ldr	r2, [r3, #0]
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8011604:	68b8      	ldr	r0, [r7, #8]
 8011606:	f7fd fbd4 	bl	800edb2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801160e:	2b00      	cmp	r3, #0
 8011610:	d008      	beq.n	8011624 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011616:	68db      	ldr	r3, [r3, #12]
 8011618:	685a      	ldr	r2, [r3, #4]
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801161e:	429a      	cmp	r2, r3
 8011620:	f43f af43 	beq.w	80114aa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	8b5b      	ldrh	r3, [r3, #26]
 8011628:	f003 0301 	and.w	r3, r3, #1
 801162c:	2b00      	cmp	r3, #0
 801162e:	d00e      	beq.n	801164e <tcp_receive+0xbc2>
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	8b5b      	ldrh	r3, [r3, #26]
 8011634:	f023 0301 	bic.w	r3, r3, #1
 8011638:	b29a      	uxth	r2, r3
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	835a      	strh	r2, [r3, #26]
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	8b5b      	ldrh	r3, [r3, #26]
 8011642:	f043 0302 	orr.w	r3, r3, #2
 8011646:	b29a      	uxth	r2, r3
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801164c:	e187      	b.n	801195e <tcp_receive+0xed2>
        tcp_ack(pcb);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	8b5b      	ldrh	r3, [r3, #26]
 8011652:	f043 0301 	orr.w	r3, r3, #1
 8011656:	b29a      	uxth	r2, r3
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801165c:	e17f      	b.n	801195e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011662:	2b00      	cmp	r3, #0
 8011664:	d106      	bne.n	8011674 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011666:	4848      	ldr	r0, [pc, #288]	@ (8011788 <tcp_receive+0xcfc>)
 8011668:	f7fd fbbc 	bl	800ede4 <tcp_seg_copy>
 801166c:	4602      	mov	r2, r0
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	675a      	str	r2, [r3, #116]	@ 0x74
 8011672:	e16c      	b.n	801194e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011674:	2300      	movs	r3, #0
 8011676:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801167c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801167e:	e156      	b.n	801192e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8011680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011682:	68db      	ldr	r3, [r3, #12]
 8011684:	685a      	ldr	r2, [r3, #4]
 8011686:	4b41      	ldr	r3, [pc, #260]	@ (801178c <tcp_receive+0xd00>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	429a      	cmp	r2, r3
 801168c:	d11d      	bne.n	80116ca <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801168e:	4b3e      	ldr	r3, [pc, #248]	@ (8011788 <tcp_receive+0xcfc>)
 8011690:	891a      	ldrh	r2, [r3, #8]
 8011692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011694:	891b      	ldrh	r3, [r3, #8]
 8011696:	429a      	cmp	r2, r3
 8011698:	f240 814e 	bls.w	8011938 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801169c:	483a      	ldr	r0, [pc, #232]	@ (8011788 <tcp_receive+0xcfc>)
 801169e:	f7fd fba1 	bl	800ede4 <tcp_seg_copy>
 80116a2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	f000 8148 	beq.w	801193c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80116ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d003      	beq.n	80116ba <tcp_receive+0xc2e>
                    prev->next = cseg;
 80116b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116b4:	697a      	ldr	r2, [r7, #20]
 80116b6:	601a      	str	r2, [r3, #0]
 80116b8:	e002      	b.n	80116c0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	697a      	ldr	r2, [r7, #20]
 80116be:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80116c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80116c2:	6978      	ldr	r0, [r7, #20]
 80116c4:	f7ff f8de 	bl	8010884 <tcp_oos_insert_segment>
                }
                break;
 80116c8:	e138      	b.n	801193c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80116ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d117      	bne.n	8011700 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80116d0:	4b2e      	ldr	r3, [pc, #184]	@ (801178c <tcp_receive+0xd00>)
 80116d2:	681a      	ldr	r2, [r3, #0]
 80116d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116d6:	68db      	ldr	r3, [r3, #12]
 80116d8:	685b      	ldr	r3, [r3, #4]
 80116da:	1ad3      	subs	r3, r2, r3
 80116dc:	2b00      	cmp	r3, #0
 80116de:	da57      	bge.n	8011790 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80116e0:	4829      	ldr	r0, [pc, #164]	@ (8011788 <tcp_receive+0xcfc>)
 80116e2:	f7fd fb7f 	bl	800ede4 <tcp_seg_copy>
 80116e6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80116e8:	69bb      	ldr	r3, [r7, #24]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	f000 8128 	beq.w	8011940 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	69ba      	ldr	r2, [r7, #24]
 80116f4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80116f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80116f8:	69b8      	ldr	r0, [r7, #24]
 80116fa:	f7ff f8c3 	bl	8010884 <tcp_oos_insert_segment>
                  }
                  break;
 80116fe:	e11f      	b.n	8011940 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011700:	4b22      	ldr	r3, [pc, #136]	@ (801178c <tcp_receive+0xd00>)
 8011702:	681a      	ldr	r2, [r3, #0]
 8011704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011706:	68db      	ldr	r3, [r3, #12]
 8011708:	685b      	ldr	r3, [r3, #4]
 801170a:	1ad3      	subs	r3, r2, r3
 801170c:	3b01      	subs	r3, #1
 801170e:	2b00      	cmp	r3, #0
 8011710:	db3e      	blt.n	8011790 <tcp_receive+0xd04>
 8011712:	4b1e      	ldr	r3, [pc, #120]	@ (801178c <tcp_receive+0xd00>)
 8011714:	681a      	ldr	r2, [r3, #0]
 8011716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011718:	68db      	ldr	r3, [r3, #12]
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	1ad3      	subs	r3, r2, r3
 801171e:	3301      	adds	r3, #1
 8011720:	2b00      	cmp	r3, #0
 8011722:	dc35      	bgt.n	8011790 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011724:	4818      	ldr	r0, [pc, #96]	@ (8011788 <tcp_receive+0xcfc>)
 8011726:	f7fd fb5d 	bl	800ede4 <tcp_seg_copy>
 801172a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801172c:	69fb      	ldr	r3, [r7, #28]
 801172e:	2b00      	cmp	r3, #0
 8011730:	f000 8108 	beq.w	8011944 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011736:	68db      	ldr	r3, [r3, #12]
 8011738:	685b      	ldr	r3, [r3, #4]
 801173a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801173c:	8912      	ldrh	r2, [r2, #8]
 801173e:	441a      	add	r2, r3
 8011740:	4b12      	ldr	r3, [pc, #72]	@ (801178c <tcp_receive+0xd00>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	1ad3      	subs	r3, r2, r3
 8011746:	2b00      	cmp	r3, #0
 8011748:	dd12      	ble.n	8011770 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801174a:	4b10      	ldr	r3, [pc, #64]	@ (801178c <tcp_receive+0xd00>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	b29a      	uxth	r2, r3
 8011750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011752:	68db      	ldr	r3, [r3, #12]
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	b29b      	uxth	r3, r3
 8011758:	1ad3      	subs	r3, r2, r3
 801175a:	b29a      	uxth	r2, r3
 801175c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801175e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011762:	685a      	ldr	r2, [r3, #4]
 8011764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011766:	891b      	ldrh	r3, [r3, #8]
 8011768:	4619      	mov	r1, r3
 801176a:	4610      	mov	r0, r2
 801176c:	f7fb ff16 	bl	800d59c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011772:	69fa      	ldr	r2, [r7, #28]
 8011774:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011776:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011778:	69f8      	ldr	r0, [r7, #28]
 801177a:	f7ff f883 	bl	8010884 <tcp_oos_insert_segment>
                  }
                  break;
 801177e:	e0e1      	b.n	8011944 <tcp_receive+0xeb8>
 8011780:	2400ca14 	.word	0x2400ca14
 8011784:	2400ca11 	.word	0x2400ca11
 8011788:	2400c9e4 	.word	0x2400c9e4
 801178c:	2400ca04 	.word	0x2400ca04
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011792:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	2b00      	cmp	r3, #0
 801179a:	f040 80c5 	bne.w	8011928 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801179e:	4b7f      	ldr	r3, [pc, #508]	@ (801199c <tcp_receive+0xf10>)
 80117a0:	681a      	ldr	r2, [r3, #0]
 80117a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117a4:	68db      	ldr	r3, [r3, #12]
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	f340 80bc 	ble.w	8011928 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80117b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117b2:	68db      	ldr	r3, [r3, #12]
 80117b4:	899b      	ldrh	r3, [r3, #12]
 80117b6:	b29b      	uxth	r3, r3
 80117b8:	4618      	mov	r0, r3
 80117ba:	f7fa fbb7 	bl	800bf2c <lwip_htons>
 80117be:	4603      	mov	r3, r0
 80117c0:	b2db      	uxtb	r3, r3
 80117c2:	f003 0301 	and.w	r3, r3, #1
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	f040 80be 	bne.w	8011948 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80117cc:	4874      	ldr	r0, [pc, #464]	@ (80119a0 <tcp_receive+0xf14>)
 80117ce:	f7fd fb09 	bl	800ede4 <tcp_seg_copy>
 80117d2:	4602      	mov	r2, r0
 80117d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117d6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80117d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	f000 80b5 	beq.w	801194c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80117e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117e4:	68db      	ldr	r3, [r3, #12]
 80117e6:	685b      	ldr	r3, [r3, #4]
 80117e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80117ea:	8912      	ldrh	r2, [r2, #8]
 80117ec:	441a      	add	r2, r3
 80117ee:	4b6b      	ldr	r3, [pc, #428]	@ (801199c <tcp_receive+0xf10>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	1ad3      	subs	r3, r2, r3
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	dd12      	ble.n	801181e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80117f8:	4b68      	ldr	r3, [pc, #416]	@ (801199c <tcp_receive+0xf10>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	b29a      	uxth	r2, r3
 80117fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011800:	68db      	ldr	r3, [r3, #12]
 8011802:	685b      	ldr	r3, [r3, #4]
 8011804:	b29b      	uxth	r3, r3
 8011806:	1ad3      	subs	r3, r2, r3
 8011808:	b29a      	uxth	r2, r3
 801180a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801180c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801180e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011810:	685a      	ldr	r2, [r3, #4]
 8011812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011814:	891b      	ldrh	r3, [r3, #8]
 8011816:	4619      	mov	r1, r3
 8011818:	4610      	mov	r0, r2
 801181a:	f7fb febf 	bl	800d59c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801181e:	4b61      	ldr	r3, [pc, #388]	@ (80119a4 <tcp_receive+0xf18>)
 8011820:	881b      	ldrh	r3, [r3, #0]
 8011822:	461a      	mov	r2, r3
 8011824:	4b5d      	ldr	r3, [pc, #372]	@ (801199c <tcp_receive+0xf10>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	441a      	add	r2, r3
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801182e:	6879      	ldr	r1, [r7, #4]
 8011830:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011832:	440b      	add	r3, r1
 8011834:	1ad3      	subs	r3, r2, r3
 8011836:	2b00      	cmp	r3, #0
 8011838:	f340 8088 	ble.w	801194c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801183c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	68db      	ldr	r3, [r3, #12]
 8011842:	899b      	ldrh	r3, [r3, #12]
 8011844:	b29b      	uxth	r3, r3
 8011846:	4618      	mov	r0, r3
 8011848:	f7fa fb70 	bl	800bf2c <lwip_htons>
 801184c:	4603      	mov	r3, r0
 801184e:	b2db      	uxtb	r3, r3
 8011850:	f003 0301 	and.w	r3, r3, #1
 8011854:	2b00      	cmp	r3, #0
 8011856:	d021      	beq.n	801189c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	68db      	ldr	r3, [r3, #12]
 801185e:	899b      	ldrh	r3, [r3, #12]
 8011860:	b29b      	uxth	r3, r3
 8011862:	b21b      	sxth	r3, r3
 8011864:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011868:	b21c      	sxth	r4, r3
 801186a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	68db      	ldr	r3, [r3, #12]
 8011870:	899b      	ldrh	r3, [r3, #12]
 8011872:	b29b      	uxth	r3, r3
 8011874:	4618      	mov	r0, r3
 8011876:	f7fa fb59 	bl	800bf2c <lwip_htons>
 801187a:	4603      	mov	r3, r0
 801187c:	b2db      	uxtb	r3, r3
 801187e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011882:	b29b      	uxth	r3, r3
 8011884:	4618      	mov	r0, r3
 8011886:	f7fa fb51 	bl	800bf2c <lwip_htons>
 801188a:	4603      	mov	r3, r0
 801188c:	b21b      	sxth	r3, r3
 801188e:	4323      	orrs	r3, r4
 8011890:	b21a      	sxth	r2, r3
 8011892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	68db      	ldr	r3, [r3, #12]
 8011898:	b292      	uxth	r2, r2
 801189a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118a0:	b29a      	uxth	r2, r3
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80118a6:	4413      	add	r3, r2
 80118a8:	b299      	uxth	r1, r3
 80118aa:	4b3c      	ldr	r3, [pc, #240]	@ (801199c <tcp_receive+0xf10>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	b29a      	uxth	r2, r3
 80118b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	1a8a      	subs	r2, r1, r2
 80118b6:	b292      	uxth	r2, r2
 80118b8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80118ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	685a      	ldr	r2, [r3, #4]
 80118c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	891b      	ldrh	r3, [r3, #8]
 80118c6:	4619      	mov	r1, r3
 80118c8:	4610      	mov	r0, r2
 80118ca:	f7fb fe67 	bl	800d59c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80118ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	891c      	ldrh	r4, [r3, #8]
 80118d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	68db      	ldr	r3, [r3, #12]
 80118da:	899b      	ldrh	r3, [r3, #12]
 80118dc:	b29b      	uxth	r3, r3
 80118de:	4618      	mov	r0, r3
 80118e0:	f7fa fb24 	bl	800bf2c <lwip_htons>
 80118e4:	4603      	mov	r3, r0
 80118e6:	b2db      	uxtb	r3, r3
 80118e8:	f003 0303 	and.w	r3, r3, #3
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d001      	beq.n	80118f4 <tcp_receive+0xe68>
 80118f0:	2301      	movs	r3, #1
 80118f2:	e000      	b.n	80118f6 <tcp_receive+0xe6a>
 80118f4:	2300      	movs	r3, #0
 80118f6:	4423      	add	r3, r4
 80118f8:	b29a      	uxth	r2, r3
 80118fa:	4b2a      	ldr	r3, [pc, #168]	@ (80119a4 <tcp_receive+0xf18>)
 80118fc:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80118fe:	4b29      	ldr	r3, [pc, #164]	@ (80119a4 <tcp_receive+0xf18>)
 8011900:	881b      	ldrh	r3, [r3, #0]
 8011902:	461a      	mov	r2, r3
 8011904:	4b25      	ldr	r3, [pc, #148]	@ (801199c <tcp_receive+0xf10>)
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	441a      	add	r2, r3
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801190e:	6879      	ldr	r1, [r7, #4]
 8011910:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011912:	440b      	add	r3, r1
 8011914:	429a      	cmp	r2, r3
 8011916:	d019      	beq.n	801194c <tcp_receive+0xec0>
 8011918:	4b23      	ldr	r3, [pc, #140]	@ (80119a8 <tcp_receive+0xf1c>)
 801191a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801191e:	4923      	ldr	r1, [pc, #140]	@ (80119ac <tcp_receive+0xf20>)
 8011920:	4823      	ldr	r0, [pc, #140]	@ (80119b0 <tcp_receive+0xf24>)
 8011922:	f004 fbcb 	bl	80160bc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011926:	e011      	b.n	801194c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801192e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011930:	2b00      	cmp	r3, #0
 8011932:	f47f aea5 	bne.w	8011680 <tcp_receive+0xbf4>
 8011936:	e00a      	b.n	801194e <tcp_receive+0xec2>
                break;
 8011938:	bf00      	nop
 801193a:	e008      	b.n	801194e <tcp_receive+0xec2>
                break;
 801193c:	bf00      	nop
 801193e:	e006      	b.n	801194e <tcp_receive+0xec2>
                  break;
 8011940:	bf00      	nop
 8011942:	e004      	b.n	801194e <tcp_receive+0xec2>
                  break;
 8011944:	bf00      	nop
 8011946:	e002      	b.n	801194e <tcp_receive+0xec2>
                  break;
 8011948:	bf00      	nop
 801194a:	e000      	b.n	801194e <tcp_receive+0xec2>
                break;
 801194c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f001 fa32 	bl	8012db8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011954:	e003      	b.n	801195e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f001 fa2e 	bl	8012db8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801195c:	e01a      	b.n	8011994 <tcp_receive+0xf08>
 801195e:	e019      	b.n	8011994 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011960:	4b0e      	ldr	r3, [pc, #56]	@ (801199c <tcp_receive+0xf10>)
 8011962:	681a      	ldr	r2, [r3, #0]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011968:	1ad3      	subs	r3, r2, r3
 801196a:	2b00      	cmp	r3, #0
 801196c:	db0a      	blt.n	8011984 <tcp_receive+0xef8>
 801196e:	4b0b      	ldr	r3, [pc, #44]	@ (801199c <tcp_receive+0xf10>)
 8011970:	681a      	ldr	r2, [r3, #0]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011976:	6879      	ldr	r1, [r7, #4]
 8011978:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801197a:	440b      	add	r3, r1
 801197c:	1ad3      	subs	r3, r2, r3
 801197e:	3301      	adds	r3, #1
 8011980:	2b00      	cmp	r3, #0
 8011982:	dd07      	ble.n	8011994 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	8b5b      	ldrh	r3, [r3, #26]
 8011988:	f043 0302 	orr.w	r3, r3, #2
 801198c:	b29a      	uxth	r2, r3
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011992:	e7ff      	b.n	8011994 <tcp_receive+0xf08>
 8011994:	bf00      	nop
 8011996:	3750      	adds	r7, #80	@ 0x50
 8011998:	46bd      	mov	sp, r7
 801199a:	bdb0      	pop	{r4, r5, r7, pc}
 801199c:	2400ca04 	.word	0x2400ca04
 80119a0:	2400c9e4 	.word	0x2400c9e4
 80119a4:	2400ca0e 	.word	0x2400ca0e
 80119a8:	080188f8 	.word	0x080188f8
 80119ac:	08018ca0 	.word	0x08018ca0
 80119b0:	08018944 	.word	0x08018944

080119b4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80119b4:	b480      	push	{r7}
 80119b6:	b083      	sub	sp, #12
 80119b8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80119ba:	4b15      	ldr	r3, [pc, #84]	@ (8011a10 <tcp_get_next_optbyte+0x5c>)
 80119bc:	881b      	ldrh	r3, [r3, #0]
 80119be:	1c5a      	adds	r2, r3, #1
 80119c0:	b291      	uxth	r1, r2
 80119c2:	4a13      	ldr	r2, [pc, #76]	@ (8011a10 <tcp_get_next_optbyte+0x5c>)
 80119c4:	8011      	strh	r1, [r2, #0]
 80119c6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80119c8:	4b12      	ldr	r3, [pc, #72]	@ (8011a14 <tcp_get_next_optbyte+0x60>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d004      	beq.n	80119da <tcp_get_next_optbyte+0x26>
 80119d0:	4b11      	ldr	r3, [pc, #68]	@ (8011a18 <tcp_get_next_optbyte+0x64>)
 80119d2:	881b      	ldrh	r3, [r3, #0]
 80119d4:	88fa      	ldrh	r2, [r7, #6]
 80119d6:	429a      	cmp	r2, r3
 80119d8:	d208      	bcs.n	80119ec <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80119da:	4b10      	ldr	r3, [pc, #64]	@ (8011a1c <tcp_get_next_optbyte+0x68>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	3314      	adds	r3, #20
 80119e0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80119e2:	88fb      	ldrh	r3, [r7, #6]
 80119e4:	683a      	ldr	r2, [r7, #0]
 80119e6:	4413      	add	r3, r2
 80119e8:	781b      	ldrb	r3, [r3, #0]
 80119ea:	e00b      	b.n	8011a04 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80119ec:	88fb      	ldrh	r3, [r7, #6]
 80119ee:	b2da      	uxtb	r2, r3
 80119f0:	4b09      	ldr	r3, [pc, #36]	@ (8011a18 <tcp_get_next_optbyte+0x64>)
 80119f2:	881b      	ldrh	r3, [r3, #0]
 80119f4:	b2db      	uxtb	r3, r3
 80119f6:	1ad3      	subs	r3, r2, r3
 80119f8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80119fa:	4b06      	ldr	r3, [pc, #24]	@ (8011a14 <tcp_get_next_optbyte+0x60>)
 80119fc:	681a      	ldr	r2, [r3, #0]
 80119fe:	797b      	ldrb	r3, [r7, #5]
 8011a00:	4413      	add	r3, r2
 8011a02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011a04:	4618      	mov	r0, r3
 8011a06:	370c      	adds	r7, #12
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0e:	4770      	bx	lr
 8011a10:	2400ca00 	.word	0x2400ca00
 8011a14:	2400c9fc 	.word	0x2400c9fc
 8011a18:	2400c9fa 	.word	0x2400c9fa
 8011a1c:	2400c9f4 	.word	0x2400c9f4

08011a20 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b084      	sub	sp, #16
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d106      	bne.n	8011a3c <tcp_parseopt+0x1c>
 8011a2e:	4b33      	ldr	r3, [pc, #204]	@ (8011afc <tcp_parseopt+0xdc>)
 8011a30:	f240 727d 	movw	r2, #1917	@ 0x77d
 8011a34:	4932      	ldr	r1, [pc, #200]	@ (8011b00 <tcp_parseopt+0xe0>)
 8011a36:	4833      	ldr	r0, [pc, #204]	@ (8011b04 <tcp_parseopt+0xe4>)
 8011a38:	f004 fb40 	bl	80160bc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011a3c:	4b32      	ldr	r3, [pc, #200]	@ (8011b08 <tcp_parseopt+0xe8>)
 8011a3e:	881b      	ldrh	r3, [r3, #0]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d057      	beq.n	8011af4 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011a44:	4b31      	ldr	r3, [pc, #196]	@ (8011b0c <tcp_parseopt+0xec>)
 8011a46:	2200      	movs	r2, #0
 8011a48:	801a      	strh	r2, [r3, #0]
 8011a4a:	e047      	b.n	8011adc <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8011a4c:	f7ff ffb2 	bl	80119b4 <tcp_get_next_optbyte>
 8011a50:	4603      	mov	r3, r0
 8011a52:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011a54:	7bfb      	ldrb	r3, [r7, #15]
 8011a56:	2b02      	cmp	r3, #2
 8011a58:	d006      	beq.n	8011a68 <tcp_parseopt+0x48>
 8011a5a:	2b02      	cmp	r3, #2
 8011a5c:	dc2b      	bgt.n	8011ab6 <tcp_parseopt+0x96>
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d043      	beq.n	8011aea <tcp_parseopt+0xca>
 8011a62:	2b01      	cmp	r3, #1
 8011a64:	d039      	beq.n	8011ada <tcp_parseopt+0xba>
 8011a66:	e026      	b.n	8011ab6 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011a68:	f7ff ffa4 	bl	80119b4 <tcp_get_next_optbyte>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	2b04      	cmp	r3, #4
 8011a70:	d13d      	bne.n	8011aee <tcp_parseopt+0xce>
 8011a72:	4b26      	ldr	r3, [pc, #152]	@ (8011b0c <tcp_parseopt+0xec>)
 8011a74:	881b      	ldrh	r3, [r3, #0]
 8011a76:	3301      	adds	r3, #1
 8011a78:	4a23      	ldr	r2, [pc, #140]	@ (8011b08 <tcp_parseopt+0xe8>)
 8011a7a:	8812      	ldrh	r2, [r2, #0]
 8011a7c:	4293      	cmp	r3, r2
 8011a7e:	da36      	bge.n	8011aee <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011a80:	f7ff ff98 	bl	80119b4 <tcp_get_next_optbyte>
 8011a84:	4603      	mov	r3, r0
 8011a86:	021b      	lsls	r3, r3, #8
 8011a88:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011a8a:	f7ff ff93 	bl	80119b4 <tcp_get_next_optbyte>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	461a      	mov	r2, r3
 8011a92:	89bb      	ldrh	r3, [r7, #12]
 8011a94:	4313      	orrs	r3, r2
 8011a96:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011a98:	89bb      	ldrh	r3, [r7, #12]
 8011a9a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8011a9e:	4293      	cmp	r3, r2
 8011aa0:	d804      	bhi.n	8011aac <tcp_parseopt+0x8c>
 8011aa2:	89bb      	ldrh	r3, [r7, #12]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d001      	beq.n	8011aac <tcp_parseopt+0x8c>
 8011aa8:	89ba      	ldrh	r2, [r7, #12]
 8011aaa:	e001      	b.n	8011ab0 <tcp_parseopt+0x90>
 8011aac:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8011ab4:	e012      	b.n	8011adc <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011ab6:	f7ff ff7d 	bl	80119b4 <tcp_get_next_optbyte>
 8011aba:	4603      	mov	r3, r0
 8011abc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011abe:	7afb      	ldrb	r3, [r7, #11]
 8011ac0:	2b01      	cmp	r3, #1
 8011ac2:	d916      	bls.n	8011af2 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011ac4:	7afb      	ldrb	r3, [r7, #11]
 8011ac6:	b29a      	uxth	r2, r3
 8011ac8:	4b10      	ldr	r3, [pc, #64]	@ (8011b0c <tcp_parseopt+0xec>)
 8011aca:	881b      	ldrh	r3, [r3, #0]
 8011acc:	4413      	add	r3, r2
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	3b02      	subs	r3, #2
 8011ad2:	b29a      	uxth	r2, r3
 8011ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8011b0c <tcp_parseopt+0xec>)
 8011ad6:	801a      	strh	r2, [r3, #0]
 8011ad8:	e000      	b.n	8011adc <tcp_parseopt+0xbc>
          break;
 8011ada:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011adc:	4b0b      	ldr	r3, [pc, #44]	@ (8011b0c <tcp_parseopt+0xec>)
 8011ade:	881a      	ldrh	r2, [r3, #0]
 8011ae0:	4b09      	ldr	r3, [pc, #36]	@ (8011b08 <tcp_parseopt+0xe8>)
 8011ae2:	881b      	ldrh	r3, [r3, #0]
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d3b1      	bcc.n	8011a4c <tcp_parseopt+0x2c>
 8011ae8:	e004      	b.n	8011af4 <tcp_parseopt+0xd4>
          return;
 8011aea:	bf00      	nop
 8011aec:	e002      	b.n	8011af4 <tcp_parseopt+0xd4>
            return;
 8011aee:	bf00      	nop
 8011af0:	e000      	b.n	8011af4 <tcp_parseopt+0xd4>
            return;
 8011af2:	bf00      	nop
      }
    }
  }
}
 8011af4:	3710      	adds	r7, #16
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}
 8011afa:	bf00      	nop
 8011afc:	080188f8 	.word	0x080188f8
 8011b00:	08018d5c 	.word	0x08018d5c
 8011b04:	08018944 	.word	0x08018944
 8011b08:	2400c9f8 	.word	0x2400c9f8
 8011b0c:	2400ca00 	.word	0x2400ca00

08011b10 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011b10:	b480      	push	{r7}
 8011b12:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011b14:	4b05      	ldr	r3, [pc, #20]	@ (8011b2c <tcp_trigger_input_pcb_close+0x1c>)
 8011b16:	781b      	ldrb	r3, [r3, #0]
 8011b18:	f043 0310 	orr.w	r3, r3, #16
 8011b1c:	b2da      	uxtb	r2, r3
 8011b1e:	4b03      	ldr	r3, [pc, #12]	@ (8011b2c <tcp_trigger_input_pcb_close+0x1c>)
 8011b20:	701a      	strb	r2, [r3, #0]
}
 8011b22:	bf00      	nop
 8011b24:	46bd      	mov	sp, r7
 8011b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2a:	4770      	bx	lr
 8011b2c:	2400ca11 	.word	0x2400ca11

08011b30 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b084      	sub	sp, #16
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	60f8      	str	r0, [r7, #12]
 8011b38:	60b9      	str	r1, [r7, #8]
 8011b3a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d00a      	beq.n	8011b58 <tcp_route+0x28>
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	7a1b      	ldrb	r3, [r3, #8]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d006      	beq.n	8011b58 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	7a1b      	ldrb	r3, [r3, #8]
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7fb fb18 	bl	800d184 <netif_get_by_index>
 8011b54:	4603      	mov	r3, r0
 8011b56:	e003      	b.n	8011b60 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f002 fed1 	bl	8014900 <ip4_route>
 8011b5e:	4603      	mov	r3, r0
  }
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3710      	adds	r7, #16
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011b68:	b590      	push	{r4, r7, lr}
 8011b6a:	b087      	sub	sp, #28
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	60f8      	str	r0, [r7, #12]
 8011b70:	60b9      	str	r1, [r7, #8]
 8011b72:	603b      	str	r3, [r7, #0]
 8011b74:	4613      	mov	r3, r2
 8011b76:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d105      	bne.n	8011b8a <tcp_create_segment+0x22>
 8011b7e:	4b43      	ldr	r3, [pc, #268]	@ (8011c8c <tcp_create_segment+0x124>)
 8011b80:	22a3      	movs	r2, #163	@ 0xa3
 8011b82:	4943      	ldr	r1, [pc, #268]	@ (8011c90 <tcp_create_segment+0x128>)
 8011b84:	4843      	ldr	r0, [pc, #268]	@ (8011c94 <tcp_create_segment+0x12c>)
 8011b86:	f004 fa99 	bl	80160bc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d105      	bne.n	8011b9c <tcp_create_segment+0x34>
 8011b90:	4b3e      	ldr	r3, [pc, #248]	@ (8011c8c <tcp_create_segment+0x124>)
 8011b92:	22a4      	movs	r2, #164	@ 0xa4
 8011b94:	4940      	ldr	r1, [pc, #256]	@ (8011c98 <tcp_create_segment+0x130>)
 8011b96:	483f      	ldr	r0, [pc, #252]	@ (8011c94 <tcp_create_segment+0x12c>)
 8011b98:	f004 fa90 	bl	80160bc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011b9c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011ba0:	009b      	lsls	r3, r3, #2
 8011ba2:	b2db      	uxtb	r3, r3
 8011ba4:	f003 0304 	and.w	r3, r3, #4
 8011ba8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011baa:	2003      	movs	r0, #3
 8011bac:	f7fa ff5e 	bl	800ca6c <memp_malloc>
 8011bb0:	6138      	str	r0, [r7, #16]
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d104      	bne.n	8011bc2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011bb8:	68b8      	ldr	r0, [r7, #8]
 8011bba:	f7fb fe75 	bl	800d8a8 <pbuf_free>
    return NULL;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	e060      	b.n	8011c84 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011bc8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	2200      	movs	r2, #0
 8011bce:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	68ba      	ldr	r2, [r7, #8]
 8011bd4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011bd6:	68bb      	ldr	r3, [r7, #8]
 8011bd8:	891a      	ldrh	r2, [r3, #8]
 8011bda:	7dfb      	ldrb	r3, [r7, #23]
 8011bdc:	b29b      	uxth	r3, r3
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d205      	bcs.n	8011bee <tcp_create_segment+0x86>
 8011be2:	4b2a      	ldr	r3, [pc, #168]	@ (8011c8c <tcp_create_segment+0x124>)
 8011be4:	22b0      	movs	r2, #176	@ 0xb0
 8011be6:	492d      	ldr	r1, [pc, #180]	@ (8011c9c <tcp_create_segment+0x134>)
 8011be8:	482a      	ldr	r0, [pc, #168]	@ (8011c94 <tcp_create_segment+0x12c>)
 8011bea:	f004 fa67 	bl	80160bc <iprintf>
  seg->len = p->tot_len - optlen;
 8011bee:	68bb      	ldr	r3, [r7, #8]
 8011bf0:	891a      	ldrh	r2, [r3, #8]
 8011bf2:	7dfb      	ldrb	r3, [r7, #23]
 8011bf4:	b29b      	uxth	r3, r3
 8011bf6:	1ad3      	subs	r3, r2, r3
 8011bf8:	b29a      	uxth	r2, r3
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011bfe:	2114      	movs	r1, #20
 8011c00:	68b8      	ldr	r0, [r7, #8]
 8011c02:	f7fb fdbb 	bl	800d77c <pbuf_add_header>
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d004      	beq.n	8011c16 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011c0c:	6938      	ldr	r0, [r7, #16]
 8011c0e:	f7fd f8d0 	bl	800edb2 <tcp_seg_free>
    return NULL;
 8011c12:	2300      	movs	r3, #0
 8011c14:	e036      	b.n	8011c84 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	685b      	ldr	r3, [r3, #4]
 8011c1a:	685a      	ldr	r2, [r3, #4]
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	8ada      	ldrh	r2, [r3, #22]
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	68dc      	ldr	r4, [r3, #12]
 8011c28:	4610      	mov	r0, r2
 8011c2a:	f7fa f97f 	bl	800bf2c <lwip_htons>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	8b1a      	ldrh	r2, [r3, #24]
 8011c36:	693b      	ldr	r3, [r7, #16]
 8011c38:	68dc      	ldr	r4, [r3, #12]
 8011c3a:	4610      	mov	r0, r2
 8011c3c:	f7fa f976 	bl	800bf2c <lwip_htons>
 8011c40:	4603      	mov	r3, r0
 8011c42:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	68dc      	ldr	r4, [r3, #12]
 8011c48:	6838      	ldr	r0, [r7, #0]
 8011c4a:	f7fa f984 	bl	800bf56 <lwip_htonl>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011c52:	7dfb      	ldrb	r3, [r7, #23]
 8011c54:	089b      	lsrs	r3, r3, #2
 8011c56:	b2db      	uxtb	r3, r3
 8011c58:	3305      	adds	r3, #5
 8011c5a:	b29b      	uxth	r3, r3
 8011c5c:	031b      	lsls	r3, r3, #12
 8011c5e:	b29a      	uxth	r2, r3
 8011c60:	79fb      	ldrb	r3, [r7, #7]
 8011c62:	b29b      	uxth	r3, r3
 8011c64:	4313      	orrs	r3, r2
 8011c66:	b29a      	uxth	r2, r3
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	68dc      	ldr	r4, [r3, #12]
 8011c6c:	4610      	mov	r0, r2
 8011c6e:	f7fa f95d 	bl	800bf2c <lwip_htons>
 8011c72:	4603      	mov	r3, r0
 8011c74:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011c76:	693b      	ldr	r3, [r7, #16]
 8011c78:	68db      	ldr	r3, [r3, #12]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	749a      	strb	r2, [r3, #18]
 8011c7e:	2200      	movs	r2, #0
 8011c80:	74da      	strb	r2, [r3, #19]
  return seg;
 8011c82:	693b      	ldr	r3, [r7, #16]
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	371c      	adds	r7, #28
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd90      	pop	{r4, r7, pc}
 8011c8c:	08018d78 	.word	0x08018d78
 8011c90:	08018dac 	.word	0x08018dac
 8011c94:	08018dcc 	.word	0x08018dcc
 8011c98:	08018df4 	.word	0x08018df4
 8011c9c:	08018e18 	.word	0x08018e18

08011ca0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011ca0:	b590      	push	{r4, r7, lr}
 8011ca2:	b08b      	sub	sp, #44	@ 0x2c
 8011ca4:	af02      	add	r7, sp, #8
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	460b      	mov	r3, r1
 8011caa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011cac:	2300      	movs	r3, #0
 8011cae:	61fb      	str	r3, [r7, #28]
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d106      	bne.n	8011ccc <tcp_split_unsent_seg+0x2c>
 8011cbe:	4b95      	ldr	r3, [pc, #596]	@ (8011f14 <tcp_split_unsent_seg+0x274>)
 8011cc0:	f240 324b 	movw	r2, #843	@ 0x34b
 8011cc4:	4994      	ldr	r1, [pc, #592]	@ (8011f18 <tcp_split_unsent_seg+0x278>)
 8011cc6:	4895      	ldr	r0, [pc, #596]	@ (8011f1c <tcp_split_unsent_seg+0x27c>)
 8011cc8:	f004 f9f8 	bl	80160bc <iprintf>

  useg = pcb->unsent;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011cd0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d102      	bne.n	8011cde <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cdc:	e116      	b.n	8011f0c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011cde:	887b      	ldrh	r3, [r7, #2]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d109      	bne.n	8011cf8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011ce4:	4b8b      	ldr	r3, [pc, #556]	@ (8011f14 <tcp_split_unsent_seg+0x274>)
 8011ce6:	f240 3253 	movw	r2, #851	@ 0x353
 8011cea:	498d      	ldr	r1, [pc, #564]	@ (8011f20 <tcp_split_unsent_seg+0x280>)
 8011cec:	488b      	ldr	r0, [pc, #556]	@ (8011f1c <tcp_split_unsent_seg+0x27c>)
 8011cee:	f004 f9e5 	bl	80160bc <iprintf>
    return ERR_VAL;
 8011cf2:	f06f 0305 	mvn.w	r3, #5
 8011cf6:	e109      	b.n	8011f0c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	891b      	ldrh	r3, [r3, #8]
 8011cfc:	887a      	ldrh	r2, [r7, #2]
 8011cfe:	429a      	cmp	r2, r3
 8011d00:	d301      	bcc.n	8011d06 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011d02:	2300      	movs	r3, #0
 8011d04:	e102      	b.n	8011f0c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011d0a:	887a      	ldrh	r2, [r7, #2]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d906      	bls.n	8011d1e <tcp_split_unsent_seg+0x7e>
 8011d10:	4b80      	ldr	r3, [pc, #512]	@ (8011f14 <tcp_split_unsent_seg+0x274>)
 8011d12:	f240 325b 	movw	r2, #859	@ 0x35b
 8011d16:	4983      	ldr	r1, [pc, #524]	@ (8011f24 <tcp_split_unsent_seg+0x284>)
 8011d18:	4880      	ldr	r0, [pc, #512]	@ (8011f1c <tcp_split_unsent_seg+0x27c>)
 8011d1a:	f004 f9cf 	bl	80160bc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011d1e:	697b      	ldr	r3, [r7, #20]
 8011d20:	891b      	ldrh	r3, [r3, #8]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d106      	bne.n	8011d34 <tcp_split_unsent_seg+0x94>
 8011d26:	4b7b      	ldr	r3, [pc, #492]	@ (8011f14 <tcp_split_unsent_seg+0x274>)
 8011d28:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8011d2c:	497e      	ldr	r1, [pc, #504]	@ (8011f28 <tcp_split_unsent_seg+0x288>)
 8011d2e:	487b      	ldr	r0, [pc, #492]	@ (8011f1c <tcp_split_unsent_seg+0x27c>)
 8011d30:	f004 f9c4 	bl	80160bc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011d34:	697b      	ldr	r3, [r7, #20]
 8011d36:	7a9b      	ldrb	r3, [r3, #10]
 8011d38:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011d3a:	7bfb      	ldrb	r3, [r7, #15]
 8011d3c:	009b      	lsls	r3, r3, #2
 8011d3e:	b2db      	uxtb	r3, r3
 8011d40:	f003 0304 	and.w	r3, r3, #4
 8011d44:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	891a      	ldrh	r2, [r3, #8]
 8011d4a:	887b      	ldrh	r3, [r7, #2]
 8011d4c:	1ad3      	subs	r3, r2, r3
 8011d4e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011d50:	7bbb      	ldrb	r3, [r7, #14]
 8011d52:	b29a      	uxth	r2, r3
 8011d54:	89bb      	ldrh	r3, [r7, #12]
 8011d56:	4413      	add	r3, r2
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011d5e:	4619      	mov	r1, r3
 8011d60:	2036      	movs	r0, #54	@ 0x36
 8011d62:	f7fb fab9 	bl	800d2d8 <pbuf_alloc>
 8011d66:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d68:	693b      	ldr	r3, [r7, #16]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	f000 80b7 	beq.w	8011ede <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011d70:	697b      	ldr	r3, [r7, #20]
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	891a      	ldrh	r2, [r3, #8]
 8011d76:	697b      	ldr	r3, [r7, #20]
 8011d78:	891b      	ldrh	r3, [r3, #8]
 8011d7a:	1ad3      	subs	r3, r2, r3
 8011d7c:	b29a      	uxth	r2, r3
 8011d7e:	887b      	ldrh	r3, [r7, #2]
 8011d80:	4413      	add	r3, r2
 8011d82:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	6858      	ldr	r0, [r3, #4]
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	685a      	ldr	r2, [r3, #4]
 8011d8c:	7bbb      	ldrb	r3, [r7, #14]
 8011d8e:	18d1      	adds	r1, r2, r3
 8011d90:	897b      	ldrh	r3, [r7, #10]
 8011d92:	89ba      	ldrh	r2, [r7, #12]
 8011d94:	f7fb ff7e 	bl	800dc94 <pbuf_copy_partial>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	461a      	mov	r2, r3
 8011d9c:	89bb      	ldrh	r3, [r7, #12]
 8011d9e:	4293      	cmp	r3, r2
 8011da0:	f040 809f 	bne.w	8011ee2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011da4:	697b      	ldr	r3, [r7, #20]
 8011da6:	68db      	ldr	r3, [r3, #12]
 8011da8:	899b      	ldrh	r3, [r3, #12]
 8011daa:	b29b      	uxth	r3, r3
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7fa f8bd 	bl	800bf2c <lwip_htons>
 8011db2:	4603      	mov	r3, r0
 8011db4:	b2db      	uxtb	r3, r3
 8011db6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011dba:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011dc0:	7efb      	ldrb	r3, [r7, #27]
 8011dc2:	f003 0308 	and.w	r3, r3, #8
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d007      	beq.n	8011dda <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011dca:	7efb      	ldrb	r3, [r7, #27]
 8011dcc:	f023 0308 	bic.w	r3, r3, #8
 8011dd0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011dd2:	7ebb      	ldrb	r3, [r7, #26]
 8011dd4:	f043 0308 	orr.w	r3, r3, #8
 8011dd8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011dda:	7efb      	ldrb	r3, [r7, #27]
 8011ddc:	f003 0301 	and.w	r3, r3, #1
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d007      	beq.n	8011df4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011de4:	7efb      	ldrb	r3, [r7, #27]
 8011de6:	f023 0301 	bic.w	r3, r3, #1
 8011dea:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011dec:	7ebb      	ldrb	r3, [r7, #26]
 8011dee:	f043 0301 	orr.w	r3, r3, #1
 8011df2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	68db      	ldr	r3, [r3, #12]
 8011df8:	685b      	ldr	r3, [r3, #4]
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f7fa f8ab 	bl	800bf56 <lwip_htonl>
 8011e00:	4602      	mov	r2, r0
 8011e02:	887b      	ldrh	r3, [r7, #2]
 8011e04:	18d1      	adds	r1, r2, r3
 8011e06:	7eba      	ldrb	r2, [r7, #26]
 8011e08:	7bfb      	ldrb	r3, [r7, #15]
 8011e0a:	9300      	str	r3, [sp, #0]
 8011e0c:	460b      	mov	r3, r1
 8011e0e:	6939      	ldr	r1, [r7, #16]
 8011e10:	6878      	ldr	r0, [r7, #4]
 8011e12:	f7ff fea9 	bl	8011b68 <tcp_create_segment>
 8011e16:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011e18:	69fb      	ldr	r3, [r7, #28]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d063      	beq.n	8011ee6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011e1e:	697b      	ldr	r3, [r7, #20]
 8011e20:	685b      	ldr	r3, [r3, #4]
 8011e22:	4618      	mov	r0, r3
 8011e24:	f7fb fdce 	bl	800d9c4 <pbuf_clen>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	461a      	mov	r2, r3
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011e32:	1a9b      	subs	r3, r3, r2
 8011e34:	b29a      	uxth	r2, r3
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011e3c:	697b      	ldr	r3, [r7, #20]
 8011e3e:	6858      	ldr	r0, [r3, #4]
 8011e40:	697b      	ldr	r3, [r7, #20]
 8011e42:	685b      	ldr	r3, [r3, #4]
 8011e44:	891a      	ldrh	r2, [r3, #8]
 8011e46:	89bb      	ldrh	r3, [r7, #12]
 8011e48:	1ad3      	subs	r3, r2, r3
 8011e4a:	b29b      	uxth	r3, r3
 8011e4c:	4619      	mov	r1, r3
 8011e4e:	f7fb fba5 	bl	800d59c <pbuf_realloc>
  useg->len -= remainder;
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	891a      	ldrh	r2, [r3, #8]
 8011e56:	89bb      	ldrh	r3, [r7, #12]
 8011e58:	1ad3      	subs	r3, r2, r3
 8011e5a:	b29a      	uxth	r2, r3
 8011e5c:	697b      	ldr	r3, [r7, #20]
 8011e5e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	68db      	ldr	r3, [r3, #12]
 8011e64:	899b      	ldrh	r3, [r3, #12]
 8011e66:	b29c      	uxth	r4, r3
 8011e68:	7efb      	ldrb	r3, [r7, #27]
 8011e6a:	b29b      	uxth	r3, r3
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f7fa f85d 	bl	800bf2c <lwip_htons>
 8011e72:	4603      	mov	r3, r0
 8011e74:	461a      	mov	r2, r3
 8011e76:	697b      	ldr	r3, [r7, #20]
 8011e78:	68db      	ldr	r3, [r3, #12]
 8011e7a:	4322      	orrs	r2, r4
 8011e7c:	b292      	uxth	r2, r2
 8011e7e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011e80:	697b      	ldr	r3, [r7, #20]
 8011e82:	685b      	ldr	r3, [r3, #4]
 8011e84:	4618      	mov	r0, r3
 8011e86:	f7fb fd9d 	bl	800d9c4 <pbuf_clen>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	461a      	mov	r2, r3
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011e94:	4413      	add	r3, r2
 8011e96:	b29a      	uxth	r2, r3
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011e9e:	69fb      	ldr	r3, [r7, #28]
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f7fb fd8e 	bl	800d9c4 <pbuf_clen>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	461a      	mov	r2, r3
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011eb2:	4413      	add	r3, r2
 8011eb4:	b29a      	uxth	r2, r3
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	681a      	ldr	r2, [r3, #0]
 8011ec0:	69fb      	ldr	r3, [r7, #28]
 8011ec2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011ec4:	697b      	ldr	r3, [r7, #20]
 8011ec6:	69fa      	ldr	r2, [r7, #28]
 8011ec8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d103      	bne.n	8011eda <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011eda:	2300      	movs	r3, #0
 8011edc:	e016      	b.n	8011f0c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011ede:	bf00      	nop
 8011ee0:	e002      	b.n	8011ee8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011ee2:	bf00      	nop
 8011ee4:	e000      	b.n	8011ee8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011ee6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011ee8:	69fb      	ldr	r3, [r7, #28]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d006      	beq.n	8011efc <tcp_split_unsent_seg+0x25c>
 8011eee:	4b09      	ldr	r3, [pc, #36]	@ (8011f14 <tcp_split_unsent_seg+0x274>)
 8011ef0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8011ef4:	490d      	ldr	r1, [pc, #52]	@ (8011f2c <tcp_split_unsent_seg+0x28c>)
 8011ef6:	4809      	ldr	r0, [pc, #36]	@ (8011f1c <tcp_split_unsent_seg+0x27c>)
 8011ef8:	f004 f8e0 	bl	80160bc <iprintf>
  if (p != NULL) {
 8011efc:	693b      	ldr	r3, [r7, #16]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d002      	beq.n	8011f08 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011f02:	6938      	ldr	r0, [r7, #16]
 8011f04:	f7fb fcd0 	bl	800d8a8 <pbuf_free>
  }

  return ERR_MEM;
 8011f08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3724      	adds	r7, #36	@ 0x24
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd90      	pop	{r4, r7, pc}
 8011f14:	08018d78 	.word	0x08018d78
 8011f18:	0801910c 	.word	0x0801910c
 8011f1c:	08018dcc 	.word	0x08018dcc
 8011f20:	08019130 	.word	0x08019130
 8011f24:	08019154 	.word	0x08019154
 8011f28:	08019164 	.word	0x08019164
 8011f2c:	08019174 	.word	0x08019174

08011f30 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011f30:	b590      	push	{r4, r7, lr}
 8011f32:	b085      	sub	sp, #20
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d106      	bne.n	8011f4c <tcp_send_fin+0x1c>
 8011f3e:	4b21      	ldr	r3, [pc, #132]	@ (8011fc4 <tcp_send_fin+0x94>)
 8011f40:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8011f44:	4920      	ldr	r1, [pc, #128]	@ (8011fc8 <tcp_send_fin+0x98>)
 8011f46:	4821      	ldr	r0, [pc, #132]	@ (8011fcc <tcp_send_fin+0x9c>)
 8011f48:	f004 f8b8 	bl	80160bc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d02e      	beq.n	8011fb2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f58:	60fb      	str	r3, [r7, #12]
 8011f5a:	e002      	b.n	8011f62 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d1f8      	bne.n	8011f5c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	68db      	ldr	r3, [r3, #12]
 8011f6e:	899b      	ldrh	r3, [r3, #12]
 8011f70:	b29b      	uxth	r3, r3
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7f9 ffda 	bl	800bf2c <lwip_htons>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	f003 0307 	and.w	r3, r3, #7
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d116      	bne.n	8011fb2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	68db      	ldr	r3, [r3, #12]
 8011f88:	899b      	ldrh	r3, [r3, #12]
 8011f8a:	b29c      	uxth	r4, r3
 8011f8c:	2001      	movs	r0, #1
 8011f8e:	f7f9 ffcd 	bl	800bf2c <lwip_htons>
 8011f92:	4603      	mov	r3, r0
 8011f94:	461a      	mov	r2, r3
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	68db      	ldr	r3, [r3, #12]
 8011f9a:	4322      	orrs	r2, r4
 8011f9c:	b292      	uxth	r2, r2
 8011f9e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	8b5b      	ldrh	r3, [r3, #26]
 8011fa4:	f043 0320 	orr.w	r3, r3, #32
 8011fa8:	b29a      	uxth	r2, r3
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	e004      	b.n	8011fbc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011fb2:	2101      	movs	r1, #1
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f000 f80b 	bl	8011fd0 <tcp_enqueue_flags>
 8011fba:	4603      	mov	r3, r0
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3714      	adds	r7, #20
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd90      	pop	{r4, r7, pc}
 8011fc4:	08018d78 	.word	0x08018d78
 8011fc8:	08019180 	.word	0x08019180
 8011fcc:	08018dcc 	.word	0x08018dcc

08011fd0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b08a      	sub	sp, #40	@ 0x28
 8011fd4:	af02      	add	r7, sp, #8
 8011fd6:	6078      	str	r0, [r7, #4]
 8011fd8:	460b      	mov	r3, r1
 8011fda:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011fdc:	2300      	movs	r3, #0
 8011fde:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011fe4:	78fb      	ldrb	r3, [r7, #3]
 8011fe6:	f003 0303 	and.w	r3, r3, #3
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d106      	bne.n	8011ffc <tcp_enqueue_flags+0x2c>
 8011fee:	4b67      	ldr	r3, [pc, #412]	@ (801218c <tcp_enqueue_flags+0x1bc>)
 8011ff0:	f240 4211 	movw	r2, #1041	@ 0x411
 8011ff4:	4966      	ldr	r1, [pc, #408]	@ (8012190 <tcp_enqueue_flags+0x1c0>)
 8011ff6:	4867      	ldr	r0, [pc, #412]	@ (8012194 <tcp_enqueue_flags+0x1c4>)
 8011ff8:	f004 f860 	bl	80160bc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d106      	bne.n	8012010 <tcp_enqueue_flags+0x40>
 8012002:	4b62      	ldr	r3, [pc, #392]	@ (801218c <tcp_enqueue_flags+0x1bc>)
 8012004:	f240 4213 	movw	r2, #1043	@ 0x413
 8012008:	4963      	ldr	r1, [pc, #396]	@ (8012198 <tcp_enqueue_flags+0x1c8>)
 801200a:	4862      	ldr	r0, [pc, #392]	@ (8012194 <tcp_enqueue_flags+0x1c4>)
 801200c:	f004 f856 	bl	80160bc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012010:	78fb      	ldrb	r3, [r7, #3]
 8012012:	f003 0302 	and.w	r3, r3, #2
 8012016:	2b00      	cmp	r3, #0
 8012018:	d001      	beq.n	801201e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801201a:	2301      	movs	r3, #1
 801201c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801201e:	7ffb      	ldrb	r3, [r7, #31]
 8012020:	009b      	lsls	r3, r3, #2
 8012022:	b2db      	uxtb	r3, r3
 8012024:	f003 0304 	and.w	r3, r3, #4
 8012028:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801202a:	7dfb      	ldrb	r3, [r7, #23]
 801202c:	b29b      	uxth	r3, r3
 801202e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012032:	4619      	mov	r1, r3
 8012034:	2036      	movs	r0, #54	@ 0x36
 8012036:	f7fb f94f 	bl	800d2d8 <pbuf_alloc>
 801203a:	6138      	str	r0, [r7, #16]
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d109      	bne.n	8012056 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	8b5b      	ldrh	r3, [r3, #26]
 8012046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801204a:	b29a      	uxth	r2, r3
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012050:	f04f 33ff 	mov.w	r3, #4294967295
 8012054:	e095      	b.n	8012182 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012056:	693b      	ldr	r3, [r7, #16]
 8012058:	895a      	ldrh	r2, [r3, #10]
 801205a:	7dfb      	ldrb	r3, [r7, #23]
 801205c:	b29b      	uxth	r3, r3
 801205e:	429a      	cmp	r2, r3
 8012060:	d206      	bcs.n	8012070 <tcp_enqueue_flags+0xa0>
 8012062:	4b4a      	ldr	r3, [pc, #296]	@ (801218c <tcp_enqueue_flags+0x1bc>)
 8012064:	f240 4239 	movw	r2, #1081	@ 0x439
 8012068:	494c      	ldr	r1, [pc, #304]	@ (801219c <tcp_enqueue_flags+0x1cc>)
 801206a:	484a      	ldr	r0, [pc, #296]	@ (8012194 <tcp_enqueue_flags+0x1c4>)
 801206c:	f004 f826 	bl	80160bc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8012074:	78fa      	ldrb	r2, [r7, #3]
 8012076:	7ffb      	ldrb	r3, [r7, #31]
 8012078:	9300      	str	r3, [sp, #0]
 801207a:	460b      	mov	r3, r1
 801207c:	6939      	ldr	r1, [r7, #16]
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	f7ff fd72 	bl	8011b68 <tcp_create_segment>
 8012084:	60f8      	str	r0, [r7, #12]
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d109      	bne.n	80120a0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	8b5b      	ldrh	r3, [r3, #26]
 8012090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012094:	b29a      	uxth	r2, r3
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801209a:	f04f 33ff 	mov.w	r3, #4294967295
 801209e:	e070      	b.n	8012182 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	68db      	ldr	r3, [r3, #12]
 80120a4:	f003 0303 	and.w	r3, r3, #3
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d006      	beq.n	80120ba <tcp_enqueue_flags+0xea>
 80120ac:	4b37      	ldr	r3, [pc, #220]	@ (801218c <tcp_enqueue_flags+0x1bc>)
 80120ae:	f240 4242 	movw	r2, #1090	@ 0x442
 80120b2:	493b      	ldr	r1, [pc, #236]	@ (80121a0 <tcp_enqueue_flags+0x1d0>)
 80120b4:	4837      	ldr	r0, [pc, #220]	@ (8012194 <tcp_enqueue_flags+0x1c4>)
 80120b6:	f004 f801 	bl	80160bc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	891b      	ldrh	r3, [r3, #8]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d006      	beq.n	80120d0 <tcp_enqueue_flags+0x100>
 80120c2:	4b32      	ldr	r3, [pc, #200]	@ (801218c <tcp_enqueue_flags+0x1bc>)
 80120c4:	f240 4243 	movw	r2, #1091	@ 0x443
 80120c8:	4936      	ldr	r1, [pc, #216]	@ (80121a4 <tcp_enqueue_flags+0x1d4>)
 80120ca:	4832      	ldr	r0, [pc, #200]	@ (8012194 <tcp_enqueue_flags+0x1c4>)
 80120cc:	f003 fff6 	bl	80160bc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d103      	bne.n	80120e0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	68fa      	ldr	r2, [r7, #12]
 80120dc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80120de:	e00d      	b.n	80120fc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80120e4:	61bb      	str	r3, [r7, #24]
 80120e6:	e002      	b.n	80120ee <tcp_enqueue_flags+0x11e>
 80120e8:	69bb      	ldr	r3, [r7, #24]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	61bb      	str	r3, [r7, #24]
 80120ee:	69bb      	ldr	r3, [r7, #24]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d1f8      	bne.n	80120e8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80120f6:	69bb      	ldr	r3, [r7, #24]
 80120f8:	68fa      	ldr	r2, [r7, #12]
 80120fa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2200      	movs	r2, #0
 8012100:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012104:	78fb      	ldrb	r3, [r7, #3]
 8012106:	f003 0302 	and.w	r3, r3, #2
 801210a:	2b00      	cmp	r3, #0
 801210c:	d104      	bne.n	8012118 <tcp_enqueue_flags+0x148>
 801210e:	78fb      	ldrb	r3, [r7, #3]
 8012110:	f003 0301 	and.w	r3, r3, #1
 8012114:	2b00      	cmp	r3, #0
 8012116:	d004      	beq.n	8012122 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801211c:	1c5a      	adds	r2, r3, #1
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012122:	78fb      	ldrb	r3, [r7, #3]
 8012124:	f003 0301 	and.w	r3, r3, #1
 8012128:	2b00      	cmp	r3, #0
 801212a:	d006      	beq.n	801213a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	8b5b      	ldrh	r3, [r3, #26]
 8012130:	f043 0320 	orr.w	r3, r3, #32
 8012134:	b29a      	uxth	r2, r3
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	685b      	ldr	r3, [r3, #4]
 801213e:	4618      	mov	r0, r3
 8012140:	f7fb fc40 	bl	800d9c4 <pbuf_clen>
 8012144:	4603      	mov	r3, r0
 8012146:	461a      	mov	r2, r3
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801214e:	4413      	add	r3, r2
 8012150:	b29a      	uxth	r2, r3
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801215e:	2b00      	cmp	r3, #0
 8012160:	d00e      	beq.n	8012180 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012166:	2b00      	cmp	r3, #0
 8012168:	d10a      	bne.n	8012180 <tcp_enqueue_flags+0x1b0>
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801216e:	2b00      	cmp	r3, #0
 8012170:	d106      	bne.n	8012180 <tcp_enqueue_flags+0x1b0>
 8012172:	4b06      	ldr	r3, [pc, #24]	@ (801218c <tcp_enqueue_flags+0x1bc>)
 8012174:	f240 4265 	movw	r2, #1125	@ 0x465
 8012178:	490b      	ldr	r1, [pc, #44]	@ (80121a8 <tcp_enqueue_flags+0x1d8>)
 801217a:	4806      	ldr	r0, [pc, #24]	@ (8012194 <tcp_enqueue_flags+0x1c4>)
 801217c:	f003 ff9e 	bl	80160bc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012180:	2300      	movs	r3, #0
}
 8012182:	4618      	mov	r0, r3
 8012184:	3720      	adds	r7, #32
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}
 801218a:	bf00      	nop
 801218c:	08018d78 	.word	0x08018d78
 8012190:	0801919c 	.word	0x0801919c
 8012194:	08018dcc 	.word	0x08018dcc
 8012198:	080191f4 	.word	0x080191f4
 801219c:	08019214 	.word	0x08019214
 80121a0:	08019250 	.word	0x08019250
 80121a4:	08019268 	.word	0x08019268
 80121a8:	08019294 	.word	0x08019294

080121ac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80121ac:	b5b0      	push	{r4, r5, r7, lr}
 80121ae:	b08a      	sub	sp, #40	@ 0x28
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d106      	bne.n	80121c8 <tcp_output+0x1c>
 80121ba:	4b8a      	ldr	r3, [pc, #552]	@ (80123e4 <tcp_output+0x238>)
 80121bc:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80121c0:	4989      	ldr	r1, [pc, #548]	@ (80123e8 <tcp_output+0x23c>)
 80121c2:	488a      	ldr	r0, [pc, #552]	@ (80123ec <tcp_output+0x240>)
 80121c4:	f003 ff7a 	bl	80160bc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	7d1b      	ldrb	r3, [r3, #20]
 80121cc:	2b01      	cmp	r3, #1
 80121ce:	d106      	bne.n	80121de <tcp_output+0x32>
 80121d0:	4b84      	ldr	r3, [pc, #528]	@ (80123e4 <tcp_output+0x238>)
 80121d2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80121d6:	4986      	ldr	r1, [pc, #536]	@ (80123f0 <tcp_output+0x244>)
 80121d8:	4884      	ldr	r0, [pc, #528]	@ (80123ec <tcp_output+0x240>)
 80121da:	f003 ff6f 	bl	80160bc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80121de:	4b85      	ldr	r3, [pc, #532]	@ (80123f4 <tcp_output+0x248>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	687a      	ldr	r2, [r7, #4]
 80121e4:	429a      	cmp	r2, r3
 80121e6:	d101      	bne.n	80121ec <tcp_output+0x40>
    return ERR_OK;
 80121e8:	2300      	movs	r3, #0
 80121ea:	e1ce      	b.n	801258a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80121f8:	4293      	cmp	r3, r2
 80121fa:	bf28      	it	cs
 80121fc:	4613      	movcs	r3, r2
 80121fe:	b29b      	uxth	r3, r3
 8012200:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012206:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801220a:	2b00      	cmp	r3, #0
 801220c:	d10b      	bne.n	8012226 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	8b5b      	ldrh	r3, [r3, #26]
 8012212:	f003 0302 	and.w	r3, r3, #2
 8012216:	2b00      	cmp	r3, #0
 8012218:	f000 81aa 	beq.w	8012570 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801221c:	6878      	ldr	r0, [r7, #4]
 801221e:	f000 fdcb 	bl	8012db8 <tcp_send_empty_ack>
 8012222:	4603      	mov	r3, r0
 8012224:	e1b1      	b.n	801258a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012226:	6879      	ldr	r1, [r7, #4]
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	3304      	adds	r3, #4
 801222c:	461a      	mov	r2, r3
 801222e:	6878      	ldr	r0, [r7, #4]
 8012230:	f7ff fc7e 	bl	8011b30 <tcp_route>
 8012234:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012236:	697b      	ldr	r3, [r7, #20]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d102      	bne.n	8012242 <tcp_output+0x96>
    return ERR_RTE;
 801223c:	f06f 0303 	mvn.w	r3, #3
 8012240:	e1a3      	b.n	801258a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d003      	beq.n	8012250 <tcp_output+0xa4>
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d111      	bne.n	8012274 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012250:	697b      	ldr	r3, [r7, #20]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d002      	beq.n	801225c <tcp_output+0xb0>
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	3304      	adds	r3, #4
 801225a:	e000      	b.n	801225e <tcp_output+0xb2>
 801225c:	2300      	movs	r3, #0
 801225e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012260:	693b      	ldr	r3, [r7, #16]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d102      	bne.n	801226c <tcp_output+0xc0>
      return ERR_RTE;
 8012266:	f06f 0303 	mvn.w	r3, #3
 801226a:	e18e      	b.n	801258a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801226c:	693b      	ldr	r3, [r7, #16]
 801226e:	681a      	ldr	r2, [r3, #0]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012276:	68db      	ldr	r3, [r3, #12]
 8012278:	685b      	ldr	r3, [r3, #4]
 801227a:	4618      	mov	r0, r3
 801227c:	f7f9 fe6b 	bl	800bf56 <lwip_htonl>
 8012280:	4602      	mov	r2, r0
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012286:	1ad3      	subs	r3, r2, r3
 8012288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801228a:	8912      	ldrh	r2, [r2, #8]
 801228c:	4413      	add	r3, r2
 801228e:	69ba      	ldr	r2, [r7, #24]
 8012290:	429a      	cmp	r2, r3
 8012292:	d227      	bcs.n	80122e4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801229a:	461a      	mov	r2, r3
 801229c:	69bb      	ldr	r3, [r7, #24]
 801229e:	4293      	cmp	r3, r2
 80122a0:	d114      	bne.n	80122cc <tcp_output+0x120>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d110      	bne.n	80122cc <tcp_output+0x120>
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d10b      	bne.n	80122cc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2200      	movs	r2, #0
 80122b8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2201      	movs	r2, #1
 80122c0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2200      	movs	r2, #0
 80122c8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	8b5b      	ldrh	r3, [r3, #26]
 80122d0:	f003 0302 	and.w	r3, r3, #2
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	f000 814d 	beq.w	8012574 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	f000 fd6c 	bl	8012db8 <tcp_send_empty_ack>
 80122e0:	4603      	mov	r3, r0
 80122e2:	e152      	b.n	801258a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	2200      	movs	r2, #0
 80122e8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80122f0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80122f2:	6a3b      	ldr	r3, [r7, #32]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	f000 811c 	beq.w	8012532 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80122fa:	e002      	b.n	8012302 <tcp_output+0x156>
 80122fc:	6a3b      	ldr	r3, [r7, #32]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	623b      	str	r3, [r7, #32]
 8012302:	6a3b      	ldr	r3, [r7, #32]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d1f8      	bne.n	80122fc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801230a:	e112      	b.n	8012532 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801230e:	68db      	ldr	r3, [r3, #12]
 8012310:	899b      	ldrh	r3, [r3, #12]
 8012312:	b29b      	uxth	r3, r3
 8012314:	4618      	mov	r0, r3
 8012316:	f7f9 fe09 	bl	800bf2c <lwip_htons>
 801231a:	4603      	mov	r3, r0
 801231c:	b2db      	uxtb	r3, r3
 801231e:	f003 0304 	and.w	r3, r3, #4
 8012322:	2b00      	cmp	r3, #0
 8012324:	d006      	beq.n	8012334 <tcp_output+0x188>
 8012326:	4b2f      	ldr	r3, [pc, #188]	@ (80123e4 <tcp_output+0x238>)
 8012328:	f240 5236 	movw	r2, #1334	@ 0x536
 801232c:	4932      	ldr	r1, [pc, #200]	@ (80123f8 <tcp_output+0x24c>)
 801232e:	482f      	ldr	r0, [pc, #188]	@ (80123ec <tcp_output+0x240>)
 8012330:	f003 fec4 	bl	80160bc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012338:	2b00      	cmp	r3, #0
 801233a:	d01f      	beq.n	801237c <tcp_output+0x1d0>
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	8b5b      	ldrh	r3, [r3, #26]
 8012340:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012344:	2b00      	cmp	r3, #0
 8012346:	d119      	bne.n	801237c <tcp_output+0x1d0>
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801234c:	2b00      	cmp	r3, #0
 801234e:	d00b      	beq.n	8012368 <tcp_output+0x1bc>
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d110      	bne.n	801237c <tcp_output+0x1d0>
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801235e:	891a      	ldrh	r2, [r3, #8]
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012364:	429a      	cmp	r2, r3
 8012366:	d209      	bcs.n	801237c <tcp_output+0x1d0>
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801236e:	2b00      	cmp	r3, #0
 8012370:	d004      	beq.n	801237c <tcp_output+0x1d0>
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012378:	2b0f      	cmp	r3, #15
 801237a:	d901      	bls.n	8012380 <tcp_output+0x1d4>
 801237c:	2301      	movs	r3, #1
 801237e:	e000      	b.n	8012382 <tcp_output+0x1d6>
 8012380:	2300      	movs	r3, #0
 8012382:	2b00      	cmp	r3, #0
 8012384:	d106      	bne.n	8012394 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	8b5b      	ldrh	r3, [r3, #26]
 801238a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801238e:	2b00      	cmp	r3, #0
 8012390:	f000 80e4 	beq.w	801255c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	7d1b      	ldrb	r3, [r3, #20]
 8012398:	2b02      	cmp	r3, #2
 801239a:	d00d      	beq.n	80123b8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801239c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801239e:	68db      	ldr	r3, [r3, #12]
 80123a0:	899b      	ldrh	r3, [r3, #12]
 80123a2:	b29c      	uxth	r4, r3
 80123a4:	2010      	movs	r0, #16
 80123a6:	f7f9 fdc1 	bl	800bf2c <lwip_htons>
 80123aa:	4603      	mov	r3, r0
 80123ac:	461a      	mov	r2, r3
 80123ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123b0:	68db      	ldr	r3, [r3, #12]
 80123b2:	4322      	orrs	r2, r4
 80123b4:	b292      	uxth	r2, r2
 80123b6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80123b8:	697a      	ldr	r2, [r7, #20]
 80123ba:	6879      	ldr	r1, [r7, #4]
 80123bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80123be:	f000 f909 	bl	80125d4 <tcp_output_segment>
 80123c2:	4603      	mov	r3, r0
 80123c4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80123c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d016      	beq.n	80123fc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	8b5b      	ldrh	r3, [r3, #26]
 80123d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	835a      	strh	r2, [r3, #26]
      return err;
 80123dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123e0:	e0d3      	b.n	801258a <tcp_output+0x3de>
 80123e2:	bf00      	nop
 80123e4:	08018d78 	.word	0x08018d78
 80123e8:	080192bc 	.word	0x080192bc
 80123ec:	08018dcc 	.word	0x08018dcc
 80123f0:	080192d4 	.word	0x080192d4
 80123f4:	2400ca18 	.word	0x2400ca18
 80123f8:	080192fc 	.word	0x080192fc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80123fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123fe:	681a      	ldr	r2, [r3, #0]
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	7d1b      	ldrb	r3, [r3, #20]
 8012408:	2b02      	cmp	r3, #2
 801240a:	d006      	beq.n	801241a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	8b5b      	ldrh	r3, [r3, #26]
 8012410:	f023 0303 	bic.w	r3, r3, #3
 8012414:	b29a      	uxth	r2, r3
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801241c:	68db      	ldr	r3, [r3, #12]
 801241e:	685b      	ldr	r3, [r3, #4]
 8012420:	4618      	mov	r0, r3
 8012422:	f7f9 fd98 	bl	800bf56 <lwip_htonl>
 8012426:	4604      	mov	r4, r0
 8012428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801242a:	891b      	ldrh	r3, [r3, #8]
 801242c:	461d      	mov	r5, r3
 801242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012430:	68db      	ldr	r3, [r3, #12]
 8012432:	899b      	ldrh	r3, [r3, #12]
 8012434:	b29b      	uxth	r3, r3
 8012436:	4618      	mov	r0, r3
 8012438:	f7f9 fd78 	bl	800bf2c <lwip_htons>
 801243c:	4603      	mov	r3, r0
 801243e:	b2db      	uxtb	r3, r3
 8012440:	f003 0303 	and.w	r3, r3, #3
 8012444:	2b00      	cmp	r3, #0
 8012446:	d001      	beq.n	801244c <tcp_output+0x2a0>
 8012448:	2301      	movs	r3, #1
 801244a:	e000      	b.n	801244e <tcp_output+0x2a2>
 801244c:	2300      	movs	r3, #0
 801244e:	442b      	add	r3, r5
 8012450:	4423      	add	r3, r4
 8012452:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	1ad3      	subs	r3, r2, r3
 801245c:	2b00      	cmp	r3, #0
 801245e:	da02      	bge.n	8012466 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	68ba      	ldr	r2, [r7, #8]
 8012464:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012468:	891b      	ldrh	r3, [r3, #8]
 801246a:	461c      	mov	r4, r3
 801246c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801246e:	68db      	ldr	r3, [r3, #12]
 8012470:	899b      	ldrh	r3, [r3, #12]
 8012472:	b29b      	uxth	r3, r3
 8012474:	4618      	mov	r0, r3
 8012476:	f7f9 fd59 	bl	800bf2c <lwip_htons>
 801247a:	4603      	mov	r3, r0
 801247c:	b2db      	uxtb	r3, r3
 801247e:	f003 0303 	and.w	r3, r3, #3
 8012482:	2b00      	cmp	r3, #0
 8012484:	d001      	beq.n	801248a <tcp_output+0x2de>
 8012486:	2301      	movs	r3, #1
 8012488:	e000      	b.n	801248c <tcp_output+0x2e0>
 801248a:	2300      	movs	r3, #0
 801248c:	4423      	add	r3, r4
 801248e:	2b00      	cmp	r3, #0
 8012490:	d049      	beq.n	8012526 <tcp_output+0x37a>
      seg->next = NULL;
 8012492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012494:	2200      	movs	r2, #0
 8012496:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801249c:	2b00      	cmp	r3, #0
 801249e:	d105      	bne.n	80124ac <tcp_output+0x300>
        pcb->unacked = seg;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80124a4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80124a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124a8:	623b      	str	r3, [r7, #32]
 80124aa:	e03f      	b.n	801252c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80124ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124ae:	68db      	ldr	r3, [r3, #12]
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	4618      	mov	r0, r3
 80124b4:	f7f9 fd4f 	bl	800bf56 <lwip_htonl>
 80124b8:	4604      	mov	r4, r0
 80124ba:	6a3b      	ldr	r3, [r7, #32]
 80124bc:	68db      	ldr	r3, [r3, #12]
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	4618      	mov	r0, r3
 80124c2:	f7f9 fd48 	bl	800bf56 <lwip_htonl>
 80124c6:	4603      	mov	r3, r0
 80124c8:	1ae3      	subs	r3, r4, r3
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	da24      	bge.n	8012518 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	3370      	adds	r3, #112	@ 0x70
 80124d2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80124d4:	e002      	b.n	80124dc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80124d6:	69fb      	ldr	r3, [r7, #28]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80124dc:	69fb      	ldr	r3, [r7, #28]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d011      	beq.n	8012508 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80124e4:	69fb      	ldr	r3, [r7, #28]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	68db      	ldr	r3, [r3, #12]
 80124ea:	685b      	ldr	r3, [r3, #4]
 80124ec:	4618      	mov	r0, r3
 80124ee:	f7f9 fd32 	bl	800bf56 <lwip_htonl>
 80124f2:	4604      	mov	r4, r0
 80124f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124f6:	68db      	ldr	r3, [r3, #12]
 80124f8:	685b      	ldr	r3, [r3, #4]
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7f9 fd2b 	bl	800bf56 <lwip_htonl>
 8012500:	4603      	mov	r3, r0
 8012502:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012504:	2b00      	cmp	r3, #0
 8012506:	dbe6      	blt.n	80124d6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012508:	69fb      	ldr	r3, [r7, #28]
 801250a:	681a      	ldr	r2, [r3, #0]
 801250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801250e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012510:	69fb      	ldr	r3, [r7, #28]
 8012512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012514:	601a      	str	r2, [r3, #0]
 8012516:	e009      	b.n	801252c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012518:	6a3b      	ldr	r3, [r7, #32]
 801251a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801251c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801251e:	6a3b      	ldr	r3, [r7, #32]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	623b      	str	r3, [r7, #32]
 8012524:	e002      	b.n	801252c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012526:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012528:	f7fc fc43 	bl	800edb2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012530:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012534:	2b00      	cmp	r3, #0
 8012536:	d012      	beq.n	801255e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801253a:	68db      	ldr	r3, [r3, #12]
 801253c:	685b      	ldr	r3, [r3, #4]
 801253e:	4618      	mov	r0, r3
 8012540:	f7f9 fd09 	bl	800bf56 <lwip_htonl>
 8012544:	4602      	mov	r2, r0
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801254a:	1ad3      	subs	r3, r2, r3
 801254c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801254e:	8912      	ldrh	r2, [r2, #8]
 8012550:	4413      	add	r3, r2
  while (seg != NULL &&
 8012552:	69ba      	ldr	r2, [r7, #24]
 8012554:	429a      	cmp	r2, r3
 8012556:	f4bf aed9 	bcs.w	801230c <tcp_output+0x160>
 801255a:	e000      	b.n	801255e <tcp_output+0x3b2>
      break;
 801255c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012562:	2b00      	cmp	r3, #0
 8012564:	d108      	bne.n	8012578 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	2200      	movs	r2, #0
 801256a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801256e:	e004      	b.n	801257a <tcp_output+0x3ce>
    goto output_done;
 8012570:	bf00      	nop
 8012572:	e002      	b.n	801257a <tcp_output+0x3ce>
    goto output_done;
 8012574:	bf00      	nop
 8012576:	e000      	b.n	801257a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012578:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	8b5b      	ldrh	r3, [r3, #26]
 801257e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012582:	b29a      	uxth	r2, r3
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012588:	2300      	movs	r3, #0
}
 801258a:	4618      	mov	r0, r3
 801258c:	3728      	adds	r7, #40	@ 0x28
 801258e:	46bd      	mov	sp, r7
 8012590:	bdb0      	pop	{r4, r5, r7, pc}
 8012592:	bf00      	nop

08012594 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d106      	bne.n	80125b0 <tcp_output_segment_busy+0x1c>
 80125a2:	4b09      	ldr	r3, [pc, #36]	@ (80125c8 <tcp_output_segment_busy+0x34>)
 80125a4:	f240 529a 	movw	r2, #1434	@ 0x59a
 80125a8:	4908      	ldr	r1, [pc, #32]	@ (80125cc <tcp_output_segment_busy+0x38>)
 80125aa:	4809      	ldr	r0, [pc, #36]	@ (80125d0 <tcp_output_segment_busy+0x3c>)
 80125ac:	f003 fd86 	bl	80160bc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	685b      	ldr	r3, [r3, #4]
 80125b4:	7b9b      	ldrb	r3, [r3, #14]
 80125b6:	2b01      	cmp	r3, #1
 80125b8:	d001      	beq.n	80125be <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80125ba:	2301      	movs	r3, #1
 80125bc:	e000      	b.n	80125c0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80125be:	2300      	movs	r3, #0
}
 80125c0:	4618      	mov	r0, r3
 80125c2:	3708      	adds	r7, #8
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}
 80125c8:	08018d78 	.word	0x08018d78
 80125cc:	08019314 	.word	0x08019314
 80125d0:	08018dcc 	.word	0x08018dcc

080125d4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80125d4:	b5b0      	push	{r4, r5, r7, lr}
 80125d6:	b08c      	sub	sp, #48	@ 0x30
 80125d8:	af04      	add	r7, sp, #16
 80125da:	60f8      	str	r0, [r7, #12]
 80125dc:	60b9      	str	r1, [r7, #8]
 80125de:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d106      	bne.n	80125f4 <tcp_output_segment+0x20>
 80125e6:	4b64      	ldr	r3, [pc, #400]	@ (8012778 <tcp_output_segment+0x1a4>)
 80125e8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80125ec:	4963      	ldr	r1, [pc, #396]	@ (801277c <tcp_output_segment+0x1a8>)
 80125ee:	4864      	ldr	r0, [pc, #400]	@ (8012780 <tcp_output_segment+0x1ac>)
 80125f0:	f003 fd64 	bl	80160bc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d106      	bne.n	8012608 <tcp_output_segment+0x34>
 80125fa:	4b5f      	ldr	r3, [pc, #380]	@ (8012778 <tcp_output_segment+0x1a4>)
 80125fc:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012600:	4960      	ldr	r1, [pc, #384]	@ (8012784 <tcp_output_segment+0x1b0>)
 8012602:	485f      	ldr	r0, [pc, #380]	@ (8012780 <tcp_output_segment+0x1ac>)
 8012604:	f003 fd5a 	bl	80160bc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d106      	bne.n	801261c <tcp_output_segment+0x48>
 801260e:	4b5a      	ldr	r3, [pc, #360]	@ (8012778 <tcp_output_segment+0x1a4>)
 8012610:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012614:	495c      	ldr	r1, [pc, #368]	@ (8012788 <tcp_output_segment+0x1b4>)
 8012616:	485a      	ldr	r0, [pc, #360]	@ (8012780 <tcp_output_segment+0x1ac>)
 8012618:	f003 fd50 	bl	80160bc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801261c:	68f8      	ldr	r0, [r7, #12]
 801261e:	f7ff ffb9 	bl	8012594 <tcp_output_segment_busy>
 8012622:	4603      	mov	r3, r0
 8012624:	2b00      	cmp	r3, #0
 8012626:	d001      	beq.n	801262c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012628:	2300      	movs	r3, #0
 801262a:	e0a1      	b.n	8012770 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801262c:	68bb      	ldr	r3, [r7, #8]
 801262e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	68dc      	ldr	r4, [r3, #12]
 8012634:	4610      	mov	r0, r2
 8012636:	f7f9 fc8e 	bl	800bf56 <lwip_htonl>
 801263a:	4603      	mov	r3, r0
 801263c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801263e:	68bb      	ldr	r3, [r7, #8]
 8012640:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	68dc      	ldr	r4, [r3, #12]
 8012646:	4610      	mov	r0, r2
 8012648:	f7f9 fc70 	bl	800bf2c <lwip_htons>
 801264c:	4603      	mov	r3, r0
 801264e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012650:	68bb      	ldr	r3, [r7, #8]
 8012652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012654:	68ba      	ldr	r2, [r7, #8]
 8012656:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012658:	441a      	add	r2, r3
 801265a:	68bb      	ldr	r3, [r7, #8]
 801265c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	68db      	ldr	r3, [r3, #12]
 8012662:	3314      	adds	r3, #20
 8012664:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	7a9b      	ldrb	r3, [r3, #10]
 801266a:	f003 0301 	and.w	r3, r3, #1
 801266e:	2b00      	cmp	r3, #0
 8012670:	d015      	beq.n	801269e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	3304      	adds	r3, #4
 8012676:	461a      	mov	r2, r3
 8012678:	6879      	ldr	r1, [r7, #4]
 801267a:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 801267e:	f7fc fe8f 	bl	800f3a0 <tcp_eff_send_mss_netif>
 8012682:	4603      	mov	r3, r0
 8012684:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012686:	8b7b      	ldrh	r3, [r7, #26]
 8012688:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801268c:	4618      	mov	r0, r3
 801268e:	f7f9 fc62 	bl	800bf56 <lwip_htonl>
 8012692:	4602      	mov	r2, r0
 8012694:	69fb      	ldr	r3, [r7, #28]
 8012696:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012698:	69fb      	ldr	r3, [r7, #28]
 801269a:	3304      	adds	r3, #4
 801269c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	da02      	bge.n	80126ae <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	2200      	movs	r2, #0
 80126ac:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80126ae:	68bb      	ldr	r3, [r7, #8]
 80126b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d10c      	bne.n	80126d0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80126b6:	4b35      	ldr	r3, [pc, #212]	@ (801278c <tcp_output_segment+0x1b8>)
 80126b8:	681a      	ldr	r2, [r3, #0]
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	68db      	ldr	r3, [r3, #12]
 80126c2:	685b      	ldr	r3, [r3, #4]
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7f9 fc46 	bl	800bf56 <lwip_htonl>
 80126ca:	4602      	mov	r2, r0
 80126cc:	68bb      	ldr	r3, [r7, #8]
 80126ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	68da      	ldr	r2, [r3, #12]
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	685b      	ldr	r3, [r3, #4]
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	1ad3      	subs	r3, r2, r3
 80126dc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	8959      	ldrh	r1, [r3, #10]
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	685b      	ldr	r3, [r3, #4]
 80126e8:	8b3a      	ldrh	r2, [r7, #24]
 80126ea:	1a8a      	subs	r2, r1, r2
 80126ec:	b292      	uxth	r2, r2
 80126ee:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	685b      	ldr	r3, [r3, #4]
 80126f4:	8919      	ldrh	r1, [r3, #8]
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	685b      	ldr	r3, [r3, #4]
 80126fa:	8b3a      	ldrh	r2, [r7, #24]
 80126fc:	1a8a      	subs	r2, r1, r2
 80126fe:	b292      	uxth	r2, r2
 8012700:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	68fa      	ldr	r2, [r7, #12]
 8012708:	68d2      	ldr	r2, [r2, #12]
 801270a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	68db      	ldr	r3, [r3, #12]
 8012710:	2200      	movs	r2, #0
 8012712:	741a      	strb	r2, [r3, #16]
 8012714:	2200      	movs	r2, #0
 8012716:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	68da      	ldr	r2, [r3, #12]
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	7a9b      	ldrb	r3, [r3, #10]
 8012720:	f003 0301 	and.w	r3, r3, #1
 8012724:	2b00      	cmp	r3, #0
 8012726:	d001      	beq.n	801272c <tcp_output_segment+0x158>
 8012728:	2318      	movs	r3, #24
 801272a:	e000      	b.n	801272e <tcp_output_segment+0x15a>
 801272c:	2314      	movs	r3, #20
 801272e:	4413      	add	r3, r2
 8012730:	69fa      	ldr	r2, [r7, #28]
 8012732:	429a      	cmp	r2, r3
 8012734:	d006      	beq.n	8012744 <tcp_output_segment+0x170>
 8012736:	4b10      	ldr	r3, [pc, #64]	@ (8012778 <tcp_output_segment+0x1a4>)
 8012738:	f240 621c 	movw	r2, #1564	@ 0x61c
 801273c:	4914      	ldr	r1, [pc, #80]	@ (8012790 <tcp_output_segment+0x1bc>)
 801273e:	4810      	ldr	r0, [pc, #64]	@ (8012780 <tcp_output_segment+0x1ac>)
 8012740:	f003 fcbc 	bl	80160bc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	6858      	ldr	r0, [r3, #4]
 8012748:	68b9      	ldr	r1, [r7, #8]
 801274a:	68bb      	ldr	r3, [r7, #8]
 801274c:	1d1c      	adds	r4, r3, #4
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	7add      	ldrb	r5, [r3, #11]
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	7a9b      	ldrb	r3, [r3, #10]
 8012756:	687a      	ldr	r2, [r7, #4]
 8012758:	9202      	str	r2, [sp, #8]
 801275a:	2206      	movs	r2, #6
 801275c:	9201      	str	r2, [sp, #4]
 801275e:	9300      	str	r3, [sp, #0]
 8012760:	462b      	mov	r3, r5
 8012762:	4622      	mov	r2, r4
 8012764:	f002 fa8a 	bl	8014c7c <ip4_output_if>
 8012768:	4603      	mov	r3, r0
 801276a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801276c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012770:	4618      	mov	r0, r3
 8012772:	3720      	adds	r7, #32
 8012774:	46bd      	mov	sp, r7
 8012776:	bdb0      	pop	{r4, r5, r7, pc}
 8012778:	08018d78 	.word	0x08018d78
 801277c:	0801933c 	.word	0x0801933c
 8012780:	08018dcc 	.word	0x08018dcc
 8012784:	0801935c 	.word	0x0801935c
 8012788:	0801937c 	.word	0x0801937c
 801278c:	2400c9cc 	.word	0x2400c9cc
 8012790:	080193a0 	.word	0x080193a0

08012794 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012794:	b5b0      	push	{r4, r5, r7, lr}
 8012796:	b084      	sub	sp, #16
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d106      	bne.n	80127b0 <tcp_rexmit_rto_prepare+0x1c>
 80127a2:	4b31      	ldr	r3, [pc, #196]	@ (8012868 <tcp_rexmit_rto_prepare+0xd4>)
 80127a4:	f240 6263 	movw	r2, #1635	@ 0x663
 80127a8:	4930      	ldr	r1, [pc, #192]	@ (801286c <tcp_rexmit_rto_prepare+0xd8>)
 80127aa:	4831      	ldr	r0, [pc, #196]	@ (8012870 <tcp_rexmit_rto_prepare+0xdc>)
 80127ac:	f003 fc86 	bl	80160bc <iprintf>

  if (pcb->unacked == NULL) {
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d102      	bne.n	80127be <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80127b8:	f06f 0305 	mvn.w	r3, #5
 80127bc:	e050      	b.n	8012860 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127c2:	60fb      	str	r3, [r7, #12]
 80127c4:	e00b      	b.n	80127de <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80127c6:	68f8      	ldr	r0, [r7, #12]
 80127c8:	f7ff fee4 	bl	8012594 <tcp_output_segment_busy>
 80127cc:	4603      	mov	r3, r0
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d002      	beq.n	80127d8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80127d2:	f06f 0305 	mvn.w	r3, #5
 80127d6:	e043      	b.n	8012860 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	60fb      	str	r3, [r7, #12]
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d1ef      	bne.n	80127c6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80127e6:	68f8      	ldr	r0, [r7, #12]
 80127e8:	f7ff fed4 	bl	8012594 <tcp_output_segment_busy>
 80127ec:	4603      	mov	r3, r0
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d002      	beq.n	80127f8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80127f2:	f06f 0305 	mvn.w	r3, #5
 80127f6:	e033      	b.n	8012860 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2200      	movs	r2, #0
 801280c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	8b5b      	ldrh	r3, [r3, #26]
 8012812:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8012816:	b29a      	uxth	r2, r3
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	68db      	ldr	r3, [r3, #12]
 8012820:	685b      	ldr	r3, [r3, #4]
 8012822:	4618      	mov	r0, r3
 8012824:	f7f9 fb97 	bl	800bf56 <lwip_htonl>
 8012828:	4604      	mov	r4, r0
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	891b      	ldrh	r3, [r3, #8]
 801282e:	461d      	mov	r5, r3
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	68db      	ldr	r3, [r3, #12]
 8012834:	899b      	ldrh	r3, [r3, #12]
 8012836:	b29b      	uxth	r3, r3
 8012838:	4618      	mov	r0, r3
 801283a:	f7f9 fb77 	bl	800bf2c <lwip_htons>
 801283e:	4603      	mov	r3, r0
 8012840:	b2db      	uxtb	r3, r3
 8012842:	f003 0303 	and.w	r3, r3, #3
 8012846:	2b00      	cmp	r3, #0
 8012848:	d001      	beq.n	801284e <tcp_rexmit_rto_prepare+0xba>
 801284a:	2301      	movs	r3, #1
 801284c:	e000      	b.n	8012850 <tcp_rexmit_rto_prepare+0xbc>
 801284e:	2300      	movs	r3, #0
 8012850:	442b      	add	r3, r5
 8012852:	18e2      	adds	r2, r4, r3
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2200      	movs	r2, #0
 801285c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801285e:	2300      	movs	r3, #0
}
 8012860:	4618      	mov	r0, r3
 8012862:	3710      	adds	r7, #16
 8012864:	46bd      	mov	sp, r7
 8012866:	bdb0      	pop	{r4, r5, r7, pc}
 8012868:	08018d78 	.word	0x08018d78
 801286c:	080193b4 	.word	0x080193b4
 8012870:	08018dcc 	.word	0x08018dcc

08012874 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b082      	sub	sp, #8
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d106      	bne.n	8012890 <tcp_rexmit_rto_commit+0x1c>
 8012882:	4b0d      	ldr	r3, [pc, #52]	@ (80128b8 <tcp_rexmit_rto_commit+0x44>)
 8012884:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012888:	490c      	ldr	r1, [pc, #48]	@ (80128bc <tcp_rexmit_rto_commit+0x48>)
 801288a:	480d      	ldr	r0, [pc, #52]	@ (80128c0 <tcp_rexmit_rto_commit+0x4c>)
 801288c:	f003 fc16 	bl	80160bc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012896:	2bff      	cmp	r3, #255	@ 0xff
 8012898:	d007      	beq.n	80128aa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80128a0:	3301      	adds	r3, #1
 80128a2:	b2da      	uxtb	r2, r3
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f7ff fc7e 	bl	80121ac <tcp_output>
}
 80128b0:	bf00      	nop
 80128b2:	3708      	adds	r7, #8
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}
 80128b8:	08018d78 	.word	0x08018d78
 80128bc:	080193d8 	.word	0x080193d8
 80128c0:	08018dcc 	.word	0x08018dcc

080128c4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b082      	sub	sp, #8
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d106      	bne.n	80128e0 <tcp_rexmit_rto+0x1c>
 80128d2:	4b0a      	ldr	r3, [pc, #40]	@ (80128fc <tcp_rexmit_rto+0x38>)
 80128d4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80128d8:	4909      	ldr	r1, [pc, #36]	@ (8012900 <tcp_rexmit_rto+0x3c>)
 80128da:	480a      	ldr	r0, [pc, #40]	@ (8012904 <tcp_rexmit_rto+0x40>)
 80128dc:	f003 fbee 	bl	80160bc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f7ff ff57 	bl	8012794 <tcp_rexmit_rto_prepare>
 80128e6:	4603      	mov	r3, r0
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d102      	bne.n	80128f2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f7ff ffc1 	bl	8012874 <tcp_rexmit_rto_commit>
  }
}
 80128f2:	bf00      	nop
 80128f4:	3708      	adds	r7, #8
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd80      	pop	{r7, pc}
 80128fa:	bf00      	nop
 80128fc:	08018d78 	.word	0x08018d78
 8012900:	080193fc 	.word	0x080193fc
 8012904:	08018dcc 	.word	0x08018dcc

08012908 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012908:	b590      	push	{r4, r7, lr}
 801290a:	b085      	sub	sp, #20
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d106      	bne.n	8012924 <tcp_rexmit+0x1c>
 8012916:	4b2f      	ldr	r3, [pc, #188]	@ (80129d4 <tcp_rexmit+0xcc>)
 8012918:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801291c:	492e      	ldr	r1, [pc, #184]	@ (80129d8 <tcp_rexmit+0xd0>)
 801291e:	482f      	ldr	r0, [pc, #188]	@ (80129dc <tcp_rexmit+0xd4>)
 8012920:	f003 fbcc 	bl	80160bc <iprintf>

  if (pcb->unacked == NULL) {
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012928:	2b00      	cmp	r3, #0
 801292a:	d102      	bne.n	8012932 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801292c:	f06f 0305 	mvn.w	r3, #5
 8012930:	e04c      	b.n	80129cc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012936:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012938:	68b8      	ldr	r0, [r7, #8]
 801293a:	f7ff fe2b 	bl	8012594 <tcp_output_segment_busy>
 801293e:	4603      	mov	r3, r0
 8012940:	2b00      	cmp	r3, #0
 8012942:	d002      	beq.n	801294a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012944:	f06f 0305 	mvn.w	r3, #5
 8012948:	e040      	b.n	80129cc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	681a      	ldr	r2, [r3, #0]
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	336c      	adds	r3, #108	@ 0x6c
 8012956:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012958:	e002      	b.n	8012960 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d011      	beq.n	801298c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	68db      	ldr	r3, [r3, #12]
 801296e:	685b      	ldr	r3, [r3, #4]
 8012970:	4618      	mov	r0, r3
 8012972:	f7f9 faf0 	bl	800bf56 <lwip_htonl>
 8012976:	4604      	mov	r4, r0
 8012978:	68bb      	ldr	r3, [r7, #8]
 801297a:	68db      	ldr	r3, [r3, #12]
 801297c:	685b      	ldr	r3, [r3, #4]
 801297e:	4618      	mov	r0, r3
 8012980:	f7f9 fae9 	bl	800bf56 <lwip_htonl>
 8012984:	4603      	mov	r3, r0
 8012986:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012988:	2b00      	cmp	r3, #0
 801298a:	dbe6      	blt.n	801295a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	681a      	ldr	r2, [r3, #0]
 8012990:	68bb      	ldr	r3, [r7, #8]
 8012992:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	68ba      	ldr	r2, [r7, #8]
 8012998:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d103      	bne.n	80129aa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2200      	movs	r2, #0
 80129a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80129b0:	2bff      	cmp	r3, #255	@ 0xff
 80129b2:	d007      	beq.n	80129c4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80129ba:	3301      	adds	r3, #1
 80129bc:	b2da      	uxtb	r2, r3
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2200      	movs	r2, #0
 80129c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80129ca:	2300      	movs	r3, #0
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	3714      	adds	r7, #20
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd90      	pop	{r4, r7, pc}
 80129d4:	08018d78 	.word	0x08018d78
 80129d8:	08019418 	.word	0x08019418
 80129dc:	08018dcc 	.word	0x08018dcc

080129e0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b082      	sub	sp, #8
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d106      	bne.n	80129fc <tcp_rexmit_fast+0x1c>
 80129ee:	4b2a      	ldr	r3, [pc, #168]	@ (8012a98 <tcp_rexmit_fast+0xb8>)
 80129f0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80129f4:	4929      	ldr	r1, [pc, #164]	@ (8012a9c <tcp_rexmit_fast+0xbc>)
 80129f6:	482a      	ldr	r0, [pc, #168]	@ (8012aa0 <tcp_rexmit_fast+0xc0>)
 80129f8:	f003 fb60 	bl	80160bc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d045      	beq.n	8012a90 <tcp_rexmit_fast+0xb0>
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	8b5b      	ldrh	r3, [r3, #26]
 8012a08:	f003 0304 	and.w	r3, r3, #4
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d13f      	bne.n	8012a90 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f7ff ff79 	bl	8012908 <tcp_rexmit>
 8012a16:	4603      	mov	r3, r0
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d139      	bne.n	8012a90 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012a28:	4293      	cmp	r3, r2
 8012a2a:	bf28      	it	cs
 8012a2c:	4613      	movcs	r3, r2
 8012a2e:	b29b      	uxth	r3, r3
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	da00      	bge.n	8012a36 <tcp_rexmit_fast+0x56>
 8012a34:	3301      	adds	r3, #1
 8012a36:	105b      	asrs	r3, r3, #1
 8012a38:	b29a      	uxth	r2, r3
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012a46:	461a      	mov	r2, r3
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a4c:	005b      	lsls	r3, r3, #1
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	d206      	bcs.n	8012a60 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a56:	005b      	lsls	r3, r3, #1
 8012a58:	b29a      	uxth	r2, r3
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a6a:	4619      	mov	r1, r3
 8012a6c:	0049      	lsls	r1, r1, #1
 8012a6e:	440b      	add	r3, r1
 8012a70:	b29b      	uxth	r3, r3
 8012a72:	4413      	add	r3, r2
 8012a74:	b29a      	uxth	r2, r3
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	8b5b      	ldrh	r3, [r3, #26]
 8012a80:	f043 0304 	orr.w	r3, r3, #4
 8012a84:	b29a      	uxth	r2, r3
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8012a90:	bf00      	nop
 8012a92:	3708      	adds	r7, #8
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	08018d78 	.word	0x08018d78
 8012a9c:	08019430 	.word	0x08019430
 8012aa0:	08018dcc 	.word	0x08018dcc

08012aa4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b086      	sub	sp, #24
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	60f8      	str	r0, [r7, #12]
 8012aac:	607b      	str	r3, [r7, #4]
 8012aae:	460b      	mov	r3, r1
 8012ab0:	817b      	strh	r3, [r7, #10]
 8012ab2:	4613      	mov	r3, r2
 8012ab4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012ab6:	897a      	ldrh	r2, [r7, #10]
 8012ab8:	893b      	ldrh	r3, [r7, #8]
 8012aba:	4413      	add	r3, r2
 8012abc:	b29b      	uxth	r3, r3
 8012abe:	3314      	adds	r3, #20
 8012ac0:	b29b      	uxth	r3, r3
 8012ac2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012ac6:	4619      	mov	r1, r3
 8012ac8:	2022      	movs	r0, #34	@ 0x22
 8012aca:	f7fa fc05 	bl	800d2d8 <pbuf_alloc>
 8012ace:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012ad0:	697b      	ldr	r3, [r7, #20]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d04d      	beq.n	8012b72 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012ad6:	897b      	ldrh	r3, [r7, #10]
 8012ad8:	3313      	adds	r3, #19
 8012ada:	697a      	ldr	r2, [r7, #20]
 8012adc:	8952      	ldrh	r2, [r2, #10]
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	db06      	blt.n	8012af0 <tcp_output_alloc_header_common+0x4c>
 8012ae2:	4b26      	ldr	r3, [pc, #152]	@ (8012b7c <tcp_output_alloc_header_common+0xd8>)
 8012ae4:	f240 7223 	movw	r2, #1827	@ 0x723
 8012ae8:	4925      	ldr	r1, [pc, #148]	@ (8012b80 <tcp_output_alloc_header_common+0xdc>)
 8012aea:	4826      	ldr	r0, [pc, #152]	@ (8012b84 <tcp_output_alloc_header_common+0xe0>)
 8012aec:	f003 fae6 	bl	80160bc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012af6:	8c3b      	ldrh	r3, [r7, #32]
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7f9 fa17 	bl	800bf2c <lwip_htons>
 8012afe:	4603      	mov	r3, r0
 8012b00:	461a      	mov	r2, r3
 8012b02:	693b      	ldr	r3, [r7, #16]
 8012b04:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012b06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f7f9 fa0f 	bl	800bf2c <lwip_htons>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	461a      	mov	r2, r3
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012b16:	693b      	ldr	r3, [r7, #16]
 8012b18:	687a      	ldr	r2, [r7, #4]
 8012b1a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012b1c:	68f8      	ldr	r0, [r7, #12]
 8012b1e:	f7f9 fa1a 	bl	800bf56 <lwip_htonl>
 8012b22:	4602      	mov	r2, r0
 8012b24:	693b      	ldr	r3, [r7, #16]
 8012b26:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012b28:	897b      	ldrh	r3, [r7, #10]
 8012b2a:	089b      	lsrs	r3, r3, #2
 8012b2c:	b29b      	uxth	r3, r3
 8012b2e:	3305      	adds	r3, #5
 8012b30:	b29b      	uxth	r3, r3
 8012b32:	031b      	lsls	r3, r3, #12
 8012b34:	b29a      	uxth	r2, r3
 8012b36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012b3a:	b29b      	uxth	r3, r3
 8012b3c:	4313      	orrs	r3, r2
 8012b3e:	b29b      	uxth	r3, r3
 8012b40:	4618      	mov	r0, r3
 8012b42:	f7f9 f9f3 	bl	800bf2c <lwip_htons>
 8012b46:	4603      	mov	r3, r0
 8012b48:	461a      	mov	r2, r3
 8012b4a:	693b      	ldr	r3, [r7, #16]
 8012b4c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012b4e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012b50:	4618      	mov	r0, r3
 8012b52:	f7f9 f9eb 	bl	800bf2c <lwip_htons>
 8012b56:	4603      	mov	r3, r0
 8012b58:	461a      	mov	r2, r3
 8012b5a:	693b      	ldr	r3, [r7, #16]
 8012b5c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	2200      	movs	r2, #0
 8012b62:	741a      	strb	r2, [r3, #16]
 8012b64:	2200      	movs	r2, #0
 8012b66:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	749a      	strb	r2, [r3, #18]
 8012b6e:	2200      	movs	r2, #0
 8012b70:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012b72:	697b      	ldr	r3, [r7, #20]
}
 8012b74:	4618      	mov	r0, r3
 8012b76:	3718      	adds	r7, #24
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}
 8012b7c:	08018d78 	.word	0x08018d78
 8012b80:	08019450 	.word	0x08019450
 8012b84:	08018dcc 	.word	0x08018dcc

08012b88 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012b88:	b5b0      	push	{r4, r5, r7, lr}
 8012b8a:	b08a      	sub	sp, #40	@ 0x28
 8012b8c:	af04      	add	r7, sp, #16
 8012b8e:	60f8      	str	r0, [r7, #12]
 8012b90:	607b      	str	r3, [r7, #4]
 8012b92:	460b      	mov	r3, r1
 8012b94:	817b      	strh	r3, [r7, #10]
 8012b96:	4613      	mov	r3, r2
 8012b98:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d106      	bne.n	8012bae <tcp_output_alloc_header+0x26>
 8012ba0:	4b15      	ldr	r3, [pc, #84]	@ (8012bf8 <tcp_output_alloc_header+0x70>)
 8012ba2:	f240 7242 	movw	r2, #1858	@ 0x742
 8012ba6:	4915      	ldr	r1, [pc, #84]	@ (8012bfc <tcp_output_alloc_header+0x74>)
 8012ba8:	4815      	ldr	r0, [pc, #84]	@ (8012c00 <tcp_output_alloc_header+0x78>)
 8012baa:	f003 fa87 	bl	80160bc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	8adb      	ldrh	r3, [r3, #22]
 8012bb6:	68fa      	ldr	r2, [r7, #12]
 8012bb8:	8b12      	ldrh	r2, [r2, #24]
 8012bba:	68f9      	ldr	r1, [r7, #12]
 8012bbc:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8012bbe:	893d      	ldrh	r5, [r7, #8]
 8012bc0:	897c      	ldrh	r4, [r7, #10]
 8012bc2:	9103      	str	r1, [sp, #12]
 8012bc4:	2110      	movs	r1, #16
 8012bc6:	9102      	str	r1, [sp, #8]
 8012bc8:	9201      	str	r2, [sp, #4]
 8012bca:	9300      	str	r3, [sp, #0]
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	462a      	mov	r2, r5
 8012bd0:	4621      	mov	r1, r4
 8012bd2:	f7ff ff67 	bl	8012aa4 <tcp_output_alloc_header_common>
 8012bd6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012bd8:	697b      	ldr	r3, [r7, #20]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d006      	beq.n	8012bec <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012be2:	68fa      	ldr	r2, [r7, #12]
 8012be4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012be6:	441a      	add	r2, r3
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8012bec:	697b      	ldr	r3, [r7, #20]
}
 8012bee:	4618      	mov	r0, r3
 8012bf0:	3718      	adds	r7, #24
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8012bf6:	bf00      	nop
 8012bf8:	08018d78 	.word	0x08018d78
 8012bfc:	08019480 	.word	0x08019480
 8012c00:	08018dcc 	.word	0x08018dcc

08012c04 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b088      	sub	sp, #32
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	60f8      	str	r0, [r7, #12]
 8012c0c:	60b9      	str	r1, [r7, #8]
 8012c0e:	4611      	mov	r1, r2
 8012c10:	461a      	mov	r2, r3
 8012c12:	460b      	mov	r3, r1
 8012c14:	71fb      	strb	r3, [r7, #7]
 8012c16:	4613      	mov	r3, r2
 8012c18:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012c1e:	68bb      	ldr	r3, [r7, #8]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d106      	bne.n	8012c32 <tcp_output_fill_options+0x2e>
 8012c24:	4b12      	ldr	r3, [pc, #72]	@ (8012c70 <tcp_output_fill_options+0x6c>)
 8012c26:	f240 7256 	movw	r2, #1878	@ 0x756
 8012c2a:	4912      	ldr	r1, [pc, #72]	@ (8012c74 <tcp_output_fill_options+0x70>)
 8012c2c:	4812      	ldr	r0, [pc, #72]	@ (8012c78 <tcp_output_fill_options+0x74>)
 8012c2e:	f003 fa45 	bl	80160bc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	685b      	ldr	r3, [r3, #4]
 8012c36:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012c38:	69bb      	ldr	r3, [r7, #24]
 8012c3a:	3314      	adds	r3, #20
 8012c3c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012c3e:	8bfb      	ldrh	r3, [r7, #30]
 8012c40:	009b      	lsls	r3, r3, #2
 8012c42:	461a      	mov	r2, r3
 8012c44:	79fb      	ldrb	r3, [r7, #7]
 8012c46:	009b      	lsls	r3, r3, #2
 8012c48:	f003 0304 	and.w	r3, r3, #4
 8012c4c:	4413      	add	r3, r2
 8012c4e:	3314      	adds	r3, #20
 8012c50:	69ba      	ldr	r2, [r7, #24]
 8012c52:	4413      	add	r3, r2
 8012c54:	697a      	ldr	r2, [r7, #20]
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d006      	beq.n	8012c68 <tcp_output_fill_options+0x64>
 8012c5a:	4b05      	ldr	r3, [pc, #20]	@ (8012c70 <tcp_output_fill_options+0x6c>)
 8012c5c:	f240 7275 	movw	r2, #1909	@ 0x775
 8012c60:	4906      	ldr	r1, [pc, #24]	@ (8012c7c <tcp_output_fill_options+0x78>)
 8012c62:	4805      	ldr	r0, [pc, #20]	@ (8012c78 <tcp_output_fill_options+0x74>)
 8012c64:	f003 fa2a 	bl	80160bc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012c68:	bf00      	nop
 8012c6a:	3720      	adds	r7, #32
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}
 8012c70:	08018d78 	.word	0x08018d78
 8012c74:	080194a8 	.word	0x080194a8
 8012c78:	08018dcc 	.word	0x08018dcc
 8012c7c:	080193a0 	.word	0x080193a0

08012c80 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b08a      	sub	sp, #40	@ 0x28
 8012c84:	af04      	add	r7, sp, #16
 8012c86:	60f8      	str	r0, [r7, #12]
 8012c88:	60b9      	str	r1, [r7, #8]
 8012c8a:	607a      	str	r2, [r7, #4]
 8012c8c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012c8e:	68bb      	ldr	r3, [r7, #8]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d106      	bne.n	8012ca2 <tcp_output_control_segment+0x22>
 8012c94:	4b1c      	ldr	r3, [pc, #112]	@ (8012d08 <tcp_output_control_segment+0x88>)
 8012c96:	f240 7287 	movw	r2, #1927	@ 0x787
 8012c9a:	491c      	ldr	r1, [pc, #112]	@ (8012d0c <tcp_output_control_segment+0x8c>)
 8012c9c:	481c      	ldr	r0, [pc, #112]	@ (8012d10 <tcp_output_control_segment+0x90>)
 8012c9e:	f003 fa0d 	bl	80160bc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012ca2:	683a      	ldr	r2, [r7, #0]
 8012ca4:	6879      	ldr	r1, [r7, #4]
 8012ca6:	68f8      	ldr	r0, [r7, #12]
 8012ca8:	f7fe ff42 	bl	8011b30 <tcp_route>
 8012cac:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d102      	bne.n	8012cba <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012cb4:	23fc      	movs	r3, #252	@ 0xfc
 8012cb6:	75fb      	strb	r3, [r7, #23]
 8012cb8:	e01c      	b.n	8012cf4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d006      	beq.n	8012cce <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	7adb      	ldrb	r3, [r3, #11]
 8012cc4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	7a9b      	ldrb	r3, [r3, #10]
 8012cca:	757b      	strb	r3, [r7, #21]
 8012ccc:	e003      	b.n	8012cd6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012cce:	23ff      	movs	r3, #255	@ 0xff
 8012cd0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012cd6:	7dba      	ldrb	r2, [r7, #22]
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	9302      	str	r3, [sp, #8]
 8012cdc:	2306      	movs	r3, #6
 8012cde:	9301      	str	r3, [sp, #4]
 8012ce0:	7d7b      	ldrb	r3, [r7, #21]
 8012ce2:	9300      	str	r3, [sp, #0]
 8012ce4:	4613      	mov	r3, r2
 8012ce6:	683a      	ldr	r2, [r7, #0]
 8012ce8:	6879      	ldr	r1, [r7, #4]
 8012cea:	68b8      	ldr	r0, [r7, #8]
 8012cec:	f001 ffc6 	bl	8014c7c <ip4_output_if>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012cf4:	68b8      	ldr	r0, [r7, #8]
 8012cf6:	f7fa fdd7 	bl	800d8a8 <pbuf_free>
  return err;
 8012cfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012cfe:	4618      	mov	r0, r3
 8012d00:	3718      	adds	r7, #24
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}
 8012d06:	bf00      	nop
 8012d08:	08018d78 	.word	0x08018d78
 8012d0c:	080194d0 	.word	0x080194d0
 8012d10:	08018dcc 	.word	0x08018dcc

08012d14 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012d14:	b590      	push	{r4, r7, lr}
 8012d16:	b08b      	sub	sp, #44	@ 0x2c
 8012d18:	af04      	add	r7, sp, #16
 8012d1a:	60f8      	str	r0, [r7, #12]
 8012d1c:	60b9      	str	r1, [r7, #8]
 8012d1e:	607a      	str	r2, [r7, #4]
 8012d20:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012d22:	683b      	ldr	r3, [r7, #0]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d106      	bne.n	8012d36 <tcp_rst+0x22>
 8012d28:	4b1f      	ldr	r3, [pc, #124]	@ (8012da8 <tcp_rst+0x94>)
 8012d2a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8012d2e:	491f      	ldr	r1, [pc, #124]	@ (8012dac <tcp_rst+0x98>)
 8012d30:	481f      	ldr	r0, [pc, #124]	@ (8012db0 <tcp_rst+0x9c>)
 8012d32:	f003 f9c3 	bl	80160bc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d106      	bne.n	8012d4a <tcp_rst+0x36>
 8012d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8012da8 <tcp_rst+0x94>)
 8012d3e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8012d42:	491c      	ldr	r1, [pc, #112]	@ (8012db4 <tcp_rst+0xa0>)
 8012d44:	481a      	ldr	r0, [pc, #104]	@ (8012db0 <tcp_rst+0x9c>)
 8012d46:	f003 f9b9 	bl	80160bc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012d4e:	f24d 0316 	movw	r3, #53270	@ 0xd016
 8012d52:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012d54:	7dfb      	ldrb	r3, [r7, #23]
 8012d56:	b29c      	uxth	r4, r3
 8012d58:	68b8      	ldr	r0, [r7, #8]
 8012d5a:	f7f9 f8fc 	bl	800bf56 <lwip_htonl>
 8012d5e:	4602      	mov	r2, r0
 8012d60:	8abb      	ldrh	r3, [r7, #20]
 8012d62:	9303      	str	r3, [sp, #12]
 8012d64:	2314      	movs	r3, #20
 8012d66:	9302      	str	r3, [sp, #8]
 8012d68:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8012d6a:	9301      	str	r3, [sp, #4]
 8012d6c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012d6e:	9300      	str	r3, [sp, #0]
 8012d70:	4613      	mov	r3, r2
 8012d72:	2200      	movs	r2, #0
 8012d74:	4621      	mov	r1, r4
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f7ff fe94 	bl	8012aa4 <tcp_output_alloc_header_common>
 8012d7c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012d7e:	693b      	ldr	r3, [r7, #16]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d00c      	beq.n	8012d9e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012d84:	7dfb      	ldrb	r3, [r7, #23]
 8012d86:	2200      	movs	r2, #0
 8012d88:	6939      	ldr	r1, [r7, #16]
 8012d8a:	68f8      	ldr	r0, [r7, #12]
 8012d8c:	f7ff ff3a 	bl	8012c04 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d92:	683a      	ldr	r2, [r7, #0]
 8012d94:	6939      	ldr	r1, [r7, #16]
 8012d96:	68f8      	ldr	r0, [r7, #12]
 8012d98:	f7ff ff72 	bl	8012c80 <tcp_output_control_segment>
 8012d9c:	e000      	b.n	8012da0 <tcp_rst+0x8c>
    return;
 8012d9e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012da0:	371c      	adds	r7, #28
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd90      	pop	{r4, r7, pc}
 8012da6:	bf00      	nop
 8012da8:	08018d78 	.word	0x08018d78
 8012dac:	080194fc 	.word	0x080194fc
 8012db0:	08018dcc 	.word	0x08018dcc
 8012db4:	08019518 	.word	0x08019518

08012db8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012db8:	b590      	push	{r4, r7, lr}
 8012dba:	b087      	sub	sp, #28
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d106      	bne.n	8012ddc <tcp_send_empty_ack+0x24>
 8012dce:	4b28      	ldr	r3, [pc, #160]	@ (8012e70 <tcp_send_empty_ack+0xb8>)
 8012dd0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8012dd4:	4927      	ldr	r1, [pc, #156]	@ (8012e74 <tcp_send_empty_ack+0xbc>)
 8012dd6:	4828      	ldr	r0, [pc, #160]	@ (8012e78 <tcp_send_empty_ack+0xc0>)
 8012dd8:	f003 f970 	bl	80160bc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012ddc:	7dfb      	ldrb	r3, [r7, #23]
 8012dde:	009b      	lsls	r3, r3, #2
 8012de0:	b2db      	uxtb	r3, r3
 8012de2:	f003 0304 	and.w	r3, r3, #4
 8012de6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012de8:	7d7b      	ldrb	r3, [r7, #21]
 8012dea:	b29c      	uxth	r4, r3
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012df0:	4618      	mov	r0, r3
 8012df2:	f7f9 f8b0 	bl	800bf56 <lwip_htonl>
 8012df6:	4603      	mov	r3, r0
 8012df8:	2200      	movs	r2, #0
 8012dfa:	4621      	mov	r1, r4
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f7ff fec3 	bl	8012b88 <tcp_output_alloc_header>
 8012e02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012e04:	693b      	ldr	r3, [r7, #16]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d109      	bne.n	8012e1e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	8b5b      	ldrh	r3, [r3, #26]
 8012e0e:	f043 0303 	orr.w	r3, r3, #3
 8012e12:	b29a      	uxth	r2, r3
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012e18:	f06f 0301 	mvn.w	r3, #1
 8012e1c:	e023      	b.n	8012e66 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012e1e:	7dbb      	ldrb	r3, [r7, #22]
 8012e20:	7dfa      	ldrb	r2, [r7, #23]
 8012e22:	6939      	ldr	r1, [r7, #16]
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f7ff feed 	bl	8012c04 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012e2a:	687a      	ldr	r2, [r7, #4]
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	3304      	adds	r3, #4
 8012e30:	6939      	ldr	r1, [r7, #16]
 8012e32:	6878      	ldr	r0, [r7, #4]
 8012e34:	f7ff ff24 	bl	8012c80 <tcp_output_control_segment>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d007      	beq.n	8012e54 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	8b5b      	ldrh	r3, [r3, #26]
 8012e48:	f043 0303 	orr.w	r3, r3, #3
 8012e4c:	b29a      	uxth	r2, r3
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	835a      	strh	r2, [r3, #26]
 8012e52:	e006      	b.n	8012e62 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	8b5b      	ldrh	r3, [r3, #26]
 8012e58:	f023 0303 	bic.w	r3, r3, #3
 8012e5c:	b29a      	uxth	r2, r3
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012e66:	4618      	mov	r0, r3
 8012e68:	371c      	adds	r7, #28
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd90      	pop	{r4, r7, pc}
 8012e6e:	bf00      	nop
 8012e70:	08018d78 	.word	0x08018d78
 8012e74:	08019534 	.word	0x08019534
 8012e78:	08018dcc 	.word	0x08018dcc

08012e7c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012e7c:	b590      	push	{r4, r7, lr}
 8012e7e:	b087      	sub	sp, #28
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012e84:	2300      	movs	r3, #0
 8012e86:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d106      	bne.n	8012e9c <tcp_keepalive+0x20>
 8012e8e:	4b18      	ldr	r3, [pc, #96]	@ (8012ef0 <tcp_keepalive+0x74>)
 8012e90:	f640 0224 	movw	r2, #2084	@ 0x824
 8012e94:	4917      	ldr	r1, [pc, #92]	@ (8012ef4 <tcp_keepalive+0x78>)
 8012e96:	4818      	ldr	r0, [pc, #96]	@ (8012ef8 <tcp_keepalive+0x7c>)
 8012e98:	f003 f910 	bl	80160bc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012e9c:	7dfb      	ldrb	r3, [r7, #23]
 8012e9e:	b29c      	uxth	r4, r3
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012ea4:	3b01      	subs	r3, #1
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7f9 f855 	bl	800bf56 <lwip_htonl>
 8012eac:	4603      	mov	r3, r0
 8012eae:	2200      	movs	r2, #0
 8012eb0:	4621      	mov	r1, r4
 8012eb2:	6878      	ldr	r0, [r7, #4]
 8012eb4:	f7ff fe68 	bl	8012b88 <tcp_output_alloc_header>
 8012eb8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d102      	bne.n	8012ec6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8012ec4:	e010      	b.n	8012ee8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012ec6:	7dfb      	ldrb	r3, [r7, #23]
 8012ec8:	2200      	movs	r2, #0
 8012eca:	6939      	ldr	r1, [r7, #16]
 8012ecc:	6878      	ldr	r0, [r7, #4]
 8012ece:	f7ff fe99 	bl	8012c04 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012ed2:	687a      	ldr	r2, [r7, #4]
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	3304      	adds	r3, #4
 8012ed8:	6939      	ldr	r1, [r7, #16]
 8012eda:	6878      	ldr	r0, [r7, #4]
 8012edc:	f7ff fed0 	bl	8012c80 <tcp_output_control_segment>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012ee8:	4618      	mov	r0, r3
 8012eea:	371c      	adds	r7, #28
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd90      	pop	{r4, r7, pc}
 8012ef0:	08018d78 	.word	0x08018d78
 8012ef4:	08019554 	.word	0x08019554
 8012ef8:	08018dcc 	.word	0x08018dcc

08012efc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012efc:	b590      	push	{r4, r7, lr}
 8012efe:	b08b      	sub	sp, #44	@ 0x2c
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012f04:	2300      	movs	r3, #0
 8012f06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d106      	bne.n	8012f1e <tcp_zero_window_probe+0x22>
 8012f10:	4b4c      	ldr	r3, [pc, #304]	@ (8013044 <tcp_zero_window_probe+0x148>)
 8012f12:	f640 024f 	movw	r2, #2127	@ 0x84f
 8012f16:	494c      	ldr	r1, [pc, #304]	@ (8013048 <tcp_zero_window_probe+0x14c>)
 8012f18:	484c      	ldr	r0, [pc, #304]	@ (801304c <tcp_zero_window_probe+0x150>)
 8012f1a:	f003 f8cf 	bl	80160bc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012f22:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012f24:	6a3b      	ldr	r3, [r7, #32]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d101      	bne.n	8012f2e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	e086      	b.n	801303c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012f34:	2bff      	cmp	r3, #255	@ 0xff
 8012f36:	d007      	beq.n	8012f48 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012f3e:	3301      	adds	r3, #1
 8012f40:	b2da      	uxtb	r2, r3
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012f48:	6a3b      	ldr	r3, [r7, #32]
 8012f4a:	68db      	ldr	r3, [r3, #12]
 8012f4c:	899b      	ldrh	r3, [r3, #12]
 8012f4e:	b29b      	uxth	r3, r3
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7f8 ffeb 	bl	800bf2c <lwip_htons>
 8012f56:	4603      	mov	r3, r0
 8012f58:	b2db      	uxtb	r3, r3
 8012f5a:	f003 0301 	and.w	r3, r3, #1
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d005      	beq.n	8012f6e <tcp_zero_window_probe+0x72>
 8012f62:	6a3b      	ldr	r3, [r7, #32]
 8012f64:	891b      	ldrh	r3, [r3, #8]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d101      	bne.n	8012f6e <tcp_zero_window_probe+0x72>
 8012f6a:	2301      	movs	r3, #1
 8012f6c:	e000      	b.n	8012f70 <tcp_zero_window_probe+0x74>
 8012f6e:	2300      	movs	r3, #0
 8012f70:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012f72:	7ffb      	ldrb	r3, [r7, #31]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	bf0c      	ite	eq
 8012f78:	2301      	moveq	r3, #1
 8012f7a:	2300      	movne	r3, #0
 8012f7c:	b2db      	uxtb	r3, r3
 8012f7e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012f80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012f84:	b299      	uxth	r1, r3
 8012f86:	6a3b      	ldr	r3, [r7, #32]
 8012f88:	68db      	ldr	r3, [r3, #12]
 8012f8a:	685b      	ldr	r3, [r3, #4]
 8012f8c:	8bba      	ldrh	r2, [r7, #28]
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f7ff fdfa 	bl	8012b88 <tcp_output_alloc_header>
 8012f94:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012f96:	69bb      	ldr	r3, [r7, #24]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d102      	bne.n	8012fa2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8012fa0:	e04c      	b.n	801303c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012fa2:	69bb      	ldr	r3, [r7, #24]
 8012fa4:	685b      	ldr	r3, [r3, #4]
 8012fa6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012fa8:	7ffb      	ldrb	r3, [r7, #31]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d011      	beq.n	8012fd2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	899b      	ldrh	r3, [r3, #12]
 8012fb2:	b29b      	uxth	r3, r3
 8012fb4:	b21b      	sxth	r3, r3
 8012fb6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012fba:	b21c      	sxth	r4, r3
 8012fbc:	2011      	movs	r0, #17
 8012fbe:	f7f8 ffb5 	bl	800bf2c <lwip_htons>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	b21b      	sxth	r3, r3
 8012fc6:	4323      	orrs	r3, r4
 8012fc8:	b21b      	sxth	r3, r3
 8012fca:	b29a      	uxth	r2, r3
 8012fcc:	697b      	ldr	r3, [r7, #20]
 8012fce:	819a      	strh	r2, [r3, #12]
 8012fd0:	e010      	b.n	8012ff4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012fd2:	69bb      	ldr	r3, [r7, #24]
 8012fd4:	685b      	ldr	r3, [r3, #4]
 8012fd6:	3314      	adds	r3, #20
 8012fd8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012fda:	6a3b      	ldr	r3, [r7, #32]
 8012fdc:	6858      	ldr	r0, [r3, #4]
 8012fde:	6a3b      	ldr	r3, [r7, #32]
 8012fe0:	685b      	ldr	r3, [r3, #4]
 8012fe2:	891a      	ldrh	r2, [r3, #8]
 8012fe4:	6a3b      	ldr	r3, [r7, #32]
 8012fe6:	891b      	ldrh	r3, [r3, #8]
 8012fe8:	1ad3      	subs	r3, r2, r3
 8012fea:	b29b      	uxth	r3, r3
 8012fec:	2201      	movs	r2, #1
 8012fee:	6939      	ldr	r1, [r7, #16]
 8012ff0:	f7fa fe50 	bl	800dc94 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012ff4:	6a3b      	ldr	r3, [r7, #32]
 8012ff6:	68db      	ldr	r3, [r3, #12]
 8012ff8:	685b      	ldr	r3, [r3, #4]
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7f8 ffab 	bl	800bf56 <lwip_htonl>
 8013000:	4603      	mov	r3, r0
 8013002:	3301      	adds	r3, #1
 8013004:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	1ad3      	subs	r3, r2, r3
 801300e:	2b00      	cmp	r3, #0
 8013010:	da02      	bge.n	8013018 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	68fa      	ldr	r2, [r7, #12]
 8013016:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801301c:	2200      	movs	r2, #0
 801301e:	69b9      	ldr	r1, [r7, #24]
 8013020:	6878      	ldr	r0, [r7, #4]
 8013022:	f7ff fdef 	bl	8012c04 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013026:	687a      	ldr	r2, [r7, #4]
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	3304      	adds	r3, #4
 801302c:	69b9      	ldr	r1, [r7, #24]
 801302e:	6878      	ldr	r0, [r7, #4]
 8013030:	f7ff fe26 	bl	8012c80 <tcp_output_control_segment>
 8013034:	4603      	mov	r3, r0
 8013036:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013038:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801303c:	4618      	mov	r0, r3
 801303e:	372c      	adds	r7, #44	@ 0x2c
 8013040:	46bd      	mov	sp, r7
 8013042:	bd90      	pop	{r4, r7, pc}
 8013044:	08018d78 	.word	0x08018d78
 8013048:	08019570 	.word	0x08019570
 801304c:	08018dcc 	.word	0x08018dcc

08013050 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b082      	sub	sp, #8
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013058:	f7fa ff0a 	bl	800de70 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801305c:	4b0a      	ldr	r3, [pc, #40]	@ (8013088 <tcpip_tcp_timer+0x38>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d103      	bne.n	801306c <tcpip_tcp_timer+0x1c>
 8013064:	4b09      	ldr	r3, [pc, #36]	@ (801308c <tcpip_tcp_timer+0x3c>)
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d005      	beq.n	8013078 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801306c:	2200      	movs	r2, #0
 801306e:	4908      	ldr	r1, [pc, #32]	@ (8013090 <tcpip_tcp_timer+0x40>)
 8013070:	20fa      	movs	r0, #250	@ 0xfa
 8013072:	f000 f8f3 	bl	801325c <sys_timeout>
 8013076:	e003      	b.n	8013080 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013078:	4b06      	ldr	r3, [pc, #24]	@ (8013094 <tcpip_tcp_timer+0x44>)
 801307a:	2200      	movs	r2, #0
 801307c:	601a      	str	r2, [r3, #0]
  }
}
 801307e:	bf00      	nop
 8013080:	bf00      	nop
 8013082:	3708      	adds	r7, #8
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}
 8013088:	2400c9d8 	.word	0x2400c9d8
 801308c:	2400c9dc 	.word	0x2400c9dc
 8013090:	08013051 	.word	0x08013051
 8013094:	2400ca24 	.word	0x2400ca24

08013098 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801309c:	4b0a      	ldr	r3, [pc, #40]	@ (80130c8 <tcp_timer_needed+0x30>)
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d10f      	bne.n	80130c4 <tcp_timer_needed+0x2c>
 80130a4:	4b09      	ldr	r3, [pc, #36]	@ (80130cc <tcp_timer_needed+0x34>)
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d103      	bne.n	80130b4 <tcp_timer_needed+0x1c>
 80130ac:	4b08      	ldr	r3, [pc, #32]	@ (80130d0 <tcp_timer_needed+0x38>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d007      	beq.n	80130c4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80130b4:	4b04      	ldr	r3, [pc, #16]	@ (80130c8 <tcp_timer_needed+0x30>)
 80130b6:	2201      	movs	r2, #1
 80130b8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80130ba:	2200      	movs	r2, #0
 80130bc:	4905      	ldr	r1, [pc, #20]	@ (80130d4 <tcp_timer_needed+0x3c>)
 80130be:	20fa      	movs	r0, #250	@ 0xfa
 80130c0:	f000 f8cc 	bl	801325c <sys_timeout>
  }
}
 80130c4:	bf00      	nop
 80130c6:	bd80      	pop	{r7, pc}
 80130c8:	2400ca24 	.word	0x2400ca24
 80130cc:	2400c9d8 	.word	0x2400c9d8
 80130d0:	2400c9dc 	.word	0x2400c9dc
 80130d4:	08013051 	.word	0x08013051

080130d8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b086      	sub	sp, #24
 80130dc:	af00      	add	r7, sp, #0
 80130de:	60f8      	str	r0, [r7, #12]
 80130e0:	60b9      	str	r1, [r7, #8]
 80130e2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80130e4:	200a      	movs	r0, #10
 80130e6:	f7f9 fcc1 	bl	800ca6c <memp_malloc>
 80130ea:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80130ec:	693b      	ldr	r3, [r7, #16]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d109      	bne.n	8013106 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80130f2:	693b      	ldr	r3, [r7, #16]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d151      	bne.n	801319c <sys_timeout_abs+0xc4>
 80130f8:	4b2a      	ldr	r3, [pc, #168]	@ (80131a4 <sys_timeout_abs+0xcc>)
 80130fa:	22be      	movs	r2, #190	@ 0xbe
 80130fc:	492a      	ldr	r1, [pc, #168]	@ (80131a8 <sys_timeout_abs+0xd0>)
 80130fe:	482b      	ldr	r0, [pc, #172]	@ (80131ac <sys_timeout_abs+0xd4>)
 8013100:	f002 ffdc 	bl	80160bc <iprintf>
    return;
 8013104:	e04a      	b.n	801319c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013106:	693b      	ldr	r3, [r7, #16]
 8013108:	2200      	movs	r2, #0
 801310a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801310c:	693b      	ldr	r3, [r7, #16]
 801310e:	68ba      	ldr	r2, [r7, #8]
 8013110:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013112:	693b      	ldr	r3, [r7, #16]
 8013114:	687a      	ldr	r2, [r7, #4]
 8013116:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013118:	693b      	ldr	r3, [r7, #16]
 801311a:	68fa      	ldr	r2, [r7, #12]
 801311c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801311e:	4b24      	ldr	r3, [pc, #144]	@ (80131b0 <sys_timeout_abs+0xd8>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d103      	bne.n	801312e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013126:	4a22      	ldr	r2, [pc, #136]	@ (80131b0 <sys_timeout_abs+0xd8>)
 8013128:	693b      	ldr	r3, [r7, #16]
 801312a:	6013      	str	r3, [r2, #0]
    return;
 801312c:	e037      	b.n	801319e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801312e:	693b      	ldr	r3, [r7, #16]
 8013130:	685a      	ldr	r2, [r3, #4]
 8013132:	4b1f      	ldr	r3, [pc, #124]	@ (80131b0 <sys_timeout_abs+0xd8>)
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	685b      	ldr	r3, [r3, #4]
 8013138:	1ad3      	subs	r3, r2, r3
 801313a:	0fdb      	lsrs	r3, r3, #31
 801313c:	f003 0301 	and.w	r3, r3, #1
 8013140:	b2db      	uxtb	r3, r3
 8013142:	2b00      	cmp	r3, #0
 8013144:	d007      	beq.n	8013156 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013146:	4b1a      	ldr	r3, [pc, #104]	@ (80131b0 <sys_timeout_abs+0xd8>)
 8013148:	681a      	ldr	r2, [r3, #0]
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801314e:	4a18      	ldr	r2, [pc, #96]	@ (80131b0 <sys_timeout_abs+0xd8>)
 8013150:	693b      	ldr	r3, [r7, #16]
 8013152:	6013      	str	r3, [r2, #0]
 8013154:	e023      	b.n	801319e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013156:	4b16      	ldr	r3, [pc, #88]	@ (80131b0 <sys_timeout_abs+0xd8>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	617b      	str	r3, [r7, #20]
 801315c:	e01a      	b.n	8013194 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801315e:	697b      	ldr	r3, [r7, #20]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d00b      	beq.n	801317e <sys_timeout_abs+0xa6>
 8013166:	693b      	ldr	r3, [r7, #16]
 8013168:	685a      	ldr	r2, [r3, #4]
 801316a:	697b      	ldr	r3, [r7, #20]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	685b      	ldr	r3, [r3, #4]
 8013170:	1ad3      	subs	r3, r2, r3
 8013172:	0fdb      	lsrs	r3, r3, #31
 8013174:	f003 0301 	and.w	r3, r3, #1
 8013178:	b2db      	uxtb	r3, r3
 801317a:	2b00      	cmp	r3, #0
 801317c:	d007      	beq.n	801318e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801317e:	697b      	ldr	r3, [r7, #20]
 8013180:	681a      	ldr	r2, [r3, #0]
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013186:	697b      	ldr	r3, [r7, #20]
 8013188:	693a      	ldr	r2, [r7, #16]
 801318a:	601a      	str	r2, [r3, #0]
        break;
 801318c:	e007      	b.n	801319e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	617b      	str	r3, [r7, #20]
 8013194:	697b      	ldr	r3, [r7, #20]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d1e1      	bne.n	801315e <sys_timeout_abs+0x86>
 801319a:	e000      	b.n	801319e <sys_timeout_abs+0xc6>
    return;
 801319c:	bf00      	nop
      }
    }
  }
}
 801319e:	3718      	adds	r7, #24
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}
 80131a4:	08019594 	.word	0x08019594
 80131a8:	080195c8 	.word	0x080195c8
 80131ac:	08019608 	.word	0x08019608
 80131b0:	2400ca1c 	.word	0x2400ca1c

080131b4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b086      	sub	sp, #24
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80131c0:	697b      	ldr	r3, [r7, #20]
 80131c2:	685b      	ldr	r3, [r3, #4]
 80131c4:	4798      	blx	r3

  now = sys_now();
 80131c6:	f7f4 fc61 	bl	8007a8c <sys_now>
 80131ca:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	681a      	ldr	r2, [r3, #0]
 80131d0:	4b0f      	ldr	r3, [pc, #60]	@ (8013210 <lwip_cyclic_timer+0x5c>)
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	4413      	add	r3, r2
 80131d6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80131d8:	68fa      	ldr	r2, [r7, #12]
 80131da:	693b      	ldr	r3, [r7, #16]
 80131dc:	1ad3      	subs	r3, r2, r3
 80131de:	0fdb      	lsrs	r3, r3, #31
 80131e0:	f003 0301 	and.w	r3, r3, #1
 80131e4:	b2db      	uxtb	r3, r3
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d009      	beq.n	80131fe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80131ea:	697b      	ldr	r3, [r7, #20]
 80131ec:	681a      	ldr	r2, [r3, #0]
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	4413      	add	r3, r2
 80131f2:	687a      	ldr	r2, [r7, #4]
 80131f4:	4907      	ldr	r1, [pc, #28]	@ (8013214 <lwip_cyclic_timer+0x60>)
 80131f6:	4618      	mov	r0, r3
 80131f8:	f7ff ff6e 	bl	80130d8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80131fc:	e004      	b.n	8013208 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80131fe:	687a      	ldr	r2, [r7, #4]
 8013200:	4904      	ldr	r1, [pc, #16]	@ (8013214 <lwip_cyclic_timer+0x60>)
 8013202:	68f8      	ldr	r0, [r7, #12]
 8013204:	f7ff ff68 	bl	80130d8 <sys_timeout_abs>
}
 8013208:	bf00      	nop
 801320a:	3718      	adds	r7, #24
 801320c:	46bd      	mov	sp, r7
 801320e:	bd80      	pop	{r7, pc}
 8013210:	2400ca20 	.word	0x2400ca20
 8013214:	080131b5 	.word	0x080131b5

08013218 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b082      	sub	sp, #8
 801321c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801321e:	2301      	movs	r3, #1
 8013220:	607b      	str	r3, [r7, #4]
 8013222:	e00e      	b.n	8013242 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013224:	4a0b      	ldr	r2, [pc, #44]	@ (8013254 <sys_timeouts_init+0x3c>)
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	00db      	lsls	r3, r3, #3
 8013230:	4a08      	ldr	r2, [pc, #32]	@ (8013254 <sys_timeouts_init+0x3c>)
 8013232:	4413      	add	r3, r2
 8013234:	461a      	mov	r2, r3
 8013236:	4908      	ldr	r1, [pc, #32]	@ (8013258 <sys_timeouts_init+0x40>)
 8013238:	f000 f810 	bl	801325c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	3301      	adds	r3, #1
 8013240:	607b      	str	r3, [r7, #4]
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2b02      	cmp	r3, #2
 8013246:	d9ed      	bls.n	8013224 <sys_timeouts_init+0xc>
  }
}
 8013248:	bf00      	nop
 801324a:	bf00      	nop
 801324c:	3708      	adds	r7, #8
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}
 8013252:	bf00      	nop
 8013254:	0801a1dc 	.word	0x0801a1dc
 8013258:	080131b5 	.word	0x080131b5

0801325c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b086      	sub	sp, #24
 8013260:	af00      	add	r7, sp, #0
 8013262:	60f8      	str	r0, [r7, #12]
 8013264:	60b9      	str	r1, [r7, #8]
 8013266:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801326e:	d306      	bcc.n	801327e <sys_timeout+0x22>
 8013270:	4b0a      	ldr	r3, [pc, #40]	@ (801329c <sys_timeout+0x40>)
 8013272:	f240 1229 	movw	r2, #297	@ 0x129
 8013276:	490a      	ldr	r1, [pc, #40]	@ (80132a0 <sys_timeout+0x44>)
 8013278:	480a      	ldr	r0, [pc, #40]	@ (80132a4 <sys_timeout+0x48>)
 801327a:	f002 ff1f 	bl	80160bc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801327e:	f7f4 fc05 	bl	8007a8c <sys_now>
 8013282:	4602      	mov	r2, r0
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	4413      	add	r3, r2
 8013288:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801328a:	687a      	ldr	r2, [r7, #4]
 801328c:	68b9      	ldr	r1, [r7, #8]
 801328e:	6978      	ldr	r0, [r7, #20]
 8013290:	f7ff ff22 	bl	80130d8 <sys_timeout_abs>
#endif
}
 8013294:	bf00      	nop
 8013296:	3718      	adds	r7, #24
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}
 801329c:	08019594 	.word	0x08019594
 80132a0:	08019630 	.word	0x08019630
 80132a4:	08019608 	.word	0x08019608

080132a8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b084      	sub	sp, #16
 80132ac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80132ae:	f7f4 fbed 	bl	8007a8c <sys_now>
 80132b2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80132b4:	4b17      	ldr	r3, [pc, #92]	@ (8013314 <sys_check_timeouts+0x6c>)
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80132ba:	68bb      	ldr	r3, [r7, #8]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d022      	beq.n	8013306 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	685b      	ldr	r3, [r3, #4]
 80132c4:	68fa      	ldr	r2, [r7, #12]
 80132c6:	1ad3      	subs	r3, r2, r3
 80132c8:	0fdb      	lsrs	r3, r3, #31
 80132ca:	f003 0301 	and.w	r3, r3, #1
 80132ce:	b2db      	uxtb	r3, r3
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d11a      	bne.n	801330a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80132d4:	68bb      	ldr	r3, [r7, #8]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	4a0e      	ldr	r2, [pc, #56]	@ (8013314 <sys_check_timeouts+0x6c>)
 80132da:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80132dc:	68bb      	ldr	r3, [r7, #8]
 80132de:	689b      	ldr	r3, [r3, #8]
 80132e0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	68db      	ldr	r3, [r3, #12]
 80132e6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	685b      	ldr	r3, [r3, #4]
 80132ec:	4a0a      	ldr	r2, [pc, #40]	@ (8013318 <sys_check_timeouts+0x70>)
 80132ee:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80132f0:	68b9      	ldr	r1, [r7, #8]
 80132f2:	200a      	movs	r0, #10
 80132f4:	f7f9 fc30 	bl	800cb58 <memp_free>
    if (handler != NULL) {
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d0da      	beq.n	80132b4 <sys_check_timeouts+0xc>
      handler(arg);
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	6838      	ldr	r0, [r7, #0]
 8013302:	4798      	blx	r3
  do {
 8013304:	e7d6      	b.n	80132b4 <sys_check_timeouts+0xc>
      return;
 8013306:	bf00      	nop
 8013308:	e000      	b.n	801330c <sys_check_timeouts+0x64>
      return;
 801330a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801330c:	3710      	adds	r7, #16
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}
 8013312:	bf00      	nop
 8013314:	2400ca1c 	.word	0x2400ca1c
 8013318:	2400ca20 	.word	0x2400ca20

0801331c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b082      	sub	sp, #8
 8013320:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013322:	4b16      	ldr	r3, [pc, #88]	@ (801337c <sys_timeouts_sleeptime+0x60>)
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d102      	bne.n	8013330 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801332a:	f04f 33ff 	mov.w	r3, #4294967295
 801332e:	e020      	b.n	8013372 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013330:	f7f4 fbac 	bl	8007a8c <sys_now>
 8013334:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013336:	4b11      	ldr	r3, [pc, #68]	@ (801337c <sys_timeouts_sleeptime+0x60>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	685a      	ldr	r2, [r3, #4]
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	1ad3      	subs	r3, r2, r3
 8013340:	0fdb      	lsrs	r3, r3, #31
 8013342:	f003 0301 	and.w	r3, r3, #1
 8013346:	b2db      	uxtb	r3, r3
 8013348:	2b00      	cmp	r3, #0
 801334a:	d001      	beq.n	8013350 <sys_timeouts_sleeptime+0x34>
    return 0;
 801334c:	2300      	movs	r3, #0
 801334e:	e010      	b.n	8013372 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013350:	4b0a      	ldr	r3, [pc, #40]	@ (801337c <sys_timeouts_sleeptime+0x60>)
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	685a      	ldr	r2, [r3, #4]
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	1ad3      	subs	r3, r2, r3
 801335a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801335c:	683b      	ldr	r3, [r7, #0]
 801335e:	2b00      	cmp	r3, #0
 8013360:	da06      	bge.n	8013370 <sys_timeouts_sleeptime+0x54>
 8013362:	4b07      	ldr	r3, [pc, #28]	@ (8013380 <sys_timeouts_sleeptime+0x64>)
 8013364:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8013368:	4906      	ldr	r1, [pc, #24]	@ (8013384 <sys_timeouts_sleeptime+0x68>)
 801336a:	4807      	ldr	r0, [pc, #28]	@ (8013388 <sys_timeouts_sleeptime+0x6c>)
 801336c:	f002 fea6 	bl	80160bc <iprintf>
    return ret;
 8013370:	683b      	ldr	r3, [r7, #0]
  }
}
 8013372:	4618      	mov	r0, r3
 8013374:	3708      	adds	r7, #8
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}
 801337a:	bf00      	nop
 801337c:	2400ca1c 	.word	0x2400ca1c
 8013380:	08019594 	.word	0x08019594
 8013384:	08019668 	.word	0x08019668
 8013388:	08019608 	.word	0x08019608

0801338c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013390:	f002 fd94 	bl	8015ebc <rand>
 8013394:	4603      	mov	r3, r0
 8013396:	b29b      	uxth	r3, r3
 8013398:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801339c:	b29b      	uxth	r3, r3
 801339e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80133a2:	b29a      	uxth	r2, r3
 80133a4:	4b01      	ldr	r3, [pc, #4]	@ (80133ac <udp_init+0x20>)
 80133a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80133a8:	bf00      	nop
 80133aa:	bd80      	pop	{r7, pc}
 80133ac:	24000030 	.word	0x24000030

080133b0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b084      	sub	sp, #16
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	60f8      	str	r0, [r7, #12]
 80133b8:	60b9      	str	r1, [r7, #8]
 80133ba:	4613      	mov	r3, r2
 80133bc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d105      	bne.n	80133d0 <udp_input_local_match+0x20>
 80133c4:	4b27      	ldr	r3, [pc, #156]	@ (8013464 <udp_input_local_match+0xb4>)
 80133c6:	2287      	movs	r2, #135	@ 0x87
 80133c8:	4927      	ldr	r1, [pc, #156]	@ (8013468 <udp_input_local_match+0xb8>)
 80133ca:	4828      	ldr	r0, [pc, #160]	@ (801346c <udp_input_local_match+0xbc>)
 80133cc:	f002 fe76 	bl	80160bc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80133d0:	68bb      	ldr	r3, [r7, #8]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d105      	bne.n	80133e2 <udp_input_local_match+0x32>
 80133d6:	4b23      	ldr	r3, [pc, #140]	@ (8013464 <udp_input_local_match+0xb4>)
 80133d8:	2288      	movs	r2, #136	@ 0x88
 80133da:	4925      	ldr	r1, [pc, #148]	@ (8013470 <udp_input_local_match+0xc0>)
 80133dc:	4823      	ldr	r0, [pc, #140]	@ (801346c <udp_input_local_match+0xbc>)
 80133de:	f002 fe6d 	bl	80160bc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	7a1b      	ldrb	r3, [r3, #8]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d00b      	beq.n	8013402 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	7a1a      	ldrb	r2, [r3, #8]
 80133ee:	4b21      	ldr	r3, [pc, #132]	@ (8013474 <udp_input_local_match+0xc4>)
 80133f0:	685b      	ldr	r3, [r3, #4]
 80133f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80133f6:	3301      	adds	r3, #1
 80133f8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80133fa:	429a      	cmp	r2, r3
 80133fc:	d001      	beq.n	8013402 <udp_input_local_match+0x52>
    return 0;
 80133fe:	2300      	movs	r3, #0
 8013400:	e02b      	b.n	801345a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013402:	79fb      	ldrb	r3, [r7, #7]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d018      	beq.n	801343a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d013      	beq.n	8013436 <udp_input_local_match+0x86>
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d00f      	beq.n	8013436 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013416:	4b17      	ldr	r3, [pc, #92]	@ (8013474 <udp_input_local_match+0xc4>)
 8013418:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801341a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801341e:	d00a      	beq.n	8013436 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	681a      	ldr	r2, [r3, #0]
 8013424:	4b13      	ldr	r3, [pc, #76]	@ (8013474 <udp_input_local_match+0xc4>)
 8013426:	695b      	ldr	r3, [r3, #20]
 8013428:	405a      	eors	r2, r3
 801342a:	68bb      	ldr	r3, [r7, #8]
 801342c:	3308      	adds	r3, #8
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013432:	2b00      	cmp	r3, #0
 8013434:	d110      	bne.n	8013458 <udp_input_local_match+0xa8>
          return 1;
 8013436:	2301      	movs	r3, #1
 8013438:	e00f      	b.n	801345a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d009      	beq.n	8013454 <udp_input_local_match+0xa4>
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d005      	beq.n	8013454 <udp_input_local_match+0xa4>
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	681a      	ldr	r2, [r3, #0]
 801344c:	4b09      	ldr	r3, [pc, #36]	@ (8013474 <udp_input_local_match+0xc4>)
 801344e:	695b      	ldr	r3, [r3, #20]
 8013450:	429a      	cmp	r2, r3
 8013452:	d101      	bne.n	8013458 <udp_input_local_match+0xa8>
        return 1;
 8013454:	2301      	movs	r3, #1
 8013456:	e000      	b.n	801345a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013458:	2300      	movs	r3, #0
}
 801345a:	4618      	mov	r0, r3
 801345c:	3710      	adds	r7, #16
 801345e:	46bd      	mov	sp, r7
 8013460:	bd80      	pop	{r7, pc}
 8013462:	bf00      	nop
 8013464:	0801967c 	.word	0x0801967c
 8013468:	080196ac 	.word	0x080196ac
 801346c:	080196d0 	.word	0x080196d0
 8013470:	080196f8 	.word	0x080196f8
 8013474:	24005f0c 	.word	0x24005f0c

08013478 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013478:	b590      	push	{r4, r7, lr}
 801347a:	b08d      	sub	sp, #52	@ 0x34
 801347c:	af02      	add	r7, sp, #8
 801347e:	6078      	str	r0, [r7, #4]
 8013480:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013482:	2300      	movs	r3, #0
 8013484:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d105      	bne.n	8013498 <udp_input+0x20>
 801348c:	4b7c      	ldr	r3, [pc, #496]	@ (8013680 <udp_input+0x208>)
 801348e:	22cf      	movs	r2, #207	@ 0xcf
 8013490:	497c      	ldr	r1, [pc, #496]	@ (8013684 <udp_input+0x20c>)
 8013492:	487d      	ldr	r0, [pc, #500]	@ (8013688 <udp_input+0x210>)
 8013494:	f002 fe12 	bl	80160bc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d105      	bne.n	80134aa <udp_input+0x32>
 801349e:	4b78      	ldr	r3, [pc, #480]	@ (8013680 <udp_input+0x208>)
 80134a0:	22d0      	movs	r2, #208	@ 0xd0
 80134a2:	497a      	ldr	r1, [pc, #488]	@ (801368c <udp_input+0x214>)
 80134a4:	4878      	ldr	r0, [pc, #480]	@ (8013688 <udp_input+0x210>)
 80134a6:	f002 fe09 	bl	80160bc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	895b      	ldrh	r3, [r3, #10]
 80134ae:	2b07      	cmp	r3, #7
 80134b0:	d803      	bhi.n	80134ba <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80134b2:	6878      	ldr	r0, [r7, #4]
 80134b4:	f7fa f9f8 	bl	800d8a8 <pbuf_free>
    goto end;
 80134b8:	e0de      	b.n	8013678 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	685b      	ldr	r3, [r3, #4]
 80134be:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80134c0:	4b73      	ldr	r3, [pc, #460]	@ (8013690 <udp_input+0x218>)
 80134c2:	695b      	ldr	r3, [r3, #20]
 80134c4:	4a72      	ldr	r2, [pc, #456]	@ (8013690 <udp_input+0x218>)
 80134c6:	6812      	ldr	r2, [r2, #0]
 80134c8:	4611      	mov	r1, r2
 80134ca:	4618      	mov	r0, r3
 80134cc:	f001 fcae 	bl	8014e2c <ip4_addr_isbroadcast_u32>
 80134d0:	4603      	mov	r3, r0
 80134d2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80134d4:	697b      	ldr	r3, [r7, #20]
 80134d6:	881b      	ldrh	r3, [r3, #0]
 80134d8:	b29b      	uxth	r3, r3
 80134da:	4618      	mov	r0, r3
 80134dc:	f7f8 fd26 	bl	800bf2c <lwip_htons>
 80134e0:	4603      	mov	r3, r0
 80134e2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80134e4:	697b      	ldr	r3, [r7, #20]
 80134e6:	885b      	ldrh	r3, [r3, #2]
 80134e8:	b29b      	uxth	r3, r3
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7f8 fd1e 	bl	800bf2c <lwip_htons>
 80134f0:	4603      	mov	r3, r0
 80134f2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80134f4:	2300      	movs	r3, #0
 80134f6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80134f8:	2300      	movs	r3, #0
 80134fa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80134fc:	2300      	movs	r3, #0
 80134fe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013500:	4b64      	ldr	r3, [pc, #400]	@ (8013694 <udp_input+0x21c>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	627b      	str	r3, [r7, #36]	@ 0x24
 8013506:	e054      	b.n	80135b2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801350a:	8a5b      	ldrh	r3, [r3, #18]
 801350c:	89fa      	ldrh	r2, [r7, #14]
 801350e:	429a      	cmp	r2, r3
 8013510:	d14a      	bne.n	80135a8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013512:	7cfb      	ldrb	r3, [r7, #19]
 8013514:	461a      	mov	r2, r3
 8013516:	6839      	ldr	r1, [r7, #0]
 8013518:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801351a:	f7ff ff49 	bl	80133b0 <udp_input_local_match>
 801351e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013520:	2b00      	cmp	r3, #0
 8013522:	d041      	beq.n	80135a8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013526:	7c1b      	ldrb	r3, [r3, #16]
 8013528:	f003 0304 	and.w	r3, r3, #4
 801352c:	2b00      	cmp	r3, #0
 801352e:	d11d      	bne.n	801356c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013530:	69fb      	ldr	r3, [r7, #28]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d102      	bne.n	801353c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013538:	61fb      	str	r3, [r7, #28]
 801353a:	e017      	b.n	801356c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801353c:	7cfb      	ldrb	r3, [r7, #19]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d014      	beq.n	801356c <udp_input+0xf4>
 8013542:	4b53      	ldr	r3, [pc, #332]	@ (8013690 <udp_input+0x218>)
 8013544:	695b      	ldr	r3, [r3, #20]
 8013546:	f1b3 3fff 	cmp.w	r3, #4294967295
 801354a:	d10f      	bne.n	801356c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801354c:	69fb      	ldr	r3, [r7, #28]
 801354e:	681a      	ldr	r2, [r3, #0]
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	3304      	adds	r3, #4
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	429a      	cmp	r2, r3
 8013558:	d008      	beq.n	801356c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801355c:	681a      	ldr	r2, [r3, #0]
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	3304      	adds	r3, #4
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	429a      	cmp	r2, r3
 8013566:	d101      	bne.n	801356c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801356a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801356e:	8a9b      	ldrh	r3, [r3, #20]
 8013570:	8a3a      	ldrh	r2, [r7, #16]
 8013572:	429a      	cmp	r2, r3
 8013574:	d118      	bne.n	80135a8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013578:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801357a:	2b00      	cmp	r3, #0
 801357c:	d005      	beq.n	801358a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013580:	685a      	ldr	r2, [r3, #4]
 8013582:	4b43      	ldr	r3, [pc, #268]	@ (8013690 <udp_input+0x218>)
 8013584:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013586:	429a      	cmp	r2, r3
 8013588:	d10e      	bne.n	80135a8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801358a:	6a3b      	ldr	r3, [r7, #32]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d014      	beq.n	80135ba <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013592:	68da      	ldr	r2, [r3, #12]
 8013594:	6a3b      	ldr	r3, [r7, #32]
 8013596:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013598:	4b3e      	ldr	r3, [pc, #248]	@ (8013694 <udp_input+0x21c>)
 801359a:	681a      	ldr	r2, [r3, #0]
 801359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801359e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80135a0:	4a3c      	ldr	r2, [pc, #240]	@ (8013694 <udp_input+0x21c>)
 80135a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135a4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80135a6:	e008      	b.n	80135ba <udp_input+0x142>
      }
    }

    prev = pcb;
 80135a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135aa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80135ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135ae:	68db      	ldr	r3, [r3, #12]
 80135b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80135b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d1a7      	bne.n	8013508 <udp_input+0x90>
 80135b8:	e000      	b.n	80135bc <udp_input+0x144>
        break;
 80135ba:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80135bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d101      	bne.n	80135c6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80135c2:	69fb      	ldr	r3, [r7, #28]
 80135c4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80135c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d002      	beq.n	80135d2 <udp_input+0x15a>
    for_us = 1;
 80135cc:	2301      	movs	r3, #1
 80135ce:	76fb      	strb	r3, [r7, #27]
 80135d0:	e00a      	b.n	80135e8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	3304      	adds	r3, #4
 80135d6:	681a      	ldr	r2, [r3, #0]
 80135d8:	4b2d      	ldr	r3, [pc, #180]	@ (8013690 <udp_input+0x218>)
 80135da:	695b      	ldr	r3, [r3, #20]
 80135dc:	429a      	cmp	r2, r3
 80135de:	bf0c      	ite	eq
 80135e0:	2301      	moveq	r3, #1
 80135e2:	2300      	movne	r3, #0
 80135e4:	b2db      	uxtb	r3, r3
 80135e6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80135e8:	7efb      	ldrb	r3, [r7, #27]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d041      	beq.n	8013672 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80135ee:	2108      	movs	r1, #8
 80135f0:	6878      	ldr	r0, [r7, #4]
 80135f2:	f7fa f8d3 	bl	800d79c <pbuf_remove_header>
 80135f6:	4603      	mov	r3, r0
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d00a      	beq.n	8013612 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80135fc:	4b20      	ldr	r3, [pc, #128]	@ (8013680 <udp_input+0x208>)
 80135fe:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013602:	4925      	ldr	r1, [pc, #148]	@ (8013698 <udp_input+0x220>)
 8013604:	4820      	ldr	r0, [pc, #128]	@ (8013688 <udp_input+0x210>)
 8013606:	f002 fd59 	bl	80160bc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801360a:	6878      	ldr	r0, [r7, #4]
 801360c:	f7fa f94c 	bl	800d8a8 <pbuf_free>
      goto end;
 8013610:	e032      	b.n	8013678 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013614:	2b00      	cmp	r3, #0
 8013616:	d012      	beq.n	801363e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801361a:	699b      	ldr	r3, [r3, #24]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d00a      	beq.n	8013636 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013622:	699c      	ldr	r4, [r3, #24]
 8013624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013626:	69d8      	ldr	r0, [r3, #28]
 8013628:	8a3b      	ldrh	r3, [r7, #16]
 801362a:	9300      	str	r3, [sp, #0]
 801362c:	4b1b      	ldr	r3, [pc, #108]	@ (801369c <udp_input+0x224>)
 801362e:	687a      	ldr	r2, [r7, #4]
 8013630:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013632:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013634:	e021      	b.n	801367a <udp_input+0x202>
        pbuf_free(p);
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f7fa f936 	bl	800d8a8 <pbuf_free>
        goto end;
 801363c:	e01c      	b.n	8013678 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801363e:	7cfb      	ldrb	r3, [r7, #19]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d112      	bne.n	801366a <udp_input+0x1f2>
 8013644:	4b12      	ldr	r3, [pc, #72]	@ (8013690 <udp_input+0x218>)
 8013646:	695b      	ldr	r3, [r3, #20]
 8013648:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801364c:	2be0      	cmp	r3, #224	@ 0xe0
 801364e:	d00c      	beq.n	801366a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013650:	4b0f      	ldr	r3, [pc, #60]	@ (8013690 <udp_input+0x218>)
 8013652:	899b      	ldrh	r3, [r3, #12]
 8013654:	3308      	adds	r3, #8
 8013656:	b29b      	uxth	r3, r3
 8013658:	b21b      	sxth	r3, r3
 801365a:	4619      	mov	r1, r3
 801365c:	6878      	ldr	r0, [r7, #4]
 801365e:	f7fa f910 	bl	800d882 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013662:	2103      	movs	r1, #3
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f001 f8b7 	bl	80147d8 <icmp_dest_unreach>
      pbuf_free(p);
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f7fa f91c 	bl	800d8a8 <pbuf_free>
  return;
 8013670:	e003      	b.n	801367a <udp_input+0x202>
    pbuf_free(p);
 8013672:	6878      	ldr	r0, [r7, #4]
 8013674:	f7fa f918 	bl	800d8a8 <pbuf_free>
  return;
 8013678:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801367a:	372c      	adds	r7, #44	@ 0x2c
 801367c:	46bd      	mov	sp, r7
 801367e:	bd90      	pop	{r4, r7, pc}
 8013680:	0801967c 	.word	0x0801967c
 8013684:	08019720 	.word	0x08019720
 8013688:	080196d0 	.word	0x080196d0
 801368c:	08019738 	.word	0x08019738
 8013690:	24005f0c 	.word	0x24005f0c
 8013694:	2400ca28 	.word	0x2400ca28
 8013698:	08019754 	.word	0x08019754
 801369c:	24005f1c 	.word	0x24005f1c

080136a0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80136a0:	b480      	push	{r7}
 80136a2:	b085      	sub	sp, #20
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
 80136a8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d01e      	beq.n	80136ee <udp_netif_ip_addr_changed+0x4e>
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d01a      	beq.n	80136ee <udp_netif_ip_addr_changed+0x4e>
 80136b8:	683b      	ldr	r3, [r7, #0]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d017      	beq.n	80136ee <udp_netif_ip_addr_changed+0x4e>
 80136be:	683b      	ldr	r3, [r7, #0]
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d013      	beq.n	80136ee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80136c6:	4b0d      	ldr	r3, [pc, #52]	@ (80136fc <udp_netif_ip_addr_changed+0x5c>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	60fb      	str	r3, [r7, #12]
 80136cc:	e00c      	b.n	80136e8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	681a      	ldr	r2, [r3, #0]
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	429a      	cmp	r2, r3
 80136d8:	d103      	bne.n	80136e2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	681a      	ldr	r2, [r3, #0]
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	68db      	ldr	r3, [r3, #12]
 80136e6:	60fb      	str	r3, [r7, #12]
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d1ef      	bne.n	80136ce <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80136ee:	bf00      	nop
 80136f0:	3714      	adds	r7, #20
 80136f2:	46bd      	mov	sp, r7
 80136f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f8:	4770      	bx	lr
 80136fa:	bf00      	nop
 80136fc:	2400ca28 	.word	0x2400ca28

08013700 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b082      	sub	sp, #8
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013708:	4915      	ldr	r1, [pc, #84]	@ (8013760 <etharp_free_entry+0x60>)
 801370a:	687a      	ldr	r2, [r7, #4]
 801370c:	4613      	mov	r3, r2
 801370e:	005b      	lsls	r3, r3, #1
 8013710:	4413      	add	r3, r2
 8013712:	00db      	lsls	r3, r3, #3
 8013714:	440b      	add	r3, r1
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d013      	beq.n	8013744 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801371c:	4910      	ldr	r1, [pc, #64]	@ (8013760 <etharp_free_entry+0x60>)
 801371e:	687a      	ldr	r2, [r7, #4]
 8013720:	4613      	mov	r3, r2
 8013722:	005b      	lsls	r3, r3, #1
 8013724:	4413      	add	r3, r2
 8013726:	00db      	lsls	r3, r3, #3
 8013728:	440b      	add	r3, r1
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	4618      	mov	r0, r3
 801372e:	f7fa f8bb 	bl	800d8a8 <pbuf_free>
    arp_table[i].q = NULL;
 8013732:	490b      	ldr	r1, [pc, #44]	@ (8013760 <etharp_free_entry+0x60>)
 8013734:	687a      	ldr	r2, [r7, #4]
 8013736:	4613      	mov	r3, r2
 8013738:	005b      	lsls	r3, r3, #1
 801373a:	4413      	add	r3, r2
 801373c:	00db      	lsls	r3, r3, #3
 801373e:	440b      	add	r3, r1
 8013740:	2200      	movs	r2, #0
 8013742:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013744:	4906      	ldr	r1, [pc, #24]	@ (8013760 <etharp_free_entry+0x60>)
 8013746:	687a      	ldr	r2, [r7, #4]
 8013748:	4613      	mov	r3, r2
 801374a:	005b      	lsls	r3, r3, #1
 801374c:	4413      	add	r3, r2
 801374e:	00db      	lsls	r3, r3, #3
 8013750:	440b      	add	r3, r1
 8013752:	3314      	adds	r3, #20
 8013754:	2200      	movs	r2, #0
 8013756:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013758:	bf00      	nop
 801375a:	3708      	adds	r7, #8
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}
 8013760:	2400ca2c 	.word	0x2400ca2c

08013764 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b082      	sub	sp, #8
 8013768:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801376a:	2300      	movs	r3, #0
 801376c:	607b      	str	r3, [r7, #4]
 801376e:	e096      	b.n	801389e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013770:	494f      	ldr	r1, [pc, #316]	@ (80138b0 <etharp_tmr+0x14c>)
 8013772:	687a      	ldr	r2, [r7, #4]
 8013774:	4613      	mov	r3, r2
 8013776:	005b      	lsls	r3, r3, #1
 8013778:	4413      	add	r3, r2
 801377a:	00db      	lsls	r3, r3, #3
 801377c:	440b      	add	r3, r1
 801377e:	3314      	adds	r3, #20
 8013780:	781b      	ldrb	r3, [r3, #0]
 8013782:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013784:	78fb      	ldrb	r3, [r7, #3]
 8013786:	2b00      	cmp	r3, #0
 8013788:	f000 8086 	beq.w	8013898 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801378c:	4948      	ldr	r1, [pc, #288]	@ (80138b0 <etharp_tmr+0x14c>)
 801378e:	687a      	ldr	r2, [r7, #4]
 8013790:	4613      	mov	r3, r2
 8013792:	005b      	lsls	r3, r3, #1
 8013794:	4413      	add	r3, r2
 8013796:	00db      	lsls	r3, r3, #3
 8013798:	440b      	add	r3, r1
 801379a:	3312      	adds	r3, #18
 801379c:	881b      	ldrh	r3, [r3, #0]
 801379e:	3301      	adds	r3, #1
 80137a0:	b298      	uxth	r0, r3
 80137a2:	4943      	ldr	r1, [pc, #268]	@ (80138b0 <etharp_tmr+0x14c>)
 80137a4:	687a      	ldr	r2, [r7, #4]
 80137a6:	4613      	mov	r3, r2
 80137a8:	005b      	lsls	r3, r3, #1
 80137aa:	4413      	add	r3, r2
 80137ac:	00db      	lsls	r3, r3, #3
 80137ae:	440b      	add	r3, r1
 80137b0:	3312      	adds	r3, #18
 80137b2:	4602      	mov	r2, r0
 80137b4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80137b6:	493e      	ldr	r1, [pc, #248]	@ (80138b0 <etharp_tmr+0x14c>)
 80137b8:	687a      	ldr	r2, [r7, #4]
 80137ba:	4613      	mov	r3, r2
 80137bc:	005b      	lsls	r3, r3, #1
 80137be:	4413      	add	r3, r2
 80137c0:	00db      	lsls	r3, r3, #3
 80137c2:	440b      	add	r3, r1
 80137c4:	3312      	adds	r3, #18
 80137c6:	881b      	ldrh	r3, [r3, #0]
 80137c8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80137cc:	d215      	bcs.n	80137fa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80137ce:	4938      	ldr	r1, [pc, #224]	@ (80138b0 <etharp_tmr+0x14c>)
 80137d0:	687a      	ldr	r2, [r7, #4]
 80137d2:	4613      	mov	r3, r2
 80137d4:	005b      	lsls	r3, r3, #1
 80137d6:	4413      	add	r3, r2
 80137d8:	00db      	lsls	r3, r3, #3
 80137da:	440b      	add	r3, r1
 80137dc:	3314      	adds	r3, #20
 80137de:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80137e0:	2b01      	cmp	r3, #1
 80137e2:	d10e      	bne.n	8013802 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80137e4:	4932      	ldr	r1, [pc, #200]	@ (80138b0 <etharp_tmr+0x14c>)
 80137e6:	687a      	ldr	r2, [r7, #4]
 80137e8:	4613      	mov	r3, r2
 80137ea:	005b      	lsls	r3, r3, #1
 80137ec:	4413      	add	r3, r2
 80137ee:	00db      	lsls	r3, r3, #3
 80137f0:	440b      	add	r3, r1
 80137f2:	3312      	adds	r3, #18
 80137f4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80137f6:	2b04      	cmp	r3, #4
 80137f8:	d903      	bls.n	8013802 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80137fa:	6878      	ldr	r0, [r7, #4]
 80137fc:	f7ff ff80 	bl	8013700 <etharp_free_entry>
 8013800:	e04a      	b.n	8013898 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013802:	492b      	ldr	r1, [pc, #172]	@ (80138b0 <etharp_tmr+0x14c>)
 8013804:	687a      	ldr	r2, [r7, #4]
 8013806:	4613      	mov	r3, r2
 8013808:	005b      	lsls	r3, r3, #1
 801380a:	4413      	add	r3, r2
 801380c:	00db      	lsls	r3, r3, #3
 801380e:	440b      	add	r3, r1
 8013810:	3314      	adds	r3, #20
 8013812:	781b      	ldrb	r3, [r3, #0]
 8013814:	2b03      	cmp	r3, #3
 8013816:	d10a      	bne.n	801382e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013818:	4925      	ldr	r1, [pc, #148]	@ (80138b0 <etharp_tmr+0x14c>)
 801381a:	687a      	ldr	r2, [r7, #4]
 801381c:	4613      	mov	r3, r2
 801381e:	005b      	lsls	r3, r3, #1
 8013820:	4413      	add	r3, r2
 8013822:	00db      	lsls	r3, r3, #3
 8013824:	440b      	add	r3, r1
 8013826:	3314      	adds	r3, #20
 8013828:	2204      	movs	r2, #4
 801382a:	701a      	strb	r2, [r3, #0]
 801382c:	e034      	b.n	8013898 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801382e:	4920      	ldr	r1, [pc, #128]	@ (80138b0 <etharp_tmr+0x14c>)
 8013830:	687a      	ldr	r2, [r7, #4]
 8013832:	4613      	mov	r3, r2
 8013834:	005b      	lsls	r3, r3, #1
 8013836:	4413      	add	r3, r2
 8013838:	00db      	lsls	r3, r3, #3
 801383a:	440b      	add	r3, r1
 801383c:	3314      	adds	r3, #20
 801383e:	781b      	ldrb	r3, [r3, #0]
 8013840:	2b04      	cmp	r3, #4
 8013842:	d10a      	bne.n	801385a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013844:	491a      	ldr	r1, [pc, #104]	@ (80138b0 <etharp_tmr+0x14c>)
 8013846:	687a      	ldr	r2, [r7, #4]
 8013848:	4613      	mov	r3, r2
 801384a:	005b      	lsls	r3, r3, #1
 801384c:	4413      	add	r3, r2
 801384e:	00db      	lsls	r3, r3, #3
 8013850:	440b      	add	r3, r1
 8013852:	3314      	adds	r3, #20
 8013854:	2202      	movs	r2, #2
 8013856:	701a      	strb	r2, [r3, #0]
 8013858:	e01e      	b.n	8013898 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801385a:	4915      	ldr	r1, [pc, #84]	@ (80138b0 <etharp_tmr+0x14c>)
 801385c:	687a      	ldr	r2, [r7, #4]
 801385e:	4613      	mov	r3, r2
 8013860:	005b      	lsls	r3, r3, #1
 8013862:	4413      	add	r3, r2
 8013864:	00db      	lsls	r3, r3, #3
 8013866:	440b      	add	r3, r1
 8013868:	3314      	adds	r3, #20
 801386a:	781b      	ldrb	r3, [r3, #0]
 801386c:	2b01      	cmp	r3, #1
 801386e:	d113      	bne.n	8013898 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013870:	490f      	ldr	r1, [pc, #60]	@ (80138b0 <etharp_tmr+0x14c>)
 8013872:	687a      	ldr	r2, [r7, #4]
 8013874:	4613      	mov	r3, r2
 8013876:	005b      	lsls	r3, r3, #1
 8013878:	4413      	add	r3, r2
 801387a:	00db      	lsls	r3, r3, #3
 801387c:	440b      	add	r3, r1
 801387e:	3308      	adds	r3, #8
 8013880:	6818      	ldr	r0, [r3, #0]
 8013882:	687a      	ldr	r2, [r7, #4]
 8013884:	4613      	mov	r3, r2
 8013886:	005b      	lsls	r3, r3, #1
 8013888:	4413      	add	r3, r2
 801388a:	00db      	lsls	r3, r3, #3
 801388c:	4a08      	ldr	r2, [pc, #32]	@ (80138b0 <etharp_tmr+0x14c>)
 801388e:	4413      	add	r3, r2
 8013890:	3304      	adds	r3, #4
 8013892:	4619      	mov	r1, r3
 8013894:	f000 fe6e 	bl	8014574 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	3301      	adds	r3, #1
 801389c:	607b      	str	r3, [r7, #4]
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	2b09      	cmp	r3, #9
 80138a2:	f77f af65 	ble.w	8013770 <etharp_tmr+0xc>
      }
    }
  }
}
 80138a6:	bf00      	nop
 80138a8:	bf00      	nop
 80138aa:	3708      	adds	r7, #8
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bd80      	pop	{r7, pc}
 80138b0:	2400ca2c 	.word	0x2400ca2c

080138b4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b08a      	sub	sp, #40	@ 0x28
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	60f8      	str	r0, [r7, #12]
 80138bc:	460b      	mov	r3, r1
 80138be:	607a      	str	r2, [r7, #4]
 80138c0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80138c2:	230a      	movs	r3, #10
 80138c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80138c6:	230a      	movs	r3, #10
 80138c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80138ca:	230a      	movs	r3, #10
 80138cc:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80138ce:	2300      	movs	r3, #0
 80138d0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80138d2:	230a      	movs	r3, #10
 80138d4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80138d6:	2300      	movs	r3, #0
 80138d8:	83bb      	strh	r3, [r7, #28]
 80138da:	2300      	movs	r3, #0
 80138dc:	837b      	strh	r3, [r7, #26]
 80138de:	2300      	movs	r3, #0
 80138e0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80138e2:	2300      	movs	r3, #0
 80138e4:	843b      	strh	r3, [r7, #32]
 80138e6:	e0ae      	b.n	8013a46 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80138e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138ec:	49a6      	ldr	r1, [pc, #664]	@ (8013b88 <etharp_find_entry+0x2d4>)
 80138ee:	4613      	mov	r3, r2
 80138f0:	005b      	lsls	r3, r3, #1
 80138f2:	4413      	add	r3, r2
 80138f4:	00db      	lsls	r3, r3, #3
 80138f6:	440b      	add	r3, r1
 80138f8:	3314      	adds	r3, #20
 80138fa:	781b      	ldrb	r3, [r3, #0]
 80138fc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80138fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013902:	2b0a      	cmp	r3, #10
 8013904:	d105      	bne.n	8013912 <etharp_find_entry+0x5e>
 8013906:	7dfb      	ldrb	r3, [r7, #23]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d102      	bne.n	8013912 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801390c:	8c3b      	ldrh	r3, [r7, #32]
 801390e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8013910:	e095      	b.n	8013a3e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013912:	7dfb      	ldrb	r3, [r7, #23]
 8013914:	2b00      	cmp	r3, #0
 8013916:	f000 8092 	beq.w	8013a3e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801391a:	7dfb      	ldrb	r3, [r7, #23]
 801391c:	2b01      	cmp	r3, #1
 801391e:	d009      	beq.n	8013934 <etharp_find_entry+0x80>
 8013920:	7dfb      	ldrb	r3, [r7, #23]
 8013922:	2b01      	cmp	r3, #1
 8013924:	d806      	bhi.n	8013934 <etharp_find_entry+0x80>
 8013926:	4b99      	ldr	r3, [pc, #612]	@ (8013b8c <etharp_find_entry+0x2d8>)
 8013928:	f240 1223 	movw	r2, #291	@ 0x123
 801392c:	4998      	ldr	r1, [pc, #608]	@ (8013b90 <etharp_find_entry+0x2dc>)
 801392e:	4899      	ldr	r0, [pc, #612]	@ (8013b94 <etharp_find_entry+0x2e0>)
 8013930:	f002 fbc4 	bl	80160bc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d020      	beq.n	801397c <etharp_find_entry+0xc8>
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	6819      	ldr	r1, [r3, #0]
 801393e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013942:	4891      	ldr	r0, [pc, #580]	@ (8013b88 <etharp_find_entry+0x2d4>)
 8013944:	4613      	mov	r3, r2
 8013946:	005b      	lsls	r3, r3, #1
 8013948:	4413      	add	r3, r2
 801394a:	00db      	lsls	r3, r3, #3
 801394c:	4403      	add	r3, r0
 801394e:	3304      	adds	r3, #4
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	4299      	cmp	r1, r3
 8013954:	d112      	bne.n	801397c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d00c      	beq.n	8013976 <etharp_find_entry+0xc2>
 801395c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013960:	4989      	ldr	r1, [pc, #548]	@ (8013b88 <etharp_find_entry+0x2d4>)
 8013962:	4613      	mov	r3, r2
 8013964:	005b      	lsls	r3, r3, #1
 8013966:	4413      	add	r3, r2
 8013968:	00db      	lsls	r3, r3, #3
 801396a:	440b      	add	r3, r1
 801396c:	3308      	adds	r3, #8
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	687a      	ldr	r2, [r7, #4]
 8013972:	429a      	cmp	r2, r3
 8013974:	d102      	bne.n	801397c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013976:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801397a:	e100      	b.n	8013b7e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801397c:	7dfb      	ldrb	r3, [r7, #23]
 801397e:	2b01      	cmp	r3, #1
 8013980:	d140      	bne.n	8013a04 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013982:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013986:	4980      	ldr	r1, [pc, #512]	@ (8013b88 <etharp_find_entry+0x2d4>)
 8013988:	4613      	mov	r3, r2
 801398a:	005b      	lsls	r3, r3, #1
 801398c:	4413      	add	r3, r2
 801398e:	00db      	lsls	r3, r3, #3
 8013990:	440b      	add	r3, r1
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d01a      	beq.n	80139ce <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013998:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801399c:	497a      	ldr	r1, [pc, #488]	@ (8013b88 <etharp_find_entry+0x2d4>)
 801399e:	4613      	mov	r3, r2
 80139a0:	005b      	lsls	r3, r3, #1
 80139a2:	4413      	add	r3, r2
 80139a4:	00db      	lsls	r3, r3, #3
 80139a6:	440b      	add	r3, r1
 80139a8:	3312      	adds	r3, #18
 80139aa:	881b      	ldrh	r3, [r3, #0]
 80139ac:	8bba      	ldrh	r2, [r7, #28]
 80139ae:	429a      	cmp	r2, r3
 80139b0:	d845      	bhi.n	8013a3e <etharp_find_entry+0x18a>
            old_queue = i;
 80139b2:	8c3b      	ldrh	r3, [r7, #32]
 80139b4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80139b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139ba:	4973      	ldr	r1, [pc, #460]	@ (8013b88 <etharp_find_entry+0x2d4>)
 80139bc:	4613      	mov	r3, r2
 80139be:	005b      	lsls	r3, r3, #1
 80139c0:	4413      	add	r3, r2
 80139c2:	00db      	lsls	r3, r3, #3
 80139c4:	440b      	add	r3, r1
 80139c6:	3312      	adds	r3, #18
 80139c8:	881b      	ldrh	r3, [r3, #0]
 80139ca:	83bb      	strh	r3, [r7, #28]
 80139cc:	e037      	b.n	8013a3e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80139ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139d2:	496d      	ldr	r1, [pc, #436]	@ (8013b88 <etharp_find_entry+0x2d4>)
 80139d4:	4613      	mov	r3, r2
 80139d6:	005b      	lsls	r3, r3, #1
 80139d8:	4413      	add	r3, r2
 80139da:	00db      	lsls	r3, r3, #3
 80139dc:	440b      	add	r3, r1
 80139de:	3312      	adds	r3, #18
 80139e0:	881b      	ldrh	r3, [r3, #0]
 80139e2:	8b7a      	ldrh	r2, [r7, #26]
 80139e4:	429a      	cmp	r2, r3
 80139e6:	d82a      	bhi.n	8013a3e <etharp_find_entry+0x18a>
            old_pending = i;
 80139e8:	8c3b      	ldrh	r3, [r7, #32]
 80139ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80139ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139f0:	4965      	ldr	r1, [pc, #404]	@ (8013b88 <etharp_find_entry+0x2d4>)
 80139f2:	4613      	mov	r3, r2
 80139f4:	005b      	lsls	r3, r3, #1
 80139f6:	4413      	add	r3, r2
 80139f8:	00db      	lsls	r3, r3, #3
 80139fa:	440b      	add	r3, r1
 80139fc:	3312      	adds	r3, #18
 80139fe:	881b      	ldrh	r3, [r3, #0]
 8013a00:	837b      	strh	r3, [r7, #26]
 8013a02:	e01c      	b.n	8013a3e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013a04:	7dfb      	ldrb	r3, [r7, #23]
 8013a06:	2b01      	cmp	r3, #1
 8013a08:	d919      	bls.n	8013a3e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013a0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a0e:	495e      	ldr	r1, [pc, #376]	@ (8013b88 <etharp_find_entry+0x2d4>)
 8013a10:	4613      	mov	r3, r2
 8013a12:	005b      	lsls	r3, r3, #1
 8013a14:	4413      	add	r3, r2
 8013a16:	00db      	lsls	r3, r3, #3
 8013a18:	440b      	add	r3, r1
 8013a1a:	3312      	adds	r3, #18
 8013a1c:	881b      	ldrh	r3, [r3, #0]
 8013a1e:	8b3a      	ldrh	r2, [r7, #24]
 8013a20:	429a      	cmp	r2, r3
 8013a22:	d80c      	bhi.n	8013a3e <etharp_find_entry+0x18a>
            old_stable = i;
 8013a24:	8c3b      	ldrh	r3, [r7, #32]
 8013a26:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8013a28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a2c:	4956      	ldr	r1, [pc, #344]	@ (8013b88 <etharp_find_entry+0x2d4>)
 8013a2e:	4613      	mov	r3, r2
 8013a30:	005b      	lsls	r3, r3, #1
 8013a32:	4413      	add	r3, r2
 8013a34:	00db      	lsls	r3, r3, #3
 8013a36:	440b      	add	r3, r1
 8013a38:	3312      	adds	r3, #18
 8013a3a:	881b      	ldrh	r3, [r3, #0]
 8013a3c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013a3e:	8c3b      	ldrh	r3, [r7, #32]
 8013a40:	3301      	adds	r3, #1
 8013a42:	b29b      	uxth	r3, r3
 8013a44:	843b      	strh	r3, [r7, #32]
 8013a46:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013a4a:	2b09      	cmp	r3, #9
 8013a4c:	f77f af4c 	ble.w	80138e8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013a50:	7afb      	ldrb	r3, [r7, #11]
 8013a52:	f003 0302 	and.w	r3, r3, #2
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d108      	bne.n	8013a6c <etharp_find_entry+0x1b8>
 8013a5a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013a5e:	2b0a      	cmp	r3, #10
 8013a60:	d107      	bne.n	8013a72 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013a62:	7afb      	ldrb	r3, [r7, #11]
 8013a64:	f003 0301 	and.w	r3, r3, #1
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d102      	bne.n	8013a72 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8013a70:	e085      	b.n	8013b7e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013a72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013a76:	2b09      	cmp	r3, #9
 8013a78:	dc02      	bgt.n	8013a80 <etharp_find_entry+0x1cc>
    i = empty;
 8013a7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013a7c:	843b      	strh	r3, [r7, #32]
 8013a7e:	e039      	b.n	8013af4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013a80:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8013a84:	2b09      	cmp	r3, #9
 8013a86:	dc14      	bgt.n	8013ab2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013a88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013a8a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013a8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a90:	493d      	ldr	r1, [pc, #244]	@ (8013b88 <etharp_find_entry+0x2d4>)
 8013a92:	4613      	mov	r3, r2
 8013a94:	005b      	lsls	r3, r3, #1
 8013a96:	4413      	add	r3, r2
 8013a98:	00db      	lsls	r3, r3, #3
 8013a9a:	440b      	add	r3, r1
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d018      	beq.n	8013ad4 <etharp_find_entry+0x220>
 8013aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8013b8c <etharp_find_entry+0x2d8>)
 8013aa4:	f240 126d 	movw	r2, #365	@ 0x16d
 8013aa8:	493b      	ldr	r1, [pc, #236]	@ (8013b98 <etharp_find_entry+0x2e4>)
 8013aaa:	483a      	ldr	r0, [pc, #232]	@ (8013b94 <etharp_find_entry+0x2e0>)
 8013aac:	f002 fb06 	bl	80160bc <iprintf>
 8013ab0:	e010      	b.n	8013ad4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013ab2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013ab6:	2b09      	cmp	r3, #9
 8013ab8:	dc02      	bgt.n	8013ac0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013aba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013abc:	843b      	strh	r3, [r7, #32]
 8013abe:	e009      	b.n	8013ad4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013ac0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013ac4:	2b09      	cmp	r3, #9
 8013ac6:	dc02      	bgt.n	8013ace <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013ac8:	8bfb      	ldrh	r3, [r7, #30]
 8013aca:	843b      	strh	r3, [r7, #32]
 8013acc:	e002      	b.n	8013ad4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013ace:	f04f 33ff 	mov.w	r3, #4294967295
 8013ad2:	e054      	b.n	8013b7e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013ad4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013ad8:	2b09      	cmp	r3, #9
 8013ada:	dd06      	ble.n	8013aea <etharp_find_entry+0x236>
 8013adc:	4b2b      	ldr	r3, [pc, #172]	@ (8013b8c <etharp_find_entry+0x2d8>)
 8013ade:	f240 127f 	movw	r2, #383	@ 0x17f
 8013ae2:	492e      	ldr	r1, [pc, #184]	@ (8013b9c <etharp_find_entry+0x2e8>)
 8013ae4:	482b      	ldr	r0, [pc, #172]	@ (8013b94 <etharp_find_entry+0x2e0>)
 8013ae6:	f002 fae9 	bl	80160bc <iprintf>
    etharp_free_entry(i);
 8013aea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013aee:	4618      	mov	r0, r3
 8013af0:	f7ff fe06 	bl	8013700 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013af4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013af8:	2b09      	cmp	r3, #9
 8013afa:	dd06      	ble.n	8013b0a <etharp_find_entry+0x256>
 8013afc:	4b23      	ldr	r3, [pc, #140]	@ (8013b8c <etharp_find_entry+0x2d8>)
 8013afe:	f240 1283 	movw	r2, #387	@ 0x183
 8013b02:	4926      	ldr	r1, [pc, #152]	@ (8013b9c <etharp_find_entry+0x2e8>)
 8013b04:	4823      	ldr	r0, [pc, #140]	@ (8013b94 <etharp_find_entry+0x2e0>)
 8013b06:	f002 fad9 	bl	80160bc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013b0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b0e:	491e      	ldr	r1, [pc, #120]	@ (8013b88 <etharp_find_entry+0x2d4>)
 8013b10:	4613      	mov	r3, r2
 8013b12:	005b      	lsls	r3, r3, #1
 8013b14:	4413      	add	r3, r2
 8013b16:	00db      	lsls	r3, r3, #3
 8013b18:	440b      	add	r3, r1
 8013b1a:	3314      	adds	r3, #20
 8013b1c:	781b      	ldrb	r3, [r3, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d006      	beq.n	8013b30 <etharp_find_entry+0x27c>
 8013b22:	4b1a      	ldr	r3, [pc, #104]	@ (8013b8c <etharp_find_entry+0x2d8>)
 8013b24:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8013b28:	491d      	ldr	r1, [pc, #116]	@ (8013ba0 <etharp_find_entry+0x2ec>)
 8013b2a:	481a      	ldr	r0, [pc, #104]	@ (8013b94 <etharp_find_entry+0x2e0>)
 8013b2c:	f002 fac6 	bl	80160bc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d00b      	beq.n	8013b4e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013b36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	6819      	ldr	r1, [r3, #0]
 8013b3e:	4812      	ldr	r0, [pc, #72]	@ (8013b88 <etharp_find_entry+0x2d4>)
 8013b40:	4613      	mov	r3, r2
 8013b42:	005b      	lsls	r3, r3, #1
 8013b44:	4413      	add	r3, r2
 8013b46:	00db      	lsls	r3, r3, #3
 8013b48:	4403      	add	r3, r0
 8013b4a:	3304      	adds	r3, #4
 8013b4c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013b4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b52:	490d      	ldr	r1, [pc, #52]	@ (8013b88 <etharp_find_entry+0x2d4>)
 8013b54:	4613      	mov	r3, r2
 8013b56:	005b      	lsls	r3, r3, #1
 8013b58:	4413      	add	r3, r2
 8013b5a:	00db      	lsls	r3, r3, #3
 8013b5c:	440b      	add	r3, r1
 8013b5e:	3312      	adds	r3, #18
 8013b60:	2200      	movs	r2, #0
 8013b62:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013b64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b68:	4907      	ldr	r1, [pc, #28]	@ (8013b88 <etharp_find_entry+0x2d4>)
 8013b6a:	4613      	mov	r3, r2
 8013b6c:	005b      	lsls	r3, r3, #1
 8013b6e:	4413      	add	r3, r2
 8013b70:	00db      	lsls	r3, r3, #3
 8013b72:	440b      	add	r3, r1
 8013b74:	3308      	adds	r3, #8
 8013b76:	687a      	ldr	r2, [r7, #4]
 8013b78:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013b7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013b7e:	4618      	mov	r0, r3
 8013b80:	3728      	adds	r7, #40	@ 0x28
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd80      	pop	{r7, pc}
 8013b86:	bf00      	nop
 8013b88:	2400ca2c 	.word	0x2400ca2c
 8013b8c:	080199e0 	.word	0x080199e0
 8013b90:	08019a18 	.word	0x08019a18
 8013b94:	08019a58 	.word	0x08019a58
 8013b98:	08019a80 	.word	0x08019a80
 8013b9c:	08019a98 	.word	0x08019a98
 8013ba0:	08019aac 	.word	0x08019aac

08013ba4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b088      	sub	sp, #32
 8013ba8:	af02      	add	r7, sp, #8
 8013baa:	60f8      	str	r0, [r7, #12]
 8013bac:	60b9      	str	r1, [r7, #8]
 8013bae:	607a      	str	r2, [r7, #4]
 8013bb0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013bb8:	2b06      	cmp	r3, #6
 8013bba:	d006      	beq.n	8013bca <etharp_update_arp_entry+0x26>
 8013bbc:	4b48      	ldr	r3, [pc, #288]	@ (8013ce0 <etharp_update_arp_entry+0x13c>)
 8013bbe:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8013bc2:	4948      	ldr	r1, [pc, #288]	@ (8013ce4 <etharp_update_arp_entry+0x140>)
 8013bc4:	4848      	ldr	r0, [pc, #288]	@ (8013ce8 <etharp_update_arp_entry+0x144>)
 8013bc6:	f002 fa79 	bl	80160bc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013bca:	68bb      	ldr	r3, [r7, #8]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d012      	beq.n	8013bf6 <etharp_update_arp_entry+0x52>
 8013bd0:	68bb      	ldr	r3, [r7, #8]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d00e      	beq.n	8013bf6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013bd8:	68bb      	ldr	r3, [r7, #8]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	68f9      	ldr	r1, [r7, #12]
 8013bde:	4618      	mov	r0, r3
 8013be0:	f001 f924 	bl	8014e2c <ip4_addr_isbroadcast_u32>
 8013be4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d105      	bne.n	8013bf6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013bf2:	2be0      	cmp	r3, #224	@ 0xe0
 8013bf4:	d102      	bne.n	8013bfc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013bf6:	f06f 030f 	mvn.w	r3, #15
 8013bfa:	e06c      	b.n	8013cd6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013bfc:	78fb      	ldrb	r3, [r7, #3]
 8013bfe:	68fa      	ldr	r2, [r7, #12]
 8013c00:	4619      	mov	r1, r3
 8013c02:	68b8      	ldr	r0, [r7, #8]
 8013c04:	f7ff fe56 	bl	80138b4 <etharp_find_entry>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013c0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	da02      	bge.n	8013c1a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013c14:	8afb      	ldrh	r3, [r7, #22]
 8013c16:	b25b      	sxtb	r3, r3
 8013c18:	e05d      	b.n	8013cd6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013c1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c1e:	4933      	ldr	r1, [pc, #204]	@ (8013cec <etharp_update_arp_entry+0x148>)
 8013c20:	4613      	mov	r3, r2
 8013c22:	005b      	lsls	r3, r3, #1
 8013c24:	4413      	add	r3, r2
 8013c26:	00db      	lsls	r3, r3, #3
 8013c28:	440b      	add	r3, r1
 8013c2a:	3314      	adds	r3, #20
 8013c2c:	2202      	movs	r2, #2
 8013c2e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013c30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c34:	492d      	ldr	r1, [pc, #180]	@ (8013cec <etharp_update_arp_entry+0x148>)
 8013c36:	4613      	mov	r3, r2
 8013c38:	005b      	lsls	r3, r3, #1
 8013c3a:	4413      	add	r3, r2
 8013c3c:	00db      	lsls	r3, r3, #3
 8013c3e:	440b      	add	r3, r1
 8013c40:	3308      	adds	r3, #8
 8013c42:	68fa      	ldr	r2, [r7, #12]
 8013c44:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013c46:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c4a:	4613      	mov	r3, r2
 8013c4c:	005b      	lsls	r3, r3, #1
 8013c4e:	4413      	add	r3, r2
 8013c50:	00db      	lsls	r3, r3, #3
 8013c52:	3308      	adds	r3, #8
 8013c54:	4a25      	ldr	r2, [pc, #148]	@ (8013cec <etharp_update_arp_entry+0x148>)
 8013c56:	4413      	add	r3, r2
 8013c58:	3304      	adds	r3, #4
 8013c5a:	2206      	movs	r2, #6
 8013c5c:	6879      	ldr	r1, [r7, #4]
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f002 fb63 	bl	801632a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013c64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c68:	4920      	ldr	r1, [pc, #128]	@ (8013cec <etharp_update_arp_entry+0x148>)
 8013c6a:	4613      	mov	r3, r2
 8013c6c:	005b      	lsls	r3, r3, #1
 8013c6e:	4413      	add	r3, r2
 8013c70:	00db      	lsls	r3, r3, #3
 8013c72:	440b      	add	r3, r1
 8013c74:	3312      	adds	r3, #18
 8013c76:	2200      	movs	r2, #0
 8013c78:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013c7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c7e:	491b      	ldr	r1, [pc, #108]	@ (8013cec <etharp_update_arp_entry+0x148>)
 8013c80:	4613      	mov	r3, r2
 8013c82:	005b      	lsls	r3, r3, #1
 8013c84:	4413      	add	r3, r2
 8013c86:	00db      	lsls	r3, r3, #3
 8013c88:	440b      	add	r3, r1
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d021      	beq.n	8013cd4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013c90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c94:	4915      	ldr	r1, [pc, #84]	@ (8013cec <etharp_update_arp_entry+0x148>)
 8013c96:	4613      	mov	r3, r2
 8013c98:	005b      	lsls	r3, r3, #1
 8013c9a:	4413      	add	r3, r2
 8013c9c:	00db      	lsls	r3, r3, #3
 8013c9e:	440b      	add	r3, r1
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013ca4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ca8:	4910      	ldr	r1, [pc, #64]	@ (8013cec <etharp_update_arp_entry+0x148>)
 8013caa:	4613      	mov	r3, r2
 8013cac:	005b      	lsls	r3, r3, #1
 8013cae:	4413      	add	r3, r2
 8013cb0:	00db      	lsls	r3, r3, #3
 8013cb2:	440b      	add	r3, r1
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8013cbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013cc2:	9300      	str	r3, [sp, #0]
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	6939      	ldr	r1, [r7, #16]
 8013cc8:	68f8      	ldr	r0, [r7, #12]
 8013cca:	f001 ffbd 	bl	8015c48 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013cce:	6938      	ldr	r0, [r7, #16]
 8013cd0:	f7f9 fdea 	bl	800d8a8 <pbuf_free>
  }
  return ERR_OK;
 8013cd4:	2300      	movs	r3, #0
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	3718      	adds	r7, #24
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
 8013cde:	bf00      	nop
 8013ce0:	080199e0 	.word	0x080199e0
 8013ce4:	08019ad8 	.word	0x08019ad8
 8013ce8:	08019a58 	.word	0x08019a58
 8013cec:	2400ca2c 	.word	0x2400ca2c

08013cf0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b084      	sub	sp, #16
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	60fb      	str	r3, [r7, #12]
 8013cfc:	e01e      	b.n	8013d3c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013cfe:	4913      	ldr	r1, [pc, #76]	@ (8013d4c <etharp_cleanup_netif+0x5c>)
 8013d00:	68fa      	ldr	r2, [r7, #12]
 8013d02:	4613      	mov	r3, r2
 8013d04:	005b      	lsls	r3, r3, #1
 8013d06:	4413      	add	r3, r2
 8013d08:	00db      	lsls	r3, r3, #3
 8013d0a:	440b      	add	r3, r1
 8013d0c:	3314      	adds	r3, #20
 8013d0e:	781b      	ldrb	r3, [r3, #0]
 8013d10:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013d12:	7afb      	ldrb	r3, [r7, #11]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d00e      	beq.n	8013d36 <etharp_cleanup_netif+0x46>
 8013d18:	490c      	ldr	r1, [pc, #48]	@ (8013d4c <etharp_cleanup_netif+0x5c>)
 8013d1a:	68fa      	ldr	r2, [r7, #12]
 8013d1c:	4613      	mov	r3, r2
 8013d1e:	005b      	lsls	r3, r3, #1
 8013d20:	4413      	add	r3, r2
 8013d22:	00db      	lsls	r3, r3, #3
 8013d24:	440b      	add	r3, r1
 8013d26:	3308      	adds	r3, #8
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	687a      	ldr	r2, [r7, #4]
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	d102      	bne.n	8013d36 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013d30:	68f8      	ldr	r0, [r7, #12]
 8013d32:	f7ff fce5 	bl	8013700 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	3301      	adds	r3, #1
 8013d3a:	60fb      	str	r3, [r7, #12]
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	2b09      	cmp	r3, #9
 8013d40:	dddd      	ble.n	8013cfe <etharp_cleanup_netif+0xe>
    }
  }
}
 8013d42:	bf00      	nop
 8013d44:	bf00      	nop
 8013d46:	3710      	adds	r7, #16
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}
 8013d4c:	2400ca2c 	.word	0x2400ca2c

08013d50 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013d50:	b5b0      	push	{r4, r5, r7, lr}
 8013d52:	b08a      	sub	sp, #40	@ 0x28
 8013d54:	af04      	add	r7, sp, #16
 8013d56:	6078      	str	r0, [r7, #4]
 8013d58:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013d5a:	683b      	ldr	r3, [r7, #0]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d107      	bne.n	8013d70 <etharp_input+0x20>
 8013d60:	4b3d      	ldr	r3, [pc, #244]	@ (8013e58 <etharp_input+0x108>)
 8013d62:	f240 228a 	movw	r2, #650	@ 0x28a
 8013d66:	493d      	ldr	r1, [pc, #244]	@ (8013e5c <etharp_input+0x10c>)
 8013d68:	483d      	ldr	r0, [pc, #244]	@ (8013e60 <etharp_input+0x110>)
 8013d6a:	f002 f9a7 	bl	80160bc <iprintf>
 8013d6e:	e06f      	b.n	8013e50 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	685b      	ldr	r3, [r3, #4]
 8013d74:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013d76:	693b      	ldr	r3, [r7, #16]
 8013d78:	881b      	ldrh	r3, [r3, #0]
 8013d7a:	b29b      	uxth	r3, r3
 8013d7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013d80:	d10c      	bne.n	8013d9c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013d82:	693b      	ldr	r3, [r7, #16]
 8013d84:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013d86:	2b06      	cmp	r3, #6
 8013d88:	d108      	bne.n	8013d9c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013d8a:	693b      	ldr	r3, [r7, #16]
 8013d8c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013d8e:	2b04      	cmp	r3, #4
 8013d90:	d104      	bne.n	8013d9c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013d92:	693b      	ldr	r3, [r7, #16]
 8013d94:	885b      	ldrh	r3, [r3, #2]
 8013d96:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013d98:	2b08      	cmp	r3, #8
 8013d9a:	d003      	beq.n	8013da4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013d9c:	6878      	ldr	r0, [r7, #4]
 8013d9e:	f7f9 fd83 	bl	800d8a8 <pbuf_free>
    return;
 8013da2:	e055      	b.n	8013e50 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013da4:	693b      	ldr	r3, [r7, #16]
 8013da6:	330e      	adds	r3, #14
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013dac:	693b      	ldr	r3, [r7, #16]
 8013dae:	3318      	adds	r3, #24
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013db4:	683b      	ldr	r3, [r7, #0]
 8013db6:	3304      	adds	r3, #4
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d102      	bne.n	8013dc4 <etharp_input+0x74>
    for_us = 0;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	75fb      	strb	r3, [r7, #23]
 8013dc2:	e009      	b.n	8013dd8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013dc4:	68ba      	ldr	r2, [r7, #8]
 8013dc6:	683b      	ldr	r3, [r7, #0]
 8013dc8:	3304      	adds	r3, #4
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	429a      	cmp	r2, r3
 8013dce:	bf0c      	ite	eq
 8013dd0:	2301      	moveq	r3, #1
 8013dd2:	2300      	movne	r3, #0
 8013dd4:	b2db      	uxtb	r3, r3
 8013dd6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013dd8:	693b      	ldr	r3, [r7, #16]
 8013dda:	f103 0208 	add.w	r2, r3, #8
 8013dde:	7dfb      	ldrb	r3, [r7, #23]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d001      	beq.n	8013de8 <etharp_input+0x98>
 8013de4:	2301      	movs	r3, #1
 8013de6:	e000      	b.n	8013dea <etharp_input+0x9a>
 8013de8:	2302      	movs	r3, #2
 8013dea:	f107 010c 	add.w	r1, r7, #12
 8013dee:	6838      	ldr	r0, [r7, #0]
 8013df0:	f7ff fed8 	bl	8013ba4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013df4:	693b      	ldr	r3, [r7, #16]
 8013df6:	88db      	ldrh	r3, [r3, #6]
 8013df8:	b29b      	uxth	r3, r3
 8013dfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013dfe:	d003      	beq.n	8013e08 <etharp_input+0xb8>
 8013e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013e04:	d01e      	beq.n	8013e44 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013e06:	e020      	b.n	8013e4a <etharp_input+0xfa>
      if (for_us) {
 8013e08:	7dfb      	ldrb	r3, [r7, #23]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d01c      	beq.n	8013e48 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013e0e:	683b      	ldr	r3, [r7, #0]
 8013e10:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8013e14:	693b      	ldr	r3, [r7, #16]
 8013e16:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013e24:	693a      	ldr	r2, [r7, #16]
 8013e26:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013e28:	2102      	movs	r1, #2
 8013e2a:	9103      	str	r1, [sp, #12]
 8013e2c:	f107 010c 	add.w	r1, r7, #12
 8013e30:	9102      	str	r1, [sp, #8]
 8013e32:	9201      	str	r2, [sp, #4]
 8013e34:	9300      	str	r3, [sp, #0]
 8013e36:	462b      	mov	r3, r5
 8013e38:	4622      	mov	r2, r4
 8013e3a:	4601      	mov	r1, r0
 8013e3c:	6838      	ldr	r0, [r7, #0]
 8013e3e:	f000 faeb 	bl	8014418 <etharp_raw>
      break;
 8013e42:	e001      	b.n	8013e48 <etharp_input+0xf8>
      break;
 8013e44:	bf00      	nop
 8013e46:	e000      	b.n	8013e4a <etharp_input+0xfa>
      break;
 8013e48:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f7f9 fd2c 	bl	800d8a8 <pbuf_free>
}
 8013e50:	3718      	adds	r7, #24
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bdb0      	pop	{r4, r5, r7, pc}
 8013e56:	bf00      	nop
 8013e58:	080199e0 	.word	0x080199e0
 8013e5c:	08019b30 	.word	0x08019b30
 8013e60:	08019a58 	.word	0x08019a58

08013e64 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b086      	sub	sp, #24
 8013e68:	af02      	add	r7, sp, #8
 8013e6a:	60f8      	str	r0, [r7, #12]
 8013e6c:	60b9      	str	r1, [r7, #8]
 8013e6e:	4613      	mov	r3, r2
 8013e70:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013e72:	79fa      	ldrb	r2, [r7, #7]
 8013e74:	4944      	ldr	r1, [pc, #272]	@ (8013f88 <etharp_output_to_arp_index+0x124>)
 8013e76:	4613      	mov	r3, r2
 8013e78:	005b      	lsls	r3, r3, #1
 8013e7a:	4413      	add	r3, r2
 8013e7c:	00db      	lsls	r3, r3, #3
 8013e7e:	440b      	add	r3, r1
 8013e80:	3314      	adds	r3, #20
 8013e82:	781b      	ldrb	r3, [r3, #0]
 8013e84:	2b01      	cmp	r3, #1
 8013e86:	d806      	bhi.n	8013e96 <etharp_output_to_arp_index+0x32>
 8013e88:	4b40      	ldr	r3, [pc, #256]	@ (8013f8c <etharp_output_to_arp_index+0x128>)
 8013e8a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8013e8e:	4940      	ldr	r1, [pc, #256]	@ (8013f90 <etharp_output_to_arp_index+0x12c>)
 8013e90:	4840      	ldr	r0, [pc, #256]	@ (8013f94 <etharp_output_to_arp_index+0x130>)
 8013e92:	f002 f913 	bl	80160bc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013e96:	79fa      	ldrb	r2, [r7, #7]
 8013e98:	493b      	ldr	r1, [pc, #236]	@ (8013f88 <etharp_output_to_arp_index+0x124>)
 8013e9a:	4613      	mov	r3, r2
 8013e9c:	005b      	lsls	r3, r3, #1
 8013e9e:	4413      	add	r3, r2
 8013ea0:	00db      	lsls	r3, r3, #3
 8013ea2:	440b      	add	r3, r1
 8013ea4:	3314      	adds	r3, #20
 8013ea6:	781b      	ldrb	r3, [r3, #0]
 8013ea8:	2b02      	cmp	r3, #2
 8013eaa:	d153      	bne.n	8013f54 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013eac:	79fa      	ldrb	r2, [r7, #7]
 8013eae:	4936      	ldr	r1, [pc, #216]	@ (8013f88 <etharp_output_to_arp_index+0x124>)
 8013eb0:	4613      	mov	r3, r2
 8013eb2:	005b      	lsls	r3, r3, #1
 8013eb4:	4413      	add	r3, r2
 8013eb6:	00db      	lsls	r3, r3, #3
 8013eb8:	440b      	add	r3, r1
 8013eba:	3312      	adds	r3, #18
 8013ebc:	881b      	ldrh	r3, [r3, #0]
 8013ebe:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8013ec2:	d919      	bls.n	8013ef8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013ec4:	79fa      	ldrb	r2, [r7, #7]
 8013ec6:	4613      	mov	r3, r2
 8013ec8:	005b      	lsls	r3, r3, #1
 8013eca:	4413      	add	r3, r2
 8013ecc:	00db      	lsls	r3, r3, #3
 8013ece:	4a2e      	ldr	r2, [pc, #184]	@ (8013f88 <etharp_output_to_arp_index+0x124>)
 8013ed0:	4413      	add	r3, r2
 8013ed2:	3304      	adds	r3, #4
 8013ed4:	4619      	mov	r1, r3
 8013ed6:	68f8      	ldr	r0, [r7, #12]
 8013ed8:	f000 fb4c 	bl	8014574 <etharp_request>
 8013edc:	4603      	mov	r3, r0
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d138      	bne.n	8013f54 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013ee2:	79fa      	ldrb	r2, [r7, #7]
 8013ee4:	4928      	ldr	r1, [pc, #160]	@ (8013f88 <etharp_output_to_arp_index+0x124>)
 8013ee6:	4613      	mov	r3, r2
 8013ee8:	005b      	lsls	r3, r3, #1
 8013eea:	4413      	add	r3, r2
 8013eec:	00db      	lsls	r3, r3, #3
 8013eee:	440b      	add	r3, r1
 8013ef0:	3314      	adds	r3, #20
 8013ef2:	2203      	movs	r2, #3
 8013ef4:	701a      	strb	r2, [r3, #0]
 8013ef6:	e02d      	b.n	8013f54 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013ef8:	79fa      	ldrb	r2, [r7, #7]
 8013efa:	4923      	ldr	r1, [pc, #140]	@ (8013f88 <etharp_output_to_arp_index+0x124>)
 8013efc:	4613      	mov	r3, r2
 8013efe:	005b      	lsls	r3, r3, #1
 8013f00:	4413      	add	r3, r2
 8013f02:	00db      	lsls	r3, r3, #3
 8013f04:	440b      	add	r3, r1
 8013f06:	3312      	adds	r3, #18
 8013f08:	881b      	ldrh	r3, [r3, #0]
 8013f0a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8013f0e:	d321      	bcc.n	8013f54 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013f10:	79fa      	ldrb	r2, [r7, #7]
 8013f12:	4613      	mov	r3, r2
 8013f14:	005b      	lsls	r3, r3, #1
 8013f16:	4413      	add	r3, r2
 8013f18:	00db      	lsls	r3, r3, #3
 8013f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8013f88 <etharp_output_to_arp_index+0x124>)
 8013f1c:	4413      	add	r3, r2
 8013f1e:	1d19      	adds	r1, r3, #4
 8013f20:	79fa      	ldrb	r2, [r7, #7]
 8013f22:	4613      	mov	r3, r2
 8013f24:	005b      	lsls	r3, r3, #1
 8013f26:	4413      	add	r3, r2
 8013f28:	00db      	lsls	r3, r3, #3
 8013f2a:	3308      	adds	r3, #8
 8013f2c:	4a16      	ldr	r2, [pc, #88]	@ (8013f88 <etharp_output_to_arp_index+0x124>)
 8013f2e:	4413      	add	r3, r2
 8013f30:	3304      	adds	r3, #4
 8013f32:	461a      	mov	r2, r3
 8013f34:	68f8      	ldr	r0, [r7, #12]
 8013f36:	f000 fafb 	bl	8014530 <etharp_request_dst>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d109      	bne.n	8013f54 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013f40:	79fa      	ldrb	r2, [r7, #7]
 8013f42:	4911      	ldr	r1, [pc, #68]	@ (8013f88 <etharp_output_to_arp_index+0x124>)
 8013f44:	4613      	mov	r3, r2
 8013f46:	005b      	lsls	r3, r3, #1
 8013f48:	4413      	add	r3, r2
 8013f4a:	00db      	lsls	r3, r3, #3
 8013f4c:	440b      	add	r3, r1
 8013f4e:	3314      	adds	r3, #20
 8013f50:	2203      	movs	r2, #3
 8013f52:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8013f5a:	79fa      	ldrb	r2, [r7, #7]
 8013f5c:	4613      	mov	r3, r2
 8013f5e:	005b      	lsls	r3, r3, #1
 8013f60:	4413      	add	r3, r2
 8013f62:	00db      	lsls	r3, r3, #3
 8013f64:	3308      	adds	r3, #8
 8013f66:	4a08      	ldr	r2, [pc, #32]	@ (8013f88 <etharp_output_to_arp_index+0x124>)
 8013f68:	4413      	add	r3, r2
 8013f6a:	3304      	adds	r3, #4
 8013f6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013f70:	9200      	str	r2, [sp, #0]
 8013f72:	460a      	mov	r2, r1
 8013f74:	68b9      	ldr	r1, [r7, #8]
 8013f76:	68f8      	ldr	r0, [r7, #12]
 8013f78:	f001 fe66 	bl	8015c48 <ethernet_output>
 8013f7c:	4603      	mov	r3, r0
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	3710      	adds	r7, #16
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bd80      	pop	{r7, pc}
 8013f86:	bf00      	nop
 8013f88:	2400ca2c 	.word	0x2400ca2c
 8013f8c:	080199e0 	.word	0x080199e0
 8013f90:	08019b50 	.word	0x08019b50
 8013f94:	08019a58 	.word	0x08019a58

08013f98 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b08a      	sub	sp, #40	@ 0x28
 8013f9c:	af02      	add	r7, sp, #8
 8013f9e:	60f8      	str	r0, [r7, #12]
 8013fa0:	60b9      	str	r1, [r7, #8]
 8013fa2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d106      	bne.n	8013fbc <etharp_output+0x24>
 8013fae:	4b73      	ldr	r3, [pc, #460]	@ (801417c <etharp_output+0x1e4>)
 8013fb0:	f240 321e 	movw	r2, #798	@ 0x31e
 8013fb4:	4972      	ldr	r1, [pc, #456]	@ (8014180 <etharp_output+0x1e8>)
 8013fb6:	4873      	ldr	r0, [pc, #460]	@ (8014184 <etharp_output+0x1ec>)
 8013fb8:	f002 f880 	bl	80160bc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013fbc:	68bb      	ldr	r3, [r7, #8]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d106      	bne.n	8013fd0 <etharp_output+0x38>
 8013fc2:	4b6e      	ldr	r3, [pc, #440]	@ (801417c <etharp_output+0x1e4>)
 8013fc4:	f240 321f 	movw	r2, #799	@ 0x31f
 8013fc8:	496f      	ldr	r1, [pc, #444]	@ (8014188 <etharp_output+0x1f0>)
 8013fca:	486e      	ldr	r0, [pc, #440]	@ (8014184 <etharp_output+0x1ec>)
 8013fcc:	f002 f876 	bl	80160bc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d106      	bne.n	8013fe4 <etharp_output+0x4c>
 8013fd6:	4b69      	ldr	r3, [pc, #420]	@ (801417c <etharp_output+0x1e4>)
 8013fd8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8013fdc:	496b      	ldr	r1, [pc, #428]	@ (801418c <etharp_output+0x1f4>)
 8013fde:	4869      	ldr	r0, [pc, #420]	@ (8014184 <etharp_output+0x1ec>)
 8013fe0:	f002 f86c 	bl	80160bc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	68f9      	ldr	r1, [r7, #12]
 8013fea:	4618      	mov	r0, r3
 8013fec:	f000 ff1e 	bl	8014e2c <ip4_addr_isbroadcast_u32>
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d002      	beq.n	8013ffc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013ff6:	4b66      	ldr	r3, [pc, #408]	@ (8014190 <etharp_output+0x1f8>)
 8013ff8:	61fb      	str	r3, [r7, #28]
 8013ffa:	e0af      	b.n	801415c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014004:	2be0      	cmp	r3, #224	@ 0xe0
 8014006:	d118      	bne.n	801403a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014008:	2301      	movs	r3, #1
 801400a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801400c:	2300      	movs	r3, #0
 801400e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014010:	235e      	movs	r3, #94	@ 0x5e
 8014012:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	3301      	adds	r3, #1
 8014018:	781b      	ldrb	r3, [r3, #0]
 801401a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801401e:	b2db      	uxtb	r3, r3
 8014020:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	3302      	adds	r3, #2
 8014026:	781b      	ldrb	r3, [r3, #0]
 8014028:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	3303      	adds	r3, #3
 801402e:	781b      	ldrb	r3, [r3, #0]
 8014030:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014032:	f107 0310 	add.w	r3, r7, #16
 8014036:	61fb      	str	r3, [r7, #28]
 8014038:	e090      	b.n	801415c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	681a      	ldr	r2, [r3, #0]
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	3304      	adds	r3, #4
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	405a      	eors	r2, r3
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	3308      	adds	r3, #8
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	4013      	ands	r3, r2
 801404e:	2b00      	cmp	r3, #0
 8014050:	d012      	beq.n	8014078 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014058:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801405c:	4293      	cmp	r3, r2
 801405e:	d00b      	beq.n	8014078 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	330c      	adds	r3, #12
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d003      	beq.n	8014072 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	330c      	adds	r3, #12
 801406e:	61bb      	str	r3, [r7, #24]
 8014070:	e002      	b.n	8014078 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014072:	f06f 0303 	mvn.w	r3, #3
 8014076:	e07d      	b.n	8014174 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014078:	4b46      	ldr	r3, [pc, #280]	@ (8014194 <etharp_output+0x1fc>)
 801407a:	781b      	ldrb	r3, [r3, #0]
 801407c:	4619      	mov	r1, r3
 801407e:	4a46      	ldr	r2, [pc, #280]	@ (8014198 <etharp_output+0x200>)
 8014080:	460b      	mov	r3, r1
 8014082:	005b      	lsls	r3, r3, #1
 8014084:	440b      	add	r3, r1
 8014086:	00db      	lsls	r3, r3, #3
 8014088:	4413      	add	r3, r2
 801408a:	3314      	adds	r3, #20
 801408c:	781b      	ldrb	r3, [r3, #0]
 801408e:	2b01      	cmp	r3, #1
 8014090:	d925      	bls.n	80140de <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014092:	4b40      	ldr	r3, [pc, #256]	@ (8014194 <etharp_output+0x1fc>)
 8014094:	781b      	ldrb	r3, [r3, #0]
 8014096:	4619      	mov	r1, r3
 8014098:	4a3f      	ldr	r2, [pc, #252]	@ (8014198 <etharp_output+0x200>)
 801409a:	460b      	mov	r3, r1
 801409c:	005b      	lsls	r3, r3, #1
 801409e:	440b      	add	r3, r1
 80140a0:	00db      	lsls	r3, r3, #3
 80140a2:	4413      	add	r3, r2
 80140a4:	3308      	adds	r3, #8
 80140a6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80140a8:	68fa      	ldr	r2, [r7, #12]
 80140aa:	429a      	cmp	r2, r3
 80140ac:	d117      	bne.n	80140de <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80140ae:	69bb      	ldr	r3, [r7, #24]
 80140b0:	681a      	ldr	r2, [r3, #0]
 80140b2:	4b38      	ldr	r3, [pc, #224]	@ (8014194 <etharp_output+0x1fc>)
 80140b4:	781b      	ldrb	r3, [r3, #0]
 80140b6:	4618      	mov	r0, r3
 80140b8:	4937      	ldr	r1, [pc, #220]	@ (8014198 <etharp_output+0x200>)
 80140ba:	4603      	mov	r3, r0
 80140bc:	005b      	lsls	r3, r3, #1
 80140be:	4403      	add	r3, r0
 80140c0:	00db      	lsls	r3, r3, #3
 80140c2:	440b      	add	r3, r1
 80140c4:	3304      	adds	r3, #4
 80140c6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80140c8:	429a      	cmp	r2, r3
 80140ca:	d108      	bne.n	80140de <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80140cc:	4b31      	ldr	r3, [pc, #196]	@ (8014194 <etharp_output+0x1fc>)
 80140ce:	781b      	ldrb	r3, [r3, #0]
 80140d0:	461a      	mov	r2, r3
 80140d2:	68b9      	ldr	r1, [r7, #8]
 80140d4:	68f8      	ldr	r0, [r7, #12]
 80140d6:	f7ff fec5 	bl	8013e64 <etharp_output_to_arp_index>
 80140da:	4603      	mov	r3, r0
 80140dc:	e04a      	b.n	8014174 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80140de:	2300      	movs	r3, #0
 80140e0:	75fb      	strb	r3, [r7, #23]
 80140e2:	e031      	b.n	8014148 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80140e4:	7dfa      	ldrb	r2, [r7, #23]
 80140e6:	492c      	ldr	r1, [pc, #176]	@ (8014198 <etharp_output+0x200>)
 80140e8:	4613      	mov	r3, r2
 80140ea:	005b      	lsls	r3, r3, #1
 80140ec:	4413      	add	r3, r2
 80140ee:	00db      	lsls	r3, r3, #3
 80140f0:	440b      	add	r3, r1
 80140f2:	3314      	adds	r3, #20
 80140f4:	781b      	ldrb	r3, [r3, #0]
 80140f6:	2b01      	cmp	r3, #1
 80140f8:	d923      	bls.n	8014142 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80140fa:	7dfa      	ldrb	r2, [r7, #23]
 80140fc:	4926      	ldr	r1, [pc, #152]	@ (8014198 <etharp_output+0x200>)
 80140fe:	4613      	mov	r3, r2
 8014100:	005b      	lsls	r3, r3, #1
 8014102:	4413      	add	r3, r2
 8014104:	00db      	lsls	r3, r3, #3
 8014106:	440b      	add	r3, r1
 8014108:	3308      	adds	r3, #8
 801410a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801410c:	68fa      	ldr	r2, [r7, #12]
 801410e:	429a      	cmp	r2, r3
 8014110:	d117      	bne.n	8014142 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014112:	69bb      	ldr	r3, [r7, #24]
 8014114:	6819      	ldr	r1, [r3, #0]
 8014116:	7dfa      	ldrb	r2, [r7, #23]
 8014118:	481f      	ldr	r0, [pc, #124]	@ (8014198 <etharp_output+0x200>)
 801411a:	4613      	mov	r3, r2
 801411c:	005b      	lsls	r3, r3, #1
 801411e:	4413      	add	r3, r2
 8014120:	00db      	lsls	r3, r3, #3
 8014122:	4403      	add	r3, r0
 8014124:	3304      	adds	r3, #4
 8014126:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014128:	4299      	cmp	r1, r3
 801412a:	d10a      	bne.n	8014142 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801412c:	4a19      	ldr	r2, [pc, #100]	@ (8014194 <etharp_output+0x1fc>)
 801412e:	7dfb      	ldrb	r3, [r7, #23]
 8014130:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014132:	7dfb      	ldrb	r3, [r7, #23]
 8014134:	461a      	mov	r2, r3
 8014136:	68b9      	ldr	r1, [r7, #8]
 8014138:	68f8      	ldr	r0, [r7, #12]
 801413a:	f7ff fe93 	bl	8013e64 <etharp_output_to_arp_index>
 801413e:	4603      	mov	r3, r0
 8014140:	e018      	b.n	8014174 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014142:	7dfb      	ldrb	r3, [r7, #23]
 8014144:	3301      	adds	r3, #1
 8014146:	75fb      	strb	r3, [r7, #23]
 8014148:	7dfb      	ldrb	r3, [r7, #23]
 801414a:	2b09      	cmp	r3, #9
 801414c:	d9ca      	bls.n	80140e4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801414e:	68ba      	ldr	r2, [r7, #8]
 8014150:	69b9      	ldr	r1, [r7, #24]
 8014152:	68f8      	ldr	r0, [r7, #12]
 8014154:	f000 f822 	bl	801419c <etharp_query>
 8014158:	4603      	mov	r3, r0
 801415a:	e00b      	b.n	8014174 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014162:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014166:	9300      	str	r3, [sp, #0]
 8014168:	69fb      	ldr	r3, [r7, #28]
 801416a:	68b9      	ldr	r1, [r7, #8]
 801416c:	68f8      	ldr	r0, [r7, #12]
 801416e:	f001 fd6b 	bl	8015c48 <ethernet_output>
 8014172:	4603      	mov	r3, r0
}
 8014174:	4618      	mov	r0, r3
 8014176:	3720      	adds	r7, #32
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}
 801417c:	080199e0 	.word	0x080199e0
 8014180:	08019b30 	.word	0x08019b30
 8014184:	08019a58 	.word	0x08019a58
 8014188:	08019b80 	.word	0x08019b80
 801418c:	08019b20 	.word	0x08019b20
 8014190:	0801a1f8 	.word	0x0801a1f8
 8014194:	2400cb1c 	.word	0x2400cb1c
 8014198:	2400ca2c 	.word	0x2400ca2c

0801419c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b08c      	sub	sp, #48	@ 0x30
 80141a0:	af02      	add	r7, sp, #8
 80141a2:	60f8      	str	r0, [r7, #12]
 80141a4:	60b9      	str	r1, [r7, #8]
 80141a6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	3326      	adds	r3, #38	@ 0x26
 80141ac:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80141ae:	23ff      	movs	r3, #255	@ 0xff
 80141b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80141b4:	2300      	movs	r3, #0
 80141b6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	68f9      	ldr	r1, [r7, #12]
 80141be:	4618      	mov	r0, r3
 80141c0:	f000 fe34 	bl	8014e2c <ip4_addr_isbroadcast_u32>
 80141c4:	4603      	mov	r3, r0
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d10c      	bne.n	80141e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80141d2:	2be0      	cmp	r3, #224	@ 0xe0
 80141d4:	d006      	beq.n	80141e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d003      	beq.n	80141e4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80141dc:	68bb      	ldr	r3, [r7, #8]
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d102      	bne.n	80141ea <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80141e4:	f06f 030f 	mvn.w	r3, #15
 80141e8:	e101      	b.n	80143ee <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80141ea:	68fa      	ldr	r2, [r7, #12]
 80141ec:	2101      	movs	r1, #1
 80141ee:	68b8      	ldr	r0, [r7, #8]
 80141f0:	f7ff fb60 	bl	80138b4 <etharp_find_entry>
 80141f4:	4603      	mov	r3, r0
 80141f6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80141f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	da02      	bge.n	8014206 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014200:	8a7b      	ldrh	r3, [r7, #18]
 8014202:	b25b      	sxtb	r3, r3
 8014204:	e0f3      	b.n	80143ee <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014206:	8a7b      	ldrh	r3, [r7, #18]
 8014208:	2b7e      	cmp	r3, #126	@ 0x7e
 801420a:	d906      	bls.n	801421a <etharp_query+0x7e>
 801420c:	4b7a      	ldr	r3, [pc, #488]	@ (80143f8 <etharp_query+0x25c>)
 801420e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8014212:	497a      	ldr	r1, [pc, #488]	@ (80143fc <etharp_query+0x260>)
 8014214:	487a      	ldr	r0, [pc, #488]	@ (8014400 <etharp_query+0x264>)
 8014216:	f001 ff51 	bl	80160bc <iprintf>
  i = (netif_addr_idx_t)i_err;
 801421a:	8a7b      	ldrh	r3, [r7, #18]
 801421c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801421e:	7c7a      	ldrb	r2, [r7, #17]
 8014220:	4978      	ldr	r1, [pc, #480]	@ (8014404 <etharp_query+0x268>)
 8014222:	4613      	mov	r3, r2
 8014224:	005b      	lsls	r3, r3, #1
 8014226:	4413      	add	r3, r2
 8014228:	00db      	lsls	r3, r3, #3
 801422a:	440b      	add	r3, r1
 801422c:	3314      	adds	r3, #20
 801422e:	781b      	ldrb	r3, [r3, #0]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d115      	bne.n	8014260 <etharp_query+0xc4>
    is_new_entry = 1;
 8014234:	2301      	movs	r3, #1
 8014236:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014238:	7c7a      	ldrb	r2, [r7, #17]
 801423a:	4972      	ldr	r1, [pc, #456]	@ (8014404 <etharp_query+0x268>)
 801423c:	4613      	mov	r3, r2
 801423e:	005b      	lsls	r3, r3, #1
 8014240:	4413      	add	r3, r2
 8014242:	00db      	lsls	r3, r3, #3
 8014244:	440b      	add	r3, r1
 8014246:	3314      	adds	r3, #20
 8014248:	2201      	movs	r2, #1
 801424a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801424c:	7c7a      	ldrb	r2, [r7, #17]
 801424e:	496d      	ldr	r1, [pc, #436]	@ (8014404 <etharp_query+0x268>)
 8014250:	4613      	mov	r3, r2
 8014252:	005b      	lsls	r3, r3, #1
 8014254:	4413      	add	r3, r2
 8014256:	00db      	lsls	r3, r3, #3
 8014258:	440b      	add	r3, r1
 801425a:	3308      	adds	r3, #8
 801425c:	68fa      	ldr	r2, [r7, #12]
 801425e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014260:	7c7a      	ldrb	r2, [r7, #17]
 8014262:	4968      	ldr	r1, [pc, #416]	@ (8014404 <etharp_query+0x268>)
 8014264:	4613      	mov	r3, r2
 8014266:	005b      	lsls	r3, r3, #1
 8014268:	4413      	add	r3, r2
 801426a:	00db      	lsls	r3, r3, #3
 801426c:	440b      	add	r3, r1
 801426e:	3314      	adds	r3, #20
 8014270:	781b      	ldrb	r3, [r3, #0]
 8014272:	2b01      	cmp	r3, #1
 8014274:	d011      	beq.n	801429a <etharp_query+0xfe>
 8014276:	7c7a      	ldrb	r2, [r7, #17]
 8014278:	4962      	ldr	r1, [pc, #392]	@ (8014404 <etharp_query+0x268>)
 801427a:	4613      	mov	r3, r2
 801427c:	005b      	lsls	r3, r3, #1
 801427e:	4413      	add	r3, r2
 8014280:	00db      	lsls	r3, r3, #3
 8014282:	440b      	add	r3, r1
 8014284:	3314      	adds	r3, #20
 8014286:	781b      	ldrb	r3, [r3, #0]
 8014288:	2b01      	cmp	r3, #1
 801428a:	d806      	bhi.n	801429a <etharp_query+0xfe>
 801428c:	4b5a      	ldr	r3, [pc, #360]	@ (80143f8 <etharp_query+0x25c>)
 801428e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8014292:	495d      	ldr	r1, [pc, #372]	@ (8014408 <etharp_query+0x26c>)
 8014294:	485a      	ldr	r0, [pc, #360]	@ (8014400 <etharp_query+0x264>)
 8014296:	f001 ff11 	bl	80160bc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801429a:	6a3b      	ldr	r3, [r7, #32]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d102      	bne.n	80142a6 <etharp_query+0x10a>
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d10c      	bne.n	80142c0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80142a6:	68b9      	ldr	r1, [r7, #8]
 80142a8:	68f8      	ldr	r0, [r7, #12]
 80142aa:	f000 f963 	bl	8014574 <etharp_request>
 80142ae:	4603      	mov	r3, r0
 80142b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d102      	bne.n	80142c0 <etharp_query+0x124>
      return result;
 80142ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80142be:	e096      	b.n	80143ee <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d106      	bne.n	80142d4 <etharp_query+0x138>
 80142c6:	4b4c      	ldr	r3, [pc, #304]	@ (80143f8 <etharp_query+0x25c>)
 80142c8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80142cc:	494f      	ldr	r1, [pc, #316]	@ (801440c <etharp_query+0x270>)
 80142ce:	484c      	ldr	r0, [pc, #304]	@ (8014400 <etharp_query+0x264>)
 80142d0:	f001 fef4 	bl	80160bc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80142d4:	7c7a      	ldrb	r2, [r7, #17]
 80142d6:	494b      	ldr	r1, [pc, #300]	@ (8014404 <etharp_query+0x268>)
 80142d8:	4613      	mov	r3, r2
 80142da:	005b      	lsls	r3, r3, #1
 80142dc:	4413      	add	r3, r2
 80142de:	00db      	lsls	r3, r3, #3
 80142e0:	440b      	add	r3, r1
 80142e2:	3314      	adds	r3, #20
 80142e4:	781b      	ldrb	r3, [r3, #0]
 80142e6:	2b01      	cmp	r3, #1
 80142e8:	d917      	bls.n	801431a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80142ea:	4a49      	ldr	r2, [pc, #292]	@ (8014410 <etharp_query+0x274>)
 80142ec:	7c7b      	ldrb	r3, [r7, #17]
 80142ee:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80142f0:	7c7a      	ldrb	r2, [r7, #17]
 80142f2:	4613      	mov	r3, r2
 80142f4:	005b      	lsls	r3, r3, #1
 80142f6:	4413      	add	r3, r2
 80142f8:	00db      	lsls	r3, r3, #3
 80142fa:	3308      	adds	r3, #8
 80142fc:	4a41      	ldr	r2, [pc, #260]	@ (8014404 <etharp_query+0x268>)
 80142fe:	4413      	add	r3, r2
 8014300:	3304      	adds	r3, #4
 8014302:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014306:	9200      	str	r2, [sp, #0]
 8014308:	697a      	ldr	r2, [r7, #20]
 801430a:	6879      	ldr	r1, [r7, #4]
 801430c:	68f8      	ldr	r0, [r7, #12]
 801430e:	f001 fc9b 	bl	8015c48 <ethernet_output>
 8014312:	4603      	mov	r3, r0
 8014314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014318:	e067      	b.n	80143ea <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801431a:	7c7a      	ldrb	r2, [r7, #17]
 801431c:	4939      	ldr	r1, [pc, #228]	@ (8014404 <etharp_query+0x268>)
 801431e:	4613      	mov	r3, r2
 8014320:	005b      	lsls	r3, r3, #1
 8014322:	4413      	add	r3, r2
 8014324:	00db      	lsls	r3, r3, #3
 8014326:	440b      	add	r3, r1
 8014328:	3314      	adds	r3, #20
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	2b01      	cmp	r3, #1
 801432e:	d15c      	bne.n	80143ea <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014330:	2300      	movs	r3, #0
 8014332:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014338:	e01c      	b.n	8014374 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801433a:	69fb      	ldr	r3, [r7, #28]
 801433c:	895a      	ldrh	r2, [r3, #10]
 801433e:	69fb      	ldr	r3, [r7, #28]
 8014340:	891b      	ldrh	r3, [r3, #8]
 8014342:	429a      	cmp	r2, r3
 8014344:	d10a      	bne.n	801435c <etharp_query+0x1c0>
 8014346:	69fb      	ldr	r3, [r7, #28]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d006      	beq.n	801435c <etharp_query+0x1c0>
 801434e:	4b2a      	ldr	r3, [pc, #168]	@ (80143f8 <etharp_query+0x25c>)
 8014350:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014354:	492f      	ldr	r1, [pc, #188]	@ (8014414 <etharp_query+0x278>)
 8014356:	482a      	ldr	r0, [pc, #168]	@ (8014400 <etharp_query+0x264>)
 8014358:	f001 feb0 	bl	80160bc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801435c:	69fb      	ldr	r3, [r7, #28]
 801435e:	7b1b      	ldrb	r3, [r3, #12]
 8014360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014364:	2b00      	cmp	r3, #0
 8014366:	d002      	beq.n	801436e <etharp_query+0x1d2>
        copy_needed = 1;
 8014368:	2301      	movs	r3, #1
 801436a:	61bb      	str	r3, [r7, #24]
        break;
 801436c:	e005      	b.n	801437a <etharp_query+0x1de>
      }
      p = p->next;
 801436e:	69fb      	ldr	r3, [r7, #28]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014374:	69fb      	ldr	r3, [r7, #28]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d1df      	bne.n	801433a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801437a:	69bb      	ldr	r3, [r7, #24]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d007      	beq.n	8014390 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014380:	687a      	ldr	r2, [r7, #4]
 8014382:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8014386:	200e      	movs	r0, #14
 8014388:	f7f9 fcf6 	bl	800dd78 <pbuf_clone>
 801438c:	61f8      	str	r0, [r7, #28]
 801438e:	e004      	b.n	801439a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014394:	69f8      	ldr	r0, [r7, #28]
 8014396:	f7f9 fb2d 	bl	800d9f4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801439a:	69fb      	ldr	r3, [r7, #28]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d021      	beq.n	80143e4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80143a0:	7c7a      	ldrb	r2, [r7, #17]
 80143a2:	4918      	ldr	r1, [pc, #96]	@ (8014404 <etharp_query+0x268>)
 80143a4:	4613      	mov	r3, r2
 80143a6:	005b      	lsls	r3, r3, #1
 80143a8:	4413      	add	r3, r2
 80143aa:	00db      	lsls	r3, r3, #3
 80143ac:	440b      	add	r3, r1
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d00a      	beq.n	80143ca <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80143b4:	7c7a      	ldrb	r2, [r7, #17]
 80143b6:	4913      	ldr	r1, [pc, #76]	@ (8014404 <etharp_query+0x268>)
 80143b8:	4613      	mov	r3, r2
 80143ba:	005b      	lsls	r3, r3, #1
 80143bc:	4413      	add	r3, r2
 80143be:	00db      	lsls	r3, r3, #3
 80143c0:	440b      	add	r3, r1
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7f9 fa6f 	bl	800d8a8 <pbuf_free>
      }
      arp_table[i].q = p;
 80143ca:	7c7a      	ldrb	r2, [r7, #17]
 80143cc:	490d      	ldr	r1, [pc, #52]	@ (8014404 <etharp_query+0x268>)
 80143ce:	4613      	mov	r3, r2
 80143d0:	005b      	lsls	r3, r3, #1
 80143d2:	4413      	add	r3, r2
 80143d4:	00db      	lsls	r3, r3, #3
 80143d6:	440b      	add	r3, r1
 80143d8:	69fa      	ldr	r2, [r7, #28]
 80143da:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80143dc:	2300      	movs	r3, #0
 80143de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80143e2:	e002      	b.n	80143ea <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80143e4:	23ff      	movs	r3, #255	@ 0xff
 80143e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80143ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80143ee:	4618      	mov	r0, r3
 80143f0:	3728      	adds	r7, #40	@ 0x28
 80143f2:	46bd      	mov	sp, r7
 80143f4:	bd80      	pop	{r7, pc}
 80143f6:	bf00      	nop
 80143f8:	080199e0 	.word	0x080199e0
 80143fc:	08019b8c 	.word	0x08019b8c
 8014400:	08019a58 	.word	0x08019a58
 8014404:	2400ca2c 	.word	0x2400ca2c
 8014408:	08019b9c 	.word	0x08019b9c
 801440c:	08019b80 	.word	0x08019b80
 8014410:	2400cb1c 	.word	0x2400cb1c
 8014414:	08019bc4 	.word	0x08019bc4

08014418 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b08a      	sub	sp, #40	@ 0x28
 801441c:	af02      	add	r7, sp, #8
 801441e:	60f8      	str	r0, [r7, #12]
 8014420:	60b9      	str	r1, [r7, #8]
 8014422:	607a      	str	r2, [r7, #4]
 8014424:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014426:	2300      	movs	r3, #0
 8014428:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d106      	bne.n	801443e <etharp_raw+0x26>
 8014430:	4b3a      	ldr	r3, [pc, #232]	@ (801451c <etharp_raw+0x104>)
 8014432:	f240 4257 	movw	r2, #1111	@ 0x457
 8014436:	493a      	ldr	r1, [pc, #232]	@ (8014520 <etharp_raw+0x108>)
 8014438:	483a      	ldr	r0, [pc, #232]	@ (8014524 <etharp_raw+0x10c>)
 801443a:	f001 fe3f 	bl	80160bc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801443e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014442:	211c      	movs	r1, #28
 8014444:	200e      	movs	r0, #14
 8014446:	f7f8 ff47 	bl	800d2d8 <pbuf_alloc>
 801444a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801444c:	69bb      	ldr	r3, [r7, #24]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d102      	bne.n	8014458 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014452:	f04f 33ff 	mov.w	r3, #4294967295
 8014456:	e05d      	b.n	8014514 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014458:	69bb      	ldr	r3, [r7, #24]
 801445a:	895b      	ldrh	r3, [r3, #10]
 801445c:	2b1b      	cmp	r3, #27
 801445e:	d806      	bhi.n	801446e <etharp_raw+0x56>
 8014460:	4b2e      	ldr	r3, [pc, #184]	@ (801451c <etharp_raw+0x104>)
 8014462:	f240 4262 	movw	r2, #1122	@ 0x462
 8014466:	4930      	ldr	r1, [pc, #192]	@ (8014528 <etharp_raw+0x110>)
 8014468:	482e      	ldr	r0, [pc, #184]	@ (8014524 <etharp_raw+0x10c>)
 801446a:	f001 fe27 	bl	80160bc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801446e:	69bb      	ldr	r3, [r7, #24]
 8014470:	685b      	ldr	r3, [r3, #4]
 8014472:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014474:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014476:	4618      	mov	r0, r3
 8014478:	f7f7 fd58 	bl	800bf2c <lwip_htons>
 801447c:	4603      	mov	r3, r0
 801447e:	461a      	mov	r2, r3
 8014480:	697b      	ldr	r3, [r7, #20]
 8014482:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801448a:	2b06      	cmp	r3, #6
 801448c:	d006      	beq.n	801449c <etharp_raw+0x84>
 801448e:	4b23      	ldr	r3, [pc, #140]	@ (801451c <etharp_raw+0x104>)
 8014490:	f240 4269 	movw	r2, #1129	@ 0x469
 8014494:	4925      	ldr	r1, [pc, #148]	@ (801452c <etharp_raw+0x114>)
 8014496:	4823      	ldr	r0, [pc, #140]	@ (8014524 <etharp_raw+0x10c>)
 8014498:	f001 fe10 	bl	80160bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801449c:	697b      	ldr	r3, [r7, #20]
 801449e:	3308      	adds	r3, #8
 80144a0:	2206      	movs	r2, #6
 80144a2:	6839      	ldr	r1, [r7, #0]
 80144a4:	4618      	mov	r0, r3
 80144a6:	f001 ff40 	bl	801632a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80144aa:	697b      	ldr	r3, [r7, #20]
 80144ac:	3312      	adds	r3, #18
 80144ae:	2206      	movs	r2, #6
 80144b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80144b2:	4618      	mov	r0, r3
 80144b4:	f001 ff39 	bl	801632a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80144b8:	697b      	ldr	r3, [r7, #20]
 80144ba:	330e      	adds	r3, #14
 80144bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80144be:	6812      	ldr	r2, [r2, #0]
 80144c0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80144c2:	697b      	ldr	r3, [r7, #20]
 80144c4:	3318      	adds	r3, #24
 80144c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80144c8:	6812      	ldr	r2, [r2, #0]
 80144ca:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80144cc:	697b      	ldr	r3, [r7, #20]
 80144ce:	2200      	movs	r2, #0
 80144d0:	701a      	strb	r2, [r3, #0]
 80144d2:	2200      	movs	r2, #0
 80144d4:	f042 0201 	orr.w	r2, r2, #1
 80144d8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80144da:	697b      	ldr	r3, [r7, #20]
 80144dc:	2200      	movs	r2, #0
 80144de:	f042 0208 	orr.w	r2, r2, #8
 80144e2:	709a      	strb	r2, [r3, #2]
 80144e4:	2200      	movs	r2, #0
 80144e6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80144e8:	697b      	ldr	r3, [r7, #20]
 80144ea:	2206      	movs	r2, #6
 80144ec:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80144ee:	697b      	ldr	r3, [r7, #20]
 80144f0:	2204      	movs	r2, #4
 80144f2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80144f4:	f640 0306 	movw	r3, #2054	@ 0x806
 80144f8:	9300      	str	r3, [sp, #0]
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	68ba      	ldr	r2, [r7, #8]
 80144fe:	69b9      	ldr	r1, [r7, #24]
 8014500:	68f8      	ldr	r0, [r7, #12]
 8014502:	f001 fba1 	bl	8015c48 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014506:	69b8      	ldr	r0, [r7, #24]
 8014508:	f7f9 f9ce 	bl	800d8a8 <pbuf_free>
  p = NULL;
 801450c:	2300      	movs	r3, #0
 801450e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014510:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014514:	4618      	mov	r0, r3
 8014516:	3720      	adds	r7, #32
 8014518:	46bd      	mov	sp, r7
 801451a:	bd80      	pop	{r7, pc}
 801451c:	080199e0 	.word	0x080199e0
 8014520:	08019b30 	.word	0x08019b30
 8014524:	08019a58 	.word	0x08019a58
 8014528:	08019be0 	.word	0x08019be0
 801452c:	08019c14 	.word	0x08019c14

08014530 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b088      	sub	sp, #32
 8014534:	af04      	add	r7, sp, #16
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	60b9      	str	r1, [r7, #8]
 801453a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801454c:	2201      	movs	r2, #1
 801454e:	9203      	str	r2, [sp, #12]
 8014550:	68ba      	ldr	r2, [r7, #8]
 8014552:	9202      	str	r2, [sp, #8]
 8014554:	4a06      	ldr	r2, [pc, #24]	@ (8014570 <etharp_request_dst+0x40>)
 8014556:	9201      	str	r2, [sp, #4]
 8014558:	9300      	str	r3, [sp, #0]
 801455a:	4603      	mov	r3, r0
 801455c:	687a      	ldr	r2, [r7, #4]
 801455e:	68f8      	ldr	r0, [r7, #12]
 8014560:	f7ff ff5a 	bl	8014418 <etharp_raw>
 8014564:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014566:	4618      	mov	r0, r3
 8014568:	3710      	adds	r7, #16
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}
 801456e:	bf00      	nop
 8014570:	0801a200 	.word	0x0801a200

08014574 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b082      	sub	sp, #8
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
 801457c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801457e:	4a05      	ldr	r2, [pc, #20]	@ (8014594 <etharp_request+0x20>)
 8014580:	6839      	ldr	r1, [r7, #0]
 8014582:	6878      	ldr	r0, [r7, #4]
 8014584:	f7ff ffd4 	bl	8014530 <etharp_request_dst>
 8014588:	4603      	mov	r3, r0
}
 801458a:	4618      	mov	r0, r3
 801458c:	3708      	adds	r7, #8
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}
 8014592:	bf00      	nop
 8014594:	0801a1f8 	.word	0x0801a1f8

08014598 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b08e      	sub	sp, #56	@ 0x38
 801459c:	af04      	add	r7, sp, #16
 801459e:	6078      	str	r0, [r7, #4]
 80145a0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80145a2:	4b87      	ldr	r3, [pc, #540]	@ (80147c0 <icmp_input+0x228>)
 80145a4:	689b      	ldr	r3, [r3, #8]
 80145a6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80145a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145aa:	781b      	ldrb	r3, [r3, #0]
 80145ac:	f003 030f 	and.w	r3, r3, #15
 80145b0:	b2db      	uxtb	r3, r3
 80145b2:	009b      	lsls	r3, r3, #2
 80145b4:	b2db      	uxtb	r3, r3
 80145b6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80145b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80145ba:	2b13      	cmp	r3, #19
 80145bc:	f240 80e8 	bls.w	8014790 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	895b      	ldrh	r3, [r3, #10]
 80145c4:	2b03      	cmp	r3, #3
 80145c6:	f240 80e5 	bls.w	8014794 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	685b      	ldr	r3, [r3, #4]
 80145ce:	781b      	ldrb	r3, [r3, #0]
 80145d0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80145d4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80145d8:	2b00      	cmp	r3, #0
 80145da:	f000 80d2 	beq.w	8014782 <icmp_input+0x1ea>
 80145de:	2b08      	cmp	r3, #8
 80145e0:	f040 80d2 	bne.w	8014788 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80145e4:	4b77      	ldr	r3, [pc, #476]	@ (80147c4 <icmp_input+0x22c>)
 80145e6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80145e8:	4b75      	ldr	r3, [pc, #468]	@ (80147c0 <icmp_input+0x228>)
 80145ea:	695b      	ldr	r3, [r3, #20]
 80145ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80145f0:	2be0      	cmp	r3, #224	@ 0xe0
 80145f2:	f000 80d6 	beq.w	80147a2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80145f6:	4b72      	ldr	r3, [pc, #456]	@ (80147c0 <icmp_input+0x228>)
 80145f8:	695b      	ldr	r3, [r3, #20]
 80145fa:	4a71      	ldr	r2, [pc, #452]	@ (80147c0 <icmp_input+0x228>)
 80145fc:	6812      	ldr	r2, [r2, #0]
 80145fe:	4611      	mov	r1, r2
 8014600:	4618      	mov	r0, r3
 8014602:	f000 fc13 	bl	8014e2c <ip4_addr_isbroadcast_u32>
 8014606:	4603      	mov	r3, r0
 8014608:	2b00      	cmp	r3, #0
 801460a:	f040 80cc 	bne.w	80147a6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	891b      	ldrh	r3, [r3, #8]
 8014612:	2b07      	cmp	r3, #7
 8014614:	f240 80c0 	bls.w	8014798 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8014618:	6878      	ldr	r0, [r7, #4]
 801461a:	f7f7 fd24 	bl	800c066 <inet_chksum_pbuf>
 801461e:	4603      	mov	r3, r0
 8014620:	2b00      	cmp	r3, #0
 8014622:	d003      	beq.n	801462c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8014624:	6878      	ldr	r0, [r7, #4]
 8014626:	f7f9 f93f 	bl	800d8a8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801462a:	e0c5      	b.n	80147b8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801462c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801462e:	330e      	adds	r3, #14
 8014630:	4619      	mov	r1, r3
 8014632:	6878      	ldr	r0, [r7, #4]
 8014634:	f7f9 f8a2 	bl	800d77c <pbuf_add_header>
 8014638:	4603      	mov	r3, r0
 801463a:	2b00      	cmp	r3, #0
 801463c:	d04b      	beq.n	80146d6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	891a      	ldrh	r2, [r3, #8]
 8014642:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014644:	4413      	add	r3, r2
 8014646:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	891b      	ldrh	r3, [r3, #8]
 801464c:	8b7a      	ldrh	r2, [r7, #26]
 801464e:	429a      	cmp	r2, r3
 8014650:	f0c0 80ab 	bcc.w	80147aa <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014654:	8b7b      	ldrh	r3, [r7, #26]
 8014656:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801465a:	4619      	mov	r1, r3
 801465c:	200e      	movs	r0, #14
 801465e:	f7f8 fe3b 	bl	800d2d8 <pbuf_alloc>
 8014662:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014664:	697b      	ldr	r3, [r7, #20]
 8014666:	2b00      	cmp	r3, #0
 8014668:	f000 80a1 	beq.w	80147ae <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801466c:	697b      	ldr	r3, [r7, #20]
 801466e:	895b      	ldrh	r3, [r3, #10]
 8014670:	461a      	mov	r2, r3
 8014672:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014674:	3308      	adds	r3, #8
 8014676:	429a      	cmp	r2, r3
 8014678:	d203      	bcs.n	8014682 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801467a:	6978      	ldr	r0, [r7, #20]
 801467c:	f7f9 f914 	bl	800d8a8 <pbuf_free>
          goto icmperr;
 8014680:	e096      	b.n	80147b0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014682:	697b      	ldr	r3, [r7, #20]
 8014684:	685b      	ldr	r3, [r3, #4]
 8014686:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014688:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801468a:	4618      	mov	r0, r3
 801468c:	f001 fe4d 	bl	801632a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014690:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014692:	4619      	mov	r1, r3
 8014694:	6978      	ldr	r0, [r7, #20]
 8014696:	f7f9 f881 	bl	800d79c <pbuf_remove_header>
 801469a:	4603      	mov	r3, r0
 801469c:	2b00      	cmp	r3, #0
 801469e:	d009      	beq.n	80146b4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80146a0:	4b49      	ldr	r3, [pc, #292]	@ (80147c8 <icmp_input+0x230>)
 80146a2:	22b6      	movs	r2, #182	@ 0xb6
 80146a4:	4949      	ldr	r1, [pc, #292]	@ (80147cc <icmp_input+0x234>)
 80146a6:	484a      	ldr	r0, [pc, #296]	@ (80147d0 <icmp_input+0x238>)
 80146a8:	f001 fd08 	bl	80160bc <iprintf>
          pbuf_free(r);
 80146ac:	6978      	ldr	r0, [r7, #20]
 80146ae:	f7f9 f8fb 	bl	800d8a8 <pbuf_free>
          goto icmperr;
 80146b2:	e07d      	b.n	80147b0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80146b4:	6879      	ldr	r1, [r7, #4]
 80146b6:	6978      	ldr	r0, [r7, #20]
 80146b8:	f7f9 fa1a 	bl	800daf0 <pbuf_copy>
 80146bc:	4603      	mov	r3, r0
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d003      	beq.n	80146ca <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80146c2:	6978      	ldr	r0, [r7, #20]
 80146c4:	f7f9 f8f0 	bl	800d8a8 <pbuf_free>
          goto icmperr;
 80146c8:	e072      	b.n	80147b0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80146ca:	6878      	ldr	r0, [r7, #4]
 80146cc:	f7f9 f8ec 	bl	800d8a8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80146d0:	697b      	ldr	r3, [r7, #20]
 80146d2:	607b      	str	r3, [r7, #4]
 80146d4:	e00f      	b.n	80146f6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80146d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80146d8:	330e      	adds	r3, #14
 80146da:	4619      	mov	r1, r3
 80146dc:	6878      	ldr	r0, [r7, #4]
 80146de:	f7f9 f85d 	bl	800d79c <pbuf_remove_header>
 80146e2:	4603      	mov	r3, r0
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d006      	beq.n	80146f6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80146e8:	4b37      	ldr	r3, [pc, #220]	@ (80147c8 <icmp_input+0x230>)
 80146ea:	22c7      	movs	r2, #199	@ 0xc7
 80146ec:	4939      	ldr	r1, [pc, #228]	@ (80147d4 <icmp_input+0x23c>)
 80146ee:	4838      	ldr	r0, [pc, #224]	@ (80147d0 <icmp_input+0x238>)
 80146f0:	f001 fce4 	bl	80160bc <iprintf>
          goto icmperr;
 80146f4:	e05c      	b.n	80147b0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	685b      	ldr	r3, [r3, #4]
 80146fa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80146fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80146fe:	4619      	mov	r1, r3
 8014700:	6878      	ldr	r0, [r7, #4]
 8014702:	f7f9 f83b 	bl	800d77c <pbuf_add_header>
 8014706:	4603      	mov	r3, r0
 8014708:	2b00      	cmp	r3, #0
 801470a:	d13c      	bne.n	8014786 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	685b      	ldr	r3, [r3, #4]
 8014710:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014712:	69fb      	ldr	r3, [r7, #28]
 8014714:	681a      	ldr	r2, [r3, #0]
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801471a:	4b29      	ldr	r3, [pc, #164]	@ (80147c0 <icmp_input+0x228>)
 801471c:	691a      	ldr	r2, [r3, #16]
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014722:	693b      	ldr	r3, [r7, #16]
 8014724:	2200      	movs	r2, #0
 8014726:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8014728:	693b      	ldr	r3, [r7, #16]
 801472a:	885b      	ldrh	r3, [r3, #2]
 801472c:	b29b      	uxth	r3, r3
 801472e:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8014732:	4293      	cmp	r3, r2
 8014734:	d907      	bls.n	8014746 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8014736:	693b      	ldr	r3, [r7, #16]
 8014738:	885b      	ldrh	r3, [r3, #2]
 801473a:	b29b      	uxth	r3, r3
 801473c:	3309      	adds	r3, #9
 801473e:	b29a      	uxth	r2, r3
 8014740:	693b      	ldr	r3, [r7, #16]
 8014742:	805a      	strh	r2, [r3, #2]
 8014744:	e006      	b.n	8014754 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8014746:	693b      	ldr	r3, [r7, #16]
 8014748:	885b      	ldrh	r3, [r3, #2]
 801474a:	b29b      	uxth	r3, r3
 801474c:	3308      	adds	r3, #8
 801474e:	b29a      	uxth	r2, r3
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	22ff      	movs	r2, #255	@ 0xff
 8014758:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	2200      	movs	r2, #0
 801475e:	729a      	strb	r2, [r3, #10]
 8014760:	2200      	movs	r2, #0
 8014762:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014764:	683b      	ldr	r3, [r7, #0]
 8014766:	9302      	str	r3, [sp, #8]
 8014768:	2301      	movs	r3, #1
 801476a:	9301      	str	r3, [sp, #4]
 801476c:	2300      	movs	r3, #0
 801476e:	9300      	str	r3, [sp, #0]
 8014770:	23ff      	movs	r3, #255	@ 0xff
 8014772:	2200      	movs	r2, #0
 8014774:	69f9      	ldr	r1, [r7, #28]
 8014776:	6878      	ldr	r0, [r7, #4]
 8014778:	f000 fa80 	bl	8014c7c <ip4_output_if>
 801477c:	4603      	mov	r3, r0
 801477e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014780:	e001      	b.n	8014786 <icmp_input+0x1ee>
      break;
 8014782:	bf00      	nop
 8014784:	e000      	b.n	8014788 <icmp_input+0x1f0>
      break;
 8014786:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014788:	6878      	ldr	r0, [r7, #4]
 801478a:	f7f9 f88d 	bl	800d8a8 <pbuf_free>
  return;
 801478e:	e013      	b.n	80147b8 <icmp_input+0x220>
    goto lenerr;
 8014790:	bf00      	nop
 8014792:	e002      	b.n	801479a <icmp_input+0x202>
    goto lenerr;
 8014794:	bf00      	nop
 8014796:	e000      	b.n	801479a <icmp_input+0x202>
        goto lenerr;
 8014798:	bf00      	nop
lenerr:
  pbuf_free(p);
 801479a:	6878      	ldr	r0, [r7, #4]
 801479c:	f7f9 f884 	bl	800d8a8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80147a0:	e00a      	b.n	80147b8 <icmp_input+0x220>
        goto icmperr;
 80147a2:	bf00      	nop
 80147a4:	e004      	b.n	80147b0 <icmp_input+0x218>
        goto icmperr;
 80147a6:	bf00      	nop
 80147a8:	e002      	b.n	80147b0 <icmp_input+0x218>
          goto icmperr;
 80147aa:	bf00      	nop
 80147ac:	e000      	b.n	80147b0 <icmp_input+0x218>
          goto icmperr;
 80147ae:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80147b0:	6878      	ldr	r0, [r7, #4]
 80147b2:	f7f9 f879 	bl	800d8a8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80147b6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80147b8:	3728      	adds	r7, #40	@ 0x28
 80147ba:	46bd      	mov	sp, r7
 80147bc:	bd80      	pop	{r7, pc}
 80147be:	bf00      	nop
 80147c0:	24005f0c 	.word	0x24005f0c
 80147c4:	24005f20 	.word	0x24005f20
 80147c8:	08019c58 	.word	0x08019c58
 80147cc:	08019c90 	.word	0x08019c90
 80147d0:	08019cc8 	.word	0x08019cc8
 80147d4:	08019cf0 	.word	0x08019cf0

080147d8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b082      	sub	sp, #8
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
 80147e0:	460b      	mov	r3, r1
 80147e2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80147e4:	78fb      	ldrb	r3, [r7, #3]
 80147e6:	461a      	mov	r2, r3
 80147e8:	2103      	movs	r1, #3
 80147ea:	6878      	ldr	r0, [r7, #4]
 80147ec:	f000 f814 	bl	8014818 <icmp_send_response>
}
 80147f0:	bf00      	nop
 80147f2:	3708      	adds	r7, #8
 80147f4:	46bd      	mov	sp, r7
 80147f6:	bd80      	pop	{r7, pc}

080147f8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b082      	sub	sp, #8
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
 8014800:	460b      	mov	r3, r1
 8014802:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014804:	78fb      	ldrb	r3, [r7, #3]
 8014806:	461a      	mov	r2, r3
 8014808:	210b      	movs	r1, #11
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f000 f804 	bl	8014818 <icmp_send_response>
}
 8014810:	bf00      	nop
 8014812:	3708      	adds	r7, #8
 8014814:	46bd      	mov	sp, r7
 8014816:	bd80      	pop	{r7, pc}

08014818 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b08c      	sub	sp, #48	@ 0x30
 801481c:	af04      	add	r7, sp, #16
 801481e:	6078      	str	r0, [r7, #4]
 8014820:	460b      	mov	r3, r1
 8014822:	70fb      	strb	r3, [r7, #3]
 8014824:	4613      	mov	r3, r2
 8014826:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014828:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801482c:	2124      	movs	r1, #36	@ 0x24
 801482e:	2022      	movs	r0, #34	@ 0x22
 8014830:	f7f8 fd52 	bl	800d2d8 <pbuf_alloc>
 8014834:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014836:	69fb      	ldr	r3, [r7, #28]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d056      	beq.n	80148ea <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801483c:	69fb      	ldr	r3, [r7, #28]
 801483e:	895b      	ldrh	r3, [r3, #10]
 8014840:	2b23      	cmp	r3, #35	@ 0x23
 8014842:	d806      	bhi.n	8014852 <icmp_send_response+0x3a>
 8014844:	4b2b      	ldr	r3, [pc, #172]	@ (80148f4 <icmp_send_response+0xdc>)
 8014846:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801484a:	492b      	ldr	r1, [pc, #172]	@ (80148f8 <icmp_send_response+0xe0>)
 801484c:	482b      	ldr	r0, [pc, #172]	@ (80148fc <icmp_send_response+0xe4>)
 801484e:	f001 fc35 	bl	80160bc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	685b      	ldr	r3, [r3, #4]
 8014856:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014858:	69fb      	ldr	r3, [r7, #28]
 801485a:	685b      	ldr	r3, [r3, #4]
 801485c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801485e:	697b      	ldr	r3, [r7, #20]
 8014860:	78fa      	ldrb	r2, [r7, #3]
 8014862:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014864:	697b      	ldr	r3, [r7, #20]
 8014866:	78ba      	ldrb	r2, [r7, #2]
 8014868:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801486a:	697b      	ldr	r3, [r7, #20]
 801486c:	2200      	movs	r2, #0
 801486e:	711a      	strb	r2, [r3, #4]
 8014870:	2200      	movs	r2, #0
 8014872:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014874:	697b      	ldr	r3, [r7, #20]
 8014876:	2200      	movs	r2, #0
 8014878:	719a      	strb	r2, [r3, #6]
 801487a:	2200      	movs	r2, #0
 801487c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801487e:	69fb      	ldr	r3, [r7, #28]
 8014880:	685b      	ldr	r3, [r3, #4]
 8014882:	f103 0008 	add.w	r0, r3, #8
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	685b      	ldr	r3, [r3, #4]
 801488a:	221c      	movs	r2, #28
 801488c:	4619      	mov	r1, r3
 801488e:	f001 fd4c 	bl	801632a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014892:	69bb      	ldr	r3, [r7, #24]
 8014894:	68db      	ldr	r3, [r3, #12]
 8014896:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014898:	f107 030c 	add.w	r3, r7, #12
 801489c:	4618      	mov	r0, r3
 801489e:	f000 f82f 	bl	8014900 <ip4_route>
 80148a2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80148a4:	693b      	ldr	r3, [r7, #16]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d01b      	beq.n	80148e2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80148aa:	697b      	ldr	r3, [r7, #20]
 80148ac:	2200      	movs	r2, #0
 80148ae:	709a      	strb	r2, [r3, #2]
 80148b0:	2200      	movs	r2, #0
 80148b2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80148b4:	69fb      	ldr	r3, [r7, #28]
 80148b6:	895b      	ldrh	r3, [r3, #10]
 80148b8:	4619      	mov	r1, r3
 80148ba:	6978      	ldr	r0, [r7, #20]
 80148bc:	f7f7 fbc1 	bl	800c042 <inet_chksum>
 80148c0:	4603      	mov	r3, r0
 80148c2:	461a      	mov	r2, r3
 80148c4:	697b      	ldr	r3, [r7, #20]
 80148c6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80148c8:	f107 020c 	add.w	r2, r7, #12
 80148cc:	693b      	ldr	r3, [r7, #16]
 80148ce:	9302      	str	r3, [sp, #8]
 80148d0:	2301      	movs	r3, #1
 80148d2:	9301      	str	r3, [sp, #4]
 80148d4:	2300      	movs	r3, #0
 80148d6:	9300      	str	r3, [sp, #0]
 80148d8:	23ff      	movs	r3, #255	@ 0xff
 80148da:	2100      	movs	r1, #0
 80148dc:	69f8      	ldr	r0, [r7, #28]
 80148de:	f000 f9cd 	bl	8014c7c <ip4_output_if>
  }
  pbuf_free(q);
 80148e2:	69f8      	ldr	r0, [r7, #28]
 80148e4:	f7f8 ffe0 	bl	800d8a8 <pbuf_free>
 80148e8:	e000      	b.n	80148ec <icmp_send_response+0xd4>
    return;
 80148ea:	bf00      	nop
}
 80148ec:	3720      	adds	r7, #32
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}
 80148f2:	bf00      	nop
 80148f4:	08019c58 	.word	0x08019c58
 80148f8:	08019d24 	.word	0x08019d24
 80148fc:	08019cc8 	.word	0x08019cc8

08014900 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014900:	b480      	push	{r7}
 8014902:	b085      	sub	sp, #20
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014908:	4b33      	ldr	r3, [pc, #204]	@ (80149d8 <ip4_route+0xd8>)
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	60fb      	str	r3, [r7, #12]
 801490e:	e036      	b.n	801497e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014916:	f003 0301 	and.w	r3, r3, #1
 801491a:	b2db      	uxtb	r3, r3
 801491c:	2b00      	cmp	r3, #0
 801491e:	d02b      	beq.n	8014978 <ip4_route+0x78>
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014926:	089b      	lsrs	r3, r3, #2
 8014928:	f003 0301 	and.w	r3, r3, #1
 801492c:	b2db      	uxtb	r3, r3
 801492e:	2b00      	cmp	r3, #0
 8014930:	d022      	beq.n	8014978 <ip4_route+0x78>
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	3304      	adds	r3, #4
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	2b00      	cmp	r3, #0
 801493a:	d01d      	beq.n	8014978 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	681a      	ldr	r2, [r3, #0]
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	3304      	adds	r3, #4
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	405a      	eors	r2, r3
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	3308      	adds	r3, #8
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	4013      	ands	r3, r2
 8014950:	2b00      	cmp	r3, #0
 8014952:	d101      	bne.n	8014958 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	e038      	b.n	80149ca <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801495e:	f003 0302 	and.w	r3, r3, #2
 8014962:	2b00      	cmp	r3, #0
 8014964:	d108      	bne.n	8014978 <ip4_route+0x78>
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	681a      	ldr	r2, [r3, #0]
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	330c      	adds	r3, #12
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	429a      	cmp	r2, r3
 8014972:	d101      	bne.n	8014978 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	e028      	b.n	80149ca <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	60fb      	str	r3, [r7, #12]
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d1c5      	bne.n	8014910 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014984:	4b15      	ldr	r3, [pc, #84]	@ (80149dc <ip4_route+0xdc>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d01a      	beq.n	80149c2 <ip4_route+0xc2>
 801498c:	4b13      	ldr	r3, [pc, #76]	@ (80149dc <ip4_route+0xdc>)
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014994:	f003 0301 	and.w	r3, r3, #1
 8014998:	2b00      	cmp	r3, #0
 801499a:	d012      	beq.n	80149c2 <ip4_route+0xc2>
 801499c:	4b0f      	ldr	r3, [pc, #60]	@ (80149dc <ip4_route+0xdc>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80149a4:	f003 0304 	and.w	r3, r3, #4
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d00a      	beq.n	80149c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80149ac:	4b0b      	ldr	r3, [pc, #44]	@ (80149dc <ip4_route+0xdc>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	3304      	adds	r3, #4
 80149b2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d004      	beq.n	80149c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	b2db      	uxtb	r3, r3
 80149be:	2b7f      	cmp	r3, #127	@ 0x7f
 80149c0:	d101      	bne.n	80149c6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80149c2:	2300      	movs	r3, #0
 80149c4:	e001      	b.n	80149ca <ip4_route+0xca>
  }

  return netif_default;
 80149c6:	4b05      	ldr	r3, [pc, #20]	@ (80149dc <ip4_route+0xdc>)
 80149c8:	681b      	ldr	r3, [r3, #0]
}
 80149ca:	4618      	mov	r0, r3
 80149cc:	3714      	adds	r7, #20
 80149ce:	46bd      	mov	sp, r7
 80149d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d4:	4770      	bx	lr
 80149d6:	bf00      	nop
 80149d8:	2400c9c0 	.word	0x2400c9c0
 80149dc:	2400c9c4 	.word	0x2400c9c4

080149e0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b082      	sub	sp, #8
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80149ee:	f003 0301 	and.w	r3, r3, #1
 80149f2:	b2db      	uxtb	r3, r3
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d016      	beq.n	8014a26 <ip4_input_accept+0x46>
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	3304      	adds	r3, #4
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d011      	beq.n	8014a26 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014a02:	4b0b      	ldr	r3, [pc, #44]	@ (8014a30 <ip4_input_accept+0x50>)
 8014a04:	695a      	ldr	r2, [r3, #20]
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	3304      	adds	r3, #4
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	429a      	cmp	r2, r3
 8014a0e:	d008      	beq.n	8014a22 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014a10:	4b07      	ldr	r3, [pc, #28]	@ (8014a30 <ip4_input_accept+0x50>)
 8014a12:	695b      	ldr	r3, [r3, #20]
 8014a14:	6879      	ldr	r1, [r7, #4]
 8014a16:	4618      	mov	r0, r3
 8014a18:	f000 fa08 	bl	8014e2c <ip4_addr_isbroadcast_u32>
 8014a1c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d001      	beq.n	8014a26 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014a22:	2301      	movs	r3, #1
 8014a24:	e000      	b.n	8014a28 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014a26:	2300      	movs	r3, #0
}
 8014a28:	4618      	mov	r0, r3
 8014a2a:	3708      	adds	r7, #8
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	bd80      	pop	{r7, pc}
 8014a30:	24005f0c 	.word	0x24005f0c

08014a34 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b086      	sub	sp, #24
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
 8014a3c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	685b      	ldr	r3, [r3, #4]
 8014a42:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014a44:	697b      	ldr	r3, [r7, #20]
 8014a46:	781b      	ldrb	r3, [r3, #0]
 8014a48:	091b      	lsrs	r3, r3, #4
 8014a4a:	b2db      	uxtb	r3, r3
 8014a4c:	2b04      	cmp	r3, #4
 8014a4e:	d004      	beq.n	8014a5a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014a50:	6878      	ldr	r0, [r7, #4]
 8014a52:	f7f8 ff29 	bl	800d8a8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014a56:	2300      	movs	r3, #0
 8014a58:	e107      	b.n	8014c6a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014a5a:	697b      	ldr	r3, [r7, #20]
 8014a5c:	781b      	ldrb	r3, [r3, #0]
 8014a5e:	f003 030f 	and.w	r3, r3, #15
 8014a62:	b2db      	uxtb	r3, r3
 8014a64:	009b      	lsls	r3, r3, #2
 8014a66:	b2db      	uxtb	r3, r3
 8014a68:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014a6a:	697b      	ldr	r3, [r7, #20]
 8014a6c:	885b      	ldrh	r3, [r3, #2]
 8014a6e:	b29b      	uxth	r3, r3
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7f7 fa5b 	bl	800bf2c <lwip_htons>
 8014a76:	4603      	mov	r3, r0
 8014a78:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	891b      	ldrh	r3, [r3, #8]
 8014a7e:	89ba      	ldrh	r2, [r7, #12]
 8014a80:	429a      	cmp	r2, r3
 8014a82:	d204      	bcs.n	8014a8e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014a84:	89bb      	ldrh	r3, [r7, #12]
 8014a86:	4619      	mov	r1, r3
 8014a88:	6878      	ldr	r0, [r7, #4]
 8014a8a:	f7f8 fd87 	bl	800d59c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	895b      	ldrh	r3, [r3, #10]
 8014a92:	89fa      	ldrh	r2, [r7, #14]
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d807      	bhi.n	8014aa8 <ip4_input+0x74>
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	891b      	ldrh	r3, [r3, #8]
 8014a9c:	89ba      	ldrh	r2, [r7, #12]
 8014a9e:	429a      	cmp	r2, r3
 8014aa0:	d802      	bhi.n	8014aa8 <ip4_input+0x74>
 8014aa2:	89fb      	ldrh	r3, [r7, #14]
 8014aa4:	2b13      	cmp	r3, #19
 8014aa6:	d804      	bhi.n	8014ab2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014aa8:	6878      	ldr	r0, [r7, #4]
 8014aaa:	f7f8 fefd 	bl	800d8a8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014aae:	2300      	movs	r3, #0
 8014ab0:	e0db      	b.n	8014c6a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014ab2:	697b      	ldr	r3, [r7, #20]
 8014ab4:	691b      	ldr	r3, [r3, #16]
 8014ab6:	4a6f      	ldr	r2, [pc, #444]	@ (8014c74 <ip4_input+0x240>)
 8014ab8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014aba:	697b      	ldr	r3, [r7, #20]
 8014abc:	68db      	ldr	r3, [r3, #12]
 8014abe:	4a6d      	ldr	r2, [pc, #436]	@ (8014c74 <ip4_input+0x240>)
 8014ac0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014ac2:	4b6c      	ldr	r3, [pc, #432]	@ (8014c74 <ip4_input+0x240>)
 8014ac4:	695b      	ldr	r3, [r3, #20]
 8014ac6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014aca:	2be0      	cmp	r3, #224	@ 0xe0
 8014acc:	d112      	bne.n	8014af4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014ad4:	f003 0301 	and.w	r3, r3, #1
 8014ad8:	b2db      	uxtb	r3, r3
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d007      	beq.n	8014aee <ip4_input+0xba>
 8014ade:	683b      	ldr	r3, [r7, #0]
 8014ae0:	3304      	adds	r3, #4
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d002      	beq.n	8014aee <ip4_input+0xba>
      netif = inp;
 8014ae8:	683b      	ldr	r3, [r7, #0]
 8014aea:	613b      	str	r3, [r7, #16]
 8014aec:	e02a      	b.n	8014b44 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014aee:	2300      	movs	r3, #0
 8014af0:	613b      	str	r3, [r7, #16]
 8014af2:	e027      	b.n	8014b44 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014af4:	6838      	ldr	r0, [r7, #0]
 8014af6:	f7ff ff73 	bl	80149e0 <ip4_input_accept>
 8014afa:	4603      	mov	r3, r0
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d002      	beq.n	8014b06 <ip4_input+0xd2>
      netif = inp;
 8014b00:	683b      	ldr	r3, [r7, #0]
 8014b02:	613b      	str	r3, [r7, #16]
 8014b04:	e01e      	b.n	8014b44 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014b06:	2300      	movs	r3, #0
 8014b08:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014b0a:	4b5a      	ldr	r3, [pc, #360]	@ (8014c74 <ip4_input+0x240>)
 8014b0c:	695b      	ldr	r3, [r3, #20]
 8014b0e:	b2db      	uxtb	r3, r3
 8014b10:	2b7f      	cmp	r3, #127	@ 0x7f
 8014b12:	d017      	beq.n	8014b44 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014b14:	4b58      	ldr	r3, [pc, #352]	@ (8014c78 <ip4_input+0x244>)
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	613b      	str	r3, [r7, #16]
 8014b1a:	e00e      	b.n	8014b3a <ip4_input+0x106>
          if (netif == inp) {
 8014b1c:	693a      	ldr	r2, [r7, #16]
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	429a      	cmp	r2, r3
 8014b22:	d006      	beq.n	8014b32 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014b24:	6938      	ldr	r0, [r7, #16]
 8014b26:	f7ff ff5b 	bl	80149e0 <ip4_input_accept>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d108      	bne.n	8014b42 <ip4_input+0x10e>
 8014b30:	e000      	b.n	8014b34 <ip4_input+0x100>
            continue;
 8014b32:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014b34:	693b      	ldr	r3, [r7, #16]
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	613b      	str	r3, [r7, #16]
 8014b3a:	693b      	ldr	r3, [r7, #16]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d1ed      	bne.n	8014b1c <ip4_input+0xe8>
 8014b40:	e000      	b.n	8014b44 <ip4_input+0x110>
            break;
 8014b42:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014b44:	4b4b      	ldr	r3, [pc, #300]	@ (8014c74 <ip4_input+0x240>)
 8014b46:	691b      	ldr	r3, [r3, #16]
 8014b48:	6839      	ldr	r1, [r7, #0]
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	f000 f96e 	bl	8014e2c <ip4_addr_isbroadcast_u32>
 8014b50:	4603      	mov	r3, r0
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d105      	bne.n	8014b62 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014b56:	4b47      	ldr	r3, [pc, #284]	@ (8014c74 <ip4_input+0x240>)
 8014b58:	691b      	ldr	r3, [r3, #16]
 8014b5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014b5e:	2be0      	cmp	r3, #224	@ 0xe0
 8014b60:	d104      	bne.n	8014b6c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014b62:	6878      	ldr	r0, [r7, #4]
 8014b64:	f7f8 fea0 	bl	800d8a8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014b68:	2300      	movs	r3, #0
 8014b6a:	e07e      	b.n	8014c6a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014b6c:	693b      	ldr	r3, [r7, #16]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d104      	bne.n	8014b7c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	f7f8 fe98 	bl	800d8a8 <pbuf_free>
    return ERR_OK;
 8014b78:	2300      	movs	r3, #0
 8014b7a:	e076      	b.n	8014c6a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014b7c:	697b      	ldr	r3, [r7, #20]
 8014b7e:	88db      	ldrh	r3, [r3, #6]
 8014b80:	b29b      	uxth	r3, r3
 8014b82:	461a      	mov	r2, r3
 8014b84:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8014b88:	4013      	ands	r3, r2
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d00b      	beq.n	8014ba6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014b8e:	6878      	ldr	r0, [r7, #4]
 8014b90:	f000 fc92 	bl	80154b8 <ip4_reass>
 8014b94:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d101      	bne.n	8014ba0 <ip4_input+0x16c>
      return ERR_OK;
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	e064      	b.n	8014c6a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	685b      	ldr	r3, [r3, #4]
 8014ba4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014ba6:	4a33      	ldr	r2, [pc, #204]	@ (8014c74 <ip4_input+0x240>)
 8014ba8:	693b      	ldr	r3, [r7, #16]
 8014baa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014bac:	4a31      	ldr	r2, [pc, #196]	@ (8014c74 <ip4_input+0x240>)
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014bb2:	4a30      	ldr	r2, [pc, #192]	@ (8014c74 <ip4_input+0x240>)
 8014bb4:	697b      	ldr	r3, [r7, #20]
 8014bb6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014bb8:	697b      	ldr	r3, [r7, #20]
 8014bba:	781b      	ldrb	r3, [r3, #0]
 8014bbc:	f003 030f 	and.w	r3, r3, #15
 8014bc0:	b2db      	uxtb	r3, r3
 8014bc2:	009b      	lsls	r3, r3, #2
 8014bc4:	b2db      	uxtb	r3, r3
 8014bc6:	461a      	mov	r2, r3
 8014bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8014c74 <ip4_input+0x240>)
 8014bca:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014bcc:	89fb      	ldrh	r3, [r7, #14]
 8014bce:	4619      	mov	r1, r3
 8014bd0:	6878      	ldr	r0, [r7, #4]
 8014bd2:	f7f8 fde3 	bl	800d79c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014bd6:	697b      	ldr	r3, [r7, #20]
 8014bd8:	7a5b      	ldrb	r3, [r3, #9]
 8014bda:	2b11      	cmp	r3, #17
 8014bdc:	d006      	beq.n	8014bec <ip4_input+0x1b8>
 8014bde:	2b11      	cmp	r3, #17
 8014be0:	dc13      	bgt.n	8014c0a <ip4_input+0x1d6>
 8014be2:	2b01      	cmp	r3, #1
 8014be4:	d00c      	beq.n	8014c00 <ip4_input+0x1cc>
 8014be6:	2b06      	cmp	r3, #6
 8014be8:	d005      	beq.n	8014bf6 <ip4_input+0x1c2>
 8014bea:	e00e      	b.n	8014c0a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014bec:	6839      	ldr	r1, [r7, #0]
 8014bee:	6878      	ldr	r0, [r7, #4]
 8014bf0:	f7fe fc42 	bl	8013478 <udp_input>
        break;
 8014bf4:	e026      	b.n	8014c44 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014bf6:	6839      	ldr	r1, [r7, #0]
 8014bf8:	6878      	ldr	r0, [r7, #4]
 8014bfa:	f7fa fc8f 	bl	800f51c <tcp_input>
        break;
 8014bfe:	e021      	b.n	8014c44 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014c00:	6839      	ldr	r1, [r7, #0]
 8014c02:	6878      	ldr	r0, [r7, #4]
 8014c04:	f7ff fcc8 	bl	8014598 <icmp_input>
        break;
 8014c08:	e01c      	b.n	8014c44 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8014c74 <ip4_input+0x240>)
 8014c0c:	695b      	ldr	r3, [r3, #20]
 8014c0e:	6939      	ldr	r1, [r7, #16]
 8014c10:	4618      	mov	r0, r3
 8014c12:	f000 f90b 	bl	8014e2c <ip4_addr_isbroadcast_u32>
 8014c16:	4603      	mov	r3, r0
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d10f      	bne.n	8014c3c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014c1c:	4b15      	ldr	r3, [pc, #84]	@ (8014c74 <ip4_input+0x240>)
 8014c1e:	695b      	ldr	r3, [r3, #20]
 8014c20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014c24:	2be0      	cmp	r3, #224	@ 0xe0
 8014c26:	d009      	beq.n	8014c3c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014c28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014c2c:	4619      	mov	r1, r3
 8014c2e:	6878      	ldr	r0, [r7, #4]
 8014c30:	f7f8 fe27 	bl	800d882 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014c34:	2102      	movs	r1, #2
 8014c36:	6878      	ldr	r0, [r7, #4]
 8014c38:	f7ff fdce 	bl	80147d8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f7f8 fe33 	bl	800d8a8 <pbuf_free>
        break;
 8014c42:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014c44:	4b0b      	ldr	r3, [pc, #44]	@ (8014c74 <ip4_input+0x240>)
 8014c46:	2200      	movs	r2, #0
 8014c48:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8014c74 <ip4_input+0x240>)
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014c50:	4b08      	ldr	r3, [pc, #32]	@ (8014c74 <ip4_input+0x240>)
 8014c52:	2200      	movs	r2, #0
 8014c54:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014c56:	4b07      	ldr	r3, [pc, #28]	@ (8014c74 <ip4_input+0x240>)
 8014c58:	2200      	movs	r2, #0
 8014c5a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014c5c:	4b05      	ldr	r3, [pc, #20]	@ (8014c74 <ip4_input+0x240>)
 8014c5e:	2200      	movs	r2, #0
 8014c60:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014c62:	4b04      	ldr	r3, [pc, #16]	@ (8014c74 <ip4_input+0x240>)
 8014c64:	2200      	movs	r2, #0
 8014c66:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014c68:	2300      	movs	r3, #0
}
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	3718      	adds	r7, #24
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd80      	pop	{r7, pc}
 8014c72:	bf00      	nop
 8014c74:	24005f0c 	.word	0x24005f0c
 8014c78:	2400c9c0 	.word	0x2400c9c0

08014c7c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b08a      	sub	sp, #40	@ 0x28
 8014c80:	af04      	add	r7, sp, #16
 8014c82:	60f8      	str	r0, [r7, #12]
 8014c84:	60b9      	str	r1, [r7, #8]
 8014c86:	607a      	str	r2, [r7, #4]
 8014c88:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014c8a:	68bb      	ldr	r3, [r7, #8]
 8014c8c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d009      	beq.n	8014ca8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014c94:	68bb      	ldr	r3, [r7, #8]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d003      	beq.n	8014ca2 <ip4_output_if+0x26>
 8014c9a:	68bb      	ldr	r3, [r7, #8]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d102      	bne.n	8014ca8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ca4:	3304      	adds	r3, #4
 8014ca6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014ca8:	78fa      	ldrb	r2, [r7, #3]
 8014caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cac:	9302      	str	r3, [sp, #8]
 8014cae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014cb2:	9301      	str	r3, [sp, #4]
 8014cb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014cb8:	9300      	str	r3, [sp, #0]
 8014cba:	4613      	mov	r3, r2
 8014cbc:	687a      	ldr	r2, [r7, #4]
 8014cbe:	6979      	ldr	r1, [r7, #20]
 8014cc0:	68f8      	ldr	r0, [r7, #12]
 8014cc2:	f000 f805 	bl	8014cd0 <ip4_output_if_src>
 8014cc6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014cc8:	4618      	mov	r0, r3
 8014cca:	3718      	adds	r7, #24
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bd80      	pop	{r7, pc}

08014cd0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b088      	sub	sp, #32
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	60f8      	str	r0, [r7, #12]
 8014cd8:	60b9      	str	r1, [r7, #8]
 8014cda:	607a      	str	r2, [r7, #4]
 8014cdc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	7b9b      	ldrb	r3, [r3, #14]
 8014ce2:	2b01      	cmp	r3, #1
 8014ce4:	d006      	beq.n	8014cf4 <ip4_output_if_src+0x24>
 8014ce6:	4b4b      	ldr	r3, [pc, #300]	@ (8014e14 <ip4_output_if_src+0x144>)
 8014ce8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8014cec:	494a      	ldr	r1, [pc, #296]	@ (8014e18 <ip4_output_if_src+0x148>)
 8014cee:	484b      	ldr	r0, [pc, #300]	@ (8014e1c <ip4_output_if_src+0x14c>)
 8014cf0:	f001 f9e4 	bl	80160bc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d060      	beq.n	8014dbc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014cfa:	2314      	movs	r3, #20
 8014cfc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014cfe:	2114      	movs	r1, #20
 8014d00:	68f8      	ldr	r0, [r7, #12]
 8014d02:	f7f8 fd3b 	bl	800d77c <pbuf_add_header>
 8014d06:	4603      	mov	r3, r0
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d002      	beq.n	8014d12 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014d0c:	f06f 0301 	mvn.w	r3, #1
 8014d10:	e07c      	b.n	8014e0c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	685b      	ldr	r3, [r3, #4]
 8014d16:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	895b      	ldrh	r3, [r3, #10]
 8014d1c:	2b13      	cmp	r3, #19
 8014d1e:	d806      	bhi.n	8014d2e <ip4_output_if_src+0x5e>
 8014d20:	4b3c      	ldr	r3, [pc, #240]	@ (8014e14 <ip4_output_if_src+0x144>)
 8014d22:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8014d26:	493e      	ldr	r1, [pc, #248]	@ (8014e20 <ip4_output_if_src+0x150>)
 8014d28:	483c      	ldr	r0, [pc, #240]	@ (8014e1c <ip4_output_if_src+0x14c>)
 8014d2a:	f001 f9c7 	bl	80160bc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014d2e:	69fb      	ldr	r3, [r7, #28]
 8014d30:	78fa      	ldrb	r2, [r7, #3]
 8014d32:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014d34:	69fb      	ldr	r3, [r7, #28]
 8014d36:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8014d3a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	681a      	ldr	r2, [r3, #0]
 8014d40:	69fb      	ldr	r3, [r7, #28]
 8014d42:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014d44:	8b7b      	ldrh	r3, [r7, #26]
 8014d46:	089b      	lsrs	r3, r3, #2
 8014d48:	b29b      	uxth	r3, r3
 8014d4a:	b2db      	uxtb	r3, r3
 8014d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d50:	b2da      	uxtb	r2, r3
 8014d52:	69fb      	ldr	r3, [r7, #28]
 8014d54:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014d56:	69fb      	ldr	r3, [r7, #28]
 8014d58:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8014d5c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	891b      	ldrh	r3, [r3, #8]
 8014d62:	4618      	mov	r0, r3
 8014d64:	f7f7 f8e2 	bl	800bf2c <lwip_htons>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	461a      	mov	r2, r3
 8014d6c:	69fb      	ldr	r3, [r7, #28]
 8014d6e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014d70:	69fb      	ldr	r3, [r7, #28]
 8014d72:	2200      	movs	r2, #0
 8014d74:	719a      	strb	r2, [r3, #6]
 8014d76:	2200      	movs	r2, #0
 8014d78:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014d7a:	4b2a      	ldr	r3, [pc, #168]	@ (8014e24 <ip4_output_if_src+0x154>)
 8014d7c:	881b      	ldrh	r3, [r3, #0]
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f7f7 f8d4 	bl	800bf2c <lwip_htons>
 8014d84:	4603      	mov	r3, r0
 8014d86:	461a      	mov	r2, r3
 8014d88:	69fb      	ldr	r3, [r7, #28]
 8014d8a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014d8c:	4b25      	ldr	r3, [pc, #148]	@ (8014e24 <ip4_output_if_src+0x154>)
 8014d8e:	881b      	ldrh	r3, [r3, #0]
 8014d90:	3301      	adds	r3, #1
 8014d92:	b29a      	uxth	r2, r3
 8014d94:	4b23      	ldr	r3, [pc, #140]	@ (8014e24 <ip4_output_if_src+0x154>)
 8014d96:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d104      	bne.n	8014da8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014d9e:	4b22      	ldr	r3, [pc, #136]	@ (8014e28 <ip4_output_if_src+0x158>)
 8014da0:	681a      	ldr	r2, [r3, #0]
 8014da2:	69fb      	ldr	r3, [r7, #28]
 8014da4:	60da      	str	r2, [r3, #12]
 8014da6:	e003      	b.n	8014db0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014da8:	68bb      	ldr	r3, [r7, #8]
 8014daa:	681a      	ldr	r2, [r3, #0]
 8014dac:	69fb      	ldr	r3, [r7, #28]
 8014dae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014db0:	69fb      	ldr	r3, [r7, #28]
 8014db2:	2200      	movs	r2, #0
 8014db4:	729a      	strb	r2, [r3, #10]
 8014db6:	2200      	movs	r2, #0
 8014db8:	72da      	strb	r2, [r3, #11]
 8014dba:	e00f      	b.n	8014ddc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	895b      	ldrh	r3, [r3, #10]
 8014dc0:	2b13      	cmp	r3, #19
 8014dc2:	d802      	bhi.n	8014dca <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014dc4:	f06f 0301 	mvn.w	r3, #1
 8014dc8:	e020      	b.n	8014e0c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	685b      	ldr	r3, [r3, #4]
 8014dce:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014dd0:	69fb      	ldr	r3, [r7, #28]
 8014dd2:	691b      	ldr	r3, [r3, #16]
 8014dd4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014dd6:	f107 0314 	add.w	r3, r7, #20
 8014dda:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dde:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d00c      	beq.n	8014dfe <ip4_output_if_src+0x12e>
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	891a      	ldrh	r2, [r3, #8]
 8014de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014dec:	429a      	cmp	r2, r3
 8014dee:	d906      	bls.n	8014dfe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014df0:	687a      	ldr	r2, [r7, #4]
 8014df2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014df4:	68f8      	ldr	r0, [r7, #12]
 8014df6:	f000 fd53 	bl	80158a0 <ip4_frag>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	e006      	b.n	8014e0c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e00:	695b      	ldr	r3, [r3, #20]
 8014e02:	687a      	ldr	r2, [r7, #4]
 8014e04:	68f9      	ldr	r1, [r7, #12]
 8014e06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014e08:	4798      	blx	r3
 8014e0a:	4603      	mov	r3, r0
}
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	3720      	adds	r7, #32
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bd80      	pop	{r7, pc}
 8014e14:	08019d50 	.word	0x08019d50
 8014e18:	08019d84 	.word	0x08019d84
 8014e1c:	08019d90 	.word	0x08019d90
 8014e20:	08019db8 	.word	0x08019db8
 8014e24:	2400cb1e 	.word	0x2400cb1e
 8014e28:	0801a1f4 	.word	0x0801a1f4

08014e2c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014e2c:	b480      	push	{r7}
 8014e2e:	b085      	sub	sp, #20
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
 8014e34:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e40:	d002      	beq.n	8014e48 <ip4_addr_isbroadcast_u32+0x1c>
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d101      	bne.n	8014e4c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014e48:	2301      	movs	r3, #1
 8014e4a:	e02a      	b.n	8014ea2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014e4c:	683b      	ldr	r3, [r7, #0]
 8014e4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014e52:	f003 0302 	and.w	r3, r3, #2
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d101      	bne.n	8014e5e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	e021      	b.n	8014ea2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	3304      	adds	r3, #4
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	687a      	ldr	r2, [r7, #4]
 8014e66:	429a      	cmp	r2, r3
 8014e68:	d101      	bne.n	8014e6e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	e019      	b.n	8014ea2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014e6e:	68fa      	ldr	r2, [r7, #12]
 8014e70:	683b      	ldr	r3, [r7, #0]
 8014e72:	3304      	adds	r3, #4
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	405a      	eors	r2, r3
 8014e78:	683b      	ldr	r3, [r7, #0]
 8014e7a:	3308      	adds	r3, #8
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	4013      	ands	r3, r2
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d10d      	bne.n	8014ea0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014e84:	683b      	ldr	r3, [r7, #0]
 8014e86:	3308      	adds	r3, #8
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	43da      	mvns	r2, r3
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014e90:	683b      	ldr	r3, [r7, #0]
 8014e92:	3308      	adds	r3, #8
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014e98:	429a      	cmp	r2, r3
 8014e9a:	d101      	bne.n	8014ea0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	e000      	b.n	8014ea2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014ea0:	2300      	movs	r3, #0
  }
}
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	3714      	adds	r7, #20
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eac:	4770      	bx	lr
	...

08014eb0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b084      	sub	sp, #16
 8014eb4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014eba:	4b12      	ldr	r3, [pc, #72]	@ (8014f04 <ip_reass_tmr+0x54>)
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014ec0:	e018      	b.n	8014ef4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	7fdb      	ldrb	r3, [r3, #31]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d00b      	beq.n	8014ee2 <ip_reass_tmr+0x32>
      r->timer--;
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	7fdb      	ldrb	r3, [r3, #31]
 8014ece:	3b01      	subs	r3, #1
 8014ed0:	b2da      	uxtb	r2, r3
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	60fb      	str	r3, [r7, #12]
 8014ee0:	e008      	b.n	8014ef4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014eec:	68b9      	ldr	r1, [r7, #8]
 8014eee:	6878      	ldr	r0, [r7, #4]
 8014ef0:	f000 f80a 	bl	8014f08 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d1e3      	bne.n	8014ec2 <ip_reass_tmr+0x12>
    }
  }
}
 8014efa:	bf00      	nop
 8014efc:	bf00      	nop
 8014efe:	3710      	adds	r7, #16
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}
 8014f04:	2400cb20 	.word	0x2400cb20

08014f08 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b088      	sub	sp, #32
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014f12:	2300      	movs	r3, #0
 8014f14:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014f16:	683a      	ldr	r2, [r7, #0]
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	429a      	cmp	r2, r3
 8014f1c:	d105      	bne.n	8014f2a <ip_reass_free_complete_datagram+0x22>
 8014f1e:	4b45      	ldr	r3, [pc, #276]	@ (8015034 <ip_reass_free_complete_datagram+0x12c>)
 8014f20:	22ab      	movs	r2, #171	@ 0xab
 8014f22:	4945      	ldr	r1, [pc, #276]	@ (8015038 <ip_reass_free_complete_datagram+0x130>)
 8014f24:	4845      	ldr	r0, [pc, #276]	@ (801503c <ip_reass_free_complete_datagram+0x134>)
 8014f26:	f001 f8c9 	bl	80160bc <iprintf>
  if (prev != NULL) {
 8014f2a:	683b      	ldr	r3, [r7, #0]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d00a      	beq.n	8014f46 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014f30:	683b      	ldr	r3, [r7, #0]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	687a      	ldr	r2, [r7, #4]
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d005      	beq.n	8014f46 <ip_reass_free_complete_datagram+0x3e>
 8014f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8015034 <ip_reass_free_complete_datagram+0x12c>)
 8014f3c:	22ad      	movs	r2, #173	@ 0xad
 8014f3e:	4940      	ldr	r1, [pc, #256]	@ (8015040 <ip_reass_free_complete_datagram+0x138>)
 8014f40:	483e      	ldr	r0, [pc, #248]	@ (801503c <ip_reass_free_complete_datagram+0x134>)
 8014f42:	f001 f8bb 	bl	80160bc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	685b      	ldr	r3, [r3, #4]
 8014f4a:	685b      	ldr	r3, [r3, #4]
 8014f4c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014f4e:	697b      	ldr	r3, [r7, #20]
 8014f50:	889b      	ldrh	r3, [r3, #4]
 8014f52:	b29b      	uxth	r3, r3
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d12a      	bne.n	8014fae <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	685b      	ldr	r3, [r3, #4]
 8014f5c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014f5e:	697b      	ldr	r3, [r7, #20]
 8014f60:	681a      	ldr	r2, [r3, #0]
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014f66:	69bb      	ldr	r3, [r7, #24]
 8014f68:	6858      	ldr	r0, [r3, #4]
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	3308      	adds	r3, #8
 8014f6e:	2214      	movs	r2, #20
 8014f70:	4619      	mov	r1, r3
 8014f72:	f001 f9da 	bl	801632a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014f76:	2101      	movs	r1, #1
 8014f78:	69b8      	ldr	r0, [r7, #24]
 8014f7a:	f7ff fc3d 	bl	80147f8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014f7e:	69b8      	ldr	r0, [r7, #24]
 8014f80:	f7f8 fd20 	bl	800d9c4 <pbuf_clen>
 8014f84:	4603      	mov	r3, r0
 8014f86:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014f88:	8bfa      	ldrh	r2, [r7, #30]
 8014f8a:	8a7b      	ldrh	r3, [r7, #18]
 8014f8c:	4413      	add	r3, r2
 8014f8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014f92:	db05      	blt.n	8014fa0 <ip_reass_free_complete_datagram+0x98>
 8014f94:	4b27      	ldr	r3, [pc, #156]	@ (8015034 <ip_reass_free_complete_datagram+0x12c>)
 8014f96:	22bc      	movs	r2, #188	@ 0xbc
 8014f98:	492a      	ldr	r1, [pc, #168]	@ (8015044 <ip_reass_free_complete_datagram+0x13c>)
 8014f9a:	4828      	ldr	r0, [pc, #160]	@ (801503c <ip_reass_free_complete_datagram+0x134>)
 8014f9c:	f001 f88e 	bl	80160bc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014fa0:	8bfa      	ldrh	r2, [r7, #30]
 8014fa2:	8a7b      	ldrh	r3, [r7, #18]
 8014fa4:	4413      	add	r3, r2
 8014fa6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014fa8:	69b8      	ldr	r0, [r7, #24]
 8014faa:	f7f8 fc7d 	bl	800d8a8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	685b      	ldr	r3, [r3, #4]
 8014fb2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014fb4:	e01f      	b.n	8014ff6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014fb6:	69bb      	ldr	r3, [r7, #24]
 8014fb8:	685b      	ldr	r3, [r3, #4]
 8014fba:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014fbc:	69bb      	ldr	r3, [r7, #24]
 8014fbe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014fc0:	697b      	ldr	r3, [r7, #20]
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014fc6:	68f8      	ldr	r0, [r7, #12]
 8014fc8:	f7f8 fcfc 	bl	800d9c4 <pbuf_clen>
 8014fcc:	4603      	mov	r3, r0
 8014fce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014fd0:	8bfa      	ldrh	r2, [r7, #30]
 8014fd2:	8a7b      	ldrh	r3, [r7, #18]
 8014fd4:	4413      	add	r3, r2
 8014fd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014fda:	db05      	blt.n	8014fe8 <ip_reass_free_complete_datagram+0xe0>
 8014fdc:	4b15      	ldr	r3, [pc, #84]	@ (8015034 <ip_reass_free_complete_datagram+0x12c>)
 8014fde:	22cc      	movs	r2, #204	@ 0xcc
 8014fe0:	4918      	ldr	r1, [pc, #96]	@ (8015044 <ip_reass_free_complete_datagram+0x13c>)
 8014fe2:	4816      	ldr	r0, [pc, #88]	@ (801503c <ip_reass_free_complete_datagram+0x134>)
 8014fe4:	f001 f86a 	bl	80160bc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014fe8:	8bfa      	ldrh	r2, [r7, #30]
 8014fea:	8a7b      	ldrh	r3, [r7, #18]
 8014fec:	4413      	add	r3, r2
 8014fee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014ff0:	68f8      	ldr	r0, [r7, #12]
 8014ff2:	f7f8 fc59 	bl	800d8a8 <pbuf_free>
  while (p != NULL) {
 8014ff6:	69bb      	ldr	r3, [r7, #24]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d1dc      	bne.n	8014fb6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014ffc:	6839      	ldr	r1, [r7, #0]
 8014ffe:	6878      	ldr	r0, [r7, #4]
 8015000:	f000 f8c2 	bl	8015188 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015004:	4b10      	ldr	r3, [pc, #64]	@ (8015048 <ip_reass_free_complete_datagram+0x140>)
 8015006:	881b      	ldrh	r3, [r3, #0]
 8015008:	8bfa      	ldrh	r2, [r7, #30]
 801500a:	429a      	cmp	r2, r3
 801500c:	d905      	bls.n	801501a <ip_reass_free_complete_datagram+0x112>
 801500e:	4b09      	ldr	r3, [pc, #36]	@ (8015034 <ip_reass_free_complete_datagram+0x12c>)
 8015010:	22d2      	movs	r2, #210	@ 0xd2
 8015012:	490e      	ldr	r1, [pc, #56]	@ (801504c <ip_reass_free_complete_datagram+0x144>)
 8015014:	4809      	ldr	r0, [pc, #36]	@ (801503c <ip_reass_free_complete_datagram+0x134>)
 8015016:	f001 f851 	bl	80160bc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801501a:	4b0b      	ldr	r3, [pc, #44]	@ (8015048 <ip_reass_free_complete_datagram+0x140>)
 801501c:	881a      	ldrh	r2, [r3, #0]
 801501e:	8bfb      	ldrh	r3, [r7, #30]
 8015020:	1ad3      	subs	r3, r2, r3
 8015022:	b29a      	uxth	r2, r3
 8015024:	4b08      	ldr	r3, [pc, #32]	@ (8015048 <ip_reass_free_complete_datagram+0x140>)
 8015026:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015028:	8bfb      	ldrh	r3, [r7, #30]
}
 801502a:	4618      	mov	r0, r3
 801502c:	3720      	adds	r7, #32
 801502e:	46bd      	mov	sp, r7
 8015030:	bd80      	pop	{r7, pc}
 8015032:	bf00      	nop
 8015034:	08019de8 	.word	0x08019de8
 8015038:	08019e24 	.word	0x08019e24
 801503c:	08019e30 	.word	0x08019e30
 8015040:	08019e58 	.word	0x08019e58
 8015044:	08019e6c 	.word	0x08019e6c
 8015048:	2400cb24 	.word	0x2400cb24
 801504c:	08019e8c 	.word	0x08019e8c

08015050 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b08a      	sub	sp, #40	@ 0x28
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
 8015058:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801505a:	2300      	movs	r3, #0
 801505c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801505e:	2300      	movs	r3, #0
 8015060:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015062:	2300      	movs	r3, #0
 8015064:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015066:	2300      	movs	r3, #0
 8015068:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801506a:	2300      	movs	r3, #0
 801506c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801506e:	4b28      	ldr	r3, [pc, #160]	@ (8015110 <ip_reass_remove_oldest_datagram+0xc0>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015074:	e030      	b.n	80150d8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015078:	695a      	ldr	r2, [r3, #20]
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	68db      	ldr	r3, [r3, #12]
 801507e:	429a      	cmp	r2, r3
 8015080:	d10c      	bne.n	801509c <ip_reass_remove_oldest_datagram+0x4c>
 8015082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015084:	699a      	ldr	r2, [r3, #24]
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	691b      	ldr	r3, [r3, #16]
 801508a:	429a      	cmp	r2, r3
 801508c:	d106      	bne.n	801509c <ip_reass_remove_oldest_datagram+0x4c>
 801508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015090:	899a      	ldrh	r2, [r3, #12]
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	889b      	ldrh	r3, [r3, #4]
 8015096:	b29b      	uxth	r3, r3
 8015098:	429a      	cmp	r2, r3
 801509a:	d014      	beq.n	80150c6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801509c:	693b      	ldr	r3, [r7, #16]
 801509e:	3301      	adds	r3, #1
 80150a0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80150a2:	6a3b      	ldr	r3, [r7, #32]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d104      	bne.n	80150b2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80150a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150aa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80150ac:	69fb      	ldr	r3, [r7, #28]
 80150ae:	61bb      	str	r3, [r7, #24]
 80150b0:	e009      	b.n	80150c6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80150b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150b4:	7fda      	ldrb	r2, [r3, #31]
 80150b6:	6a3b      	ldr	r3, [r7, #32]
 80150b8:	7fdb      	ldrb	r3, [r3, #31]
 80150ba:	429a      	cmp	r2, r3
 80150bc:	d803      	bhi.n	80150c6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80150be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150c0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80150c2:	69fb      	ldr	r3, [r7, #28]
 80150c4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80150c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d001      	beq.n	80150d2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80150ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150d0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80150d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80150d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d1cb      	bne.n	8015076 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80150de:	6a3b      	ldr	r3, [r7, #32]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d008      	beq.n	80150f6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80150e4:	69b9      	ldr	r1, [r7, #24]
 80150e6:	6a38      	ldr	r0, [r7, #32]
 80150e8:	f7ff ff0e 	bl	8014f08 <ip_reass_free_complete_datagram>
 80150ec:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80150ee:	697a      	ldr	r2, [r7, #20]
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	4413      	add	r3, r2
 80150f4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80150f6:	697a      	ldr	r2, [r7, #20]
 80150f8:	683b      	ldr	r3, [r7, #0]
 80150fa:	429a      	cmp	r2, r3
 80150fc:	da02      	bge.n	8015104 <ip_reass_remove_oldest_datagram+0xb4>
 80150fe:	693b      	ldr	r3, [r7, #16]
 8015100:	2b01      	cmp	r3, #1
 8015102:	dcac      	bgt.n	801505e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015104:	697b      	ldr	r3, [r7, #20]
}
 8015106:	4618      	mov	r0, r3
 8015108:	3728      	adds	r7, #40	@ 0x28
 801510a:	46bd      	mov	sp, r7
 801510c:	bd80      	pop	{r7, pc}
 801510e:	bf00      	nop
 8015110:	2400cb20 	.word	0x2400cb20

08015114 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b084      	sub	sp, #16
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
 801511c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801511e:	2004      	movs	r0, #4
 8015120:	f7f7 fca4 	bl	800ca6c <memp_malloc>
 8015124:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d110      	bne.n	801514e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801512c:	6839      	ldr	r1, [r7, #0]
 801512e:	6878      	ldr	r0, [r7, #4]
 8015130:	f7ff ff8e 	bl	8015050 <ip_reass_remove_oldest_datagram>
 8015134:	4602      	mov	r2, r0
 8015136:	683b      	ldr	r3, [r7, #0]
 8015138:	4293      	cmp	r3, r2
 801513a:	dc03      	bgt.n	8015144 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801513c:	2004      	movs	r0, #4
 801513e:	f7f7 fc95 	bl	800ca6c <memp_malloc>
 8015142:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d101      	bne.n	801514e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801514a:	2300      	movs	r3, #0
 801514c:	e016      	b.n	801517c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801514e:	2220      	movs	r2, #32
 8015150:	2100      	movs	r1, #0
 8015152:	68f8      	ldr	r0, [r7, #12]
 8015154:	f001 f817 	bl	8016186 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	220f      	movs	r2, #15
 801515c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801515e:	4b09      	ldr	r3, [pc, #36]	@ (8015184 <ip_reass_enqueue_new_datagram+0x70>)
 8015160:	681a      	ldr	r2, [r3, #0]
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015166:	4a07      	ldr	r2, [pc, #28]	@ (8015184 <ip_reass_enqueue_new_datagram+0x70>)
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	3308      	adds	r3, #8
 8015170:	2214      	movs	r2, #20
 8015172:	6879      	ldr	r1, [r7, #4]
 8015174:	4618      	mov	r0, r3
 8015176:	f001 f8d8 	bl	801632a <memcpy>
  return ipr;
 801517a:	68fb      	ldr	r3, [r7, #12]
}
 801517c:	4618      	mov	r0, r3
 801517e:	3710      	adds	r7, #16
 8015180:	46bd      	mov	sp, r7
 8015182:	bd80      	pop	{r7, pc}
 8015184:	2400cb20 	.word	0x2400cb20

08015188 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b082      	sub	sp, #8
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
 8015190:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015192:	4b10      	ldr	r3, [pc, #64]	@ (80151d4 <ip_reass_dequeue_datagram+0x4c>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	687a      	ldr	r2, [r7, #4]
 8015198:	429a      	cmp	r2, r3
 801519a:	d104      	bne.n	80151a6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	4a0c      	ldr	r2, [pc, #48]	@ (80151d4 <ip_reass_dequeue_datagram+0x4c>)
 80151a2:	6013      	str	r3, [r2, #0]
 80151a4:	e00d      	b.n	80151c2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80151a6:	683b      	ldr	r3, [r7, #0]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d106      	bne.n	80151ba <ip_reass_dequeue_datagram+0x32>
 80151ac:	4b0a      	ldr	r3, [pc, #40]	@ (80151d8 <ip_reass_dequeue_datagram+0x50>)
 80151ae:	f240 1245 	movw	r2, #325	@ 0x145
 80151b2:	490a      	ldr	r1, [pc, #40]	@ (80151dc <ip_reass_dequeue_datagram+0x54>)
 80151b4:	480a      	ldr	r0, [pc, #40]	@ (80151e0 <ip_reass_dequeue_datagram+0x58>)
 80151b6:	f000 ff81 	bl	80160bc <iprintf>
    prev->next = ipr->next;
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	681a      	ldr	r2, [r3, #0]
 80151be:	683b      	ldr	r3, [r7, #0]
 80151c0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80151c2:	6879      	ldr	r1, [r7, #4]
 80151c4:	2004      	movs	r0, #4
 80151c6:	f7f7 fcc7 	bl	800cb58 <memp_free>
}
 80151ca:	bf00      	nop
 80151cc:	3708      	adds	r7, #8
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd80      	pop	{r7, pc}
 80151d2:	bf00      	nop
 80151d4:	2400cb20 	.word	0x2400cb20
 80151d8:	08019de8 	.word	0x08019de8
 80151dc:	08019eb0 	.word	0x08019eb0
 80151e0:	08019e30 	.word	0x08019e30

080151e4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b08c      	sub	sp, #48	@ 0x30
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	60f8      	str	r0, [r7, #12]
 80151ec:	60b9      	str	r1, [r7, #8]
 80151ee:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80151f0:	2300      	movs	r3, #0
 80151f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80151f4:	2301      	movs	r3, #1
 80151f6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80151f8:	68bb      	ldr	r3, [r7, #8]
 80151fa:	685b      	ldr	r3, [r3, #4]
 80151fc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80151fe:	69fb      	ldr	r3, [r7, #28]
 8015200:	885b      	ldrh	r3, [r3, #2]
 8015202:	b29b      	uxth	r3, r3
 8015204:	4618      	mov	r0, r3
 8015206:	f7f6 fe91 	bl	800bf2c <lwip_htons>
 801520a:	4603      	mov	r3, r0
 801520c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801520e:	69fb      	ldr	r3, [r7, #28]
 8015210:	781b      	ldrb	r3, [r3, #0]
 8015212:	f003 030f 	and.w	r3, r3, #15
 8015216:	b2db      	uxtb	r3, r3
 8015218:	009b      	lsls	r3, r3, #2
 801521a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801521c:	7e7b      	ldrb	r3, [r7, #25]
 801521e:	b29b      	uxth	r3, r3
 8015220:	8b7a      	ldrh	r2, [r7, #26]
 8015222:	429a      	cmp	r2, r3
 8015224:	d202      	bcs.n	801522c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015226:	f04f 33ff 	mov.w	r3, #4294967295
 801522a:	e135      	b.n	8015498 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801522c:	7e7b      	ldrb	r3, [r7, #25]
 801522e:	b29b      	uxth	r3, r3
 8015230:	8b7a      	ldrh	r2, [r7, #26]
 8015232:	1ad3      	subs	r3, r2, r3
 8015234:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015236:	69fb      	ldr	r3, [r7, #28]
 8015238:	88db      	ldrh	r3, [r3, #6]
 801523a:	b29b      	uxth	r3, r3
 801523c:	4618      	mov	r0, r3
 801523e:	f7f6 fe75 	bl	800bf2c <lwip_htons>
 8015242:	4603      	mov	r3, r0
 8015244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015248:	b29b      	uxth	r3, r3
 801524a:	00db      	lsls	r3, r3, #3
 801524c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801524e:	68bb      	ldr	r3, [r7, #8]
 8015250:	685b      	ldr	r3, [r3, #4]
 8015252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8015254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015256:	2200      	movs	r2, #0
 8015258:	701a      	strb	r2, [r3, #0]
 801525a:	2200      	movs	r2, #0
 801525c:	705a      	strb	r2, [r3, #1]
 801525e:	2200      	movs	r2, #0
 8015260:	709a      	strb	r2, [r3, #2]
 8015262:	2200      	movs	r2, #0
 8015264:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015268:	8afa      	ldrh	r2, [r7, #22]
 801526a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801526c:	8afa      	ldrh	r2, [r7, #22]
 801526e:	8b7b      	ldrh	r3, [r7, #26]
 8015270:	4413      	add	r3, r2
 8015272:	b29a      	uxth	r2, r3
 8015274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015276:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801527a:	88db      	ldrh	r3, [r3, #6]
 801527c:	b29b      	uxth	r3, r3
 801527e:	8afa      	ldrh	r2, [r7, #22]
 8015280:	429a      	cmp	r2, r3
 8015282:	d902      	bls.n	801528a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015284:	f04f 33ff 	mov.w	r3, #4294967295
 8015288:	e106      	b.n	8015498 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	685b      	ldr	r3, [r3, #4]
 801528e:	627b      	str	r3, [r7, #36]	@ 0x24
 8015290:	e068      	b.n	8015364 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015294:	685b      	ldr	r3, [r3, #4]
 8015296:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801529a:	889b      	ldrh	r3, [r3, #4]
 801529c:	b29a      	uxth	r2, r3
 801529e:	693b      	ldr	r3, [r7, #16]
 80152a0:	889b      	ldrh	r3, [r3, #4]
 80152a2:	b29b      	uxth	r3, r3
 80152a4:	429a      	cmp	r2, r3
 80152a6:	d235      	bcs.n	8015314 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80152a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80152ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d020      	beq.n	80152f6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80152b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152b6:	889b      	ldrh	r3, [r3, #4]
 80152b8:	b29a      	uxth	r2, r3
 80152ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152bc:	88db      	ldrh	r3, [r3, #6]
 80152be:	b29b      	uxth	r3, r3
 80152c0:	429a      	cmp	r2, r3
 80152c2:	d307      	bcc.n	80152d4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80152c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152c6:	88db      	ldrh	r3, [r3, #6]
 80152c8:	b29a      	uxth	r2, r3
 80152ca:	693b      	ldr	r3, [r7, #16]
 80152cc:	889b      	ldrh	r3, [r3, #4]
 80152ce:	b29b      	uxth	r3, r3
 80152d0:	429a      	cmp	r2, r3
 80152d2:	d902      	bls.n	80152da <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80152d4:	f04f 33ff 	mov.w	r3, #4294967295
 80152d8:	e0de      	b.n	8015498 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80152da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152dc:	68ba      	ldr	r2, [r7, #8]
 80152de:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80152e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152e2:	88db      	ldrh	r3, [r3, #6]
 80152e4:	b29a      	uxth	r2, r3
 80152e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152e8:	889b      	ldrh	r3, [r3, #4]
 80152ea:	b29b      	uxth	r3, r3
 80152ec:	429a      	cmp	r2, r3
 80152ee:	d03d      	beq.n	801536c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80152f0:	2300      	movs	r3, #0
 80152f2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80152f4:	e03a      	b.n	801536c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80152f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152f8:	88db      	ldrh	r3, [r3, #6]
 80152fa:	b29a      	uxth	r2, r3
 80152fc:	693b      	ldr	r3, [r7, #16]
 80152fe:	889b      	ldrh	r3, [r3, #4]
 8015300:	b29b      	uxth	r3, r3
 8015302:	429a      	cmp	r2, r3
 8015304:	d902      	bls.n	801530c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015306:	f04f 33ff 	mov.w	r3, #4294967295
 801530a:	e0c5      	b.n	8015498 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	68ba      	ldr	r2, [r7, #8]
 8015310:	605a      	str	r2, [r3, #4]
      break;
 8015312:	e02b      	b.n	801536c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015316:	889b      	ldrh	r3, [r3, #4]
 8015318:	b29a      	uxth	r2, r3
 801531a:	693b      	ldr	r3, [r7, #16]
 801531c:	889b      	ldrh	r3, [r3, #4]
 801531e:	b29b      	uxth	r3, r3
 8015320:	429a      	cmp	r2, r3
 8015322:	d102      	bne.n	801532a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015324:	f04f 33ff 	mov.w	r3, #4294967295
 8015328:	e0b6      	b.n	8015498 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801532a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801532c:	889b      	ldrh	r3, [r3, #4]
 801532e:	b29a      	uxth	r2, r3
 8015330:	693b      	ldr	r3, [r7, #16]
 8015332:	88db      	ldrh	r3, [r3, #6]
 8015334:	b29b      	uxth	r3, r3
 8015336:	429a      	cmp	r2, r3
 8015338:	d202      	bcs.n	8015340 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801533a:	f04f 33ff 	mov.w	r3, #4294967295
 801533e:	e0ab      	b.n	8015498 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015342:	2b00      	cmp	r3, #0
 8015344:	d009      	beq.n	801535a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015348:	88db      	ldrh	r3, [r3, #6]
 801534a:	b29a      	uxth	r2, r3
 801534c:	693b      	ldr	r3, [r7, #16]
 801534e:	889b      	ldrh	r3, [r3, #4]
 8015350:	b29b      	uxth	r3, r3
 8015352:	429a      	cmp	r2, r3
 8015354:	d001      	beq.n	801535a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015356:	2300      	movs	r3, #0
 8015358:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801535a:	693b      	ldr	r3, [r7, #16]
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8015360:	693b      	ldr	r3, [r7, #16]
 8015362:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8015364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015366:	2b00      	cmp	r3, #0
 8015368:	d193      	bne.n	8015292 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801536a:	e000      	b.n	801536e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801536c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015370:	2b00      	cmp	r3, #0
 8015372:	d12d      	bne.n	80153d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015376:	2b00      	cmp	r3, #0
 8015378:	d01c      	beq.n	80153b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801537a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801537c:	88db      	ldrh	r3, [r3, #6]
 801537e:	b29a      	uxth	r2, r3
 8015380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015382:	889b      	ldrh	r3, [r3, #4]
 8015384:	b29b      	uxth	r3, r3
 8015386:	429a      	cmp	r2, r3
 8015388:	d906      	bls.n	8015398 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801538a:	4b45      	ldr	r3, [pc, #276]	@ (80154a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801538c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8015390:	4944      	ldr	r1, [pc, #272]	@ (80154a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015392:	4845      	ldr	r0, [pc, #276]	@ (80154a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015394:	f000 fe92 	bl	80160bc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801539a:	68ba      	ldr	r2, [r7, #8]
 801539c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801539e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153a0:	88db      	ldrh	r3, [r3, #6]
 80153a2:	b29a      	uxth	r2, r3
 80153a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153a6:	889b      	ldrh	r3, [r3, #4]
 80153a8:	b29b      	uxth	r3, r3
 80153aa:	429a      	cmp	r2, r3
 80153ac:	d010      	beq.n	80153d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80153ae:	2300      	movs	r3, #0
 80153b0:	623b      	str	r3, [r7, #32]
 80153b2:	e00d      	b.n	80153d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	685b      	ldr	r3, [r3, #4]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d006      	beq.n	80153ca <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80153bc:	4b38      	ldr	r3, [pc, #224]	@ (80154a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80153be:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80153c2:	493a      	ldr	r1, [pc, #232]	@ (80154ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80153c4:	4838      	ldr	r0, [pc, #224]	@ (80154a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80153c6:	f000 fe79 	bl	80160bc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	68ba      	ldr	r2, [r7, #8]
 80153ce:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d105      	bne.n	80153e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	7f9b      	ldrb	r3, [r3, #30]
 80153da:	f003 0301 	and.w	r3, r3, #1
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d059      	beq.n	8015496 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80153e2:	6a3b      	ldr	r3, [r7, #32]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d04f      	beq.n	8015488 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	685b      	ldr	r3, [r3, #4]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d006      	beq.n	80153fe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	685b      	ldr	r3, [r3, #4]
 80153f4:	685b      	ldr	r3, [r3, #4]
 80153f6:	889b      	ldrh	r3, [r3, #4]
 80153f8:	b29b      	uxth	r3, r3
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d002      	beq.n	8015404 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80153fe:	2300      	movs	r3, #0
 8015400:	623b      	str	r3, [r7, #32]
 8015402:	e041      	b.n	8015488 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015406:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8015408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801540e:	e012      	b.n	8015436 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015412:	685b      	ldr	r3, [r3, #4]
 8015414:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8015416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015418:	88db      	ldrh	r3, [r3, #6]
 801541a:	b29a      	uxth	r2, r3
 801541c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801541e:	889b      	ldrh	r3, [r3, #4]
 8015420:	b29b      	uxth	r3, r3
 8015422:	429a      	cmp	r2, r3
 8015424:	d002      	beq.n	801542c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015426:	2300      	movs	r3, #0
 8015428:	623b      	str	r3, [r7, #32]
            break;
 801542a:	e007      	b.n	801543c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801542c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801542e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8015430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015438:	2b00      	cmp	r3, #0
 801543a:	d1e9      	bne.n	8015410 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801543c:	6a3b      	ldr	r3, [r7, #32]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d022      	beq.n	8015488 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	685b      	ldr	r3, [r3, #4]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d106      	bne.n	8015458 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801544a:	4b15      	ldr	r3, [pc, #84]	@ (80154a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801544c:	f240 12df 	movw	r2, #479	@ 0x1df
 8015450:	4917      	ldr	r1, [pc, #92]	@ (80154b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015452:	4815      	ldr	r0, [pc, #84]	@ (80154a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015454:	f000 fe32 	bl	80160bc <iprintf>
          LWIP_ASSERT("sanity check",
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	685b      	ldr	r3, [r3, #4]
 801545c:	685b      	ldr	r3, [r3, #4]
 801545e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015460:	429a      	cmp	r2, r3
 8015462:	d106      	bne.n	8015472 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015464:	4b0e      	ldr	r3, [pc, #56]	@ (80154a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015466:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801546a:	4911      	ldr	r1, [pc, #68]	@ (80154b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801546c:	480e      	ldr	r0, [pc, #56]	@ (80154a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801546e:	f000 fe25 	bl	80160bc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d006      	beq.n	8015488 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801547a:	4b09      	ldr	r3, [pc, #36]	@ (80154a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801547c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8015480:	490c      	ldr	r1, [pc, #48]	@ (80154b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015482:	4809      	ldr	r0, [pc, #36]	@ (80154a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015484:	f000 fe1a 	bl	80160bc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015488:	6a3b      	ldr	r3, [r7, #32]
 801548a:	2b00      	cmp	r3, #0
 801548c:	bf14      	ite	ne
 801548e:	2301      	movne	r3, #1
 8015490:	2300      	moveq	r3, #0
 8015492:	b2db      	uxtb	r3, r3
 8015494:	e000      	b.n	8015498 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015496:	2300      	movs	r3, #0
}
 8015498:	4618      	mov	r0, r3
 801549a:	3730      	adds	r7, #48	@ 0x30
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}
 80154a0:	08019de8 	.word	0x08019de8
 80154a4:	08019ecc 	.word	0x08019ecc
 80154a8:	08019e30 	.word	0x08019e30
 80154ac:	08019eec 	.word	0x08019eec
 80154b0:	08019f24 	.word	0x08019f24
 80154b4:	08019f34 	.word	0x08019f34

080154b8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b08e      	sub	sp, #56	@ 0x38
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	685b      	ldr	r3, [r3, #4]
 80154c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80154c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154c8:	781b      	ldrb	r3, [r3, #0]
 80154ca:	f003 030f 	and.w	r3, r3, #15
 80154ce:	b2db      	uxtb	r3, r3
 80154d0:	009b      	lsls	r3, r3, #2
 80154d2:	b2db      	uxtb	r3, r3
 80154d4:	2b14      	cmp	r3, #20
 80154d6:	f040 8171 	bne.w	80157bc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80154da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154dc:	88db      	ldrh	r3, [r3, #6]
 80154de:	b29b      	uxth	r3, r3
 80154e0:	4618      	mov	r0, r3
 80154e2:	f7f6 fd23 	bl	800bf2c <lwip_htons>
 80154e6:	4603      	mov	r3, r0
 80154e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80154ec:	b29b      	uxth	r3, r3
 80154ee:	00db      	lsls	r3, r3, #3
 80154f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80154f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154f4:	885b      	ldrh	r3, [r3, #2]
 80154f6:	b29b      	uxth	r3, r3
 80154f8:	4618      	mov	r0, r3
 80154fa:	f7f6 fd17 	bl	800bf2c <lwip_htons>
 80154fe:	4603      	mov	r3, r0
 8015500:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015504:	781b      	ldrb	r3, [r3, #0]
 8015506:	f003 030f 	and.w	r3, r3, #15
 801550a:	b2db      	uxtb	r3, r3
 801550c:	009b      	lsls	r3, r3, #2
 801550e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8015512:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015516:	b29b      	uxth	r3, r3
 8015518:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801551a:	429a      	cmp	r2, r3
 801551c:	f0c0 8150 	bcc.w	80157c0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015520:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015524:	b29b      	uxth	r3, r3
 8015526:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015528:	1ad3      	subs	r3, r2, r3
 801552a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801552c:	6878      	ldr	r0, [r7, #4]
 801552e:	f7f8 fa49 	bl	800d9c4 <pbuf_clen>
 8015532:	4603      	mov	r3, r0
 8015534:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015536:	4b8c      	ldr	r3, [pc, #560]	@ (8015768 <ip4_reass+0x2b0>)
 8015538:	881b      	ldrh	r3, [r3, #0]
 801553a:	461a      	mov	r2, r3
 801553c:	8c3b      	ldrh	r3, [r7, #32]
 801553e:	4413      	add	r3, r2
 8015540:	2b0a      	cmp	r3, #10
 8015542:	dd10      	ble.n	8015566 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015544:	8c3b      	ldrh	r3, [r7, #32]
 8015546:	4619      	mov	r1, r3
 8015548:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801554a:	f7ff fd81 	bl	8015050 <ip_reass_remove_oldest_datagram>
 801554e:	4603      	mov	r3, r0
 8015550:	2b00      	cmp	r3, #0
 8015552:	f000 8137 	beq.w	80157c4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015556:	4b84      	ldr	r3, [pc, #528]	@ (8015768 <ip4_reass+0x2b0>)
 8015558:	881b      	ldrh	r3, [r3, #0]
 801555a:	461a      	mov	r2, r3
 801555c:	8c3b      	ldrh	r3, [r7, #32]
 801555e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015560:	2b0a      	cmp	r3, #10
 8015562:	f300 812f 	bgt.w	80157c4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015566:	4b81      	ldr	r3, [pc, #516]	@ (801576c <ip4_reass+0x2b4>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	633b      	str	r3, [r7, #48]	@ 0x30
 801556c:	e015      	b.n	801559a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015570:	695a      	ldr	r2, [r3, #20]
 8015572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015574:	68db      	ldr	r3, [r3, #12]
 8015576:	429a      	cmp	r2, r3
 8015578:	d10c      	bne.n	8015594 <ip4_reass+0xdc>
 801557a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801557c:	699a      	ldr	r2, [r3, #24]
 801557e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015580:	691b      	ldr	r3, [r3, #16]
 8015582:	429a      	cmp	r2, r3
 8015584:	d106      	bne.n	8015594 <ip4_reass+0xdc>
 8015586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015588:	899a      	ldrh	r2, [r3, #12]
 801558a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801558c:	889b      	ldrh	r3, [r3, #4]
 801558e:	b29b      	uxth	r3, r3
 8015590:	429a      	cmp	r2, r3
 8015592:	d006      	beq.n	80155a2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	633b      	str	r3, [r7, #48]	@ 0x30
 801559a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801559c:	2b00      	cmp	r3, #0
 801559e:	d1e6      	bne.n	801556e <ip4_reass+0xb6>
 80155a0:	e000      	b.n	80155a4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80155a2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80155a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d109      	bne.n	80155be <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80155aa:	8c3b      	ldrh	r3, [r7, #32]
 80155ac:	4619      	mov	r1, r3
 80155ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80155b0:	f7ff fdb0 	bl	8015114 <ip_reass_enqueue_new_datagram>
 80155b4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80155b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d11c      	bne.n	80155f6 <ip4_reass+0x13e>
      goto nullreturn;
 80155bc:	e105      	b.n	80157ca <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80155be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155c0:	88db      	ldrh	r3, [r3, #6]
 80155c2:	b29b      	uxth	r3, r3
 80155c4:	4618      	mov	r0, r3
 80155c6:	f7f6 fcb1 	bl	800bf2c <lwip_htons>
 80155ca:	4603      	mov	r3, r0
 80155cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d110      	bne.n	80155f6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80155d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155d6:	89db      	ldrh	r3, [r3, #14]
 80155d8:	4618      	mov	r0, r3
 80155da:	f7f6 fca7 	bl	800bf2c <lwip_htons>
 80155de:	4603      	mov	r3, r0
 80155e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d006      	beq.n	80155f6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80155e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155ea:	3308      	adds	r3, #8
 80155ec:	2214      	movs	r2, #20
 80155ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80155f0:	4618      	mov	r0, r3
 80155f2:	f000 fe9a 	bl	801632a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80155f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155f8:	88db      	ldrh	r3, [r3, #6]
 80155fa:	b29b      	uxth	r3, r3
 80155fc:	f003 0320 	and.w	r3, r3, #32
 8015600:	2b00      	cmp	r3, #0
 8015602:	bf0c      	ite	eq
 8015604:	2301      	moveq	r3, #1
 8015606:	2300      	movne	r3, #0
 8015608:	b2db      	uxtb	r3, r3
 801560a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801560c:	69fb      	ldr	r3, [r7, #28]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d00e      	beq.n	8015630 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015612:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015614:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015616:	4413      	add	r3, r2
 8015618:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801561a:	8b7a      	ldrh	r2, [r7, #26]
 801561c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801561e:	429a      	cmp	r2, r3
 8015620:	f0c0 80a0 	bcc.w	8015764 <ip4_reass+0x2ac>
 8015624:	8b7b      	ldrh	r3, [r7, #26]
 8015626:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801562a:	4293      	cmp	r3, r2
 801562c:	f200 809a 	bhi.w	8015764 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015630:	69fa      	ldr	r2, [r7, #28]
 8015632:	6879      	ldr	r1, [r7, #4]
 8015634:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015636:	f7ff fdd5 	bl	80151e4 <ip_reass_chain_frag_into_datagram_and_validate>
 801563a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801563c:	697b      	ldr	r3, [r7, #20]
 801563e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015642:	f000 809b 	beq.w	801577c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015646:	4b48      	ldr	r3, [pc, #288]	@ (8015768 <ip4_reass+0x2b0>)
 8015648:	881a      	ldrh	r2, [r3, #0]
 801564a:	8c3b      	ldrh	r3, [r7, #32]
 801564c:	4413      	add	r3, r2
 801564e:	b29a      	uxth	r2, r3
 8015650:	4b45      	ldr	r3, [pc, #276]	@ (8015768 <ip4_reass+0x2b0>)
 8015652:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015654:	69fb      	ldr	r3, [r7, #28]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d00d      	beq.n	8015676 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801565a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801565c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801565e:	4413      	add	r3, r2
 8015660:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015664:	8a7a      	ldrh	r2, [r7, #18]
 8015666:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801566a:	7f9b      	ldrb	r3, [r3, #30]
 801566c:	f043 0301 	orr.w	r3, r3, #1
 8015670:	b2da      	uxtb	r2, r3
 8015672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015674:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015676:	697b      	ldr	r3, [r7, #20]
 8015678:	2b01      	cmp	r3, #1
 801567a:	d171      	bne.n	8015760 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801567c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801567e:	8b9b      	ldrh	r3, [r3, #28]
 8015680:	3314      	adds	r3, #20
 8015682:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015686:	685b      	ldr	r3, [r3, #4]
 8015688:	685b      	ldr	r3, [r3, #4]
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801568e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015690:	685b      	ldr	r3, [r3, #4]
 8015692:	685b      	ldr	r3, [r3, #4]
 8015694:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015698:	3308      	adds	r3, #8
 801569a:	2214      	movs	r2, #20
 801569c:	4619      	mov	r1, r3
 801569e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80156a0:	f000 fe43 	bl	801632a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80156a4:	8a3b      	ldrh	r3, [r7, #16]
 80156a6:	4618      	mov	r0, r3
 80156a8:	f7f6 fc40 	bl	800bf2c <lwip_htons>
 80156ac:	4603      	mov	r3, r0
 80156ae:	461a      	mov	r2, r3
 80156b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156b2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80156b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156b6:	2200      	movs	r2, #0
 80156b8:	719a      	strb	r2, [r3, #6]
 80156ba:	2200      	movs	r2, #0
 80156bc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80156be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156c0:	2200      	movs	r2, #0
 80156c2:	729a      	strb	r2, [r3, #10]
 80156c4:	2200      	movs	r2, #0
 80156c6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80156c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156ca:	685b      	ldr	r3, [r3, #4]
 80156cc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80156ce:	e00d      	b.n	80156ec <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80156d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80156d2:	685b      	ldr	r3, [r3, #4]
 80156d4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80156d6:	2114      	movs	r1, #20
 80156d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80156da:	f7f8 f85f 	bl	800d79c <pbuf_remove_header>
      pbuf_cat(p, r);
 80156de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80156e0:	6878      	ldr	r0, [r7, #4]
 80156e2:	f7f8 f9af 	bl	800da44 <pbuf_cat>
      r = iprh->next_pbuf;
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80156ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d1ee      	bne.n	80156d0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80156f2:	4b1e      	ldr	r3, [pc, #120]	@ (801576c <ip4_reass+0x2b4>)
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80156f8:	429a      	cmp	r2, r3
 80156fa:	d102      	bne.n	8015702 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80156fc:	2300      	movs	r3, #0
 80156fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015700:	e010      	b.n	8015724 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015702:	4b1a      	ldr	r3, [pc, #104]	@ (801576c <ip4_reass+0x2b4>)
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015708:	e007      	b.n	801571a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801570a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015710:	429a      	cmp	r2, r3
 8015712:	d006      	beq.n	8015722 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801571a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801571c:	2b00      	cmp	r3, #0
 801571e:	d1f4      	bne.n	801570a <ip4_reass+0x252>
 8015720:	e000      	b.n	8015724 <ip4_reass+0x26c>
          break;
 8015722:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015724:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015726:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015728:	f7ff fd2e 	bl	8015188 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801572c:	6878      	ldr	r0, [r7, #4]
 801572e:	f7f8 f949 	bl	800d9c4 <pbuf_clen>
 8015732:	4603      	mov	r3, r0
 8015734:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015736:	4b0c      	ldr	r3, [pc, #48]	@ (8015768 <ip4_reass+0x2b0>)
 8015738:	881b      	ldrh	r3, [r3, #0]
 801573a:	8c3a      	ldrh	r2, [r7, #32]
 801573c:	429a      	cmp	r2, r3
 801573e:	d906      	bls.n	801574e <ip4_reass+0x296>
 8015740:	4b0b      	ldr	r3, [pc, #44]	@ (8015770 <ip4_reass+0x2b8>)
 8015742:	f240 229b 	movw	r2, #667	@ 0x29b
 8015746:	490b      	ldr	r1, [pc, #44]	@ (8015774 <ip4_reass+0x2bc>)
 8015748:	480b      	ldr	r0, [pc, #44]	@ (8015778 <ip4_reass+0x2c0>)
 801574a:	f000 fcb7 	bl	80160bc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801574e:	4b06      	ldr	r3, [pc, #24]	@ (8015768 <ip4_reass+0x2b0>)
 8015750:	881a      	ldrh	r2, [r3, #0]
 8015752:	8c3b      	ldrh	r3, [r7, #32]
 8015754:	1ad3      	subs	r3, r2, r3
 8015756:	b29a      	uxth	r2, r3
 8015758:	4b03      	ldr	r3, [pc, #12]	@ (8015768 <ip4_reass+0x2b0>)
 801575a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	e038      	b.n	80157d2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015760:	2300      	movs	r3, #0
 8015762:	e036      	b.n	80157d2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015764:	bf00      	nop
 8015766:	e00a      	b.n	801577e <ip4_reass+0x2c6>
 8015768:	2400cb24 	.word	0x2400cb24
 801576c:	2400cb20 	.word	0x2400cb20
 8015770:	08019de8 	.word	0x08019de8
 8015774:	08019f58 	.word	0x08019f58
 8015778:	08019e30 	.word	0x08019e30
    goto nullreturn_ipr;
 801577c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801577e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015780:	2b00      	cmp	r3, #0
 8015782:	d106      	bne.n	8015792 <ip4_reass+0x2da>
 8015784:	4b15      	ldr	r3, [pc, #84]	@ (80157dc <ip4_reass+0x324>)
 8015786:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801578a:	4915      	ldr	r1, [pc, #84]	@ (80157e0 <ip4_reass+0x328>)
 801578c:	4815      	ldr	r0, [pc, #84]	@ (80157e4 <ip4_reass+0x32c>)
 801578e:	f000 fc95 	bl	80160bc <iprintf>
  if (ipr->p == NULL) {
 8015792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015794:	685b      	ldr	r3, [r3, #4]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d116      	bne.n	80157c8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801579a:	4b13      	ldr	r3, [pc, #76]	@ (80157e8 <ip4_reass+0x330>)
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80157a0:	429a      	cmp	r2, r3
 80157a2:	d006      	beq.n	80157b2 <ip4_reass+0x2fa>
 80157a4:	4b0d      	ldr	r3, [pc, #52]	@ (80157dc <ip4_reass+0x324>)
 80157a6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80157aa:	4910      	ldr	r1, [pc, #64]	@ (80157ec <ip4_reass+0x334>)
 80157ac:	480d      	ldr	r0, [pc, #52]	@ (80157e4 <ip4_reass+0x32c>)
 80157ae:	f000 fc85 	bl	80160bc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80157b2:	2100      	movs	r1, #0
 80157b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80157b6:	f7ff fce7 	bl	8015188 <ip_reass_dequeue_datagram>
 80157ba:	e006      	b.n	80157ca <ip4_reass+0x312>
    goto nullreturn;
 80157bc:	bf00      	nop
 80157be:	e004      	b.n	80157ca <ip4_reass+0x312>
    goto nullreturn;
 80157c0:	bf00      	nop
 80157c2:	e002      	b.n	80157ca <ip4_reass+0x312>
      goto nullreturn;
 80157c4:	bf00      	nop
 80157c6:	e000      	b.n	80157ca <ip4_reass+0x312>
  }

nullreturn:
 80157c8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80157ca:	6878      	ldr	r0, [r7, #4]
 80157cc:	f7f8 f86c 	bl	800d8a8 <pbuf_free>
  return NULL;
 80157d0:	2300      	movs	r3, #0
}
 80157d2:	4618      	mov	r0, r3
 80157d4:	3738      	adds	r7, #56	@ 0x38
 80157d6:	46bd      	mov	sp, r7
 80157d8:	bd80      	pop	{r7, pc}
 80157da:	bf00      	nop
 80157dc:	08019de8 	.word	0x08019de8
 80157e0:	08019f74 	.word	0x08019f74
 80157e4:	08019e30 	.word	0x08019e30
 80157e8:	2400cb20 	.word	0x2400cb20
 80157ec:	08019f80 	.word	0x08019f80

080157f0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80157f4:	2005      	movs	r0, #5
 80157f6:	f7f7 f939 	bl	800ca6c <memp_malloc>
 80157fa:	4603      	mov	r3, r0
}
 80157fc:	4618      	mov	r0, r3
 80157fe:	bd80      	pop	{r7, pc}

08015800 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b082      	sub	sp, #8
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d106      	bne.n	801581c <ip_frag_free_pbuf_custom_ref+0x1c>
 801580e:	4b07      	ldr	r3, [pc, #28]	@ (801582c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015810:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8015814:	4906      	ldr	r1, [pc, #24]	@ (8015830 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015816:	4807      	ldr	r0, [pc, #28]	@ (8015834 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015818:	f000 fc50 	bl	80160bc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801581c:	6879      	ldr	r1, [r7, #4]
 801581e:	2005      	movs	r0, #5
 8015820:	f7f7 f99a 	bl	800cb58 <memp_free>
}
 8015824:	bf00      	nop
 8015826:	3708      	adds	r7, #8
 8015828:	46bd      	mov	sp, r7
 801582a:	bd80      	pop	{r7, pc}
 801582c:	08019de8 	.word	0x08019de8
 8015830:	08019fa0 	.word	0x08019fa0
 8015834:	08019e30 	.word	0x08019e30

08015838 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b084      	sub	sp, #16
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d106      	bne.n	8015858 <ipfrag_free_pbuf_custom+0x20>
 801584a:	4b11      	ldr	r3, [pc, #68]	@ (8015890 <ipfrag_free_pbuf_custom+0x58>)
 801584c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8015850:	4910      	ldr	r1, [pc, #64]	@ (8015894 <ipfrag_free_pbuf_custom+0x5c>)
 8015852:	4811      	ldr	r0, [pc, #68]	@ (8015898 <ipfrag_free_pbuf_custom+0x60>)
 8015854:	f000 fc32 	bl	80160bc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015858:	68fa      	ldr	r2, [r7, #12]
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	429a      	cmp	r2, r3
 801585e:	d006      	beq.n	801586e <ipfrag_free_pbuf_custom+0x36>
 8015860:	4b0b      	ldr	r3, [pc, #44]	@ (8015890 <ipfrag_free_pbuf_custom+0x58>)
 8015862:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8015866:	490d      	ldr	r1, [pc, #52]	@ (801589c <ipfrag_free_pbuf_custom+0x64>)
 8015868:	480b      	ldr	r0, [pc, #44]	@ (8015898 <ipfrag_free_pbuf_custom+0x60>)
 801586a:	f000 fc27 	bl	80160bc <iprintf>
  if (pcr->original != NULL) {
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	695b      	ldr	r3, [r3, #20]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d004      	beq.n	8015880 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	695b      	ldr	r3, [r3, #20]
 801587a:	4618      	mov	r0, r3
 801587c:	f7f8 f814 	bl	800d8a8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015880:	68f8      	ldr	r0, [r7, #12]
 8015882:	f7ff ffbd 	bl	8015800 <ip_frag_free_pbuf_custom_ref>
}
 8015886:	bf00      	nop
 8015888:	3710      	adds	r7, #16
 801588a:	46bd      	mov	sp, r7
 801588c:	bd80      	pop	{r7, pc}
 801588e:	bf00      	nop
 8015890:	08019de8 	.word	0x08019de8
 8015894:	08019fac 	.word	0x08019fac
 8015898:	08019e30 	.word	0x08019e30
 801589c:	08019fb8 	.word	0x08019fb8

080158a0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b094      	sub	sp, #80	@ 0x50
 80158a4:	af02      	add	r7, sp, #8
 80158a6:	60f8      	str	r0, [r7, #12]
 80158a8:	60b9      	str	r1, [r7, #8]
 80158aa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80158ac:	2300      	movs	r3, #0
 80158ae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80158b2:	68bb      	ldr	r3, [r7, #8]
 80158b4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80158b6:	3b14      	subs	r3, #20
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	da00      	bge.n	80158be <ip4_frag+0x1e>
 80158bc:	3307      	adds	r3, #7
 80158be:	10db      	asrs	r3, r3, #3
 80158c0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80158c2:	2314      	movs	r3, #20
 80158c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	685b      	ldr	r3, [r3, #4]
 80158ca:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80158cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80158ce:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80158d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158d2:	781b      	ldrb	r3, [r3, #0]
 80158d4:	f003 030f 	and.w	r3, r3, #15
 80158d8:	b2db      	uxtb	r3, r3
 80158da:	009b      	lsls	r3, r3, #2
 80158dc:	b2db      	uxtb	r3, r3
 80158de:	2b14      	cmp	r3, #20
 80158e0:	d002      	beq.n	80158e8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80158e2:	f06f 0305 	mvn.w	r3, #5
 80158e6:	e110      	b.n	8015b0a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	895b      	ldrh	r3, [r3, #10]
 80158ec:	2b13      	cmp	r3, #19
 80158ee:	d809      	bhi.n	8015904 <ip4_frag+0x64>
 80158f0:	4b88      	ldr	r3, [pc, #544]	@ (8015b14 <ip4_frag+0x274>)
 80158f2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80158f6:	4988      	ldr	r1, [pc, #544]	@ (8015b18 <ip4_frag+0x278>)
 80158f8:	4888      	ldr	r0, [pc, #544]	@ (8015b1c <ip4_frag+0x27c>)
 80158fa:	f000 fbdf 	bl	80160bc <iprintf>
 80158fe:	f06f 0305 	mvn.w	r3, #5
 8015902:	e102      	b.n	8015b0a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015906:	88db      	ldrh	r3, [r3, #6]
 8015908:	b29b      	uxth	r3, r3
 801590a:	4618      	mov	r0, r3
 801590c:	f7f6 fb0e 	bl	800bf2c <lwip_htons>
 8015910:	4603      	mov	r3, r0
 8015912:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8015914:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015916:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801591a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801591e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015920:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015924:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	891b      	ldrh	r3, [r3, #8]
 801592a:	3b14      	subs	r3, #20
 801592c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8015930:	e0e1      	b.n	8015af6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015932:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015934:	00db      	lsls	r3, r3, #3
 8015936:	b29b      	uxth	r3, r3
 8015938:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801593c:	4293      	cmp	r3, r2
 801593e:	bf28      	it	cs
 8015940:	4613      	movcs	r3, r2
 8015942:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015944:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015948:	2114      	movs	r1, #20
 801594a:	200e      	movs	r0, #14
 801594c:	f7f7 fcc4 	bl	800d2d8 <pbuf_alloc>
 8015950:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8015952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015954:	2b00      	cmp	r3, #0
 8015956:	f000 80d5 	beq.w	8015b04 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801595c:	895b      	ldrh	r3, [r3, #10]
 801595e:	2b13      	cmp	r3, #19
 8015960:	d806      	bhi.n	8015970 <ip4_frag+0xd0>
 8015962:	4b6c      	ldr	r3, [pc, #432]	@ (8015b14 <ip4_frag+0x274>)
 8015964:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8015968:	496d      	ldr	r1, [pc, #436]	@ (8015b20 <ip4_frag+0x280>)
 801596a:	486c      	ldr	r0, [pc, #432]	@ (8015b1c <ip4_frag+0x27c>)
 801596c:	f000 fba6 	bl	80160bc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015972:	685b      	ldr	r3, [r3, #4]
 8015974:	2214      	movs	r2, #20
 8015976:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015978:	4618      	mov	r0, r3
 801597a:	f000 fcd6 	bl	801632a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801597e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015980:	685b      	ldr	r3, [r3, #4]
 8015982:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8015984:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015986:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801598a:	e064      	b.n	8015a56 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	895a      	ldrh	r2, [r3, #10]
 8015990:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015992:	1ad3      	subs	r3, r2, r3
 8015994:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	895b      	ldrh	r3, [r3, #10]
 801599a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801599c:	429a      	cmp	r2, r3
 801599e:	d906      	bls.n	80159ae <ip4_frag+0x10e>
 80159a0:	4b5c      	ldr	r3, [pc, #368]	@ (8015b14 <ip4_frag+0x274>)
 80159a2:	f240 322d 	movw	r2, #813	@ 0x32d
 80159a6:	495f      	ldr	r1, [pc, #380]	@ (8015b24 <ip4_frag+0x284>)
 80159a8:	485c      	ldr	r0, [pc, #368]	@ (8015b1c <ip4_frag+0x27c>)
 80159aa:	f000 fb87 	bl	80160bc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80159ae:	8bfa      	ldrh	r2, [r7, #30]
 80159b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80159b4:	4293      	cmp	r3, r2
 80159b6:	bf28      	it	cs
 80159b8:	4613      	movcs	r3, r2
 80159ba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80159be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d105      	bne.n	80159d2 <ip4_frag+0x132>
        poff = 0;
 80159c6:	2300      	movs	r3, #0
 80159c8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	60fb      	str	r3, [r7, #12]
        continue;
 80159d0:	e041      	b.n	8015a56 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80159d2:	f7ff ff0d 	bl	80157f0 <ip_frag_alloc_pbuf_custom_ref>
 80159d6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80159d8:	69bb      	ldr	r3, [r7, #24]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d103      	bne.n	80159e6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80159de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80159e0:	f7f7 ff62 	bl	800d8a8 <pbuf_free>
        goto memerr;
 80159e4:	e08f      	b.n	8015b06 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80159e6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80159ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80159ee:	4413      	add	r3, r2
 80159f0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80159f4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80159f8:	9201      	str	r2, [sp, #4]
 80159fa:	9300      	str	r3, [sp, #0]
 80159fc:	4603      	mov	r3, r0
 80159fe:	2241      	movs	r2, #65	@ 0x41
 8015a00:	2000      	movs	r0, #0
 8015a02:	f7f7 fd97 	bl	800d534 <pbuf_alloced_custom>
 8015a06:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015a08:	697b      	ldr	r3, [r7, #20]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d106      	bne.n	8015a1c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015a0e:	69b8      	ldr	r0, [r7, #24]
 8015a10:	f7ff fef6 	bl	8015800 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015a14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015a16:	f7f7 ff47 	bl	800d8a8 <pbuf_free>
        goto memerr;
 8015a1a:	e074      	b.n	8015b06 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015a1c:	68f8      	ldr	r0, [r7, #12]
 8015a1e:	f7f7 ffe9 	bl	800d9f4 <pbuf_ref>
      pcr->original = p;
 8015a22:	69bb      	ldr	r3, [r7, #24]
 8015a24:	68fa      	ldr	r2, [r7, #12]
 8015a26:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015a28:	69bb      	ldr	r3, [r7, #24]
 8015a2a:	4a3f      	ldr	r2, [pc, #252]	@ (8015b28 <ip4_frag+0x288>)
 8015a2c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015a2e:	6979      	ldr	r1, [r7, #20]
 8015a30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015a32:	f7f8 f807 	bl	800da44 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015a36:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8015a3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015a3e:	1ad3      	subs	r3, r2, r3
 8015a40:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8015a44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d004      	beq.n	8015a56 <ip4_frag+0x1b6>
        poff = 0;
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015a56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d196      	bne.n	801598c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015a5e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8015a60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015a64:	4413      	add	r3, r2
 8015a66:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015a68:	68bb      	ldr	r3, [r7, #8]
 8015a6a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015a6c:	f1a3 0213 	sub.w	r2, r3, #19
 8015a70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015a74:	429a      	cmp	r2, r3
 8015a76:	bfcc      	ite	gt
 8015a78:	2301      	movgt	r3, #1
 8015a7a:	2300      	movle	r3, #0
 8015a7c:	b2db      	uxtb	r3, r3
 8015a7e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015a80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a88:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8015a8a:	6a3b      	ldr	r3, [r7, #32]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d002      	beq.n	8015a96 <ip4_frag+0x1f6>
 8015a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d003      	beq.n	8015a9e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015a96:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015a98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8015a9c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015a9e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	f7f6 fa43 	bl	800bf2c <lwip_htons>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	461a      	mov	r2, r3
 8015aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015aac:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015aae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015ab0:	3314      	adds	r3, #20
 8015ab2:	b29b      	uxth	r3, r3
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7f6 fa39 	bl	800bf2c <lwip_htons>
 8015aba:	4603      	mov	r3, r0
 8015abc:	461a      	mov	r2, r3
 8015abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ac0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	729a      	strb	r2, [r3, #10]
 8015ac8:	2200      	movs	r2, #0
 8015aca:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015acc:	68bb      	ldr	r3, [r7, #8]
 8015ace:	695b      	ldr	r3, [r3, #20]
 8015ad0:	687a      	ldr	r2, [r7, #4]
 8015ad2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015ad4:	68b8      	ldr	r0, [r7, #8]
 8015ad6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015ad8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015ada:	f7f7 fee5 	bl	800d8a8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015ade:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015ae2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015ae4:	1ad3      	subs	r3, r2, r3
 8015ae6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8015aea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8015aee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015af0:	4413      	add	r3, r2
 8015af2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8015af6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	f47f af19 	bne.w	8015932 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015b00:	2300      	movs	r3, #0
 8015b02:	e002      	b.n	8015b0a <ip4_frag+0x26a>
      goto memerr;
 8015b04:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	3748      	adds	r7, #72	@ 0x48
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bd80      	pop	{r7, pc}
 8015b12:	bf00      	nop
 8015b14:	08019de8 	.word	0x08019de8
 8015b18:	08019fc4 	.word	0x08019fc4
 8015b1c:	08019e30 	.word	0x08019e30
 8015b20:	08019fe0 	.word	0x08019fe0
 8015b24:	0801a000 	.word	0x0801a000
 8015b28:	08015839 	.word	0x08015839

08015b2c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b086      	sub	sp, #24
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
 8015b34:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015b36:	230e      	movs	r3, #14
 8015b38:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	895b      	ldrh	r3, [r3, #10]
 8015b3e:	2b0e      	cmp	r3, #14
 8015b40:	d96e      	bls.n	8015c20 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	7bdb      	ldrb	r3, [r3, #15]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d106      	bne.n	8015b58 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015b4a:	683b      	ldr	r3, [r7, #0]
 8015b4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015b50:	3301      	adds	r3, #1
 8015b52:	b2da      	uxtb	r2, r3
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	685b      	ldr	r3, [r3, #4]
 8015b5c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015b5e:	693b      	ldr	r3, [r7, #16]
 8015b60:	7b1a      	ldrb	r2, [r3, #12]
 8015b62:	7b5b      	ldrb	r3, [r3, #13]
 8015b64:	021b      	lsls	r3, r3, #8
 8015b66:	4313      	orrs	r3, r2
 8015b68:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015b6a:	693b      	ldr	r3, [r7, #16]
 8015b6c:	781b      	ldrb	r3, [r3, #0]
 8015b6e:	f003 0301 	and.w	r3, r3, #1
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d023      	beq.n	8015bbe <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015b76:	693b      	ldr	r3, [r7, #16]
 8015b78:	781b      	ldrb	r3, [r3, #0]
 8015b7a:	2b01      	cmp	r3, #1
 8015b7c:	d10f      	bne.n	8015b9e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015b7e:	693b      	ldr	r3, [r7, #16]
 8015b80:	785b      	ldrb	r3, [r3, #1]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d11b      	bne.n	8015bbe <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015b86:	693b      	ldr	r3, [r7, #16]
 8015b88:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015b8a:	2b5e      	cmp	r3, #94	@ 0x5e
 8015b8c:	d117      	bne.n	8015bbe <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	7b5b      	ldrb	r3, [r3, #13]
 8015b92:	f043 0310 	orr.w	r3, r3, #16
 8015b96:	b2da      	uxtb	r2, r3
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	735a      	strb	r2, [r3, #13]
 8015b9c:	e00f      	b.n	8015bbe <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015b9e:	693b      	ldr	r3, [r7, #16]
 8015ba0:	2206      	movs	r2, #6
 8015ba2:	4928      	ldr	r1, [pc, #160]	@ (8015c44 <ethernet_input+0x118>)
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f000 fade 	bl	8016166 <memcmp>
 8015baa:	4603      	mov	r3, r0
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d106      	bne.n	8015bbe <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	7b5b      	ldrb	r3, [r3, #13]
 8015bb4:	f043 0308 	orr.w	r3, r3, #8
 8015bb8:	b2da      	uxtb	r2, r3
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015bbe:	89fb      	ldrh	r3, [r7, #14]
 8015bc0:	2b08      	cmp	r3, #8
 8015bc2:	d003      	beq.n	8015bcc <ethernet_input+0xa0>
 8015bc4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8015bc8:	d014      	beq.n	8015bf4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015bca:	e032      	b.n	8015c32 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015bcc:	683b      	ldr	r3, [r7, #0]
 8015bce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015bd2:	f003 0308 	and.w	r3, r3, #8
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d024      	beq.n	8015c24 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015bda:	8afb      	ldrh	r3, [r7, #22]
 8015bdc:	4619      	mov	r1, r3
 8015bde:	6878      	ldr	r0, [r7, #4]
 8015be0:	f7f7 fddc 	bl	800d79c <pbuf_remove_header>
 8015be4:	4603      	mov	r3, r0
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d11e      	bne.n	8015c28 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015bea:	6839      	ldr	r1, [r7, #0]
 8015bec:	6878      	ldr	r0, [r7, #4]
 8015bee:	f7fe ff21 	bl	8014a34 <ip4_input>
      break;
 8015bf2:	e013      	b.n	8015c1c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015bf4:	683b      	ldr	r3, [r7, #0]
 8015bf6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015bfa:	f003 0308 	and.w	r3, r3, #8
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d014      	beq.n	8015c2c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015c02:	8afb      	ldrh	r3, [r7, #22]
 8015c04:	4619      	mov	r1, r3
 8015c06:	6878      	ldr	r0, [r7, #4]
 8015c08:	f7f7 fdc8 	bl	800d79c <pbuf_remove_header>
 8015c0c:	4603      	mov	r3, r0
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d10e      	bne.n	8015c30 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015c12:	6839      	ldr	r1, [r7, #0]
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f7fe f89b 	bl	8013d50 <etharp_input>
      break;
 8015c1a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	e00c      	b.n	8015c3a <ethernet_input+0x10e>
    goto free_and_return;
 8015c20:	bf00      	nop
 8015c22:	e006      	b.n	8015c32 <ethernet_input+0x106>
        goto free_and_return;
 8015c24:	bf00      	nop
 8015c26:	e004      	b.n	8015c32 <ethernet_input+0x106>
        goto free_and_return;
 8015c28:	bf00      	nop
 8015c2a:	e002      	b.n	8015c32 <ethernet_input+0x106>
        goto free_and_return;
 8015c2c:	bf00      	nop
 8015c2e:	e000      	b.n	8015c32 <ethernet_input+0x106>
        goto free_and_return;
 8015c30:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015c32:	6878      	ldr	r0, [r7, #4]
 8015c34:	f7f7 fe38 	bl	800d8a8 <pbuf_free>
  return ERR_OK;
 8015c38:	2300      	movs	r3, #0
}
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	3718      	adds	r7, #24
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bd80      	pop	{r7, pc}
 8015c42:	bf00      	nop
 8015c44:	0801a1f8 	.word	0x0801a1f8

08015c48 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b086      	sub	sp, #24
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	60f8      	str	r0, [r7, #12]
 8015c50:	60b9      	str	r1, [r7, #8]
 8015c52:	607a      	str	r2, [r7, #4]
 8015c54:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015c56:	8c3b      	ldrh	r3, [r7, #32]
 8015c58:	4618      	mov	r0, r3
 8015c5a:	f7f6 f967 	bl	800bf2c <lwip_htons>
 8015c5e:	4603      	mov	r3, r0
 8015c60:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015c62:	210e      	movs	r1, #14
 8015c64:	68b8      	ldr	r0, [r7, #8]
 8015c66:	f7f7 fd89 	bl	800d77c <pbuf_add_header>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d125      	bne.n	8015cbc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015c70:	68bb      	ldr	r3, [r7, #8]
 8015c72:	685b      	ldr	r3, [r3, #4]
 8015c74:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015c76:	693b      	ldr	r3, [r7, #16]
 8015c78:	8afa      	ldrh	r2, [r7, #22]
 8015c7a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015c7c:	693b      	ldr	r3, [r7, #16]
 8015c7e:	2206      	movs	r2, #6
 8015c80:	6839      	ldr	r1, [r7, #0]
 8015c82:	4618      	mov	r0, r3
 8015c84:	f000 fb51 	bl	801632a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015c88:	693b      	ldr	r3, [r7, #16]
 8015c8a:	3306      	adds	r3, #6
 8015c8c:	2206      	movs	r2, #6
 8015c8e:	6879      	ldr	r1, [r7, #4]
 8015c90:	4618      	mov	r0, r3
 8015c92:	f000 fb4a 	bl	801632a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015c9c:	2b06      	cmp	r3, #6
 8015c9e:	d006      	beq.n	8015cae <ethernet_output+0x66>
 8015ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8015ccc <ethernet_output+0x84>)
 8015ca2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8015ca6:	490a      	ldr	r1, [pc, #40]	@ (8015cd0 <ethernet_output+0x88>)
 8015ca8:	480a      	ldr	r0, [pc, #40]	@ (8015cd4 <ethernet_output+0x8c>)
 8015caa:	f000 fa07 	bl	80160bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	699b      	ldr	r3, [r3, #24]
 8015cb2:	68b9      	ldr	r1, [r7, #8]
 8015cb4:	68f8      	ldr	r0, [r7, #12]
 8015cb6:	4798      	blx	r3
 8015cb8:	4603      	mov	r3, r0
 8015cba:	e002      	b.n	8015cc2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015cbc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015cbe:	f06f 0301 	mvn.w	r3, #1
}
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	3718      	adds	r7, #24
 8015cc6:	46bd      	mov	sp, r7
 8015cc8:	bd80      	pop	{r7, pc}
 8015cca:	bf00      	nop
 8015ccc:	0801a010 	.word	0x0801a010
 8015cd0:	0801a048 	.word	0x0801a048
 8015cd4:	0801a07c 	.word	0x0801a07c

08015cd8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b082      	sub	sp, #8
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	6078      	str	r0, [r7, #4]
 8015ce0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8015ce2:	683b      	ldr	r3, [r7, #0]
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	2104      	movs	r1, #4
 8015ce8:	4618      	mov	r0, r3
 8015cea:	f7f2 fc89 	bl	8008600 <osMessageQueueNew>
 8015cee:	4602      	mov	r2, r0
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d102      	bne.n	8015d02 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8015cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8015d00:	e000      	b.n	8015d04 <sys_mbox_new+0x2c>

  return ERR_OK;
 8015d02:	2300      	movs	r3, #0
}
 8015d04:	4618      	mov	r0, r3
 8015d06:	3708      	adds	r7, #8
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	bd80      	pop	{r7, pc}

08015d0c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b084      	sub	sp, #16
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
 8015d14:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	6818      	ldr	r0, [r3, #0]
 8015d1a:	4639      	mov	r1, r7
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	2200      	movs	r2, #0
 8015d20:	f7f2 fce2 	bl	80086e8 <osMessageQueuePut>
 8015d24:	4603      	mov	r3, r0
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d102      	bne.n	8015d30 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	73fb      	strb	r3, [r7, #15]
 8015d2e:	e001      	b.n	8015d34 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015d30:	23ff      	movs	r3, #255	@ 0xff
 8015d32:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015d38:	4618      	mov	r0, r3
 8015d3a:	3710      	adds	r7, #16
 8015d3c:	46bd      	mov	sp, r7
 8015d3e:	bd80      	pop	{r7, pc}

08015d40 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b086      	sub	sp, #24
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	60f8      	str	r0, [r7, #12]
 8015d48:	60b9      	str	r1, [r7, #8]
 8015d4a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8015d4c:	f7f2 f968 	bl	8008020 <osKernelGetTickCount>
 8015d50:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d013      	beq.n	8015d80 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	6818      	ldr	r0, [r3, #0]
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	2200      	movs	r2, #0
 8015d60:	68b9      	ldr	r1, [r7, #8]
 8015d62:	f7f2 fd21 	bl	80087a8 <osMessageQueueGet>
 8015d66:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8015d68:	693b      	ldr	r3, [r7, #16]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d105      	bne.n	8015d7a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8015d6e:	f7f2 f957 	bl	8008020 <osKernelGetTickCount>
 8015d72:	4602      	mov	r2, r0
 8015d74:	697b      	ldr	r3, [r7, #20]
 8015d76:	1ad3      	subs	r3, r2, r3
 8015d78:	e00f      	b.n	8015d9a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8015d7e:	e00c      	b.n	8015d9a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	6818      	ldr	r0, [r3, #0]
 8015d84:	f04f 33ff 	mov.w	r3, #4294967295
 8015d88:	2200      	movs	r2, #0
 8015d8a:	68b9      	ldr	r1, [r7, #8]
 8015d8c:	f7f2 fd0c 	bl	80087a8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8015d90:	f7f2 f946 	bl	8008020 <osKernelGetTickCount>
 8015d94:	4602      	mov	r2, r0
 8015d96:	697b      	ldr	r3, [r7, #20]
 8015d98:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	3718      	adds	r7, #24
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}

08015da2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015da2:	b480      	push	{r7}
 8015da4:	b083      	sub	sp, #12
 8015da6:	af00      	add	r7, sp, #0
 8015da8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d101      	bne.n	8015db6 <sys_mbox_valid+0x14>
    return 0;
 8015db2:	2300      	movs	r3, #0
 8015db4:	e000      	b.n	8015db8 <sys_mbox_valid+0x16>
  else
    return 1;
 8015db6:	2301      	movs	r3, #1
}
 8015db8:	4618      	mov	r0, r3
 8015dba:	370c      	adds	r7, #12
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc2:	4770      	bx	lr

08015dc4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015dc4:	b580      	push	{r7, lr}
 8015dc6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8015dc8:	2000      	movs	r0, #0
 8015dca:	f7f2 f9ec 	bl	80081a6 <osMutexNew>
 8015dce:	4603      	mov	r3, r0
 8015dd0:	4a01      	ldr	r2, [pc, #4]	@ (8015dd8 <sys_init+0x14>)
 8015dd2:	6013      	str	r3, [r2, #0]
#endif
}
 8015dd4:	bf00      	nop
 8015dd6:	bd80      	pop	{r7, pc}
 8015dd8:	2400cb28 	.word	0x2400cb28

08015ddc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b082      	sub	sp, #8
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8015de4:	2000      	movs	r0, #0
 8015de6:	f7f2 f9de 	bl	80081a6 <osMutexNew>
 8015dea:	4602      	mov	r2, r0
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d102      	bne.n	8015dfe <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015df8:	f04f 33ff 	mov.w	r3, #4294967295
 8015dfc:	e000      	b.n	8015e00 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015dfe:	2300      	movs	r3, #0
}
 8015e00:	4618      	mov	r0, r3
 8015e02:	3708      	adds	r7, #8
 8015e04:	46bd      	mov	sp, r7
 8015e06:	bd80      	pop	{r7, pc}

08015e08 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b082      	sub	sp, #8
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	f04f 31ff 	mov.w	r1, #4294967295
 8015e18:	4618      	mov	r0, r3
 8015e1a:	f7f2 fa4a 	bl	80082b2 <osMutexAcquire>
#endif
}
 8015e1e:	bf00      	nop
 8015e20:	3708      	adds	r7, #8
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bd80      	pop	{r7, pc}

08015e26 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015e26:	b580      	push	{r7, lr}
 8015e28:	b082      	sub	sp, #8
 8015e2a:	af00      	add	r7, sp, #0
 8015e2c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	4618      	mov	r0, r3
 8015e34:	f7f2 fa88 	bl	8008348 <osMutexRelease>
}
 8015e38:	bf00      	nop
 8015e3a:	3708      	adds	r7, #8
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	bd80      	pop	{r7, pc}

08015e40 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b08e      	sub	sp, #56	@ 0x38
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	60f8      	str	r0, [r7, #12]
 8015e48:	60b9      	str	r1, [r7, #8]
 8015e4a:	607a      	str	r2, [r7, #4]
 8015e4c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8015e4e:	f107 0314 	add.w	r3, r7, #20
 8015e52:	2224      	movs	r2, #36	@ 0x24
 8015e54:	2100      	movs	r1, #0
 8015e56:	4618      	mov	r0, r3
 8015e58:	f000 f995 	bl	8016186 <memset>
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	617b      	str	r3, [r7, #20]
 8015e60:	683b      	ldr	r3, [r7, #0]
 8015e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015e64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8015e68:	f107 0314 	add.w	r3, r7, #20
 8015e6c:	461a      	mov	r2, r3
 8015e6e:	6879      	ldr	r1, [r7, #4]
 8015e70:	68b8      	ldr	r0, [r7, #8]
 8015e72:	f7f2 f8ea 	bl	800804a <osThreadNew>
 8015e76:	4603      	mov	r3, r0
#endif
}
 8015e78:	4618      	mov	r0, r3
 8015e7a:	3738      	adds	r7, #56	@ 0x38
 8015e7c:	46bd      	mov	sp, r7
 8015e7e:	bd80      	pop	{r7, pc}

08015e80 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8015e84:	4b04      	ldr	r3, [pc, #16]	@ (8015e98 <sys_arch_protect+0x18>)
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	f04f 31ff 	mov.w	r1, #4294967295
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	f7f2 fa10 	bl	80082b2 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8015e92:	2301      	movs	r3, #1
}
 8015e94:	4618      	mov	r0, r3
 8015e96:	bd80      	pop	{r7, pc}
 8015e98:	2400cb28 	.word	0x2400cb28

08015e9c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b082      	sub	sp, #8
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015ea4:	4b04      	ldr	r3, [pc, #16]	@ (8015eb8 <sys_arch_unprotect+0x1c>)
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f7f2 fa4d 	bl	8008348 <osMutexRelease>
}
 8015eae:	bf00      	nop
 8015eb0:	3708      	adds	r7, #8
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	bd80      	pop	{r7, pc}
 8015eb6:	bf00      	nop
 8015eb8:	2400cb28 	.word	0x2400cb28

08015ebc <rand>:
 8015ebc:	4b16      	ldr	r3, [pc, #88]	@ (8015f18 <rand+0x5c>)
 8015ebe:	b510      	push	{r4, lr}
 8015ec0:	681c      	ldr	r4, [r3, #0]
 8015ec2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ec4:	b9b3      	cbnz	r3, 8015ef4 <rand+0x38>
 8015ec6:	2018      	movs	r0, #24
 8015ec8:	f000 faa6 	bl	8016418 <malloc>
 8015ecc:	4602      	mov	r2, r0
 8015ece:	6320      	str	r0, [r4, #48]	@ 0x30
 8015ed0:	b920      	cbnz	r0, 8015edc <rand+0x20>
 8015ed2:	4b12      	ldr	r3, [pc, #72]	@ (8015f1c <rand+0x60>)
 8015ed4:	4812      	ldr	r0, [pc, #72]	@ (8015f20 <rand+0x64>)
 8015ed6:	2152      	movs	r1, #82	@ 0x52
 8015ed8:	f000 fa36 	bl	8016348 <__assert_func>
 8015edc:	4911      	ldr	r1, [pc, #68]	@ (8015f24 <rand+0x68>)
 8015ede:	4b12      	ldr	r3, [pc, #72]	@ (8015f28 <rand+0x6c>)
 8015ee0:	e9c0 1300 	strd	r1, r3, [r0]
 8015ee4:	4b11      	ldr	r3, [pc, #68]	@ (8015f2c <rand+0x70>)
 8015ee6:	6083      	str	r3, [r0, #8]
 8015ee8:	230b      	movs	r3, #11
 8015eea:	8183      	strh	r3, [r0, #12]
 8015eec:	2100      	movs	r1, #0
 8015eee:	2001      	movs	r0, #1
 8015ef0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015ef4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015ef6:	480e      	ldr	r0, [pc, #56]	@ (8015f30 <rand+0x74>)
 8015ef8:	690b      	ldr	r3, [r1, #16]
 8015efa:	694c      	ldr	r4, [r1, #20]
 8015efc:	4a0d      	ldr	r2, [pc, #52]	@ (8015f34 <rand+0x78>)
 8015efe:	4358      	muls	r0, r3
 8015f00:	fb02 0004 	mla	r0, r2, r4, r0
 8015f04:	fba3 3202 	umull	r3, r2, r3, r2
 8015f08:	3301      	adds	r3, #1
 8015f0a:	eb40 0002 	adc.w	r0, r0, r2
 8015f0e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8015f12:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015f16:	bd10      	pop	{r4, pc}
 8015f18:	24000040 	.word	0x24000040
 8015f1c:	0801a206 	.word	0x0801a206
 8015f20:	0801a21d 	.word	0x0801a21d
 8015f24:	abcd330e 	.word	0xabcd330e
 8015f28:	e66d1234 	.word	0xe66d1234
 8015f2c:	0005deec 	.word	0x0005deec
 8015f30:	5851f42d 	.word	0x5851f42d
 8015f34:	4c957f2d 	.word	0x4c957f2d

08015f38 <std>:
 8015f38:	2300      	movs	r3, #0
 8015f3a:	b510      	push	{r4, lr}
 8015f3c:	4604      	mov	r4, r0
 8015f3e:	e9c0 3300 	strd	r3, r3, [r0]
 8015f42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f46:	6083      	str	r3, [r0, #8]
 8015f48:	8181      	strh	r1, [r0, #12]
 8015f4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8015f4c:	81c2      	strh	r2, [r0, #14]
 8015f4e:	6183      	str	r3, [r0, #24]
 8015f50:	4619      	mov	r1, r3
 8015f52:	2208      	movs	r2, #8
 8015f54:	305c      	adds	r0, #92	@ 0x5c
 8015f56:	f000 f916 	bl	8016186 <memset>
 8015f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8015f90 <std+0x58>)
 8015f5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8015f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8015f94 <std+0x5c>)
 8015f60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015f62:	4b0d      	ldr	r3, [pc, #52]	@ (8015f98 <std+0x60>)
 8015f64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015f66:	4b0d      	ldr	r3, [pc, #52]	@ (8015f9c <std+0x64>)
 8015f68:	6323      	str	r3, [r4, #48]	@ 0x30
 8015f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8015fa0 <std+0x68>)
 8015f6c:	6224      	str	r4, [r4, #32]
 8015f6e:	429c      	cmp	r4, r3
 8015f70:	d006      	beq.n	8015f80 <std+0x48>
 8015f72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015f76:	4294      	cmp	r4, r2
 8015f78:	d002      	beq.n	8015f80 <std+0x48>
 8015f7a:	33d0      	adds	r3, #208	@ 0xd0
 8015f7c:	429c      	cmp	r4, r3
 8015f7e:	d105      	bne.n	8015f8c <std+0x54>
 8015f80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f88:	f000 b9cc 	b.w	8016324 <__retarget_lock_init_recursive>
 8015f8c:	bd10      	pop	{r4, pc}
 8015f8e:	bf00      	nop
 8015f90:	080160e1 	.word	0x080160e1
 8015f94:	08016103 	.word	0x08016103
 8015f98:	0801613b 	.word	0x0801613b
 8015f9c:	0801615f 	.word	0x0801615f
 8015fa0:	2400cb2c 	.word	0x2400cb2c

08015fa4 <stdio_exit_handler>:
 8015fa4:	4a02      	ldr	r2, [pc, #8]	@ (8015fb0 <stdio_exit_handler+0xc>)
 8015fa6:	4903      	ldr	r1, [pc, #12]	@ (8015fb4 <stdio_exit_handler+0x10>)
 8015fa8:	4803      	ldr	r0, [pc, #12]	@ (8015fb8 <stdio_exit_handler+0x14>)
 8015faa:	f000 b869 	b.w	8016080 <_fwalk_sglue>
 8015fae:	bf00      	nop
 8015fb0:	24000034 	.word	0x24000034
 8015fb4:	08016c2d 	.word	0x08016c2d
 8015fb8:	24000044 	.word	0x24000044

08015fbc <cleanup_stdio>:
 8015fbc:	6841      	ldr	r1, [r0, #4]
 8015fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8015ff0 <cleanup_stdio+0x34>)
 8015fc0:	4299      	cmp	r1, r3
 8015fc2:	b510      	push	{r4, lr}
 8015fc4:	4604      	mov	r4, r0
 8015fc6:	d001      	beq.n	8015fcc <cleanup_stdio+0x10>
 8015fc8:	f000 fe30 	bl	8016c2c <_fflush_r>
 8015fcc:	68a1      	ldr	r1, [r4, #8]
 8015fce:	4b09      	ldr	r3, [pc, #36]	@ (8015ff4 <cleanup_stdio+0x38>)
 8015fd0:	4299      	cmp	r1, r3
 8015fd2:	d002      	beq.n	8015fda <cleanup_stdio+0x1e>
 8015fd4:	4620      	mov	r0, r4
 8015fd6:	f000 fe29 	bl	8016c2c <_fflush_r>
 8015fda:	68e1      	ldr	r1, [r4, #12]
 8015fdc:	4b06      	ldr	r3, [pc, #24]	@ (8015ff8 <cleanup_stdio+0x3c>)
 8015fde:	4299      	cmp	r1, r3
 8015fe0:	d004      	beq.n	8015fec <cleanup_stdio+0x30>
 8015fe2:	4620      	mov	r0, r4
 8015fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fe8:	f000 be20 	b.w	8016c2c <_fflush_r>
 8015fec:	bd10      	pop	{r4, pc}
 8015fee:	bf00      	nop
 8015ff0:	2400cb2c 	.word	0x2400cb2c
 8015ff4:	2400cb94 	.word	0x2400cb94
 8015ff8:	2400cbfc 	.word	0x2400cbfc

08015ffc <global_stdio_init.part.0>:
 8015ffc:	b510      	push	{r4, lr}
 8015ffe:	4b0b      	ldr	r3, [pc, #44]	@ (801602c <global_stdio_init.part.0+0x30>)
 8016000:	4c0b      	ldr	r4, [pc, #44]	@ (8016030 <global_stdio_init.part.0+0x34>)
 8016002:	4a0c      	ldr	r2, [pc, #48]	@ (8016034 <global_stdio_init.part.0+0x38>)
 8016004:	601a      	str	r2, [r3, #0]
 8016006:	4620      	mov	r0, r4
 8016008:	2200      	movs	r2, #0
 801600a:	2104      	movs	r1, #4
 801600c:	f7ff ff94 	bl	8015f38 <std>
 8016010:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016014:	2201      	movs	r2, #1
 8016016:	2109      	movs	r1, #9
 8016018:	f7ff ff8e 	bl	8015f38 <std>
 801601c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016020:	2202      	movs	r2, #2
 8016022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016026:	2112      	movs	r1, #18
 8016028:	f7ff bf86 	b.w	8015f38 <std>
 801602c:	2400cc64 	.word	0x2400cc64
 8016030:	2400cb2c 	.word	0x2400cb2c
 8016034:	08015fa5 	.word	0x08015fa5

08016038 <__sfp_lock_acquire>:
 8016038:	4801      	ldr	r0, [pc, #4]	@ (8016040 <__sfp_lock_acquire+0x8>)
 801603a:	f000 b974 	b.w	8016326 <__retarget_lock_acquire_recursive>
 801603e:	bf00      	nop
 8016040:	2400cc6d 	.word	0x2400cc6d

08016044 <__sfp_lock_release>:
 8016044:	4801      	ldr	r0, [pc, #4]	@ (801604c <__sfp_lock_release+0x8>)
 8016046:	f000 b96f 	b.w	8016328 <__retarget_lock_release_recursive>
 801604a:	bf00      	nop
 801604c:	2400cc6d 	.word	0x2400cc6d

08016050 <__sinit>:
 8016050:	b510      	push	{r4, lr}
 8016052:	4604      	mov	r4, r0
 8016054:	f7ff fff0 	bl	8016038 <__sfp_lock_acquire>
 8016058:	6a23      	ldr	r3, [r4, #32]
 801605a:	b11b      	cbz	r3, 8016064 <__sinit+0x14>
 801605c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016060:	f7ff bff0 	b.w	8016044 <__sfp_lock_release>
 8016064:	4b04      	ldr	r3, [pc, #16]	@ (8016078 <__sinit+0x28>)
 8016066:	6223      	str	r3, [r4, #32]
 8016068:	4b04      	ldr	r3, [pc, #16]	@ (801607c <__sinit+0x2c>)
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d1f5      	bne.n	801605c <__sinit+0xc>
 8016070:	f7ff ffc4 	bl	8015ffc <global_stdio_init.part.0>
 8016074:	e7f2      	b.n	801605c <__sinit+0xc>
 8016076:	bf00      	nop
 8016078:	08015fbd 	.word	0x08015fbd
 801607c:	2400cc64 	.word	0x2400cc64

08016080 <_fwalk_sglue>:
 8016080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016084:	4607      	mov	r7, r0
 8016086:	4688      	mov	r8, r1
 8016088:	4614      	mov	r4, r2
 801608a:	2600      	movs	r6, #0
 801608c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016090:	f1b9 0901 	subs.w	r9, r9, #1
 8016094:	d505      	bpl.n	80160a2 <_fwalk_sglue+0x22>
 8016096:	6824      	ldr	r4, [r4, #0]
 8016098:	2c00      	cmp	r4, #0
 801609a:	d1f7      	bne.n	801608c <_fwalk_sglue+0xc>
 801609c:	4630      	mov	r0, r6
 801609e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160a2:	89ab      	ldrh	r3, [r5, #12]
 80160a4:	2b01      	cmp	r3, #1
 80160a6:	d907      	bls.n	80160b8 <_fwalk_sglue+0x38>
 80160a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80160ac:	3301      	adds	r3, #1
 80160ae:	d003      	beq.n	80160b8 <_fwalk_sglue+0x38>
 80160b0:	4629      	mov	r1, r5
 80160b2:	4638      	mov	r0, r7
 80160b4:	47c0      	blx	r8
 80160b6:	4306      	orrs	r6, r0
 80160b8:	3568      	adds	r5, #104	@ 0x68
 80160ba:	e7e9      	b.n	8016090 <_fwalk_sglue+0x10>

080160bc <iprintf>:
 80160bc:	b40f      	push	{r0, r1, r2, r3}
 80160be:	b507      	push	{r0, r1, r2, lr}
 80160c0:	4906      	ldr	r1, [pc, #24]	@ (80160dc <iprintf+0x20>)
 80160c2:	ab04      	add	r3, sp, #16
 80160c4:	6808      	ldr	r0, [r1, #0]
 80160c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80160ca:	6881      	ldr	r1, [r0, #8]
 80160cc:	9301      	str	r3, [sp, #4]
 80160ce:	f000 fa83 	bl	80165d8 <_vfiprintf_r>
 80160d2:	b003      	add	sp, #12
 80160d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80160d8:	b004      	add	sp, #16
 80160da:	4770      	bx	lr
 80160dc:	24000040 	.word	0x24000040

080160e0 <__sread>:
 80160e0:	b510      	push	{r4, lr}
 80160e2:	460c      	mov	r4, r1
 80160e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160e8:	f000 f8ce 	bl	8016288 <_read_r>
 80160ec:	2800      	cmp	r0, #0
 80160ee:	bfab      	itete	ge
 80160f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80160f2:	89a3      	ldrhlt	r3, [r4, #12]
 80160f4:	181b      	addge	r3, r3, r0
 80160f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80160fa:	bfac      	ite	ge
 80160fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80160fe:	81a3      	strhlt	r3, [r4, #12]
 8016100:	bd10      	pop	{r4, pc}

08016102 <__swrite>:
 8016102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016106:	461f      	mov	r7, r3
 8016108:	898b      	ldrh	r3, [r1, #12]
 801610a:	05db      	lsls	r3, r3, #23
 801610c:	4605      	mov	r5, r0
 801610e:	460c      	mov	r4, r1
 8016110:	4616      	mov	r6, r2
 8016112:	d505      	bpl.n	8016120 <__swrite+0x1e>
 8016114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016118:	2302      	movs	r3, #2
 801611a:	2200      	movs	r2, #0
 801611c:	f000 f8a2 	bl	8016264 <_lseek_r>
 8016120:	89a3      	ldrh	r3, [r4, #12]
 8016122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016126:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801612a:	81a3      	strh	r3, [r4, #12]
 801612c:	4632      	mov	r2, r6
 801612e:	463b      	mov	r3, r7
 8016130:	4628      	mov	r0, r5
 8016132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016136:	f000 b8b9 	b.w	80162ac <_write_r>

0801613a <__sseek>:
 801613a:	b510      	push	{r4, lr}
 801613c:	460c      	mov	r4, r1
 801613e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016142:	f000 f88f 	bl	8016264 <_lseek_r>
 8016146:	1c43      	adds	r3, r0, #1
 8016148:	89a3      	ldrh	r3, [r4, #12]
 801614a:	bf15      	itete	ne
 801614c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801614e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016152:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016156:	81a3      	strheq	r3, [r4, #12]
 8016158:	bf18      	it	ne
 801615a:	81a3      	strhne	r3, [r4, #12]
 801615c:	bd10      	pop	{r4, pc}

0801615e <__sclose>:
 801615e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016162:	f000 b819 	b.w	8016198 <_close_r>

08016166 <memcmp>:
 8016166:	b510      	push	{r4, lr}
 8016168:	3901      	subs	r1, #1
 801616a:	4402      	add	r2, r0
 801616c:	4290      	cmp	r0, r2
 801616e:	d101      	bne.n	8016174 <memcmp+0xe>
 8016170:	2000      	movs	r0, #0
 8016172:	e005      	b.n	8016180 <memcmp+0x1a>
 8016174:	7803      	ldrb	r3, [r0, #0]
 8016176:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801617a:	42a3      	cmp	r3, r4
 801617c:	d001      	beq.n	8016182 <memcmp+0x1c>
 801617e:	1b18      	subs	r0, r3, r4
 8016180:	bd10      	pop	{r4, pc}
 8016182:	3001      	adds	r0, #1
 8016184:	e7f2      	b.n	801616c <memcmp+0x6>

08016186 <memset>:
 8016186:	4402      	add	r2, r0
 8016188:	4603      	mov	r3, r0
 801618a:	4293      	cmp	r3, r2
 801618c:	d100      	bne.n	8016190 <memset+0xa>
 801618e:	4770      	bx	lr
 8016190:	f803 1b01 	strb.w	r1, [r3], #1
 8016194:	e7f9      	b.n	801618a <memset+0x4>
	...

08016198 <_close_r>:
 8016198:	b538      	push	{r3, r4, r5, lr}
 801619a:	4d06      	ldr	r5, [pc, #24]	@ (80161b4 <_close_r+0x1c>)
 801619c:	2300      	movs	r3, #0
 801619e:	4604      	mov	r4, r0
 80161a0:	4608      	mov	r0, r1
 80161a2:	602b      	str	r3, [r5, #0]
 80161a4:	f7eb f868 	bl	8001278 <_close>
 80161a8:	1c43      	adds	r3, r0, #1
 80161aa:	d102      	bne.n	80161b2 <_close_r+0x1a>
 80161ac:	682b      	ldr	r3, [r5, #0]
 80161ae:	b103      	cbz	r3, 80161b2 <_close_r+0x1a>
 80161b0:	6023      	str	r3, [r4, #0]
 80161b2:	bd38      	pop	{r3, r4, r5, pc}
 80161b4:	2400cc68 	.word	0x2400cc68

080161b8 <_reclaim_reent>:
 80161b8:	4b29      	ldr	r3, [pc, #164]	@ (8016260 <_reclaim_reent+0xa8>)
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	4283      	cmp	r3, r0
 80161be:	b570      	push	{r4, r5, r6, lr}
 80161c0:	4604      	mov	r4, r0
 80161c2:	d04b      	beq.n	801625c <_reclaim_reent+0xa4>
 80161c4:	69c3      	ldr	r3, [r0, #28]
 80161c6:	b1ab      	cbz	r3, 80161f4 <_reclaim_reent+0x3c>
 80161c8:	68db      	ldr	r3, [r3, #12]
 80161ca:	b16b      	cbz	r3, 80161e8 <_reclaim_reent+0x30>
 80161cc:	2500      	movs	r5, #0
 80161ce:	69e3      	ldr	r3, [r4, #28]
 80161d0:	68db      	ldr	r3, [r3, #12]
 80161d2:	5959      	ldr	r1, [r3, r5]
 80161d4:	2900      	cmp	r1, #0
 80161d6:	d13b      	bne.n	8016250 <_reclaim_reent+0x98>
 80161d8:	3504      	adds	r5, #4
 80161da:	2d80      	cmp	r5, #128	@ 0x80
 80161dc:	d1f7      	bne.n	80161ce <_reclaim_reent+0x16>
 80161de:	69e3      	ldr	r3, [r4, #28]
 80161e0:	4620      	mov	r0, r4
 80161e2:	68d9      	ldr	r1, [r3, #12]
 80161e4:	f000 f8ce 	bl	8016384 <_free_r>
 80161e8:	69e3      	ldr	r3, [r4, #28]
 80161ea:	6819      	ldr	r1, [r3, #0]
 80161ec:	b111      	cbz	r1, 80161f4 <_reclaim_reent+0x3c>
 80161ee:	4620      	mov	r0, r4
 80161f0:	f000 f8c8 	bl	8016384 <_free_r>
 80161f4:	6961      	ldr	r1, [r4, #20]
 80161f6:	b111      	cbz	r1, 80161fe <_reclaim_reent+0x46>
 80161f8:	4620      	mov	r0, r4
 80161fa:	f000 f8c3 	bl	8016384 <_free_r>
 80161fe:	69e1      	ldr	r1, [r4, #28]
 8016200:	b111      	cbz	r1, 8016208 <_reclaim_reent+0x50>
 8016202:	4620      	mov	r0, r4
 8016204:	f000 f8be 	bl	8016384 <_free_r>
 8016208:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801620a:	b111      	cbz	r1, 8016212 <_reclaim_reent+0x5a>
 801620c:	4620      	mov	r0, r4
 801620e:	f000 f8b9 	bl	8016384 <_free_r>
 8016212:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016214:	b111      	cbz	r1, 801621c <_reclaim_reent+0x64>
 8016216:	4620      	mov	r0, r4
 8016218:	f000 f8b4 	bl	8016384 <_free_r>
 801621c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801621e:	b111      	cbz	r1, 8016226 <_reclaim_reent+0x6e>
 8016220:	4620      	mov	r0, r4
 8016222:	f000 f8af 	bl	8016384 <_free_r>
 8016226:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016228:	b111      	cbz	r1, 8016230 <_reclaim_reent+0x78>
 801622a:	4620      	mov	r0, r4
 801622c:	f000 f8aa 	bl	8016384 <_free_r>
 8016230:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8016232:	b111      	cbz	r1, 801623a <_reclaim_reent+0x82>
 8016234:	4620      	mov	r0, r4
 8016236:	f000 f8a5 	bl	8016384 <_free_r>
 801623a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801623c:	b111      	cbz	r1, 8016244 <_reclaim_reent+0x8c>
 801623e:	4620      	mov	r0, r4
 8016240:	f000 f8a0 	bl	8016384 <_free_r>
 8016244:	6a23      	ldr	r3, [r4, #32]
 8016246:	b14b      	cbz	r3, 801625c <_reclaim_reent+0xa4>
 8016248:	4620      	mov	r0, r4
 801624a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801624e:	4718      	bx	r3
 8016250:	680e      	ldr	r6, [r1, #0]
 8016252:	4620      	mov	r0, r4
 8016254:	f000 f896 	bl	8016384 <_free_r>
 8016258:	4631      	mov	r1, r6
 801625a:	e7bb      	b.n	80161d4 <_reclaim_reent+0x1c>
 801625c:	bd70      	pop	{r4, r5, r6, pc}
 801625e:	bf00      	nop
 8016260:	24000040 	.word	0x24000040

08016264 <_lseek_r>:
 8016264:	b538      	push	{r3, r4, r5, lr}
 8016266:	4d07      	ldr	r5, [pc, #28]	@ (8016284 <_lseek_r+0x20>)
 8016268:	4604      	mov	r4, r0
 801626a:	4608      	mov	r0, r1
 801626c:	4611      	mov	r1, r2
 801626e:	2200      	movs	r2, #0
 8016270:	602a      	str	r2, [r5, #0]
 8016272:	461a      	mov	r2, r3
 8016274:	f7eb f827 	bl	80012c6 <_lseek>
 8016278:	1c43      	adds	r3, r0, #1
 801627a:	d102      	bne.n	8016282 <_lseek_r+0x1e>
 801627c:	682b      	ldr	r3, [r5, #0]
 801627e:	b103      	cbz	r3, 8016282 <_lseek_r+0x1e>
 8016280:	6023      	str	r3, [r4, #0]
 8016282:	bd38      	pop	{r3, r4, r5, pc}
 8016284:	2400cc68 	.word	0x2400cc68

08016288 <_read_r>:
 8016288:	b538      	push	{r3, r4, r5, lr}
 801628a:	4d07      	ldr	r5, [pc, #28]	@ (80162a8 <_read_r+0x20>)
 801628c:	4604      	mov	r4, r0
 801628e:	4608      	mov	r0, r1
 8016290:	4611      	mov	r1, r2
 8016292:	2200      	movs	r2, #0
 8016294:	602a      	str	r2, [r5, #0]
 8016296:	461a      	mov	r2, r3
 8016298:	f7ea ffb5 	bl	8001206 <_read>
 801629c:	1c43      	adds	r3, r0, #1
 801629e:	d102      	bne.n	80162a6 <_read_r+0x1e>
 80162a0:	682b      	ldr	r3, [r5, #0]
 80162a2:	b103      	cbz	r3, 80162a6 <_read_r+0x1e>
 80162a4:	6023      	str	r3, [r4, #0]
 80162a6:	bd38      	pop	{r3, r4, r5, pc}
 80162a8:	2400cc68 	.word	0x2400cc68

080162ac <_write_r>:
 80162ac:	b538      	push	{r3, r4, r5, lr}
 80162ae:	4d07      	ldr	r5, [pc, #28]	@ (80162cc <_write_r+0x20>)
 80162b0:	4604      	mov	r4, r0
 80162b2:	4608      	mov	r0, r1
 80162b4:	4611      	mov	r1, r2
 80162b6:	2200      	movs	r2, #0
 80162b8:	602a      	str	r2, [r5, #0]
 80162ba:	461a      	mov	r2, r3
 80162bc:	f7ea ffc0 	bl	8001240 <_write>
 80162c0:	1c43      	adds	r3, r0, #1
 80162c2:	d102      	bne.n	80162ca <_write_r+0x1e>
 80162c4:	682b      	ldr	r3, [r5, #0]
 80162c6:	b103      	cbz	r3, 80162ca <_write_r+0x1e>
 80162c8:	6023      	str	r3, [r4, #0]
 80162ca:	bd38      	pop	{r3, r4, r5, pc}
 80162cc:	2400cc68 	.word	0x2400cc68

080162d0 <__errno>:
 80162d0:	4b01      	ldr	r3, [pc, #4]	@ (80162d8 <__errno+0x8>)
 80162d2:	6818      	ldr	r0, [r3, #0]
 80162d4:	4770      	bx	lr
 80162d6:	bf00      	nop
 80162d8:	24000040 	.word	0x24000040

080162dc <__libc_init_array>:
 80162dc:	b570      	push	{r4, r5, r6, lr}
 80162de:	4d0d      	ldr	r5, [pc, #52]	@ (8016314 <__libc_init_array+0x38>)
 80162e0:	4c0d      	ldr	r4, [pc, #52]	@ (8016318 <__libc_init_array+0x3c>)
 80162e2:	1b64      	subs	r4, r4, r5
 80162e4:	10a4      	asrs	r4, r4, #2
 80162e6:	2600      	movs	r6, #0
 80162e8:	42a6      	cmp	r6, r4
 80162ea:	d109      	bne.n	8016300 <__libc_init_array+0x24>
 80162ec:	4d0b      	ldr	r5, [pc, #44]	@ (801631c <__libc_init_array+0x40>)
 80162ee:	4c0c      	ldr	r4, [pc, #48]	@ (8016320 <__libc_init_array+0x44>)
 80162f0:	f001 f942 	bl	8017578 <_init>
 80162f4:	1b64      	subs	r4, r4, r5
 80162f6:	10a4      	asrs	r4, r4, #2
 80162f8:	2600      	movs	r6, #0
 80162fa:	42a6      	cmp	r6, r4
 80162fc:	d105      	bne.n	801630a <__libc_init_array+0x2e>
 80162fe:	bd70      	pop	{r4, r5, r6, pc}
 8016300:	f855 3b04 	ldr.w	r3, [r5], #4
 8016304:	4798      	blx	r3
 8016306:	3601      	adds	r6, #1
 8016308:	e7ee      	b.n	80162e8 <__libc_init_array+0xc>
 801630a:	f855 3b04 	ldr.w	r3, [r5], #4
 801630e:	4798      	blx	r3
 8016310:	3601      	adds	r6, #1
 8016312:	e7f2      	b.n	80162fa <__libc_init_array+0x1e>
 8016314:	0801bba8 	.word	0x0801bba8
 8016318:	0801bba8 	.word	0x0801bba8
 801631c:	0801bba8 	.word	0x0801bba8
 8016320:	0801bbac 	.word	0x0801bbac

08016324 <__retarget_lock_init_recursive>:
 8016324:	4770      	bx	lr

08016326 <__retarget_lock_acquire_recursive>:
 8016326:	4770      	bx	lr

08016328 <__retarget_lock_release_recursive>:
 8016328:	4770      	bx	lr

0801632a <memcpy>:
 801632a:	440a      	add	r2, r1
 801632c:	4291      	cmp	r1, r2
 801632e:	f100 33ff 	add.w	r3, r0, #4294967295
 8016332:	d100      	bne.n	8016336 <memcpy+0xc>
 8016334:	4770      	bx	lr
 8016336:	b510      	push	{r4, lr}
 8016338:	f811 4b01 	ldrb.w	r4, [r1], #1
 801633c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016340:	4291      	cmp	r1, r2
 8016342:	d1f9      	bne.n	8016338 <memcpy+0xe>
 8016344:	bd10      	pop	{r4, pc}
	...

08016348 <__assert_func>:
 8016348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801634a:	4614      	mov	r4, r2
 801634c:	461a      	mov	r2, r3
 801634e:	4b09      	ldr	r3, [pc, #36]	@ (8016374 <__assert_func+0x2c>)
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	4605      	mov	r5, r0
 8016354:	68d8      	ldr	r0, [r3, #12]
 8016356:	b954      	cbnz	r4, 801636e <__assert_func+0x26>
 8016358:	4b07      	ldr	r3, [pc, #28]	@ (8016378 <__assert_func+0x30>)
 801635a:	461c      	mov	r4, r3
 801635c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016360:	9100      	str	r1, [sp, #0]
 8016362:	462b      	mov	r3, r5
 8016364:	4905      	ldr	r1, [pc, #20]	@ (801637c <__assert_func+0x34>)
 8016366:	f000 fc89 	bl	8016c7c <fiprintf>
 801636a:	f000 fd3d 	bl	8016de8 <abort>
 801636e:	4b04      	ldr	r3, [pc, #16]	@ (8016380 <__assert_func+0x38>)
 8016370:	e7f4      	b.n	801635c <__assert_func+0x14>
 8016372:	bf00      	nop
 8016374:	24000040 	.word	0x24000040
 8016378:	0801a2b0 	.word	0x0801a2b0
 801637c:	0801a282 	.word	0x0801a282
 8016380:	0801a275 	.word	0x0801a275

08016384 <_free_r>:
 8016384:	b538      	push	{r3, r4, r5, lr}
 8016386:	4605      	mov	r5, r0
 8016388:	2900      	cmp	r1, #0
 801638a:	d041      	beq.n	8016410 <_free_r+0x8c>
 801638c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016390:	1f0c      	subs	r4, r1, #4
 8016392:	2b00      	cmp	r3, #0
 8016394:	bfb8      	it	lt
 8016396:	18e4      	addlt	r4, r4, r3
 8016398:	f000 f8e8 	bl	801656c <__malloc_lock>
 801639c:	4a1d      	ldr	r2, [pc, #116]	@ (8016414 <_free_r+0x90>)
 801639e:	6813      	ldr	r3, [r2, #0]
 80163a0:	b933      	cbnz	r3, 80163b0 <_free_r+0x2c>
 80163a2:	6063      	str	r3, [r4, #4]
 80163a4:	6014      	str	r4, [r2, #0]
 80163a6:	4628      	mov	r0, r5
 80163a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80163ac:	f000 b8e4 	b.w	8016578 <__malloc_unlock>
 80163b0:	42a3      	cmp	r3, r4
 80163b2:	d908      	bls.n	80163c6 <_free_r+0x42>
 80163b4:	6820      	ldr	r0, [r4, #0]
 80163b6:	1821      	adds	r1, r4, r0
 80163b8:	428b      	cmp	r3, r1
 80163ba:	bf01      	itttt	eq
 80163bc:	6819      	ldreq	r1, [r3, #0]
 80163be:	685b      	ldreq	r3, [r3, #4]
 80163c0:	1809      	addeq	r1, r1, r0
 80163c2:	6021      	streq	r1, [r4, #0]
 80163c4:	e7ed      	b.n	80163a2 <_free_r+0x1e>
 80163c6:	461a      	mov	r2, r3
 80163c8:	685b      	ldr	r3, [r3, #4]
 80163ca:	b10b      	cbz	r3, 80163d0 <_free_r+0x4c>
 80163cc:	42a3      	cmp	r3, r4
 80163ce:	d9fa      	bls.n	80163c6 <_free_r+0x42>
 80163d0:	6811      	ldr	r1, [r2, #0]
 80163d2:	1850      	adds	r0, r2, r1
 80163d4:	42a0      	cmp	r0, r4
 80163d6:	d10b      	bne.n	80163f0 <_free_r+0x6c>
 80163d8:	6820      	ldr	r0, [r4, #0]
 80163da:	4401      	add	r1, r0
 80163dc:	1850      	adds	r0, r2, r1
 80163de:	4283      	cmp	r3, r0
 80163e0:	6011      	str	r1, [r2, #0]
 80163e2:	d1e0      	bne.n	80163a6 <_free_r+0x22>
 80163e4:	6818      	ldr	r0, [r3, #0]
 80163e6:	685b      	ldr	r3, [r3, #4]
 80163e8:	6053      	str	r3, [r2, #4]
 80163ea:	4408      	add	r0, r1
 80163ec:	6010      	str	r0, [r2, #0]
 80163ee:	e7da      	b.n	80163a6 <_free_r+0x22>
 80163f0:	d902      	bls.n	80163f8 <_free_r+0x74>
 80163f2:	230c      	movs	r3, #12
 80163f4:	602b      	str	r3, [r5, #0]
 80163f6:	e7d6      	b.n	80163a6 <_free_r+0x22>
 80163f8:	6820      	ldr	r0, [r4, #0]
 80163fa:	1821      	adds	r1, r4, r0
 80163fc:	428b      	cmp	r3, r1
 80163fe:	bf04      	itt	eq
 8016400:	6819      	ldreq	r1, [r3, #0]
 8016402:	685b      	ldreq	r3, [r3, #4]
 8016404:	6063      	str	r3, [r4, #4]
 8016406:	bf04      	itt	eq
 8016408:	1809      	addeq	r1, r1, r0
 801640a:	6021      	streq	r1, [r4, #0]
 801640c:	6054      	str	r4, [r2, #4]
 801640e:	e7ca      	b.n	80163a6 <_free_r+0x22>
 8016410:	bd38      	pop	{r3, r4, r5, pc}
 8016412:	bf00      	nop
 8016414:	2400cc74 	.word	0x2400cc74

08016418 <malloc>:
 8016418:	4b02      	ldr	r3, [pc, #8]	@ (8016424 <malloc+0xc>)
 801641a:	4601      	mov	r1, r0
 801641c:	6818      	ldr	r0, [r3, #0]
 801641e:	f000 b825 	b.w	801646c <_malloc_r>
 8016422:	bf00      	nop
 8016424:	24000040 	.word	0x24000040

08016428 <sbrk_aligned>:
 8016428:	b570      	push	{r4, r5, r6, lr}
 801642a:	4e0f      	ldr	r6, [pc, #60]	@ (8016468 <sbrk_aligned+0x40>)
 801642c:	460c      	mov	r4, r1
 801642e:	6831      	ldr	r1, [r6, #0]
 8016430:	4605      	mov	r5, r0
 8016432:	b911      	cbnz	r1, 801643a <sbrk_aligned+0x12>
 8016434:	f000 fcc8 	bl	8016dc8 <_sbrk_r>
 8016438:	6030      	str	r0, [r6, #0]
 801643a:	4621      	mov	r1, r4
 801643c:	4628      	mov	r0, r5
 801643e:	f000 fcc3 	bl	8016dc8 <_sbrk_r>
 8016442:	1c43      	adds	r3, r0, #1
 8016444:	d103      	bne.n	801644e <sbrk_aligned+0x26>
 8016446:	f04f 34ff 	mov.w	r4, #4294967295
 801644a:	4620      	mov	r0, r4
 801644c:	bd70      	pop	{r4, r5, r6, pc}
 801644e:	1cc4      	adds	r4, r0, #3
 8016450:	f024 0403 	bic.w	r4, r4, #3
 8016454:	42a0      	cmp	r0, r4
 8016456:	d0f8      	beq.n	801644a <sbrk_aligned+0x22>
 8016458:	1a21      	subs	r1, r4, r0
 801645a:	4628      	mov	r0, r5
 801645c:	f000 fcb4 	bl	8016dc8 <_sbrk_r>
 8016460:	3001      	adds	r0, #1
 8016462:	d1f2      	bne.n	801644a <sbrk_aligned+0x22>
 8016464:	e7ef      	b.n	8016446 <sbrk_aligned+0x1e>
 8016466:	bf00      	nop
 8016468:	2400cc70 	.word	0x2400cc70

0801646c <_malloc_r>:
 801646c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016470:	1ccd      	adds	r5, r1, #3
 8016472:	f025 0503 	bic.w	r5, r5, #3
 8016476:	3508      	adds	r5, #8
 8016478:	2d0c      	cmp	r5, #12
 801647a:	bf38      	it	cc
 801647c:	250c      	movcc	r5, #12
 801647e:	2d00      	cmp	r5, #0
 8016480:	4606      	mov	r6, r0
 8016482:	db01      	blt.n	8016488 <_malloc_r+0x1c>
 8016484:	42a9      	cmp	r1, r5
 8016486:	d904      	bls.n	8016492 <_malloc_r+0x26>
 8016488:	230c      	movs	r3, #12
 801648a:	6033      	str	r3, [r6, #0]
 801648c:	2000      	movs	r0, #0
 801648e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016492:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016568 <_malloc_r+0xfc>
 8016496:	f000 f869 	bl	801656c <__malloc_lock>
 801649a:	f8d8 3000 	ldr.w	r3, [r8]
 801649e:	461c      	mov	r4, r3
 80164a0:	bb44      	cbnz	r4, 80164f4 <_malloc_r+0x88>
 80164a2:	4629      	mov	r1, r5
 80164a4:	4630      	mov	r0, r6
 80164a6:	f7ff ffbf 	bl	8016428 <sbrk_aligned>
 80164aa:	1c43      	adds	r3, r0, #1
 80164ac:	4604      	mov	r4, r0
 80164ae:	d158      	bne.n	8016562 <_malloc_r+0xf6>
 80164b0:	f8d8 4000 	ldr.w	r4, [r8]
 80164b4:	4627      	mov	r7, r4
 80164b6:	2f00      	cmp	r7, #0
 80164b8:	d143      	bne.n	8016542 <_malloc_r+0xd6>
 80164ba:	2c00      	cmp	r4, #0
 80164bc:	d04b      	beq.n	8016556 <_malloc_r+0xea>
 80164be:	6823      	ldr	r3, [r4, #0]
 80164c0:	4639      	mov	r1, r7
 80164c2:	4630      	mov	r0, r6
 80164c4:	eb04 0903 	add.w	r9, r4, r3
 80164c8:	f000 fc7e 	bl	8016dc8 <_sbrk_r>
 80164cc:	4581      	cmp	r9, r0
 80164ce:	d142      	bne.n	8016556 <_malloc_r+0xea>
 80164d0:	6821      	ldr	r1, [r4, #0]
 80164d2:	1a6d      	subs	r5, r5, r1
 80164d4:	4629      	mov	r1, r5
 80164d6:	4630      	mov	r0, r6
 80164d8:	f7ff ffa6 	bl	8016428 <sbrk_aligned>
 80164dc:	3001      	adds	r0, #1
 80164de:	d03a      	beq.n	8016556 <_malloc_r+0xea>
 80164e0:	6823      	ldr	r3, [r4, #0]
 80164e2:	442b      	add	r3, r5
 80164e4:	6023      	str	r3, [r4, #0]
 80164e6:	f8d8 3000 	ldr.w	r3, [r8]
 80164ea:	685a      	ldr	r2, [r3, #4]
 80164ec:	bb62      	cbnz	r2, 8016548 <_malloc_r+0xdc>
 80164ee:	f8c8 7000 	str.w	r7, [r8]
 80164f2:	e00f      	b.n	8016514 <_malloc_r+0xa8>
 80164f4:	6822      	ldr	r2, [r4, #0]
 80164f6:	1b52      	subs	r2, r2, r5
 80164f8:	d420      	bmi.n	801653c <_malloc_r+0xd0>
 80164fa:	2a0b      	cmp	r2, #11
 80164fc:	d917      	bls.n	801652e <_malloc_r+0xc2>
 80164fe:	1961      	adds	r1, r4, r5
 8016500:	42a3      	cmp	r3, r4
 8016502:	6025      	str	r5, [r4, #0]
 8016504:	bf18      	it	ne
 8016506:	6059      	strne	r1, [r3, #4]
 8016508:	6863      	ldr	r3, [r4, #4]
 801650a:	bf08      	it	eq
 801650c:	f8c8 1000 	streq.w	r1, [r8]
 8016510:	5162      	str	r2, [r4, r5]
 8016512:	604b      	str	r3, [r1, #4]
 8016514:	4630      	mov	r0, r6
 8016516:	f000 f82f 	bl	8016578 <__malloc_unlock>
 801651a:	f104 000b 	add.w	r0, r4, #11
 801651e:	1d23      	adds	r3, r4, #4
 8016520:	f020 0007 	bic.w	r0, r0, #7
 8016524:	1ac2      	subs	r2, r0, r3
 8016526:	bf1c      	itt	ne
 8016528:	1a1b      	subne	r3, r3, r0
 801652a:	50a3      	strne	r3, [r4, r2]
 801652c:	e7af      	b.n	801648e <_malloc_r+0x22>
 801652e:	6862      	ldr	r2, [r4, #4]
 8016530:	42a3      	cmp	r3, r4
 8016532:	bf0c      	ite	eq
 8016534:	f8c8 2000 	streq.w	r2, [r8]
 8016538:	605a      	strne	r2, [r3, #4]
 801653a:	e7eb      	b.n	8016514 <_malloc_r+0xa8>
 801653c:	4623      	mov	r3, r4
 801653e:	6864      	ldr	r4, [r4, #4]
 8016540:	e7ae      	b.n	80164a0 <_malloc_r+0x34>
 8016542:	463c      	mov	r4, r7
 8016544:	687f      	ldr	r7, [r7, #4]
 8016546:	e7b6      	b.n	80164b6 <_malloc_r+0x4a>
 8016548:	461a      	mov	r2, r3
 801654a:	685b      	ldr	r3, [r3, #4]
 801654c:	42a3      	cmp	r3, r4
 801654e:	d1fb      	bne.n	8016548 <_malloc_r+0xdc>
 8016550:	2300      	movs	r3, #0
 8016552:	6053      	str	r3, [r2, #4]
 8016554:	e7de      	b.n	8016514 <_malloc_r+0xa8>
 8016556:	230c      	movs	r3, #12
 8016558:	6033      	str	r3, [r6, #0]
 801655a:	4630      	mov	r0, r6
 801655c:	f000 f80c 	bl	8016578 <__malloc_unlock>
 8016560:	e794      	b.n	801648c <_malloc_r+0x20>
 8016562:	6005      	str	r5, [r0, #0]
 8016564:	e7d6      	b.n	8016514 <_malloc_r+0xa8>
 8016566:	bf00      	nop
 8016568:	2400cc74 	.word	0x2400cc74

0801656c <__malloc_lock>:
 801656c:	4801      	ldr	r0, [pc, #4]	@ (8016574 <__malloc_lock+0x8>)
 801656e:	f7ff beda 	b.w	8016326 <__retarget_lock_acquire_recursive>
 8016572:	bf00      	nop
 8016574:	2400cc6c 	.word	0x2400cc6c

08016578 <__malloc_unlock>:
 8016578:	4801      	ldr	r0, [pc, #4]	@ (8016580 <__malloc_unlock+0x8>)
 801657a:	f7ff bed5 	b.w	8016328 <__retarget_lock_release_recursive>
 801657e:	bf00      	nop
 8016580:	2400cc6c 	.word	0x2400cc6c

08016584 <__sfputc_r>:
 8016584:	6893      	ldr	r3, [r2, #8]
 8016586:	3b01      	subs	r3, #1
 8016588:	2b00      	cmp	r3, #0
 801658a:	b410      	push	{r4}
 801658c:	6093      	str	r3, [r2, #8]
 801658e:	da08      	bge.n	80165a2 <__sfputc_r+0x1e>
 8016590:	6994      	ldr	r4, [r2, #24]
 8016592:	42a3      	cmp	r3, r4
 8016594:	db01      	blt.n	801659a <__sfputc_r+0x16>
 8016596:	290a      	cmp	r1, #10
 8016598:	d103      	bne.n	80165a2 <__sfputc_r+0x1e>
 801659a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801659e:	f000 bb7f 	b.w	8016ca0 <__swbuf_r>
 80165a2:	6813      	ldr	r3, [r2, #0]
 80165a4:	1c58      	adds	r0, r3, #1
 80165a6:	6010      	str	r0, [r2, #0]
 80165a8:	7019      	strb	r1, [r3, #0]
 80165aa:	4608      	mov	r0, r1
 80165ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80165b0:	4770      	bx	lr

080165b2 <__sfputs_r>:
 80165b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165b4:	4606      	mov	r6, r0
 80165b6:	460f      	mov	r7, r1
 80165b8:	4614      	mov	r4, r2
 80165ba:	18d5      	adds	r5, r2, r3
 80165bc:	42ac      	cmp	r4, r5
 80165be:	d101      	bne.n	80165c4 <__sfputs_r+0x12>
 80165c0:	2000      	movs	r0, #0
 80165c2:	e007      	b.n	80165d4 <__sfputs_r+0x22>
 80165c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165c8:	463a      	mov	r2, r7
 80165ca:	4630      	mov	r0, r6
 80165cc:	f7ff ffda 	bl	8016584 <__sfputc_r>
 80165d0:	1c43      	adds	r3, r0, #1
 80165d2:	d1f3      	bne.n	80165bc <__sfputs_r+0xa>
 80165d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080165d8 <_vfiprintf_r>:
 80165d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165dc:	460d      	mov	r5, r1
 80165de:	b09d      	sub	sp, #116	@ 0x74
 80165e0:	4614      	mov	r4, r2
 80165e2:	4698      	mov	r8, r3
 80165e4:	4606      	mov	r6, r0
 80165e6:	b118      	cbz	r0, 80165f0 <_vfiprintf_r+0x18>
 80165e8:	6a03      	ldr	r3, [r0, #32]
 80165ea:	b90b      	cbnz	r3, 80165f0 <_vfiprintf_r+0x18>
 80165ec:	f7ff fd30 	bl	8016050 <__sinit>
 80165f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80165f2:	07d9      	lsls	r1, r3, #31
 80165f4:	d405      	bmi.n	8016602 <_vfiprintf_r+0x2a>
 80165f6:	89ab      	ldrh	r3, [r5, #12]
 80165f8:	059a      	lsls	r2, r3, #22
 80165fa:	d402      	bmi.n	8016602 <_vfiprintf_r+0x2a>
 80165fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80165fe:	f7ff fe92 	bl	8016326 <__retarget_lock_acquire_recursive>
 8016602:	89ab      	ldrh	r3, [r5, #12]
 8016604:	071b      	lsls	r3, r3, #28
 8016606:	d501      	bpl.n	801660c <_vfiprintf_r+0x34>
 8016608:	692b      	ldr	r3, [r5, #16]
 801660a:	b99b      	cbnz	r3, 8016634 <_vfiprintf_r+0x5c>
 801660c:	4629      	mov	r1, r5
 801660e:	4630      	mov	r0, r6
 8016610:	f000 fb84 	bl	8016d1c <__swsetup_r>
 8016614:	b170      	cbz	r0, 8016634 <_vfiprintf_r+0x5c>
 8016616:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016618:	07dc      	lsls	r4, r3, #31
 801661a:	d504      	bpl.n	8016626 <_vfiprintf_r+0x4e>
 801661c:	f04f 30ff 	mov.w	r0, #4294967295
 8016620:	b01d      	add	sp, #116	@ 0x74
 8016622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016626:	89ab      	ldrh	r3, [r5, #12]
 8016628:	0598      	lsls	r0, r3, #22
 801662a:	d4f7      	bmi.n	801661c <_vfiprintf_r+0x44>
 801662c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801662e:	f7ff fe7b 	bl	8016328 <__retarget_lock_release_recursive>
 8016632:	e7f3      	b.n	801661c <_vfiprintf_r+0x44>
 8016634:	2300      	movs	r3, #0
 8016636:	9309      	str	r3, [sp, #36]	@ 0x24
 8016638:	2320      	movs	r3, #32
 801663a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801663e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016642:	2330      	movs	r3, #48	@ 0x30
 8016644:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80167f4 <_vfiprintf_r+0x21c>
 8016648:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801664c:	f04f 0901 	mov.w	r9, #1
 8016650:	4623      	mov	r3, r4
 8016652:	469a      	mov	sl, r3
 8016654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016658:	b10a      	cbz	r2, 801665e <_vfiprintf_r+0x86>
 801665a:	2a25      	cmp	r2, #37	@ 0x25
 801665c:	d1f9      	bne.n	8016652 <_vfiprintf_r+0x7a>
 801665e:	ebba 0b04 	subs.w	fp, sl, r4
 8016662:	d00b      	beq.n	801667c <_vfiprintf_r+0xa4>
 8016664:	465b      	mov	r3, fp
 8016666:	4622      	mov	r2, r4
 8016668:	4629      	mov	r1, r5
 801666a:	4630      	mov	r0, r6
 801666c:	f7ff ffa1 	bl	80165b2 <__sfputs_r>
 8016670:	3001      	adds	r0, #1
 8016672:	f000 80a7 	beq.w	80167c4 <_vfiprintf_r+0x1ec>
 8016676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016678:	445a      	add	r2, fp
 801667a:	9209      	str	r2, [sp, #36]	@ 0x24
 801667c:	f89a 3000 	ldrb.w	r3, [sl]
 8016680:	2b00      	cmp	r3, #0
 8016682:	f000 809f 	beq.w	80167c4 <_vfiprintf_r+0x1ec>
 8016686:	2300      	movs	r3, #0
 8016688:	f04f 32ff 	mov.w	r2, #4294967295
 801668c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016690:	f10a 0a01 	add.w	sl, sl, #1
 8016694:	9304      	str	r3, [sp, #16]
 8016696:	9307      	str	r3, [sp, #28]
 8016698:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801669c:	931a      	str	r3, [sp, #104]	@ 0x68
 801669e:	4654      	mov	r4, sl
 80166a0:	2205      	movs	r2, #5
 80166a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166a6:	4853      	ldr	r0, [pc, #332]	@ (80167f4 <_vfiprintf_r+0x21c>)
 80166a8:	f7e9 fe32 	bl	8000310 <memchr>
 80166ac:	9a04      	ldr	r2, [sp, #16]
 80166ae:	b9d8      	cbnz	r0, 80166e8 <_vfiprintf_r+0x110>
 80166b0:	06d1      	lsls	r1, r2, #27
 80166b2:	bf44      	itt	mi
 80166b4:	2320      	movmi	r3, #32
 80166b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80166ba:	0713      	lsls	r3, r2, #28
 80166bc:	bf44      	itt	mi
 80166be:	232b      	movmi	r3, #43	@ 0x2b
 80166c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80166c4:	f89a 3000 	ldrb.w	r3, [sl]
 80166c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80166ca:	d015      	beq.n	80166f8 <_vfiprintf_r+0x120>
 80166cc:	9a07      	ldr	r2, [sp, #28]
 80166ce:	4654      	mov	r4, sl
 80166d0:	2000      	movs	r0, #0
 80166d2:	f04f 0c0a 	mov.w	ip, #10
 80166d6:	4621      	mov	r1, r4
 80166d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80166dc:	3b30      	subs	r3, #48	@ 0x30
 80166de:	2b09      	cmp	r3, #9
 80166e0:	d94b      	bls.n	801677a <_vfiprintf_r+0x1a2>
 80166e2:	b1b0      	cbz	r0, 8016712 <_vfiprintf_r+0x13a>
 80166e4:	9207      	str	r2, [sp, #28]
 80166e6:	e014      	b.n	8016712 <_vfiprintf_r+0x13a>
 80166e8:	eba0 0308 	sub.w	r3, r0, r8
 80166ec:	fa09 f303 	lsl.w	r3, r9, r3
 80166f0:	4313      	orrs	r3, r2
 80166f2:	9304      	str	r3, [sp, #16]
 80166f4:	46a2      	mov	sl, r4
 80166f6:	e7d2      	b.n	801669e <_vfiprintf_r+0xc6>
 80166f8:	9b03      	ldr	r3, [sp, #12]
 80166fa:	1d19      	adds	r1, r3, #4
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	9103      	str	r1, [sp, #12]
 8016700:	2b00      	cmp	r3, #0
 8016702:	bfbb      	ittet	lt
 8016704:	425b      	neglt	r3, r3
 8016706:	f042 0202 	orrlt.w	r2, r2, #2
 801670a:	9307      	strge	r3, [sp, #28]
 801670c:	9307      	strlt	r3, [sp, #28]
 801670e:	bfb8      	it	lt
 8016710:	9204      	strlt	r2, [sp, #16]
 8016712:	7823      	ldrb	r3, [r4, #0]
 8016714:	2b2e      	cmp	r3, #46	@ 0x2e
 8016716:	d10a      	bne.n	801672e <_vfiprintf_r+0x156>
 8016718:	7863      	ldrb	r3, [r4, #1]
 801671a:	2b2a      	cmp	r3, #42	@ 0x2a
 801671c:	d132      	bne.n	8016784 <_vfiprintf_r+0x1ac>
 801671e:	9b03      	ldr	r3, [sp, #12]
 8016720:	1d1a      	adds	r2, r3, #4
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	9203      	str	r2, [sp, #12]
 8016726:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801672a:	3402      	adds	r4, #2
 801672c:	9305      	str	r3, [sp, #20]
 801672e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016804 <_vfiprintf_r+0x22c>
 8016732:	7821      	ldrb	r1, [r4, #0]
 8016734:	2203      	movs	r2, #3
 8016736:	4650      	mov	r0, sl
 8016738:	f7e9 fdea 	bl	8000310 <memchr>
 801673c:	b138      	cbz	r0, 801674e <_vfiprintf_r+0x176>
 801673e:	9b04      	ldr	r3, [sp, #16]
 8016740:	eba0 000a 	sub.w	r0, r0, sl
 8016744:	2240      	movs	r2, #64	@ 0x40
 8016746:	4082      	lsls	r2, r0
 8016748:	4313      	orrs	r3, r2
 801674a:	3401      	adds	r4, #1
 801674c:	9304      	str	r3, [sp, #16]
 801674e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016752:	4829      	ldr	r0, [pc, #164]	@ (80167f8 <_vfiprintf_r+0x220>)
 8016754:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016758:	2206      	movs	r2, #6
 801675a:	f7e9 fdd9 	bl	8000310 <memchr>
 801675e:	2800      	cmp	r0, #0
 8016760:	d03f      	beq.n	80167e2 <_vfiprintf_r+0x20a>
 8016762:	4b26      	ldr	r3, [pc, #152]	@ (80167fc <_vfiprintf_r+0x224>)
 8016764:	bb1b      	cbnz	r3, 80167ae <_vfiprintf_r+0x1d6>
 8016766:	9b03      	ldr	r3, [sp, #12]
 8016768:	3307      	adds	r3, #7
 801676a:	f023 0307 	bic.w	r3, r3, #7
 801676e:	3308      	adds	r3, #8
 8016770:	9303      	str	r3, [sp, #12]
 8016772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016774:	443b      	add	r3, r7
 8016776:	9309      	str	r3, [sp, #36]	@ 0x24
 8016778:	e76a      	b.n	8016650 <_vfiprintf_r+0x78>
 801677a:	fb0c 3202 	mla	r2, ip, r2, r3
 801677e:	460c      	mov	r4, r1
 8016780:	2001      	movs	r0, #1
 8016782:	e7a8      	b.n	80166d6 <_vfiprintf_r+0xfe>
 8016784:	2300      	movs	r3, #0
 8016786:	3401      	adds	r4, #1
 8016788:	9305      	str	r3, [sp, #20]
 801678a:	4619      	mov	r1, r3
 801678c:	f04f 0c0a 	mov.w	ip, #10
 8016790:	4620      	mov	r0, r4
 8016792:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016796:	3a30      	subs	r2, #48	@ 0x30
 8016798:	2a09      	cmp	r2, #9
 801679a:	d903      	bls.n	80167a4 <_vfiprintf_r+0x1cc>
 801679c:	2b00      	cmp	r3, #0
 801679e:	d0c6      	beq.n	801672e <_vfiprintf_r+0x156>
 80167a0:	9105      	str	r1, [sp, #20]
 80167a2:	e7c4      	b.n	801672e <_vfiprintf_r+0x156>
 80167a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80167a8:	4604      	mov	r4, r0
 80167aa:	2301      	movs	r3, #1
 80167ac:	e7f0      	b.n	8016790 <_vfiprintf_r+0x1b8>
 80167ae:	ab03      	add	r3, sp, #12
 80167b0:	9300      	str	r3, [sp, #0]
 80167b2:	462a      	mov	r2, r5
 80167b4:	4b12      	ldr	r3, [pc, #72]	@ (8016800 <_vfiprintf_r+0x228>)
 80167b6:	a904      	add	r1, sp, #16
 80167b8:	4630      	mov	r0, r6
 80167ba:	f3af 8000 	nop.w
 80167be:	4607      	mov	r7, r0
 80167c0:	1c78      	adds	r0, r7, #1
 80167c2:	d1d6      	bne.n	8016772 <_vfiprintf_r+0x19a>
 80167c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80167c6:	07d9      	lsls	r1, r3, #31
 80167c8:	d405      	bmi.n	80167d6 <_vfiprintf_r+0x1fe>
 80167ca:	89ab      	ldrh	r3, [r5, #12]
 80167cc:	059a      	lsls	r2, r3, #22
 80167ce:	d402      	bmi.n	80167d6 <_vfiprintf_r+0x1fe>
 80167d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80167d2:	f7ff fda9 	bl	8016328 <__retarget_lock_release_recursive>
 80167d6:	89ab      	ldrh	r3, [r5, #12]
 80167d8:	065b      	lsls	r3, r3, #25
 80167da:	f53f af1f 	bmi.w	801661c <_vfiprintf_r+0x44>
 80167de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80167e0:	e71e      	b.n	8016620 <_vfiprintf_r+0x48>
 80167e2:	ab03      	add	r3, sp, #12
 80167e4:	9300      	str	r3, [sp, #0]
 80167e6:	462a      	mov	r2, r5
 80167e8:	4b05      	ldr	r3, [pc, #20]	@ (8016800 <_vfiprintf_r+0x228>)
 80167ea:	a904      	add	r1, sp, #16
 80167ec:	4630      	mov	r0, r6
 80167ee:	f000 f879 	bl	80168e4 <_printf_i>
 80167f2:	e7e4      	b.n	80167be <_vfiprintf_r+0x1e6>
 80167f4:	0801a2b1 	.word	0x0801a2b1
 80167f8:	0801a2bb 	.word	0x0801a2bb
 80167fc:	00000000 	.word	0x00000000
 8016800:	080165b3 	.word	0x080165b3
 8016804:	0801a2b7 	.word	0x0801a2b7

08016808 <_printf_common>:
 8016808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801680c:	4616      	mov	r6, r2
 801680e:	4698      	mov	r8, r3
 8016810:	688a      	ldr	r2, [r1, #8]
 8016812:	690b      	ldr	r3, [r1, #16]
 8016814:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016818:	4293      	cmp	r3, r2
 801681a:	bfb8      	it	lt
 801681c:	4613      	movlt	r3, r2
 801681e:	6033      	str	r3, [r6, #0]
 8016820:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016824:	4607      	mov	r7, r0
 8016826:	460c      	mov	r4, r1
 8016828:	b10a      	cbz	r2, 801682e <_printf_common+0x26>
 801682a:	3301      	adds	r3, #1
 801682c:	6033      	str	r3, [r6, #0]
 801682e:	6823      	ldr	r3, [r4, #0]
 8016830:	0699      	lsls	r1, r3, #26
 8016832:	bf42      	ittt	mi
 8016834:	6833      	ldrmi	r3, [r6, #0]
 8016836:	3302      	addmi	r3, #2
 8016838:	6033      	strmi	r3, [r6, #0]
 801683a:	6825      	ldr	r5, [r4, #0]
 801683c:	f015 0506 	ands.w	r5, r5, #6
 8016840:	d106      	bne.n	8016850 <_printf_common+0x48>
 8016842:	f104 0a19 	add.w	sl, r4, #25
 8016846:	68e3      	ldr	r3, [r4, #12]
 8016848:	6832      	ldr	r2, [r6, #0]
 801684a:	1a9b      	subs	r3, r3, r2
 801684c:	42ab      	cmp	r3, r5
 801684e:	dc26      	bgt.n	801689e <_printf_common+0x96>
 8016850:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016854:	6822      	ldr	r2, [r4, #0]
 8016856:	3b00      	subs	r3, #0
 8016858:	bf18      	it	ne
 801685a:	2301      	movne	r3, #1
 801685c:	0692      	lsls	r2, r2, #26
 801685e:	d42b      	bmi.n	80168b8 <_printf_common+0xb0>
 8016860:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016864:	4641      	mov	r1, r8
 8016866:	4638      	mov	r0, r7
 8016868:	47c8      	blx	r9
 801686a:	3001      	adds	r0, #1
 801686c:	d01e      	beq.n	80168ac <_printf_common+0xa4>
 801686e:	6823      	ldr	r3, [r4, #0]
 8016870:	6922      	ldr	r2, [r4, #16]
 8016872:	f003 0306 	and.w	r3, r3, #6
 8016876:	2b04      	cmp	r3, #4
 8016878:	bf02      	ittt	eq
 801687a:	68e5      	ldreq	r5, [r4, #12]
 801687c:	6833      	ldreq	r3, [r6, #0]
 801687e:	1aed      	subeq	r5, r5, r3
 8016880:	68a3      	ldr	r3, [r4, #8]
 8016882:	bf0c      	ite	eq
 8016884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016888:	2500      	movne	r5, #0
 801688a:	4293      	cmp	r3, r2
 801688c:	bfc4      	itt	gt
 801688e:	1a9b      	subgt	r3, r3, r2
 8016890:	18ed      	addgt	r5, r5, r3
 8016892:	2600      	movs	r6, #0
 8016894:	341a      	adds	r4, #26
 8016896:	42b5      	cmp	r5, r6
 8016898:	d11a      	bne.n	80168d0 <_printf_common+0xc8>
 801689a:	2000      	movs	r0, #0
 801689c:	e008      	b.n	80168b0 <_printf_common+0xa8>
 801689e:	2301      	movs	r3, #1
 80168a0:	4652      	mov	r2, sl
 80168a2:	4641      	mov	r1, r8
 80168a4:	4638      	mov	r0, r7
 80168a6:	47c8      	blx	r9
 80168a8:	3001      	adds	r0, #1
 80168aa:	d103      	bne.n	80168b4 <_printf_common+0xac>
 80168ac:	f04f 30ff 	mov.w	r0, #4294967295
 80168b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168b4:	3501      	adds	r5, #1
 80168b6:	e7c6      	b.n	8016846 <_printf_common+0x3e>
 80168b8:	18e1      	adds	r1, r4, r3
 80168ba:	1c5a      	adds	r2, r3, #1
 80168bc:	2030      	movs	r0, #48	@ 0x30
 80168be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80168c2:	4422      	add	r2, r4
 80168c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80168c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80168cc:	3302      	adds	r3, #2
 80168ce:	e7c7      	b.n	8016860 <_printf_common+0x58>
 80168d0:	2301      	movs	r3, #1
 80168d2:	4622      	mov	r2, r4
 80168d4:	4641      	mov	r1, r8
 80168d6:	4638      	mov	r0, r7
 80168d8:	47c8      	blx	r9
 80168da:	3001      	adds	r0, #1
 80168dc:	d0e6      	beq.n	80168ac <_printf_common+0xa4>
 80168de:	3601      	adds	r6, #1
 80168e0:	e7d9      	b.n	8016896 <_printf_common+0x8e>
	...

080168e4 <_printf_i>:
 80168e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80168e8:	7e0f      	ldrb	r7, [r1, #24]
 80168ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80168ec:	2f78      	cmp	r7, #120	@ 0x78
 80168ee:	4691      	mov	r9, r2
 80168f0:	4680      	mov	r8, r0
 80168f2:	460c      	mov	r4, r1
 80168f4:	469a      	mov	sl, r3
 80168f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80168fa:	d807      	bhi.n	801690c <_printf_i+0x28>
 80168fc:	2f62      	cmp	r7, #98	@ 0x62
 80168fe:	d80a      	bhi.n	8016916 <_printf_i+0x32>
 8016900:	2f00      	cmp	r7, #0
 8016902:	f000 80d2 	beq.w	8016aaa <_printf_i+0x1c6>
 8016906:	2f58      	cmp	r7, #88	@ 0x58
 8016908:	f000 80b9 	beq.w	8016a7e <_printf_i+0x19a>
 801690c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016910:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016914:	e03a      	b.n	801698c <_printf_i+0xa8>
 8016916:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801691a:	2b15      	cmp	r3, #21
 801691c:	d8f6      	bhi.n	801690c <_printf_i+0x28>
 801691e:	a101      	add	r1, pc, #4	@ (adr r1, 8016924 <_printf_i+0x40>)
 8016920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016924:	0801697d 	.word	0x0801697d
 8016928:	08016991 	.word	0x08016991
 801692c:	0801690d 	.word	0x0801690d
 8016930:	0801690d 	.word	0x0801690d
 8016934:	0801690d 	.word	0x0801690d
 8016938:	0801690d 	.word	0x0801690d
 801693c:	08016991 	.word	0x08016991
 8016940:	0801690d 	.word	0x0801690d
 8016944:	0801690d 	.word	0x0801690d
 8016948:	0801690d 	.word	0x0801690d
 801694c:	0801690d 	.word	0x0801690d
 8016950:	08016a91 	.word	0x08016a91
 8016954:	080169bb 	.word	0x080169bb
 8016958:	08016a4b 	.word	0x08016a4b
 801695c:	0801690d 	.word	0x0801690d
 8016960:	0801690d 	.word	0x0801690d
 8016964:	08016ab3 	.word	0x08016ab3
 8016968:	0801690d 	.word	0x0801690d
 801696c:	080169bb 	.word	0x080169bb
 8016970:	0801690d 	.word	0x0801690d
 8016974:	0801690d 	.word	0x0801690d
 8016978:	08016a53 	.word	0x08016a53
 801697c:	6833      	ldr	r3, [r6, #0]
 801697e:	1d1a      	adds	r2, r3, #4
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	6032      	str	r2, [r6, #0]
 8016984:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016988:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801698c:	2301      	movs	r3, #1
 801698e:	e09d      	b.n	8016acc <_printf_i+0x1e8>
 8016990:	6833      	ldr	r3, [r6, #0]
 8016992:	6820      	ldr	r0, [r4, #0]
 8016994:	1d19      	adds	r1, r3, #4
 8016996:	6031      	str	r1, [r6, #0]
 8016998:	0606      	lsls	r6, r0, #24
 801699a:	d501      	bpl.n	80169a0 <_printf_i+0xbc>
 801699c:	681d      	ldr	r5, [r3, #0]
 801699e:	e003      	b.n	80169a8 <_printf_i+0xc4>
 80169a0:	0645      	lsls	r5, r0, #25
 80169a2:	d5fb      	bpl.n	801699c <_printf_i+0xb8>
 80169a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80169a8:	2d00      	cmp	r5, #0
 80169aa:	da03      	bge.n	80169b4 <_printf_i+0xd0>
 80169ac:	232d      	movs	r3, #45	@ 0x2d
 80169ae:	426d      	negs	r5, r5
 80169b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80169b4:	4859      	ldr	r0, [pc, #356]	@ (8016b1c <_printf_i+0x238>)
 80169b6:	230a      	movs	r3, #10
 80169b8:	e011      	b.n	80169de <_printf_i+0xfa>
 80169ba:	6821      	ldr	r1, [r4, #0]
 80169bc:	6833      	ldr	r3, [r6, #0]
 80169be:	0608      	lsls	r0, r1, #24
 80169c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80169c4:	d402      	bmi.n	80169cc <_printf_i+0xe8>
 80169c6:	0649      	lsls	r1, r1, #25
 80169c8:	bf48      	it	mi
 80169ca:	b2ad      	uxthmi	r5, r5
 80169cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80169ce:	4853      	ldr	r0, [pc, #332]	@ (8016b1c <_printf_i+0x238>)
 80169d0:	6033      	str	r3, [r6, #0]
 80169d2:	bf14      	ite	ne
 80169d4:	230a      	movne	r3, #10
 80169d6:	2308      	moveq	r3, #8
 80169d8:	2100      	movs	r1, #0
 80169da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80169de:	6866      	ldr	r6, [r4, #4]
 80169e0:	60a6      	str	r6, [r4, #8]
 80169e2:	2e00      	cmp	r6, #0
 80169e4:	bfa2      	ittt	ge
 80169e6:	6821      	ldrge	r1, [r4, #0]
 80169e8:	f021 0104 	bicge.w	r1, r1, #4
 80169ec:	6021      	strge	r1, [r4, #0]
 80169ee:	b90d      	cbnz	r5, 80169f4 <_printf_i+0x110>
 80169f0:	2e00      	cmp	r6, #0
 80169f2:	d04b      	beq.n	8016a8c <_printf_i+0x1a8>
 80169f4:	4616      	mov	r6, r2
 80169f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80169fa:	fb03 5711 	mls	r7, r3, r1, r5
 80169fe:	5dc7      	ldrb	r7, [r0, r7]
 8016a00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016a04:	462f      	mov	r7, r5
 8016a06:	42bb      	cmp	r3, r7
 8016a08:	460d      	mov	r5, r1
 8016a0a:	d9f4      	bls.n	80169f6 <_printf_i+0x112>
 8016a0c:	2b08      	cmp	r3, #8
 8016a0e:	d10b      	bne.n	8016a28 <_printf_i+0x144>
 8016a10:	6823      	ldr	r3, [r4, #0]
 8016a12:	07df      	lsls	r7, r3, #31
 8016a14:	d508      	bpl.n	8016a28 <_printf_i+0x144>
 8016a16:	6923      	ldr	r3, [r4, #16]
 8016a18:	6861      	ldr	r1, [r4, #4]
 8016a1a:	4299      	cmp	r1, r3
 8016a1c:	bfde      	ittt	le
 8016a1e:	2330      	movle	r3, #48	@ 0x30
 8016a20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016a24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016a28:	1b92      	subs	r2, r2, r6
 8016a2a:	6122      	str	r2, [r4, #16]
 8016a2c:	f8cd a000 	str.w	sl, [sp]
 8016a30:	464b      	mov	r3, r9
 8016a32:	aa03      	add	r2, sp, #12
 8016a34:	4621      	mov	r1, r4
 8016a36:	4640      	mov	r0, r8
 8016a38:	f7ff fee6 	bl	8016808 <_printf_common>
 8016a3c:	3001      	adds	r0, #1
 8016a3e:	d14a      	bne.n	8016ad6 <_printf_i+0x1f2>
 8016a40:	f04f 30ff 	mov.w	r0, #4294967295
 8016a44:	b004      	add	sp, #16
 8016a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a4a:	6823      	ldr	r3, [r4, #0]
 8016a4c:	f043 0320 	orr.w	r3, r3, #32
 8016a50:	6023      	str	r3, [r4, #0]
 8016a52:	4833      	ldr	r0, [pc, #204]	@ (8016b20 <_printf_i+0x23c>)
 8016a54:	2778      	movs	r7, #120	@ 0x78
 8016a56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016a5a:	6823      	ldr	r3, [r4, #0]
 8016a5c:	6831      	ldr	r1, [r6, #0]
 8016a5e:	061f      	lsls	r7, r3, #24
 8016a60:	f851 5b04 	ldr.w	r5, [r1], #4
 8016a64:	d402      	bmi.n	8016a6c <_printf_i+0x188>
 8016a66:	065f      	lsls	r7, r3, #25
 8016a68:	bf48      	it	mi
 8016a6a:	b2ad      	uxthmi	r5, r5
 8016a6c:	6031      	str	r1, [r6, #0]
 8016a6e:	07d9      	lsls	r1, r3, #31
 8016a70:	bf44      	itt	mi
 8016a72:	f043 0320 	orrmi.w	r3, r3, #32
 8016a76:	6023      	strmi	r3, [r4, #0]
 8016a78:	b11d      	cbz	r5, 8016a82 <_printf_i+0x19e>
 8016a7a:	2310      	movs	r3, #16
 8016a7c:	e7ac      	b.n	80169d8 <_printf_i+0xf4>
 8016a7e:	4827      	ldr	r0, [pc, #156]	@ (8016b1c <_printf_i+0x238>)
 8016a80:	e7e9      	b.n	8016a56 <_printf_i+0x172>
 8016a82:	6823      	ldr	r3, [r4, #0]
 8016a84:	f023 0320 	bic.w	r3, r3, #32
 8016a88:	6023      	str	r3, [r4, #0]
 8016a8a:	e7f6      	b.n	8016a7a <_printf_i+0x196>
 8016a8c:	4616      	mov	r6, r2
 8016a8e:	e7bd      	b.n	8016a0c <_printf_i+0x128>
 8016a90:	6833      	ldr	r3, [r6, #0]
 8016a92:	6825      	ldr	r5, [r4, #0]
 8016a94:	6961      	ldr	r1, [r4, #20]
 8016a96:	1d18      	adds	r0, r3, #4
 8016a98:	6030      	str	r0, [r6, #0]
 8016a9a:	062e      	lsls	r6, r5, #24
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	d501      	bpl.n	8016aa4 <_printf_i+0x1c0>
 8016aa0:	6019      	str	r1, [r3, #0]
 8016aa2:	e002      	b.n	8016aaa <_printf_i+0x1c6>
 8016aa4:	0668      	lsls	r0, r5, #25
 8016aa6:	d5fb      	bpl.n	8016aa0 <_printf_i+0x1bc>
 8016aa8:	8019      	strh	r1, [r3, #0]
 8016aaa:	2300      	movs	r3, #0
 8016aac:	6123      	str	r3, [r4, #16]
 8016aae:	4616      	mov	r6, r2
 8016ab0:	e7bc      	b.n	8016a2c <_printf_i+0x148>
 8016ab2:	6833      	ldr	r3, [r6, #0]
 8016ab4:	1d1a      	adds	r2, r3, #4
 8016ab6:	6032      	str	r2, [r6, #0]
 8016ab8:	681e      	ldr	r6, [r3, #0]
 8016aba:	6862      	ldr	r2, [r4, #4]
 8016abc:	2100      	movs	r1, #0
 8016abe:	4630      	mov	r0, r6
 8016ac0:	f7e9 fc26 	bl	8000310 <memchr>
 8016ac4:	b108      	cbz	r0, 8016aca <_printf_i+0x1e6>
 8016ac6:	1b80      	subs	r0, r0, r6
 8016ac8:	6060      	str	r0, [r4, #4]
 8016aca:	6863      	ldr	r3, [r4, #4]
 8016acc:	6123      	str	r3, [r4, #16]
 8016ace:	2300      	movs	r3, #0
 8016ad0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016ad4:	e7aa      	b.n	8016a2c <_printf_i+0x148>
 8016ad6:	6923      	ldr	r3, [r4, #16]
 8016ad8:	4632      	mov	r2, r6
 8016ada:	4649      	mov	r1, r9
 8016adc:	4640      	mov	r0, r8
 8016ade:	47d0      	blx	sl
 8016ae0:	3001      	adds	r0, #1
 8016ae2:	d0ad      	beq.n	8016a40 <_printf_i+0x15c>
 8016ae4:	6823      	ldr	r3, [r4, #0]
 8016ae6:	079b      	lsls	r3, r3, #30
 8016ae8:	d413      	bmi.n	8016b12 <_printf_i+0x22e>
 8016aea:	68e0      	ldr	r0, [r4, #12]
 8016aec:	9b03      	ldr	r3, [sp, #12]
 8016aee:	4298      	cmp	r0, r3
 8016af0:	bfb8      	it	lt
 8016af2:	4618      	movlt	r0, r3
 8016af4:	e7a6      	b.n	8016a44 <_printf_i+0x160>
 8016af6:	2301      	movs	r3, #1
 8016af8:	4632      	mov	r2, r6
 8016afa:	4649      	mov	r1, r9
 8016afc:	4640      	mov	r0, r8
 8016afe:	47d0      	blx	sl
 8016b00:	3001      	adds	r0, #1
 8016b02:	d09d      	beq.n	8016a40 <_printf_i+0x15c>
 8016b04:	3501      	adds	r5, #1
 8016b06:	68e3      	ldr	r3, [r4, #12]
 8016b08:	9903      	ldr	r1, [sp, #12]
 8016b0a:	1a5b      	subs	r3, r3, r1
 8016b0c:	42ab      	cmp	r3, r5
 8016b0e:	dcf2      	bgt.n	8016af6 <_printf_i+0x212>
 8016b10:	e7eb      	b.n	8016aea <_printf_i+0x206>
 8016b12:	2500      	movs	r5, #0
 8016b14:	f104 0619 	add.w	r6, r4, #25
 8016b18:	e7f5      	b.n	8016b06 <_printf_i+0x222>
 8016b1a:	bf00      	nop
 8016b1c:	0801a2c2 	.word	0x0801a2c2
 8016b20:	0801a2d3 	.word	0x0801a2d3

08016b24 <__sflush_r>:
 8016b24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b2c:	0716      	lsls	r6, r2, #28
 8016b2e:	4605      	mov	r5, r0
 8016b30:	460c      	mov	r4, r1
 8016b32:	d454      	bmi.n	8016bde <__sflush_r+0xba>
 8016b34:	684b      	ldr	r3, [r1, #4]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	dc02      	bgt.n	8016b40 <__sflush_r+0x1c>
 8016b3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	dd48      	ble.n	8016bd2 <__sflush_r+0xae>
 8016b40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016b42:	2e00      	cmp	r6, #0
 8016b44:	d045      	beq.n	8016bd2 <__sflush_r+0xae>
 8016b46:	2300      	movs	r3, #0
 8016b48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016b4c:	682f      	ldr	r7, [r5, #0]
 8016b4e:	6a21      	ldr	r1, [r4, #32]
 8016b50:	602b      	str	r3, [r5, #0]
 8016b52:	d030      	beq.n	8016bb6 <__sflush_r+0x92>
 8016b54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016b56:	89a3      	ldrh	r3, [r4, #12]
 8016b58:	0759      	lsls	r1, r3, #29
 8016b5a:	d505      	bpl.n	8016b68 <__sflush_r+0x44>
 8016b5c:	6863      	ldr	r3, [r4, #4]
 8016b5e:	1ad2      	subs	r2, r2, r3
 8016b60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016b62:	b10b      	cbz	r3, 8016b68 <__sflush_r+0x44>
 8016b64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016b66:	1ad2      	subs	r2, r2, r3
 8016b68:	2300      	movs	r3, #0
 8016b6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016b6c:	6a21      	ldr	r1, [r4, #32]
 8016b6e:	4628      	mov	r0, r5
 8016b70:	47b0      	blx	r6
 8016b72:	1c43      	adds	r3, r0, #1
 8016b74:	89a3      	ldrh	r3, [r4, #12]
 8016b76:	d106      	bne.n	8016b86 <__sflush_r+0x62>
 8016b78:	6829      	ldr	r1, [r5, #0]
 8016b7a:	291d      	cmp	r1, #29
 8016b7c:	d82b      	bhi.n	8016bd6 <__sflush_r+0xb2>
 8016b7e:	4a2a      	ldr	r2, [pc, #168]	@ (8016c28 <__sflush_r+0x104>)
 8016b80:	410a      	asrs	r2, r1
 8016b82:	07d6      	lsls	r6, r2, #31
 8016b84:	d427      	bmi.n	8016bd6 <__sflush_r+0xb2>
 8016b86:	2200      	movs	r2, #0
 8016b88:	6062      	str	r2, [r4, #4]
 8016b8a:	04d9      	lsls	r1, r3, #19
 8016b8c:	6922      	ldr	r2, [r4, #16]
 8016b8e:	6022      	str	r2, [r4, #0]
 8016b90:	d504      	bpl.n	8016b9c <__sflush_r+0x78>
 8016b92:	1c42      	adds	r2, r0, #1
 8016b94:	d101      	bne.n	8016b9a <__sflush_r+0x76>
 8016b96:	682b      	ldr	r3, [r5, #0]
 8016b98:	b903      	cbnz	r3, 8016b9c <__sflush_r+0x78>
 8016b9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8016b9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016b9e:	602f      	str	r7, [r5, #0]
 8016ba0:	b1b9      	cbz	r1, 8016bd2 <__sflush_r+0xae>
 8016ba2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016ba6:	4299      	cmp	r1, r3
 8016ba8:	d002      	beq.n	8016bb0 <__sflush_r+0x8c>
 8016baa:	4628      	mov	r0, r5
 8016bac:	f7ff fbea 	bl	8016384 <_free_r>
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8016bb4:	e00d      	b.n	8016bd2 <__sflush_r+0xae>
 8016bb6:	2301      	movs	r3, #1
 8016bb8:	4628      	mov	r0, r5
 8016bba:	47b0      	blx	r6
 8016bbc:	4602      	mov	r2, r0
 8016bbe:	1c50      	adds	r0, r2, #1
 8016bc0:	d1c9      	bne.n	8016b56 <__sflush_r+0x32>
 8016bc2:	682b      	ldr	r3, [r5, #0]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d0c6      	beq.n	8016b56 <__sflush_r+0x32>
 8016bc8:	2b1d      	cmp	r3, #29
 8016bca:	d001      	beq.n	8016bd0 <__sflush_r+0xac>
 8016bcc:	2b16      	cmp	r3, #22
 8016bce:	d11e      	bne.n	8016c0e <__sflush_r+0xea>
 8016bd0:	602f      	str	r7, [r5, #0]
 8016bd2:	2000      	movs	r0, #0
 8016bd4:	e022      	b.n	8016c1c <__sflush_r+0xf8>
 8016bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016bda:	b21b      	sxth	r3, r3
 8016bdc:	e01b      	b.n	8016c16 <__sflush_r+0xf2>
 8016bde:	690f      	ldr	r7, [r1, #16]
 8016be0:	2f00      	cmp	r7, #0
 8016be2:	d0f6      	beq.n	8016bd2 <__sflush_r+0xae>
 8016be4:	0793      	lsls	r3, r2, #30
 8016be6:	680e      	ldr	r6, [r1, #0]
 8016be8:	bf08      	it	eq
 8016bea:	694b      	ldreq	r3, [r1, #20]
 8016bec:	600f      	str	r7, [r1, #0]
 8016bee:	bf18      	it	ne
 8016bf0:	2300      	movne	r3, #0
 8016bf2:	eba6 0807 	sub.w	r8, r6, r7
 8016bf6:	608b      	str	r3, [r1, #8]
 8016bf8:	f1b8 0f00 	cmp.w	r8, #0
 8016bfc:	dde9      	ble.n	8016bd2 <__sflush_r+0xae>
 8016bfe:	6a21      	ldr	r1, [r4, #32]
 8016c00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016c02:	4643      	mov	r3, r8
 8016c04:	463a      	mov	r2, r7
 8016c06:	4628      	mov	r0, r5
 8016c08:	47b0      	blx	r6
 8016c0a:	2800      	cmp	r0, #0
 8016c0c:	dc08      	bgt.n	8016c20 <__sflush_r+0xfc>
 8016c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016c16:	81a3      	strh	r3, [r4, #12]
 8016c18:	f04f 30ff 	mov.w	r0, #4294967295
 8016c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c20:	4407      	add	r7, r0
 8016c22:	eba8 0800 	sub.w	r8, r8, r0
 8016c26:	e7e7      	b.n	8016bf8 <__sflush_r+0xd4>
 8016c28:	dfbffffe 	.word	0xdfbffffe

08016c2c <_fflush_r>:
 8016c2c:	b538      	push	{r3, r4, r5, lr}
 8016c2e:	690b      	ldr	r3, [r1, #16]
 8016c30:	4605      	mov	r5, r0
 8016c32:	460c      	mov	r4, r1
 8016c34:	b913      	cbnz	r3, 8016c3c <_fflush_r+0x10>
 8016c36:	2500      	movs	r5, #0
 8016c38:	4628      	mov	r0, r5
 8016c3a:	bd38      	pop	{r3, r4, r5, pc}
 8016c3c:	b118      	cbz	r0, 8016c46 <_fflush_r+0x1a>
 8016c3e:	6a03      	ldr	r3, [r0, #32]
 8016c40:	b90b      	cbnz	r3, 8016c46 <_fflush_r+0x1a>
 8016c42:	f7ff fa05 	bl	8016050 <__sinit>
 8016c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d0f3      	beq.n	8016c36 <_fflush_r+0xa>
 8016c4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016c50:	07d0      	lsls	r0, r2, #31
 8016c52:	d404      	bmi.n	8016c5e <_fflush_r+0x32>
 8016c54:	0599      	lsls	r1, r3, #22
 8016c56:	d402      	bmi.n	8016c5e <_fflush_r+0x32>
 8016c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016c5a:	f7ff fb64 	bl	8016326 <__retarget_lock_acquire_recursive>
 8016c5e:	4628      	mov	r0, r5
 8016c60:	4621      	mov	r1, r4
 8016c62:	f7ff ff5f 	bl	8016b24 <__sflush_r>
 8016c66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016c68:	07da      	lsls	r2, r3, #31
 8016c6a:	4605      	mov	r5, r0
 8016c6c:	d4e4      	bmi.n	8016c38 <_fflush_r+0xc>
 8016c6e:	89a3      	ldrh	r3, [r4, #12]
 8016c70:	059b      	lsls	r3, r3, #22
 8016c72:	d4e1      	bmi.n	8016c38 <_fflush_r+0xc>
 8016c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016c76:	f7ff fb57 	bl	8016328 <__retarget_lock_release_recursive>
 8016c7a:	e7dd      	b.n	8016c38 <_fflush_r+0xc>

08016c7c <fiprintf>:
 8016c7c:	b40e      	push	{r1, r2, r3}
 8016c7e:	b503      	push	{r0, r1, lr}
 8016c80:	4601      	mov	r1, r0
 8016c82:	ab03      	add	r3, sp, #12
 8016c84:	4805      	ldr	r0, [pc, #20]	@ (8016c9c <fiprintf+0x20>)
 8016c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c8a:	6800      	ldr	r0, [r0, #0]
 8016c8c:	9301      	str	r3, [sp, #4]
 8016c8e:	f7ff fca3 	bl	80165d8 <_vfiprintf_r>
 8016c92:	b002      	add	sp, #8
 8016c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c98:	b003      	add	sp, #12
 8016c9a:	4770      	bx	lr
 8016c9c:	24000040 	.word	0x24000040

08016ca0 <__swbuf_r>:
 8016ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ca2:	460e      	mov	r6, r1
 8016ca4:	4614      	mov	r4, r2
 8016ca6:	4605      	mov	r5, r0
 8016ca8:	b118      	cbz	r0, 8016cb2 <__swbuf_r+0x12>
 8016caa:	6a03      	ldr	r3, [r0, #32]
 8016cac:	b90b      	cbnz	r3, 8016cb2 <__swbuf_r+0x12>
 8016cae:	f7ff f9cf 	bl	8016050 <__sinit>
 8016cb2:	69a3      	ldr	r3, [r4, #24]
 8016cb4:	60a3      	str	r3, [r4, #8]
 8016cb6:	89a3      	ldrh	r3, [r4, #12]
 8016cb8:	071a      	lsls	r2, r3, #28
 8016cba:	d501      	bpl.n	8016cc0 <__swbuf_r+0x20>
 8016cbc:	6923      	ldr	r3, [r4, #16]
 8016cbe:	b943      	cbnz	r3, 8016cd2 <__swbuf_r+0x32>
 8016cc0:	4621      	mov	r1, r4
 8016cc2:	4628      	mov	r0, r5
 8016cc4:	f000 f82a 	bl	8016d1c <__swsetup_r>
 8016cc8:	b118      	cbz	r0, 8016cd2 <__swbuf_r+0x32>
 8016cca:	f04f 37ff 	mov.w	r7, #4294967295
 8016cce:	4638      	mov	r0, r7
 8016cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cd2:	6823      	ldr	r3, [r4, #0]
 8016cd4:	6922      	ldr	r2, [r4, #16]
 8016cd6:	1a98      	subs	r0, r3, r2
 8016cd8:	6963      	ldr	r3, [r4, #20]
 8016cda:	b2f6      	uxtb	r6, r6
 8016cdc:	4283      	cmp	r3, r0
 8016cde:	4637      	mov	r7, r6
 8016ce0:	dc05      	bgt.n	8016cee <__swbuf_r+0x4e>
 8016ce2:	4621      	mov	r1, r4
 8016ce4:	4628      	mov	r0, r5
 8016ce6:	f7ff ffa1 	bl	8016c2c <_fflush_r>
 8016cea:	2800      	cmp	r0, #0
 8016cec:	d1ed      	bne.n	8016cca <__swbuf_r+0x2a>
 8016cee:	68a3      	ldr	r3, [r4, #8]
 8016cf0:	3b01      	subs	r3, #1
 8016cf2:	60a3      	str	r3, [r4, #8]
 8016cf4:	6823      	ldr	r3, [r4, #0]
 8016cf6:	1c5a      	adds	r2, r3, #1
 8016cf8:	6022      	str	r2, [r4, #0]
 8016cfa:	701e      	strb	r6, [r3, #0]
 8016cfc:	6962      	ldr	r2, [r4, #20]
 8016cfe:	1c43      	adds	r3, r0, #1
 8016d00:	429a      	cmp	r2, r3
 8016d02:	d004      	beq.n	8016d0e <__swbuf_r+0x6e>
 8016d04:	89a3      	ldrh	r3, [r4, #12]
 8016d06:	07db      	lsls	r3, r3, #31
 8016d08:	d5e1      	bpl.n	8016cce <__swbuf_r+0x2e>
 8016d0a:	2e0a      	cmp	r6, #10
 8016d0c:	d1df      	bne.n	8016cce <__swbuf_r+0x2e>
 8016d0e:	4621      	mov	r1, r4
 8016d10:	4628      	mov	r0, r5
 8016d12:	f7ff ff8b 	bl	8016c2c <_fflush_r>
 8016d16:	2800      	cmp	r0, #0
 8016d18:	d0d9      	beq.n	8016cce <__swbuf_r+0x2e>
 8016d1a:	e7d6      	b.n	8016cca <__swbuf_r+0x2a>

08016d1c <__swsetup_r>:
 8016d1c:	b538      	push	{r3, r4, r5, lr}
 8016d1e:	4b29      	ldr	r3, [pc, #164]	@ (8016dc4 <__swsetup_r+0xa8>)
 8016d20:	4605      	mov	r5, r0
 8016d22:	6818      	ldr	r0, [r3, #0]
 8016d24:	460c      	mov	r4, r1
 8016d26:	b118      	cbz	r0, 8016d30 <__swsetup_r+0x14>
 8016d28:	6a03      	ldr	r3, [r0, #32]
 8016d2a:	b90b      	cbnz	r3, 8016d30 <__swsetup_r+0x14>
 8016d2c:	f7ff f990 	bl	8016050 <__sinit>
 8016d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d34:	0719      	lsls	r1, r3, #28
 8016d36:	d422      	bmi.n	8016d7e <__swsetup_r+0x62>
 8016d38:	06da      	lsls	r2, r3, #27
 8016d3a:	d407      	bmi.n	8016d4c <__swsetup_r+0x30>
 8016d3c:	2209      	movs	r2, #9
 8016d3e:	602a      	str	r2, [r5, #0]
 8016d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016d44:	81a3      	strh	r3, [r4, #12]
 8016d46:	f04f 30ff 	mov.w	r0, #4294967295
 8016d4a:	e033      	b.n	8016db4 <__swsetup_r+0x98>
 8016d4c:	0758      	lsls	r0, r3, #29
 8016d4e:	d512      	bpl.n	8016d76 <__swsetup_r+0x5a>
 8016d50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016d52:	b141      	cbz	r1, 8016d66 <__swsetup_r+0x4a>
 8016d54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016d58:	4299      	cmp	r1, r3
 8016d5a:	d002      	beq.n	8016d62 <__swsetup_r+0x46>
 8016d5c:	4628      	mov	r0, r5
 8016d5e:	f7ff fb11 	bl	8016384 <_free_r>
 8016d62:	2300      	movs	r3, #0
 8016d64:	6363      	str	r3, [r4, #52]	@ 0x34
 8016d66:	89a3      	ldrh	r3, [r4, #12]
 8016d68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016d6c:	81a3      	strh	r3, [r4, #12]
 8016d6e:	2300      	movs	r3, #0
 8016d70:	6063      	str	r3, [r4, #4]
 8016d72:	6923      	ldr	r3, [r4, #16]
 8016d74:	6023      	str	r3, [r4, #0]
 8016d76:	89a3      	ldrh	r3, [r4, #12]
 8016d78:	f043 0308 	orr.w	r3, r3, #8
 8016d7c:	81a3      	strh	r3, [r4, #12]
 8016d7e:	6923      	ldr	r3, [r4, #16]
 8016d80:	b94b      	cbnz	r3, 8016d96 <__swsetup_r+0x7a>
 8016d82:	89a3      	ldrh	r3, [r4, #12]
 8016d84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016d8c:	d003      	beq.n	8016d96 <__swsetup_r+0x7a>
 8016d8e:	4621      	mov	r1, r4
 8016d90:	4628      	mov	r0, r5
 8016d92:	f000 f856 	bl	8016e42 <__smakebuf_r>
 8016d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d9a:	f013 0201 	ands.w	r2, r3, #1
 8016d9e:	d00a      	beq.n	8016db6 <__swsetup_r+0x9a>
 8016da0:	2200      	movs	r2, #0
 8016da2:	60a2      	str	r2, [r4, #8]
 8016da4:	6962      	ldr	r2, [r4, #20]
 8016da6:	4252      	negs	r2, r2
 8016da8:	61a2      	str	r2, [r4, #24]
 8016daa:	6922      	ldr	r2, [r4, #16]
 8016dac:	b942      	cbnz	r2, 8016dc0 <__swsetup_r+0xa4>
 8016dae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016db2:	d1c5      	bne.n	8016d40 <__swsetup_r+0x24>
 8016db4:	bd38      	pop	{r3, r4, r5, pc}
 8016db6:	0799      	lsls	r1, r3, #30
 8016db8:	bf58      	it	pl
 8016dba:	6962      	ldrpl	r2, [r4, #20]
 8016dbc:	60a2      	str	r2, [r4, #8]
 8016dbe:	e7f4      	b.n	8016daa <__swsetup_r+0x8e>
 8016dc0:	2000      	movs	r0, #0
 8016dc2:	e7f7      	b.n	8016db4 <__swsetup_r+0x98>
 8016dc4:	24000040 	.word	0x24000040

08016dc8 <_sbrk_r>:
 8016dc8:	b538      	push	{r3, r4, r5, lr}
 8016dca:	4d06      	ldr	r5, [pc, #24]	@ (8016de4 <_sbrk_r+0x1c>)
 8016dcc:	2300      	movs	r3, #0
 8016dce:	4604      	mov	r4, r0
 8016dd0:	4608      	mov	r0, r1
 8016dd2:	602b      	str	r3, [r5, #0]
 8016dd4:	f7ea fa84 	bl	80012e0 <_sbrk>
 8016dd8:	1c43      	adds	r3, r0, #1
 8016dda:	d102      	bne.n	8016de2 <_sbrk_r+0x1a>
 8016ddc:	682b      	ldr	r3, [r5, #0]
 8016dde:	b103      	cbz	r3, 8016de2 <_sbrk_r+0x1a>
 8016de0:	6023      	str	r3, [r4, #0]
 8016de2:	bd38      	pop	{r3, r4, r5, pc}
 8016de4:	2400cc68 	.word	0x2400cc68

08016de8 <abort>:
 8016de8:	b508      	push	{r3, lr}
 8016dea:	2006      	movs	r0, #6
 8016dec:	f000 f88e 	bl	8016f0c <raise>
 8016df0:	2001      	movs	r0, #1
 8016df2:	f7ea f9fd 	bl	80011f0 <_exit>

08016df6 <__swhatbuf_r>:
 8016df6:	b570      	push	{r4, r5, r6, lr}
 8016df8:	460c      	mov	r4, r1
 8016dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016dfe:	2900      	cmp	r1, #0
 8016e00:	b096      	sub	sp, #88	@ 0x58
 8016e02:	4615      	mov	r5, r2
 8016e04:	461e      	mov	r6, r3
 8016e06:	da0d      	bge.n	8016e24 <__swhatbuf_r+0x2e>
 8016e08:	89a3      	ldrh	r3, [r4, #12]
 8016e0a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016e0e:	f04f 0100 	mov.w	r1, #0
 8016e12:	bf14      	ite	ne
 8016e14:	2340      	movne	r3, #64	@ 0x40
 8016e16:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016e1a:	2000      	movs	r0, #0
 8016e1c:	6031      	str	r1, [r6, #0]
 8016e1e:	602b      	str	r3, [r5, #0]
 8016e20:	b016      	add	sp, #88	@ 0x58
 8016e22:	bd70      	pop	{r4, r5, r6, pc}
 8016e24:	466a      	mov	r2, sp
 8016e26:	f000 f879 	bl	8016f1c <_fstat_r>
 8016e2a:	2800      	cmp	r0, #0
 8016e2c:	dbec      	blt.n	8016e08 <__swhatbuf_r+0x12>
 8016e2e:	9901      	ldr	r1, [sp, #4]
 8016e30:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016e34:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016e38:	4259      	negs	r1, r3
 8016e3a:	4159      	adcs	r1, r3
 8016e3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016e40:	e7eb      	b.n	8016e1a <__swhatbuf_r+0x24>

08016e42 <__smakebuf_r>:
 8016e42:	898b      	ldrh	r3, [r1, #12]
 8016e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e46:	079d      	lsls	r5, r3, #30
 8016e48:	4606      	mov	r6, r0
 8016e4a:	460c      	mov	r4, r1
 8016e4c:	d507      	bpl.n	8016e5e <__smakebuf_r+0x1c>
 8016e4e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016e52:	6023      	str	r3, [r4, #0]
 8016e54:	6123      	str	r3, [r4, #16]
 8016e56:	2301      	movs	r3, #1
 8016e58:	6163      	str	r3, [r4, #20]
 8016e5a:	b003      	add	sp, #12
 8016e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e5e:	ab01      	add	r3, sp, #4
 8016e60:	466a      	mov	r2, sp
 8016e62:	f7ff ffc8 	bl	8016df6 <__swhatbuf_r>
 8016e66:	9f00      	ldr	r7, [sp, #0]
 8016e68:	4605      	mov	r5, r0
 8016e6a:	4639      	mov	r1, r7
 8016e6c:	4630      	mov	r0, r6
 8016e6e:	f7ff fafd 	bl	801646c <_malloc_r>
 8016e72:	b948      	cbnz	r0, 8016e88 <__smakebuf_r+0x46>
 8016e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e78:	059a      	lsls	r2, r3, #22
 8016e7a:	d4ee      	bmi.n	8016e5a <__smakebuf_r+0x18>
 8016e7c:	f023 0303 	bic.w	r3, r3, #3
 8016e80:	f043 0302 	orr.w	r3, r3, #2
 8016e84:	81a3      	strh	r3, [r4, #12]
 8016e86:	e7e2      	b.n	8016e4e <__smakebuf_r+0xc>
 8016e88:	89a3      	ldrh	r3, [r4, #12]
 8016e8a:	6020      	str	r0, [r4, #0]
 8016e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016e90:	81a3      	strh	r3, [r4, #12]
 8016e92:	9b01      	ldr	r3, [sp, #4]
 8016e94:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016e98:	b15b      	cbz	r3, 8016eb2 <__smakebuf_r+0x70>
 8016e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e9e:	4630      	mov	r0, r6
 8016ea0:	f000 f84e 	bl	8016f40 <_isatty_r>
 8016ea4:	b128      	cbz	r0, 8016eb2 <__smakebuf_r+0x70>
 8016ea6:	89a3      	ldrh	r3, [r4, #12]
 8016ea8:	f023 0303 	bic.w	r3, r3, #3
 8016eac:	f043 0301 	orr.w	r3, r3, #1
 8016eb0:	81a3      	strh	r3, [r4, #12]
 8016eb2:	89a3      	ldrh	r3, [r4, #12]
 8016eb4:	431d      	orrs	r5, r3
 8016eb6:	81a5      	strh	r5, [r4, #12]
 8016eb8:	e7cf      	b.n	8016e5a <__smakebuf_r+0x18>

08016eba <_raise_r>:
 8016eba:	291f      	cmp	r1, #31
 8016ebc:	b538      	push	{r3, r4, r5, lr}
 8016ebe:	4605      	mov	r5, r0
 8016ec0:	460c      	mov	r4, r1
 8016ec2:	d904      	bls.n	8016ece <_raise_r+0x14>
 8016ec4:	2316      	movs	r3, #22
 8016ec6:	6003      	str	r3, [r0, #0]
 8016ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8016ecc:	bd38      	pop	{r3, r4, r5, pc}
 8016ece:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016ed0:	b112      	cbz	r2, 8016ed8 <_raise_r+0x1e>
 8016ed2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016ed6:	b94b      	cbnz	r3, 8016eec <_raise_r+0x32>
 8016ed8:	4628      	mov	r0, r5
 8016eda:	f000 f853 	bl	8016f84 <_getpid_r>
 8016ede:	4622      	mov	r2, r4
 8016ee0:	4601      	mov	r1, r0
 8016ee2:	4628      	mov	r0, r5
 8016ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ee8:	f000 b83a 	b.w	8016f60 <_kill_r>
 8016eec:	2b01      	cmp	r3, #1
 8016eee:	d00a      	beq.n	8016f06 <_raise_r+0x4c>
 8016ef0:	1c59      	adds	r1, r3, #1
 8016ef2:	d103      	bne.n	8016efc <_raise_r+0x42>
 8016ef4:	2316      	movs	r3, #22
 8016ef6:	6003      	str	r3, [r0, #0]
 8016ef8:	2001      	movs	r0, #1
 8016efa:	e7e7      	b.n	8016ecc <_raise_r+0x12>
 8016efc:	2100      	movs	r1, #0
 8016efe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016f02:	4620      	mov	r0, r4
 8016f04:	4798      	blx	r3
 8016f06:	2000      	movs	r0, #0
 8016f08:	e7e0      	b.n	8016ecc <_raise_r+0x12>
	...

08016f0c <raise>:
 8016f0c:	4b02      	ldr	r3, [pc, #8]	@ (8016f18 <raise+0xc>)
 8016f0e:	4601      	mov	r1, r0
 8016f10:	6818      	ldr	r0, [r3, #0]
 8016f12:	f7ff bfd2 	b.w	8016eba <_raise_r>
 8016f16:	bf00      	nop
 8016f18:	24000040 	.word	0x24000040

08016f1c <_fstat_r>:
 8016f1c:	b538      	push	{r3, r4, r5, lr}
 8016f1e:	4d07      	ldr	r5, [pc, #28]	@ (8016f3c <_fstat_r+0x20>)
 8016f20:	2300      	movs	r3, #0
 8016f22:	4604      	mov	r4, r0
 8016f24:	4608      	mov	r0, r1
 8016f26:	4611      	mov	r1, r2
 8016f28:	602b      	str	r3, [r5, #0]
 8016f2a:	f7ea f9b1 	bl	8001290 <_fstat>
 8016f2e:	1c43      	adds	r3, r0, #1
 8016f30:	d102      	bne.n	8016f38 <_fstat_r+0x1c>
 8016f32:	682b      	ldr	r3, [r5, #0]
 8016f34:	b103      	cbz	r3, 8016f38 <_fstat_r+0x1c>
 8016f36:	6023      	str	r3, [r4, #0]
 8016f38:	bd38      	pop	{r3, r4, r5, pc}
 8016f3a:	bf00      	nop
 8016f3c:	2400cc68 	.word	0x2400cc68

08016f40 <_isatty_r>:
 8016f40:	b538      	push	{r3, r4, r5, lr}
 8016f42:	4d06      	ldr	r5, [pc, #24]	@ (8016f5c <_isatty_r+0x1c>)
 8016f44:	2300      	movs	r3, #0
 8016f46:	4604      	mov	r4, r0
 8016f48:	4608      	mov	r0, r1
 8016f4a:	602b      	str	r3, [r5, #0]
 8016f4c:	f7ea f9b0 	bl	80012b0 <_isatty>
 8016f50:	1c43      	adds	r3, r0, #1
 8016f52:	d102      	bne.n	8016f5a <_isatty_r+0x1a>
 8016f54:	682b      	ldr	r3, [r5, #0]
 8016f56:	b103      	cbz	r3, 8016f5a <_isatty_r+0x1a>
 8016f58:	6023      	str	r3, [r4, #0]
 8016f5a:	bd38      	pop	{r3, r4, r5, pc}
 8016f5c:	2400cc68 	.word	0x2400cc68

08016f60 <_kill_r>:
 8016f60:	b538      	push	{r3, r4, r5, lr}
 8016f62:	4d07      	ldr	r5, [pc, #28]	@ (8016f80 <_kill_r+0x20>)
 8016f64:	2300      	movs	r3, #0
 8016f66:	4604      	mov	r4, r0
 8016f68:	4608      	mov	r0, r1
 8016f6a:	4611      	mov	r1, r2
 8016f6c:	602b      	str	r3, [r5, #0]
 8016f6e:	f7ea f92d 	bl	80011cc <_kill>
 8016f72:	1c43      	adds	r3, r0, #1
 8016f74:	d102      	bne.n	8016f7c <_kill_r+0x1c>
 8016f76:	682b      	ldr	r3, [r5, #0]
 8016f78:	b103      	cbz	r3, 8016f7c <_kill_r+0x1c>
 8016f7a:	6023      	str	r3, [r4, #0]
 8016f7c:	bd38      	pop	{r3, r4, r5, pc}
 8016f7e:	bf00      	nop
 8016f80:	2400cc68 	.word	0x2400cc68

08016f84 <_getpid_r>:
 8016f84:	f7ea b91a 	b.w	80011bc <_getpid>

08016f88 <checkint>:
 8016f88:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016f8c:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8016f90:	429a      	cmp	r2, r3
 8016f92:	b570      	push	{r4, r5, r6, lr}
 8016f94:	dd2a      	ble.n	8016fec <checkint+0x64>
 8016f96:	f240 4333 	movw	r3, #1075	@ 0x433
 8016f9a:	429a      	cmp	r2, r3
 8016f9c:	dc24      	bgt.n	8016fe8 <checkint+0x60>
 8016f9e:	1a9b      	subs	r3, r3, r2
 8016fa0:	f1a3 0620 	sub.w	r6, r3, #32
 8016fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8016fa8:	fa02 f403 	lsl.w	r4, r2, r3
 8016fac:	fa02 f606 	lsl.w	r6, r2, r6
 8016fb0:	f1c3 0520 	rsb	r5, r3, #32
 8016fb4:	fa22 f505 	lsr.w	r5, r2, r5
 8016fb8:	4334      	orrs	r4, r6
 8016fba:	432c      	orrs	r4, r5
 8016fbc:	409a      	lsls	r2, r3
 8016fbe:	ea20 0202 	bic.w	r2, r0, r2
 8016fc2:	ea21 0404 	bic.w	r4, r1, r4
 8016fc6:	4322      	orrs	r2, r4
 8016fc8:	f1a3 0420 	sub.w	r4, r3, #32
 8016fcc:	f1c3 0220 	rsb	r2, r3, #32
 8016fd0:	d10c      	bne.n	8016fec <checkint+0x64>
 8016fd2:	40d8      	lsrs	r0, r3
 8016fd4:	fa01 f302 	lsl.w	r3, r1, r2
 8016fd8:	4318      	orrs	r0, r3
 8016fda:	40e1      	lsrs	r1, r4
 8016fdc:	4308      	orrs	r0, r1
 8016fde:	f000 0001 	and.w	r0, r0, #1
 8016fe2:	f1d0 0002 	rsbs	r0, r0, #2
 8016fe6:	bd70      	pop	{r4, r5, r6, pc}
 8016fe8:	2002      	movs	r0, #2
 8016fea:	e7fc      	b.n	8016fe6 <checkint+0x5e>
 8016fec:	2000      	movs	r0, #0
 8016fee:	e7fa      	b.n	8016fe6 <checkint+0x5e>

08016ff0 <pow>:
 8016ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ff4:	ee10 4a90 	vmov	r4, s1
 8016ff8:	ed2d 8b0a 	vpush	{d8-d12}
 8016ffc:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8017000:	ee11 aa90 	vmov	sl, s3
 8017004:	f108 32ff 	add.w	r2, r8, #4294967295
 8017008:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801700c:	429a      	cmp	r2, r3
 801700e:	ee10 5a10 	vmov	r5, s0
 8017012:	ee11 0a10 	vmov	r0, s2
 8017016:	b087      	sub	sp, #28
 8017018:	46c4      	mov	ip, r8
 801701a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801701e:	d806      	bhi.n	801702e <pow+0x3e>
 8017020:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8017024:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8017028:	2b7f      	cmp	r3, #127	@ 0x7f
 801702a:	f240 8157 	bls.w	80172dc <pow+0x2ec>
 801702e:	1802      	adds	r2, r0, r0
 8017030:	eb4a 010a 	adc.w	r1, sl, sl
 8017034:	f06f 0b01 	mvn.w	fp, #1
 8017038:	1e57      	subs	r7, r2, #1
 801703a:	f141 33ff 	adc.w	r3, r1, #4294967295
 801703e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 8017042:	45bb      	cmp	fp, r7
 8017044:	eb7e 0303 	sbcs.w	r3, lr, r3
 8017048:	d242      	bcs.n	80170d0 <pow+0xe0>
 801704a:	ea52 0301 	orrs.w	r3, r2, r1
 801704e:	f04f 0300 	mov.w	r3, #0
 8017052:	d10c      	bne.n	801706e <pow+0x7e>
 8017054:	196d      	adds	r5, r5, r5
 8017056:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801705a:	4164      	adcs	r4, r4
 801705c:	42ab      	cmp	r3, r5
 801705e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8017062:	41a3      	sbcs	r3, r4
 8017064:	f0c0 808f 	bcc.w	8017186 <pow+0x196>
 8017068:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801706c:	e02b      	b.n	80170c6 <pow+0xd6>
 801706e:	4ed4      	ldr	r6, [pc, #848]	@ (80173c0 <pow+0x3d0>)
 8017070:	42b4      	cmp	r4, r6
 8017072:	bf08      	it	eq
 8017074:	429d      	cmpeq	r5, r3
 8017076:	d109      	bne.n	801708c <pow+0x9c>
 8017078:	1800      	adds	r0, r0, r0
 801707a:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801707e:	eb4a 0a0a 	adc.w	sl, sl, sl
 8017082:	4283      	cmp	r3, r0
 8017084:	4bcf      	ldr	r3, [pc, #828]	@ (80173c4 <pow+0x3d4>)
 8017086:	eb73 030a 	sbcs.w	r3, r3, sl
 801708a:	e7eb      	b.n	8017064 <pow+0x74>
 801708c:	196d      	adds	r5, r5, r5
 801708e:	48ce      	ldr	r0, [pc, #824]	@ (80173c8 <pow+0x3d8>)
 8017090:	4164      	adcs	r4, r4
 8017092:	42ab      	cmp	r3, r5
 8017094:	eb70 0604 	sbcs.w	r6, r0, r4
 8017098:	d375      	bcc.n	8017186 <pow+0x196>
 801709a:	4281      	cmp	r1, r0
 801709c:	bf08      	it	eq
 801709e:	429a      	cmpeq	r2, r3
 80170a0:	d171      	bne.n	8017186 <pow+0x196>
 80170a2:	4aca      	ldr	r2, [pc, #808]	@ (80173cc <pow+0x3dc>)
 80170a4:	4294      	cmp	r4, r2
 80170a6:	bf08      	it	eq
 80170a8:	429d      	cmpeq	r5, r3
 80170aa:	d0dd      	beq.n	8017068 <pow+0x78>
 80170ac:	4294      	cmp	r4, r2
 80170ae:	ea6f 0a0a 	mvn.w	sl, sl
 80170b2:	bf34      	ite	cc
 80170b4:	2400      	movcc	r4, #0
 80170b6:	2401      	movcs	r4, #1
 80170b8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 80170bc:	4554      	cmp	r4, sl
 80170be:	f040 81dc 	bne.w	801747a <pow+0x48a>
 80170c2:	ee21 0b01 	vmul.f64	d0, d1, d1
 80170c6:	b007      	add	sp, #28
 80170c8:	ecbd 8b0a 	vpop	{d8-d12}
 80170cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170d0:	196f      	adds	r7, r5, r5
 80170d2:	eb44 0904 	adc.w	r9, r4, r4
 80170d6:	1e7a      	subs	r2, r7, #1
 80170d8:	f169 0300 	sbc.w	r3, r9, #0
 80170dc:	4593      	cmp	fp, r2
 80170de:	eb7e 0303 	sbcs.w	r3, lr, r3
 80170e2:	d225      	bcs.n	8017130 <pow+0x140>
 80170e4:	ee20 0b00 	vmul.f64	d0, d0, d0
 80170e8:	2c00      	cmp	r4, #0
 80170ea:	da13      	bge.n	8017114 <pow+0x124>
 80170ec:	4651      	mov	r1, sl
 80170ee:	f7ff ff4b 	bl	8016f88 <checkint>
 80170f2:	2801      	cmp	r0, #1
 80170f4:	d10e      	bne.n	8017114 <pow+0x124>
 80170f6:	eeb1 0b40 	vneg.f64	d0, d0
 80170fa:	ea57 0909 	orrs.w	r9, r7, r9
 80170fe:	d10b      	bne.n	8017118 <pow+0x128>
 8017100:	f1ba 0f00 	cmp.w	sl, #0
 8017104:	dadf      	bge.n	80170c6 <pow+0xd6>
 8017106:	b007      	add	sp, #28
 8017108:	ecbd 8b0a 	vpop	{d8-d12}
 801710c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017110:	f000 b9ee 	b.w	80174f0 <__math_divzero>
 8017114:	2000      	movs	r0, #0
 8017116:	e7f0      	b.n	80170fa <pow+0x10a>
 8017118:	f1ba 0f00 	cmp.w	sl, #0
 801711c:	dad3      	bge.n	80170c6 <pow+0xd6>
 801711e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8017122:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8017126:	ed8d 7b00 	vstr	d7, [sp]
 801712a:	ed9d 0b00 	vldr	d0, [sp]
 801712e:	e7ca      	b.n	80170c6 <pow+0xd6>
 8017130:	2c00      	cmp	r4, #0
 8017132:	da2b      	bge.n	801718c <pow+0x19c>
 8017134:	4651      	mov	r1, sl
 8017136:	f7ff ff27 	bl	8016f88 <checkint>
 801713a:	b930      	cbnz	r0, 801714a <pow+0x15a>
 801713c:	b007      	add	sp, #28
 801713e:	ecbd 8b0a 	vpop	{d8-d12}
 8017142:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017146:	f000 b9eb 	b.w	8017520 <__math_invalid>
 801714a:	1e41      	subs	r1, r0, #1
 801714c:	4248      	negs	r0, r1
 801714e:	4148      	adcs	r0, r1
 8017150:	0480      	lsls	r0, r0, #18
 8017152:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8017156:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801715a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801715e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 8017162:	2b7f      	cmp	r3, #127	@ 0x7f
 8017164:	d92d      	bls.n	80171c2 <pow+0x1d2>
 8017166:	4b96      	ldr	r3, [pc, #600]	@ (80173c0 <pow+0x3d0>)
 8017168:	2000      	movs	r0, #0
 801716a:	429c      	cmp	r4, r3
 801716c:	bf08      	it	eq
 801716e:	4285      	cmpeq	r5, r0
 8017170:	f43f af7a 	beq.w	8017068 <pow+0x78>
 8017174:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8017178:	428a      	cmp	r2, r1
 801717a:	d80c      	bhi.n	8017196 <pow+0x1a6>
 801717c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8017180:	42a8      	cmp	r0, r5
 8017182:	41a3      	sbcs	r3, r4
 8017184:	d204      	bcs.n	8017190 <pow+0x1a0>
 8017186:	ee31 0b00 	vadd.f64	d0, d1, d0
 801718a:	e79c      	b.n	80170c6 <pow+0xd6>
 801718c:	2000      	movs	r0, #0
 801718e:	e7e4      	b.n	801715a <pow+0x16a>
 8017190:	ee30 0b41 	vsub.f64	d0, d0, d1
 8017194:	e797      	b.n	80170c6 <pow+0xd6>
 8017196:	2d01      	cmp	r5, #1
 8017198:	eb74 0303 	sbcs.w	r3, r4, r3
 801719c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80171a0:	bf34      	ite	cc
 80171a2:	2301      	movcc	r3, #1
 80171a4:	2300      	movcs	r3, #0
 80171a6:	4296      	cmp	r6, r2
 80171a8:	bf8c      	ite	hi
 80171aa:	2600      	movhi	r6, #0
 80171ac:	2601      	movls	r6, #1
 80171ae:	42b3      	cmp	r3, r6
 80171b0:	f000 809c 	beq.w	80172ec <pow+0x2fc>
 80171b4:	b007      	add	sp, #28
 80171b6:	ecbd 8b0a 	vpop	{d8-d12}
 80171ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171be:	f000 b98f 	b.w	80174e0 <__math_oflow>
 80171c2:	f1bc 0f00 	cmp.w	ip, #0
 80171c6:	d10a      	bne.n	80171de <pow+0x1ee>
 80171c8:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 80173b0 <pow+0x3c0>
 80171cc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80171d0:	ec53 2b17 	vmov	r2, r3, d7
 80171d4:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 80171d8:	4615      	mov	r5, r2
 80171da:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 80171de:	4a7c      	ldr	r2, [pc, #496]	@ (80173d0 <pow+0x3e0>)
 80171e0:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80171e4:	4422      	add	r2, r4
 80171e6:	1513      	asrs	r3, r2, #20
 80171e8:	f3c2 3146 	ubfx	r1, r2, #13, #7
 80171ec:	ee03 3a10 	vmov	s6, r3
 80171f0:	0d12      	lsrs	r2, r2, #20
 80171f2:	4b78      	ldr	r3, [pc, #480]	@ (80173d4 <pow+0x3e4>)
 80171f4:	0512      	lsls	r2, r2, #20
 80171f6:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 80171fa:	1aa7      	subs	r7, r4, r2
 80171fc:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8017200:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 8017204:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8017208:	1e2e      	subs	r6, r5, #0
 801720a:	ec47 6b14 	vmov	d4, r6, r7
 801720e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 8017212:	eea4 6b05 	vfma.f64	d6, d4, d5
 8017216:	ed93 5b00 	vldr	d5, [r3]
 801721a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801721e:	eea3 2b05 	vfma.f64	d2, d3, d5
 8017222:	ed93 5b02 	vldr	d5, [r3, #8]
 8017226:	ee36 4b02 	vadd.f64	d4, d6, d2
 801722a:	ee32 2b44 	vsub.f64	d2, d2, d4
 801722e:	eea3 7b05 	vfma.f64	d7, d3, d5
 8017232:	ed93 5b04 	vldr	d5, [r3, #16]
 8017236:	ee32 2b06 	vadd.f64	d2, d2, d6
 801723a:	ee37 7b02 	vadd.f64	d7, d7, d2
 801723e:	ee26 5b05 	vmul.f64	d5, d6, d5
 8017242:	ee26 0b05 	vmul.f64	d0, d6, d5
 8017246:	ee34 8b00 	vadd.f64	d8, d4, d0
 801724a:	eeb0 9b40 	vmov.f64	d9, d0
 801724e:	ee34 4b48 	vsub.f64	d4, d4, d8
 8017252:	ee96 9b05 	vfnms.f64	d9, d6, d5
 8017256:	ee34 ab00 	vadd.f64	d10, d4, d0
 801725a:	ed93 5b06 	vldr	d5, [r3, #24]
 801725e:	ee26 bb00 	vmul.f64	d11, d6, d0
 8017262:	ee37 7b09 	vadd.f64	d7, d7, d9
 8017266:	ed93 4b08 	vldr	d4, [r3, #32]
 801726a:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801726e:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 8017272:	eea6 5b04 	vfma.f64	d5, d6, d4
 8017276:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801727a:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801727e:	eea6 4b03 	vfma.f64	d4, d6, d3
 8017282:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 8017286:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801728a:	eea0 4b03 	vfma.f64	d4, d0, d3
 801728e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8017292:	eeab 7b05 	vfma.f64	d7, d11, d5
 8017296:	ee38 4b07 	vadd.f64	d4, d8, d7
 801729a:	ee21 6b04 	vmul.f64	d6, d1, d4
 801729e:	ee16 3a90 	vmov	r3, s13
 80172a2:	eeb0 5b46 	vmov.f64	d5, d6
 80172a6:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80172aa:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 80172ae:	18b2      	adds	r2, r6, r2
 80172b0:	2a3e      	cmp	r2, #62	@ 0x3e
 80172b2:	ee91 5b04 	vfnms.f64	d5, d1, d4
 80172b6:	ee38 8b44 	vsub.f64	d8, d8, d4
 80172ba:	ee38 8b07 	vadd.f64	d8, d8, d7
 80172be:	eea1 5b08 	vfma.f64	d5, d1, d8
 80172c2:	d91b      	bls.n	80172fc <pow+0x30c>
 80172c4:	2a00      	cmp	r2, #0
 80172c6:	da0b      	bge.n	80172e0 <pow+0x2f0>
 80172c8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80172cc:	ee36 0b00 	vadd.f64	d0, d6, d0
 80172d0:	2800      	cmp	r0, #0
 80172d2:	f43f aef8 	beq.w	80170c6 <pow+0xd6>
 80172d6:	eeb1 0b40 	vneg.f64	d0, d0
 80172da:	e6f4      	b.n	80170c6 <pow+0xd6>
 80172dc:	2000      	movs	r0, #0
 80172de:	e77e      	b.n	80171de <pow+0x1ee>
 80172e0:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 80172e4:	d909      	bls.n	80172fa <pow+0x30a>
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	f6bf af64 	bge.w	80171b4 <pow+0x1c4>
 80172ec:	b007      	add	sp, #28
 80172ee:	ecbd 8b0a 	vpop	{d8-d12}
 80172f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172f6:	f000 b8eb 	b.w	80174d0 <__math_uflow>
 80172fa:	2600      	movs	r6, #0
 80172fc:	4936      	ldr	r1, [pc, #216]	@ (80173d8 <pow+0x3e8>)
 80172fe:	ed91 4b02 	vldr	d4, [r1, #8]
 8017302:	ed91 3b00 	vldr	d3, [r1]
 8017306:	eeb0 7b44 	vmov.f64	d7, d4
 801730a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801730e:	ee17 5a10 	vmov	r5, s14
 8017312:	ee37 7b44 	vsub.f64	d7, d7, d4
 8017316:	ed91 4b04 	vldr	d4, [r1, #16]
 801731a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801731e:	eea7 6b04 	vfma.f64	d6, d7, d4
 8017322:	ed91 4b06 	vldr	d4, [r1, #24]
 8017326:	18dc      	adds	r4, r3, r3
 8017328:	f104 030f 	add.w	r3, r4, #15
 801732c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8017330:	eea7 6b04 	vfma.f64	d6, d7, d4
 8017334:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8017338:	ee35 5b06 	vadd.f64	d5, d5, d6
 801733c:	ee25 6b05 	vmul.f64	d6, d5, d5
 8017340:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 8017344:	ed91 4b08 	vldr	d4, [r1, #32]
 8017348:	ee35 7b07 	vadd.f64	d7, d5, d7
 801734c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8017350:	eea5 4b03 	vfma.f64	d4, d5, d3
 8017354:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8017358:	eea6 7b04 	vfma.f64	d7, d6, d4
 801735c:	ee26 6b06 	vmul.f64	d6, d6, d6
 8017360:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 8017364:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8017368:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801736c:	eea5 4b03 	vfma.f64	d4, d5, d3
 8017370:	1940      	adds	r0, r0, r5
 8017372:	2700      	movs	r7, #0
 8017374:	eb17 020c 	adds.w	r2, r7, ip
 8017378:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801737c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8017380:	2e00      	cmp	r6, #0
 8017382:	d175      	bne.n	8017470 <pow+0x480>
 8017384:	42bd      	cmp	r5, r7
 8017386:	db29      	blt.n	80173dc <pow+0x3ec>
 8017388:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801738c:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8017390:	4610      	mov	r0, r2
 8017392:	ec41 0b10 	vmov	d0, r0, r1
 8017396:	eea7 0b00 	vfma.f64	d0, d7, d0
 801739a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80173b8 <pow+0x3c8>
 801739e:	ee20 0b07 	vmul.f64	d0, d0, d7
 80173a2:	b007      	add	sp, #28
 80173a4:	ecbd 8b0a 	vpop	{d8-d12}
 80173a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173ac:	f000 b8d0 	b.w	8017550 <__math_check_oflow>
 80173b0:	00000000 	.word	0x00000000
 80173b4:	43300000 	.word	0x43300000
 80173b8:	00000000 	.word	0x00000000
 80173bc:	7f000000 	.word	0x7f000000
 80173c0:	3ff00000 	.word	0x3ff00000
 80173c4:	fff00000 	.word	0xfff00000
 80173c8:	ffe00000 	.word	0xffe00000
 80173cc:	7fe00000 	.word	0x7fe00000
 80173d0:	c0196aab 	.word	0xc0196aab
 80173d4:	0801a2e8 	.word	0x0801a2e8
 80173d8:	0801b330 	.word	0x0801b330
 80173dc:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80173e0:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 80173e4:	4610      	mov	r0, r2
 80173e6:	ec41 0b15 	vmov	d5, r0, r1
 80173ea:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 80173ee:	ee27 6b05 	vmul.f64	d6, d7, d5
 80173f2:	ee35 7b06 	vadd.f64	d7, d5, d6
 80173f6:	eeb0 4bc7 	vabs.f64	d4, d7
 80173fa:	eeb4 4bc3 	vcmpe.f64	d4, d3
 80173fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017402:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8017480 <pow+0x490>
 8017406:	d52a      	bpl.n	801745e <pow+0x46e>
 8017408:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801740c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8017410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017414:	ee35 5b06 	vadd.f64	d5, d5, d6
 8017418:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801741c:	bf58      	it	pl
 801741e:	eeb0 4b43 	vmovpl.f64	d4, d3
 8017422:	ee37 3b04 	vadd.f64	d3, d7, d4
 8017426:	ee34 6b43 	vsub.f64	d6, d4, d3
 801742a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801742e:	ee36 6b05 	vadd.f64	d6, d6, d5
 8017432:	ee36 6b03 	vadd.f64	d6, d6, d3
 8017436:	ee36 7b44 	vsub.f64	d7, d6, d4
 801743a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801743e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017442:	d104      	bne.n	801744e <pow+0x45e>
 8017444:	4632      	mov	r2, r6
 8017446:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801744a:	ec43 2b17 	vmov	d7, r2, r3
 801744e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017452:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017456:	ee26 6b00 	vmul.f64	d6, d6, d0
 801745a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801745e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8017462:	b007      	add	sp, #28
 8017464:	ecbd 8b0a 	vpop	{d8-d12}
 8017468:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801746c:	f000 b867 	b.w	801753e <__math_check_uflow>
 8017470:	ec43 2b10 	vmov	d0, r2, r3
 8017474:	eea7 0b00 	vfma.f64	d0, d7, d0
 8017478:	e625      	b.n	80170c6 <pow+0xd6>
 801747a:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8017488 <pow+0x498>
 801747e:	e622      	b.n	80170c6 <pow+0xd6>
 8017480:	00000000 	.word	0x00000000
 8017484:	00100000 	.word	0x00100000
	...

08017490 <with_errno>:
 8017490:	b510      	push	{r4, lr}
 8017492:	ed2d 8b02 	vpush	{d8}
 8017496:	eeb0 8b40 	vmov.f64	d8, d0
 801749a:	4604      	mov	r4, r0
 801749c:	f7fe ff18 	bl	80162d0 <__errno>
 80174a0:	eeb0 0b48 	vmov.f64	d0, d8
 80174a4:	ecbd 8b02 	vpop	{d8}
 80174a8:	6004      	str	r4, [r0, #0]
 80174aa:	bd10      	pop	{r4, pc}

080174ac <xflow>:
 80174ac:	b082      	sub	sp, #8
 80174ae:	b158      	cbz	r0, 80174c8 <xflow+0x1c>
 80174b0:	eeb1 7b40 	vneg.f64	d7, d0
 80174b4:	ed8d 7b00 	vstr	d7, [sp]
 80174b8:	ed9d 7b00 	vldr	d7, [sp]
 80174bc:	2022      	movs	r0, #34	@ 0x22
 80174be:	ee20 0b07 	vmul.f64	d0, d0, d7
 80174c2:	b002      	add	sp, #8
 80174c4:	f7ff bfe4 	b.w	8017490 <with_errno>
 80174c8:	eeb0 7b40 	vmov.f64	d7, d0
 80174cc:	e7f2      	b.n	80174b4 <xflow+0x8>
	...

080174d0 <__math_uflow>:
 80174d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80174d8 <__math_uflow+0x8>
 80174d4:	f7ff bfea 	b.w	80174ac <xflow>
 80174d8:	00000000 	.word	0x00000000
 80174dc:	10000000 	.word	0x10000000

080174e0 <__math_oflow>:
 80174e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80174e8 <__math_oflow+0x8>
 80174e4:	f7ff bfe2 	b.w	80174ac <xflow>
 80174e8:	00000000 	.word	0x00000000
 80174ec:	70000000 	.word	0x70000000

080174f0 <__math_divzero>:
 80174f0:	b082      	sub	sp, #8
 80174f2:	2800      	cmp	r0, #0
 80174f4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80174f8:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80174fc:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8017500:	ed8d 7b00 	vstr	d7, [sp]
 8017504:	ed9d 0b00 	vldr	d0, [sp]
 8017508:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8017518 <__math_divzero+0x28>
 801750c:	2022      	movs	r0, #34	@ 0x22
 801750e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8017512:	b002      	add	sp, #8
 8017514:	f7ff bfbc 	b.w	8017490 <with_errno>
	...

08017520 <__math_invalid>:
 8017520:	eeb0 7b40 	vmov.f64	d7, d0
 8017524:	eeb4 7b47 	vcmp.f64	d7, d7
 8017528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801752c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8017530:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8017534:	d602      	bvs.n	801753c <__math_invalid+0x1c>
 8017536:	2021      	movs	r0, #33	@ 0x21
 8017538:	f7ff bfaa 	b.w	8017490 <with_errno>
 801753c:	4770      	bx	lr

0801753e <__math_check_uflow>:
 801753e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017546:	d102      	bne.n	801754e <__math_check_uflow+0x10>
 8017548:	2022      	movs	r0, #34	@ 0x22
 801754a:	f7ff bfa1 	b.w	8017490 <with_errno>
 801754e:	4770      	bx	lr

08017550 <__math_check_oflow>:
 8017550:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8017570 <__math_check_oflow+0x20>
 8017554:	eeb0 7bc0 	vabs.f64	d7, d0
 8017558:	eeb4 7b46 	vcmp.f64	d7, d6
 801755c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017560:	dd02      	ble.n	8017568 <__math_check_oflow+0x18>
 8017562:	2022      	movs	r0, #34	@ 0x22
 8017564:	f7ff bf94 	b.w	8017490 <with_errno>
 8017568:	4770      	bx	lr
 801756a:	bf00      	nop
 801756c:	f3af 8000 	nop.w
 8017570:	ffffffff 	.word	0xffffffff
 8017574:	7fefffff 	.word	0x7fefffff

08017578 <_init>:
 8017578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801757a:	bf00      	nop
 801757c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801757e:	bc08      	pop	{r3}
 8017580:	469e      	mov	lr, r3
 8017582:	4770      	bx	lr

08017584 <_fini>:
 8017584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017586:	bf00      	nop
 8017588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801758a:	bc08      	pop	{r3}
 801758c:	469e      	mov	lr, r3
 801758e:	4770      	bx	lr
